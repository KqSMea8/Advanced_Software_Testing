<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:14:43 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10531/HBASE-10531.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10531] Revisit how the key byte[] is passed to HFileScanner.seekTo and reseekTo</title>
                <link>https://issues.apache.org/jira/browse/HBASE-10531</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Currently the byte[] key passed to HFileScanner.seekTo and HFileScanner.reseekTo, is a combination of row, cf, qual, type and ts.  And the caller forms this by using kv.getBuffer, which is actually deprecated.  So see how this can be achieved considering kv.getBuffer is removed.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12695174">HBASE-10531</key>
            <summary>Revisit how the key byte[] is passed to HFileScanner.seekTo and reseekTo</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12623342">HBASE-7320</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="ram_krish">ramkrishna.s.vasudevan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 14 Feb 2014 09:37:59 +0000</created>
                <updated>Sat, 21 Feb 2015 23:30:46 +0000</updated>
                            <resolved>Sat, 29 Mar 2014 17:20:37 +0000</resolved>
                                                    <fixVersion>0.99.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13903085" author="ram_krish" created="Mon, 17 Feb 2014 09:12:20 +0000"  >&lt;p&gt;Can we just replace the seekTo, reseekTo, seekBefore with an api accepting just a Cell and deprecate others.  This would ensure that from the underlying byte buffers (what ever format it could be) I could just create a cell from that, it may be based on the codec, and create a cell out of it.  Then from the cell extract the individuals from that and do the comparison.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 @Deprecated
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; seekTo(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] key) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
  @Deprecated
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; seekTo(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] key, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;

  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; seekTo(Cell kv) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @Deprecated
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; reseekTo(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] key) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
  @Deprecated
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; reseekTo(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] key, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;

  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; reseekTo(Cell kv) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 @Deprecated
  &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; seekBefore(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] key) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
  @Deprecated
  &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; seekBefore(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] key, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;

  &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; seekBefore(Cell kv) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13903685" author="mcorgan" created="Tue, 18 Feb 2014 01:53:06 +0000"  >&lt;p&gt;It seems right to me, but do you know why those methods took byte[] vs KeyValue to begin with?&lt;/p&gt;</comment>
                            <comment id="13903829" author="ram_krish" created="Tue, 18 Feb 2014 06:44:15 +0000"  >&lt;p&gt;May be because the value was not really needed in this comparison that happens on the block, and hence only the key part was extracted out and used in these APIs.&lt;/p&gt;</comment>
                            <comment id="13904849" author="stack" created="Wed, 19 Feb 2014 00:08:06 +0000"  >&lt;p&gt;lgtm&lt;/p&gt;

&lt;p&gt;Internally, we take the byte array, presume it a serialized KeyValue and then reconstitute the row for a compare over in a method named compareFlatKey.&lt;/p&gt;</comment>
                            <comment id="13905087" author="ram_krish" created="Wed, 19 Feb 2014 11:13:46 +0000"  >&lt;p&gt;Patch that deprecates and adds new seekTo, reseekTo and seekBefore APIs.&lt;/p&gt;</comment>
                            <comment id="13905755" author="ndimiduk" created="Wed, 19 Feb 2014 17:50:14 +0000"  >&lt;p&gt;Patch looks good to me. I&apos;d rename &lt;tt&gt;Cell kv&lt;/tt&gt; to &lt;tt&gt;Cell key&lt;/tt&gt; so it&apos;s clear to the reader that only the key part is considered.&lt;/p&gt;</comment>
                            <comment id="13905815" author="anoop.hbase" created="Wed, 19 Feb 2014 18:31:14 +0000"  >&lt;p&gt;HFileScanner is @InterfaceAudience.Private   Still we have to do deprecate and then add new API as overloaded? &lt;br/&gt;
It will be better to add the alternate API to use along with @Deprecated.&lt;/p&gt;

&lt;p&gt;nit : There are white spaces in the patch.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; seekTo(Cell kv) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
+        KeyValue keyValue = KeyValueUtil.ensureKeyValue(kv);
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; seekTo(keyValue.getBuffer(), keyValue.getOffset(), keyValue.getLength());
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You will avoid the refercence to keyValue.getBuffer() in coming patches?&lt;/p&gt;

&lt;p&gt;In the code we still refer to deprecated API. Better we can use the new API now.   &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13905846" author="apurtell" created="Wed, 19 Feb 2014 18:46:16 +0000"  >&lt;p&gt;It would be great if we can do an exorcism of private interfaces rather than deprecate them. We did this for KeyValue comparators between 0.96 and 0.98. I get that folks like Phoenix want some measure of internal interface stability, but until 1.0 if the cost is adding technical debt in the form of littering the code with half-broken or fully broken deprecated APIs, it is not worth it. &lt;/p&gt;</comment>
                            <comment id="13906080" author="stack" created="Wed, 19 Feb 2014 21:10:20 +0000"  >&lt;p&gt;Agree w/ &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andrew.purtell%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;andrew.purtell@gmail.com&quot;&gt;Andrew Purtell&lt;/a&gt; comment above&lt;/p&gt;


&lt;p&gt;What is going on below here?  We add an API but then call the old?  Shouldn&apos;t we be going the other way?  The old calling the new?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; seekTo(Cell kv) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
+        KeyValue keyValue = KeyValueUtil.ensureKeyValue(kv);
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; seekTo(keyValue.getBuffer(), keyValue.getOffset(), keyValue.getLength());
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


</comment>
                            <comment id="13906630" author="ram_krish" created="Thu, 20 Feb 2014 05:18:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;Shouldn&apos;t we be going the other way? The old calling the new?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Should be.. I will change that and support with testcases that i works fine.&lt;/p&gt;</comment>
                            <comment id="13906902" author="ram_krish" created="Thu, 20 Feb 2014 12:15:27 +0000"  >&lt;p&gt;The reason I did not add the new way of the API impl is because we may have to change the comparators and related code to go with this mode of working.  So thought instead of giving an empty impl for the new API for now continue the old one.&lt;br/&gt;
Okie, so let me change the required things to get this in as part of this JIRA only.&lt;/p&gt;</comment>
                            <comment id="13911511" author="ram_krish" created="Tue, 25 Feb 2014 12:18:10 +0000"  >&lt;p&gt;One of the major challenge in doing this is to use the SamePrefixComparator where it tries to compare using the common prefix.  In our case the common prefix is not common for the individual components.  For a plain seek/read it works fine. But every where we need to create Keyvalue.createKeyValueFromKey before using the cell way of comparison.&lt;/p&gt;</comment>
                            <comment id="13911848" author="apurtell" created="Tue, 25 Feb 2014 18:30:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;One of the major challenge in doing this is to use the SamePrefixComparator where it tries to compare using the common prefix. In our case the common prefix is not common for the individual components.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can we simply document in SamePrefixComparator javadoc that it might be expensive because of internal allocations and copying.&lt;/p&gt;</comment>
                            <comment id="13912485" author="ram_krish" created="Wed, 26 Feb 2014 03:52:27 +0000"  >&lt;p&gt;Am trying to see if we can make things work using SamePrefixComparator.  &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;But every where we need to create Keyvalue.createKeyValueFromKey before using the cell way of comparison&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This could be a costly operation but if we need to avoid this then the byte[] way of storing the index keys should also be changed to Cells. But that should be done in a seperate JIRA i suppose.&lt;/p&gt;</comment>
                            <comment id="13913181" author="ram_krish" created="Wed, 26 Feb 2014 17:14:21 +0000"  >&lt;p&gt;Will come up with a WIP patch tomorrow.  Some test case failures are there while using reseek with MetaComparator.&lt;/p&gt;</comment>
                            <comment id="13914247" author="ram_krish" created="Thu, 27 Feb 2014 09:18:23 +0000"  >&lt;p&gt;My testcase runs are not getting completed due to envrironment issues.  Attaching a patch to show how this is done.&lt;br/&gt;
Infact as I mentioned earlier doing KeyValue.createKeyFromKeyValue(), is doing unnecessary byte copies.  We should think of avoiding them. &lt;br/&gt;
Also the comparison should be done between two cells.  The right hand side of the cell is generally the keys from the bytebuffer or the index keys. So if we can have a constructor that creates a cell from the bytebuffer without doing a copy it would be of great help here.  I have not removed the old code path still.  Will upload in RB also.&lt;/p&gt;</comment>
                            <comment id="13914538" author="hadoopqa" created="Thu, 27 Feb 2014 14:00:48 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12631486/HBASE-10531_1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12631486/HBASE-10531_1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12631486&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 22 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 4 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 10 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +  public static int findCommonPrefixInQualifierPart(Cell left, Cell right, int qualifierCommonPrefix) {&lt;br/&gt;
+  public static int compareRowsWithCommonFamilyPrefix(Cell left, Cell right, int familyCommonPrefix) {&lt;br/&gt;
+  public static int compareRowsWithQualifierFamilyPrefix(Cell left, Cell right, int qualCommonPrefix) {&lt;br/&gt;
+      if (leftCell.getFamilyLength() + leftCell.getQualifierLength() == 0 &amp;amp;&amp;amp; leftCell.getTypeByte() == Type.Minimum.getCode()) {&lt;br/&gt;
+      if (rightCell.getFamilyLength() + rightCell.getQualifierLength() == 0 &amp;amp;&amp;amp; rightCell.getTypeByte() == Type.Minimum.getCode()) {&lt;br/&gt;
+        return Bytes.compareTo(leftCell.getFamilyArray(), leftCell.getFamilyOffset(), leftCell.getFamilyLength(),&lt;br/&gt;
+      int diff = compareFamilies(leftCell.getFamilyArray(), leftCell.getFamilyOffset(), leftCell.getFamilyLength(),&lt;br/&gt;
+      if (key.getFamilyLength() + key.getQualifierLength() == 0 &amp;amp;&amp;amp; key.getTypeByte() == Type.Minimum.getCode()) {&lt;br/&gt;
+      if (right.getFamilyLength() + right.getQualifierLength() == 0 &amp;amp;&amp;amp; right.getTypeByte() == Type.Minimum.getCode()) {&lt;br/&gt;
+    return comparator.compare(key, KeyValue.createKeyValueFromKey(bb.array(), bb.arrayOffset(), bb.limit()));&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8833//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13915605" author="ram_krish" created="Fri, 28 Feb 2014 09:41:02 +0000"  >&lt;p&gt;Ping !!!&lt;/p&gt;</comment>
                            <comment id="13916985" author="ram_krish" created="Sat, 1 Mar 2014 08:31:32 +0000"  >&lt;p&gt;If the way this patch proceed is fine, can raise further tasks to do better cell comparisons instead of doing byte copies for all the cells on the right hand side like the block keys, fake keys etc.&lt;/p&gt;</comment>
                            <comment id="13917234" author="lhofhansl" created="Sun, 2 Mar 2014 00:09:50 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Cell right = KeyValue.createKeyValueFromKey(current.keyBuffer, 0, current.keyLength);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Eventually we should be able to have new implementation of Cell where we just the row/family/column/ts without copying anything (actually that is part of the goal).&lt;br/&gt;
Until do that, though, it seems better to stay using keyBuffer directly, otherwise we&apos;ll add yet another copy to an already expensive part of the scanning.&lt;/p&gt;</comment>
                            <comment id="13917876" author="ram_krish" created="Mon, 3 Mar 2014 09:37:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;Eventually we should be able to have new implementation of Cell where we just the row/family/column/ts without copying anything (actually that is part of the goal).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes Lars.  That is mentioned in my comments.  Currently we need to make a cell and make changes to the code to deal with Cells.  That is why from the available key I made cell(which involves a copy).&lt;br/&gt;
To do this we need some changes on some of the places in the code where the keys are getting created.  So we need to change that.&lt;/p&gt;

{Edit}
&lt;p&gt; : comment re phrased&lt;/p&gt;</comment>
                            <comment id="13919313" author="ram_krish" created="Tue, 4 Mar 2014 11:53:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;otherwise we&apos;ll add yet another copy to an already expensive part of the scanning.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I have a way to work around this.  Now as we are creating a cell here for comparision, I will create a new KV here and that will not do any copy.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class DerivedKeyValue &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; KeyValue {

    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length = 0;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset = 0;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] b;

    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; DerivedKeyValue(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] b, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length) {
      &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(b,offset,length);
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.b = b;
      setKeyOffset(offset);
      setKeyLength(length);
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.length = length;
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.offset = offset;
    }

    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setKeyLength(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; kLength) {
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.length = kLength;
    }

    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setKeyOffset(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; kOffset) {
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.offset = kOffset;
    }

    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getKeyOffset() {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.offset;
    }
    
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] getRowArray() {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO Auto-generated method stub
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; b;
    }
    
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getRowOffset() {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO Auto-generated method stub
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; getKeyOffset() + Bytes.SIZEOF_SHORT;
    }
    
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] getFamilyArray() {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO Auto-generated method stub
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; b;
    }
    
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; getFamilyLength() {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO Auto-generated method stub
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.b[getFamilyOffset() - 1];
    }
    
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getFamilyOffset() {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO Auto-generated method stub
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.offset  + Bytes.SIZEOF_SHORT + getRowLength() + Bytes.SIZEOF_BYTE;
    }
    
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] getQualifierArray() {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO Auto-generated method stub
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; b;
    }
    
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getQualifierLength() {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO Auto-generated method stub
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; getQualifierLength(getRowLength(),getFamilyLength());
    }
    
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getQualifierOffset() {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO Auto-generated method stub
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;.getQualifierOffset();
    }
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getKeyLength() {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO Auto-generated method stub
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; length;
    }
    @Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt; getRowLength() {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Bytes.toShort(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.b, getKeyOffset());
    }
    
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getQualifierLength(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rlength, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; flength) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; getKeyLength() - (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;) getKeyDataStructureSize(rlength, flength, 0);
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now here if you see the only difference between a normal Kv and the one craeted by KeyValue.createKeyValueFromKeyValue, we actually don&apos;t need the first 8 bytes(ROW_OFFSET).  so by avoiding those bytes if we are able to implement our own getKeyLength, getRowOffset, etc we will be able to a proper comparison. Now we can compare the individual rows, families, qualifiers individually.  What you think?  so we avoid byte copy but we will create a new object.  But I think that is going to be cheaper.&lt;br/&gt;
So we can create a cell like &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Cell r = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; KeyValue.DerivedKeyValue(arr[mid], 0, arr[mid].length);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13919702" author="lhofhansl" created="Tue, 4 Mar 2014 17:55:13 +0000"  >&lt;p&gt;Nice.&lt;/p&gt;</comment>
                            <comment id="13920769" author="ram_krish" created="Wed, 5 Mar 2014 11:47:31 +0000"  >&lt;p&gt;I have uploaded a patch that uses an inner class KeyAloneKeyValue that does not copy the bytes.&lt;br/&gt;
I have not yet removed the duplicate code.  Let me know what you think on this. &lt;/p&gt;</comment>
                            <comment id="13920772" author="ram_krish" created="Wed, 5 Mar 2014 11:51:59 +0000"  >&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/18570/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/18570/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13920799" author="ram_krish" created="Wed, 5 Mar 2014 12:36:35 +0000"  >&lt;p&gt;One interesting thing is running PerformanceEvaluation with 3 threads randomReads and sequentialReads the code with copy performs faster. (!!)&lt;/p&gt;</comment>
                            <comment id="13923538" author="ram_krish" created="Fri, 7 Mar 2014 04:33:03 +0000"  >&lt;p&gt;We had an internal discussion on this&lt;br/&gt;
As mentioned in my previous comments,&lt;br/&gt;
Making KVs to cells makes more sense in the Read path.  And to do that we need Cells in the readers and DBE seekers.&lt;br/&gt;
There are places where we do comparison with the index keys (doing a binary search) and inside a block we compareflatkeys to see if we have gone past our expected keys.&lt;br/&gt;
So when we are defining a cell which does not bother about how the key part looks like and does not need an api like getKey(), getKeyOffset, getKeyLength() then we are bound to depend on the cell structure.  Hence we need to do our comparisons with cells on both sides.  Hence raised &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10680&quot; title=&quot;Check if the block keys, index keys can be used as Cells instead of byte[]&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10680&quot;&gt;&lt;del&gt;HBASE-10680&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
Any more reviews on this? Thanks Lars for having a look at it.&lt;/p&gt;
</comment>
                            <comment id="13923548" author="lhofhansl" created="Fri, 7 Mar 2014 04:46:06 +0000"  >&lt;blockquote&gt;&lt;p&gt;code with copy performs faster.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s unexpected. These both generate Get requests, right?&lt;/p&gt;

&lt;p&gt;I was looking at this code again. In SQM.getKeyForNextColumn and SQL.getKeyForNextRow make a brandnew KV (copy of key, FQ, CQ) just to pass down a search key.&lt;br/&gt;
If we already create one of your derived KVs there we&apos;d save yet another copy.&lt;/p&gt;</comment>
                            <comment id="13923560" author="ram_krish" created="Fri, 7 Mar 2014 04:54:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;If we already create one of your derived KVs there we&apos;d save yet another copy.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. Should be.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;That&apos;s unexpected. These both generate Get requests, right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Am not getting the real reason for that.  May be can give another try with the YCSB.  That would be better I feel.  &lt;/p&gt;</comment>
                            <comment id="13923562" author="ram_krish" created="Fri, 7 Mar 2014 04:57:59 +0000"  >&lt;p&gt;One nice observation from Anoop (may not be fitting to this JIRA but in context with Cell). with the off heap efforts and having our Kv byte buffers moving to offheap, if we try to create Cells on them then we have to do a byte copy from the offheap array to on heap array. (Need to check anyway).  So should our cell interfaces have support to work with ByteBuffers also.  We have not digged in deeper but can keep an eye on this. &lt;/p&gt;</comment>
                            <comment id="13923567" author="lhofhansl" created="Fri, 7 Mar 2014 05:06:20 +0000"  >&lt;p&gt;Yeah, eventually we should switch exclusively to ByteBuffers as that is the only construct that can wrap data on and off heap.&lt;/p&gt;</comment>
                            <comment id="13926031" author="ram_krish" created="Mon, 10 Mar 2014 18:44:34 +0000"  >&lt;p&gt;Able to get ~2% difference without copying bytes when using YCSB. (tested with random reads with 5  clients) and took an average over 5 runs. Without copying bytes it seems to be better.&lt;/p&gt;</comment>
                            <comment id="13926159" author="lhofhansl" created="Mon, 10 Mar 2014 20:30:01 +0000"  >&lt;p&gt;Should we tackle the ByteBuffer stuff now (in another jira)? Might be nice anyway. No need to keep byte[], offset, length around, just a ByteBuffer. Is that planned as part of the offheap work anyway?&lt;/p&gt;</comment>
                            <comment id="13929940" author="ram_krish" created="Tue, 11 Mar 2014 04:32:28 +0000"  >&lt;p&gt;Yes, we can raise a JIRA.  But working on something with respect to the readers and writers.  That may first need a change to cell in place of KVs. I think as a first level can we get this in. This would help in making changes the index keys/block indices also.  What do you think?&lt;br/&gt;
Some changes may be required in the DBE interfaces also.  That we can raise a seperate JIRA.&lt;/p&gt;</comment>
                            <comment id="13929980" author="anoop.hbase" created="Tue, 11 Mar 2014 05:48:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should we tackle the ByteBuffer stuff now (in another jira)? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1.  This will get more clear pictures once we are into the offheap stuff. So along with that we can tackle this also.&lt;/p&gt;</comment>
                            <comment id="13929982" author="anoop.hbase" created="Tue, 11 Mar 2014 05:49:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;Without copying bytes it seems to be better.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So as per this result, what is the % degrade over the current way (If any such degrade)&lt;/p&gt;</comment>
                            <comment id="13930100" author="ram_krish" created="Tue, 11 Mar 2014 08:56:16 +0000"  >&lt;p&gt;So with the same environment, with same setup and random reads with 5 clients the difference between no copy and the exisiting way was about ~0.2 to 0.5 % degradation.  But that is not very scientific. &lt;/p&gt;</comment>
                            <comment id="13932698" author="stack" created="Thu, 13 Mar 2014 00:33:44 +0000"  >&lt;p&gt;So not copying is faster using YCSB?&lt;/p&gt;

&lt;p&gt;You need to add good tests for the additions to CellComparator.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;+    public int compareFlatKey(Cell left, Cell right) {&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What is a &apos;flat&apos; key?   Why do we have a Cell compare in KV?  Should it be in CellUtil or CellComparator?  Or this is how KV is now?  It takes Cells?  It seems so.&lt;/p&gt;

&lt;p&gt;Here too.  Why in KV are we talking Cells?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public int compareTimestamps(final KeyValue left, final KeyValue right) {&lt;br/&gt;
+    public int compareTimestamps(final Cell left, final Cell right) {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;... and here:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public int compareRows(final KeyValue left, final KeyValue right) {&lt;br/&gt;
+    public int compareRows(final Cell left, final Cell right) {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That said, nice to see our use of Cell in KV compares.&lt;/p&gt;

&lt;p&gt;But I&apos;d say KV methods should take KVs, not Cells?  If it takes Cells, could be comparing a non-KV and it could actually work?  Is this what we want?  Maybe this is just uglyness left over from how KV has been used/abused up to this?  But I&apos;m thinking these compares would be Cell compares out in a CellUtil or CellCompare class? &lt;/p&gt;

&lt;p&gt;You have long lines in here Mr. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You should mark these with @VisibleForTesting&lt;/p&gt;

&lt;p&gt;+      // Only for test case purpose&lt;/p&gt;

&lt;p&gt;It is good that the byte compares added are not public.&lt;/p&gt;

&lt;p&gt;Shouldn&apos;t this be unsupportedoperationexception in your new key only class?&lt;/p&gt;

&lt;p&gt;+    public byte[] getValueArray() &lt;/p&gt;
{
+      return HConstants.EMPTY_BYTE_ARRAY;
+    }

&lt;p&gt;Same for value offset and length.&lt;/p&gt;

&lt;p&gt;Tags too?&lt;/p&gt;

&lt;p&gt;What is difference between KeyAloneKeyValue and a copy of the original Key but with no value?  I am wary introducing new type?  Or, a new type that just threw UnsupportedOperationException when you tried to get a value...&lt;/p&gt;

&lt;p&gt;Why we have to create new key when we pass to a comparator?  Is it because we need to parse the bytes so can pass in an Object?  That makes sense. I see now why it is needed.  Suggest rename it as KeyOnlyKeyValue rather than KeyAlongKV.    Also, the inner class needs a bit of a class comment on why it is needed: i.e. you have a byte array but comparator wants a Cell of some type.... rather than parse whole KV byte buffer....  This is used in the case where we have key only bytes; i.e. the block index?&lt;/p&gt;

&lt;p&gt;Is passing 0 correct in the below?&lt;/p&gt;

&lt;p&gt;+      return comparator.compareFlatKey(key,&lt;br/&gt;
+          new KeyValue.KeyAloneKeyValue(current.keyBuffer, 0, current.keyLength));&lt;/p&gt;

&lt;p&gt;Should it be an offset?  We do this &apos;0&apos; in a few places.&lt;/p&gt;

&lt;p&gt;Yeah, what is a &apos;flat&apos; key?  Is it key only?&lt;/p&gt;

&lt;p&gt;So, this is the replacement: seekToKeyInBlock ?  Purge the old stuff!!!!&lt;/p&gt;

&lt;p&gt;We have tests for the above?&lt;/p&gt;

&lt;p&gt;Should this be a CellComparator rather than a KVComparator:&lt;/p&gt;

&lt;p&gt;+&lt;br/&gt;
+    public int compareKey(KVComparator comparator, Cell key);&lt;/p&gt;

&lt;p&gt;(Sorry if you answered this already).&lt;/p&gt;

&lt;p&gt;Needs doc:  +  public static int binarySearch(byte[][] arr, Cell leftCell, RawComparator&amp;lt;Cell&amp;gt; comparator) &lt;/p&gt;
{

The array of byte arrays has Cells in it or it seems KVs?    Will it always be arrays of byte arrays?  Or will the binary search be in a block?  Or is the &apos;arr&apos; here a block?

Formatting:

-        forceBeforeOnExactMatch);
-    }
&lt;p&gt;else&lt;/p&gt;
{
+          forceBeforeOnExactMatch);
+    }
&lt;p&gt; else {&lt;br/&gt;
       return seekToOrBeforeUsingPositionAtOrAfter(keyOnlyBytes, offset, length,&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;forceBeforeOnExactMatch);&lt;br/&gt;
+          forceBeforeOnExactMatch);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We creating a KV where we did not before here?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;return this.delegate.seekBefore(key, offset, length);&lt;br/&gt;
+        return seekBefore(new KeyValue.KeyAloneKeyValue(key, offset, length));&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Or is it that I am just misreading? (It is being created elsewhere anyways)&lt;/p&gt;

&lt;p&gt;Why we add these byte-based methods?&lt;/p&gt;

&lt;p&gt;+      public int reseekTo(byte[] key) throws IOException {&lt;/p&gt;

&lt;p&gt;+      public int reseekTo(byte[] key, int offset, int length)&lt;/p&gt;

&lt;p&gt;We should let this out?&lt;/p&gt;

&lt;p&gt;+      public org.apache.hadoop.hbase.io.hfile.HFile.Reader getReader() {&lt;/p&gt;

&lt;p&gt;Any chance of micro benchmarks on difference between this patch and what was there before?&lt;/p&gt;

&lt;p&gt;Why we adding a method that passes key as bytes?&lt;/p&gt;

&lt;p&gt;+    public BlockWithScanInfo loadDataBlockWithScanInfo(final byte[] key, int keyOffset,&lt;br/&gt;
+        int keyLength, HFileBlock currentBlock, boolean cacheBlocks,&lt;br/&gt;
+        boolean pread, boolean isCompaction)&lt;br/&gt;
+        throws IOException {&lt;/p&gt;

&lt;p&gt;The ByteBuffers here come from where?&lt;/p&gt;

&lt;p&gt;+    static int locateNonRootIndexEntry(ByteBuffer nonRootBlock, Cell key, KVComparator comparator) {&lt;br/&gt;
+      int entryIndex = binarySearchNonRootIndex(key, nonRootBlock, comparator);&lt;/p&gt;


&lt;p&gt;Yeah, why you add these byte array versions?&lt;/p&gt;

&lt;p&gt;+    public boolean seekBefore(byte[] key, int offset, int length) throws IOException {&lt;br/&gt;
+      HFileBlock seekToBlock = reader.getDataBlockIndexReader().seekToDataBlock(key, offset,&lt;br/&gt;
+          length, block, cacheBlocks, pread, isCompaction);&lt;/p&gt;


&lt;p&gt;Is there duplicated code between HFile2 and HFile3?&lt;/p&gt;

&lt;p&gt;Just remove?&lt;/p&gt;

&lt;p&gt;+  @Deprecated&lt;br/&gt;
   int seekTo(byte[] key) throws IOException;&lt;br/&gt;
+  @Deprecated&lt;br/&gt;
   int seekTo(byte[] key, int offset, int length) throws IOException;&lt;/p&gt;

&lt;p&gt;This looks good:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;int result = s.reseekTo(k.getBuffer(), k.getKeyOffset(), k.getKeyLength());&lt;br/&gt;
+    int result = s.reseekTo(k);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;... and this:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;int ret = scanner.reseekTo(getLastOnCol(curr).getKey());&lt;br/&gt;
+    int ret = scanner.reseekTo(getLastOnCol(curr));&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;We need this: TestNewReseekTo  ? Why not just change the current test to use Cells instead?&lt;/p&gt;

&lt;p&gt;Is TestNewSeekTo a copy of the old code?  If so, just replace the byte based with the new Cell based?&lt;/p&gt;

&lt;p&gt;Patch looks great otherwise.  Good on you &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;&lt;/p&gt;





</comment>
                            <comment id="13933021" author="ram_krish" created="Thu, 13 Mar 2014 09:07:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;But I&apos;d say KV methods should take KVs, not Cells? If it takes Cells, could be comparing a non-KV and it could actually work? Is this what we want? Maybe this is just uglyness left over from how KV has been used/abused up to this? But I&apos;m thinking these compares would be Cell compares out in a CellUtil or CellCompare class?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;See &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10532&quot; title=&quot;Make KeyValueComparator in KeyValue to accept Cell instead of KeyValue.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10532&quot;&gt;&lt;del&gt;HBASE-10532&lt;/del&gt;&lt;/a&gt;.  All the above compares have been moved over there.  But for this JIRA I have still maintained things as KVComparator. Did not want to change the KVComparator part here. I could change that also and call CellUtil or CellComparator. Let me see how to handle that here.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Shouldn&apos;t this be unsupportedoperationexception in your new key only class?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think yes.  But I faced some issue, hence added it. Let me check it once again in the next patch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why we have to create new key when we pass to a comparator?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will add suitable comments.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Should it be an offset? We do this &apos;0&apos; in a few places.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Where ever offset is needed I have used that. whereever 0 is needed I have used 0.  I can cross check once again.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;So, this is the replacement: seekToKeyInBlock ? Purge the old stuff!!!!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I did not do that just for sake of easy review. Will purge all the duplicate code.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;{ The array of byte arrays has Cells in it or it seems KVs? Will it always be arrays of byte arrays?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I would suggest in the follow up JIRAs we can change to Cells? rather than byte[]&lt;/p&gt;

&lt;p&gt;All the last comments are about the refactoring part. I have not removed the old code and hence you say them. I can remove them too.  testReseek() i will change to work with Cells, but thing to be noted is that previously it was working with RawBytecomparator, am planning to change to KVComparator only.  Same with TestSeekTo.&lt;/p&gt;</comment>
                            <comment id="13933022" author="ram_krish" created="Thu, 13 Mar 2014 09:09:12 +0000"  >&lt;p&gt;Thanks for the review Stack.  I have an rb link also, which would help to review better.  Will keep updating my patch over there too.&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/18570/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/18570/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Let me come up with a complete micro benchmark after updating the comments and remvoing the duplicate code.&lt;/p&gt;</comment>
                            <comment id="13933071" author="ram_krish" created="Thu, 13 Mar 2014 10:29:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;The ByteBuffers here come from where?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It is already as per the existing logic.  &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        ByteBuffer buffer = block.getBufferWithoutHeader();
        index = locateNonRootIndexEntry(buffer, key, comparator);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13933087" author="ram_krish" created="Thu, 13 Mar 2014 10:49:39 +0000"  >&lt;p&gt;I think for now we need to add Cell comparison methods in KVComparator also, because we have lot of code internally that references this Kvcomparator and calls comparator.compareXXX().&lt;br/&gt;
So I would suggest we could make the change in using a CellComparator in another JIRA.  If not for now I will do this&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; compareRowKey(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Cell left, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Cell right) {
      CellComparator.compareRows(left, right);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13933149" author="ram_krish" created="Thu, 13 Mar 2014 12:04:36 +0000"  >&lt;p&gt;Am also planning to remove the RawBytesComparator in all the testcases.  Once changing to cell this comparison may not work correctly.&lt;/p&gt;</comment>
                            <comment id="13933551" author="apurtell" created="Thu, 13 Mar 2014 17:09:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;(Ram) So should our cell interfaces have support to work with ByteBuffers also. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ByteRange&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;(Lars) we should switch exclusively to ByteBuffers as that is the only construct that can wrap data on and off heap.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, but ByteRange, not BB&lt;/p&gt;</comment>
                            <comment id="13933610" author="anoop.hbase" created="Thu, 13 Mar 2014 17:41:37 +0000"  >&lt;p&gt;So we can have one off heap buffer backed ByteRange impl also (During the offheap work).&lt;/p&gt;</comment>
                            <comment id="13933617" author="apurtell" created="Thu, 13 Mar 2014 17:46:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;So we can have one off heap buffer backed ByteRange impl also (During the offheap work)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right. ByteRange will need to evolve, but we can take care to avoid issues with using ByteBuffer directly that are suboptimal for us, such as the inability to inline get* and put* methods, or bounds checking we can elide. Also we could have multiple allocators for on and off heap arenas, at least in the beginning while we are sorting this all out, backed by JDK ByteBuffer, Netty ByteBuf, IBM Java BoxedPackedObject (just an example of something more esoteric), and so on. &lt;/p&gt;</comment>
                            <comment id="13934903" author="ram_krish" created="Fri, 14 Mar 2014 11:45:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;Shouldn&apos;t this be unsupportedoperationexception in your new key only class?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For the value part we can throw UnSupportedException but for the Tag part we cannot because in the latest comparisons we do we also compare the seqid added during WAL replay which is inside a tag.  So to find an exact key we may end up comparing the tag with seqid also.&lt;/p&gt;</comment>
                            <comment id="13934948" author="ram_krish" created="Fri, 14 Mar 2014 12:40:02 +0000"  >&lt;p&gt;Updated patch.  Removes repetitive code. Addresses review comments.  &lt;br/&gt;
Stack, the changes from using KVComparator to CellComparator has to be done in another issue.  For now using the CellComparator and calling it in KVComparator. &lt;br/&gt;
Reviews and comments are welcome.&lt;/p&gt;</comment>
                            <comment id="13934954" author="ram_krish" created="Fri, 14 Mar 2014 12:53:38 +0000"  >&lt;p&gt;I think some problem with the RB.  Getting this error&lt;br/&gt;
&apos;The file &quot;hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java&quot; (revision 18d54f8) was not found in the repository&apos;.&lt;br/&gt;
HFilePerformanceEvaluation and TestHFilePerformance are still using KeyValue.RawBytesComparator. Can we change that?  &lt;br/&gt;
Will prepare a micro benchmark report in the beginning of next week.&lt;/p&gt;</comment>
                            <comment id="13934979" author="hadoopqa" created="Fri, 14 Mar 2014 13:17:39 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12634704/HBASE-10531_3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12634704/HBASE-10531_3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12634704&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 21 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8995//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8995//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13937459" author="ram_krish" created="Mon, 17 Mar 2014 05:03:40 +0000"  >&lt;p&gt;Updated patch. Previous patch did not apply cleanly. So updated against latest code.&lt;/p&gt;</comment>
                            <comment id="13937494" author="hadoopqa" created="Mon, 17 Mar 2014 06:25:55 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12635034/HBASE-10531_4.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12635034/HBASE-10531_4.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12635034&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 26 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 5 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 6 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +  public static int compareRowsWithCommonFamilyPrefix(Cell left, Cell right, int familyCommonPrefix) {&lt;br/&gt;
+  public static int compareRowsWithCommmonQualifierPrefix(Cell left, Cell right, int qualCommonPrefix) {&lt;br/&gt;
+      if (key.getFamilyLength() + key.getQualifierLength() == 0 &amp;amp;&amp;amp; key.getTypeByte() == Type.Minimum.getCode()) {&lt;br/&gt;
+      if (right.getFamilyLength() + right.getQualifierLength() == 0 &amp;amp;&amp;amp; right.getTypeByte() == Type.Minimum.getCode()) {&lt;br/&gt;
+    return comparator.compare(key, new KeyValue.KeyOnlyKeyValue(bb.array(), bb.arrayOffset(), bb.limit()));&lt;br/&gt;
+                  &quot;Seeking for a key in bottom of file, but key exists in top of file, failed on seekBefore(midkey)&quot;);&lt;br/&gt;
+      BlockWithScanInfo blockWithScanInfo = loadDataBlockWithScanInfo(key, currentBlock, cacheBlocks,&lt;br/&gt;
+    public BlockWithScanInfo loadDataBlockWithScanInfo(Cell key, HFileBlock currentBlock, boolean cacheBlocks,&lt;br/&gt;
+    static int binarySearchNonRootIndex(Cell key, ByteBuffer nonRootIndex, KVComparator comparator) {&lt;br/&gt;
+                      new KeyValue.KeyOnlyKeyValue(nextIndexedKey, 0, nextIndexedKey.length)) &amp;lt; 0)) {&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.TestCheckTestClasses&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9022//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13937735" author="ram_krish" created="Mon, 17 Mar 2014 12:19:04 +0000"  >&lt;p&gt;Wraps the long lines and introduces the category for the failed test.&lt;/p&gt;</comment>
                            <comment id="13937741" author="ram_krish" created="Mon, 17 Mar 2014 12:29:41 +0000"  >&lt;p&gt;Reattaching patch.&lt;/p&gt;</comment>
                            <comment id="13937765" author="ram_krish" created="Mon, 17 Mar 2014 13:02:49 +0000"  >&lt;p&gt;Did some benchmarks&lt;br/&gt;
Mainly took a reading with single node and ran YCSB for pure reads (gets) and sequential scans.&lt;br/&gt;
The gets were averaged over 50 runs&lt;br/&gt;
Without patch&lt;br/&gt;
Throughput : 1418.42019 ops/sec&lt;br/&gt;
With patch&lt;br/&gt;
Throughput : 1422.117704&lt;/p&gt;

&lt;p&gt;For scans averaged over 15 runs&lt;br/&gt;
Without patch &lt;br/&gt;
Throughput :351.0178049&lt;br/&gt;
With patch&lt;br/&gt;
Throughput : 351.4325864&lt;/p&gt;

&lt;p&gt;Every run tries to perform 50000 operations.  So overall I don&apos;t find much difference in the working of reads with and without patch.  I have take the plain case(no encoding).  I can add results with some encodings like Fast_diff also.&lt;/p&gt;</comment>
                            <comment id="13937857" author="hadoopqa" created="Mon, 17 Mar 2014 14:31:47 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12635069/HBASE-10531_5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12635069/HBASE-10531_5.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12635069&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 26 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +      return loadBlockAndSeekToKey(blockWithScanInfo.getHFileBlock(), blockWithScanInfo.getNextIndexedKey(), rewind, key,&lt;br/&gt;
+      KeyValue cell = new KeyValue(k , Bytes.toBytes(&quot;f&quot;), Bytes.toBytes(&quot;q&quot;), Bytes.toBytes(&quot;val&quot;));&lt;br/&gt;
+        + Bytes.toStringBinary(keys&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;) + &quot;)&quot;, 0, scanner.seekTo(KeyValue.createKeyValueFromKey(keys&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;)));&lt;br/&gt;
+        kv = new KeyValue(Bytes.toBytes(key), Bytes.toBytes(&quot;family&quot;),Bytes.toBytes(&quot;qual&quot;),Bytes.toBytes(value));&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestMultiParallel&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestFromClientSideWithCoprocessor&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestMinorCompaction&lt;br/&gt;
                  org.apache.hadoop.hbase.io.hfile.TestHFileSeek&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestFromClientSide&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestBlocksRead&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestDistributedLogSplitting&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9026//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13939087" author="ram_krish" created="Tue, 18 Mar 2014 11:33:37 +0000"  >&lt;p&gt;All the failed test cases passes with this.  Note that, for the blooms and the metaindexReader we still go with RawBytescomparator.  So HFileBlockIndex.rootBlockContainingKey() is retained.&lt;/p&gt;</comment>
                            <comment id="13939179" author="hadoopqa" created="Tue, 18 Mar 2014 13:25:20 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12635282/HBASE-10531_6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12635282/HBASE-10531_6.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12635282&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 26 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +      return loadBlockAndSeekToKey(blockWithScanInfo.getHFileBlock(), blockWithScanInfo.getNextIndexedKey(), rewind, key,&lt;br/&gt;
+      KeyValue cell = new KeyValue(k , Bytes.toBytes(&quot;f&quot;), Bytes.toBytes(&quot;q&quot;), Bytes.toBytes(&quot;val&quot;));&lt;br/&gt;
+        + Bytes.toStringBinary(keys&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;) + &quot;)&quot;, 0, scanner.seekTo(KeyValue.createKeyValueFromKey(keys&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;)));&lt;br/&gt;
+        kv = new KeyValue(Bytes.toBytes(key), Bytes.toBytes(&quot;family&quot;),Bytes.toBytes(&quot;qual&quot;),Bytes.toBytes(value));&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9032//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13939473" author="ram_krish" created="Tue, 18 Mar 2014 16:59:56 +0000"  >&lt;p&gt;Am very sorry. I was focussing on the test case and forgot wrapping the lines.&lt;/p&gt;</comment>
                            <comment id="13939499" author="ram_krish" created="Tue, 18 Mar 2014 17:26:00 +0000"  >&lt;p&gt;Once review is done will update patch. Stack is reviewing, more reviews welcome.&lt;/p&gt;</comment>
                            <comment id="13940193" author="ram_krish" created="Wed, 19 Mar 2014 05:22:18 +0000"  >&lt;p&gt;Updated patch.  Addresses the review comments.  Fixes long lines and testcase passes with this.&lt;br/&gt;
Stack had a point saying this patch may slow down in the read path as we are now changing a simple byte[] comparison to creating an object and then comparing.  But to have cells in the read path we need to go in phases.  When I tried to change everywhere to cells the changes were big and difficult to follow.  After this patch if we are able to change the DBE to work with Cells then we will be in a better shape to work with Cells.  Also the comparators needs to be changed.&lt;/p&gt;</comment>
                            <comment id="13940264" author="hadoopqa" created="Wed, 19 Mar 2014 07:25:36 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12635491/HBASE-10531_7.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12635491/HBASE-10531_7.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12635491&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 32 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9041//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13940845" author="apurtell" created="Wed, 19 Mar 2014 19:00:12 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;I reviewed the patch as a transitional change and the refactoring looks good to me. Also followed along up on reviewboard where Stack gave this a good look. &lt;/p&gt;

&lt;p&gt;What are the follow up JIRAs? Maybe put a comment here leading to them. &lt;/p&gt;</comment>
                            <comment id="13941036" author="stack" created="Wed, 19 Mar 2014 21:42:15 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Add followup jiras here as per Andrew.&lt;/p&gt;</comment>
                            <comment id="13941414" author="ram_krish" created="Thu, 20 Mar 2014 05:40:55 +0000"  >&lt;p&gt;The releated JIRAs include the one added as subtask in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7320&quot; title=&quot;Remove KeyValue.getBuffer()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7320&quot;&gt;HBASE-7320&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7319&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-7319&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10680&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-10680&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10800&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-10800&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10801&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-10801&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Doing &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10680&quot; title=&quot;Check if the block keys, index keys can be used as Cells instead of byte[]&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10680&quot;&gt;&lt;del&gt;HBASE-10680&lt;/del&gt;&lt;/a&gt; in a way could avoid creation of the new type of KeyValue because both sides will become cell. &lt;/p&gt;</comment>
                            <comment id="13941418" author="anoop.hbase" created="Thu, 20 Mar 2014 05:49:04 +0000"  >&lt;p&gt;public static int compareRowsWithCommonFamilyPrefix(Cell left, Cell right, int familyCommonPrefix)&lt;br/&gt;
This compares 2 families considering common part . Better name can be compareFamiliesWithCommonPrefix   ?&lt;br/&gt;
Similar case with compareRowsWithCommonQualifierPrefix&lt;/p&gt;
</comment>
                            <comment id="13941423" author="ram_krish" created="Thu, 20 Mar 2014 05:54:12 +0000"  >&lt;p&gt;Sure.. I would wait for your review also, before proceeding with the commit.&lt;/p&gt;</comment>
                            <comment id="13942746" author="ram_krish" created="Fri, 21 Mar 2014 03:46:48 +0000"  >&lt;p&gt;Any more comments &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;? If not will  update your comments and go for the commit.&lt;/p&gt;</comment>
                            <comment id="13942977" author="ram_krish" created="Fri, 21 Mar 2014 11:16:28 +0000"  >&lt;p&gt;Same patch as in RB&lt;/p&gt;</comment>
                            <comment id="13942980" author="hadoopqa" created="Fri, 21 Mar 2014 11:23:28 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12635994/HBASE-10531_8.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12635994/HBASE-10531_8.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12635994&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 32 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9061//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9061//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13943003" author="ram_krish" created="Fri, 21 Mar 2014 12:19:28 +0000"  >&lt;p&gt;Latest commits did not allow the patch to compile&lt;/p&gt;</comment>
                            <comment id="13943048" author="hadoopqa" created="Fri, 21 Mar 2014 13:25:25 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12636008/HBASE-10531_9.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12636008/HBASE-10531_9.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12636008&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 32 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestBlocksScanned&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9062//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13948157" author="ram_krish" created="Wed, 26 Mar 2014 17:15:15 +0000"  >&lt;p&gt;Latest patch.  All test cases passes with this.  The bug in the SamePrefixComparator in previous patch has been corrected.&lt;/p&gt;</comment>
                            <comment id="13948408" author="hadoopqa" created="Wed, 26 Mar 2014 20:29:25 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12636953/HBASE-10531_12.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12636953/HBASE-10531_12.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12636953&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 34 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 6 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +                    &amp;amp;&amp;amp; qualCommonPrefix &amp;lt; (current.lastCommonPrefix - (3 + right.getRowLength() + right&lt;br/&gt;
+    List&amp;lt;DataBlockEncoder.EncodedSeeker&amp;gt; encodedSeekers = new ArrayList&amp;lt;DataBlockEncoder.EncodedSeeker&amp;gt;();&lt;br/&gt;
+    HFileBlockEncodingContext encodingCtx = getEncodingContext(Compression.Algorithm.NONE, encoding);&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9100//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13948888" author="ram_krish" created="Thu, 27 Mar 2014 04:50:13 +0000"  >&lt;p&gt;Will wrap the long lines before commit.  Should be the final patch as things looks fine.&lt;br/&gt;
TestSeekToblockWithEncoders verifies that part of the code where the commonprefix is getting used while reading with encoders.  Once this goes in we could start targetting other issues also.&lt;/p&gt;</comment>
                            <comment id="13950349" author="ram_krish" created="Fri, 28 Mar 2014 04:23:27 +0000"  >&lt;p&gt;Planning to commit this today EOD.  Pls have look at this. Thought I got 2 +1s there is a change done in the samePrefixComparator code. &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;br/&gt;
Can you have a look?&lt;/p&gt;</comment>
                            <comment id="13950354" author="anoop.hbase" created="Fri, 28 Mar 2014 04:28:41 +0000"  >&lt;p&gt;Sure Ram..  Sorry for the delay.&lt;/p&gt;</comment>
                            <comment id="13951138" author="stack" created="Fri, 28 Mar 2014 17:56:28 +0000"  >&lt;p&gt;Are the findbugs and javadocs yours &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;? Fine fixing them in a follow on I&apos;d say.&lt;/p&gt;</comment>
                            <comment id="13951152" author="ram_krish" created="Fri, 28 Mar 2014 18:05:41 +0000"  >&lt;p&gt;The reports are missing. May be will give one more run and get teh lastet reports and fix them before commit. Anoop has given some nice comments over in RB.  Checking them out.&lt;/p&gt;</comment>
                            <comment id="13951173" author="anoop.hbase" created="Fri, 28 Mar 2014 18:16:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;Are the findbugs and javadocs yours&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No. These are fixed in trunk now.&lt;/p&gt;</comment>
                            <comment id="13951734" author="ram_krish" created="Sat, 29 Mar 2014 03:40:10 +0000"  >&lt;p&gt;Latest patch.  I think this should be final.  Addresses Anoop&apos;s comments.  Thanks a lot for a good review.&lt;/p&gt;</comment>
                            <comment id="13951759" author="anoop.hbase" created="Sat, 29 Mar 2014 04:26:56 +0000"  >&lt;p&gt;Gone through the latest changes in BufferedDataBlockEncoder.  Looks good Ram.  Thanks for the continued effort.&lt;/p&gt;</comment>
                            <comment id="13951787" author="ram_krish" created="Sat, 29 Mar 2014 06:58:06 +0000"  >&lt;p&gt;REsubmitting again for QA.  Got a green run when a ran in my linux box.&lt;/p&gt;</comment>
                            <comment id="13954264" author="hadoopqa" created="Sat, 29 Mar 2014 13:44:19 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12637612/HBASE-10531_13.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12637612/HBASE-10531_13.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12637612&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 34 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.master.TestRegionPlacement&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9135//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13954347" author="ram_krish" created="Sat, 29 Mar 2014 17:20:12 +0000"  >&lt;p&gt;Committed to trunk.  Thanks for the reviews Stack and Andy.&lt;br/&gt;
Thanks for the indepth reviews from Anoop to spot some issues too.&lt;/p&gt;</comment>
                            <comment id="13954348" author="ram_krish" created="Sat, 29 Mar 2014 17:22:00 +0000"  >&lt;p&gt;The test failure seems unrelated.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
java.lang.ArrayIndexOutOfBoundsException: 10
	at java.util.concurrent.CopyOnWriteArrayList.get(CopyOnWriteArrayList.java:343)
	at org.apache.hadoop.hbase.LocalHBaseCluster.getRegionServer(LocalHBaseCluster.java:224)
	at org.apache.hadoop.hbase.MiniHBaseCluster.getRegionServer(MiniHBaseCluster.java:609)
	at org.apache.hadoop.hbase.master.TestRegionPlacement.killRandomServerAndVerifyAssignment(TestRegionPlacement.java:303)
	at org.apache.hadoop.hbase.master.TestRegionPlacement.testRegionPlacement(TestRegionPlacement.java:270)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13954458" author="hudson" created="Sat, 29 Mar 2014 21:36:05 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #5051 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/5051/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/5051/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10531&quot; title=&quot;Revisit how the key byte[] is passed to HFileScanner.seekTo and reseekTo&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10531&quot;&gt;&lt;del&gt;HBASE-10531&lt;/del&gt;&lt;/a&gt;-Revisit how the key byte[] is passed to HFileScanner.seekTo and reseekTo (Ram) (ramkrishna: rev 1583031)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/TestCellComparator.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/PrefixTreeSeeker.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/decode/PrefixTreeArrayScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/decode/PrefixTreeCell.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/HalfStoreFileReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlockIndex.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV3.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/util/BloomFilterFactory.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/util/ByteBloomFilter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/util/CompoundBloomFilter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/TestHalfStoreFileReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/encoding/TestDataBlockEncoders.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/encoding/TestPrefixTreeEncoding.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/encoding/TestSeekToBlockWithEncoders.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileBlockIndex.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileEncryption.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileInlineToRootChunkConversion.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileSeek.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestReseekTo.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestSeekTo.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13956168" author="ram_krish" created="Tue, 1 Apr 2014 06:47:17 +0000"  >&lt;p&gt;The test failure &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
org.apache.hadoop.hbase.master.TestMasterFailover.testSimpleMasterFailover
org.apache.hadoop.hbase.regionserver.TestHRegionBusyWait.testBatchPut
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;did not occur locally in my testruns and also in hadoopQA run.  Also the subsequent runs does not have this failure. JFYI.&lt;/p&gt;</comment>
                            <comment id="14330734" author="enis" created="Sat, 21 Feb 2015 23:30:46 +0000"  >&lt;p&gt;Closing this issue after 0.99.0 release. &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12629742" name="HBASE-10531.patch" size="6047" author="ram_krish" created="Wed, 19 Feb 2014 11:13:46 +0000"/>
                            <attachment id="12631486" name="HBASE-10531_1.patch" size="109780" author="ram_krish" created="Thu, 27 Feb 2014 09:18:23 +0000"/>
                            <attachment id="12636953" name="HBASE-10531_12.patch" size="149967" author="ram_krish" created="Wed, 26 Mar 2014 17:15:15 +0000"/>
                            <attachment id="12637612" name="HBASE-10531_13.patch" size="150864" author="ram_krish" created="Sat, 29 Mar 2014 06:58:06 +0000"/>
                            <attachment id="12637603" name="HBASE-10531_13.patch" size="150864" author="ram_krish" created="Sat, 29 Mar 2014 03:40:10 +0000"/>
                            <attachment id="12632812" name="HBASE-10531_2.patch" size="115958" author="ram_krish" created="Wed, 5 Mar 2014 11:48:02 +0000"/>
                            <attachment id="12634704" name="HBASE-10531_3.patch" size="117452" author="ram_krish" created="Fri, 14 Mar 2014 12:40:02 +0000"/>
                            <attachment id="12635034" name="HBASE-10531_4.patch" size="121559" author="ram_krish" created="Mon, 17 Mar 2014 05:03:40 +0000"/>
                            <attachment id="12635069" name="HBASE-10531_5.patch" size="121157" author="ram_krish" created="Mon, 17 Mar 2014 12:29:41 +0000"/>
                            <attachment id="12635282" name="HBASE-10531_6.patch" size="129001" author="ram_krish" created="Tue, 18 Mar 2014 11:33:37 +0000"/>
                            <attachment id="12635491" name="HBASE-10531_7.patch" size="133395" author="ram_krish" created="Wed, 19 Mar 2014 05:22:18 +0000"/>
                            <attachment id="12635994" name="HBASE-10531_8.patch" size="134535" author="ram_krish" created="Fri, 21 Mar 2014 11:16:28 +0000"/>
                            <attachment id="12636008" name="HBASE-10531_9.patch" size="134799" author="ram_krish" created="Fri, 21 Mar 2014 12:19:56 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>13.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 18 Feb 2014 01:53:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>373682</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 42 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1sea7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>373982</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>