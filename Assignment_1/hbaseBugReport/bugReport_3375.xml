<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:09:40 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3375/HBASE-3375.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3375] Move away from jruby; build our shell elsewise either on another foundation or build up our own</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3375</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;JRuby has been sullied; its been shipping *GPL jars with a while now.  A hack up to remove these jars is being done elsewhere (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3374&quot; title=&quot;Our jruby jar has *GPL jars in it; fix&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3374&quot;&gt;&lt;del&gt;HBASE-3374&lt;/del&gt;&lt;/a&gt;).  This issue is about casting our shell anew atop a foundation that is other than JRuby or writing a shell of our own from scratch.&lt;/p&gt;

&lt;p&gt;JRuby has gotten us this far.  It provides a shell and it also was used scripting HBase.  It would be nice if we could get scripting and shell in the redo.&lt;/p&gt;

&lt;p&gt;Apart from the licensing issue above and that the fix will be reverting our JRuby to a version that is no longer supported and that is old, other reasons to move off JRuby are that while its nice having ruby to hand when scripting, the JRuby complete jar is 10 or more MB in size.  Its bloated at least from our small shell perspective.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12493622">HBASE-3375</key>
            <summary>Move away from jruby; build our shell elsewise either on another foundation or build up our own</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Sun, 19 Dec 2010 06:24:22 +0000</created>
                <updated>Fri, 30 Nov 2012 16:18:23 +0000</updated>
                            <resolved>Fri, 30 Nov 2012 16:18:23 +0000</resolved>
                                                                    <component>shell</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12973043" author="apurtell" created="Sun, 19 Dec 2010 20:24:17 +0000"  >&lt;p&gt;Some suggestions that were recently made along these lines:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Groovy: &lt;a href=&quot;http://groovy.codehaus.org/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://groovy.codehaus.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;gshell: &lt;a href=&quot;https://github.com/sonatype/gshell&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sonatype/gshell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m not a fan of Groovy, it&apos;s quite verbose, but it can do a shell-like syntax and variables and control flow like JRuby. Todd demonstrated:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;import org.codehaus.groovy.tools.shell.*;

class Sum extends CommandSupport {
 def Sum(Shell shell) {
   super(shell, &quot;sum&quot;, &quot;\\sum&quot;);
 }

 def execute(List args) {
   def x = 0
   for (arg in args) {
     x += Integer.valueOf(arg)
   }
   println(&quot;Sum is: &quot; + x);
 }
}

register Sum
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which can be used as:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;groovy:000&amp;gt; sum 1 2 3
Sum is: 6
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;However it looks like Groovy shell commands can receive only a list of strings. That may barely be enough but how we represented schemas as a JRuby map was nice. I believe it is also not possible to mix shell commands with script like we could with JRuby. &lt;/p&gt;

&lt;p&gt;Gshell can do a very basic shell syntax with variables but not any control flow or conditional expressions. GShell also pulls in some jars that we don&apos;t otherwise bundle now (doxia, gossip, guice, osgi, plexus, sisu) which weigh in at 1.2M, not that bad. Implementing control flow would require hacking up a real shell grammar and/or implementing &apos;if&apos;, &apos;for&apos;, &apos;while&apos; commands, and so forth. Might as well just build our own for that level of effort. &lt;/p&gt;

&lt;p&gt;Looking around I found a couple of bash clones in various state but all GPL.&lt;/p&gt;

&lt;p&gt;Perhaps it may be best to stay with an older yet unsupported version of jruby if it suits our needs adequately. Otherwise I lean toward rolling our own. I would not necessarily mind doing that. &lt;/p&gt;</comment>
                            <comment id="12973045" author="tlipcon" created="Sun, 19 Dec 2010 21:55:29 +0000"  >&lt;p&gt;In Groovy, you&apos;re right that the &quot;commands&quot; only take a list of strings. But if we&apos;re OK with a bit of parentheses, we can get the following to work:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

def create(name, cfs) {
  println(&lt;span class=&quot;code-quote&quot;&gt;&quot;Going to create table name: &quot;&lt;/span&gt; + name)
  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (entry in cfs) {
    println(&lt;span class=&quot;code-quote&quot;&gt;&quot;CF name: &quot;&lt;/span&gt; + entry.key)
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (attr in entry.value) {
      println(&lt;span class=&quot;code-quote&quot;&gt;&quot;Attr &apos;&quot;&lt;/span&gt; + attr.key + &lt;span class=&quot;code-quote&quot;&gt;&quot;&apos;: &quot;&lt;/span&gt; + attr.value)
    }
  } 
} 
groovy:000&amp;gt; create(&apos;foo&apos;, [mycf: [ttl: 123], othercf: []])        
Going to create table name: foo
CF name: mycf
Attr &apos;ttl&apos;: 123
CF name: othercf
===&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;for example.&lt;/p&gt;

&lt;p&gt;Another possibility would be to borrow the CLI from Cassandra, it seems to be their own ANTLR based thing.&lt;/p&gt;</comment>
                            <comment id="12973047" author="streamy" created="Sun, 19 Dec 2010 22:28:21 +0000"  >&lt;p&gt;I believe Karthik and Kannan were involved in the ANTLR shell for Cassandra.  Karthik has said he could work on one for HBase but I will wait for him to speak up before committing him to anything &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12973048" author="tlipcon" created="Sun, 19 Dec 2010 22:33:55 +0000"  >&lt;p&gt;I have some antlr background too, but would prefer to use an existing shell so we get readline, completion, history, all that for free. jline might do some of that for us, but I&apos;ve heard it&apos;s a bit of a pain.&lt;/p&gt;</comment>
                            <comment id="12973049" author="ryanobjc" created="Sun, 19 Dec 2010 22:35:03 +0000"  >&lt;p&gt;hopefully we can avoid putting some kind of parser in the hbase&lt;br/&gt;
project, one of existing shell makers like the maven guy&apos;s thing would&lt;br/&gt;
probably be better.&lt;/p&gt;

</comment>
                            <comment id="12973050" author="ryanobjc" created="Sun, 19 Dec 2010 22:39:01 +0000"  >&lt;p&gt;generally speaking parsers become unmaintable in projects are people&lt;br/&gt;
with the required skillset move on, etc.  They become magic that is&lt;br/&gt;
unchangeable, and it&apos;d be nice to avoid that if at all possible.&lt;/p&gt;

</comment>
                            <comment id="12973236" author="stack" created="Mon, 20 Dec 2010 16:00:44 +0000"  >&lt;p&gt;I haven&apos;t looked at the grammars page on ANTLR in a year or more.  I know that as soon as you dig in, that the grammars are missing key pieces or are incomplete but nonetheless its always fun reading this page: &lt;a href=&quot;http://www.antlr.org/grammar/list&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.antlr.org/grammar/list&lt;/a&gt;....  &lt;/p&gt;</comment>
                            <comment id="12973305" author="apurtell" created="Mon, 20 Dec 2010 19:10:22 +0000"  >&lt;p&gt;I&apos;ve built many domain specific languages over the years, using bison and flex. I have not used ANTLR before but looked at some of the grammars and it looks reasonable. It looks like you can guard rule evaluation with arbitrary predicates (Java code), which is interesting, and I&apos;ve only scratched the surface. This thing clearly lets you do complex wizard level stuff, and I share Ryan&apos;s feelings about the trouble with that. If we were to go this route, we need to be aggressive about simplicity. &lt;/p&gt;</comment>
                            <comment id="12973922" author="karthik.ranga" created="Tue, 21 Dec 2010 21:49:40 +0000"  >&lt;p&gt;Hey guys, like Jonathan said, I think ANTLR would be good... and once the framework is set, the changes are relatively easy to get in. Also, the core grammar does not change that much - usually only enhancements to some commands here and there.&lt;/p&gt;

&lt;p&gt;Also if the META entries are all JSON (as we are increasingly moving towards) and we are able to expose REST API&apos;s for most of the operations, then building a shell in any language/framework will become trivial.&lt;/p&gt;


</comment>
                            <comment id="12973988" author="apurtell" created="Wed, 22 Dec 2010 00:09:19 +0000"  >&lt;p&gt;Discussed this on IRC a bit today:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;15:08&amp;#93;&lt;/span&gt;	&amp;lt;apurtell&amp;gt;	anybody particularly itching to do 3375?&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:10&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	karthik wants to do some ANTLR + JSON... and maybe at the same time we could finish the move stack started a while ago to schemas in ZK as JSON&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:10&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	apurtell: what were you thinking?&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:11&amp;#93;&lt;/span&gt;	&amp;lt;apurtell&amp;gt;	use antlr, maintain current command set, keep enough ruby syntax so current scripts execute (and allow scripting), everything json, optional mode for running against REST interface instead of Java API&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:13&amp;#93;&lt;/span&gt;	&amp;lt;apurtell&amp;gt;	i&apos;m neutral as to ruby syntax but everyone talking about this issue would like to keep some kind of scripting capability&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:15&amp;#93;&lt;/span&gt;	&amp;lt;St^Ack&amp;gt;	Scripting hasn&apos;t really taken off.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:16&amp;#93;&lt;/span&gt;	&amp;lt;St^Ack&amp;gt;	I think scripting only really makes sense if &apos;real&apos; language underpinning shell&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:16&amp;#93;&lt;/span&gt;	&amp;lt;St^Ack&amp;gt;	else, ANTLR&apos;ing up those loops &amp;#8211; whiles, fors, etc. &amp;#8211; is going to be time consuming&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:17&amp;#93;&lt;/span&gt;	&amp;lt;apurtell&amp;gt;	i don&apos;t think it would be too bad, i&apos;m talking about flow control, variable assignment/substitution, and expressions&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:18&amp;#93;&lt;/span&gt;	&amp;lt;apurtell&amp;gt;	it can be &quot;real&quot; enough... or not... depends if there&apos;s value in doing it&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:19&amp;#93;&lt;/span&gt;	&amp;lt;apurtell&amp;gt;	(not talking about classes or anything not fitting an informal definition of &quot;basic&quot;)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:20&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	i also like idea of JSON + REST allowing shells written in anything&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:20&amp;#93;&lt;/span&gt;	&amp;lt;St^Ack&amp;gt;	apurtell: I just see it as wasted effort if already a grammer/parser written &amp;#8211; e.g. pre-existing shell&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;15:25&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	well i personally hate the shell&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:25&amp;#93;&lt;/span&gt;	&amp;lt;apurtell&amp;gt;	what would make it better?&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:25&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	and would like to move to json instead of the horrid ruby syntax&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:25&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	and work on REST or something that would allow other shells / utils to be written atop it&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:25&amp;#93;&lt;/span&gt;	&amp;lt;larsgeorge&amp;gt;	+1&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:25&amp;#93;&lt;/span&gt;	&amp;lt;apurtell&amp;gt;	i&apos;m not fond of the current shell either&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:26&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	no jruby deps, no jruby startup, no jruby syntax. move to json to go inline with other changes we&apos;d like to make (schema as json in zk, etc).&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:26&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	well idea would be you could easily write other utils in any language&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:27&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	so with roll-your-own, shell is implemented in java&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:27&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	trivial to tie into REST&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:28&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	let&apos;s not let this block us&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:28&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	but if someone wants to build something i think it would be good&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:30&amp;#93;&lt;/span&gt;	&amp;lt;St^Ack&amp;gt;	low priority though&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;15:30&amp;#93;&lt;/span&gt;	&amp;lt;jgray&amp;gt;	shell to json would make sense tho&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:36&amp;#93;&lt;/span&gt;	&amp;lt;gario&amp;gt;	ok, so if the idea is JSON throughout, why not a javascript repl?&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:40&amp;#93;&lt;/span&gt;	&amp;lt;St^Ack&amp;gt;	gario: jscript fine by me... shell was bad last I looked but maybe there&apos;s a plugin or something... rhino engine is part of jvm&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;15:41&amp;#93;&lt;/span&gt;	&amp;lt;apurtell&amp;gt;	any reasonable js repls?&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;16:04&amp;#93;&lt;/span&gt;	&amp;lt;gario&amp;gt;	looks like you can use jline with the rhino shell, fwiw: &lt;a href=&quot;http://blog.norrisboyd.com/2008/03/better-line-editing-for-rhino-shell.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blog.norrisboyd.com/2008/03/better-line-editing-for-rhino-shell.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12974406" author="karthik.ranga" created="Wed, 22 Dec 2010 21:54:58 +0000"  >&lt;p&gt;Awesome discussion. I think the only way to make scripting for HBase take off is to allow scripting in any language. Language lock-in for scripting takes away the real advantage of scripting - all the time is spent in looking up the syntax (unless the person writing is committed to learning the language). So in that sense, REST + JSON is awesome.&lt;/p&gt;

&lt;p&gt;On a tangential note, REST+JSON also allows us to easily write HBase clients (that have ZK integration) in languages other than Java (aka C++). This would allow efficiently interacting with HBase from non Java services.&lt;/p&gt;

&lt;p&gt;If we are agreed on the REST+JSON approach - now its only a matter of how to write the shell the fastest in any language. I am not familiar with where the REST gateway stands today, and how much work it is to move all the structures to JSON. If these are easy to get out the door, then we should only think about the fastest way to write the shell.&lt;/p&gt;
</comment>
                            <comment id="12974435" author="apurtell" created="Wed, 22 Dec 2010 23:23:06 +0000"  >&lt;p&gt;Regarding the REST gateway today, use Content-Type: application/json for PUT or POST and Accept: application/json for GET. We model data representation using JAXB bindings and leverage Jersey&apos;s support for wiring JAXB to JSON. &lt;/p&gt;</comment>
                            <comment id="12985427" author="jimbojw" created="Sun, 23 Jan 2011 21:55:05 +0000"  >&lt;p&gt;Why not use Rhino, and have a JavaScript shell?  The syntax for most commands already has near perfect JavaScript analogs.&lt;/p&gt;

&lt;p&gt;Consider this in today&apos;s shell:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
get &lt;span class=&quot;code-quote&quot;&gt;&quot;table&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;row&quot;&lt;/span&gt;, {COLUMN =&amp;gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;column:qualifier&quot;&lt;/span&gt;, TIMESTAMP =&amp;gt; 12345, VERSIONS =&amp;gt; 4}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Could be this in JS:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-javascript&quot;&gt;
get( &quot;table&quot;, &quot;row&quot;, { COLUMN: &quot;column:qualifier&quot;, TIMESTAMP: 12345, VERSIONS: 4} );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;No parsing required, full scripting language power.&lt;/p&gt;


</comment>
                            <comment id="12985895" author="stack" created="Mon, 24 Jan 2011 18:52:09 +0000"  >&lt;p&gt;@Jim The javascript shell was poor compared to IRB when I tested this stuff out a good while back (See &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-487&quot; title=&quot;Replace hql w/ a hbase-friendly jirb or jython shell&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-487&quot;&gt;&lt;del&gt;HBASE-487&lt;/del&gt;&lt;/a&gt; for my blunderings).&lt;/p&gt;</comment>
                            <comment id="13047565" author="stack" created="Fri, 10 Jun 2011 22:45:51 +0000"  >&lt;p&gt;Moving out of 0.92.0. Pull it back in if you think different.&lt;/p&gt;</comment>
                            <comment id="13507343" author="vicaya" created="Fri, 30 Nov 2012 14:19:02 +0000"  >&lt;p&gt;License issue of jruby runtime jars has been fixed: &lt;a href=&quot;http://jira.codehaus.org/browse/JRUBY-5410&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jira.codehaus.org/browse/JRUBY-5410&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&apos;s close this as won&apos;t fix &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13507408" author="stack" created="Fri, 30 Nov 2012 16:18:23 +0000"  >&lt;p&gt;As per &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vicaya&quot; class=&quot;user-hover&quot; rel=&quot;vicaya&quot;&gt;Luke Lu&lt;/a&gt;, JRuby fixed the licensing so we just stuck w/ jruby.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 19 Dec 2010 20:24:17 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33006</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 3 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hm07:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100827</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>