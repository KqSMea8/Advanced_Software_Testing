<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:12:19 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3694/HBASE-3694.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3694] high multiput latency due to checking global mem store size in a synchronized function</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3694</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The problem is we found the multiput latency is very high.&lt;br/&gt;
In our case, we have almost 22 Regions in each RS and there are no flush happened during these puts.&lt;/p&gt;

&lt;p&gt;After investigation, we believe that the root cause is the function getGlobalMemStoreSize, which is to check the high water mark of mem store. &lt;br/&gt;
This function takes almost 40% of total execution time of multiput when instrumenting some metrics in the code.  &lt;br/&gt;
The actual percentage may be more higher. The execution time is spent on synchronize contention.&lt;/p&gt;

&lt;p&gt;One solution is to keep a static var in HRegion to keep the global MemStore size instead of calculating them every time.&lt;br/&gt;
Why using static variable?&lt;br/&gt;
Since all the HRegion objects in the same JVM share the same memory heap, they need to share fate as well.&lt;br/&gt;
The static variable, globalMemStroeSize, naturally shows the total mem usage in this shared memory heap for this JVM.&lt;br/&gt;
If multiple RS need to run in the same JVM, they still need only one globalMemStroeSize.&lt;br/&gt;
If multiple RS run on different JVMs, everything is fine.&lt;/p&gt;

&lt;p&gt;After changing, in our cases, the avg multiput latency decrease from 60ms to 10ms.&lt;/p&gt;

&lt;p&gt;I will submit a patch based on the current trunk.&lt;/p&gt;


</description>
                <environment></environment>
        <key id="12502217">HBASE-3694</key>
            <summary>high multiput latency due to checking global mem store size in a synchronized function</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="liyin">Liyin Tang</assignee>
                                    <reporter username="liyin">Liyin Tang</reporter>
                        <labels>
                    </labels>
                <created>Wed, 23 Mar 2011 19:15:59 +0000</created>
                <updated>Fri, 20 Nov 2015 12:42:37 +0000</updated>
                            <resolved>Mon, 4 Apr 2011 18:34:18 +0000</resolved>
                                                    <fixVersion>0.92.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="13010376" author="tlipcon" created="Wed, 23 Mar 2011 20:21:18 +0000"  >&lt;p&gt;I don&apos;t think a static variable is the way to go. In minicluster tests, you want to separately count memory for each RS, even though they share the same heap.&lt;/p&gt;

&lt;p&gt;Instead, I think we should add it to HRegionServer, or a new class like &apos;MemoryAccountingManager&apos; which is accessible through HRegionServer. Thoughts?&lt;/p&gt;</comment>
                            <comment id="13010492" author="liyin" created="Wed, 23 Mar 2011 22:31:19 +0000"  >&lt;p&gt;We tried to add this var in RS and passing it to Region via its constructor at the beginning.&lt;br/&gt;
However since the HRegion is not created by RS, it is hard to implement and it will pass the NULL to the HRegion constructor in most cases. &lt;br/&gt;
Of course, we can set the RegionServer reference to the Regions every time, but it will make the code much more complicated. &lt;/p&gt;

&lt;p&gt;As long as this change ONLY conflicts with some unit tests, we can make it work for that case. &lt;br/&gt;
For example, we can write a function in minicluster tests to get the global mem store size for the given Region Server.&lt;/p&gt;

&lt;p&gt;Any Thoughts&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Liyin&lt;/p&gt;
</comment>
                            <comment id="13010513" author="tlipcon" created="Wed, 23 Mar 2011 23:21:05 +0000"  >&lt;p&gt;Just seems to me that static state is just the java equivalent of ugly global variables. They always come back to bite us in some way or another later on.&lt;/p&gt;

&lt;p&gt;I don&apos;t have the code handy at the moment (booted into Windows to work on a ppt &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ) but it seems like there has to be some way that the HRegion can get at the region server. I thought it had a RegionServerServices instance somewhere inside?&lt;/p&gt;</comment>
                            <comment id="13010518" author="ryanobjc" created="Wed, 23 Mar 2011 23:29:06 +0000"  >&lt;p&gt;Lets avoid the static if at all possible. Ditto todd, it makes life hard&lt;br/&gt;
later&lt;/p&gt;</comment>
                            <comment id="13010521" author="yuzhihong@gmail.com" created="Wed, 23 Mar 2011 23:32:23 +0000"  >&lt;p&gt;HRegion has reference to RegionServerServices&lt;br/&gt;
HRegionServer is the only implementer of RegionServerServices.&lt;/p&gt;</comment>
                            <comment id="13010974" author="stack" created="Thu, 24 Mar 2011 22:32:04 +0000"  >&lt;p&gt;RSS has:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  /**
   * Returns a reference to the RPC server metrics.
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; HBaseRpcMetrics getRpcMetrics();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Could you add your counter to HBaseRpcMetrics class or would that be weird?&lt;/p&gt;</comment>
                            <comment id="13010980" author="yuzhihong@gmail.com" created="Thu, 24 Mar 2011 22:39:18 +0000"  >&lt;p&gt;How about piggybacking HServerInfo:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; HServerInfo getServerInfo();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13010981" author="tlipcon" created="Thu, 24 Mar 2011 22:39:31 +0000"  >&lt;p&gt;RpcMetrics seems like the wrong spot to me.&lt;/p&gt;</comment>
                            <comment id="13010983" author="streamy" created="Thu, 24 Mar 2011 22:47:04 +0000"  >&lt;p&gt;Neither of these seem right.  Issue with adding another method for this?&lt;/p&gt;</comment>
                            <comment id="13010984" author="stack" created="Thu, 24 Mar 2011 22:48:47 +0000"  >&lt;p&gt;We could add a new method.  Just trying to keep the methods to a minimum because mocking the Interface becomes a pain if a million methods to fill in (looks ugly too in tests).  But go for it..... Add getting a Counts class or something.&lt;/p&gt;</comment>
                            <comment id="13010986" author="yuzhihong@gmail.com" created="Thu, 24 Mar 2011 22:53:49 +0000"  >&lt;p&gt;@Liyin can you run your test after incorporating &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3654&quot; title=&quot;Weird blocking between getOnlineRegion and createRegionLoad&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3654&quot;&gt;&lt;del&gt;HBASE-3654&lt;/del&gt;&lt;/a&gt; ?&lt;br/&gt;
Just wonder how much influence the synchronization of onlineRegions might have on this issue.&lt;/p&gt;</comment>
                            <comment id="13011020" author="liyin" created="Thu, 24 Mar 2011 23:57:57 +0000"  >&lt;p&gt;I didn&apos;t follow some discussions here after talking about removing static variable &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;As Todd and Ryan suggest, there will be no static variable in HRegion. &lt;br/&gt;
Every time when the RS detect a new region, set the reference of itself to this region.&lt;/p&gt;

&lt;p&gt;I also add a unit test for this case to verify that it gets the correct global mem store size as usual. &lt;/p&gt;</comment>
                            <comment id="13011028" author="liyin" created="Fri, 25 Mar 2011 00:05:51 +0000"  >&lt;p&gt;Add the unit test file to the patch&lt;/p&gt;</comment>
                            <comment id="13011029" author="yuzhihong@gmail.com" created="Fri, 25 Mar 2011 00:05:54 +0000"  >&lt;p&gt;HRegion already has this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; RegionServerServices rsServices;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You can reuse it instead of adding HRegionServer reference directly.&lt;/p&gt;</comment>
                            <comment id="13011057" author="liyin" created="Fri, 25 Mar 2011 01:00:26 +0000"  >&lt;p&gt;Thanks Ted&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
update the patch by using RegionServerServices.&lt;/p&gt;</comment>
                            <comment id="13011345" author="liyin" created="Fri, 25 Mar 2011 18:46:19 +0000"  >&lt;p&gt;add 1 more reference overhead in the HRegion.&lt;br/&gt;
Update the patch.&lt;/p&gt;</comment>
                            <comment id="13011414" author="stack" created="Fri, 25 Mar 2011 20:51:04 +0000"  >&lt;p&gt;Patch looks good but I stumble when I come to this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  /**
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the global mem store size in the region server
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; AtomicLong getGlobalMemstoreSize();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we are adding the getting of a single value to the RSS Interface.  RSS is usually about more macro-type services than single data member value.  Rare would the user of RSS be interested in this single value.  More useful i&apos;d think would be if the RSS returned a class that allowed client a (read-only) view on multiple RS values; e.g. Above there is talk of a MemoryAccountingManager which I imagine would have this memstore size among other values.&lt;/p&gt;

&lt;p&gt;We could change getRpcMetrics to be a generic getMetrics and it would return a RegionServerMetrics instance taht would include instance of HBaseRpcMetrics and current state of above counter?&lt;/p&gt;


</comment>
                            <comment id="13011421" author="liyin" created="Fri, 25 Mar 2011 21:13:12 +0000"  >&lt;p&gt;Thanks Stack.&lt;br/&gt;
I think adding globalMemstoreSize into RegionServerMetrics makes more sense than add a new class MemoryAccountingManager?&lt;/p&gt;</comment>
                            <comment id="13011437" author="tlipcon" created="Fri, 25 Mar 2011 21:39:37 +0000"  >&lt;p&gt;I don&apos;t want to conflate metrics (things that get exported for monitoring purposes) with internal accounting (things which are necessarily correct and up-to-date for proper functioning of the server).&lt;/p&gt;

&lt;p&gt;Some internal accounting may be exposed as metrics, but the two subsystems are quite separate in my mind.&lt;/p&gt;

&lt;p&gt;Does that make sense?&lt;/p&gt;</comment>
                            <comment id="13011444" author="yuzhihong@gmail.com" created="Fri, 25 Mar 2011 22:07:32 +0000"  >&lt;p&gt;memstoreSizeMB is a member of RegionServerMetrics and is set at hbase.regionserver.msginterval&lt;br/&gt;
See line 1162 in HRegionServer.java:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.metrics.memstoreSizeMB.set((&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;) (memstoreSize / (1024 * 1024)));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;memstoreSizeMB is of type MetricsIntValue which is a subclass of MetricsBase and stores value in:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; value;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can create MetricsAtomicLongValue class with following signature:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class MetricsAtomicLongValue &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; MetricsBase{
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; AtomicLong value;  
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; changed;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If we reach agreement on adding this method to RegionServerServices (which is available in HRegionServer and being used by MemStoreFlusher):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  /**
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Region server metrics instance.
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; RegionServerMetrics getMetrics() {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then we can change memstoreSizeMB to memstoreSize which is of type MetricsAtomicLongValue and blend Liyin&apos;s changes onto memstoreSize.&lt;/p&gt;</comment>
                            <comment id="13011449" author="liyin" created="Fri, 25 Mar 2011 22:11:42 +0000"  >&lt;p&gt;The internal accounting makes sense. I just think MemoryAccountingManager is too specific.&lt;br/&gt;
We need something more general to reuse it in the future, RegionServerAccountingManager.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;br/&gt;
Liyin&lt;/p&gt;</comment>
                            <comment id="13011452" author="streamy" created="Fri, 25 Mar 2011 22:15:47 +0000"  >&lt;p&gt;Do we really want to put things like this into RegionServerMetrics?  That class is a mess and is currently only used for the publishing of our metrics (not used for internal state tracking).  And we should avoid the hadoop Metrics* classes like the plague... heavily synchronized and generally confusing.&lt;/p&gt;

&lt;p&gt;My vote would be to add a new class, maybe &lt;tt&gt;RegionServerHeapManager&lt;/tt&gt; or something like that... might be a good opportunity to cleanup and centralize the code related to that.  But could just hold this one AtomicLong for now.  Agree that adding a new interface method just for the long is not ideal since it buys us nothing down the road.  Better to add something new that we can use later.&lt;/p&gt;</comment>
                            <comment id="13011457" author="tlipcon" created="Fri, 25 Mar 2011 22:31:16 +0000"  >&lt;p&gt;+1 to jgray&apos;s suggestion. Please please please let&apos;s not conflate metrics and something that is crucial to correct operation.&lt;/p&gt;

&lt;p&gt;In terms of overall design, I would love to see RegionServerServices evolve into something like an IOC container - it&apos;s just used to provide &quot;wiring&quot; between the different components that make up a running RS. That makes mocking easier and should help with general modularity.&lt;/p&gt;</comment>
                            <comment id="13011461" author="stack" created="Fri, 25 Mar 2011 22:44:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;In terms of overall design, I would love to see RegionServerServices evolve into something like an IOC container....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, thats the plan....Need to keep it macro though.&lt;/p&gt;

&lt;p&gt;Args on why this is not &apos;metrics&apos; are good.  I go along.&lt;/p&gt;

&lt;p&gt;Just say no to atomic long counters now we have cliff click counters in our CLASSPATH&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The internal accounting makes sense. I just think MemoryAccountingManager is too specific.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We need something more general to reuse it in the future, RegionServerAccountingManager.&lt;/p&gt;

&lt;p&gt;Agreed.  Should be more than just about Memory accounting (and agree w/ Jon that it could be path out of our hairball HRegionServer class).  &lt;/p&gt;

&lt;p&gt;For you Liyin and this patch, I think just make a class named RegionServerAccounting &amp;#8211; drop Manager I&apos;d say, that might be a little megalomanicial &amp;#8211; and put just this one counter in it (as per Jon).  Add getRegionServerAccounting to RSS Interface.&lt;/p&gt;
</comment>
                            <comment id="13011467" author="tlipcon" created="Fri, 25 Mar 2011 22:52:17 +0000"  >&lt;p&gt;Sounds good to me.&lt;/p&gt;</comment>
                            <comment id="13011503" author="liyin" created="Fri, 25 Mar 2011 23:33:57 +0000"  >&lt;p&gt;Agreed with stack&lt;br/&gt;
Add a new class: RegionServerAccouting.&lt;/p&gt;</comment>
                            <comment id="13011561" author="stack" created="Sat, 26 Mar 2011 04:54:56 +0000"  >&lt;p&gt;Please do not use HBaseClusterTestCase as basis for your test.  Its been deprecated &apos; * @deprecated Use junit4 and &lt;/p&gt;
{@link HBaseTestingUtility}
&lt;p&gt;&apos;.  Sorry about that.  We should have made sure you got the memo on that one.  The alternative HBaseTestingUtility has cleaner means of creating multiregion table. Fix copyright on your test &amp;#8211; also, the javadoc is copy/pasted from elsewhere &amp;#8211; and in your accounting class. Its 2011!  RegionServerAccounting needs a bit of class javadoc to say what the class is for.  I&apos;d write &apos;private final AtomicLong atomicGlobalMemstoreSize = new AtomicLong(0);&apos; rather than wait to assign in the Constructor (no need for a constructor then).  I&apos;d rename incGlobalMemstoreSize as addAndGetGlobalMemstoreSize as in AtomicLong and I&apos;d return the current value as per AtomicLong (why not?).  I&apos;d also call it getAndAddMemstoreSize rather than incMemoryUsage.&lt;/p&gt;

&lt;p&gt;Otherwise the patch looks great Liyin.  Thanks for doing this.&lt;/p&gt;</comment>
                            <comment id="13011570" author="tlipcon" created="Sat, 26 Mar 2011 05:40:21 +0000"  >&lt;p&gt;I don&apos;t think we should return the current value from the increment call unless it&apos;s necessary. For striped counters and such, a &quot;blind&quot; increment can often be cheaper than an increment-and-get. Isn&apos;t this the case with the Cliff Click Counters?&lt;/p&gt;</comment>
                            <comment id="13011583" author="liyin" created="Sat, 26 Mar 2011 07:07:54 +0000"  >&lt;p&gt;Thanks Stack for so careful review and comments&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I will pay more attention next time.&lt;/p&gt;

&lt;p&gt;In this patch, it basically follows all the comments from stack.&lt;br/&gt;
1) update the license&lt;br/&gt;
2) update java doc&lt;br/&gt;
3) using HBaseTestingUtility&lt;br/&gt;
4) change some method names &lt;/p&gt;

&lt;p&gt;As Todd mentioned, so far, the function &quot;rsAccounting.addAndGetGlobalMemstoreSize(memStoreSize) &quot; will be called frequently and never expected a return value.&lt;/p&gt;

&lt;p&gt;Anyway, I still return the current value in this patch as you comments.&lt;/p&gt;</comment>
                            <comment id="13011589" author="yuzhihong@gmail.com" created="Sat, 26 Mar 2011 09:26:29 +0000"  >&lt;p&gt;I agree with Todd&apos;s comment about the increment call. There are two reasons.&lt;br/&gt;
1. The return value is not used - after switching return type to void, the code compiles cleanly.&lt;br/&gt;
2. It somewhat exposes the implementation detail of the underlying class (in this case AtomicLong).&lt;/p&gt;

&lt;p&gt;I am attaching a patch that utilizes Cliff Click Counter which Stack mentioned at 25/Mar/11 22:44.&lt;/p&gt;

&lt;p&gt;Thanks for the great work Liyin.&lt;/p&gt;</comment>
                            <comment id="13011593" author="yuzhihong@gmail.com" created="Sat, 26 Mar 2011 09:42:23 +0000"  >&lt;p&gt;Renamed HRegion.addAndGetGlobalMemstoreSize() to addAndGetMemstoreSize() because the caller (originally) doesn&apos;t return the global memstoreSize.&lt;/p&gt;</comment>
                            <comment id="13011599" author="yuzhihong@gmail.com" created="Sat, 26 Mar 2011 10:01:31 +0000"  >&lt;p&gt;svn didn&apos;t capture the new files Liyin added.&lt;/p&gt;</comment>
                            <comment id="13011675" author="liyin" created="Sat, 26 Mar 2011 19:57:32 +0000"  >&lt;p&gt;+1 with the change method name to addAndGetMemstoreSize&lt;br/&gt;
But Cliff Click Counter is not thread safe. &lt;br/&gt;
Are you sure to use it? &lt;br/&gt;
We want everything in the RegionServerAccounting is accurate, something that is crucial to correct operation.&lt;/p&gt;</comment>
                            <comment id="13011676" author="liyin" created="Sat, 26 Mar 2011 19:59:04 +0000"  >&lt;p&gt;Change one method name to HRegion.addAndGetMemstoreSize.&lt;/p&gt;

&lt;p&gt;rebase on the r1085592&lt;/p&gt;</comment>
                            <comment id="13011682" author="stack" created="Sat, 26 Mar 2011 20:56:21 +0000"  >&lt;p&gt;Use AtomicLong if alternative is not thread safe.  Name should be addMemstoreSize and not addAndGetMemstoreSize if not returning a value (as per Todd and Ted above).  Thanks for being persistent Liyin.&lt;/p&gt;</comment>
                            <comment id="13011686" author="stack" created="Sat, 26 Mar 2011 21:17:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;But Cliff Click Counter is not thread safe. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought whole point of the CC Counters was that they were (lockless) threadsafe&lt;/p&gt;</comment>
                            <comment id="13011694" author="liyin" created="Sat, 26 Mar 2011 22:34:07 +0000"  >&lt;p&gt;Thanks stack and Ted,&lt;/p&gt;

&lt;p&gt;I thought CC Counters was thread safe to add, since they have an array of counters internally to avoid cache contention,&lt;br/&gt;
but it looks like it is not thread safe the get.&lt;/p&gt;

&lt;p&gt;From their javadoc:&lt;br/&gt;
public long get()&lt;br/&gt;
Current value of the counter. Since other threads are updating furiously the value is only approximate, but it includes all counts made by the current thread. Requires a pass over the internally striped counters.&lt;/p&gt;</comment>
                            <comment id="13011703" author="yuzhihong@gmail.com" created="Sat, 26 Mar 2011 23:50:31 +0000"  >&lt;p&gt;Here is javadoc for add_if_mask() which is called by add():&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  The sum can overflow or &apos;x&apos; can contain bits in
  &lt;span class=&quot;code-comment&quot;&gt;// the mask. Value is CAS&apos;d so no counts are lost.  The CAS is retried until
&lt;/span&gt;  &lt;span class=&quot;code-comment&quot;&gt;// it succeeds or bits are found under the mask.&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Where mask of 0 is used, meaning no failure.&lt;br/&gt;
Looking further into failure case inside add_if_mask() we can verify the above assumption:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;( (old&amp;amp;mask) != 0 ) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; old; &lt;span class=&quot;code-comment&quot;&gt;// Failed &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; bit-set under mask&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13011717" author="stack" created="Sun, 27 Mar 2011 03:16:41 +0000"  >&lt;p&gt;@Liyin Approx count on get is fine by me.  If you need it to be &apos;exact&apos;, go w/ AtomicLong.&lt;/p&gt;</comment>
                            <comment id="13015075" author="liyin" created="Sat, 2 Apr 2011 20:43:39 +0000"  >&lt;p&gt;I think using AtomicLong is pretty safe here&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                            <comment id="13015236" author="stack" created="Sun, 3 Apr 2011 22:50:27 +0000"  >&lt;p&gt;@Liyin Then your last posted patch is good to go?&lt;/p&gt;</comment>
                            <comment id="13015272" author="liyin" created="Mon, 4 Apr 2011 04:35:07 +0000"  >&lt;p&gt;yes, please review&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13015536" author="stack" created="Mon, 4 Apr 2011 18:34:18 +0000"  >&lt;p&gt;Committed to TRUNK.  Thanks for the nice patch Liyin (and to all who reviewed).&lt;/p&gt;</comment>
                            <comment id="13016238" author="hudson" created="Wed, 6 Apr 2011 03:51:08 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #1831 (See &lt;a href=&quot;https://hudson.apache.org/hudson/job/HBase-TRUNK/1831/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/HBase-TRUNK/1831/&lt;/a&gt;)&lt;/p&gt;
</comment>
                            <comment id="15017299" author="lars_francke" created="Fri, 20 Nov 2015 12:42:37 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12474696" name="3694-cliffs-counter.txt" size="14983" author="yuzhihong@gmail.com" created="Sat, 26 Mar 2011 10:01:31 +0000"/>
                            <attachment id="12474569" name="Hbase-3694[r1085306]" size="6443" author="liyin" created="Thu, 24 Mar 2011 23:57:57 +0000"/>
                            <attachment id="12474572" name="Hbase-3694[r1085306]_2.patch" size="12780" author="liyin" created="Fri, 25 Mar 2011 00:05:51 +0000"/>
                            <attachment id="12474581" name="Hbase-3694[r1085306]_3.patch" size="13818" author="liyin" created="Fri, 25 Mar 2011 01:00:26 +0000"/>
                            <attachment id="12474646" name="Hbase-3694[r1085508]_4.patch" size="14217" author="liyin" created="Fri, 25 Mar 2011 18:46:19 +0000"/>
                            <attachment id="12474708" name="Hbase-3694[r1085592]_7.patch" size="15095" author="liyin" created="Sat, 26 Mar 2011 19:59:04 +0000"/>
                            <attachment id="12474674" name="Hbase-3694[r1085593]_5.patch" size="15909" author="liyin" created="Fri, 25 Mar 2011 23:33:57 +0000"/>
                            <attachment id="12474693" name="Hbase-3694[r1085593]_6.patch" size="15143" author="liyin" created="Sat, 26 Mar 2011 07:07:54 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 23 Mar 2011 20:21:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33153</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hnev:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>101055</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>