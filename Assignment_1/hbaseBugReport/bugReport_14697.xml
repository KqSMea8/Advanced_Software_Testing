<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:55:32 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14697/HBASE-14697.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14697] Random Read Improvements</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14697</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I was looking at something else and then got drawn into graphs of where we are spending time doing random reads. Interesting is that most CPU &amp;#8211; ~5% is in metrics adding &amp;#8211; and bloomfilter look ups cost.&lt;/p&gt;

&lt;p&gt;This is an umbrella background issue to host random read improvements as subtasks.&lt;/p&gt;

&lt;p&gt;Here is what perf top shows doing YCSB workloadc (all random read) against a server that is up on a 5-node HDFS cluster hosting 7 regions loaded by YCSB.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  4.91%  perf-32667.map      [.] Lorg/apache/hadoop/metrics2/lib/MutableHistogram;.add
  2.27%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/ipc/RpcServer$Call;.setResponse
  2.10%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/io/hfile/CompoundBloomFilter;.checkContains
  2.06%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/regionserver/HRegion$RegionScannerImpl;.&amp;lt;init&amp;gt;
  1.94%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/ipc/CallRunner;.run
  1.89%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/io/hfile/CombinedBlockCache;.getBlock
  1.82%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/regionserver/RSRpcServices;.get
  1.66%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/util/Counter;.add
  1.66%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreFileScanner;.getScannersForStoreFiles
  1.41%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/util/MurmurHash;.hash
  1.40%  [kernel]            [k] _spin_lock
  1.34%  perf-32667.map      [.] Lsun/nio/ch/SocketChannelImpl;.read
  1.32%  perf-32667.map      [.] Ljava/util/concurrent/locks/ReentrantReadWriteLock$ReadLock;.unlock
  1.28%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreFileScanner;.shouldUseScanner
  1.27%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreFile$Reader;.checkGeneralBloomFilter
  1.17%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/ipc/RpcServer$Connection;.processRequest
  1.15%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/ipc/RpcServer$Listener$Reader;.processing
  1.14%  perf-32667.map      [.] Lsun/nio/ch/SocketChannelImpl;.write
  1.13%  [vdso]              [.] 0x00007fffbedff8d4
  1.11%  [kernel]            [k] copy_user_generic_string
  1.11%  perf-32667.map      [.] Lsun/nio/ch/IOUtil;.write
  1.05%  [nx_nic]            [.] 0x000000005f49014a
  0.96%  perf-32667.map      [.] Ljava/util/concurrent/ConcurrentHashMap;.replaceNode
  0.88%  perf-32667.map      [.] Ljava/util/concurrent/locks/ReentrantReadWriteLock$Sync;.tryAcquireShared
  0.86%  perf-32667.map      [.] Ljava/util/concurrent/ConcurrentHashMap;.putVal
  0.82%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreFile$Reader;.passesKeyRangeFilter
  0.81%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/ipc/RpcServer;.call
  0.77%  perf-32667.map      [.] Lorg/apache/hadoop/hbase/protobuf/ProtobufUtil;.toGet
  0.76%  perf-32667.map      [.] Lsun/nio/ch/Util;.getTemporaryDirectBuffer
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12908001">HBASE-14697</key>
            <summary>Random Read Improvements</summary>
                <type id="14" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/genericissue.png">Umbrella</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Mon, 26 Oct 2015 18:24:34 +0000</created>
                <updated>Mon, 26 Oct 2015 21:29:20 +0000</updated>
                                                                            <component>Performance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="14974766" author="stack" created="Mon, 26 Oct 2015 18:26:38 +0000"  >&lt;p&gt;Random reads flame graph over a 60 second perf sample.&lt;/p&gt;

&lt;p&gt;Done with &lt;a href=&quot;https://github.com/jrudolph/perf-map-agent&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/jrudolph/perf-map-agent&lt;/a&gt; and jdk8u60+ &lt;a href=&quot;https://github.com/jrudolph/perf-map-agent&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/jrudolph/perf-map-agent&lt;/a&gt; has nice scripts now that make it easy doingh top and flamegraph production.&lt;/p&gt;</comment>
                            <comment id="14974790" author="vrodionov" created="Mon, 26 Oct 2015 18:34:56 +0000"  >&lt;p&gt;No obvious hotspot. Where is the code which look ups key in a block? It is a sequential scan.&lt;/p&gt;</comment>
                            <comment id="14974871" author="stack" created="Mon, 26 Oct 2015 19:37:35 +0000"  >&lt;p&gt;Poking around, murmur3 is not usually faster than murmur2 (our default)... It has less collisions so we should move there but not necessarily for speed.&lt;/p&gt;

&lt;p&gt;On metrics, all time is in in here:&lt;/p&gt;

&lt;p&gt;com.yammer.metrics.stats.ExponentiallyDecayingSample&lt;/p&gt;

&lt;p&gt;If I make this change, metrics gathering drops out of the top-40:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
diff --git a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/MutableHistogram.java b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/MutableHistogram.java
index 381dbbb..137f40e 100644
--- a/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/MutableHistogram.java
+++ b/hbase-hadoop2-compat/src/main/java/org/apache/hadoop/metrics2/lib/MutableHistogram.java
@@ -66,7 +66,7 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class MutableHistogram &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; MutableMetric &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; MetricHistogram {
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void add(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; val) {
     setChanged();
     count.incrementAndGet();
-    sample.update(val);
+    &lt;span class=&quot;code-comment&quot;&gt;// sample.update(val);
&lt;/span&gt;     setMax(val);
     setMin(val);
     sum.getAndAdd(val);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14975126" author="stack" created="Mon, 26 Oct 2015 21:29:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;No obvious hotspot. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, metrics update is expensive as is bloom check. setResponse takes 4% of the CPU during this sampling....  LinkedBlockingQueue in consumerLoop takes 5% of CPU.... seems like some stuff we could clean up...  Can we write better (writing takes 10% of CPU).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Where is the code which look ups key in a block? It is a sequential scan.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;These are random reads. The finding in a block must be inconsequential in the scheme of things &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12768778" name="flamegraph-32667.svg" size="1359414" author="stack" created="Mon, 26 Oct 2015 18:26:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 26 Oct 2015 18:34:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 7 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2njd3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>