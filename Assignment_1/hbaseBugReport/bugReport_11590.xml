<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:24:40 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-11590/HBASE-11590.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-11590] use a specific ThreadPoolExecutor</title>
                <link>https://issues.apache.org/jira/browse/HBASE-11590</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The JDK TPE creates all the threads in the pool. As a consequence, we create (by default) 256 threads even if we just need a few.&lt;/p&gt;

&lt;p&gt;The attached TPE create threads only if we have something in the queue.&lt;br/&gt;
On a PE test with replica on, it improved the 99 latency percentile by 5%. &lt;/p&gt;

&lt;p&gt;Warning: there are likely some race conditions, but I&apos;m posting it here because there is may be an implementation available somewhere we can use, or a good reason not to do that. So feedback welcome as usual. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12729716">HBASE-11590</key>
            <summary>use a specific ThreadPoolExecutor</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="nkeywal">Nicolas Liochon</assignee>
                                    <reporter username="nkeywal">Nicolas Liochon</reporter>
                        <labels>
                    </labels>
                <created>Fri, 25 Jul 2014 12:06:26 +0000</created>
                <updated>Thu, 15 Oct 2015 14:33:54 +0000</updated>
                                            <version>1.0.0</version>
                    <version>2.0.0</version>
                                    <fixVersion>2.0.0</fixVersion>
                                    <component>Client</component>
                    <component>Performance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="14074355" author="hadoopqa" created="Fri, 25 Jul 2014 12:44:42 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12657819/tp.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12657819/tp.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12657819&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +            this.batchPool = new ExecutorServiceWithQueue(Threads.newDaemonThreadFactory(toString() + &quot;&lt;del&gt;shared&lt;/del&gt;&quot;), maxThreads, keepAliveTime * 1000,&lt;br/&gt;
+                     maxThreads * conf.getInt(HConstants.HBASE_CLIENT_MAX_TOTAL_TASKS, HConstants.DEFAULT_HBASE_CLIENT_MAX_TOTAL_TASKS)))    ;&lt;br/&gt;
+  private final ConcurrentSkipListSet&amp;lt;Thread&amp;gt; availableThreads = new ConcurrentSkipListSet&amp;lt;Thread&amp;gt;(THREAD_COMPARAROR);&lt;br/&gt;
+  public ExecutorServiceWithQueue(ThreadFactory threadFactory, int maxThread, long threadTimeout, BlockingQueue&amp;lt;Runnable&amp;gt; tasks) {&lt;br/&gt;
+    public T get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {&lt;br/&gt;
+  public &amp;lt;T&amp;gt; List&amp;lt;Future&amp;lt;T&amp;gt;&amp;gt; invokeAll(Collection&amp;lt;? extends Callable&amp;lt;T&amp;gt;&amp;gt; tasks) throws InterruptedException {&lt;br/&gt;
+  public &amp;lt;T&amp;gt; List&amp;lt;Future&amp;lt;T&amp;gt;&amp;gt; invokeAll(Collection&amp;lt;? extends Callable&amp;lt;T&amp;gt;&amp;gt; tasks, long timeout, TimeUnit unit) throws InterruptedException {&lt;br/&gt;
+  public &amp;lt;T&amp;gt; T invokeAny(Collection&amp;lt;? extends Callable&amp;lt;T&amp;gt;&amp;gt; tasks) throws InterruptedException, ExecutionException {&lt;br/&gt;
+  public &amp;lt;T&amp;gt; T invokeAny(Collection&amp;lt;? extends Callable&amp;lt;T&amp;gt;&amp;gt; tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {&lt;br/&gt;
+      while ((!isShutdown || !tasks.isEmpty()) &amp;amp;&amp;amp; (EnvironmentEdgeManager.currentTimeMillis() &amp;lt; nextTimeout)) {&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.io.hfile.TestCacheConfig&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10187//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14074822" author="lhofhansl" created="Fri, 25 Jul 2014 19:48:57 +0000"  >&lt;p&gt;Is that not something we can control in ThreadPoolExecutor with corePoolSize and maximumPoolSize?&lt;/p&gt;</comment>
                            <comment id="14075486" author="nkeywal" created="Sat, 26 Jul 2014 20:30:26 +0000"  >&lt;p&gt;No... There is actually an alternative solution to this problem here: &lt;a href=&quot;http://stackoverflow.com/questions/19528304/how-to-get-the-threadpoolexecutor-to-increase-threads-to-max-before-queueing/19528305#19528305&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/questions/19528304/how-to-get-the-threadpoolexecutor-to-increase-threads-to-max-before-queueing/19528305#19528305&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="14791601" author="stack" created="Thu, 17 Sep 2015 05:27:45 +0000"  >&lt;p&gt;Should we down the keepalive timeout so it is seconds only?  We have allowCoreThreadTimeOut(true);  Core threads would run up to the max but could also go down to zero as is noted in &lt;a href=&quot;http://stackoverflow.com/questions/19528304/how-to-get-the-threadpoolexecutor-to-increase-threads-to-max-before-queueing/19528305#19528305&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/questions/19528304/how-to-get-the-threadpoolexecutor-to-increase-threads-to-max-before-queueing/19528305#19528305&lt;/a&gt;  Or the suggestion by Ralph H at answered Oct 23 &apos;13 at 10:15 in the link looks simple (after executing the current reset the core thread size if not enough for current requests).  There is a new answer on the end... with a GPL soln.&lt;/p&gt;</comment>
                            <comment id="14804373" author="nkeywal" created="Thu, 17 Sep 2015 19:58:46 +0000"  >&lt;p&gt;If we cut down the timeout, it&apos;s more or less equivalent of not having a thread pool at all. &lt;br/&gt;
One of the things I don&apos;t like in many solutions (the TPE I wrote myself included) is that we have a race condition: we may create a thread even if it&apos;s not needed.&lt;br/&gt;
I&apos;m off for 3 days, but I will try to find a reasonable solution next week.&lt;/p&gt;</comment>
                            <comment id="14804478" author="stack" created="Thu, 17 Sep 2015 20:48:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;If we cut down the timeout, it&apos;s more or less equivalent of not having a thread pool at all. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, if a timeout of 1 or 10 seconds, the pool would be in place when we need it... in times of read/write.&lt;/p&gt;

&lt;p&gt;No hurry &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkeywal&quot; class=&quot;user-hover&quot; rel=&quot;nkeywal&quot;&gt;Nicolas Liochon&lt;/a&gt; On the create of one thread too many, I&apos;d not be too worried given we seem to currently create 255 threads too many (smile).&lt;/p&gt;</comment>
                            <comment id="14948255" author="nkeywal" created="Thu, 8 Oct 2015 08:17:33 +0000"  >&lt;p&gt;Hey &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Attached some tests comparing ThreadPoolExecutor (the one we use currently), ForkJoinPool (available in jdk1.7+) and LifoThreadPoolExecutorSQP (the one mentionned in the stackoverflow discussion) .&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the critical use case is:&lt;br/&gt;
   1) do a table.batch(puts) that needs a lot of threads&lt;br/&gt;
   2) then do a loop 
{ table.get(get) }
&lt;p&gt;, this needs a single thread but each call may use any of the threads in the pool, resetting the keepalive timeout =&amp;gt; they may never expire.&lt;br/&gt;
ThreadPoolExecutor is actually worse it tries to create a thread even if there are already enough threads available.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; See the code for the details, but here is the interesting case with a thread pools of 1000 threads while we need only 1 thread.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
	&lt;li&gt;ForkJoinPool maxThread=1000, immediateGet=true, LOOP=2000000&lt;/li&gt;
	&lt;li&gt;ForkJoinPool total=68942ms&lt;/li&gt;
	&lt;li&gt;ForkJoinPool step1=68657ms&lt;/li&gt;
	&lt;li&gt;ForkJoinPool step2=284ms&lt;/li&gt;
	&lt;li&gt;ForkJoinPool threads: 6, 1006, 456, 6  &amp;lt;=== we have 456 threads instead of the ideal 7&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;ThreadPoolExecutor maxThread=1000, immediateGet=true, LOOP=2000000&lt;/li&gt;
	&lt;li&gt;ThreadPoolExecutor total=107449ms &amp;lt;=== very slow&lt;/li&gt;
	&lt;li&gt;ThreadPoolExecutor step1=107145ms&lt;/li&gt;
	&lt;li&gt;ThreadPoolExecutor step2=304ms&lt;/li&gt;
	&lt;li&gt;ThreadPoolExecutor threads: 6, 1006, 889, 6 &amp;lt;== keeps nearly all  the threads -&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;LifoThreadPoolExecutorSQP maxThread=1000, immediateGet=true, LOOP=2000000&lt;/li&gt;
	&lt;li&gt;LifoThreadPoolExecutorSQP total=4805ms &amp;lt;================ quite fast&lt;/li&gt;
	&lt;li&gt;LifoThreadPoolExecutorSQP step1=4803ms&lt;/li&gt;
	&lt;li&gt;LifoThreadPoolExecutorSQP step2=1ms&lt;/li&gt;
	&lt;li&gt;LifoThreadPoolExecutorSQP threads: 6, 248, 8, 6 &amp;lt;====================== removes the threads quickly&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;You may want to rerun the tests to see if you reproduce them. I included my results in the code.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The root issue is that we need a LIFO poll/lock but it does not exists.&lt;/li&gt;
	&lt;li&gt;LifoThreadPoolExecutorSQP solves this with a LIFO queues for the threads waiting for work. But it&lt;br/&gt;
 comes with a LGPL license, and the code is not trivial. A bug there could be difficult to find. It&lt;br/&gt;
  is however incredible to see how faster/better it is compared to the other pools.&lt;/li&gt;
	&lt;li&gt;ForkJoinPool is better then TPE. It&apos;s not as good as LifoThreadPoolExecutorSQP, but it&apos;s much&lt;br/&gt;
 closer to what we need. It&apos;s available in the JDK 1.7 it looks like a safe bet for HBase 1.+&lt;br/&gt;
 ForkJoinPool: threads are created only if there are waiting tasks. They expire after 2seconds (it&apos;s&lt;br/&gt;
  hardcoded in the jdk code). They are not LIFO, and the task allocation is not as fast as the one in LifoThreadPoolExecutorSQP.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;=&amp;gt; Proposition: Let&apos;s migrate to ForkJoinPool. If someone has time to try LifoThreadPoolExecutorSQP it can be interesting in the future (if the license can be changed)...&lt;/p&gt;</comment>
                            <comment id="14951353" author="stack" created="Fri, 9 Oct 2015 22:59:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;It is however incredible to see how faster/better it is compared to the other pools.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is in a different place altogether compared to the other two... in terms of timing and threads used (maybe just because it is more parsimonious in its thread use)? Man.&lt;/p&gt;

&lt;p&gt;Thats a very nice compare there &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkeywal&quot; class=&quot;user-hover&quot; rel=&quot;nkeywal&quot;&gt;Nicolas Liochon&lt;/a&gt; Sure on the FJP. Thats a substantial enough change in perf. to make the change.&lt;/p&gt;</comment>
                            <comment id="14952237" author="nkeywal" created="Sun, 11 Oct 2015 09:40:05 +0000"  >&lt;p&gt;&amp;gt; maybe just because it is more parsimonious in its thread use?&lt;br/&gt;
That&apos;s the magic part: even of there is a single thread in the pool it&apos;s faster than the others. I didn&apos;t check if it consumes more CPU or not however.&lt;/p&gt;

&lt;p&gt;I will do the patch to use ForkJoin soon (hopefully today, if not next week).  &lt;/p&gt;</comment>
                            <comment id="14958560" author="nkeywal" created="Thu, 15 Oct 2015 09:18:03 +0000"  >&lt;p&gt;The issue is that the ThreadPoolExecutor  leaked all over the place, often for monitoring reasons.&lt;br/&gt;
All lot of code depends on ThreadPoolExecutor  rather than the ExecutorService...&lt;/p&gt;

&lt;p&gt;For example, see &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/**
 * This class will coalesce increments from a thift server &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;
 * hbase.regionserver.thrift.coalesceIncrement is set to &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;. Turning &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;
 * config to &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; will cause the thrift server to queue increments into an
 * instance of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; class. The thread pool associated with &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; class will drain
 * the coalesced increments as the thread is able. This can cause data loss &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the
 * thrift server dies or is shut down before everything in the queue is drained.
 *
 */
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class IncrementCoalescer &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; IncrementCoalescerMBean {
&lt;span class=&quot;code-comment&quot;&gt;// snip
&lt;/span&gt;  &lt;span class=&quot;code-comment&quot;&gt;// MBean get/set methods
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getQueueSize() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; pool.getQueue().size();
  }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getMaxQueueSize() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.maxQueueSize;
  }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setMaxQueueSize(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; newSize) {
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.maxQueueSize = newSize;
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; getPoolCompletedTaskCount() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; pool.getCompletedTaskCount();
  }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; getPoolTaskCount() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; pool.getTaskCount();
  }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getPoolLargestPoolSize() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; pool.getLargestPoolSize();
  }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getCorePoolSize() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; pool.getCorePoolSize();
  }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setCorePoolSize(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; newCoreSize) {
    pool.setCorePoolSize(newCoreSize);
  }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getMaxPoolSize() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; pool.getMaximumPoolSize();
  }
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setMaxPoolSize(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; newMaxSize) {
    pool.setMaximumPoolSize(newMaxSize);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;m going to limit this patch to the easy/client stuff...&lt;/p&gt;</comment>
                            <comment id="14958906" author="nkeywal" created="Thu, 15 Oct 2015 13:33:45 +0000"  >&lt;p&gt;The patch compiles locally, but it&apos;s all I checked.&lt;br/&gt;
client side: use the ForkJoin instead of ThreadPoolExecutor; remove the monitoring linked to ThreadPoolExecutor&lt;br/&gt;
server side: when possible; use the interface (ExecutorService) instead of the implementation (ThreadPoolExecutor)&lt;/p&gt;</comment>
                            <comment id="14958991" author="hadoopqa" created="Thu, 15 Oct 2015 14:33:54 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12766789/HBASE-11590.v1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12766789/HBASE-11590.v1.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit e7defd7d9a76f44e3089db3fe522fe400fe6dcd7.&lt;br/&gt;
  ATTACHMENT ID: 12766789&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 18 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1754 checkstyle errors (more than the master&apos;s current 1747 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +    ExecutorService pool = ProcedureCoordinator.defaultPool(COORDINATOR_NODE_NAME, POOL_SIZE, KEEP_ALIVE);&lt;br/&gt;
+    ExecutorService pool = ProcedureCoordinator.defaultPool(COORDINATOR_NODE_NAME, POOL_SIZE, KEEP_ALIVE);&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16028//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16028//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16028//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16028//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16028//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16028//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16028//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16028//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12765541" name="ExecutorServiceTest.java" size="25157" author="nkeywal" created="Thu, 8 Oct 2015 08:21:54 +0000"/>
                            <attachment id="12766789" name="HBASE-11590.v1.patch" size="52565" author="nkeywal" created="Thu, 15 Oct 2015 13:30:16 +0000"/>
                            <attachment id="12765538" name="LifoThreadPoolExecutorSQP.java" size="19887" author="nkeywal" created="Thu, 8 Oct 2015 08:21:54 +0000"/>
                            <attachment id="12765539" name="UnitQueueP.java" size="3010" author="nkeywal" created="Thu, 8 Oct 2015 08:21:54 +0000"/>
                            <attachment id="12765540" name="UnitQueuePU.java" size="3270" author="nkeywal" created="Thu, 8 Oct 2015 08:21:54 +0000"/>
                            <attachment id="12657819" name="tp.patch" size="20356" author="nkeywal" created="Fri, 25 Jul 2014 12:06:45 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 25 Jul 2014 12:44:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>407790</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 9 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1y64f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>407799</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>