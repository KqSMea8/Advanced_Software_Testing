<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:02:08 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2466/HBASE-2466.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2466] Improving filter API to allow for modification of keyvalue list by filter</title>
                <link>https://issues.apache.org/jira/browse/HBASE-2466</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;As it stands, the Filter interface allows filtering by&lt;/p&gt;

&lt;p&gt;Filter#filterAllRemaining() -&amp;gt; true indicates scan is over, false, keep going on.&lt;br/&gt;
Filter#filterRowKey(byte[],int,int) -&amp;gt; true to drop this row, if false, we will also call&lt;br/&gt;
Filter#filterKeyValue(KeyValue) -&amp;gt; true to drop this key/value&lt;br/&gt;
Filter#filterRow() -&amp;gt; last chance to drop entire row based on the sequence of filterValue() calls. Eg: filter a row if it doesn&apos;t contain a specified column.&lt;/p&gt;

&lt;p&gt;It would be useful to allow for an additional API in the form of a step to prune the list of KeyValues to be sent by implementing an additional&lt;br/&gt;
Filter#filterRow(List&amp;lt;KeyValue&amp;gt;)&lt;/p&gt;

&lt;p&gt;This would allow for a user to write a custom filter against the api that drops unnecessary KeyValues according to user-defined rules.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12462401">HBASE-2466</key>
            <summary>Improving filter API to allow for modification of keyvalue list by filter</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="juhanic">Juhani Connolly</reporter>
                        <labels>
                    </labels>
                <created>Mon, 19 Apr 2010 07:22:48 +0000</created>
                <updated>Fri, 20 Nov 2015 12:41:34 +0000</updated>
                            <resolved>Tue, 18 May 2010 21:38:26 +0000</resolved>
                                                    <fixVersion>0.90.0</fixVersion>
                                    <component>Filters</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12858406" author="juhanic" created="Mon, 19 Apr 2010 07:23:49 +0000"  >&lt;p&gt;Original exchange on mailing list:&lt;/p&gt;

&lt;p&gt;-------------------------------------------------------------------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Yes you are correct, filterRow() only offers the chance to reject the&lt;br/&gt;
row, editing the row was expected to be done in the filterKeyValue()&lt;br/&gt;
call.&lt;/p&gt;

&lt;p&gt;The problem with the filter &quot;interface&quot; is it is highly tied to the&lt;br/&gt;
implementation, which is why things look perhaps a little weird and&lt;br/&gt;
not super generic. Previously the filter was expected to be run only&lt;br/&gt;
at the StoreScanner level, so that might explain a few things.&lt;/p&gt;

&lt;p&gt;I think an additional edit call to allow a filter to have ultimate&lt;br/&gt;
last minute decision making on a row&apos;s worth of results might be&lt;br/&gt;
workable now.&lt;/p&gt;

&lt;p&gt;I&apos;d review such a patch.&lt;/p&gt;

&lt;p&gt;-ryan&lt;/p&gt;

&lt;p&gt;On Sun, Apr 18, 2010 at 10:30 PM, Juhani Connolly &amp;lt;juhani@ninja.co.jp&amp;gt; wrote:&lt;br/&gt;
&amp;gt; &amp;gt; Thanks for your response&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; On 04/19/2010 12:59 PM, Ryan Rawson wrote:&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; I think all the functionality is there between these 2 calls:&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; Filter#filterKeyValue(KeyValue kv);&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; and&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; Filter#filterRow();&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; In the first call you can cache the KeyValues locally in the filter&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; state (in a List&amp;lt;KeyValue&amp;gt;  for example).  In the last call you can do&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; your custom logic based on all the KeyValues you have seen.  There is&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; little to no cost to do this, since retaining references to a KeyValue&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; is cheap (ish, relatively, etc).&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; But ultimately the only thing I can do with Filter#filterRow() is drop the&lt;br/&gt;
&amp;gt; &amp;gt; full row? Am I missing something here? Were I to store references to all the&lt;br/&gt;
&amp;gt; &amp;gt; key values that have passed through at most I could zero out their buffers&lt;br/&gt;
&amp;gt; &amp;gt; in the #filterRow call? I&apos;m not sure what the consequences of this might be&lt;br/&gt;
&amp;gt; &amp;gt; afterwords as the scanner tries to send a load of empty cells. Looking at&lt;br/&gt;
&amp;gt; &amp;gt; HRegionServer#next(final long scannerId, int nbRows), it seems to me that&lt;br/&gt;
&amp;gt; &amp;gt; they would get packed into Result to get sent back to the client. I could&lt;br/&gt;
&amp;gt; &amp;gt; certainly cut down on a lot of transfer by just sending &quot;empty&quot; keyvalues,&lt;br/&gt;
&amp;gt; &amp;gt; but it still seems like a lot of overhead that could be lost by a small api&lt;br/&gt;
&amp;gt; &amp;gt; change. Or am I missing something here?&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; The filter implementation has changed a bit since August 2009, and it&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; might be possible to create a call like&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; Filter#filterRow(List&amp;lt;KeyValue&amp;gt;  results) that is called at the &quot;end&quot;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; of a row... you can get the same effect as I noted above.  It is just&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; a matter of API, not of semantics.&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; Having followed the code, it did seem like it would be trivial to implement&lt;br/&gt;
&amp;gt; &amp;gt; such an extra api either before or after the Filter#filterRow(). I believe&lt;br/&gt;
&amp;gt; &amp;gt; the option of having the ability to knock keyvals out of the list would save&lt;br/&gt;
&amp;gt; &amp;gt; on processing later.&lt;br/&gt;
&amp;gt; &amp;gt; I would be happy to try putting together the minor modification to&lt;br/&gt;
&amp;gt; &amp;gt; RegionScanner and adding a unit test if such a modification were welcome.&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; I would generally discourage you from structuring your data to fit an&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; internal implementation detail.  While there are no current plans to&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; change sorting order, it would make your code more brittle.&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt; I certainly wouldn&apos;t want to do it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I&apos;m going to have to see how much&lt;br/&gt;
&amp;gt; &amp;gt; overhead I get with a) just dealing with it client end or b) keeping&lt;br/&gt;
&amp;gt; &amp;gt; references and zeroing the keyvals and go from there.&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; -ryan&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt; On Sun, Apr 18, 2010 at 8:48 PM, Juhani Connolly&amp;lt;juhani@ninja.co.jp&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;  wrote:&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; I&apos;ve spent some time looking through the regionscanner logic, in&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; particular&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; the filter related parts and would want to check if a) my current&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; understanding is correct and b) if this may be subject to change.&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; short/simplified version to avoid getting sidetracked:&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; - A RegionScanner is built from a series of scanners attached to each&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; Store.&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; - This list of scanners is stored in a KeyValueHeap which compares&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; KeyValues&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; to sort the order in which entries are retrieved by RegionScanner-&amp;gt;next&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;  - To check the order in which keys will be returned, and thus filtered&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; one&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; can look at KeyValue.KeyComparator-&amp;gt;compare. It&apos;s something like: sort by&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; row, then column family, then column, then timestamp&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; Filters are applied as described in&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; &lt;a href=&quot;http://hadoop.apache.org/hbase/docs/r0.20.3/api/org/apache/hadoop/hbase/filter/Filter.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hadoop.apache.org/hbase/docs/r0.20.3/api/org/apache/hadoop/hbase/filter/Filter.html&lt;/a&gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; In the end, when using filterKeyValue(KeyValue) one can expect the&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; keyValues&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; to be sent to it in a sorted order. Will this always be the case?&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; I ask this because I currently plan to filter the values of col-b based&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; on&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; the values in col-a. This could be achieved by making sure col-a compares&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; lower than col-b and storing some kind of data(e.g. a list of &quot;ok&quot;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; timestamps) within the custom filter. Does this all sound ok?&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; Finally it would be nice to see the option to filter a full set, as&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; naming&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; columns to guarrantee a certain sorting for filters seems pretty dubious:&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; - Probably in HRegion.Regionserver-&amp;gt;next after nextInternal, before&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; filterRow?&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; - This would allow a potential filter to go through the gathered results&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; and&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; prune them depending on intercolumn dependencies?&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; - I believe it would unlock a lot of possibilities for custom filters&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; that&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; could cut down on significant amount of transfers where a rows data could&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; be&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; pruned regionserver side rather than at the client. My particular&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; application is to only store col-b where there is a col-a with a&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; corresponding timestamp that matches specific conditions. In my&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; particular&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; case this results in massive reductions in the amount of cells being sent&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; from the regionserver.&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; Any thoughts would be appreciated.&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; As an aside, I believe HRegion.RegionScanner-&amp;gt;nextInternal is doing&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; filterRowKey for every key in a row even if it has passed once? Is this&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; intentional behaviour(it seems somewhat unexpected), as otherwise it&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; could&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; be optimised by just checking the samerow variable.&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt;&amp;gt; &amp;gt;&amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;br/&gt;
&amp;gt; &amp;gt;&lt;/p&gt;</comment>
                            <comment id="12858409" author="juhanic" created="Mon, 19 Apr 2010 07:27:46 +0000"  >&lt;p&gt;I&apos;ve written up a fairly trivial patch for this that should do the job. &lt;/p&gt;

&lt;p&gt;I&apos;m more wondering about what type of UnitTest I should write? Implement a Filter that uses it and write a test for that? Should I put up a preliminary patch without a test for the time being? What I have now appears to pass existing tests.&lt;/p&gt;</comment>
                            <comment id="12858507" author="stack" created="Mon, 19 Apr 2010 14:40:48 +0000"  >&lt;p&gt;There are filter tests under src/test.  Add one there.  But yeah, put up a patch so fellas can take a look first.  Since you are changing the filter API, it might take a few go arounds to get it right.  Thanks. &lt;/p&gt;</comment>
                            <comment id="12858747" author="juhanic" created="Tue, 20 Apr 2010 02:03:46 +0000"  >&lt;p&gt;Initial patch that implements the suggested changes:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added public boolean filterRow(List&amp;lt;KeyValue&amp;gt; kvs); to the Filter interface, modifying existing filters as necessary&lt;/li&gt;
	&lt;li&gt;Added a class to use it DependentColumnFilter along with unit test TestDependentColumnFilter&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;All core tests pass, some issues with stargate but appear to be entirely unrelated, a problem on test machine perhaps?&lt;br/&gt;
For javadoc, the contribution guide is out of date, so I tried mvn javadoc:javadoc which put out 2 warnings, however these seemed entirely unrelated.&lt;/p&gt;

&lt;p&gt;A review would be appreciated.&lt;/p&gt;</comment>
                            <comment id="12859028" author="stack" created="Tue, 20 Apr 2010 19:12:40 +0000"  >&lt;p&gt;Patch looks good.  It seems to be missing an entry in io.HbaseObjectWritable (Check it out.  See how every filter has an entry therein?  My guess is that all is fine up in eclipse but when you go distributed your new filter will fail, weirdly).  Thanks.&lt;/p&gt;</comment>
                            <comment id="12859130" author="juhanic" created="Wed, 21 Apr 2010 00:00:13 +0000"  >&lt;p&gt;I&apos;ll check that out and resubmit, thanks.&lt;/p&gt;

</comment>
                            <comment id="12859172" author="juhanic" created="Wed, 21 Apr 2010 02:48:14 +0000"  >&lt;p&gt;Added DependentColumnFilter to io.HBaseObjectWritable&lt;br/&gt;
mvn assembly:assembly seems good&lt;/p&gt;</comment>
                            <comment id="12859186" author="stack" created="Wed, 21 Apr 2010 03:58:27 +0000"  >&lt;p&gt;Thanks for updating the patch. Looks good to me.  Let me bug Ryan to make him do quick review since he knows this area best.&lt;/p&gt;</comment>
                            <comment id="12859229" author="juhanic" created="Wed, 21 Apr 2010 06:22:35 +0000"  >&lt;p&gt;A question regarding the addition to io.HBaseObjectWritable: this basically means even with an updated API any user wanting to make their own custom filter would need to not only add their new filter to the CLASSPATH, but also to patch and rebuild their HBase distro to add it? My original intention &lt;/p&gt;</comment>
                            <comment id="12859232" author="juhanic" created="Wed, 21 Apr 2010 06:29:17 +0000"  >&lt;p&gt;Nothing beats an accidental tab-&amp;gt;enter submit, sorry &lt;del&gt;_&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;My original intention was to expand on the api to allow for more advanced filters to be made, with DependentColumnFilter more as a demo of the expanded API that might have some use in simple cases.&lt;br/&gt;
If making additional patches were to require a user to patch io.HBaseObjectWritable, I&apos;d like to work some more substantial functionality into the filter. &lt;br/&gt;
Let me know what you think&lt;/p&gt;</comment>
                            <comment id="12859537" author="ryanobjc" created="Wed, 21 Apr 2010 21:45:36 +0000"  >&lt;p&gt;I think the API should be simpler, rather than providing 3 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/warning.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ways to veto a row, lets stick with 2.&lt;/p&gt;

&lt;p&gt;The current Filter.java API is like so:&lt;br/&gt;
  public boolean filterRow(List&amp;lt;KeyValue&amp;gt; kvs);&lt;br/&gt;
  public boolean filterRow();&lt;/p&gt;

&lt;p&gt;in the interests in compatibility, i would argue we should keep call #2 for certain.&lt;/p&gt;

&lt;p&gt;But the first call should be simplified to:&lt;/p&gt;

&lt;p&gt;public void filterRow(List&amp;lt;KeyValue&amp;gt; kvs);&lt;/p&gt;

&lt;p&gt;if an implementation wants to null out a row they do:&lt;br/&gt;
kvs.clear(); &lt;/p&gt;

&lt;p&gt;in their implementation.&lt;/p&gt;

&lt;p&gt;That will make the RegionScanner implementation go from:&lt;br/&gt;
      if (!returnResult &amp;amp;&amp;amp; filter != null) {&lt;br/&gt;
        // final chance to modify row contents&lt;br/&gt;
    	returnResult = filter.filterRow(results);&lt;br/&gt;
    	// final chance to drop the row... This may be superfluous with the addition of the above?&lt;br/&gt;
    	// still needed for backwards compatibility however&lt;br/&gt;
    	if (returnResult || filter.filterRow()) &lt;/p&gt;
{
    	  results.clear();
    	}
&lt;p&gt;      }&lt;/p&gt;

&lt;p&gt;to more like yay so:&lt;br/&gt;
if (!returnResult &amp;amp;&amp;amp; filter != null) &lt;/p&gt;
{
   filter.filterRow(results);
   if (filter.filterRow())
     results.clear();
}
</comment>
                            <comment id="12859539" author="ryanobjc" created="Wed, 21 Apr 2010 21:50:24 +0000"  >&lt;p&gt;also you need to modify hasResults() as well.  right now this new call would only work on the &apos;last row&apos; of a scan.&lt;/p&gt;</comment>
                            <comment id="12859630" author="juhanic" created="Thu, 22 Apr 2010 03:04:59 +0000"  >&lt;p&gt;I&apos;m changing the new api to return void as suggested.&lt;/p&gt;

&lt;p&gt;I&apos;m leaving the hasResults functionality as it is, and filtering keyvals regardless of the return from nextInternal.&lt;/p&gt;

&lt;p&gt;However, I noticed that limit may result in some issues with this filter. With it set one would only be comparing an incomplete list, thus losing values which haven&apos;t been passed yet. &lt;br/&gt;
What would be the preferable outcome of this? &lt;br/&gt;
-Document the fact that using Scan.setBatch may result in the API not only comparing each batch?&lt;br/&gt;
-Log a warning or throw an exception?&lt;br/&gt;
-Add functionality to a filter that disables batching... Filter#isBatchable along with a check in HRegion.HRegionScanner#nextInternal&lt;/p&gt;</comment>
                            <comment id="12859636" author="ryanobjc" created="Thu, 22 Apr 2010 03:22:52 +0000"  >&lt;p&gt;it seems like the right thing to do would be to disallow filters that&lt;br/&gt;
use filterRow() and filterRow(List) if you are using the batch&lt;br/&gt;
functionality. This could be implemented by providing a new method:&lt;br/&gt;
public boolean hasFilterRow();&lt;/p&gt;

&lt;p&gt;if returns true, then the filter expects to do something within&lt;br/&gt;
filterRow() (either variety) and thus a batched scan cannot be&lt;br/&gt;
allowed.&lt;/p&gt;

&lt;p&gt;Most filters would either hardcode this, or defer to the union of&lt;br/&gt;
their underlying filter responses.&lt;/p&gt;

&lt;p&gt;As for the hasResults() - it is used to filter the results between&lt;br/&gt;
rows, if filterRow() returns true inside hasResults, then nextInternal&lt;br/&gt;
will continue on to find the next row of returnable results.  This is&lt;br/&gt;
so that RegionScanner#next() always returns an actual row and we dont&lt;br/&gt;
need to wrap it with another method.  So not calling filterRow(List)&lt;br/&gt;
inside hasResults would surely end up with a problem?  Does your unit&lt;br/&gt;
test cover this case?&lt;/p&gt;

</comment>
                            <comment id="12859665" author="juhani@ninja.co.jp" created="Thu, 22 Apr 2010 05:34:51 +0000"  >&lt;p&gt;Ok, that approach seemed to make sense to me too.&lt;/p&gt;

&lt;p&gt;Good point regarding hasResults, I&apos;ll get filterRow(List) in there. I &lt;br/&gt;
might look at splitting the &quot;added&quot; functionality out of it to make the &lt;br/&gt;
code more clear.&lt;br/&gt;
I&apos;m going to take a bit of time to expand more on the unit test, and &lt;br/&gt;
I&apos;ll up another patch then.&lt;/p&gt;

</comment>
                            <comment id="12859666" author="ryanobjc" created="Thu, 22 Apr 2010 05:40:52 +0000"  >&lt;p&gt;Awesome, I look forward to your next piece of work!&lt;/p&gt;

&lt;p&gt;On Wed, Apr 21, 2010 at 10:34 PM, Juhani Connolly (JIRA)&lt;/p&gt;
</comment>
                            <comment id="12860190" author="juhanic" created="Fri, 23 Apr 2010 09:12:48 +0000"  >&lt;p&gt;I&apos;ve added in the suggested hasFilterRow, and an exception &quot;IncompatibleFilterException&quot; for batched scans on a filter that returns true for hasFilterRow. Also fixing the logic in hasResults that would have caused multi-row scans to fail.&lt;/p&gt;

&lt;p&gt;In addition I expanded the unit test to include a scan on an HRegion, and all current unit tests pass.&lt;/p&gt;

&lt;p&gt;While I&apos;m satisfied with the API modifications themselves, I think that as it is DependentColumnFilter lacks a lot of functionality and intend to expand on it&lt;/p&gt;</comment>
                            <comment id="12861728" author="juhanic" created="Wed, 28 Apr 2010 08:45:39 +0000"  >&lt;p&gt;I intend to include an optional compare operation for DependentCompareFilter.&lt;/p&gt;

&lt;p&gt;The constructor would be like this:&lt;/p&gt;

&lt;p&gt;  /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Build a dependent column filter with value checking&lt;/li&gt;
	&lt;li&gt;dependent column varies will be compared using the supplied&lt;/li&gt;
	&lt;li&gt;compareOp and comparator, for usage of which&lt;/li&gt;
	&lt;li&gt;refer to 
{@link CompareFilter}&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;@param family dependent column family&lt;/li&gt;
	&lt;li&gt;@param qualifier dependent column qualifier&lt;/li&gt;
	&lt;li&gt;@param dropDependentColumn whether the column should be discarded after&lt;/li&gt;
	&lt;li&gt;@param valueCompareOp comparison operation&lt;/li&gt;
	&lt;li&gt;@param valueComparator comparator&lt;br/&gt;
   */&lt;br/&gt;
  public DependentColumnFilter(final byte [] family, final byte[] qualifier,&lt;br/&gt;
		  final boolean dropDependentColumn, final CompareOp valueCompareOp,&lt;br/&gt;
	      final WritableByteArrayComparable valueComparator) &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I see a couple of ways of doing this:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;extend DependentColumnFilter from CompareFilter, and add a CompareOp NO_OP to CompareFilter.CompareOp (for when you just want all &quot;versions of a row with dependent column&quot;). When gathering &quot;valid&quot; timestamps doCompare will allow simple discards.&lt;/li&gt;
	&lt;li&gt;This would be practical for future filters that include an optional comparison, so I think the change would make sense&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;OR&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;include some of CompareFilters code within DependentColumnFilter. Specifically add a new CompareOp, and a doCompare function&lt;/li&gt;
	&lt;li&gt;I don&apos;t really like this approach as it&apos;s repeating code, but it avoids further having to modify outside code.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Does the first approach sound reasonable?&lt;/p&gt;

&lt;p&gt;Also, am I being too cautious for what ultimately is a very minor change(as in, should I have just gone and done it without posting this)?&lt;/p&gt;</comment>
                            <comment id="12861737" author="ryanobjc" created="Wed, 28 Apr 2010 09:08:54 +0000"  >&lt;p&gt;technically it&apos;s all internal to hbase code, so some minor refactoring&lt;br/&gt;
is acceptable. help improve the codebase also by improving the state&lt;br/&gt;
of the unit tests and that will be a good thing indeed. factoring out&lt;br/&gt;
common code is totally reasonable i think.&lt;/p&gt;

</comment>
                            <comment id="12861748" author="juhanic" created="Wed, 28 Apr 2010 09:57:03 +0000"  >&lt;p&gt;Excellent. I have the above proposal done but it&apos;s failing a test so I need to look into that before submitting. I&apos;ll have it up in a week once I&apos;m back from holidays.&lt;/p&gt;

&lt;p&gt;Once this gets done I&apos;ll have a look at the other filters and try and improve the unit tests. I&apos;ll open up another issue for that once I get to it.&lt;/p&gt;</comment>
                            <comment id="12865018" author="juhanic" created="Fri, 7 May 2010 04:29:28 +0000"  >&lt;p&gt;Included functionality in DependentColumnFilter that allows included timestamps to be restricted by the value.&lt;br/&gt;
Improved tests to include scans over an HRegion&lt;/p&gt;

&lt;p&gt;Passes all tests. Could use a review. &lt;/p&gt;


&lt;p&gt;One possible application of DependentColumnFilter:&lt;/p&gt;

&lt;p&gt;restricting &quot;sets of entries&quot; by a specific value:&lt;br/&gt;
A blog-entries table with several columns for comments: title, text, author. Entries in these with the same Timestamp would consist of a single full comment. One could set up a filter that restricts by author discarding all comments from Bob.&lt;/p&gt;
</comment>
                            <comment id="12868460" author="ryanobjc" created="Tue, 18 May 2010 00:08:23 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;This looks good to me.&lt;/p&gt;

&lt;p&gt;I had to do a brief set of refactoring to make it fit into trunk with the revamped implementation of RegionScanner.  I also am going to add an abstract class FilterBase which all filters will extend that will take some of the boilerplate out of writing new filters.&lt;/p&gt;

&lt;p&gt;Thanks for the contrib!&lt;/p&gt;</comment>
                            <comment id="12868538" author="juhanic" created="Tue, 18 May 2010 05:45:00 +0000"  >&lt;p&gt;Great! It&apos;s been good to be able to contribute and I hope to be able to more for this awesome project when I have the spare time. I&apos;ll wait for this and FilterBase to go into trunk before having a look at cleaning up the code and unit tests.&lt;/p&gt;</comment>
                            <comment id="12868843" author="ryanobjc" created="Tue, 18 May 2010 21:38:16 +0000"  >&lt;p&gt;I&apos;ve committed this to trunk.  Any further improvements to filter testing and testability would be welcome.  If you have something just open a JIRA file a patch and assign it to me and I&apos;ll check it out.&lt;/p&gt;

&lt;p&gt;Thanks for the contribution!&lt;/p&gt;</comment>
                            <comment id="15017012" author="lars_francke" created="Fri, 20 Nov 2015 12:41:34 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12442383" name="HBASE-2466-2.patch" size="18156" author="juhanic" created="Wed, 21 Apr 2010 02:48:14 +0000"/>
                            <attachment id="12442661" name="HBASE-2466-4.patch" size="26731" author="juhanic" created="Fri, 23 Apr 2010 09:12:48 +0000"/>
                            <attachment id="12443922" name="HBASE-2466-5.patch" size="30780" author="juhanic" created="Fri, 7 May 2010 04:29:27 +0000"/>
                            <attachment id="12442254" name="HBASE-2466.patch" size="17563" author="juhanic" created="Tue, 20 Apr 2010 02:03:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 19 Apr 2010 14:40:48 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32599</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hhtz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100151</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>