<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:25:37 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-11682/HBASE-11682.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-11682] Explain hotspotting</title>
                <link>https://issues.apache.org/jira/browse/HBASE-11682</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description></description>
                <environment></environment>
        <key id="12732212">HBASE-11682</key>
            <summary>Explain hotspotting</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="misty">Misty Stanley-Jones</assignee>
                                    <reporter username="misty">Misty Stanley-Jones</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Aug 2014 03:10:31 +0000</created>
                <updated>Sat, 21 Feb 2015 23:33:00 +0000</updated>
                            <resolved>Tue, 19 Aug 2014 23:50:49 +0000</resolved>
                                                    <fixVersion>0.99.0</fixVersion>
                    <fixVersion>2.0.0</fixVersion>
                                    <component>documentation</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="14087183" author="misty" created="Wed, 6 Aug 2014 03:13:17 +0000"  >&lt;p&gt;This is my understanding of hotspotting. I didn&apos;t find mention of it in the Ref Guide anywhere even though it is an important issue.&lt;/p&gt;</comment>
                            <comment id="14087207" author="ndimiduk" created="Wed, 6 Aug 2014 03:51:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;HBase also attempts to store rows near each other in the same region, on the same region server.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This sentence doesn&apos;t help much. A region is a contiguous sequence of rows that are physically hosted as a unit. Rows on region boundaries are lexicographically near each other but are part of different regions, so there are no guarantees about them being hosted on the same region server.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;However, poorly designed row keys can lead to &amp;lt;firstterm&amp;gt;hotspotting&amp;lt;/firstterm&amp;gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is where schema/rowkey design and access patterns go hand-in-hand.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Hotspotting occurs when nearly all the rows being written to HBase are written to the same region, because their row keys are contiguous or very similar.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d say &quot;Hotspotting occurs when too much client traffic is directed at a single region. This can be from reads, writes, or both. The traffic overwhelms the single machine responsible for hosting that region, causing performance degradation and potentially leading to region unavailability. This can also have adverse effects on other regions hosted by the same region server as that host is unable to service the requested load.&quot;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;but in the bigger picture, data is being written to multiple regions across the cluster ...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Again, not limited to writes.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One technique is to salt the row keys&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Is the term &quot;salt&quot; explained?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;However, using totally random row keys would remove any benefit of HBase&apos;s row-sorting algorithm and cause very poor performance, as each get or scan would need to query all regions.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You&apos;re assuming a sequential access pattern here. Random rowkeys can be okay for random read access patterns, in that load is spread all over the cluster. I&apos;ve seen other issues around poor blockcache performance from completely random access patterns, but that&apos;s a slight tangent.&lt;/p&gt;</comment>
                            <comment id="14087217" author="misty" created="Wed, 6 Aug 2014 04:09:49 +0000"  >&lt;p&gt;Thanks for the feedback, I took it on board and created a new patch. I also added a couple links to articles about using a salt with row keys.&lt;/p&gt;</comment>
                            <comment id="14087245" author="hadoopqa" created="Wed, 6 Aug 2014 04:53:29 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12660036/HBASE-11682.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12660036/HBASE-11682.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12660036&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+0 tests included&lt;/font&gt;.  The patch appears to be a documentation patch that doesn&apos;t require tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestRegionReplicas&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestRestartCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestReplicasClient&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestMasterOperationsForRegionReplicas&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.client.TestHCM.testClusterStatus(TestHCM.java:250)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10309//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14087318" author="hadoopqa" created="Wed, 6 Aug 2014 06:22:41 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12660043/HBASE-11682-1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12660043/HBASE-11682-1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12660043&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+0 tests included&lt;/font&gt;.  The patch appears to be a documentation patch that doesn&apos;t require tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +          xlink:href=&quot;http://blog.sematext.com/2012/04/09/hbasewd-avoid-regionserver-hotspotting-despite-writing-records-with-sequential-keys/&quot;&lt;br/&gt;
+          &amp;gt;&lt;a href=&quot;http://blog.sematext.com/2012/04/09/hbasewd-avoid-regionserver-hotspotting-despite-writing-records-with-sequential-keys/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blog.sematext.com/2012/04/09/hbasewd-avoid-regionserver-hotspotting-despite-writing-records-with-sequential-keys/&lt;/a&gt;&amp;lt;/link&amp;gt;.&lt;br/&gt;
+          xlink:href=&quot;https://communities.intel.com/community/itpeernetwork/datastack/blog/2013/11/10/discussion-on-designing-hbase-tables&quot;&lt;br/&gt;
+          &amp;gt;&lt;a href=&quot;https://communities.intel.com/community/itpeernetwork/datastack/blog/2013/11/10/discussion-on-designing-hbase-tables&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://communities.intel.com/community/itpeernetwork/datastack/blog/2013/11/10/discussion-on-designing-hbase-tables&lt;/a&gt;&amp;lt;/link&amp;gt;.&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestRegionReplicas&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestRestartCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestReplicasClient&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestMasterOperationsForRegionReplicas&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10312//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14087751" author="jmhsieh" created="Wed, 6 Aug 2014 14:59:35 +0000"  >&lt;p&gt;Nice addition.  Personally, I don&apos;t really like the sematext definition of salting it conflates salting &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; with hashing&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; which are two separate things.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;salting&lt;/b&gt; adds random data to the start of a rowkey. this means depending on the &apos;salt factor&apos; you could end up writing to n different row keys (and ideally n different regions).  When reading you would generally want to read all n rows and coalesce the values.  This is helpful if you have individual hot keys.  It is often a bad smell because it is a trick used to try to mitigate having the date as the first part of a row key, but does have valid use cases. (ex: rowkey is name and you have a handful of individual celebreties  - obama, bieber, gaga - that need to have their load spread).  This preserves ordering but multiplies the number of reads required wrt # of writes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;hashing&lt;/b&gt; applies a random one way function to the rowkey such that a particular row will get the same &apos;random&apos; value prepended.  The original row would get mapped to a single row.   This is good for when you have clusters of related keys that in aggregate form a hotspot.  (Example: rowkey is name and you have way to many joe&apos;s, john&apos;s, jon&apos;s, jonah&apos;s, jonathan&apos;s, and jonathons&apos;s all on the same region &amp;#8211; using a hash would spread all the j names around).  this throws out the ability to effectively take advantage of the row ordering properties.&lt;/p&gt;

&lt;p&gt;Another trick is to take numeric or fixed length values and make the least significant digit (e.g. the one that changes the most) in least significant digit order (little endian).  This effectively randomizes row key names but also sacrifices row ordering properties.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Salt_(cryptography&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Salt_(cryptography&lt;/a&gt;)&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://en.wikipedia.org/wiki/Hash_function&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Hash_function&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14087833" author="ndimiduk" created="Wed, 6 Aug 2014 16:08:27 +0000"  >&lt;p&gt;Please note that &quot;salting&quot; as we use the term in HBase is different from &quot;salting&quot; in the cryptographic sense. Our usage pattern is more accurately described as &quot;bucketing&quot; (I think this is the term Phoenix uses), or &quot;binning&quot; &lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;. This horse has been beaten to death on the user and dev mailing lists, so I won&apos;t belabor the point.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;: &lt;a href=&quot;http://en.wikipedia.org/wiki/Data_binning&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Data_binning&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14087839" author="ndimiduk" created="Wed, 6 Aug 2014 16:12:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;However, using totally random row keys for data which is accessed sequentially would remove the benefit of HBase&apos;s row-sorting algorithm and cause very poor performance, as each get or scan would need to query all regions.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Prefixing with random byte prevents any meaningful use of scans; gets become your only option. This approach is indistinguishable from hashing the rowkey.&lt;/p&gt;

&lt;p&gt;I like the rest of the updates, +1&lt;/p&gt;

&lt;p&gt;Thanks a lot &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=misty&quot; class=&quot;user-hover&quot; rel=&quot;misty&quot;&gt;Misty Stanley-Jones&lt;/a&gt;!&lt;/p&gt;</comment>
                            <comment id="14087891" author="jmhsieh" created="Wed, 6 Aug 2014 16:50:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;Please note that &quot;salting&quot; as we use the term in HBase is different from &quot;salting&quot; in the cryptographic sense. Our usage pattern is more accurately described as &quot;bucketing&quot; (I think this is the term Phoenix uses), or &quot;binning&quot; &lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;. This horse has been beaten to death on the user and dev mailing lists, so I won&apos;t belabor the point.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree they are different but the idea of a random (as opposed to a deterministic hash) prepended is very similar to the crypto &quot;salting&quot;.  Instead of using &quot;salting&quot; how about we use the term &quot;striping&quot;?  What I&apos;ve was referring and described takes one logical row and stripes it across many rows so that write throughput can be increased.  The penalty is that we loose some consistency and also if we want a &quot;whole&quot; answer read all the rows the logical rows was striped over.  I&apos;ve seen the pattern deployed at several customers.&lt;/p&gt;

&lt;p&gt;From what phoenix uses and what I think you mean, &quot;bucketing&apos;, and &quot;binning&quot; are equivalent to prepending a hash.&lt;/p&gt;</comment>
                            <comment id="14088435" author="ndimiduk" created="Wed, 6 Aug 2014 23:05:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;From what phoenix uses and what I think you mean, &quot;bucketing&apos;, and &quot;binning&quot; are equivalent to prepending a hash.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, that&apos;s consistent with my understanding as well. I&apos;d prefer not to introduce yet another term to the conversation (or add confusion with striped compactions). Even though it&apos;s not perfect, I think it best to stick with &quot;salt&quot;.&lt;/p&gt;</comment>
                            <comment id="14088454" author="jmhsieh" created="Wed, 6 Aug 2014 23:15:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;Even though it&apos;s not perfect, I think it best to stick with &quot;salt&quot;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not sure if we are on the same page here &amp;#8211; my main point is that &quot;salt&quot; != &quot;hash&quot;.   Also, &quot;salt&quot; != &quot;Prepend a hash&quot;.  If the term salt causes confusion, my suggestion is not to use it.&lt;/p&gt;

&lt;p&gt;The other mechanisms mentioned (striping/prepened a rand and endian inversion) are valid strategies to avoid hotspotting as well.&lt;/p&gt;</comment>
                            <comment id="14088458" author="ndimiduk" created="Wed, 6 Aug 2014 23:23:26 +0000"  >&lt;p&gt;From the conversations on user list I&apos;ve seen, &quot;salt&quot; tends to mean &quot;prepend with some fixed-byte-length value, usually a modulo of the number of regionservers&quot; &amp;#8211; the same as your &quot;striping&quot;. I&apos;ve also seen lazy people prepend with the first N bytes of the hashed rowkey, hence my loose language in the previous comment.&lt;/p&gt;</comment>
                            <comment id="14088536" author="jmhsieh" created="Thu, 7 Aug 2014 00:41:47 +0000"  >&lt;p&gt;More precisely, for &quot;salt&quot;/&quot;stripe&quot; I&apos;ve seen prepend some fixed byte-length rand value, were rand value is between [0, k * (# of regionservers) ] where k is some constant.  I think that is what you mean but i&apos;m not sure.  If we agree we should have misty define salt in the prose instead of pointing to an external definition.&lt;/p&gt;

</comment>
                            <comment id="14088575" author="ndimiduk" created="Thu, 7 Aug 2014 00:59:44 +0000"  >&lt;p&gt;I don&apos;t think we need to define how the salt bytes might be calculated. It should be enough to define the concept as prepending some with a defined cardinality to avoid overburdening a single machine. I have no problem with pointing off to an external resource as an example of how it might be done.&lt;/p&gt;</comment>
                            <comment id="14088590" author="jmhsieh" created="Thu, 7 Aug 2014 01:04:35 +0000"  >&lt;p&gt;sounds good to me.  thanks for bearing with me on this.&lt;/p&gt;</comment>
                            <comment id="14088698" author="ndimiduk" created="Thu, 7 Aug 2014 02:34:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;thanks for bearing with me on this&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was going to say the same &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14088849" author="misty" created="Thu, 7 Aug 2014 05:26:17 +0000"  >&lt;p&gt;Thanks guys, I&apos;ll take this feedback onboard and submit something new tomorrow.&lt;/p&gt;</comment>
                            <comment id="14090290" author="misty" created="Fri, 8 Aug 2014 04:35:52 +0000"  >&lt;p&gt;Let me know how this version suits you guys. Thanks for the feedback.&lt;/p&gt;</comment>
                            <comment id="14101308" author="jmhsieh" created="Mon, 18 Aug 2014 21:12:08 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &amp;lt;para&amp;gt;Salting in &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; sense has nothing to &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; with cryptography, but refers to adding random
+        data to the start of a row key. In &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt;, salting refers to adding a prefix to the row
+        key to cause it to sort differently than it otherwise would. Salting can be helpful &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; you
+        have a few keys that come up over and over, along with other rows that don&apos;t fit those keys.
+        In that &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt;, the regions holding rows with the &lt;span class=&quot;code-quote&quot;&gt;&quot;hot&quot;&lt;/span&gt; keys would be overloaded, compared to
+        the other regions. Salting completely removes ordering, so is often a poorer choice than
+        hashing. Using totally random row keys &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; data which is accessed sequentially would remove
+        the benefit of HBase&apos;s row-sorting algorithm and cause very poor performance, as each get or
+        scan would need to query all regions.&amp;lt;/para&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don&apos;t think this salting example is correct about the ramifications.  Both Nick and I agree that salting is puting some random value in front of the actual value.  This means instead of one sorted list of entries, we&apos;d have many n sorted lists of entries if the cardinality of the salt is n.&lt;/p&gt;

&lt;p&gt;Example:  naively we have rowkeys like this:&lt;/p&gt;

&lt;p&gt;foo0001&lt;br/&gt;
foo0002&lt;br/&gt;
foo0003&lt;br/&gt;
foo0004&lt;/p&gt;

&lt;p&gt;if we us a 4 way salt (a,b,c,d), we could end up with data resorted like this:&lt;/p&gt;

&lt;p&gt;a-foo0003&lt;br/&gt;
b-foo0001&lt;br/&gt;
c-foo0004&lt;br/&gt;
d-foo0002&lt;/p&gt;

&lt;p&gt;Let say we add some new values to row foo0003.  It could get salted with a new salt, let&apos;s say &apos;c&apos;.&lt;/p&gt;

&lt;p&gt;a-foo0003&lt;br/&gt;
b-foo0001&lt;br/&gt;
&lt;b&gt;c-foo0003&lt;/b&gt;&lt;br/&gt;
c-foo0004&lt;br/&gt;
d-foo0002&lt;/p&gt;

&lt;p&gt;To read we still could get things read in the original order but we&apos;d have to have a reader starting from each salt in parallel to get the rows back in order. (and likely need to do some coalescing of foo0003 to combine the a-foo0003 and c-foo0003 rows back into one.  The effect here in this situtation is that we could be writing with 4x the throughput now since we would be on 4 different machines.(assuming that the a, b, c, d are balanced onto different machines).&lt;/p&gt;

&lt;p&gt;Nick&apos;s point of view (please correct me if I am wrong) says that you could &quot;salt&quot; the original row key with a one-way hash so that foo0003 would always get salted with &apos;a&apos;.  This would spread rowkeys that are lexicographically close (foo0001 and foo0002) to different machines that could help reduce contention and increase overall throughput but not allow ever allow a single row to have 4x the throughput like the other approach.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &amp;lt;para&amp;gt;Hashing refers to applying a random one-way function to the row key, such that a
+        particular row always gets the same arbitrary value applied. This preserves the sort order
+        so that scans are effective, but spreads out load across a region. One example where hashing
+        is the right strategy would be &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; some reason, a large proportion of rows started with
+        the same letter. Normally, these would all be sorted into the same region. You can apply a
+        hash to artificially differentiate them and spread them out.&amp;lt;/para&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hashing actually totally trashes the sort order &amp;#8211; in fact the goal of hashing is to evenly disburse entries that are near each other lexicographically as much as possible.&lt;/p&gt;</comment>
                            <comment id="14101527" author="misty" created="Mon, 18 Aug 2014 23:34:48 +0000"  >&lt;p&gt;Thanks for the extra info, working on this now.&lt;/p&gt;</comment>
                            <comment id="14101565" author="misty" created="Tue, 19 Aug 2014 00:04:32 +0000"  >&lt;p&gt;Corrected my mistakes, added illustrative examples, and otherwise tried to improve this a bit. Let me know what you think.&lt;/p&gt;</comment>
                            <comment id="14101735" author="jmhsieh" created="Tue, 19 Aug 2014 02:19:39 +0000"  >&lt;p&gt;+1.  I like it.&lt;/p&gt;

&lt;p&gt;Before it gets committed, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt;, do you agree with the latest version?  Misty went into a little more detail but I think it captures two different techniques to deal with hostspotting and their distinct effects.&lt;/p&gt;</comment>
                            <comment id="14102867" author="ndimiduk" created="Tue, 19 Aug 2014 21:20:04 +0000"  >&lt;p&gt;Very well articulated example, I like it! &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt; you&apos;re right in that I don&apos;t think of using random data for a prefix because the nondeterminism makes gets ineffective. It is, however, a valid approach.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+        &amp;lt;para&amp;gt;Suppose you have the following list of row keys:&amp;lt;/para&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This example assumes the table is split in a way such that f* would be in a single region but a-, b-, c-, d- are in different regions. Be explicit about the region splits, include a sentence like &quot;assume your table is split by letter, so the rowkey prefix &lt;tt&gt;a&lt;/tt&gt; is on one region, &lt;tt&gt;b&lt;/tt&gt; is on a second, &lt;tt&gt;c&lt;/tt&gt; on a 3rd, &amp;amp;c.&quot; In that topology, then all the foo rows would be in the same region, and the prefixed rows are in different regions.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+        &amp;lt;title&amp;gt;Hashing&amp;lt;/title&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For this bit, you can add something like &quot;using a deterministic hash allows the client to reconstruct the complete rowkey and use a get operation to retrieve that row as normal.&quot; The current text alludes to this, but maybe we can some out and say it explicitly.&lt;/p&gt;

&lt;p&gt;For references, you could also link off to Phoenix&apos;s &quot;Salted Tables&quot; description &lt;a href=&quot;http://phoenix.apache.org/salted.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://phoenix.apache.org/salted.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14102875" author="jmhsieh" created="Tue, 19 Aug 2014 21:28:35 +0000"  >&lt;p&gt;+1 to NIck&apos;s clarifications&lt;/p&gt;</comment>
                            <comment id="14102880" author="misty" created="Tue, 19 Aug 2014 21:33:30 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt;, how&apos;s this?&lt;/p&gt;</comment>
                            <comment id="14102921" author="ndimiduk" created="Tue, 19 Aug 2014 21:56:18 +0000"  >&lt;p&gt;A little nit-picky, but... (now you know what Aman went through &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; )&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+        &amp;lt;para&amp;gt;Suppose you have the following list of row keys, and your table is split in such a way
+          that all the rows starting with &quot;foo&quot; are in the same region.&amp;lt;/para&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I would say &quot;... and your table is split such that there is one region for each letter of the alphabet &amp;#8211; prefix &apos;a&apos; is one region, prefix &apos;b&apos; is another. In this table, all rows starting with &apos;f&apos; are in the same region.&quot;&lt;/p&gt;

&lt;p&gt;That is, be explicitly clear about the region split for the example.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+        an &amp;lt;link xlink:href=&quot;http://phoenix.apache.org/salted.html&quot;&amp;gt;article on Salted Tables&amp;lt;/link&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&quot;an&quot; should be &quot;and&quot; ?&lt;/p&gt;</comment>
                            <comment id="14102930" author="misty" created="Tue, 19 Aug 2014 22:02:31 +0000"  >&lt;p&gt;Good feedback. Give this a try.&lt;/p&gt;</comment>
                            <comment id="14102948" author="ndimiduk" created="Tue, 19 Aug 2014 22:21:07 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=misty&quot; class=&quot;user-hover&quot; rel=&quot;misty&quot;&gt;Misty Stanley-Jones&lt;/a&gt; you are a saint of patience.&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="14103050" author="jmhsieh" created="Tue, 19 Aug 2014 23:44:18 +0000"  >&lt;p&gt;i noticed the wrong row got emphasized in the latest patch (c-foo0003 should be emphasized instead of c-foo0004) otherwise it looked good.  &lt;/p&gt;

&lt;p&gt;Also noticed on the re-read that the reversing trick should have the least significant digit as the first part of the key.  (ex: so 0001 0002 0003 would be  &quot;flipped&quot; to be 1000 2000 and 3000 to end up on different servers).&lt;/p&gt;

&lt;p&gt;I&apos;m going to fix both and commit.&lt;/p&gt;</comment>
                            <comment id="14103059" author="jmhsieh" created="Tue, 19 Aug 2014 23:50:49 +0000"  >&lt;p&gt;Thanks for the patch misty, and thanks for the reviews nick!&lt;/p&gt;

&lt;p&gt;Committed to branch-1 and master.&lt;/p&gt;</comment>
                            <comment id="14103143" author="hudson" created="Wed, 20 Aug 2014 00:32:30 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.0 #113 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.0/113/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.0/113/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11682&quot; title=&quot;Explain hotspotting&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11682&quot;&gt;&lt;del&gt;HBASE-11682&lt;/del&gt;&lt;/a&gt; Explain Hotspotting (Misty Stanley-Jones) (jmhsieh: rev f4f77b5756464d3e48f686af18e92560e2a4f76b)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;src/main/docbkx/schema_design.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14103331" author="hudson" created="Wed, 20 Aug 2014 03:45:18 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #5413 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/5413/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/5413/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11682&quot; title=&quot;Explain hotspotting&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11682&quot;&gt;&lt;del&gt;HBASE-11682&lt;/del&gt;&lt;/a&gt; Explain Hotspotting (Misty Stanley-Jones) (jmhsieh: rev ac2e1c33fd32a6b473ebbfdc32f5e631a69f2a6d)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;src/main/docbkx/schema_design.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14331038" author="enis" created="Sat, 21 Feb 2015 23:33:00 +0000"  >&lt;p&gt;Closing this issue after 0.99.0 release. &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12660043" name="HBASE-11682-1.patch" size="2975" author="misty" created="Wed, 6 Aug 2014 04:09:49 +0000"/>
                            <attachment id="12662867" name="HBASE-11682.patch" size="6585" author="misty" created="Tue, 19 Aug 2014 22:02:31 +0000"/>
                            <attachment id="12662856" name="HBASE-11682.patch" size="6401" author="misty" created="Tue, 19 Aug 2014 21:33:30 +0000"/>
                            <attachment id="12662643" name="HBASE-11682.patch" size="6084" author="misty" created="Tue, 19 Aug 2014 00:04:32 +0000"/>
                            <attachment id="12660548" name="HBASE-11682.patch" size="4065" author="misty" created="Fri, 8 Aug 2014 04:35:52 +0000"/>
                            <attachment id="12660036" name="HBASE-11682.patch" size="1774" author="misty" created="Wed, 6 Aug 2014 03:13:17 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 6 Aug 2014 03:51:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>410241</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 42 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ykxz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>410231</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>