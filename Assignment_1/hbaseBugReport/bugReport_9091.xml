<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:01:18 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-9091/HBASE-9091.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-9091] Update ByteRange to maintain consumer&apos;s position</title>
                <link>https://issues.apache.org/jira/browse/HBASE-9091</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;ByteRange is a useful alternative to Java&apos;s ByteBuffer. Notably, it is mutable and an instance can be assigned over a byte[] after instantiation. This is valuable as a performance consideration when working with byte[] slices in a tight loop. Its current design is such that it is not possible to consume a portion of the range while performing activities like decoding an object without altering the definition of the range. It should provide a position that is independent from the range&apos;s offset and length to make partial reads easier.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12660759">HBASE-9091</key>
            <summary>Update ByteRange to maintain consumer&apos;s position</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12636797">HBASE-8089</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ndimiduk">Nick Dimiduk</assignee>
                                    <reporter username="ndimiduk">Nick Dimiduk</reporter>
                        <labels>
                    </labels>
                <created>Tue, 30 Jul 2013 19:30:38 +0000</created>
                <updated>Mon, 23 Sep 2013 19:22:29 +0000</updated>
                            <resolved>Sun, 11 Aug 2013 13:32:08 +0000</resolved>
                                                    <fixVersion>0.98.0</fixVersion>
                    <fixVersion>0.95.2</fixVersion>
                                    <component>Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13724390" author="mcorgan" created="Tue, 30 Jul 2013 20:45:07 +0000"  >&lt;p&gt;I&apos;m concerned that substantially changes the class from stateless to stateful, meaning it gets dangerous to share between threads or even between methods that don&apos;t agree on whether the position should be cleared before being passed in.  It&apos;s actually one of the biggest reasons i made this class to begin with, to remove ByteBuffer&apos;s position field (also to add equals/compareTo methods).&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Notably, it is mutable and an instance can be assigned over a &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] after instantiation. &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;.  I agree it&apos;s mutable already, but maybe the comments or method names should emphasize that&apos;s only for Object reuse, not for performing normal logic.&lt;/p&gt;

&lt;p&gt;Could we instead make a different class that does exactly what you need for the serialization use case?  ByteConsumer or something like that?&lt;/p&gt;</comment>
                            <comment id="13724486" author="ndimiduk" created="Tue, 30 Jul 2013 21:58:47 +0000"  >&lt;p&gt;Draft patch for &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt;&apos;s review.&lt;/p&gt;</comment>
                            <comment id="13724505" author="ndimiduk" created="Tue, 30 Jul 2013 22:11:04 +0000"  >&lt;p&gt;I&apos;m also concerned about introducing state into this class. My read of the code indicates it&apos;s existing implementation is not very safe for concurrent access; perhaps you can point me to an indication otherwise? I&apos;ve not thoroughly tested the attached patch, but &lt;tt&gt;TestDataBlockEncoders&lt;/tt&gt; passes locally for me with it applied.&lt;/p&gt;</comment>
                            <comment id="13724533" author="mcorgan" created="Tue, 30 Jul 2013 22:37:23 +0000"  >&lt;p&gt;I don&apos;t disagree with the need for something like this, but it&apos;s changing the goals of the class substantially from what it&apos;s designed for.  This is used as an ultra-lightweight wrapper for byte[]&apos;s in the tightest loops of the prefix-tree codec where just a few extra operations like clearing a field or doing a bounds check have a measurable impact on MB/s througput.  While I don&apos;t have a benchmark at hand, all the Preconditions.checkXyz(..) bounds checks worry me.&lt;/p&gt;

&lt;p&gt;Maybe an alternative is to rename the existing version PrefixTreeByteRange and move it over to the prefix-tree module.  Then these changes won&apos;t affect prefix-tree performance.  I probably shouldn&apos;t have put it in the base hbase-client module anyway since it&apos;s so sensitive to changes.&lt;/p&gt;</comment>
                            <comment id="13724553" author="stack" created="Tue, 30 Jul 2013 22:48:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt; You want to use your class in serializations?  Won&apos;t you have the same perf concerns as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="13724566" author="ndimiduk" created="Tue, 30 Jul 2013 22:59:12 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; yes, the tight-loop considerations are the same. I&apos;ve already done some perf benchmarking for &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8694&quot; title=&quot;Performance evaluation of encoding implementations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8694&quot;&gt;HBASE-8694&lt;/a&gt;, I can run a similar benchmark for this piece if that&apos;s desirable. In my opinion, database correctness trumps performance.&lt;/p&gt;

&lt;p&gt;Refactoring the existing patches off of &lt;tt&gt;ByteBuffer&lt;/tt&gt; and into the structure &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; and I discussed earlier is probably going to take me the rest of the afternoon. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; if you&apos;d like to take a stab at measuring the performance impact of the condition checks, maybe you can bootstrap off of &lt;a href=&quot;https://github.com/ndimiduk/encoding-microbench&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;encoding-benchmark&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13724681" author="ndimiduk" created="Wed, 31 Jul 2013 00:48:32 +0000"  >&lt;p&gt;Updated patch with a couple new utility methods and short-circuit put/get methods.&lt;/p&gt;</comment>
                            <comment id="13724767" author="hadoopqa" created="Wed, 31 Jul 2013 02:22:56 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12595091/0001-HBASE-9091-Extend-ByteRange.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12595091/0001-HBASE-9091-Extend-ByteRange.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 12 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.mapreduce.TestHFileOutputFormat&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6536//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13724814" author="ndimiduk" created="Wed, 31 Jul 2013 03:36:28 +0000"  >&lt;p&gt;Patch v2 is on RB: &lt;a href=&quot;https://reviews.apache.org/r/13101/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/13101/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13725442" author="mcorgan" created="Wed, 31 Jul 2013 17:18:09 +0000"  >&lt;p&gt;On second thought I&apos;m not as worried about prefix-tree performance since it hasn&apos;t been released yet and therefore has no established baseline.  I&apos;ll probably go back after .96 is released to make further performance improvements and can evaluate the impact then.  I can easily dig up the old version of ByteRange if there was an impact, but there&apos;s also a chance that ByteRange isn&apos;t even the fastest strategy for prefix-tree.&lt;/p&gt;

&lt;p&gt;I&apos;m still worried about mutability.  The class was designed to be used similarly to String, but for bytes instead of chars.  Recycling of the object was the major difference and was to be used with care.  If people start using this new version with mutable position all around the code base, we&apos;re going to run into nasty bugs where methods disagree on who is responsible for position.&lt;/p&gt;</comment>
                            <comment id="13725488" author="ndimiduk" created="Wed, 31 Jul 2013 17:49:12 +0000"  >&lt;p&gt;For your mutability concerns, I&apos;m not sure what to tell you other than that you&apos;re talking to a clojure developer &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; It wasn&apos;t clear to me from the API that the class is intended to be immutable. The presence of independent setXXX methods for offset and length threw me off. I&apos;m up for a discussion about the API here. I agree in that ByteBuffer is confusing in many cases. How does the documentation I added, describing the class&apos;s three responsibilities, inform our choices? Is that the right way to think about this class?&lt;/p&gt;

&lt;p&gt;Perhaps there&apos;s some Java trickery with which I&apos;m less familiar that can make this class more palatable? Would thread-local variables help here?&lt;/p&gt;

&lt;p&gt;As for responsibility of consumers, that&apos;s a contract that must be maintained by consumers of the class. The methods in OrderedBytes and DataType can be made more explicit about their handling of the position marker. In many places, I&apos;m careful to document expectations about changes the position marker or the backing array, but I can review for that. The existing prefix code assumed position didn&apos;t exist, so it&apos;s safe from this addition, at least at present.&lt;/p&gt;</comment>
                            <comment id="13725836" author="ndimiduk" created="Wed, 31 Jul 2013 23:32:31 +0000"  >&lt;p&gt;I can remove the ByteBuffer/ByteRange dependency from OrderedBytes entirely if I separate decoding a value from advancing the cursor. The client API then becomes&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Foo[] foos = new Foo[] { new Foo (1), new Foo(2) };
byte[] a = new byte[...];

// encode values
for (int i = 0, position = 0; i &amp;lt; foos.length; i++) {
  position = OrderedBytes.encodeFoo(a, position, foos[i]);
}

// decode values
ArrayList&amp;lt;Foo&amp;gt; decoded = new ArrayList&amp;lt;Foo&amp;gt;();
for (int position = 0; position &amp;lt; a.length;) {
  decoded.add(OrderedBytes.decodeFoo(a, position));
  position = OrderedBytes.skip(a, position);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;tt&gt;decodeFoo&lt;/tt&gt; cannot return both a value and the updated position (hence the use of ByteBuffer or modified ByteRange), so it returns the value and throws away the new position. With this API, the range of bytes which encodes a value must be scanned twice, but it removes the dependency on managing the position state in the codec. The scan used in skip is faster than the decode operation, but it&apos;s still an additional &lt;tt&gt;O&amp;#40;n)&lt;/tt&gt; operation where &lt;tt&gt;n&lt;/tt&gt; is the length of the encoded value.&lt;/p&gt;

&lt;p&gt;What do you think about this solution?&lt;/p&gt;</comment>
                            <comment id="13725948" author="mcorgan" created="Thu, 1 Aug 2013 01:40:14 +0000"  >&lt;p&gt;Yeah, it&apos;s a tough trade-off with the additional O&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/thumbs_down.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.  Overall, I&apos;m not saying you shouldn&apos;t use a positioned data structure for this use case, just that there&apos;s also merit to having a data structure that doesn&apos;t track position (and doesn&apos;t do bounds checking), which is what the ByteRange is.  I was thinking we could have separate classes.  It&apos;s not a big deal though - it won&apos;t break anything, and if the bounds checking hurts performance I can repair it easily.&lt;/p&gt;</comment>
                            <comment id="13727190" author="ndimiduk" created="Fri, 2 Aug 2013 01:05:27 +0000"  >&lt;p&gt;In the interest of squeezing OrderedBytes and DataType into 0.95.2, I&apos;ve taken the approach described above. We can go back and make improvements to the API later if we so desire.&lt;/p&gt;</comment>
                            <comment id="13728043" author="nkeywal" created="Fri, 2 Aug 2013 20:19:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;Would thread-local variables help here?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It depends. Some benchmarks had good results, some not. I had myself issues when using it in pure C++ in the past (a system call per access). But as well, it will make it more complex, as it won&apos;t be possible to pass it around threads and modify it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;m still worried about mutability. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Netty has reimplemented byteBuffer, but kept the mutability, so I would say that an average developper will expect this kind of class to be mutable. Having two classes is possible as well imho.&lt;/p&gt;
</comment>
                            <comment id="13728683" author="stack" created="Sat, 3 Aug 2013 22:10:14 +0000"  >&lt;p&gt;Would suggest leaving ByteRange as is.  Can you subclass it Nick and make TrackingByteRange?  It is ugly that we have to reget the offset for want of this TrackingByteRanger class you are trying to add here.  &lt;/p&gt;

&lt;p&gt;Do you mean volatile here:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;private int hash = UNSET_HASH_VALUE;&lt;br/&gt;
+  private transient int hash = UNSET_HASH_VALUE;&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="13728742" author="ndimiduk" created="Sun, 4 Aug 2013 03:53:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do you mean volatile here:&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was reading/editing as I went, considering the different aspects of the class&apos;s state, what was and wasn&apos;t intended to be passed along. &lt;tt&gt;volatile&lt;/tt&gt; does make sense from a concurrent access perspective.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It is ugly that we have to reget the offset&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; On the other hand, I now appreciate the simplicity of working on a raw byte[]. This is consistent with the existing Bytes. Is it worth while shipping the byte[] version and later adding the tracking version? Maintaining both APIs will be a source of bugs to be sure.&lt;/p&gt;</comment>
                            <comment id="13728747" author="stack" created="Sun, 4 Aug 2013 04:04:01 +0000"  >&lt;p&gt;Won&apos;t main need for tracking be your Struct?  How hard to add a TrackingByteRange into your lib?&lt;/p&gt;</comment>
                            <comment id="13728753" author="ndimiduk" created="Sun, 4 Aug 2013 04:17:20 +0000"  >&lt;p&gt;&lt;tt&gt;Struct&lt;/tt&gt; is the primary consumer in the code I&apos;ve packaged &amp;#8211; anything that places two values into a buffer. A user is also free to add their own, more specific implementation of &lt;tt&gt;DataType&lt;/tt&gt;, in which case they&apos;ll deal with it too.&lt;/p&gt;

&lt;p&gt;It&apos;s not difficult to change the API again, it&apos;s just time consuming and tedious. I don&apos;t want to go through all the code again until we agree on how it should be done &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; both advocate for using byte[] because it&apos;s fast and doesn&apos;t include any dependencies. There&apos;s also Matt&apos;s argument of implementing it from scratch rather than overloading &lt;tt&gt;ByteRange&lt;/tt&gt; because then there&apos;s no dependencies on HBase code and someone could do a copy-paste into their own code.&lt;/p&gt;</comment>
                            <comment id="13728757" author="stack" created="Sun, 4 Aug 2013 04:22:43 +0000"  >&lt;p&gt;But we should change API now before we release, right?&lt;/p&gt;

&lt;p&gt;Can&apos;t you pass in a Long into the method?  And in the method it sets the offset into the passed in Long?  The Long starts out w/ the offset?   You return the dserialized type?  The Long can be reused?&lt;/p&gt;</comment>
                            <comment id="13728767" author="ndimiduk" created="Sun, 4 Aug 2013 05:01:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;But we should change API now before we release, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Probably yes.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The Long can be reused?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m afraid &lt;tt&gt;Long&lt;/tt&gt; instances are immutable. We would need a &lt;tt&gt;Long#set(long)&lt;/tt&gt; method.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;int decodeSomething(Long offset) {
  offset = Long.valueOf(offset.longValue() + 4);
  return 0;
}

Long offset = Long.valueOf(10);
println(&quot;offset going in: &quot; + offset);
decodeSomething(offset);
println(&quot;offset received: &quot; + offset);

===

offset going in: 10
offset received: 10
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13729052" author="stack" created="Mon, 5 Aug 2013 01:01:55 +0000"  >&lt;p&gt;AtomicLong or make a mutable Integer?&lt;/p&gt;</comment>
                            <comment id="13729057" author="mcorgan" created="Mon, 5 Aug 2013 01:10:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;volatile does make sense from a concurrent access perspective.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think that would also merit a separate class since it will slow it down for all the single-threaded users (prefix-tree).  Stepping back, I don&apos;t know that it needs to be volatile anyway until we have a multi-threaded use case?&lt;/p&gt;</comment>
                            <comment id="13729069" author="ndimiduk" created="Mon, 5 Aug 2013 01:50:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;since it will slow it down for all the single-threaded users (prefix-tree).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought the primary premise of complaint against adding the position feature was that the existing consumers of &lt;tt&gt;ByteRange&lt;/tt&gt; assume a concurrent context.&lt;/p&gt;</comment>
                            <comment id="13729070" author="ndimiduk" created="Mon, 5 Aug 2013 01:52:18 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; AtomicLong will work, though I think it would be ugly in the API &amp;#8211; there&apos;s nothing atomic about the use-case. I&apos;d prefer a position-tracking subclass of &lt;tt&gt;ByteRange&lt;/tt&gt; over implementing a mutable Integer class just for this.&lt;/p&gt;</comment>
                            <comment id="13729092" author="mcorgan" created="Mon, 5 Aug 2013 03:19:36 +0000"  >&lt;p&gt;Sorry - i&apos;m thinking of 2 separate scenarios:&lt;/p&gt;

&lt;p&gt;1) Long-lived ByteRanges, such as wrapping a block cache block that may be read simultaneously by multiple threads.  Here I&apos;d argue against the position field since separate reader threads will each want their own position.&lt;/p&gt;

&lt;p&gt;2) High speed, single threaded reuse, such as in prefix-tree encoding where the ByteRange will be remapped frequently.  This is where the volatiles will hurt.&lt;/p&gt;

&lt;p&gt;Maybe ByteRange should just be an interface with these different concerns addressed in different implementations.  The sub-classing could introduce a small performance cost, but it&apos;s probably not too bad to begin with, and a lot of uses will get inlined by the compiler anyway.&lt;/p&gt;</comment>
                            <comment id="13729102" author="stack" created="Mon, 5 Aug 2013 04:10:16 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt; Just trying to keep it simple:&lt;/p&gt;

&lt;p&gt;The below:&lt;/p&gt;

&lt;p&gt;+  public T decode(byte[] buff, int offset);&lt;/p&gt;

&lt;p&gt;becomes&lt;/p&gt;

&lt;p&gt;+  public T decode(byte[] buff, Int offset);&lt;/p&gt;

&lt;p&gt;The Int (Or MutableInteger) doesn&apos;t have to hold a volatile int; each thread can pass in their own instance.&lt;/p&gt;

&lt;p&gt;Then ByteRange goes undisturbed.&lt;/p&gt;

&lt;p&gt;Having to scan the byte array twice &amp;#8211; once to deserialize and then again to figure where to start the next deserialization &amp;#8211; is how they used do it on flintstones computers.&lt;/p&gt;</comment>
                            <comment id="13729655" author="ndimiduk" created="Mon, 5 Aug 2013 17:10:00 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; Since we&apos;re not running on flintstones computers, my preference is to use a single class that wraps both a range in a byte[] and a position marker, a la &lt;tt&gt;ByteBuffer&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; Having ready through Guava&apos;s &lt;tt&gt;Precondition&lt;/tt&gt; code, I&apos;m not as concerned about the performance impact of the additional checks. I don&apos;t have a microbenchmark to quantify the lack of concern, but the code describes the pains taken to shape the condition checking statements for the benefit of the JIT, at least not in the face of giving helpful feedback in a user-facing API.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; Thanks for outlining your two use-cases above, that&apos;s helpful. I think my intended use-case is an extension of #2, where position tracking is the added feature. I can&apos;t think of a case where a user would want to build a compound rowkey across multiple threads.&lt;/p&gt;

&lt;p&gt;I&apos;ll assemble a new patch that leaves &lt;tt&gt;ByteRange&lt;/tt&gt; intact, extending it with a subclass that adds the position tracking. I will omit the precondition checking for the time being, so long as we all understand that (1) omission opens the user up to easily detected bugs and (2) adding it later will impact a (admittedly brand new, &lt;tt&gt;Evolving&lt;/tt&gt;) public API.&lt;/p&gt;

&lt;p&gt;I will not update the other two patches until we&apos;ve found something here that&apos;s agreeable. I&apos;d rather ship 8201 and 8693 as they are than miss the window because of this bit of API sugar.&lt;/p&gt;</comment>
                            <comment id="13729764" author="ndimiduk" created="Mon, 5 Aug 2013 18:30:13 +0000"  >&lt;p&gt;Adds the new subclass described previously.&lt;/p&gt;</comment>
                            <comment id="13729813" author="stack" created="Mon, 5 Aug 2013 18:55:02 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt; So, this is not &apos;api sugar&apos;, is it?   Because it will show through in the API?  We need this for the other stuff to go in (unless we want flintstone computing)?&lt;/p&gt;</comment>
                            <comment id="13729846" author="ndimiduk" created="Mon, 5 Aug 2013 19:18:45 +0000"  >&lt;p&gt;Yes, it does show through on the API. I consider it &quot;sugar&quot; at this point because the same features are supported using &lt;tt&gt;byte[], int&lt;/tt&gt; vs &lt;tt&gt;PositionedByteRange&lt;/tt&gt;. The former will be a little slower because of the extra traversal and pushes that much more into user code, but the features are identical. That&apos;s why I suggest the APIs could be extended later to support &lt;tt&gt;PositionedByteRange&lt;/tt&gt; if we can&apos;t get consensus today.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=giacomotaylor&quot; class=&quot;user-hover&quot; rel=&quot;giacomotaylor&quot;&gt;James Taylor&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkeywal&quot; class=&quot;user-hover&quot; rel=&quot;nkeywal&quot;&gt;Nicolas Liochon&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt;: you&apos;ve all expressed opinions about these API. Do these two classes look reasonable to you?&lt;/p&gt;</comment>
                            <comment id="13729898" author="stack" created="Mon, 5 Aug 2013 20:32:47 +0000"  >&lt;p&gt;Fix:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+ * The state of a {@code ByteRange} is not &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; and does to support
+ * concurrent access.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This seems superfluous: &quot;+  public ByteRange(int capacity, int offset, int length) {&quot;&lt;/p&gt;

&lt;p&gt;Nice language &quot;...it becomes a husk...&quot;&lt;/p&gt;

&lt;p&gt;Is this sentence missing a tail?  &quot;+ * Designed to be a mutable alternative to&quot;&lt;/p&gt;

&lt;p&gt;lgtm&lt;/p&gt;</comment>
                            <comment id="13729952" author="mcorgan" created="Mon, 5 Aug 2013 21:13:09 +0000"  >&lt;p&gt;Looks good&lt;/p&gt;</comment>
                            <comment id="13729968" author="ndimiduk" created="Mon, 5 Aug 2013 21:22:14 +0000"  >&lt;p&gt;Addressing Stack&apos;s comments.&lt;/p&gt;</comment>
                            <comment id="13729986" author="hadoopqa" created="Mon, 5 Aug 2013 21:34:19 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12596172/0001-HBASE-9091-Introduce-PositionedByteRange.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12596172/0001-HBASE-9091-Introduce-PositionedByteRange.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 16 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 4 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6607//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13729993" author="ndimiduk" created="Mon, 5 Aug 2013 21:40:52 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; You have a comment in there about possibly extending this to be an interface with different backing implementations. How serious are you about that? Introducing this change places this class front-and-center for users&apos; consumption and this will limit our ability to make changes in the future.&lt;/p&gt;

&lt;p&gt;Hat-tip to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; for bringing this up.&lt;/p&gt;</comment>
                            <comment id="13730021" author="stack" created="Mon, 5 Aug 2013 22:03:28 +0000"  >&lt;p&gt;+1 caveat question to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13730048" author="ndimiduk" created="Mon, 5 Aug 2013 22:21:08 +0000"  >&lt;p&gt;&lt;b&gt;sigh&lt;/b&gt; javadoc.&lt;/p&gt;</comment>
                            <comment id="13730213" author="mcorgan" created="Tue, 6 Aug 2013 00:33:55 +0000"  >&lt;p&gt;I&apos;m not too serious.  To illustrate further, you might have &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;interface ByteRange&lt;/li&gt;
	&lt;li&gt;interface PositionedByteRange extends ByteRange&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;class SimpleByteRange implements ByteRange&lt;/li&gt;
	&lt;li&gt;class ConcurrentByteRange implements ByteRange&lt;/li&gt;
	&lt;li&gt;class OffHeapByteRange implements PositionedByteRange&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;etc&lt;/p&gt;

&lt;p&gt;All would compareTo/equals/hashCode the same, so they&apos;d be interoperable.  Half baked idea, but also pretty simple to implement&lt;/p&gt;</comment>
                            <comment id="13730220" author="stack" created="Tue, 6 Aug 2013 00:41:56 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt; Sounds like this is going in.  I&apos;ll commit tomorrow unless &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; or anyone else has feedback in meantime.  You going to update the API to make use of your new class?&lt;/p&gt;</comment>
                            <comment id="13730230" author="ndimiduk" created="Tue, 6 Aug 2013 00:52:17 +0000"  >&lt;p&gt;Alright, if this is going in, I&apos;ll update the other patches.&lt;/p&gt;</comment>
                            <comment id="13730246" author="hadoopqa" created="Tue, 6 Aug 2013 01:20:29 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12596231/0001-HBASE-9091-Introduce-PositionedByteRange.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12596231/0001-HBASE-9091-Introduce-PositionedByteRange.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 16 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6611//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13730894" author="ndimiduk" created="Tue, 6 Aug 2013 16:14:24 +0000"  >&lt;p&gt;Make &lt;tt&gt;ByteRange&lt;/tt&gt; an abstract class and you can have a single implementation of most of the logic. Does that lose for you the desired level of abstraction? Maybe a ByteRangeComparator can hold the comparison logic?&lt;/p&gt;

&lt;p&gt;How important is having this be an interface, considering it&apos;s client-direct API? Are we holding out on this level of abstraction?&lt;/p&gt;</comment>
                            <comment id="13730974" author="mcorgan" created="Tue, 6 Aug 2013 17:15:22 +0000"  >&lt;p&gt;I was thinking the interface would be necessary so that we can have different atomicity guarantees on different implementations&apos; fields.  Like the volatiles mentioned above.  Or maybe one implementation just wraps a DirectByteBuffer in which case that&apos;s the only field.&lt;/p&gt;</comment>
                            <comment id="13731668" author="ndimiduk" created="Wed, 7 Aug 2013 05:34:42 +0000"  >&lt;p&gt;I&apos;ve extracted the interfaces ByteRange and PositionedByteRange, implemented as SimpleByteRange and SimplePositionedByteRange as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; suggested. This has become something of a monster in and of itself. Not trusting refactoring tools, I used grep to track down and purge references to concrete classes outside of constructor calls.&lt;/p&gt;</comment>
                            <comment id="13731682" author="ndimiduk" created="Wed, 7 Aug 2013 06:04:16 +0000"  >&lt;p&gt;fixup javadocs&lt;/p&gt;</comment>
                            <comment id="13731738" author="hadoopqa" created="Wed, 7 Aug 2013 07:48:06 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12596509/0001-HBASE-9091-Abstract-ByteRange-introduce-PositionedBy.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12596509/0001-HBASE-9091-Abstract-ByteRange-introduce-PositionedBy.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 44 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6626//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13731844" author="hadoopqa" created="Wed, 7 Aug 2013 10:12:25 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12596509/0001-HBASE-9091-Abstract-ByteRange-introduce-PositionedBy.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12596509/0001-HBASE-9091-Abstract-ByteRange-introduce-PositionedBy.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 44 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6629//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13732226" author="mcorgan" created="Wed, 7 Aug 2013 18:00:08 +0000"  >&lt;p&gt;Nice going.  I think this will let us do some cool stuff at a higher level of abstraction than all the Bytes.java calls.&lt;/p&gt;

&lt;p&gt;Do you think it&apos;s worth splitting the mutating methods into a sub-interface?  This would provide helpful guarantees all over the place that users of the read-only ByteRange interface aren&apos;t modifying anything.  My last opinion here... this could go on forever.  Ignore if it can be done later.&lt;/p&gt;</comment>
                            <comment id="13732260" author="ndimiduk" created="Wed, 7 Aug 2013 18:15:56 +0000"  >&lt;p&gt;IIRC, ByteBuffer has the same API for all ByteBuffer implementations. The read-only version throws exceptions for modification methods. In the interest of getting in for 0.95.2, I think we can leave it as is, change it later if need be. This would be a less invasive change than the method signatures.&lt;/p&gt;</comment>
                            <comment id="13732779" author="ndimiduk" created="Wed, 7 Aug 2013 21:37:21 +0000"  >&lt;p&gt;I&apos;ve found at least one bug in this patch while implementing &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8693&quot; title=&quot;DataType: provide extensible type API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8693&quot;&gt;&lt;del&gt;HBASE-8693&lt;/del&gt;&lt;/a&gt;. Will post a new patch once that effort is complete.&lt;/p&gt;</comment>
                            <comment id="13732866" author="ndimiduk" created="Wed, 7 Aug 2013 22:42:19 +0000"  >&lt;p&gt;Fixed a bug, unified API, a little more careful about code reuse.&lt;/p&gt;</comment>
                            <comment id="13732963" author="hadoopqa" created="Wed, 7 Aug 2013 23:59:07 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12596736/0001-HBASE-9091-Abstract-ByteRange-introduce-PositionedBy.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12596736/0001-HBASE-9091-Abstract-ByteRange-introduce-PositionedBy.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 44 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6642//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13735238" author="nkeywal" created="Fri, 9 Aug 2013 20:24:27 +0000"  >&lt;p&gt;Should we commit this one? I understand that we have an agreement here, is that right?&lt;/p&gt;</comment>
                            <comment id="13735393" author="stack" created="Fri, 9 Aug 2013 22:13:12 +0000"  >&lt;p&gt;I am +1 on this.  Not mad about the names &apos;SimplePositionedByteRange&apos; but its fine.&lt;/p&gt;</comment>
                            <comment id="13736323" author="hudson" created="Sun, 11 Aug 2013 16:12:24 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #4372 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/4372/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/4372/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9091&quot; title=&quot;Update ByteRange to maintain consumer&amp;#39;s position&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9091&quot;&gt;&lt;del&gt;HBASE-9091&lt;/del&gt;&lt;/a&gt;  Update ByteRange to maintain consumer&apos;s position (Nick Dimiduck) (nkeywal: rev 1512921)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValueUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRangeTool.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRangeUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/PositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/SimpleByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/SimplePositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestPositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestSimpleByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/decode/row/RowNodeReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/PrefixTreeEncoder.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/row/RowNodeWriter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/tokenize/TokenizerNode.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/util/byterange/ByteRangeSet.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/util/byterange/impl/ByteRangeTreeSet.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/builder/TestTokenizer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/builder/TestTreeDepth.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/TestColumnBuilder.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/data/TestColumnDataRandom.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/data/TestColumnDataSimple.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/row/data/TestRowDataExerciseFInts.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/row/data/TestRowDataUrls.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/util/bytes/TestByteRange.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13736329" author="hudson" created="Sun, 11 Aug 2013 16:28:07 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #668 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/668/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/668/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9091&quot; title=&quot;Update ByteRange to maintain consumer&amp;#39;s position&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9091&quot;&gt;&lt;del&gt;HBASE-9091&lt;/del&gt;&lt;/a&gt;  Update ByteRange to maintain consumer&apos;s position (Nick Dimiduck) (nkeywal: rev 1512921)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValueUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRangeTool.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRangeUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/PositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/SimpleByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/SimplePositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestPositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestSimpleByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/decode/row/RowNodeReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/PrefixTreeEncoder.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/row/RowNodeWriter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/tokenize/TokenizerNode.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/util/byterange/ByteRangeSet.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/util/byterange/impl/ByteRangeTreeSet.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/builder/TestTokenizer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/builder/TestTreeDepth.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/TestColumnBuilder.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/data/TestColumnDataRandom.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/data/TestColumnDataSimple.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/row/data/TestRowDataExerciseFInts.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/row/data/TestRowDataUrls.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/util/bytes/TestByteRange.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13736333" author="hudson" created="Sun, 11 Aug 2013 16:39:55 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.95 #432 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.95/432/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.95/432/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9091&quot; title=&quot;Update ByteRange to maintain consumer&amp;#39;s position&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9091&quot;&gt;&lt;del&gt;HBASE-9091&lt;/del&gt;&lt;/a&gt;  Update ByteRange to maintain consumer&apos;s position - 2 (Nick Dimiduck) (nkeywal: rev 1512920)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRangeTool.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRangeUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/PositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/SimpleByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/SimplePositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestPositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestSimpleByteRange.java&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9091&quot; title=&quot;Update ByteRange to maintain consumer&amp;#39;s position&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9091&quot;&gt;&lt;del&gt;HBASE-9091&lt;/del&gt;&lt;/a&gt;  Update ByteRange to maintain consumer&apos;s position (Nick Dimiduck) (nkeywal: rev 1512919)&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValueUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/decode/row/RowNodeReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/PrefixTreeEncoder.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/row/RowNodeWriter.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/tokenize/TokenizerNode.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/util/byterange/ByteRangeSet.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/util/byterange/impl/ByteRangeTreeSet.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/builder/TestTokenizer.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/builder/TestTreeDepth.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/TestColumnBuilder.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/data/TestColumnDataRandom.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/data/TestColumnDataSimple.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/row/data/TestRowDataExerciseFInts.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/row/data/TestRowDataUrls.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/util/bytes/TestByteRange.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13736464" author="hudson" created="Sun, 11 Aug 2013 23:19:00 +0000"  >&lt;p&gt;FAILURE: Integrated in hbase-0.95-on-hadoop2 #235 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.95-on-hadoop2/235/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.95-on-hadoop2/235/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9091&quot; title=&quot;Update ByteRange to maintain consumer&amp;#39;s position&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9091&quot;&gt;&lt;del&gt;HBASE-9091&lt;/del&gt;&lt;/a&gt;  Update ByteRange to maintain consumer&apos;s position - 2 (Nick Dimiduck) (nkeywal: rev 1512920)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRangeTool.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRangeUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/PositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/SimpleByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/SimplePositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestPositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestSimpleByteRange.java&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9091&quot; title=&quot;Update ByteRange to maintain consumer&amp;#39;s position&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9091&quot;&gt;&lt;del&gt;HBASE-9091&lt;/del&gt;&lt;/a&gt;  Update ByteRange to maintain consumer&apos;s position (Nick Dimiduck) (nkeywal: rev 1512919)&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValueUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRange.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/decode/row/RowNodeReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/PrefixTreeEncoder.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/row/RowNodeWriter.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/codec/prefixtree/encode/tokenize/TokenizerNode.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/util/byterange/ByteRangeSet.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/main/java/org/apache/hadoop/hbase/util/byterange/impl/ByteRangeTreeSet.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/builder/TestTokenizer.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/builder/TestTreeDepth.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/TestColumnBuilder.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/data/TestColumnDataRandom.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/column/data/TestColumnDataSimple.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/row/data/TestRowDataExerciseFInts.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/codec/prefixtree/row/data/TestRowDataUrls.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-prefix-tree/src/test/java/org/apache/hadoop/hbase/util/bytes/TestByteRange.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12636797">HBASE-8089</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12639244">HBASE-8201</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12596736" name="0001-HBASE-9091-Abstract-ByteRange-introduce-PositionedBy.patch" size="77576" author="ndimiduk" created="Wed, 7 Aug 2013 22:42:19 +0000"/>
                            <attachment id="12596509" name="0001-HBASE-9091-Abstract-ByteRange-introduce-PositionedBy.patch" size="77520" author="ndimiduk" created="Wed, 7 Aug 2013 06:04:16 +0000"/>
                            <attachment id="12596506" name="0001-HBASE-9091-Abstract-ByteRange-introduce-PositionedBy.patch" size="77521" author="ndimiduk" created="Wed, 7 Aug 2013 05:34:42 +0000"/>
                            <attachment id="12595091" name="0001-HBASE-9091-Extend-ByteRange.patch" size="36111" author="ndimiduk" created="Wed, 31 Jul 2013 00:48:32 +0000"/>
                            <attachment id="12595055" name="0001-HBASE-9091-Extend-ByteRange.patch" size="35289" author="ndimiduk" created="Tue, 30 Jul 2013 21:58:47 +0000"/>
                            <attachment id="12596231" name="0001-HBASE-9091-Introduce-PositionedByteRange.patch" size="43066" author="ndimiduk" created="Mon, 5 Aug 2013 22:21:08 +0000"/>
                            <attachment id="12596218" name="0001-HBASE-9091-Introduce-PositionedByteRange.patch" size="43074" author="ndimiduk" created="Mon, 5 Aug 2013 21:22:14 +0000"/>
                            <attachment id="12596172" name="0001-HBASE-9091-Introduce-PositionedByteRange.patch" size="44124" author="ndimiduk" created="Mon, 5 Aug 2013 18:30:13 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 30 Jul 2013 20:45:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>340948</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 18 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1msxr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>341266</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Extract ByteRange out to an interface. Existing implementation becomes SimpleByteRange. Extend ByteRange interface with PositionedByteRange. Includes a position marker for tracking a consumer&amp;#39;s place within a range. Implement SimplePositionedByteRange as subclass of SimpleByteRange. Also update and clarify documentation. This class starts to become a mutable alternative to java.nio.HeapByteBuffer.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>