<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:07:47 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-9811/HBASE-9811.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-9811] ColumnPaginationFilter is slow when offset is large</title>
                <link>https://issues.apache.org/jira/browse/HBASE-9811</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Hi there, we are trying to migrate a app from MySQL to HBase. One kind of the queries is pagination with large offset and small limit. We don&apos;t have too many such queries and so both MySQL and HBase should survive. (MySQL has no index for offset either.)&lt;/p&gt;

&lt;p&gt;When comparing the performance on both systems, we found something interest: write ~1M values in a single row, and query with offset = 1M. So all values should be scanned on RS side.&lt;/p&gt;

&lt;p&gt;When running the query on MySQL, the first query is pretty slow (more than 1 second) and then repeat the same query, it will become very low latency.&lt;/p&gt;

&lt;p&gt;HBase on the other hand, repeating the query does not help much (~1s forever). I can confirm that all data are in block cache and all the time is spent on in-memory data processing. (We have flushed data to disk.)&lt;/p&gt;

&lt;p&gt;I found &quot;reseek&quot; is the hot spot. It is caused by ColumnPaginationFilter returning NEXT_COL. If I replace this line by returning SKIP (which causes to call next rather than reseek), the latency is reduced to ~100ms.&lt;/p&gt;

&lt;p&gt;So I think there must be some room for optimization.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12674771">HBASE-9811</key>
            <summary>ColumnPaginationFilter is slow when offset is large</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stepinto">Chao Shi</reporter>
                        <labels>
                    </labels>
                <created>Mon, 21 Oct 2013 11:12:08 +0000</created>
                <updated>Tue, 3 Dec 2013 21:38:58 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13807622" author="stepinto" created="Tue, 29 Oct 2013 03:12:12 +0000"  >&lt;p&gt;Here is some benchmark&lt;/p&gt;

&lt;p&gt;1 row with 1M columns, and these columns are uniformly distributed into N hfiles &lt;/p&gt;

&lt;p&gt;scan with a ColumnPaginationFilter, with offset = 1M&lt;br/&gt;
hfiles=1 993.71 ms&lt;br/&gt;
hfiles=2 2251.69 ms&lt;br/&gt;
hfiles=3 4090.0 ms&lt;br/&gt;
hfiles=4 5770.72 ms&lt;/p&gt;

&lt;p&gt;change ColumnPagninationFilter to return SKIP rather than SEEK_NEXT_COL&lt;br/&gt;
hfiles=1 243.88 ms&lt;br/&gt;
hfiles=2 1833.41 ms&lt;br/&gt;
hfiles=3 3691.35 ms&lt;br/&gt;
hfiles=4 5498.54 ms&lt;/p&gt;

&lt;p&gt;I think we can find 2 problems from the above figures:&lt;br/&gt;
1) There is a huge improvement when there is only 1 hfile. This is the benefit of next vs reseek.&lt;br/&gt;
2) No much improvement when there is more than one hfiles. This may be due to the use of KeyValueHeap, as performance drops greatly as the number of hfiles grows. &lt;/p&gt;

&lt;p&gt;For problem 1), we can use similar trick as done in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9769&quot; title=&quot;Improve performance of a Scanner with explicit column list when rows are small/medium size&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9769&quot;&gt;&lt;del&gt;HBASE-9769&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13807648" author="vrodionov" created="Tue, 29 Oct 2013 03:43:53 +0000"  >&lt;p&gt;&amp;gt;&amp;gt;No much improvement when there is more than one hfiles. This may be due to the use of KeyValueHeap, as performance drops &amp;gt;&amp;gt;greatly as the number of hfiles grows. &lt;/p&gt;

&lt;p&gt;KeyValueHeap is slow (JIRA to be opened). StoreScaner&apos;s ScanQueryMatcher is slow (+1 JIRA). I have run all my tests directly on StoreFileScanner (we can do this for 1 HFile)  bypassing all of them. &lt;/p&gt;</comment>
                            <comment id="13822264" author="stepinto" created="Thu, 14 Nov 2013 09:13:30 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9969&quot; title=&quot;Improve KeyValueHeap using loser tree&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9969&quot;&gt;HBASE-9969&lt;/a&gt; is opened to improve performance of KeyValueHeap.&lt;/p&gt;</comment>
                            <comment id="13838222" author="lhofhansl" created="Tue, 3 Dec 2013 21:38:58 +0000"  >&lt;p&gt;The problem is that PaginationFilter does not know which the 1 million&apos;s column is, so it cannot efficiently seek to that.&lt;br/&gt;
Are you using a block encoder by any change (such as FAST_DIFF, etc). In that case &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9915&quot; title=&quot;Performance: isSeeked() in EncodedScannerV2 always returns false&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9915&quot;&gt;&lt;del&gt;HBASE-9915&lt;/del&gt;&lt;/a&gt; will help a &lt;b&gt;lot&lt;/b&gt; in such a setup.&lt;br/&gt;
If your column name have names that you can use for seeking, then you can look at ColumnRangeFilter, ColumnPrefixFilter, or MultipleColumnPrefixFilter.&lt;/p&gt;

&lt;p&gt;I believe that MySQL has a query cache that just caches all results for a particular query, so the 2nd time it does not actually run the query.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 29 Oct 2013 03:43:53 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>354393</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 2 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1p3j3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>354683</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>