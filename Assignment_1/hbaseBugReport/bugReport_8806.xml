<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:58:42 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-8806/HBASE-8806.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-8806] Row locks are acquired repeatedly in HRegion.doMiniBatchMutation for duplicate rows.</title>
                <link>https://issues.apache.org/jira/browse/HBASE-8806</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;If we already have the lock in the doMiniBatchMutation we don&apos;t need to re-acquire it. The solution would be to keep a cache of the rowKeys already locked for a miniBatchMutation and If we already have the &lt;br/&gt;
rowKey in the cache, we don&apos;t repeatedly try and acquire the lock.  A fix to this problem would be to keep a set of rows we already locked and not try to acquire the lock for these rows.  &lt;/p&gt;

&lt;p&gt;We have tested this fix in our production environment and has improved replication performance quite a bit.  We saw a replication batch go from 3+ minutes to less than 10 seconds for batches with duplicate row keys.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; ACQUIRE_LOCK_COUNT = 0;

  @Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testRedundantRowKeys() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {

    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; batchSize = 100000;
    
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; tableName = getClass().getSimpleName();
    Configuration conf = HBaseConfiguration.create();
    conf.setClass(HConstants.REGION_IMPL, MockHRegion.class, HeapSize.class);
    MockHRegion region = (MockHRegion) TestHRegion.initHRegion(Bytes.toBytes(tableName), tableName, conf, Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;a&quot;&lt;/span&gt;));

    List&amp;lt;Pair&amp;lt;Mutation, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt;&amp;gt; someBatch = Lists.newArrayList();
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0;
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (i &amp;lt; batchSize) {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (i % 2 == 0) {
        someBatch.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Pair&amp;lt;Mutation, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt;(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(Bytes.toBytes(0)), &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;));
      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
        someBatch.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Pair&amp;lt;Mutation, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt;(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(Bytes.toBytes(1)), &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;));
      }
      i++;
    }
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; startTime = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    region.batchMutate(someBatch.toArray(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Pair[0]));
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; endTime = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; duration = endTime - startTime;
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;duration: &quot;&lt;/span&gt; + duration + &lt;span class=&quot;code-quote&quot;&gt;&quot; ms&quot;&lt;/span&gt;);
    assertEquals(2, ACQUIRE_LOCK_COUNT);
  }

  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; getLock(&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; lockid, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] row, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; waitForLock) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    ACQUIRE_LOCK_COUNT++;
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;.getLock(lockid, row, waitForLock);
  }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12654793">HBASE-8806</key>
            <summary>Row locks are acquired repeatedly in HRegion.doMiniBatchMutation for duplicate rows.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="churromorales">churro morales</assignee>
                                    <reporter username="churromorales">churro morales</reporter>
                        <labels>
                    </labels>
                <created>Tue, 25 Jun 2013 19:49:25 +0000</created>
                <updated>Wed, 24 Jul 2013 19:08:07 +0000</updated>
                            <resolved>Tue, 16 Jul 2013 21:43:25 +0000</resolved>
                                    <version>0.94.5</version>
                                    <fixVersion>0.94.10</fixVersion>
                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>13</watches>
                                                                <comments>
                            <comment id="13693622" author="stack" created="Wed, 26 Jun 2013 04:28:59 +0000"  >&lt;p&gt;Approach looks good.  You keep the hash for the life of the put only it seems.  Is this necessary?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;if (!isRowLocked(lockid)) {&lt;/li&gt;
	&lt;li&gt;throw new IOException(&quot;Invalid row lock&quot;);&lt;br/&gt;
+      byte[] rowFromLock = getRowFromLock(lockid);&lt;br/&gt;
+      if (!Bytes.equals(rowFromLock, row)) 
{
+        throw new IOException(&quot;Invalid row lock: LockId: &quot; + lockid + &quot; holds the lock for row: &quot; + Bytes.toString(rowFromLock) + &quot; but wanted lock for row: &quot; + Bytes.toString(row));
       }&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Nice test.  Any chance of a refactor for trunk so can submit via hadoopqa?  Thanks.&lt;/p&gt;</comment>
                            <comment id="13694130" author="davelatham" created="Wed, 26 Jun 2013 18:09:01 +0000"  >&lt;p&gt;A little more background on how this came up.  We&apos;re currently replicating writes in both directions between two large clusters.  Occasionally we would see one node&apos;s replication queue start falling behind, and once it got behind it appeared to go slower than it did while it was caught up!  It would get into a cycle of replicating a batch of 25000 edits with each batch taking something like 3 minutes.  Examining threads on the node receiving the writes would show the handler thread in stacks like&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;&quot;IPC Server handler 68 on 60020&quot; daemon prio=10 tid=0x00002aaac0d14800 nid=0x3548 runnable [0x000000004
   java.lang.Thread.State: RUNNABLE
        at java.util.ArrayList.&amp;lt;init&amp;gt;(ArrayList.java:112)
        at com.google.common.collect.Lists.newArrayListWithCapacity(Lists.java:168)
        at org.apache.hadoop.hbase.regionserver.HRegion.doMiniBatchMutation(HRegion.java:2129)
        at org.apache.hadoop.hbase.regionserver.HRegion.batchMutate(HRegion.java:2059)
        at org.apache.hadoop.hbase.regionserver.HRegionServer.multi(HRegionServer.java:3571)
        at sun.reflect.GeneratedMethodAccessor83.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The 25000 edits were being sorted by row, with many rows editing up having multiple puts in a batch.  Each time HRegion.doMiniBatchMutation encounters multiple puts to the same row it would fail to acquire the lock on that row for the second put, slowing it down.&lt;/p&gt;

&lt;p&gt;This patch makes it able to handle the full batch in one go.&lt;/p&gt;</comment>
                            <comment id="13694147" author="churromorales" created="Wed, 26 Jun 2013 18:40:07 +0000"  >&lt;p&gt;I will provide a patch for trunk, no problem.  I should have it by tomorrow&lt;/p&gt;</comment>
                            <comment id="13694475" author="anoop.hbase" created="Thu, 27 Jun 2013 04:17:07 +0000"  >&lt;p&gt;In your use case the fix approach looks reasonable &lt;br/&gt;
But what about the normal put flow? There will be perf degradation as we have to deal with Set now for every row in the batch?&lt;br/&gt;
We should test the write throughput with and without patch. Mind attaching a test result?&lt;/p&gt;</comment>
                            <comment id="13694487" author="liyin" created="Thu, 27 Jun 2013 04:46:28 +0000"  >&lt;p&gt;Is this issue similar as &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6930&quot; title=&quot;[89-fb] Avoid acquiring the same row lock repeatedly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6930&quot;&gt;HBASE-6930&lt;/a&gt; ? We solved the problem by sorting the rows for each multiput batch in the client side. &lt;/p&gt;</comment>
                            <comment id="13694493" author="anoop.hbase" created="Thu, 27 Jun 2013 05:08:32 +0000"  >&lt;p&gt;At HRegion it will try to acquire the lock for all the rows in the batch (creating a minibatch) How you are avoiding trying lock the same row by same thread again and again?  Not able to get it from the patch attached in the issue &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6930&quot; title=&quot;[89-fb] Avoid acquiring the same row lock repeatedly&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6930&quot;&gt;HBASE-6930&lt;/a&gt;.&lt;/p&gt;
</comment>
                            <comment id="13694496" author="anoop.hbase" created="Thu, 27 Jun 2013 05:09:53 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=churromorales&quot; class=&quot;user-hover&quot; rel=&quot;churromorales&quot;&gt;churro morales&lt;/a&gt;&lt;br/&gt;
Going through the patch now.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+                acquiredLockId = getLock(providedLockId, mutation.getRow(), shouldBlock);
+                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (acquiredLockId == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+                    failedToAcquire = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
+                }
+                rowsAlreadyLocked.add(currentRow);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When not able to get a lock(acquiredLockId==null), then also adding the currentRow to the already locked rows list?&lt;/p&gt;
</comment>
                            <comment id="13694888" author="churromorales" created="Thu, 27 Jun 2013 17:20:42 +0000"  >&lt;p&gt;while the logic is not wrong, i agree its not as clear as can be.&lt;/p&gt;

&lt;p&gt;a few lines down you see&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (failedToAcquire) {
          &lt;span class=&quot;code-comment&quot;&gt;// We failed to grab another lock
&lt;/span&gt;          &lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt; !shouldBlock : &lt;span class=&quot;code-quote&quot;&gt;&quot;Should never fail to get lock when blocking&quot;&lt;/span&gt;;
          &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;; &lt;span class=&quot;code-comment&quot;&gt;// stop acquiring more rows &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; batch
&lt;/span&gt;        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but we shouldn&apos;t be adding to a set for no reason, I agree.  I will fix this and submit a new patch.  I will also look at how this affects the throughput and provide you guys with some results.&lt;/p&gt;</comment>
                            <comment id="13695323" author="anoop.hbase" created="Fri, 28 Jun 2013 09:05:12 +0000"  >&lt;p&gt;Yes Rahul, I have seen this and because of this there won&#8217;t be any functional issue as such. Just adding an extra entry into Set. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
In releaseRowLock&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (lockId == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;; &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; lock id, &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; nothing
&lt;/span&gt;    HashedBytes rowKey = lockIds.remove(lockId);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rowKey == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      LOG.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Release unknown lockId: &quot;&lt;/span&gt; + lockId);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;You will get this warn log for the duplicate rows in minibatch. Do this log to be really warn level? Can we make it info only?&lt;/p&gt;

&lt;p&gt;One more observation is when the mini batch contain same row say 4 times, the 1st time the rowlock is acquired and remaining 3 will assume the lock is there with it. Later when the releaseRowLock happens the 1st occurrence of row itself will unlock the row(You can see the unlock op in a loop)..  Well this is just fine because by the time this unlock is getting called all the write ops are over and it is just okey that other threads can get lock on the row.&lt;/p&gt;

&lt;p&gt;Another way I am thinking on this similar lines (ie. 1st occurrence of row acquire the lock and remaining just assumes it has the lock and &lt;b&gt;while releaseRowLock the 1st occurrence unlocks the row&lt;/b&gt; so that other threads can acquire it) is to have a RowLockContext which contains the Latch and the thread name which has acquired the lock. We store this context, instead of the latch, in the Map. When, trying to lock, if context for the row is already there in Map, compare the thread names. Instead of saving every row ref in a Set I am just keeping the thread name in a wrapper obj. Will that be better in a normal op when there are no duplicate rows in the batch?&lt;br/&gt;
I just tried it and have a patch for Trunk. If it sounds okey, I can upload that patch.&lt;/p&gt;</comment>
                            <comment id="13697838" author="lhofhansl" created="Tue, 2 Jul 2013 14:39:22 +0000"  >&lt;p&gt;I am marking this critical, because in some scenarios this could render replication useless (if the same rows are updated frequently, for example as counters).&lt;/p&gt;

&lt;p&gt;Patch looks good. A minor nit is that we need to create the HashBytes in two places now.&lt;/p&gt;

&lt;p&gt;As a general question: Should we introduce reentrant locks? If requested we could keep track of the current thread&apos;s id, and if the same thread requests a lock on the same row again, we&apos;d return the current lock. This would be optional, maybe via a new flag to getLock. Cleanup might be a bit tricky in that case.&lt;/p&gt;

&lt;p&gt;I&apos;m happy with approach in this patch as well.&lt;/p&gt;</comment>
                            <comment id="13697841" author="lhofhansl" created="Tue, 2 Jul 2013 14:42:12 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; Suggested almost the same above (should&apos;ve read that first). Also as Anoop suggests in an earlier comment, we need to performance test this carefully for the normal case.&lt;/p&gt;</comment>
                            <comment id="13697844" author="lhofhansl" created="Tue, 2 Jul 2013 14:45:18 +0000"  >&lt;p&gt;Yet another approach is to sort the KVs (aren&apos;t they sorted anyway?) and then acquire a lock for each changing row key and apply all edits with the same row key using the lock we acquired for the first mutation for this row. That way we do not need to remember prior locks.&lt;/p&gt;</comment>
                            <comment id="13697875" author="lhofhansl" created="Tue, 2 Jul 2013 15:17:47 +0000"  >&lt;p&gt;W.r.t. the attached patch, we still need to honor the providedLockId (if provided). If the providedLockId is not null, we should follow the old logic.&lt;/p&gt;</comment>
                            <comment id="13698534" author="anoop.hbase" created="Wed, 3 Jul 2013 03:07:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;Yet another approach is to sort the KVs (aren&apos;t they sorted anyway?) &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes it will be sorted..&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;then acquire a lock for each changing row key and apply all edits ...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Here also there will be byte[] comparison in normal case also.. By saying normal case I mean normal batch() calls where the duplicate RKs mostly wont be there (Will there be?)  So my thinking was how this scenario we can minimize the impact of new checks.  That is why I was saying the option of keeping the Thread name also along with the latch and only when the lock is acquired by some one else, check the thread names. Yes Lars also said the same above..  Pls see in my above comment the bold portion (ie.while releaseRowLock the 1st occurrence unlocks the row so that other threads can acquire it)  Any way in the current patch also the release happens this way only..  As per the current way of code in HRegion this is just fine..&lt;/p&gt;

&lt;p&gt;If you okey Lars I can attach the simple patch I made on this issue. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13698769" author="lhofhansl" created="Wed, 3 Jul 2013 09:13:21 +0000"  >&lt;p&gt;Yeah, the extra byte comparisons required in the normal case would be my concern too.&lt;/p&gt;

&lt;p&gt;Please attach the simple patch. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13698803" author="hadoopqa" created="Wed, 3 Jul 2013 10:42:38 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12590608/HBASE-8806.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12590608/HBASE-8806.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 2 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6202//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13698811" author="ram_krish" created="Wed, 3 Jul 2013 10:53:19 +0000"  >&lt;p&gt;Patch looks good.&lt;/p&gt;</comment>
                            <comment id="13698874" author="lhofhansl" created="Wed, 3 Jul 2013 11:59:55 +0000"  >&lt;p&gt;Anoop&apos;s patch LGTM.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Should that be currentThread().getId() instead?&lt;/li&gt;
	&lt;li&gt;Do you want to include the test of the original issue?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=churromorales&quot; class=&quot;user-hover&quot; rel=&quot;churromorales&quot;&gt;churro morales&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=davelatham&quot; class=&quot;user-hover&quot; rel=&quot;davelatham&quot;&gt;Dave Latham&lt;/a&gt;, what do you guys think?&lt;/p&gt;</comment>
                            <comment id="13698877" author="anoop.hbase" created="Wed, 3 Jul 2013 12:02:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;&#8226;Should that be currentThread().getId() instead?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ya better.. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&#8226;Do you want to include the test of the original issue?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let me see..  Will upload the new version.&lt;/p&gt;</comment>
                            <comment id="13699035" author="anoop.hbase" created="Wed, 3 Jul 2013 14:44:20 +0000"  >&lt;p&gt;I cannot include the same test as it asserts the number of times getLock() is being called. I am not able to see any simple way to assert the fix. One way I can think of is having a CP and assert the number of time preBatchMutate() hook is getting called. But this will need a RegionServerServices to be available. We need a Minicluster up.. Sounds fine? Any other easy way can suggest? &lt;/p&gt;</comment>
                            <comment id="13699043" author="davelatham" created="Wed, 3 Jul 2013 14:54:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;rahul gidwani and Dave Latham, what do you guys think?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the idea of thread-based reentrant locks is an interesting one.  I think it would work for 0.96 and trunk, but not for 0.94 because locks are still visible client side and the same handler thread could own the lock for one client and erroneously reacquire it for a different one.  So we&apos;d still need a separate solution for 0.94.&lt;/p&gt;

&lt;p&gt;Putting 0.94 aside for the moment, addressing the current patch - For the reentrancy check, I think the Thread instance itself would be better than the name (or even the id which can be reused).  Then there is the question of how to release locks that were repeatedly acquired.  As it is currently we release the lock on the first try and then we&apos;d be spewing errors in the log.  From what I can read it would probably be safe to release on the first attempt.  In that case, what do you think about getting rid entirely of the complex tracking of lock ids and relying entirely on thread ownership?  I pushed it through a bit to see what it would look like.  It simplifies a great deal of code but turned up 2 potential questions.  First is checkAndMutate which acquires the row lock before the check.  From my reading that should be fine but would love a second pair of eyes there.  Second is the RegionObserver coprocessor which currently directly exposes lock ids.  Since those are very internal I think it&apos;s an improvement to remove them from the interface, but that is an incompatible change.  Ok to do for the singularity?  I&apos;m attaching a patch with where I got with this proposal.  Let me know what you think.&lt;/p&gt;

&lt;p&gt;(This patch is not from the current trunk but an earlier point on 0.95 so may need to be updated a bit)&lt;/p&gt;</comment>
                            <comment id="13699057" author="hadoopqa" created="Wed, 3 Jul 2013 15:02:47 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12590639/HBASE-8806-threadBasedRowLocks.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12590639/HBASE-8806-threadBasedRowLocks.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 9 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6206//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6206//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13699077" author="davelatham" created="Wed, 3 Jul 2013 15:24:11 +0000"  >&lt;p&gt;To explain a bit more this patch changes the HRegion row lock methods to these alone:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;void getRowLock(byte[] row) throws IOException  (acquire, throw if unable to acqurie before timeout)&lt;/li&gt;
	&lt;li&gt;boolean tryRowLock(byte[] row) (acquire without wait and return true iff successful)&lt;/li&gt;
	&lt;li&gt;void releaseMyRowLocks() (release all row locks held by the current thread)&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13699403" author="lhofhansl" created="Wed, 3 Jul 2013 20:32:54 +0000"  >&lt;p&gt;I think the client side lock issue is solved by treating client provided locks as before as I suggested in my comment above (July 2nd)&lt;/p&gt;</comment>
                            <comment id="13699427" author="lhofhansl" created="Wed, 3 Jul 2013 20:56:49 +0000"  >&lt;p&gt;And, anyway, for 0.94 I&apos;d prefer a more local change just to doMiniBatchMutation.&lt;/p&gt;</comment>
                            <comment id="13699530" author="lhofhansl" created="Wed, 3 Jul 2013 22:25:20 +0000"  >&lt;p&gt;Specifically, for 0.94 I&apos;d prefer the fix with the row cache (the first two patches). In order to reduce the performance impact we can probably pass HashedBytes to getLock directly, instead of creating them in doMiniBatchMutation(...) and then again in internalObtainRowLock(...).&lt;/p&gt;

&lt;p&gt;For 0.96 Dave&apos;s patch is nice. For that patch, we could even invent &quot;lock groups&quot;, simply by passing a grouping object to {get|try}RowLock and releaseMyRowLocks. To group by thread we&apos;d pass in the currentThread object; and we could also group only for this batch, by passing batchOp as group object.&lt;/p&gt;</comment>
                            <comment id="13699612" author="yuzhihong@gmail.com" created="Wed, 3 Jul 2013 23:53:50 +0000"  >&lt;p&gt;@Dave:&lt;br/&gt;
The changes in pom.xml are not needed for this fix, right ?&lt;/p&gt;

&lt;p&gt;I tried to apply your patch on trunk but there are several chunks in HRegion.java which don&apos;t apply cleanly.&lt;/p&gt;

&lt;p&gt;Once I have a clean patch, I can put it on a cluster and try out.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="13699619" author="stack" created="Thu, 4 Jul 2013 00:09:31 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ted_yu&quot; class=&quot;user-hover&quot; rel=&quot;ted_yu&quot;&gt;Ted Yu&lt;/a&gt; Dave said above &quot;(This patch is not from the current trunk but an earlier point on 0.95 so may need to be updated a bit)&quot;  How about helping out by doing the update yourself?&lt;/p&gt;</comment>
                            <comment id="13699634" author="churromorales" created="Thu, 4 Jul 2013 00:28:10 +0000"  >&lt;p&gt;Hey folks, &lt;/p&gt;

&lt;p&gt;Sorry for the late response.  Lars, I will update the patch for .94 to pass in hashed bytes to getRowLock and subsequently internalObtainRowLock and resubmit the patch for .94.  &lt;/p&gt;


&lt;p&gt;Dave is on vacation this week so I will try to get his patch to apply to trunk.&lt;/p&gt;

&lt;p&gt;I have also written a few performance tests to see how these various changes affect doMiniBatchMutation in various cases, such as: all unique row keys, 5% duplicate row keys, 10% duplicate row keys, etc... This weekend I will run those tests against both patches (dave&apos;s and .94 as well as the current trunk) and post results.&lt;/p&gt;

&lt;p&gt;The .94 patch is almost ready, I am just in the process of making sure all tests pass before I attach another patch.&lt;/p&gt;

&lt;p&gt;cheers and sorry for the delayed response.&lt;/p&gt;</comment>
                            <comment id="13699701" author="hadoopqa" created="Thu, 4 Jul 2013 01:55:25 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12590763/HBASE-8806-0.94.10-v3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12590763/HBASE-8806-0.94.10-v3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6210//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6210//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13699759" author="anoop.hbase" created="Thu, 4 Jul 2013 04:34:21 +0000"  >&lt;p&gt;We need change all the CP hooks signatures?  CPs will(should) be able to acquire locks and release?&lt;/p&gt;</comment>
                            <comment id="13699847" author="lhofhansl" created="Thu, 4 Jul 2013 08:41:28 +0000"  >&lt;p&gt;I made this 0.94 patch yesterday night. It is strikingly similar to Rahul&apos;s latest patch (which is a good sign).&lt;br/&gt;
It also has the following:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;maintains the old getLock, etc, signatures&lt;/li&gt;
	&lt;li&gt;simplifies the code a bit (because we now have HashedBytes everywhere now)&lt;/li&gt;
	&lt;li&gt;retains old logic if the client passed a lock via the mutation&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13699853" author="lhofhansl" created="Thu, 4 Jul 2013 08:46:01 +0000"  >&lt;p&gt;Oops. Right patch this time.&lt;/p&gt;</comment>
                            <comment id="13699855" author="lhofhansl" created="Thu, 4 Jul 2013 08:47:30 +0000"  >&lt;p&gt;btw. every now and then the testRedundantRowKeys fails (acquires 4 lock instead of 2), I assume this happens due to the breakup of the batches.&lt;/p&gt;</comment>
                            <comment id="13699859" author="hadoopqa" created="Thu, 4 Jul 2013 08:52:55 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12590792/8806-0.94-v4.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12590792/8806-0.94-v4.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6212//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6212//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13699863" author="lhofhansl" created="Thu, 4 Jul 2013 08:53:23 +0000"  >&lt;p&gt;This one makes the test a bit nicer (removes the static counter)&lt;/p&gt;</comment>
                            <comment id="13699867" author="lhofhansl" created="Thu, 4 Jul 2013 08:56:08 +0000"  >&lt;p&gt;Should we commit something like the 0.94 patch to trunk as well, for now; and then regroup and add re-entrant locks in a different jira?&lt;br/&gt;
With HashedBytes passed directly to getLock(...) the performance impact should be negligible.&lt;/p&gt;</comment>
                            <comment id="13699872" author="hadoopqa" created="Thu, 4 Jul 2013 09:02:56 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12590795/8806-0.94-v5.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12590795/8806-0.94-v5.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6213//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6213//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13699986" author="anoop.hbase" created="Thu, 4 Jul 2013 10:40:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should we commit something like the 0.94 patch to trunk as well, for now; and then regroup and add re-entrant locks in a different jira?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 for that..&lt;br/&gt;
Going through the latest patch on 94&lt;br/&gt;
nit&lt;br/&gt;
if (providedLockId == null) {&lt;br/&gt;
+                  rowsAlreadyLocked.add(currentRow);&lt;br/&gt;
can be else if ?.. Even though no functional issues&lt;/p&gt;</comment>
                            <comment id="13699990" author="anoop.hbase" created="Thu, 4 Jul 2013 10:46:09 +0000"  >&lt;p&gt;For the normal case there will be always a rowsAlreadyLocked.contains(currentRow) check for every row.&lt;br/&gt;
One way which could favor this normal case is have this check after &lt;br/&gt;
acquiredLockId = getLock(providedLockId, currentRow, shouldBlock);&lt;br/&gt;
iff acquiredLockId == null&lt;br/&gt;
Well there is no problem in calling getLock before the new contains check as shouldBlock will be false except for the 1st time. When shouldBlock is false it will immediately return with null. Also for the 1st time any way rowsAlreadyLocked will be empty too.&lt;/p&gt;

&lt;p&gt;In this, the case where the duplicate entries are there in batch, will have to do some extra ops in getLock.&lt;/p&gt;

&lt;p&gt;Just saying. what do you say Lars?&lt;/p&gt;</comment>
                            <comment id="13700019" author="ram_krish" created="Thu, 4 Jul 2013 11:33:25 +0000"  >&lt;p&gt;Is it ok if we sort it out on the client side itself? &lt;/p&gt;</comment>
                            <comment id="13700110" author="davelatham" created="Thu, 4 Jul 2013 14:54:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;The changes in pom.xml are not needed for this fix, right ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&apos;s right, sorry about that.  Just helps get m2eclipse to compile everything correctly.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We need change all the CP hooks signatures? CPs will(should) be able to acquire locks and release?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The CP changes required would be in RegionObserver:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;tt&gt;preBatchMutate(...,MiniBatchOperationInProgress&amp;lt;Pair&amp;lt;Mutation, Integer&amp;gt;&amp;gt; miniBatchOp)&lt;/tt&gt; becomes&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;preBatchMutate(...,MiniBatchOperationInProgress&amp;lt;Mutation&amp;gt; miniBatchOp)&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;postBatchMutate(...,MiniBatchOperationInProgress&amp;lt;Pair&amp;lt;Mutation, Integer&amp;gt;&amp;gt; miniBatchOp)&lt;/tt&gt; becomes&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;postBatchMutate(...,MiniBatchOperationInProgress&amp;lt;Mutation&amp;gt; miniBatchOp)&lt;/tt&gt;&lt;br/&gt;
I don&apos;t have much experience with coprocessor usage, but it seems unlikely to me someone would require manipulating the set of row locks in the middle of a miniBatch mutation.  Would it be prudent to poll the mailing list first?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Re: patch v5&lt;br/&gt;
Looks good to me.  Anoop&apos;s notion of favoring the case where the lock is new versus the lock is already owned is an interesting one.  Two possibilities of code with two cases:&lt;br/&gt;
Code A:  patch v5 - first check rowsAlreadyLocked then getLock&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Case 1 (lock is new): hash comparison in rowsAlreadyLocked likely returns !contains quickly.  getLock likely also quickly finds no hash match in concurrent hashmap and inserts.&lt;/li&gt;
	&lt;li&gt;Case 2 (lock is already owned): hashCode match then bytewise equals comparison in rowsAlreadyLocked.contains.  getLock not called&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Code B: first try getLock, then if unable to getLock check rowsAlreadyLocked&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Case 1 (lock is new): getLock quickly finds no hash match in concurrent hashmap and inserts.&lt;/li&gt;
	&lt;li&gt;Case 2 (lock is already owned): getLock checks concurrent hashmap finds hashCode match then does bytewise equals comparison.  then rowsAlreadyLocked also gets hashCode match then bytewise equals comparison&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So Code A has an extra hash check for Case 1 and Code B has an extra hash check and bytewise equal compare for Case 2.  I&apos;d favor current patch (Code A) as it&apos;s a smaller and constant time addition and I think the code is a bit more intuitive, but like the property in Code B that it has no impact on Case 1 compared to the existing 0.94 releases.  I&apos;d be content if Rahul&apos;s tests on the latest patch show imapct is small.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is it ok if we sort it out on the client side itself? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not for 0.94 as it would be changing the contract on existing clients which may suddenly fail to respect row locks if they aren&apos;t updated.  Though it would be interesting to ask clients to sort for performance gains and then re-sort with a stable sort on the server.  But if people are happy with the other approaches discussed, they sound good to me.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Should we commit something like the 0.94 patch to trunk as well, for now; and then regroup and add re-entrant locks in a different jira?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 so long as people are comfortable with performance.  Let&apos;s give Rahul a chance to run his perf test on this patch if no one&apos;s in a hurry.&lt;/p&gt;

&lt;p&gt;I will try to update my reentrant locks patch for trunk.  After posting it up I was considering introducing that lock groups idea too and using it for checkAndPut.  May play with the code there unless someone beats me to it.&lt;/p&gt;

&lt;p&gt;Thanks to everyone for the attention on this issue!&lt;/p&gt;</comment>
                            <comment id="13700167" author="davelatham" created="Thu, 4 Jul 2013 15:58:45 +0000"  >&lt;p&gt;Ok, here&apos;s the same patch as before but updated for trunk.  Doesn&apos;t have lock groups yet.  Haven&apos;t run the tests yet (let me know if you do).  &lt;/p&gt;</comment>
                            <comment id="13700197" author="lhofhansl" created="Thu, 4 Jul 2013 16:44:24 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=davelatham&quot; class=&quot;user-hover&quot; rel=&quot;davelatham&quot;&gt;Dave Latham&lt;/a&gt; Agreed that in the (usual) case of different rows the overhead is minimal (just checking  precalculated hashes). I&apos;d be surprised if anybody can show a measurable performance impact because of that.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; Yes, that should be else-if.&lt;/p&gt;</comment>
                            <comment id="13700203" author="lhofhansl" created="Thu, 4 Jul 2013 16:48:55 +0000"  >&lt;p&gt;New patch, slight change:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;fixes the else-if condition&lt;/li&gt;
	&lt;li&gt;fixes indentation&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13700208" author="anoop.hbase" created="Thu, 4 Jul 2013 16:51:10 +0000"  >&lt;p&gt;Agree with Dave and Lars. I was just saying an option &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;..  Yes unless a performance test is done I also believe there wont be much of overhead..&lt;/p&gt;</comment>
                            <comment id="13700210" author="hadoopqa" created="Thu, 4 Jul 2013 16:52:47 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12590912/8806-0.94-v6.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12590912/8806-0.94-v6.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6219//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6219//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13700226" author="hadoopqa" created="Thu, 4 Jul 2013 17:12:48 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12590906/HBASE-8806-threadBasedRowLocks-v2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12590906/HBASE-8806-threadBasedRowLocks-v2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 9 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 2 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.replication.TestReplicationQueueFailoverCompressed&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6218//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13700942" author="davelatham" created="Fri, 5 Jul 2013 15:40:48 +0000"  >&lt;p&gt;Filed &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8877&quot; title=&quot;Reentrant row locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8877&quot;&gt;&lt;del&gt;HBASE-8877&lt;/del&gt;&lt;/a&gt; to track the reentrant approach separately and uploaded a new patch there with some cleanup (and fixed heap size logic).  Let&apos;s continue that discussion there.&lt;/p&gt;</comment>
                            <comment id="13701926" author="lhofhansl" created="Mon, 8 Jul 2013 10:55:56 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=davelatham&quot; class=&quot;user-hover&quot; rel=&quot;davelatham&quot;&gt;Dave Latham&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;How are we doing on this one? Obvious I&apos;m +1 on v6.&lt;/p&gt;
</comment>
                            <comment id="13703824" author="stack" created="Tue, 9 Jul 2013 21:31:10 +0000"  >&lt;p&gt;I&apos;d be +1 on this going into trunk until the reentrant stuff is done.  Was there perf test done?&lt;/p&gt;</comment>
                            <comment id="13703887" author="churromorales" created="Tue, 9 Jul 2013 22:15:53 +0000"  >&lt;p&gt;Mr. Stack I will run a perf test.&lt;/p&gt;

&lt;p&gt;Here is the basic logic, I create a batchMutation of size 25k and measure performance for puts.  &lt;/p&gt;

&lt;p&gt;Each pass takes in a percentage value of duplicate rowkeys for that batch &lt;span class=&quot;error&quot;&gt;&amp;#91;0, .5, .1, .15, .2, .25, .3, .35, .4, .5&amp;#93;&lt;/span&gt;&lt;br/&gt;
For each percentage of duplicate rowkeys we run batchMutate 5 different times storing the result in a DescriptiveStatistic.&lt;/p&gt;

&lt;p&gt;I will do this for trunk (no patch applied) and trunk (patch applied) and post my results along with the source.&lt;/p&gt;</comment>
                            <comment id="13704355" author="lhofhansl" created="Wed, 10 Jul 2013 09:30:23 +0000"  >&lt;p&gt;Looking forward to the perf data. I do not foresee a measurable performance impact in the &quot;normal&quot; case.&lt;/p&gt;

&lt;p&gt;I am pretty sure now that we ran into this at Salesforce in our testing, but didn&apos;t have time to investigate that thoroughly and just concluded that it had to do with the slave cluster running on VMs.&lt;/p&gt;</comment>
                            <comment id="13705001" author="churromorales" created="Wed, 10 Jul 2013 20:12:06 +0000"  >&lt;p&gt;Hi Lars,&lt;/p&gt;

&lt;p&gt;We at flurry have been running with this patch for the past month.  I have not noticed any significant performance impact for the &quot;normal&quot; case.  &lt;/p&gt;

&lt;p&gt;Although we have seen significant improvements with replication.  &lt;/p&gt;

&lt;p&gt;We are no longer seeing our replication queues growing on the sink side.  For some batches it would take upwards of 3 minutes to complete which would cause quite a backlog.  &lt;/p&gt;

&lt;p&gt;With the patch applied this is no longer the case.&lt;/p&gt;

&lt;p&gt;I have attached the performance test results. &lt;/p&gt;</comment>
                            <comment id="13705020" author="hadoopqa" created="Wed, 10 Jul 2013 20:23:01 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12591712/row_lock_perf_results.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12591712/row_lock_perf_results.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6300//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6300//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13705171" author="lhofhansl" created="Wed, 10 Jul 2013 22:34:45 +0000"  >&lt;p&gt;Hmm... So the &quot;normal&quot; case is impacted:&lt;br/&gt;
Without patch:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;STATISTICS FOR DUPLICATE ROWKEY PERCENTAGE: 0.0&lt;br/&gt;
DescriptiveStatistics:&lt;br/&gt;
n: 100&lt;br/&gt;
min: 30.0&lt;br/&gt;
max: 343.0&lt;br/&gt;
mean: 55.45000000000001&lt;br/&gt;
std dev: 32.44213963724377&lt;br/&gt;
median: 50.0&lt;br/&gt;
skewness: 7.236118305713237&lt;br/&gt;
kurtosis: 63.33779590624729&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;With patch:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;STATISTICS FOR DUPLICATE ROWKEY PERCENTAGE: 0.0&lt;br/&gt;
DescriptiveStatistics:&lt;br/&gt;
n: 100&lt;br/&gt;
min: 46.0&lt;br/&gt;
max: 435.0&lt;br/&gt;
mean: 99.84000000000003&lt;br/&gt;
std dev: 58.07113714830262&lt;br/&gt;
median: 85.0&lt;br/&gt;
skewness: 3.5101957571545754&lt;br/&gt;
kurtosis: 15.495906287057384&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So on average the requests now take 100ms vs 55ms before. Or am I misreading the results?&lt;/p&gt;</comment>
                            <comment id="13707896" author="lhofhansl" created="Sun, 14 Jul 2013 01:14:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=davelatham&quot; class=&quot;user-hover&quot; rel=&quot;davelatham&quot;&gt;Dave Latham&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=churromorales&quot; class=&quot;user-hover&quot; rel=&quot;churromorales&quot;&gt;churro morales&lt;/a&gt;, is my reading of the numbers correct?&lt;br/&gt;
This cannot be committed if it slows down the &quot;normal&quot; case by almost 100%.&lt;/p&gt;

&lt;p&gt;Also, did you test this exact patch (with the slight interface change that avoid creating HashedBytes multiple times)?&lt;/p&gt;</comment>
                            <comment id="13707897" author="lhofhansl" created="Sun, 14 Jul 2013 01:18:01 +0000"  >&lt;p&gt;Looking at the numbers again this looks like a measurement glitch. Only the case with no duplicates is slow, and there is no reason why it would be slower all the cases with duplicates.&lt;/p&gt;</comment>
                            <comment id="13707917" author="davelatham" created="Sun, 14 Jul 2013 01:46:44 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; Agreed, don&apos;t see a reason it should be much slower in that case.  Also, you can see the stddev of the measurements is high there, so my guess is it&apos;s related to not so good benchmarking (not enough burn in time).&lt;/p&gt;

&lt;p&gt;However, please check out the work in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8877&quot; title=&quot;Reentrant row locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8877&quot;&gt;&lt;del&gt;HBASE-8877&lt;/del&gt;&lt;/a&gt; as there&apos;s an alternate patch there for 0.94 as well.&lt;/p&gt;</comment>
                            <comment id="13708525" author="lhofhansl" created="Mon, 15 Jul 2013 14:58:22 +0000"  >&lt;p&gt;Any chance to redo the perf test just for the case with no dups, just to be sure?&lt;br/&gt;
(Or post the test code, and I&apos;ll do it)&lt;/p&gt;

&lt;p&gt;I still have a slight preference for this patch (over &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8877&quot; title=&quot;Reentrant row locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8877&quot;&gt;&lt;del&gt;HBASE-8877&lt;/del&gt;&lt;/a&gt;) for 0.94.&lt;/p&gt;</comment>
                            <comment id="13708584" author="davelatham" created="Mon, 15 Jul 2013 16:10:03 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;, as requested additional benchmark runs.&lt;/p&gt;

&lt;p&gt;I&apos;ve attached a couple additional runs of the benchmark against the current tip of 0.94 and with the v6 patch applied.&lt;/p&gt;

&lt;p&gt;In each you can see the first run was burnining in the VM but afterward the variation in results gets much smaller.&lt;/p&gt;

&lt;p&gt;In particular with no duplicate row keys, you can see the patch takes on average 31-32ms to apply 25k puts in each mini batch.  Without the patch it seems to average 28-29ms.  I&apos;m comfortable with that difference given the speedup in all other cases but I will run the numbers more carefully also for the reentrant patch at HBSE-8877.&lt;/p&gt;</comment>
                            <comment id="13708587" author="hadoopqa" created="Mon, 15 Jul 2013 16:23:09 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12592342/hbase-8806-0.94-v6-microbenchmark.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12592342/hbase-8806-0.94-v6-microbenchmark.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6341//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6341//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13708591" author="davelatham" created="Mon, 15 Jul 2013 16:25:58 +0000"  >&lt;p&gt;Updated the benchmarks to also compare &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8877&quot; title=&quot;Reentrant row locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8877&quot;&gt;&lt;del&gt;HBASE-8877&lt;/del&gt;&lt;/a&gt;-0.94-v2.patch.&lt;/p&gt;

&lt;p&gt;So two files, each one compares current 0.94 versus 8806-0.94-v6.txt versus &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8877&quot; title=&quot;Reentrant row locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8877&quot;&gt;&lt;del&gt;HBASE-8877&lt;/del&gt;&lt;/a&gt;-0.94-v2.patch.  One file varies the proportion of duplicate rows the other runs several sets of trials with no duplicate rows.&lt;/p&gt;

&lt;p&gt;I&apos;d say the difference between the 3 is not significant for the case of no duplicate rows, though 8806-0.94-v6.txt may be slightly slower.&lt;/p&gt;

&lt;p&gt;I&apos;m happy to see either 8806-0.94-v6.txt or &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8877&quot; title=&quot;Reentrant row locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8877&quot;&gt;&lt;del&gt;HBASE-8877&lt;/del&gt;&lt;/a&gt;-0.94-v2.patch go in for 0.94&lt;/p&gt;</comment>
                            <comment id="13708607" author="hadoopqa" created="Mon, 15 Jul 2013 16:32:43 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12592344/hbase-8806-0.94-microbenchmark-no-dupe-rows.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12592344/hbase-8806-0.94-microbenchmark-no-dupe-rows.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6342//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6342//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13708835" author="lhofhansl" created="Mon, 15 Jul 2013 19:06:37 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=davelatham&quot; class=&quot;user-hover&quot; rel=&quot;davelatham&quot;&gt;Dave Latham&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;I would like to commit this patch to 0.94. I think the perf impact is an acceptable trade off.&lt;br/&gt;
We can undo this if/when we apply &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8877&quot; title=&quot;Reentrant row locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8877&quot;&gt;&lt;del&gt;HBASE-8877&lt;/del&gt;&lt;/a&gt; to 0.94 (also see my question about reference counting there).&lt;/p&gt;</comment>
                            <comment id="13709180" author="davelatham" created="Mon, 15 Jul 2013 23:34:33 +0000"  >&lt;p&gt;Sounds good to me. +1 to commit.&lt;/p&gt;</comment>
                            <comment id="13709435" author="lhofhansl" created="Tue, 16 Jul 2013 03:48:21 +0000"  >&lt;p&gt;Cool. Any objections?&lt;/p&gt;

&lt;p&gt;I am feeling strangely indecisive about this vs &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8877&quot; title=&quot;Reentrant row locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8877&quot;&gt;&lt;del&gt;HBASE-8877&lt;/del&gt;&lt;/a&gt; now (especially with ref counting).&lt;br/&gt;
A consideration is that rather than having different implementations of reentrant locks between 0.94 and 0.95+ it might be better only introduce reentrant locks in 0.95+ and do the less intrusive fix in 0.94 (i.e. this patch).&lt;/p&gt;

&lt;p&gt;So, unless I hear objections I am going to commit v6 here to 0.94 only and then close this issue.&lt;/p&gt;</comment>
                            <comment id="13709452" author="anoop.hbase" created="Tue, 16 Jul 2013 04:25:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;A consideration is that rather than having different implementations of reentrant locks between 0.94 and 0.95+ it might be better only introduce reentrant locks in 0.95+ and do the less intrusive fix in 0.94 (i.e. this patch).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13709870" author="lhofhansl" created="Tue, 16 Jul 2013 15:59:30 +0000"  >&lt;p&gt;Going to commit later today.&lt;/p&gt;</comment>
                            <comment id="13710308" author="lhofhansl" created="Tue, 16 Jul 2013 21:41:01 +0000"  >&lt;p&gt;Same as -v6 with Rahul&apos;s new test and test fix.&lt;/p&gt;</comment>
                            <comment id="13710313" author="lhofhansl" created="Tue, 16 Jul 2013 21:43:25 +0000"  >&lt;p&gt;Committed to 0.94.&lt;/p&gt;

&lt;p&gt;In 0.95+ this will be fixed with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8877&quot; title=&quot;Reentrant row locks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8877&quot;&gt;&lt;del&gt;HBASE-8877&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13710725" author="lhofhansl" created="Wed, 17 Jul 2013 05:24:40 +0000"  >&lt;p&gt;Actually this should be credited to Rahul, who did the initial patch. I added you as contributor &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=churromorales&quot; class=&quot;user-hover&quot; rel=&quot;churromorales&quot;&gt;churro morales&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12656386">HBASE-8877</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12590792" name="8806-0.94-v4.txt" size="5378" author="lhofhansl" created="Thu, 4 Jul 2013 08:46:01 +0000"/>
                            <attachment id="12590795" name="8806-0.94-v5.txt" size="5378" author="lhofhansl" created="Thu, 4 Jul 2013 08:53:23 +0000"/>
                            <attachment id="12590912" name="8806-0.94-v6.txt" size="5336" author="lhofhansl" created="Thu, 4 Jul 2013 16:48:55 +0000"/>
                            <attachment id="12592634" name="8806-0.94-v7.txt" size="10924" author="lhofhansl" created="Tue, 16 Jul 2013 21:41:01 +0000"/>
                            <attachment id="12589686" name="HBASE-8806-0.94.10-v2.patch" size="7999" author="churromorales" created="Wed, 26 Jun 2013 00:29:28 +0000"/>
                            <attachment id="12590763" name="HBASE-8806-0.94.10-v3.patch" size="14842" author="churromorales" created="Thu, 4 Jul 2013 01:36:42 +0000"/>
                            <attachment id="12589685" name="HBASE-8806-0.94.10.patch" size="7745" author="churromorales" created="Wed, 26 Jun 2013 00:13:59 +0000"/>
                            <attachment id="12590906" name="HBASE-8806-threadBasedRowLocks-v2.patch" size="44375" author="davelatham" created="Thu, 4 Jul 2013 15:58:45 +0000"/>
                            <attachment id="12590639" name="HBASE-8806-threadBasedRowLocks.patch" size="45088" author="davelatham" created="Wed, 3 Jul 2013 14:54:23 +0000"/>
                            <attachment id="12590608" name="HBASE-8806.patch" size="3064" author="anoop.hbase" created="Wed, 3 Jul 2013 09:24:28 +0000"/>
                            <attachment id="12592344" name="hbase-8806-0.94-microbenchmark-no-dupe-rows.txt" size="4815" author="davelatham" created="Mon, 15 Jul 2013 16:25:58 +0000"/>
                            <attachment id="12592343" name="hbase-8806-0.94-microbenchmarks-dupe-rows.txt" size="6545" author="davelatham" created="Mon, 15 Jul 2013 16:25:58 +0000"/>
                            <attachment id="12591712" name="row_lock_perf_results.txt" size="5913" author="churromorales" created="Wed, 10 Jul 2013 20:13:05 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>13.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 26 Jun 2013 04:28:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>335070</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 22 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1lsr3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>335394</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>