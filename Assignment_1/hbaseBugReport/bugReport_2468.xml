<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:02:10 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2468/HBASE-2468.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2468] Improvements to prewarm META cache on clients</title>
                <link>https://issues.apache.org/jira/browse/HBASE-2468</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;A couple different use cases cause storms of reads to META during startup. For example, a large MR job will cause each map task to hit meta since it starts with an empty cache.&lt;/p&gt;

&lt;p&gt;A couple possible improvements have been proposed:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;MR jobs could ship a copy of META for the table in the DistributedCache&lt;/li&gt;
	&lt;li&gt;Clients could prewarm cache by doing a large scan of all the meta for the table instead of random reads for each miss&lt;/li&gt;
	&lt;li&gt;Each miss could fetch ahead some number of rows in META&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12462476">HBASE-2468</key>
            <summary>Improvements to prewarm META cache on clients</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mingjielai">Mingjie Lai</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                            <label>moved_from_0_20_5</label>
                    </labels>
                <created>Mon, 19 Apr 2010 19:58:38 +0000</created>
                <updated>Fri, 20 Nov 2015 12:42:06 +0000</updated>
                            <resolved>Sun, 13 Jun 2010 17:22:01 +0000</resolved>
                                                    <fixVersion>0.90.0</fixVersion>
                                    <component>Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12866758" author="mingjielai" created="Wed, 12 May 2010 22:05:32 +0000"  >&lt;p&gt;I&apos;m looking at this issue right now, and want to provide a patch it as a warmup. &lt;/p&gt;

&lt;p&gt;My plan is to add a new HConnectionManager::locateRegionInMeta() which is dedicated for .META. table. It keeps the features of the original version (locate region for a table+row pair), in addition it puts all this table&apos;s region info to local cache by usig MetaScanner. &lt;/p&gt;</comment>
                            <comment id="12866787" author="stack" created="Wed, 12 May 2010 23:47:56 +0000"  >&lt;p&gt;Bulk move of 0.20.5 issues into 0.21.0 after vote that we merge branch into TRUNK up on list.&lt;/p&gt;</comment>
                            <comment id="12870200" author="mingjielai" created="Fri, 21 May 2010 22:24:52 +0000"  >
&lt;p&gt;Basic ideas:&lt;br/&gt;
1. At o.a.h.h.client.HConnectionManager.locateRegionInMeta(), prefetch certain number of table regions in global region loc cache when scanning META, instead of only caching the desired queried table+row region. &lt;br/&gt;
2. For a fresh table load, &lt;b&gt;all&lt;/b&gt; region locations of the table will be prefetched/cached. While after initialization, each miss could fetch ahead some number of rows from META. &lt;/p&gt;

&lt;p&gt;Patched files:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;o.a.h.h.client.HConnectionManager: added a new method to perform META table prewarm.&lt;/li&gt;
	&lt;li&gt;o.a.h.h.client.MetaScanner: overloaded MetaScanner.metaScan, to support scanning meta table within certain steps:&lt;br/&gt;
    public static void metaScan(HBaseConfiguration configuration,&lt;br/&gt;
      MetaScannerVisitor visitor, byte[] tableName, int rowLimit) &lt;/li&gt;
	&lt;li&gt;o.a.h.h.client.TestFromClientSide: added a test case for region cache&lt;br/&gt;
prewarm. &lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Potential issues:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;o.a.h.h.client.HTable constructor triggers the cache prewarm right now, by calling HConnection.locateRegion(). I was suggested to defer calling locateRegion() from HTable constructor, but some of existing unit test cases failed because they implicitly rely on the constructor to do something, i.e., waiting for a table to be fully created after a table creation.&lt;/li&gt;
	&lt;li&gt;For 2, ``each miss could fetch ahead some number of rows&apos;&apos;: right now, this number is hard-coded as 10. Is it necessary to make it configurable?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12870202" author="mingjielai" created="Fri, 21 May 2010 22:28:16 +0000"  >&lt;p&gt;Patch &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12445217/HBASE-2468-trunk.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12445217/HBASE-2468-trunk.patch&lt;/a&gt; passed all unit tests locally for me. &lt;/p&gt;</comment>
                            <comment id="12870215" author="streamy" created="Fri, 21 May 2010 23:06:19 +0000"  >&lt;p&gt;I&apos;m unsure if I like the approach of aggressively pre-warming though you don&apos;t ask for it (prefetch on HTable instantiation, and auto look-ahead in locateRegionInMeta)&lt;/p&gt;

&lt;p&gt;I think I would prefer adding an additional constructor w/ a warm boolean to determine whether META should be warmed for that table or not.&lt;/p&gt;

&lt;p&gt;I don&apos;t quite understand the prefetching in locateRegionInMeta().  If you want to pre-cache meta, you should warm the HTable on construction.  Is this to try to update neighboring regions in case they got stale?  Since 10 seems arbitrary, if we do have this behavior it should probably be configurable.&lt;/p&gt;

&lt;p&gt;Grabbing 9 extra rows could incur several additional block reads across multiple files.  It would also eliminate any chances of using blooms or other optimizations if the META retrievals were never single row reads.  So there is a cost to this being the default behavior.&lt;/p&gt;

&lt;p&gt;Otherwise the patch itself looks good.  I&apos;m in the process of changing MetaScanner a bit for some master stuff but should be okay.&lt;/p&gt;

&lt;p&gt;Good stuff, this has been a long-desired feature!&lt;/p&gt;</comment>
                            <comment id="12870235" author="apurtell" created="Sat, 22 May 2010 00:05:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m unsure if I like the approach of aggressively pre-warming though you don&apos;t ask for it (prefetch on HTable instantiation, and auto look-ahead in locateRegionInMeta&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is what this issue is asking for as I read it. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think I would prefer adding an additional constructor w/ a warm boolean to determine whether META should be warmed for that table or not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That makes sense to me as long as the boolean defaults to &lt;em&gt;true&lt;/em&gt;. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I don&apos;t quite understand the prefetching in locateRegionInMeta(). If you want to pre-cache meta, you should warm the HTable on construction. Is this to try to update neighboring regions in case they got stale? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If the cache misses if due to a split, scanning forward a couple of entries has a reasonable chance of picking up related changes. Should be less than 10. 1? 2? &lt;/p&gt;</comment>
                            <comment id="12870241" author="streamy" created="Sat, 22 May 2010 00:21:51 +0000"  >&lt;p&gt;IMO this jira is about adding functionality not necessarily changing the default functionality.  I think non-warming, non-prefetching clients should still be possible, if not default.  Seems odd to make a big change that all of a sudden doing your existing new HTable(name) could possibly result in the scan of potentially thousands of rows or more and now you need concept of preventing this from happening.&lt;/p&gt;

&lt;p&gt;If a split, scanning forward one row gives you 50% chance of also finding the second half of split, don&apos;t see what going further than that would give you.  This would be at the cost of single-row optimizations that are possible.  Going forward one extra row sounds reasonable to me but again it&apos;s not with impact so should be optional.&lt;/p&gt;</comment>
                            <comment id="12870261" author="tlipcon" created="Sat, 22 May 2010 02:14:35 +0000"  >&lt;p&gt;I agree with Jonathan that the &quot;prefetch entire META&quot; should be optional, default false. If we anticipate multi-hundred-TB tables, we&apos;re talking on the order of 100K regions at least, and a full scan is quite expensive. For long-running access it can sometimes make sense, but for other cases it certainly does not. I would prefer it to be a call like table.prefetchRegionLocations() or something.&lt;/p&gt;

&lt;p&gt;Regarding the fetch-ahead of META, it seems to make sense to scan forward a couple rows by default if we can measure that there isn&apos;t much extra cost. In addition to the split scenario, it will help for the case of longer scans which are quite likely to cross regions. But again, it should be configurable.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;context: haven&amp;#39;t had a chance to look at the patch yet!&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="12870321" author="stack" created="Sat, 22 May 2010 21:35:52 +0000"  >&lt;p&gt;I&apos;m for default behavior being grabbing more than just the one row &amp;#8211; ten or something.  Regards full-table scan as default, I think it should be an option (Its a nice option to have).&lt;/p&gt;

&lt;p&gt;On code, here&apos;s some comments (Congrats Mingjie on first submission):&lt;/p&gt;

&lt;p&gt;Change&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.preFetchRegionLimit = 10; 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;.. to be&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.preFetchRegionLimit = conf.getInt(&lt;span class=&quot;code-quote&quot;&gt;&quot;hbase.client.prefetch.limit&quot;&lt;/span&gt;, 10); 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IMO, never hardcode things like this, and IMO, you don&apos;t need to put the config out in the hbse-default.xml.... just do the above.  Someone who really needs to change it can read code and figure its possible.  If it becomes a popular change people make, then we can move it out to hbase-default.xml.&lt;/p&gt;

&lt;p&gt;Regards methods that you only call from a unit test, should they be package protected rather than protected; i.e. narrower access than protected?&lt;/p&gt;

&lt;p&gt;Nit.  You don&apos;t need to explain in unit test javadoc why the fix: e.g.:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+   * This fix is provided to prevent potential storm of META reads &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; a 
+   * very large table.  
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Otherwise, patch looks great.&lt;/p&gt;</comment>
                            <comment id="12870326" author="apurtell" created="Sat, 22 May 2010 22:27:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;I agree with Jonathan that the &quot;prefetch entire META&quot; should be optional, default false. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well you are the reporter so I will defer to that, though the issue description implies otherwise to me. &lt;/p&gt;




</comment>
                            <comment id="12870328" author="apurtell" created="Sat, 22 May 2010 22:33:15 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I agree with Jonathan that the &quot;prefetch entire META&quot; should be optional, default false. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well you are the reporter so I will defer to that, though the issue description implies otherwise to me. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just caught the &quot;&lt;em&gt;entire&lt;/em&gt;&quot; META. I&apos;m not suggesting prefetch of entire META, the fetch should just be of the rows involving the table. &lt;/p&gt;

&lt;p&gt;The patch only does a prefetch for the rows involving the table being opened. I believe this is the desired behavior. Why should it be false?&lt;/p&gt;




</comment>
                            <comment id="12870329" author="stack" created="Sat, 22 May 2010 22:36:18 +0000"  >&lt;p&gt;@Andrew Todd was author of the original description.  Its not explicit about whether prewarm is optional or not.  Sorry for any confusion.&lt;/p&gt;</comment>
                            <comment id="12870330" author="streamy" created="Sat, 22 May 2010 22:39:35 +0000"  >&lt;p&gt;A single table could be made up of many thousands even hundreds of thousands of regions?  It could be significant.  Even if 1000 regions it could add a huge overhead to instantiating an HTable a user may only use for a single Get.&lt;/p&gt;

&lt;p&gt;As for the look-ahead, I think it makes sense if there is a cached value that gets evicted to do a look-ahead of an extra row so you have a good chance of picking up the other side of a split.  Beyond that, I don&apos;t think it&apos;s a good idea to add a default overhead because this fetch is likely blocking a user data request waiting for a region to open and refresh the location from meta.&lt;/p&gt;

&lt;p&gt;I love these features and have wanted them for a while.  Just don&apos;t think we should change default HTable behavior significantly.&lt;/p&gt;</comment>
                            <comment id="12870331" author="stack" created="Sat, 22 May 2010 22:43:07 +0000"  >&lt;p&gt;Hmm... if you can&apos;t scan the whole table, then this patch gets more complicated I believe.   You&apos;ll need to prefix the scan with a getClosestsRowBefore to find where to start the short scan of the next N items.  Also, the way that rowUpperLimit works in this patch seems like it might be broke.  We&apos;ll only ever get the first rowUpperLimit items in the table... is that right?&lt;/p&gt;</comment>
                            <comment id="12870332" author="apurtell" created="Sat, 22 May 2010 22:44:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;A single table could be made up of many thousands even hundreds of thousands of regions? It could be significant. Even if 1000 regions it could add a huge overhead to instantiating an HTable a user may only use for a single Get.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes but this issue talks about a more likely use case, where someone runs a MR job over a table and causes a storm of individual Gets to META. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I love these features and have wanted them for a while. Just don&apos;t think we should change default HTable behavior significantly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Then for the general case that&apos;s fine but TIF and TOF should set some flag to true which causes the prefetch on open to kick in. Reasonable?&lt;/p&gt;</comment>
                            <comment id="12870333" author="streamy" created="Sat, 22 May 2010 22:49:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;Then for the general case that&apos;s fine but TIF and TOF should set some flag to true which causes the prefetch on open to kick in. Reasonable?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That sounds completely reasonable.  Along the same lines as doing things like disabling block cache or increasing scanner caching.&lt;/p&gt;</comment>
                            <comment id="12870334" author="tlipcon" created="Sat, 22 May 2010 23:02:20 +0000"  >&lt;p&gt;For TIF, I don&apos;t see any reason to prefetch meta. Each mapper taking &lt;b&gt;input&lt;/b&gt; from a table accesses only a small subset of regions, and scanning the whole thing is total overkill.&lt;/p&gt;

&lt;p&gt;For TOF, or jobs that simply access HBase but don&apos;t use either of our provided output formats, having a prewarmed meta cache is primarily avoid DDOSing the META server. On a 500 node MR cluster, you might well have 4000 mappers start within the period of just a few seconds and overwhelm META pretty fast. This is a real use case for many people - imagine storing a dimension table in HBase and doing a hash join against it from a MR job processing many TB of logs.&lt;/p&gt;

&lt;p&gt;So, for the MR case, I think we should provide the option to serialize META to disk, put it in the DistributedCache, and then prewarm the meta cache from there. This would reduce number of mappers actually hitting META to nearly 0.&lt;/p&gt;

&lt;p&gt;Doing a scan of META to fetch &lt;b&gt;all&lt;/b&gt; rows for this table, though, probably makes the problem even worse, especially for jobs that only access a subset of the content.&lt;/p&gt;

&lt;p&gt;My opinions are that we should:&lt;br/&gt;
a) prefetch ahead a few rows on any META miss, since it will fill the cache up faster and catch split children. Perhaps we can do a benchmark to see whether a 10-row scan is any harder to service than a 2-row scan - my hunch is that the load on the server is mostly dominated by constant time, so we may as well scan ahead a bit.&lt;br/&gt;
b) allow the &lt;b&gt;option&lt;/b&gt; to fetch a row range (which includes the full table range) into the cache. This could be used in startup of long-running processes (eg the thrift gateway or stargate may prefer to warm up its cache before it starts accepting any user requests). This should not be default. I think of this as the equivalent of posix_fadvise(..., POSIX_FADV_WILLNEED). Providing the API as a range will also allow us to do it for multiregion scans, etc.&lt;br/&gt;
c) allow the option to serialize meta rows into a sequencefile and then load them back. This provides the improvement I mentioned above for large MR jobs randomly accessing a cluster. &lt;/p&gt;

&lt;p&gt;I see the above 3 things as separate tasks. It sounds like the current patch can do the first of the three, so maybe we should separate that out, get it committed, and then move on to b and c?&lt;/p&gt;</comment>
                            <comment id="12870340" author="stack" created="Sat, 22 May 2010 23:59:24 +0000"  >&lt;p&gt;If we had hbase-2600, this&apos;d be easy to do.&lt;/p&gt;</comment>
                            <comment id="12870441" author="apurtell" created="Sun, 23 May 2010 18:35:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;For TIF, I don&apos;t see any reason to prefetch meta. Each mapper taking &lt;b&gt;input&lt;/b&gt; from a table accesses only a small subset of regions, and scanning the whole thing is total overkill&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, good point. I was just generally talking about Table*Format so muddied the waters.&lt;/p&gt;

&lt;p&gt;Your option B is the use case most interesting IMHO but not just long lived clients would benefit; any client writing a reasonable amount of data with well distributed keys would get off the ground faster while being more efficient about META accesses.&lt;/p&gt;

&lt;p&gt;So the current patch can 1) prefetch ahead a few rows on META miss and 2) can be reworked slightly to provide clients an option for preloading region locations for a table from META. I suggest we get the current patch cleaned up and committed as something which can optionally be enabled for a table:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
HTable table = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HTable(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;);
table.setLocationPrefetch(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Prefetch would scan ahead some small configurable number of rows upon cache miss as is discussed in comments above.&lt;/p&gt;

&lt;p&gt;Additionally, we could add &lt;tt&gt;HTable#setRegionsInfo(Map&amp;lt;HRegionInfo,HServerAddress&amp;gt; regionMap)&lt;/tt&gt;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// getRegionsInfo does not update the region location cache &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the table
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// we don&apos;t want to change that
&lt;/span&gt;Map&amp;lt;HRegionInfo,HServerAddress&amp;gt; regionMap = table.getRegionsInfo();
&lt;span class=&quot;code-comment&quot;&gt;// but we can use the result to &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; so at the client&apos;s option
&lt;/span&gt;table.setRegionsInfo(regionMap);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Regarding whether or not to prefetch all region info for a table when starting a MR job, anticipating it would be a toggle, if the default is &apos;true&apos; I think this would help common cases especially encountered by newcomers if TOF did that but could/should always be turned off if the operator is running jobs with high frequency/concurrency (so only some limited readahead on miss would be active then). But I do think this is a better idea:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So, for the MR case, I think we should provide the option to serialize META to disk, put it in the DistributedCache, and then prewarm the meta cache from there.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Serialize the result of HTable#getRegionsInfo when setting up the job (in &lt;tt&gt;TableMapReduceUtil&lt;/tt&gt;). Load from DistributedCache and pass to HTable#setRegionsInfo in TOF is jobconf indicates it is available. &lt;/p&gt;</comment>
                            <comment id="12870472" author="hbasereviewboard" created="Sun, 23 May 2010 22:41:23 +0000"  >&lt;p&gt;Message from: &quot;Todd Lipcon&quot; &amp;lt;todd@cloudera.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/78/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Posting review board for this JIRA on behalf of Mingjie Lai&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2468&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2468&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java 09de2ac &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java 3de661e &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java 95e494a &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/78/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Todd&lt;/p&gt;

</comment>
                            <comment id="12870652" author="stack" created="Mon, 24 May 2010 15:55:14 +0000"  >&lt;p&gt;I already posted a review above &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468?focusedCommentId=12870321&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12870321&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2468?focusedCommentId=12870321&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12870321&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12870886" author="mingjielai" created="Mon, 24 May 2010 22:34:42 +0000"  >
&lt;p&gt;Thanks for your responses. Based on the discussions especially what were suggected by Todd and Andrew, here are my new proposal to address this issue. &lt;/p&gt;

&lt;p&gt;0) (The biggest argument is regarding whole cache prewarm when table initialization. So it won&apos;t be supported any more. )&lt;/p&gt;

&lt;p&gt;1) Give clients the option to warm the cache for &lt;b&gt;each table&lt;/b&gt;. New interfaces are provided to enable/disable cache prefetch in case of a cache miss. &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; HConnection {
  &lt;span class=&quot;code-comment&quot;&gt;// ... 
&lt;/span&gt;
  /**
   * Enable or disable region cache prewarm &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the &amp;lt;i&amp;gt;tableName&amp;lt;/i&amp;gt;. 
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setRegionCachePreWarm(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] tableName, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; enable); 

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; getRegionCachePreWarm(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] tableName); 
}

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class HTable &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; HTableInterface {
  &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt;  &lt;span class=&quot;code-comment&quot;&gt;//
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; isRegionCachePreWarmEnabled; &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;; 
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setRegionCachePreWarm(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; enable) {
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.isRegionCachePreWarmEnabled = enable; 
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.connection.setRegionCachePreWarm(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.tableName, 
        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.isRegionCachePreWarmEnabled);
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; getRegionCachePreWarm() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.connection.getRegionCachePreWarm(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.tableName);
  } 
}

HTable t1 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HTable(&lt;span class=&quot;code-quote&quot;&gt;&quot;foo&quot;&lt;/span&gt;);
t1.setRegionCachePreWarm(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;); 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;2) Prefetch a certain number of regions locations on cache miss when performing location lookup. (This piece has been implemented in the previous patch except configurable readahead number)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// HConnectionManager.TableServer
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.preFetchRegionLimit = conf.getInt(&lt;span class=&quot;code-quote&quot;&gt;&quot;hbase.client.prefetch.limit&quot;&lt;/span&gt;, 10);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3) Serialize META to disk, put it in the DistributedCache, and then prewarm the meta cache from there. &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// getRegionsInfo does not update the region location cache &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the table
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// we don&apos;t want to change that
&lt;/span&gt;Map&amp;lt;HRegionInfo,HServerAddress&amp;gt; regionMap = table.getRegionsInfo();

&lt;span class=&quot;code-comment&quot;&gt;// added: 
&lt;/span&gt;table.serizlizeRegionInfo(regionMap);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// added: deserialize region info from DC
&lt;/span&gt;regionMap = table.deserizlizeRegionInfo();

&lt;span class=&quot;code-comment&quot;&gt;// added: regionMap will be set to HConnectionManager region cache. 
&lt;/span&gt;table.setRegionsInfo(regionMap);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;Please help to review and provide your feedback. If there is no objection, I will provide a new patch based on the proposal. &lt;/p&gt;</comment>
                            <comment id="12873071" author="hbasereviewboard" created="Fri, 28 May 2010 17:34:39 +0000"  >&lt;p&gt;Message from: &quot;Mingjie Lai&quot; &amp;lt;mjlai09@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;: Improvements to prewarm META cache on clients.&lt;/p&gt;

&lt;p&gt;Changes:&lt;br/&gt;
1. Add new HTable methods which support region info de/serialation, and region cache prewarm: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;void serializeRegionInfo(): clients could perform a large scan for all the meta for the table, serialize the meta to a file. MR job can ship a copy of the meta for the table in the DistributedCache&lt;/li&gt;
	&lt;li&gt;Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; deserializeRegionInfo(): MR job can deserialize the region info from the DistributedCache&lt;/li&gt;
	&lt;li&gt;prewarmRegionCache(Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; regionMap): MR job can prewarm local region cache by the deserialized region info.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2. For each client, each region cache read-miss could trigger read-ahead some number of rows in META. This option could be turned on and off for one particular table. &lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2468&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2468&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/client/HConnection.java 853164d &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java 09de2ac &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HTable.java 7ec95cb &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java 3de661e &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java 95e494a &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/98/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Unit tests passed locally for me. &lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Mingjie&lt;/p&gt;

</comment>
                            <comment id="12873079" author="hbasereviewboard" created="Fri, 28 May 2010 17:58:42 +0000"  >&lt;p&gt;Message from: &quot;Benoit Sigoure&quot; &amp;lt;tsunanet@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/78/#review91&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#review91&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment515&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment515&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Remove the spurious spaces around the parenthesis.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment516&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment516&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    No space before `[]&apos; on this line and the previous line.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment517&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment517&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Move the declaration of this variable to line 675 where it&apos;s initialized.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment518&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment518&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I&apos;m not sure I understand this comment but it could be because I&apos;m not very familiar with this part of the code.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment519&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment519&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Do this instead:&lt;/p&gt;

&lt;p&gt;    if (value == null) &lt;/p&gt;
{
      return true;  // don&apos;t cache it
    }
&lt;p&gt;    final String serverAddress = Bytes.toString(value);&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment520&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment520&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I don&apos;t understand the last part of the comment (&quot;fetch ahead number of rows in META&quot;).&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment521&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment521&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    No space before `[]&apos;.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment522&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment522&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Wrap the `else&apos; on the previous line.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment523&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment523&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Instead of doing `+ e.getMessage()&apos;, pass `e&apos; in second argument.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment524&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment524&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    No space before `[]&apos;.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment525&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment525&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Remove the second part of the check (tableLogs.values() == null).  This can&apos;t happen.  If it happens, there&apos;s a bug in SoftValueSortedMap and we shouldn&apos;t hide it.&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/78/#comment526&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#comment526&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    No space before `[]&apos;.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Benoit&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12873138" author="hbasereviewboard" created="Fri, 28 May 2010 20:22:39 +0000"  >&lt;p&gt;Message from: &quot;Mingjie Lai&quot; &amp;lt;mjlai09@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-05-28 13:20:33.843332)&lt;/p&gt;


&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Improved a little, to address the comments from Benoit Sigoure, at &lt;a href=&quot;http://review.hbase.org/r/78/#review91&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/78/#review91&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;: Improvements to prewarm META cache on clients.&lt;/p&gt;

&lt;p&gt;Changes:&lt;br/&gt;
1. Add new HTable methods which support region info de/serialation, and region cache prewarm: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;void serializeRegionInfo(): clients could perform a large scan for all the meta for the table, serialize the meta to a file. MR job can ship a copy of the meta for the table in the DistributedCache&lt;/li&gt;
	&lt;li&gt;Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; deserializeRegionInfo(): MR job can deserialize the region info from the DistributedCache&lt;/li&gt;
	&lt;li&gt;prewarmRegionCache(Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; regionMap): MR job can prewarm local region cache by the deserialized region info.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2. For each client, each region cache read-miss could trigger read-ahead some number of rows in META. This option could be turned on and off for one particular table. &lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2468&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2468&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/client/HConnection.java 853164d &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java 09de2ac &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HTable.java 7ec95cb &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java 3de661e &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java 95e494a &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/98/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Unit tests passed locally for me. &lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Mingjie&lt;/p&gt;

</comment>
                            <comment id="12873150" author="hbasereviewboard" created="Fri, 28 May 2010 21:14:31 +0000"  >&lt;p&gt;Message from: &quot;Benoit Sigoure&quot; &amp;lt;tsunanet@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review93&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review93&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnection.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment531&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment531&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Properly document this argument.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment534&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment534&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Please use a concurrent collection and remove the synchronized blocks.  For guidance, see around slide 30 of this presentation:&lt;br/&gt;
    &lt;a href=&quot;http://www.cs.umd.edu/class/fall2009/cmsc132H/slides/still-effective.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.cs.umd.edu/class/fall2009/cmsc132H/slides/still-effective.pdf&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment532&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment532&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Coding style: put the catch on the previous line.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment533&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment533&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    We don&apos;t typically call methods using `this.methodname(args)&apos; &#8211; remove the `this.&apos;&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment535&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment535&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Add a space before the `:&apos;.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment536&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment536&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Use `Boolean.TRUE&apos; instead of `new Boolean(true)&apos;.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment537&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment537&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Use `Boolean.FALSE&apos; instead of `new Boolean(false)&apos;.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment538&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment538&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Use `Boolean.TRUE&apos; instead of `new Boolean(true)&apos;.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment539&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment539&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Remove the outer parentheses.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment540&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment540&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Add a space before the `:&apos;.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment541&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment541&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    If this fits on the previous line while staying under 80 columns, please wrap it around.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment542&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment542&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Remove the space after `cacheLocation&apos;&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment546&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment546&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Use &lt;/p&gt;
{@link #readFields readFields}
&lt;p&gt; instead of &amp;lt;code&amp;gt;readFields&amp;lt;/code&amp;gt;&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment544&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment544&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    You can remove this &amp;lt;p&amp;gt;&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment543&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment543&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Use &amp;lt;pre&amp;gt; not &amp;lt;code&amp;gt;&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment545&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment545&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Add a space before the `:&apos;.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment547&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment547&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Use &lt;/p&gt;
{@link #getRegionsInfo getRegionsInfo}



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment548&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment548&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Use &lt;/p&gt;
{@link ...}
&lt;p&gt; here and below.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment550&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment550&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Wrap this around with the previous line.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment549&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment549&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I believe you can remove this block.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Benoit&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12873159" author="hbasereviewboard" created="Fri, 28 May 2010 22:00:36 +0000"  >&lt;p&gt;Message from: &quot;Ryan Rawson&quot; &amp;lt;ryanobjc@gmail.com&amp;gt;&lt;/p&gt;


</comment>
                            <comment id="12873162" author="hbasereviewboard" created="Fri, 28 May 2010 22:06:27 +0000"  >&lt;p&gt;Message from: &quot;Ryan Rawson&quot; &amp;lt;ryanobjc@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review95&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review95&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment553&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment553&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    What does this method actually do? If its a predicate start it with &apos;is&apos;.  Also precaching should be off by default...&lt;br/&gt;
     Is it?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ryan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12873849" author="hbasereviewboard" created="Tue, 1 Jun 2010 01:17:38 +0000"  >&lt;p&gt;Message from: &quot;Mingjie Lai&quot; &amp;lt;mjlai09@gmail.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-05-28 15:05:08, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java, line 1604&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/3/?file=741#file741line1604&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/3/?file=741#file741line1604&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     What does this method actually do? If its a predicate start it with &apos;is&apos;.  Also precaching should be off by default...&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;      Is it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Will add ``is&apos;&apos; prefix to this method. &lt;/p&gt;

&lt;p&gt;Pre-caching (in case of a cache miss) is set to ``on&apos;&apos; by default right now, according to stack:&lt;/p&gt;

&lt;p&gt;``I&apos;m for default behavior being grabbing more than just the one row &#8211; ten or something. Regards full-table scan as default, I think it should be an option (Its a nice option to have). &apos;&apos;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468?focusedCommentId=12870321&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12870321&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2468?focusedCommentId=12870321&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12870321&lt;/a&gt;&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mingjie&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review95&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review95&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12873861" author="hbasereviewboard" created="Tue, 1 Jun 2010 02:50:30 +0000"  >&lt;p&gt;Message from: &quot;Mingjie Lai&quot; &amp;lt;mjlai09@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-05-31 19:49:20.012863)&lt;/p&gt;


&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Improved to address comments from tsuna, Paul Crown, and jdcryans. &lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;: Improvements to prewarm META cache on clients.&lt;/p&gt;

&lt;p&gt;Changes:&lt;br/&gt;
1. Add new HTable methods which support region info de/serialation, and region cache prewarm: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;void serializeRegionInfo(): clients could perform a large scan for all the meta for the table, serialize the meta to a file. MR job can ship a copy of the meta for the table in the DistributedCache&lt;/li&gt;
	&lt;li&gt;Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; deserializeRegionInfo(): MR job can deserialize the region info from the DistributedCache&lt;/li&gt;
	&lt;li&gt;prewarmRegionCache(Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; regionMap): MR job can prewarm local region cache by the deserialized region info.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2. For each client, each region cache read-miss could trigger read-ahead some number of rows in META. This option could be turned on and off for one particular table. &lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2468&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2468&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/client/HConnection.java 853164d &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java 09de2ac &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HTable.java 7ec95cb &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java 3de661e &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java 95e494a &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/98/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Unit tests passed locally for me. &lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Mingjie&lt;/p&gt;

</comment>
                            <comment id="12873880" author="hbasereviewboard" created="Tue, 1 Jun 2010 04:53:27 +0000"  >&lt;p&gt;Message from: &quot;Todd Lipcon&quot; &amp;lt;todd@cloudera.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review107&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review107&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment635&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment635&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    typo: locationS&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment633&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment633&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I think any of getCachedRegionCount, countCachedRegions, or getNumCachedRegions would be a clearer name.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment634&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment634&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    style-wise, why &quot;final&quot; here?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment636&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment636&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    remove these @param javadocs - they just take up space if the param names are self-explanatory (which these are)&lt;/p&gt;

&lt;p&gt;    same thing above&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment637&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment637&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this needs a Comparator argument, otherwise it does object identity rather than bytewise comparison of the table names&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment640&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment640&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    javadoc out of date - it prefetches the region for the given row, and prefetchLimit regions ahead&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment638&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment638&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    should return false to stop scanning at this point, right?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment639&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment639&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    // cache this meta entry&lt;/p&gt;

&lt;p&gt;    (it&apos;s not caching all)&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment641&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment641&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this block should go after the cache check below, right?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment647&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment647&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    this function needs to synchronized on cachedRegionLocations which is an unsynchronized HashMap&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment648&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment648&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    return location != null;&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment654&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment654&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    kill this function&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment649&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment649&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    you should prefix the file with writeInt(allRegions.size()) so you don&apos;t have to use EOFException catching below&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment650&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment650&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    yuck, see above&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment651&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment651&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I feel like it would be cleaner to have the following methods be non-static, so they don&apos;t need any arguments. that would reduce the number of functions by factor of two&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment653&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment653&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    incorrect javadoc, also a few places below&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment652&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment652&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    why do we need a separate function for enabled and disabled? aren&apos;t they always inverse of each other?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment642&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment642&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    should make clear this is the row name in the user table, not the meta table.&lt;/p&gt;

&lt;p&gt;    should also be clarified that it will start scanning with the region &lt;b&gt;after&lt;/b&gt; row, because it doesn&apos;t use getClosestRowBefore&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment643&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment643&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    useless @throws&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment645&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment645&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    you should use util.getTestDir here&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment644&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment644&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    import java.io.File&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment646&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment646&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I really like these unit tests, but I think you should use a row key for the Get that isn&apos;t also a region start key, as it may expose different behavior. eg I think you will end up with 11 cached regions instead of 10&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Todd&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12874492" author="hbasereviewboard" created="Wed, 2 Jun 2010 08:13:35 +0000"  >&lt;p&gt;Message from: &quot;Mingjie Lai&quot; &amp;lt;mjlai09@gmail.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-05-31 21:52:12, Todd Lipcon wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/client/HTable.java, line 1075&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/4/?file=872#file872line1075&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/4/?file=872#file872line1075&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I feel like it would be cleaner to have the following methods be non-static, so they don&apos;t need any arguments. that would reduce the number of functions by factor of two&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That was what I wanted to do in the very beginning. I don&apos;t like so many functions either.  &lt;/p&gt;

&lt;p&gt;But there is one existing method: &lt;br/&gt;
  public static boolean isTableEnabled(String tableName) ...&lt;br/&gt;
  public static boolean isTableEnabled(Configuration conf, String tableName) ...&lt;/p&gt;

&lt;p&gt;It&apos;s one of the reason that I just want to keep the original coding style to be consistent. &lt;/p&gt;

&lt;p&gt;In addition, I agree we can make isRegionCachePrefetchEnabled() etc. to be non-static. However, enableRegionCachePrefetch(), and disableRegionCachePrefetch() must to be static since we want to enable/disable a table without instantiate HTable. In another word, we cannot really dis/enable cache prefetch for each HTable instance who have the same table name. While we can only enable/disable based on table name. It is pretty similar as table enable/disable. &lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-05-31 21:52:12, Todd Lipcon wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java, line 1608&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/4/?file=871#file871line1608&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/4/?file=871#file871line1608&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     kill this function&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t like it either. I will kill all ``is...Disabled()&apos;&apos; methods. &lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-05-31 21:52:12, Todd Lipcon wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java, line 3639&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/4/?file=874#file874line3639&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/4/?file=874#file874line3639&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I really like these unit tests, but I think you should use a row key for the Get that isn&apos;t also a region start key, as it may expose different behavior. eg I think you will end up with 11 cached regions instead of 10&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As mentioned above, I reimplemented MetaScanner so it will start scanning Meta from the region row where the given table row resides, instead of scanning from the next region row in Meta. HTable.getRowOrBefore() is called in MetaScanner to achieve it, (however I&apos;m not very sure whether it is the most efficient way to do it or not). &lt;/p&gt;

&lt;p&gt;So for this unit test, no matter the passed row is a region start key or not, we will always get 10 here. &lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-05-31 21:52:12, Todd Lipcon wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java, lines 776-781&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/4/?file=871#file871line776&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/4/?file=871#file871line776&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     this block should go after the cache check below, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I reimplemented MetaScanner so it will start scanning Meta from the region where the given user table row resides, instead of scanning from the next region row in Meta.&lt;/p&gt;

&lt;p&gt;In this case, prefetchRegionCache() also fetches the queried table+row to the cache. Here I put it before the cache check block, so it can load the result from cache directly. Otherwise it may do an extra meta scan if cache prefetch is enabled. &lt;/p&gt;

&lt;p&gt;However if multiple threads accessing this block concurrently, this way will cause cache-prefetch executed twice. But I think this case is pretty rare, so the penalty should be relatively smaller. &lt;/p&gt;

&lt;p&gt;What do you think? &lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mingjie&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review107&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review107&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12874494" author="hbasereviewboard" created="Wed, 2 Jun 2010 08:15:27 +0000"  >&lt;p&gt;Message from: &quot;Mingjie Lai&quot; &amp;lt;mjlai09@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-06-02 01:13:42.272750)&lt;/p&gt;


&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;1. Fix some issues pointed out by Todd.&lt;br/&gt;
2. Re-do MetaScanner so it will start scanning Meta from the region where the given user table row resides, instead of scanning from the next region row in Meta.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;: Improvements to prewarm META cache on clients.&lt;/p&gt;

&lt;p&gt;Changes:&lt;br/&gt;
1. Add new HTable methods which support region info de/serialation, and region cache prewarm: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;void serializeRegionInfo(): clients could perform a large scan for all the meta for the table, serialize the meta to a file. MR job can ship a copy of the meta for the table in the DistributedCache&lt;/li&gt;
	&lt;li&gt;Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; deserializeRegionInfo(): MR job can deserialize the region info from the DistributedCache&lt;/li&gt;
	&lt;li&gt;prewarmRegionCache(Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; regionMap): MR job can prewarm local region cache by the deserialized region info.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2. For each client, each region cache read-miss could trigger read-ahead some number of rows in META. This option could be turned on and off for one particular table. &lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2468&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2468&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/client/HConnection.java 853164d &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java ed18092 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HTable.java 7ec95cb &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java d3a0c07 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java 95e494a &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/98/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Unit tests passed locally for me. &lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Mingjie&lt;/p&gt;

</comment>
                            <comment id="12876428" author="hbasereviewboard" created="Mon, 7 Jun 2010 21:25:51 +0000"  >&lt;p&gt;Message from: stack@duboce.net&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review144&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review144&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;


&lt;p&gt;I think this good to go.  Seem my comments below.  See what you think.  My one concern is the number of calls to getRowOrBefore... hopefully this patch cuts down overall on our need to use this function.  I&apos;d like to hear your opinion on that.&lt;/p&gt;


&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment744&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment744&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    This is code duplicated from elsewhere.  Can I help make it so we don&apos;t have to do this duplication?  Or, for now, since this your fist patch, we can put it off IF you file a JIRA to fix the duplication (smile).&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment745&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment745&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    So we start scanning at &apos;row&apos;?  Is this the &apos;row&apos; the user asked for? No, it needs to be the row in the .META. table, right?  We need to find the row in .META. that contains the asked for row first?  NM, I see below how the row here is made.. .this looks right.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment746&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment746&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    This is a nice little facility.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment747&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment747&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    OK.  This looks right.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment748&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment748&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    getRowOrBefore is an expensive call.  Are we sure we are not calling this too often?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;stack&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12877244" author="hbasereviewboard" created="Wed, 9 Jun 2010 22:42:05 +0000"  >&lt;p&gt;Message from: &quot;Mingjie Lai&quot; &amp;lt;mjlai09@gmail.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-06-07 14:23:42, stack wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java, line 96&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/5/?file=944#file944line96&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/5/?file=944#file944line96&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     getRowOrBefore is an expensive call.  Are we sure we are not calling this too often?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree it is an expensive call. &lt;/p&gt;

&lt;p&gt;However I don&apos;t think it would bring any performance penalty for existing and potential use cases:&lt;br/&gt;
Use case 1 &amp;#8211; existing MetaScanner users: since this method is newly added, existing users won&apos;t be affected; &lt;br/&gt;
Use case 2 &amp;#8211; hbase clients when locating a region :  &lt;br/&gt;
1) if prefetch is on, it calls this MetaScanner with &lt;span class=&quot;error&quot;&gt;&amp;#91;table + row combination&amp;#93;&lt;/span&gt;, which calls getRowOrBefore() to get current region info, then number of following regions from meta. After that, the client can get the region info directly from cache. &lt;br/&gt;
2) if prefetch is disabled (current behavior), it eventually calls similar method getClosestRowBefore() to get desired region. &lt;/p&gt;

&lt;p&gt;So no matter prefetch is on or not, getRowOrBefore(or getClosestRowBefore) eventually is called. The only difference is whether to scan following regions from meta or not. &lt;/p&gt;

&lt;p&gt;For future MetaScanner users which scan from one region with desired use table row, it has to take the effort since it is the expected behavior. &lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mingjie&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review144&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review144&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12877251" author="hbasereviewboard" created="Wed, 9 Jun 2010 22:53:37 +0000"  >&lt;p&gt;Message from: &quot;Mingjie Lai&quot; &amp;lt;mjlai09@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-06-09 15:50:59.084657)&lt;/p&gt;


&lt;p&gt;Review request for hbase, Todd Lipcon and stack.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;@St^ack: please see my comments for your feedback regarding getRowOrBefore() issue. &lt;/p&gt;

&lt;p&gt;Invite Todd as a reviewer. &lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;: Improvements to prewarm META cache on clients.&lt;/p&gt;

&lt;p&gt;Changes:&lt;br/&gt;
1. Add new HTable methods which support region info de/serialation, and region cache prewarm: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;void serializeRegionInfo(): clients could perform a large scan for all the meta for the table, serialize the meta to a file. MR job can ship a copy of the meta for the table in the DistributedCache&lt;/li&gt;
	&lt;li&gt;Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; deserializeRegionInfo(): MR job can deserialize the region info from the DistributedCache&lt;/li&gt;
	&lt;li&gt;prewarmRegionCache(Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; regionMap): MR job can prewarm local region cache by the deserialized region info.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2. For each client, each region cache read-miss could trigger read-ahead some number of rows in META. This option could be turned on and off for one particular table. &lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2468&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2468&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/client/HConnection.java 853164d &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java ed18092 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HTable.java 7ec95cb &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java d3a0c07 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java 95e494a &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/98/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Unit tests passed locally for me. &lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Mingjie&lt;/p&gt;

</comment>
                            <comment id="12877281" author="hbasereviewboard" created="Thu, 10 Jun 2010 01:09:25 +0000"  >&lt;p&gt;Message from: &quot;Todd Lipcon&quot; &amp;lt;todd@cloudera.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review165&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review165&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;Looking good! Just a few notes.&lt;/p&gt;


&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnection.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment813&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment813&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I thought we were collapsing these two calls into setRegionCachePrefetchEnabled(tableName, enabled)?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment816&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment816&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I don&apos;t entirely understand why we key these hashes by integer, but it seems like you&apos;re following the status quo, so doesn&apos;t need to be addressed in this patch.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment822&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment822&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I still don&apos;t quite understand the logic about why these should be static. Previously you pointed to the enable/disable calls, but those are more like admin calls, not calls that affect client behavior. Anyone else have an opinion?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment823&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment823&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I think this should be Math.max(rowLimit, configuration.getInt(...)) - if we only want to scan 5 rows, we don&apos;t want the scanner to prefetch 100 for us.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Todd&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12877460" author="hbasereviewboard" created="Thu, 10 Jun 2010 15:55:46 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review176&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review176&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;This looks great!  I think we should think more about where to expose this, and also think about using more of a get/set API to reduce the method calls and make it look more like the other client APIs.&lt;/p&gt;


&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HConnection.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment841&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment841&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    +1 on collapsing with a boolean.  setRegionCachePrefetch(table, enable)?  Seems self descriptive and with a couple lines of javadoc should be clear.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment840&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment840&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I guess these are static because of how HTables all share a single HCM per conf.  The setting of prefetching is set at the HCM level not the HTable level, however clients are usually not exposed to HCM and only deal with HTable.&lt;/p&gt;

&lt;p&gt;    We should probably make it clear in the javadoc for these methods that they apply to all HTable instances, though that may be clear from being static.&lt;/p&gt;

&lt;p&gt;    Maybe since these are more advanced calls, they shouldn&apos;t be in HTable?  If we provide proper documentation, it should be easy enough for a user to grab the HCM and apply the config at that level?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment842&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment842&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Should we also make these methods (if we even leave it in HTable) more like setRegionCachePrefetch / getRegionCachePrefetch?  HTable is the core client class so the less noise we add the better.  We have other methods in client APIs of the get/set form like Scan.setCacheBlocks and Put.setWriteToWAL&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/#comment843&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#comment843&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Hmm, wouldn&apos;t that be Math.min then?  If rowLimit = 5 and scanner.caching = 100, we want to only do 5?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12877462" author="hbasereviewboard" created="Thu, 10 Jun 2010 16:02:30 +0000"  >&lt;p&gt;Message from: &quot;Todd Lipcon&quot; &amp;lt;todd@cloudera.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-06-10 08:53:41, Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java, line 109&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/5/?file=944#file944line109&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/5/?file=944#file944line109&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Hmm, wouldn&apos;t that be Math.min then?  If rowLimit = 5 and scanner.caching = 100, we want to only do 5?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;woops, yes &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Todd&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review176&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review176&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12877895" author="stack" created="Fri, 11 Jun 2010 18:09:39 +0000"  >&lt;p&gt;@ Mingjie  Are you going to put up another patch to address the above comments?  If you do I&apos;ll commit it.&lt;/p&gt;
</comment>
                            <comment id="12878103" author="mingjielai" created="Fri, 11 Jun 2010 22:02:43 +0000"  >&lt;p&gt;@stack: Yes, I will create another patch. But before that, I still need to finish the discussion about where to put the static method HTable.setRegionCachePrefetch(table, enable). After we make an agreement it, I will generate a new patch right away.&lt;/p&gt;</comment>
                            <comment id="12878116" author="hbasereviewboard" created="Fri, 11 Jun 2010 22:34:25 +0000"  >&lt;p&gt;Message from: &quot;Mingjie Lai&quot; &amp;lt;mjlai09@gmail.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-06-10 08:53:41, Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/client/HConnection.java, line 235&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/5/?file=941#file941line235&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/5/?file=941#file941line235&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     +1 on collapsing with a boolean.  setRegionCachePrefetch(table, enable)?  Seems self descriptive and with a couple lines of javadoc should be clear.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes sir. will modify to use set...() and get...(). &lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-06-10 08:53:41, Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/client/HTable.java, line 1079&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/5/?file=943#file943line1079&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/5/?file=943#file943line1079&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I guess these are static because of how HTables all share a single HCM per conf.  The setting of prefetching is set at the HCM level not the HTable level, however clients are usually not exposed to HCM and only deal with HTable.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     We should probably make it clear in the javadoc for these methods that they apply to all HTable instances, though that may be clear from being static.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Maybe since these are more advanced calls, they shouldn&apos;t be in HTable?  If we provide proper documentation, it should be easy enough for a user to grab the HCM and apply the config at that level?&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;I guess these are static because of how HTables all share a single HCM per conf...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe since these are more advanced calls, they shouldn&apos;t be in HTable?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Two alternatives:&lt;br/&gt;
1) HCM: as jgray said, ``however clients are usually not exposed to HCM and only deal with HTable.&apos;&apos;&lt;br/&gt;
2) HBaseAdmin: it is a more reasonable design choice since these operation are at HCM level. &lt;br/&gt;
3) or, make it a configuration. It would be one global configuration applied to all tables, and cannot be changed dynamically. &lt;/p&gt;

&lt;p&gt;I like 2) better, but not really sure whether we want to expose it there or not. &lt;/p&gt;

&lt;p&gt;What do you think? &lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mingjie&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review176&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review176&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12878118" author="hbasereviewboard" created="Fri, 11 Jun 2010 22:43:06 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-06-10 08:53:41, Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/client/HTable.java, line 1079&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/5/?file=943#file943line1079&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/5/?file=943#file943line1079&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I guess these are static because of how HTables all share a single HCM per conf.  The setting of prefetching is set at the HCM level not the HTable level, however clients are usually not exposed to HCM and only deal with HTable.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     We should probably make it clear in the javadoc for these methods that they apply to all HTable instances, though that may be clear from being static.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Maybe since these are more advanced calls, they shouldn&apos;t be in HTable?  If we provide proper documentation, it should be easy enough for a user to grab the HCM and apply the config at that level?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Mingjie Lai wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; I guess these are static because of how HTables all share a single HCM per conf...&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Yes. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Maybe since these are more advanced calls, they shouldn&apos;t be in HTable?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Two alternatives:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;1) HCM: as jgray said, ``however clients are usually not exposed to HCM and only deal with HTable.&apos;&apos;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;2) HBaseAdmin: it is a more reasonable design choice since these operation are at HCM level. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;3) or, make it a configuration. It would be one global configuration applied to all tables, and cannot be changed dynamically. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I like 2) better, but not really sure whether we want to expose it there or not. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;What do you think?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Adding it to HBaseAdmin could make sense.  This one is a bit of an odd one because it&apos;s a client-side configuration parameter done at the per-client-jvm level.  Typically we have per-query or per-htable-instance configs.  HBaseAdmin is generally made up of remote administration commands not local client config.&lt;/p&gt;

&lt;p&gt;If we provide sufficient javadoc (including as a class comment on HTable) it doesn&apos;t matter so much where we put it.  Since it&apos;s distinct from what&apos;s currently in HTable and HBaseAdmin, maybe it does make sense as a static in HCM?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review176&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review176&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12878124" author="hbasereviewboard" created="Fri, 11 Jun 2010 23:00:16 +0000"  >&lt;p&gt;Message from: &quot;Todd Lipcon&quot; &amp;lt;todd@cloudera.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-06-10 08:53:41, Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/client/HTable.java, line 1079&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/5/?file=943#file943line1079&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/5/?file=943#file943line1079&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I guess these are static because of how HTables all share a single HCM per conf.  The setting of prefetching is set at the HCM level not the HTable level, however clients are usually not exposed to HCM and only deal with HTable.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     We should probably make it clear in the javadoc for these methods that they apply to all HTable instances, though that may be clear from being static.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Maybe since these are more advanced calls, they shouldn&apos;t be in HTable?  If we provide proper documentation, it should be easy enough for a user to grab the HCM and apply the config at that level?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Mingjie Lai wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; I guess these are static because of how HTables all share a single HCM per conf...&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Yes. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Maybe since these are more advanced calls, they shouldn&apos;t be in HTable?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Two alternatives:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;1) HCM: as jgray said, ``however clients are usually not exposed to HCM and only deal with HTable.&apos;&apos;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;2) HBaseAdmin: it is a more reasonable design choice since these operation are at HCM level. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;3) or, make it a configuration. It would be one global configuration applied to all tables, and cannot be changed dynamically. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I like 2) better, but not really sure whether we want to expose it there or not. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;What do you think?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Adding it to HBaseAdmin could make sense.  This one is a bit of an odd one because it&apos;s a client-side configuration parameter done at the per-client-jvm level.  Typically we have per-query or per-htable-instance configs.  HBaseAdmin is generally made up of remote administration commands not local client config.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;If we provide sufficient javadoc (including as a class comment on HTable) it doesn&apos;t matter so much where we put it.  Since it&apos;s distinct from what&apos;s currently in HTable and HBaseAdmin, maybe it does make sense as a static in HCM?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think keeping HConnectionManager an internal interface is a good idea, so kind of -0 there. -1 on HBaseAdmin, since we should keep that for administrative functions that really change something on the cluster. So I&apos;d prefer HTable, but wouldn&apos;t cry over HCM.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Todd&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review176&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review176&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12878137" author="hbasereviewboard" created="Fri, 11 Jun 2010 23:29:00 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-06-10 08:53:41, Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/client/HTable.java, line 1079&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/98/diff/5/?file=943#file943line1079&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff/5/?file=943#file943line1079&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I guess these are static because of how HTables all share a single HCM per conf.  The setting of prefetching is set at the HCM level not the HTable level, however clients are usually not exposed to HCM and only deal with HTable.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     We should probably make it clear in the javadoc for these methods that they apply to all HTable instances, though that may be clear from being static.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Maybe since these are more advanced calls, they shouldn&apos;t be in HTable?  If we provide proper documentation, it should be easy enough for a user to grab the HCM and apply the config at that level?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Mingjie Lai wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; I guess these are static because of how HTables all share a single HCM per conf...&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Yes. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Maybe since these are more advanced calls, they shouldn&apos;t be in HTable?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Two alternatives:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;1) HCM: as jgray said, ``however clients are usually not exposed to HCM and only deal with HTable.&apos;&apos;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;2) HBaseAdmin: it is a more reasonable design choice since these operation are at HCM level. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;3) or, make it a configuration. It would be one global configuration applied to all tables, and cannot be changed dynamically. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I like 2) better, but not really sure whether we want to expose it there or not. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;What do you think?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Adding it to HBaseAdmin could make sense.  This one is a bit of an odd one because it&apos;s a client-side configuration parameter done at the per-client-jvm level.  Typically we have per-query or per-htable-instance configs.  HBaseAdmin is generally made up of remote administration commands not local client config.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;If we provide sufficient javadoc (including as a class comment on HTable) it doesn&apos;t matter so much where we put it.  Since it&apos;s distinct from what&apos;s currently in HTable and HBaseAdmin, maybe it does make sense as a static in HCM?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Todd Lipcon wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I think keeping HConnectionManager an internal interface is a good idea, so kind of -0 there. -1 on HBaseAdmin, since we should keep that for administrative functions that really change something on the cluster. So I&apos;d prefer HTable, but wouldn&apos;t cry over HCM.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Since we can knock it down to just two methods, get/set, let&apos;s just put it in HTable.&lt;/p&gt;

&lt;p&gt;But it will be static, right, so people understand it&apos;s not per-instance.  Let&apos;s also make sure there is javadoc that also explains that it is for all HTable instances for the tables you configure.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review176&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review176&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12878360" author="hbasereviewboard" created="Sun, 13 Jun 2010 07:54:13 +0000"  >&lt;p&gt;Message from: &quot;Mingjie Lai&quot; &amp;lt;mjlai09@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-06-13 00:49:50.977413)&lt;/p&gt;


&lt;p&gt;Review request for hbase, Todd Lipcon and stack.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;1) resolved conflicts from the latest code commits&lt;br/&gt;
2) added get/setRegionCachePrefetch() in HTable, removed isRegionCachePrefetchEnabled(), enableRegionCachePrefetch(), etc. &lt;br/&gt;
3) in MetaScanner, added Math.min(rowLimit, configuration.getInt(...))&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;: Improvements to prewarm META cache on clients.&lt;/p&gt;

&lt;p&gt;Changes:&lt;br/&gt;
1. Add new HTable methods which support region info de/serialation, and region cache prewarm: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;void serializeRegionInfo(): clients could perform a large scan for all the meta for the table, serialize the meta to a file. MR job can ship a copy of the meta for the table in the DistributedCache&lt;/li&gt;
	&lt;li&gt;Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; deserializeRegionInfo(): MR job can deserialize the region info from the DistributedCache&lt;/li&gt;
	&lt;li&gt;prewarmRegionCache(Map&amp;lt;HRegionInfo, HServerAddress&amp;gt; regionMap): MR job can prewarm local region cache by the deserialized region info.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2. For each client, each region cache read-miss could trigger read-ahead some number of rows in META. This option could be turned on and off for one particular table. &lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2468&quot; title=&quot;Improvements to prewarm META cache on clients&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2468&quot;&gt;&lt;del&gt;HBASE-2468&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2468&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2468&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/client/HConnection.java 853164d &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java 03cbf8d &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/HTable.java 8e47f2d &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/client/MetaScanner.java f11ada7 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/client/TestFromClientSide.java 95e494a &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/98/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Unit tests passed locally for me. &lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Mingjie&lt;/p&gt;

</comment>
                            <comment id="12878406" author="hbasereviewboard" created="Sun, 13 Jun 2010 17:21:33 +0000"  >&lt;p&gt;Message from: stack@duboce.net&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/98/#review210&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/98/#review210&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;


&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;I did a quick skim.  All looks good.  This is a weird one in that to prewarm we are going to do a getClosestOrBefore (which we&apos;ll be doing anyway) and then we&apos;ll open scanner, and scan next 10 rows... then close scanner; i.e. extra rpcs inline w/ first lookup against tale.  This latter will actually slow down first lookup some but we can make it faster by making open scanner return results so we don&apos;t have to then go call next (already an issue to do this) and also, making it so we scan forward always by changing keys in .META. such that region names are keyed by endkey rather than startkey... also another issue to do this.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;stack&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12878407" author="stack" created="Sun, 13 Jun 2010 17:22:01 +0000"  >&lt;p&gt;Committed.  Thank you for the patch Mingjie Lai.&lt;/p&gt;</comment>
                            <comment id="15017158" author="lars_francke" created="Fri, 20 Nov 2015 12:42:06 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12445217" name="HBASE-2468-trunk.patch" size="10800" author="mingjielai" created="Fri, 21 May 2010 22:24:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 12 May 2010 22:05:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32601</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hhuf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100153</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>