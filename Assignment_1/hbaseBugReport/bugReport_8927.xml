<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:59:49 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-8927/HBASE-8927.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-8927] Use nano time instead of mili time everywhere</title>
                <link>https://issues.apache.org/jira/browse/HBASE-8927</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Less collisions and we are paying the price of a long anyways so might as well fill it.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12657206">HBASE-8927</key>
            <summary>Use nano time instead of mili time everywhere</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                            <label>phoenix</label>
                    </labels>
                <created>Thu, 11 Jul 2013 06:41:19 +0000</created>
                <updated>Tue, 3 Nov 2015 13:12:27 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>24</watches>
                                                                                                            <comments>
                            <comment id="13705532" author="stack" created="Thu, 11 Jul 2013 06:54:14 +0000"  >&lt;p&gt;Search and replace.&lt;/p&gt;

&lt;p&gt;It will take more work.  A bunch of tests fail because timings are not not what they expected.&lt;/p&gt;</comment>
                            <comment id="13705562" author="hadoopqa" created="Thu, 11 Jul 2013 07:37:58 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12591798/8927.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12591798/8927.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 402 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6307//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6307//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13705568" author="jeason" created="Thu, 11 Jul 2013 07:52:37 +0000"  >&lt;p&gt;I think System.nanoTime() can not be used as TimeStamp. It can&apos;t ensure the accuracy.&lt;/p&gt;</comment>
                            <comment id="13705574" author="lhofhansl" created="Thu, 11 Jul 2013 07:57:21 +0000"  >&lt;p&gt;nanoTime cannot be used as absolute timestamps, it can only be used to compare times over a relatively small interval.&lt;/p&gt;</comment>
                            <comment id="13705605" author="enis" created="Thu, 11 Jul 2013 08:35:52 +0000"  >&lt;p&gt;Agreed what Lars said.&lt;/p&gt;</comment>
                            <comment id="13705619" author="lhofhansl" created="Thu, 11 Jul 2013 08:57:38 +0000"  >&lt;p&gt;Maybe we can use millies and fill the lower bits from nano time.&lt;/p&gt;</comment>
                            <comment id="13706031" author="stack" created="Thu, 11 Jul 2013 18:01:50 +0000"  >&lt;p&gt;Yeah on what javadoc says but src is quoted in this thread: &lt;a href=&quot;http://stackoverflow.com/questions/510462/is-system-nanotime-completely-useless&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/questions/510462/is-system-nanotime-completely-useless&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
jlong os::javaTimeMillis() {
  timeval time;
  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; status = gettimeofday(&amp;amp;time, NULL);
  &lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt;(status != -1, &lt;span class=&quot;code-quote&quot;&gt;&quot;linux error&quot;&lt;/span&gt;);
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; jlong(time.tv_sec) * 1000  +  jlong(time.tv_usec / 1000);
}


jlong os::javaTimeNanos() {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (Linux::supports_monotonic_clock()) {
    struct timespec tp;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; status = Linux::clock_gettime(CLOCK_MONOTONIC, &amp;amp;tp);
    &lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt;(status == 0, &lt;span class=&quot;code-quote&quot;&gt;&quot;gettime error&quot;&lt;/span&gt;);
    jlong result = jlong(tp.tv_sec) * (1000 * 1000 * 1000) + jlong(tp.tv_nsec);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; result;
  } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
    timeval time;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; status = gettimeofday(&amp;amp;time, NULL);
    &lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt;(status != -1, &lt;span class=&quot;code-quote&quot;&gt;&quot;linux error&quot;&lt;/span&gt;);
    jlong usecs = jlong(time.tv_sec) * (1000 * 1000) + jlong(time.tv_usec);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 1000 * usecs;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above looks pretty good to me.&lt;/p&gt;</comment>
                            <comment id="13706117" author="enis" created="Thu, 11 Jul 2013 19:03:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;Maybe we can use millies and fill the lower bits from nano time.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I did exactly that in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6833&quot; title=&quot;[WINDOWS] Java Milisecond precision on Windows&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6833&quot;&gt;HBASE-6833&lt;/a&gt;. The problem is that each CPU thread will observe it&apos;s own nanosecond increments. Thus, concurrent updates coming at the same time won&apos;t have any guarantees for having monotonically increasing ts&apos;s because they are handled by different hardware threads. We can add some synchronization there (see my patch there), but it is not clear whether using ns will gain us if we did that. &lt;/p&gt;</comment>
                            <comment id="13706136" author="stack" created="Thu, 11 Jul 2013 19:27:31 +0000"  >&lt;p&gt;We could left shift millis in the long and then keep incrementing sequence number within a millisecond? (more expensive than call to nano).&lt;/p&gt;

&lt;p&gt;On CLOCK_MONOTONIC from  &lt;a href=&quot;http://linux.die.net/man/3/clock_gettime&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://linux.die.net/man/3/clock_gettime&lt;/a&gt;, it says &quot;Clock that cannot be set and represents monotonic time since some unspecified starting point.&quot; which is off-putting but when I print it out it is same as millis.  &lt;br/&gt;
Did you see it going backward or out of order on SMP Enis (in spite of CLOCK_MONOTONIC)?  Were you on windows?&lt;/p&gt;</comment>
                            <comment id="13706172" author="sershe" created="Thu, 11 Jul 2013 20:09:46 +0000"  >&lt;p&gt;What problem are we trying to solve? The fix with synchronized increments/etc. is not cheap and the only place we /really/ need it as timestamps, it seems. Just checking&lt;/p&gt;</comment>
                            <comment id="13706212" author="stack" created="Thu, 11 Jul 2013 20:47:47 +0000"  >&lt;p&gt;+ Less cordinate collisions (where coordinates are row+cf+qualifier+type+ts).  As slow as we are we can do a bunch of ops inside a ms. If nanotime, can establish some order regards events that arrive inside the same ms.&lt;br/&gt;
+ We have a 64bit ts already but we don&apos;t use all the bytes; that seems a little silly.&lt;/p&gt;</comment>
                            <comment id="13706242" author="enis" created="Thu, 11 Jul 2013 21:17:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;Did you see it going backward or out of order on SMP Enis&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That was on windows, but I believe it should be the same in linux as well. The hardware clocks themselves do not go back, but if two updates come with seq_num X and seq_num X+1, then X+1 might get a smaller ns because the hardware thread might observe a different clock than the other thread. &lt;/p&gt;</comment>
                            <comment id="13706274" author="eclark" created="Thu, 11 Jul 2013 21:36:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;The hardware clocks themselves do not go back, but if two updates come with seq_num X and seq_num X+1, then X+1 might get a smaller ns because the hardware thread might observe a different clock than the other thread.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That can happen now if the mutations are not on the same row:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread 1&amp;#93;&lt;/span&gt; Mutation A comes in to thread&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread 1&amp;#93;&lt;/span&gt; Wal edit A gets seq id.&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread 1&amp;#93;&lt;/span&gt; Thread Context Switches&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread 2&amp;#93;&lt;/span&gt; Mutation B comes in&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread 2&amp;#93;&lt;/span&gt; Wal edit B gets seq id.&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread 2&amp;#93;&lt;/span&gt; Mutation B gets timestamp.&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread 1&amp;#93;&lt;/span&gt; Wakes up&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Thread 1&amp;#93;&lt;/span&gt; Mutation A gets time stamp.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A.id &amp;lt; B.id &amp;amp;&amp;amp; A.ts &amp;gt; B.ts&lt;/p&gt;

&lt;p&gt;Locks ensure this isn&apos;t an issue on the same row.&lt;/p&gt;</comment>
                            <comment id="13706325" author="enis" created="Thu, 11 Jul 2013 22:13:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;That can happen now if the mutations are not on the same row:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That is true, but I&apos;ve never seen that happen in reality. Versus in ns case, it will happen very frequently. &lt;/p&gt;</comment>
                            <comment id="13706444" author="sershe" created="Thu, 11 Jul 2013 23:30:59 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; agree on first, but for general use (like e.g. measuring ttl expiration, how long things took for normal ops, and such) having a complex ts generation seems sillier &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I&apos;d do nano on case by case basis for non-timestamps.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; hardware clocks do go back on faulty motherboards... also Windows does adjust the clock backwards from the time server if it drifts forwards. Linux ntpd can also do that unless explicitly disabled.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; but does it matter across rows?&lt;/p&gt;</comment>
                            <comment id="13706455" author="stack" created="Thu, 11 Jul 2013 23:36:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;...a complex ts generation seems sillier&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is no more complex than what we currently have?  We&apos;d do System.nanoTime instead of System.currentTimeMillis.  That is all?&lt;/p&gt;
</comment>
                            <comment id="13706466" author="eclark" created="Thu, 11 Jul 2013 23:41:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;Elliott Clark but does it matter across rows?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We make acid guarantees around rows.  Not around different mutations on different rows.  So yes.  Showing that the clock always goes forward (minus errors) on a row means that we are only discussing changing behavior or timestamps that we gave no promises for.&lt;/p&gt;</comment>
                            <comment id="13706503" author="sershe" created="Fri, 12 Jul 2013 00:18:10 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; nanoTime is not the time... it cannot be used between machines (i.e. for ttl and such) or anywhere where wall clock time is required, only for differences on the same machine&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;br/&gt;
This method can only be used to measure elapsed time and is not related to any other notion of system or wall-clock time. The value returned represents nanoseconds since some fixed but arbitrary time (perhaps in the future, so values may be negative). This method provides nanosecond precision, but not necessarily nanosecond accuracy. No guarantees are made about how frequently values change. Differences in successive calls that span greater than approximately 292 years (263 nanoseconds) will not accurately compute elapsed time due to numerical overflow. &lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="13706530" author="stack" created="Fri, 12 Jul 2013 00:52:24 +0000"  >&lt;p&gt;Yeah.  I&apos;ve read that whiney-pants CYA bit of years-old javadoc.  The implementation though looks like it should give us the behavior we want (and x-machines).  I&apos;d say next up is trying this on a few SMP machines.&lt;/p&gt;</comment>
                            <comment id="13706541" author="sershe" created="Fri, 12 Jul 2013 01:05:42 +0000"  >&lt;p&gt;Depending on implementation against explicit interface guarantee (or lack thereof) is not a good design decision imho&lt;/p&gt;</comment>
                            <comment id="13707916" author="jmspaggi" created="Sun, 14 Jul 2013 01:44:51 +0000"  >&lt;p&gt;I&apos;m not getting the points against this change.&lt;/p&gt;

&lt;p&gt;We will not be the first one to move from Milli to Nano, no?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/CASSANDRA-733&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/CASSANDRA-733&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The issues we might have we nano, we already have them with milli?&lt;/p&gt;</comment>
                            <comment id="13708042" author="yuzhihong@gmail.com" created="Sun, 14 Jul 2013 14:45:37 +0000"  >&lt;p&gt;I noticed that the size of patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/CASSANDRA-733&quot; title=&quot;track latency in nanoseconds, not milliseconds&quot; class=&quot;issue-link&quot; data-issue-key=&quot;CASSANDRA-733&quot;&gt;&lt;del&gt;CASSANDRA-733&lt;/del&gt;&lt;/a&gt; is relatively small.&lt;/p&gt;

&lt;p&gt;It contains changes in the following form:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-        &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; startTime = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
+        &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; startTime = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.nanoTime();
...
-            writeStats.add(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis() - startTime);
+            writeStats.addNano(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.nanoTime() - startTime);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13708053" author="jmspaggi" created="Sun, 14 Jul 2013 15:28:18 +0000"  >&lt;p&gt;Exact. They simply changed currentTimeMillis() for nanoTime(). And I think that&apos;s the point of St.Ack&apos;s patch too.&lt;/p&gt;</comment>
                            <comment id="13708062" author="jmspaggi" created="Sun, 14 Jul 2013 16:19:10 +0000"  >&lt;p&gt;Just to add:&lt;/p&gt;

&lt;p&gt;jmspaggiari@t:~/cassandra/cassandra$ grep -R &quot;System.nanoTime()&quot; * | wc&lt;br/&gt;
    112     643   13913&lt;/p&gt;</comment>
                            <comment id="13708154" author="stack" created="Sun, 14 Jul 2013 23:31:59 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmspaggi&quot; class=&quot;user-hover&quot; rel=&quot;jmspaggi&quot;&gt;Jean-Marc Spaggiari&lt;/a&gt; That patch is about something else, tracking latencies in nanos, not kv timestamping.&lt;/p&gt;

&lt;p&gt;For this issue to progress, I need to see what happens in linux multithreaded app on smp to see if CLOCK_MONOTONIC means what I think it means.&lt;/p&gt;</comment>
                            <comment id="13708167" author="jmspaggi" created="Mon, 15 Jul 2013 00:08:19 +0000"  >&lt;p&gt;This was just to provide an example. Goal was to show that other applications are already using nano instead on milli, so we might be able to do that too.&lt;/p&gt;

&lt;p&gt;Regarding Mononotic, documentation says:&lt;br/&gt;
CLOCK_MONOTONIC&lt;br/&gt;
    Clock that cannot be set and represents monotonic time since some unspecified starting point. &lt;/p&gt;

&lt;p&gt;&quot;cannot be set&quot;... Seems that even NTPs can&apos;t modify that. &lt;/p&gt;</comment>
                            <comment id="13708257" author="enis" created="Mon, 15 Jul 2013 06:04:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;This was just to provide an example. Goal was to show that other applications are already using nano instead on milli,&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Cassandra&apos;s issue is about changing to nano for tracking latencies, vs. in this case, this is about using nano as a globally pseudo-consistent wall clock.&lt;/p&gt;</comment>
                            <comment id="13708429" author="jmspaggi" created="Mon, 15 Jul 2013 12:55:16 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt;, as I just replied to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;, you&apos;re right. &quot;This was just to provide an example&quot;. They have nanoTime() all over the place, not just on this patch. But they also still have some currentMs() calls...  Might be interesting to ask them &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13708733" author="sershe" created="Mon, 15 Jul 2013 17:56:54 +0000"  >&lt;p&gt;As I said can we please look at reasons to do this, regardless of what this clock does... there&apos;s not a single good reason to use nano in most places, with the exception of column timestamp precision, for which a more complex and safer scheme can be made as suggested by some comments above, and measuring time taken for short (normally expected to take single seconds or less) operations. &lt;br/&gt;
Now, we could do it everywhere anyway just because why not, if it were free of other consequences, but in this case we want to ignore explicitly missing guarantees on the interface and rely on internals of particular JVM(s) and OS(es). If some JVM, OS, or future changes to JVM code change the implementation (still staying within the interface guarantees), there will be a fail of epic proportions.&lt;/p&gt;

&lt;p&gt;In my mind there isn&apos;t even a reason to look at internals and ponder, simply because we don&apos;t stand to gain anything from nano in most places.&lt;/p&gt;</comment>
                            <comment id="13708861" author="stack" created="Mon, 15 Jul 2013 19:37:06 +0000"  >&lt;blockquote&gt;&lt;p&gt;...with the exception of column timestamp precision, for which a more complex and safer scheme can be made as suggested by some comments above, and measuring time taken for short (normally expected to take single seconds or less) operations. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Seems like good enough reasons to me for doing nano time.&lt;/p&gt;

&lt;p&gt;I took a look at jdk8 and the story is no different there in its description of system.nanotime.  It adds a java.time package with classes like Instant w/ its nanosecond resolution &lt;a href=&quot;http://download.java.net/jdk8/docs/api/java/time/Instant.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://download.java.net/jdk8/docs/api/java/time/Instant.html&lt;/a&gt; but it doesn&apos;t look too amenable given its long of seconds and then nanos inside a second (apart from it being jdk8)&lt;/p&gt;

&lt;p&gt;Could do something like Lars suggests above w/ left shift filling in bottom few bytes w/ an incrementing number; it&apos;d be a bit of a pain to implement but would be nice avoiding clashes.&lt;/p&gt;</comment>
                            <comment id="13709178" author="apurtell" created="Mon, 15 Jul 2013 23:33:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;Could do something like Lars suggests above w/ left shift filling in bottom few bytes w/ an incrementing number; it&apos;d be a bit of a pain to implement but would be nice avoiding clashes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That is the middle ground as I read the comments above.&lt;/p&gt;</comment>
                            <comment id="13709184" author="stack" created="Mon, 15 Jul 2013 23:42:30 +0000"  >&lt;p&gt;At a minimum, I think we should just left shift millis so we open up the lower bytes for external transactions, etc. to use, if we do nothing else on this issue.&lt;/p&gt;</comment>
                            <comment id="13709210" author="sershe" created="Mon, 15 Jul 2013 23:57:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;Seems like good enough reasons to me for doing nano time.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, for these particular pieces of code, not everywhere...&lt;/p&gt;</comment>
                            <comment id="13711385" author="stack" created="Wed, 17 Jul 2013 18:08:59 +0000"  >&lt;p&gt;So, left-shifting the timestamping opens up the two least significant bytes.  We could make these two bytes be a counter inside the millisecond.  We could give each edit that comes in during this millisecond its own unique counter.  We should never ever after have clashes (hard to do 64k ops inside a millisecond).&lt;/p&gt;

&lt;p&gt;No-clashing edits would help the distributed log replay case.&lt;/p&gt;

&lt;p&gt;Here is max long: &lt;a href=&quot;http://en.wikipedia.org/wiki/9223372036854775807&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/9223372036854775807&lt;/a&gt; which in hex is 0x7FFFFFFFFFFFFFFF.  If we left shift currentTimeMillis, we can run it up to &quot;Tue Oct 16 19:45:55 PDT 6429&quot; before it&apos;d rollover.&lt;/p&gt;

</comment>
                            <comment id="14104230" author="stack" created="Wed, 20 Aug 2014 17:57:56 +0000"  >&lt;p&gt;Just read through this issue again.  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sershe&quot; class=&quot;user-hover&quot; rel=&quot;sershe&quot;&gt;Sergey Shelukhin&lt;/a&gt; stuff is good pushback above.&lt;/p&gt;

&lt;p&gt;We are careful now allocating sequenceid assigning edits an order.  Should we at the same time allocate the Cell ts or at least modify the LSBs on the ts to add in some derivative of the sequenceid?  (Would only work if we&apos;ve not put the edit into memstore yet).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt; Didn&apos;t you suggest a few lines of code assigning a more granular ts (IIRC)?  Inside a synchronize you assigned the ts, left-shifted, and filled in lower bits with something? I can&apos;t find it just now...&lt;/p&gt;</comment>
                            <comment id="14104238" author="stack" created="Wed, 20 Aug 2014 18:00:54 +0000"  >&lt;p&gt;Sorry &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt; Its &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=heliangliang&quot; class=&quot;user-hover&quot; rel=&quot;heliangliang&quot;&gt;He Liangliang&lt;/a&gt; over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2256?focusedCommentId=13825164&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13825164&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2256?focusedCommentId=13825164&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13825164&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14104406" author="hadoopqa" created="Wed, 20 Aug 2014 19:30:30 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12591798/8927.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12591798/8927.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12591798&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 402 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/10507//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/10507//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14104950" author="heliangliang" created="Thu, 21 Aug 2014 02:08:48 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; Yes, another benefit of left shifting + synchronized counter is it does not suffer from system time drift&lt;/p&gt;</comment>
                            <comment id="14105225" author="nkeywal" created="Thu, 21 Aug 2014 09:03:04 +0000"  >&lt;p&gt;So I&apos;m adding there the comment I wrote in a duplicate jira: Am I the only one who would appreciate some extra bits, to have a timestamps + a counter?&lt;/p&gt;</comment>
                            <comment id="14106152" author="stack" created="Thu, 21 Aug 2014 23:36:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;So I&apos;m adding there the comment I wrote in a duplicate jira: Am I the only one who would appreciate some extra bits, to have a timestamps + a counter?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Say more.  How would the counter be used?  It&apos;d be part of the ts or a different facility altogether?&lt;/p&gt;</comment>
                            <comment id="14108946" author="nkeywal" created="Mon, 25 Aug 2014 09:30:57 +0000"  >&lt;p&gt;It&apos;s part of the ts. Typically used when the user application sets the ts. With a composition of: ts + uniqueClientId + counter all the operations are ordered. In the client application it&apos;s not very difficult to have a unique id per client process and then to maintain a counter. I expect that playing with transactions leads to these kind of needs.&lt;/p&gt;</comment>
                            <comment id="14114482" author="ghelmling" created="Thu, 28 Aug 2014 22:23:27 +0000"  >&lt;p&gt;Regarding precision, FWIW in the case of Tephra, we multiply the current timestamp in milliseconds by 1000000 and add a counter (reset every millisecond).  1 billion operations per seconds is probably more than we need, so if we need to support more that 292 years worth of timestamped values, we could probably adjust to a lower counter range.&lt;/p&gt;</comment>
                            <comment id="14114506" author="stack" created="Thu, 28 Aug 2014 22:35:52 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt; Not a left-shift but a multiply?  Above speculate left-shifting two bytes.  You&apos;d shift more Gary?&lt;/p&gt;</comment>
                            <comment id="14219860" author="lhofhansl" created="Thu, 20 Nov 2014 19:41:49 +0000"  >&lt;p&gt;Should we pick this up again?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;At a minimum, I think we should just left shift millis so we open up the lower bytes for external transactions, etc. to use, if we do nothing else on this issue.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed. We&apos;d probably need to add a &quot;timestamp multiplier&quot; or &quot;timestamp shift&quot; option to table or column family. That way we can grandfather in old tables and in all cases scale the TTL value accordingly.&lt;br/&gt;
I think this is the only concerns, the timestamps never actually have to changed in the existing/old KVs (even when stored in the WAL). Care would have to be taken when the multiplier is changed to higher value and there&apos;s a TTL on the table already, that would probably not work easily.&lt;/p&gt;</comment>
                            <comment id="14220262" author="stack" created="Fri, 21 Nov 2014 00:00:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should we pick this up again?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like this issue. Hard part is ensuring we don&apos;t break TTLs going between old and new ts types (as you pointed out above). Was thinking we&apos;d have all timestamping go via the environmentedge thingy... would add a compare on it.  It would do the ttl  math cognizant of the ts typing (my guess is that left shift would be less expensive doing this compare than multiply but would have to measure).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We&apos;d probably need to add a &quot;timestamp multiplier&quot; or &quot;timestamp shift&quot; option to table or column family. That way we can grandfather in old tables and in all cases scale the TTL value accordingly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;All or nothing I&apos;d say Just say NO to more options (smile).&lt;/p&gt;</comment>
                            <comment id="14350806" author="lhofhansl" created="Fri, 6 Mar 2015 19:58:16 +0000"  >&lt;p&gt;Coming back to this... I think in order to make TTL work we need to be able to at least distinguish old and new tables and/or column families.&lt;/p&gt;

&lt;p&gt;I still think the easiest is to add TIMESTAMP_MULTIPLIER as a table or CF option.&lt;br/&gt;
That way we:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;can handle old tables (the multiplier would default to 1)&lt;/li&gt;
	&lt;li&gt;handle new table (there the multiplier could default to 1000 - for microsecs, or 1000000 - for nanosec)&lt;/li&gt;
	&lt;li&gt;allow folks to tweak their their time range against their resolution&lt;/li&gt;
	&lt;li&gt;(could even allow to set the multiplier to 0, indicating we&apos;re not dealing with time at all in the TS fields, and then we can disallow TTL)&lt;/li&gt;
	&lt;li&gt;when checking the TTL, we&apos;d scale the TTL with this value, and it would do the right thing.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Note that we would not actually have a higher resolution per se, we&apos;d just make space in the KVs.&lt;br/&gt;
We can either set the free bits to 0, or fill them with a random numbers, or do some nanotime trickery.&lt;/p&gt;

&lt;p&gt;It&apos;s a new option (sorry &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;), but I do not see another way out.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="14350820" author="stack" created="Fri, 6 Mar 2015 20:08:04 +0000"  >&lt;p&gt;I like it. Simple. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14350822" author="stack" created="Fri, 6 Mar 2015 20:08:54 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; There is no config by default if I read this right. New tables will get a non-1 multiplier.&lt;/p&gt;</comment>
                            <comment id="14544308" author="lhofhansl" created="Thu, 14 May 2015 20:26:07 +0000"  >&lt;p&gt;Perhaps an easier config would be TIMESTAMP_RESOLUTION from a enum with MILLISECONDS, MICROSECONDS, NANOSECONDS. Default in 0.98, 1.x would be always MILLISECONDS. In 2.0 old tables default to MILLISECONDS, new tables could default to MICRO or NANOSECONDS.&lt;br/&gt;
Note that we would not actually have this resolution, yet, but rather have space in the timestamp (by multiplying the current milliseconds by either 1000 or 1000000).&lt;/p&gt;

&lt;p&gt;Is that better?&lt;/p&gt;</comment>
                            <comment id="14544410" author="apurtell" created="Thu, 14 May 2015 21:44:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;MILLISECONDS, MICROSECONDS, NANOSECONDS&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just to state this a bit differently, these are symbolic constants for timestamp multipliers.&lt;/p&gt;

&lt;p&gt;Sounds good to me.&lt;/p&gt;</comment>
                            <comment id="14544709" author="lhofhansl" created="Fri, 15 May 2015 01:10:26 +0000"  >&lt;p&gt;Here&apos;s a &lt;em&gt;work in progress&lt;/em&gt; just need to park it here.&lt;br/&gt;
Observations:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;timestamp_multiplier is weird. Who is going to understand what that means?&lt;/li&gt;
	&lt;li&gt;Here I have used timestamp_resolution, but that&apos;s weird too. Nobody would want to lower than 1000 anyway. And unless we track a nominator and denominator the resolution needs to be dividable by 1000.&lt;/li&gt;
	&lt;li&gt;Assumptions about ms are all over the place. Need to scale it everywhere, but not where we actually need wall time (for example in the WAL keys). Getting this all right will be tricky.&lt;/li&gt;
	&lt;li&gt;In introduced a getNow method to HRegion that can return an appropriate representation of &lt;em&gt;now&lt;/em&gt; for the region.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So I think I want to call it timestamp_resolution, but store it as multiplier only (i.e. 1 for ms, 1000 for us, 1000000 for ns). Then I also need to introduce the constant I mentioned. &lt;/p&gt;</comment>
                            <comment id="14544833" author="hadoopqa" created="Fri, 15 May 2015 03:00:00 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12733022/8927-WIP-TEST.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12733022/8927-WIP-TEST.txt&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 9ba7337ac82d13b22a1b0c40edaba7873c0bd795.&lt;br/&gt;
  ATTACHMENT ID: 12733022&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1901 checkstyle errors (more than the master&apos;s current 1898 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +      LOG.warn(&quot;\&quot;&quot;&lt;ins&gt;TIMESTAMP_RESOLUTION&lt;/ins&gt;&quot;\&quot; parameter cannot be updated! Ignore.&quot;, new Exception());&lt;br/&gt;
+  private static long determineTTLFromFamily(final HColumnDescriptor family, final HTableDescriptor table) {&lt;br/&gt;
+        htd.setTimestampResolution(JInteger.valueOf(arg.delete(TIMESTAMP_RESOLUTION))) if arg&lt;span class=&quot;error&quot;&gt;&amp;#91;TIMESTAMP_RESOLUTION&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestDefaultMemStore&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestReversibleScanners&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestStoreScanner&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 2 zombie test(s): 	at org.apache.hadoop.hbase.ResourceCheckerJUnitListener.testFinished(ResourceCheckerJUnitListener.java:183)&lt;br/&gt;
	at org.apache.hadoop.hbase.io.hfile.TestScannerSelectionUsingTTL.testScannerSelection(TestScannerSelectionUsingTTL.java:116)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14052//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14052//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14052//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14052//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14052//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14052//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14052//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14052//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14544868" author="lhofhansl" created="Fri, 15 May 2015 03:46:48 +0000"  >&lt;p&gt;Also need to deal with per-cell TTL.&lt;/p&gt;

&lt;p&gt;(this would all so much easier if we could just change the EnvironmentEdge globally - but then we couldn&apos;t grandfather in any old tables)&lt;/p&gt;</comment>
                            <comment id="14987237" author="jbemmel" created="Tue, 3 Nov 2015 13:12:27 +0000"  >&lt;p&gt;A shift in system time ( e.g. ntpdate -u or date -s on Linux ) can cause a Zookeeper server to close all client connections due to session timeout; it becomes unavailable for several minutes until it recovers.&lt;br/&gt;
Using System.nanoTime() (in the right places) can potentially make the system immune to such local time shifts, on platforms that support the monotonically increasing clock&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12608179">HBASE-6833</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12457251">HBASE-2256</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12776006">PHOENIX-1674</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12844853">HBASE-14070</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12704125">HBASE-10856</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12733022" name="8927-WIP-TEST.txt" size="12227" author="lhofhansl" created="Fri, 15 May 2015 01:10:26 +0000"/>
                            <attachment id="12591798" name="8927.txt" size="397061" author="stack" created="Thu, 11 Jul 2013 06:54:14 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12736721">HBASE-11822</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 11 Jul 2013 07:37:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>337428</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 6 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1m79r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>337751</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>