<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:53:12 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-1400/HBASE-1400.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-1400] Improve REST interface semantics and efficiency</title>
                <link>https://issues.apache.org/jira/browse/HBASE-1400</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Improve the semantics of the REST interface: more metadata operations, bulk updates, protobufs (if Accept equals &quot;application/x-protobuf&quot; for GET or Content-Type equals the same for PUT or POST) instead of multipart/related (which is not supported now anyway) etc. for general efficiency and support for queries or scanners that return multiple KeyValues. &lt;/p&gt;

&lt;p&gt;I am working on a proposal.&lt;/p&gt;

&lt;p&gt;Co-development in Github:&lt;br/&gt;
    &lt;a href=&quot;http://github.com/apurtell/stargate/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/apurtell/stargate/&lt;/a&gt;&lt;br/&gt;
    &lt;a href=&quot;http://github.com/macdiesel/stargate/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/macdiesel/stargate/&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12425049">HBASE-1400</key>
            <summary>Improve REST interface semantics and efficiency</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="apurtell">Andrew Purtell</reporter>
                        <labels>
                    </labels>
                <created>Sun, 10 May 2009 19:12:25 +0000</created>
                <updated>Sun, 13 Sep 2009 22:24:37 +0000</updated>
                            <resolved>Sat, 22 Aug 2009 14:05:37 +0000</resolved>
                                                    <fixVersion>0.20.0</fixVersion>
                                    <component>REST</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12708031" author="macdiesel" created="Mon, 11 May 2009 13:45:57 +0000"  >&lt;p&gt;I&apos;ve been thinking about this slice of code for a while now and I really don&apos;t like this dispatcher servlet and the way that the actions kind of break out from this.  &lt;/p&gt;

&lt;p&gt;I started using the java jersey project this past week to write a REST interface for another project I was working on.  &lt;a href=&quot;https://jersey.dev.java.net/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://jersey.dev.java.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think that if we could move the servlet code to this framework I think the project could gain a lot of maintainability and loose a lot of this spaghetti code that seems to plague the system currently.  I could dedicate some of my time to helping make this transition if you guys are interested.&lt;/p&gt;</comment>
                            <comment id="12708091" author="apurtell" created="Mon, 11 May 2009 16:03:56 +0000"  >&lt;p&gt;@Brian&lt;/p&gt;

&lt;p&gt;Thanks for the pointer to Jersey. I&apos;ll see if what I have in mind is implementable with it. One potential issue is some additional dependencies (grizzly-servlet-webserver.jar, jersey-server.jar, jersey-core.jar, jsr311-api.jar, asm.jar) , but objections to additional dependencies could probably be satisfied by moving the resulting HBase REST connector to contrib style packaging. &lt;/p&gt;</comment>
                            <comment id="12712872" author="apurtell" created="Tue, 26 May 2009 06:17:47 +0000"  >&lt;p&gt;Implemented for an internal specification but submitted for consideration as a starting point for something for HBase.&lt;/p&gt;</comment>
                            <comment id="12714655" author="apurtell" created="Sat, 30 May 2009 02:11:45 +0000"  >&lt;p&gt;Updated version:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Use Zookeeper to publish load and learn about the load of other gateways (prelude to load balancing)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Gateway status report&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Cluster status report&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;application/octet-stream support for GET and PUT of single cells&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Set Cache-Control header according to column family TTLs, no-cache for metadata, or default otherwise&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12714717" author="stack" created="Sat, 30 May 2009 13:50:35 +0000"  >&lt;p&gt;Andrew: You&apos;ve been busy.  This looks great.  How much does it differ from current REST (I&apos;ve not done a side-by-side but they seem close).  It looks like it might actually be up and working.  Is that so?&lt;/p&gt;

&lt;p&gt;Brian: What do you think?&lt;/p&gt;

&lt;p&gt;How should we proceed?  REST has been refactored for 0.20.0.  This would be yet another implementation it would seem.  What should we do?  Move our REST out of hbase and use stargate or use both checking stargate into new contrib?  Or should stargate live elsewhere in its own project?&lt;/p&gt;</comment>
                            <comment id="12714752" author="apurtell" created="Sat, 30 May 2009 18:10:26 +0000"  >&lt;p&gt;@Stack&lt;/p&gt;

&lt;p&gt;Yes this works, in the sense that it will launch and all of the (manual) simple test cases enumerated in stargate-testing.pdf complete without error. I haven&apos;t checked to see what corner cases exist in Jersey or what capabilities I think Jetty gives for free e.g. transfer encoding of gzip or deflate.&lt;/p&gt;

&lt;p&gt;Regarding integration with the project, it is my opinion that the REST bits should come out of core and Stargate should become a new contrib. I implemented this last week for some other project I am working on so it was built to a set of internal design criteria. For this version contributed to the community, I think the community should change it if the consensus on various details differs from what is in place now.  While the iron is hot I would be willing to do some of that work. I like Jersey a lot. Building or changing complex behaviors takes little time. I built all of Stargate in less than one week, including learning curve.&lt;/p&gt;</comment>
                            <comment id="12714769" author="stack" created="Sat, 30 May 2009 20:55:42 +0000"  >&lt;p&gt;I&apos;m good with making a contrib.  Stick proposal up on list?   Would be good if this was done for 0.20.0.  Hopefully Brian Beggs weighs in.  I&quot;ll ping him if he don&apos;t show up here in next day or so.&lt;/p&gt;</comment>
                            <comment id="12714911" author="apurtell" created="Sun, 31 May 2009 18:13:26 +0000"  >&lt;p&gt;Updated with bug fix for scanner instance cache control.&lt;/p&gt;</comment>
                            <comment id="12715251" author="macdiesel" created="Mon, 1 Jun 2009 20:52:23 +0000"  >&lt;p&gt;If I had the opportunity to go back and write the HBase REST interface now, after knowing a lot more about Hbase and having used Jersey on another project, this is how I would want to write the interface.&lt;/p&gt;

&lt;p&gt;What I like:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Having Jersey integrated with the project takes away so much manual work that was being done before with the Response messages and input parsing.  That alone will make this implementation so much less error prone that what is currently in the interface.  I spent a lot of time chasing down I/O defects in the current implementation which left me less time to focus on functionality.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Generally everything about this implementation is much cleaner than prior implementations.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;What I would like to see:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I do think it would be beneficial to have JSON support since the current interface supports this.  I would be willing to contribute this portion.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thoughts:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think that having JSON I/O is still beneficial to the interface.  While the addition of protobufs makes for an attractive option to JSON, there may still be a need for a JSON interface for something such as JavaScript (Only Firefox is officially supported for JS protobufs).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;As with the prior implementation there is some redundant code centering around parsing/serializing of I/O.  For example in the TableResources class there are 3 methods to serialize output (text, xml and protobufs).  I had tried to centralize alot of this serialization code into it&apos;s own class using the visitor pattern for the last iteration to keep the implementation classes a little cleaner, reduce code redundancy and to make it a bit easier to extend the interface to add new I/O types.  While the old interface had redundancy in the fact that there was serialization or parsing for each data type, I feel that the I/O is wrapped a bit too tightly in this current implementation and more closely resembles the REST implementation before I made the I/O more modular.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think that there is a bit of redundancy in the implementation as it stands currently, and I also think that it can be factored out relatively easily... (see below)&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I think it would be desirable to add some model classes to the interface that could be used for I/O parsing/Serialization.  These model classes could use the JAX-B XML and JSON parsing/serialization that is already available with Jersey.  This would make the code more modular and easier to extend.  Then to parse the protobuf (or if the JAX-B implementations are not fast enough) adding a provider to handle the I/O is relatively easy.  Take a look at this article:&lt;br/&gt;
&lt;a href=&quot;http://www.javarants.com/2008/12/27/using-jax-rs-with-protocol-buffers-for-high-performance-rest-apis/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.javarants.com/2008/12/27/using-jax-rs-with-protocol-buffers-for-high-performance-rest-apis/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Google says that protobufs generated classes should not be treated as first class objects, and while I don&apos;t feel that this implementation necessary treats them as such.  I think there would be benefit from wrapping the protobufs into the model classes discussed above and accessing them this way.  &lt;/p&gt;

&lt;p&gt;Taking all of the above into consideration expanding the REST interface becomes much easier.&lt;/p&gt;

&lt;p&gt;For example:&lt;br/&gt;
Lets say we want to add an additional piece of information into the list of tables that gets returned when you call the root of the webapp @Path(&quot;/&quot;)&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Current implementation:
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;TableResource.java (partial)&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @GET
  @Produces(MIMETYPE_TEXT)
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Response getAsText(@Context UriInfo uriInfo) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isDebugEnabled()) {
      LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;GET &quot;&lt;/span&gt; + uriInfo.getAbsolutePath() + &lt;span class=&quot;code-quote&quot;&gt;&quot; as &quot;&lt;/span&gt; + MIMETYPE_TEXT);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      RESTServer.getInstance().serviceRequests++;
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WebApplicationException(e, 
                  Response.Status.INTERNAL_SERVER_ERROR);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      StringWriter writer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringWriter();
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (HTableDescriptor htd: getTableList()) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (htd.isMetaRegion()) {
          &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
        }
        writer.append(htd.getNameAsString());
        writer.append(&apos;\n&apos;);
      }
      ResponseBuilder response = Response.ok(writer.toString());
      response.cacheControl(cacheControl);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; response.build();
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WebApplicationException(e, 
                  Response.Status.SERVICE_UNAVAILABLE);
    }
  }

  @GET
  @Produces(MIMETYPE_XML)
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Response getAsXML(@Context UriInfo uriInfo) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isDebugEnabled()) {
      LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;GET &quot;&lt;/span&gt; + uriInfo.getAbsolutePath() + &lt;span class=&quot;code-quote&quot;&gt;&quot; as &quot;&lt;/span&gt; + MIMETYPE_XML);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      RESTServer.getInstance().serviceRequests++;
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WebApplicationException(e, 
                  Response.Status.INTERNAL_SERVER_ERROR);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      StringWriter writer = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringWriter();
      XMLOutputter result = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; XMLOutputter(writer, &lt;span class=&quot;code-quote&quot;&gt;&quot;US-ASCII&quot;&lt;/span&gt;);
      result.startTag(&lt;span class=&quot;code-quote&quot;&gt;&quot;TableList&quot;&lt;/span&gt;);
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (HTableDescriptor htd: getTableList()) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (htd.isMetaRegion()) {
          &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
        }
        result.startTag(&lt;span class=&quot;code-quote&quot;&gt;&quot;table&quot;&lt;/span&gt;);
        result.attribute(&lt;span class=&quot;code-quote&quot;&gt;&quot;name&quot;&lt;/span&gt;, htd.getNameAsString());
        result.endTag();
      }
      result.endTag();
      result.endDocument();
      ResponseBuilder response = Response.ok(writer.toString());
      response.cacheControl(cacheControl);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; response.build();
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (UnsupportedEncodingException e) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WebApplicationException(e, 
                  Response.Status.INTERNAL_SERVER_ERROR);
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WebApplicationException(e, 
                  Response.Status.SERVICE_UNAVAILABLE);
    }
  }

  @GET
  @Produces(MIMETYPE_PROTOBUF)
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Response getAsProtobuf(@Context UriInfo uriInfo) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isDebugEnabled()) {
      LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;GET &quot;&lt;/span&gt; + uriInfo.getAbsolutePath() + &lt;span class=&quot;code-quote&quot;&gt;&quot; as &quot;&lt;/span&gt; +
        MIMETYPE_PROTOBUF);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      RESTServer.getInstance().serviceRequests++;
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WebApplicationException(e, 
                  Response.Status.INTERNAL_SERVER_ERROR);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      TableList.Builder list = TableList.newBuilder();
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (HTableDescriptor htd: getTableList()) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (htd.isMetaRegion()) {
          &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
        }
        list.addName(htd.getNameAsString());
      }
      ResponseBuilder response = Response.ok(list.build().toByteArray());
      response.cacheControl(cacheControl);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; response.build();
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WebApplicationException(e, 
                  Response.Status.SERVICE_UNAVAILABLE);
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;To modify the code change the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;Modify each method that serializes the output in the TableResource class (currently 3, but +1 if we add JSON).&lt;/li&gt;
		&lt;li&gt;recreate the protobuf and recompile.  (then make sure that this doesn&apos;t effect any of the other classes that use this file)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So this is at least 4 methods you have to touch + n methods that may be effected by the protobuf change.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Modified implementation:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;TableResource.java (partial)&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @GET
  @Produces(MIMETYPE_TEXT, MIMETYPE_XML, MIMETYPE_PROTOBUF)
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; TableModel get(@Context UriInfo uriInfo) {
    List&amp;lt;TableModel&amp;gt; tables = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;TableModel&amp;gt;();
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isDebugEnabled()) {
      LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;GET &quot;&lt;/span&gt; + uriInfo.getAbsolutePath() + &lt;span class=&quot;code-quote&quot;&gt;&quot; as &quot;&lt;/span&gt; + MIMETYPE_TEXT);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      RESTServer.getInstance().serviceRequests++;
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WebApplicationException(e, 
                  Response.Status.INTERNAL_SERVER_ERROR);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (HTableDescriptor htd: getTableList()) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (htd.isMetaRegion()) {
          &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
        }
        tables.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TableModel(htd.getName()));
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; models;
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WebApplicationException(e, 
                  Response.Status.SERVICE_UNAVAILABLE);
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;TableModel.java (partial)&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@XmlRootElement(name=&lt;span class=&quot;code-quote&quot;&gt;&quot;table&quot;&lt;/span&gt;)
@XmlType(name = &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;, propOrder = {&quot;&lt;/span&gt;name&quot;})

&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class TableModel &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Serializable {

	&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; serialVersionUID = 2871762412753722057L;
	&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name;
	
	/**
	 * @param name
	 */
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; TableModel(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name) {
		&lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;();
		&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.name = name;
	}
	
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; TableModel() {}

	/**
	 * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the name
	 */
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; getName() {
		&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; name;
	}

	/**
	 * @param name the name to set
	 */
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setName(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name) {
		&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.name = name;
	}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To modify the code change the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;
	&lt;ul&gt;
		&lt;li&gt;Add the field into the model object with the annotation&lt;/li&gt;
		&lt;li&gt;modify the 1 method that does the work to get the list of tables&lt;/li&gt;
		&lt;li&gt;make sure that the modified protobuf class doesn&apos;t effect the 1 class that wraps it.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This is 3 methods that need to be modified.&lt;/p&gt;

&lt;p&gt;I think that a modifying the implementation using these ideas makes for a cleaner easier to maintain interface.  &lt;/p&gt;

&lt;p&gt;I would like to contribute back to this and will see if I can get some time on my schedule for it.&lt;/p&gt;

&lt;p&gt;@Stack &lt;blockquote&gt;&lt;p&gt;Andrew: You&apos;ve been busy. This looks great. How much does it differ from current REST (I&apos;ve not done a side-by-side but they seem close)&lt;/p&gt;&lt;/blockquote&gt;&lt;br/&gt;
No the interfaces are not the same, but I think that if you guys want to have a functional, easier to maintain REST implementation I think that the semantics of this system are much better than what is available currently.&lt;/p&gt;

&lt;p&gt;Overall I think that it&apos;s good work and would ultimately be a great contribution to the project.&lt;/p&gt;

&lt;p&gt;And that&apos;s my $3.50.  Let me know if you guys would like any clarification.&lt;/p&gt;</comment>
                            <comment id="12715263" author="apurtell" created="Mon, 1 Jun 2009 21:19:52 +0000"  >&lt;p&gt;I completely agree with all of Brian&apos;s points. Agree the I/O is hackish. I&apos;ll try refactoring it as suggested. &lt;/p&gt;

&lt;p&gt;Seems that JSON support is easy enough to add at the same time.&lt;/p&gt;</comment>
                            <comment id="12715268" author="apurtell" created="Mon, 1 Jun 2009 21:23:37 +0000"  >&lt;p&gt;I&apos;ll iterate and see how far I get. After that I&apos;d like to hand it off via a commit into contrib/.&lt;/p&gt;</comment>
                            <comment id="12715306" author="apurtell" created="Mon, 1 Jun 2009 23:53:53 +0000"  >&lt;p&gt;@Brian:&lt;/p&gt;

&lt;p&gt;According to eclipse, this syntax is invalid:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @GET
  @Produces(MIMETYPE_TEXT, MIMETYPE_XML, MIMETYPE_PROTOBUF)
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; TableModel get(@Context UriInfo uriInfo) {
  ...
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and so is this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @GET
  @Produces(MIMETYPE_TEXT)
  @Produces(MIMETYPE_XML)
  @Produces(MIMETYPE_PROTOBUF)
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; TableModel get(@Context UriInfo uriInfo) {
  ...
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Also I wonder how to build a response with custom headers and cache control if the resource function is returning a model instead of a Response object.&lt;/p&gt;

&lt;p&gt;I think I will add just additional methods to support JSON encoding for now. &lt;/p&gt;</comment>
                            <comment id="12715499" author="macdiesel" created="Tue, 2 Jun 2009 11:56:54 +0000"  >&lt;p&gt;I just kind of threw that together as an example.  I was having problems getting hbase running yesterday to actually produce a full working example.  I&apos;m going to work on getting everything together today and I&apos;ll throw some of the modifications I talked about back over the wall here.&lt;/p&gt;</comment>
                            <comment id="12715500" author="macdiesel" created="Tue, 2 Jun 2009 11:59:39 +0000"  >&lt;p&gt;Andrew,  for the produces annotation I forgot the types should be an array.  So the line of code should actually be:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@Produces({MIMETYPE_TEXT, MIMETYPE_XML, MIMETYPE_PROTOBUF})
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12715633" author="apurtell" created="Tue, 2 Jun 2009 19:24:06 +0000"  >&lt;p&gt;I would like to commit what I have, with JSON support in the current suboptimal I/O model, under contrib so we can iterate from there in a shared community manner. If nobody votes -1 I&apos;m going to go ahead and to that tonight. &lt;/p&gt;</comment>
                            <comment id="12715638" author="macdiesel" created="Tue, 2 Jun 2009 19:33:21 +0000"  >&lt;p&gt;I&apos;ve been mucking with some of the ideas in this issue today and have checked in the code I&apos;ve been working on into github if you want to take a look Andrew:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/macdiesel/stargate/tree/master&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/macdiesel/stargate/tree/master&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Added:&lt;br/&gt;
-Plain text writer&lt;br/&gt;
-prototobuf writer&lt;br/&gt;
-model classes for tables&lt;br/&gt;
-condensed code in the TableResource class&lt;br/&gt;
-JSON support &lt;/p&gt;

&lt;p&gt;It&apos;s a little rough around the edges, but I think that it at least shows the concepts that I was talking about and how we could implement them.&lt;/p&gt;

&lt;p&gt;From here there is some additional work that needs to go in the consuming of input messages and additional internal models created, but I think this could at least get us started.&lt;/p&gt;

&lt;p&gt;Let me know what you think.&lt;/p&gt;

&lt;p&gt;PSFYI &lt;br/&gt;
In case you want to try and run this code I&apos;m currently running off of hadoop 0.20.0 and the Hbase trunk so I did have to modify those jars.&lt;/p&gt;</comment>
                            <comment id="12715645" author="apurtell" created="Tue, 2 Jun 2009 19:48:08 +0000"  >&lt;p&gt;@Brian&lt;/p&gt;

&lt;p&gt;Ok, cool. I&apos;ll stop what I&apos;m doing and pull from your tree. Thanks for sticking something up on github. &lt;/p&gt;</comment>
                            <comment id="12716011" author="apurtell" created="Wed, 3 Jun 2009 18:01:28 +0000"  >&lt;p&gt;I have a tree also up on github at  git://github.com/apurtell/stargate.git and Brian and I are tracking each other&apos;s changes. I think this arrangement is workable until Stargate is in good shape for commit into HBase contrib. &lt;/p&gt;</comment>
                            <comment id="12716069" author="macdiesel" created="Wed, 3 Jun 2009 21:26:55 +0000"  >&lt;p&gt;Andy,&lt;/p&gt;

&lt;p&gt;I was just going through the spec and I had wanted to ask about the formatting of the cell or row query for multiple values.&lt;/p&gt;

&lt;p&gt;The sample xml on the page is as follows:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;CellSet&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;Cell row=&lt;span class=&quot;code-quote&quot;&gt;&quot;testrow&quot;&lt;/span&gt; column=&lt;span class=&quot;code-quote&quot;&gt;&quot;test:c1&quot;&lt;/span&gt; timestamp=&lt;span class=&quot;code-quote&quot;&gt;&quot;1128765413420141&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    VGhpcyBpcyBhbiBleGFtcGxlIHZhbHVlLgo=
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/Cell&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/CellSet&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I was thinking it would be more efficient to do something like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;CellSet&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;row &amp;gt;&lt;/span&gt;
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;rowName&amp;gt;&lt;/span&gt;
          Base64 Encoded Row Name
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/rowName&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;Cell column=&lt;span class=&quot;code-quote&quot;&gt;&quot;test:c1&quot;&lt;/span&gt; timestamp=&lt;span class=&quot;code-quote&quot;&gt;&quot;1128765413420141&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
          VGhpcyBpcyBhbiBleGFtcGxlIHZhbHVlLgo=
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/Cell&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/row&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/CellSet&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This would probably be better as it would cut down on the size of the deliverable.  Could maybe put the row name in as an attribute but I&apos;m not sure how well that will work with a base 64 encoded value.  Also the column name should come out base64 encoded as well.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                            <comment id="12716072" author="apurtell" created="Wed, 3 Jun 2009 21:39:29 +0000"  >&lt;p&gt;I notice when you tag something byte[] as XmlAttribute the result is base 64 encoding inside the attribute. I presume unmarshalling does the right thing. &lt;/p&gt;

&lt;p&gt;How about:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;CellSet&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;Row name=&lt;span class=&quot;code-quote&quot;&gt;&quot;row name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;Cell column=&lt;span class=&quot;code-quote&quot;&gt;&quot;test:c1&quot;&lt;/span&gt; timestamp=&lt;span class=&quot;code-quote&quot;&gt;&quot;1128765413420141&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
          VGhpcyBpcyBhbiBleGFtcGxlIHZhbHVlLgo=
      &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/Cell&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/Row&amp;gt;&lt;/span&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/CellSet&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;along with protobuf changes to match this structure?&lt;/p&gt;

&lt;p&gt;One thing I can&apos;t figure out how to do is specify alternate encodings for cell bodies. For example, before this was allowed:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-xml&quot;&gt;
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;Cell column=&lt;span class=&quot;code-quote&quot;&gt;&quot;test:c1&quot;&lt;/span&gt; timestamp=&lt;span class=&quot;code-quote&quot;&gt;&quot;1128765413420141&quot;&lt;/span&gt; encoding=&lt;span class=&quot;code-quote&quot;&gt;&quot;base64&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
          VGhpcyBpcyBhbiBleGFtcGxlIHZhbHVlLgo=
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/Cell&amp;gt;&lt;/span&gt;

&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;Cell column=&lt;span class=&quot;code-quote&quot;&gt;&quot;test:c1&quot;&lt;/span&gt; timestamp=&lt;span class=&quot;code-quote&quot;&gt;&quot;1128765413420141&quot;&lt;/span&gt; encoding=&lt;span class=&quot;code-quote&quot;&gt;&quot;plain&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
         This is a plain text value!
&lt;span class=&quot;code-tag&quot;&gt;&amp;lt;/Cell&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which can represent significant savings if there is a large amount of plain text data to transfer. It&apos;s arguable if this is really needed. I just mention it. &lt;/p&gt;</comment>
                            <comment id="12716261" author="macdiesel" created="Thu, 4 Jun 2009 12:43:05 +0000"  >&lt;p&gt;That schema works for me.&lt;/p&gt;

&lt;p&gt;I&apos;m unsure about the alternate encoding thing but my gut is telling me no.  Depending on how important it is we do have alternatives however.  We could possibly use a different XML encoder that may support that kind of operation, we could roll our own, or maybe we could extend an encoder to add some annotations that would help do something like this.&lt;/p&gt;

&lt;p&gt;I&apos;ll see if I can figure anything out.&lt;/p&gt;</comment>
                            <comment id="12716321" author="apurtell" created="Thu, 4 Jun 2009 16:50:36 +0000"  >&lt;p&gt;I think it&apos;s fine to table the idea of alternate encodings for revisiting after the basic function is working. &lt;/p&gt;</comment>
                            <comment id="12724876" author="apurtell" created="Sat, 27 Jun 2009 18:28:09 +0000"  >&lt;p&gt;Alpha quality, with working test suite:&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Buildfile: build.xml

init:

compile-war:

compile-test:

test:
   [delete] Deleting directory /home/apurtell/src/stargate.git/build/test/logs
    [mkdir] Created dir: /home/apurtell/src/stargate.git/build/test/logs
    [junit] Running org.apache.hadoop.hbase.stargate.Test00MiniCluster
    [junit] Tests run: 4, Failures: 0, Errors: 0, Time elapsed: 11.193 sec
    [junit] Running org.apache.hadoop.hbase.stargate.TestRowResource
    [junit] Tests run: 6, Failures: 0, Errors: 0, Time elapsed: 6.594 sec
    [junit] Running org.apache.hadoop.hbase.stargate.TestScannerResource
    [junit] Tests run: 4, Failures: 0, Errors: 0, Time elapsed: 17.032 sec
    [junit] Running org.apache.hadoop.hbase.stargate.TestSchemaResource
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 20.87 sec
    [junit] Running org.apache.hadoop.hbase.stargate.TestStatusResource
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.039 sec
    [junit] Running org.apache.hadoop.hbase.stargate.TestTableResource
    [junit] Tests run: 8, Failures: 0, Errors: 0, Time elapsed: 23.736 sec
    [junit] Running org.apache.hadoop.hbase.stargate.TestVersionResource
    [junit] Tests run: 7, Failures: 0, Errors: 0, Time elapsed: 0.054 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestCellModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.005 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestCellSetModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.003 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestColumnSchemaModel
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.001 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestRowModel
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.002 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestScannerModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.003 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestStorageClusterStatusModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.002 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestStorageClusterVersionModel
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.001 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestTableInfoModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.002 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestTableListModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.002 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestTableRegionModel
    [junit] Tests run: 2, Failures: 0, Errors: 0, Time elapsed: 0.006 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestTableSchemaModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.002 sec
    [junit] Running org.apache.hadoop.hbase.stargate.model.TestVersionModel
    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.002 sec
    [junit] Shutting down the Mini HDFS Cluster
    [junit] Shutting down DataNode 1
    [junit] Shutting down DataNode 0

BUILD SUCCESSFUL
Total time: 2 minutes 0 seconds
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Could use more unit tests for corner cases. Working on those.&lt;/p&gt;</comment>
                            <comment id="12724881" author="apurtell" created="Sat, 27 Jun 2009 20:16:25 +0000"  >&lt;p&gt;Alpha branch: &lt;a href=&quot;http://github.com/apurtell/stargate/tree/alpha&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/apurtell/stargate/tree/alpha&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12724912" author="stack" created="Sun, 28 Jun 2009 00:33:29 +0000"  >&lt;p&gt;What you thinking Andrew?  I&apos;m thinking we should commit it.  It&apos;ll take some time to get it all integrated nicely &amp;#8211; the build system calling down across contribs and fixing documentation so old REST is deprecated in favor of the new, etc.&lt;/p&gt;

&lt;p&gt;I need to work on the build so each of the targets gets invoked across our new contribs &amp;#8211; stargate and THBase/ITHBase (I made &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1588&quot; title=&quot;Rig our build to support our new contribs -- stargate and THBase/ITHBase&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1588&quot;&gt;&lt;del&gt;HBASE-1588&lt;/del&gt;&lt;/a&gt;.  I&apos;ll work on that now).&lt;/p&gt;</comment>
                            <comment id="12724913" author="stack" created="Sun, 28 Jun 2009 00:45:44 +0000"  >&lt;p&gt;I wonder if the package should be o.a.h.stargate rather than o.a.h.h.stargate?&lt;/p&gt;

&lt;p&gt;I took quick look at code and it looks good &amp;#8211; could do with javadoc&apos;ing but that can come later.&lt;/p&gt;

&lt;p&gt;What I think we do need for release is stargate.pdf redone either as javadoc or xdoc that we can show up on site: e.g. &lt;a href=&quot;http://hadoop.apache.org/hbase/docs/r0.19.3/metrics.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hadoop.apache.org/hbase/docs/r0.19.3/metrics.html&lt;/a&gt; so folks can learn how to use this new stuff (Good thing about a javadoc package-level doc. or an xdoc is that the doc rides along with its version as opposed to something like wiki where only latest is available).&lt;/p&gt;

&lt;p&gt;Looks great Andrew.&lt;/p&gt;</comment>
                            <comment id="12724981" author="apurtell" created="Sun, 28 Jun 2009 18:30:06 +0000"  >&lt;p&gt;I committed Stargate into src/contrib/stargate. The ant targets &lt;tt&gt;compile&lt;/tt&gt;, &lt;tt&gt;compile-test&lt;/tt&gt;, and &lt;tt&gt;test&lt;/tt&gt; are the only ones hooked up presently. Testing fails with minicluster problems, see &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1588&quot; title=&quot;Rig our build to support our new contribs -- stargate and THBase/ITHBase&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1588&quot;&gt;&lt;del&gt;HBASE-1588&lt;/del&gt;&lt;/a&gt;. The standalone dist up on github passes all tests. Will continue development there for now. &lt;/p&gt;</comment>
                            <comment id="12724988" author="apurtell" created="Sun, 28 Jun 2009 19:33:30 +0000"  >&lt;p&gt;Ok, tests are passing now. Need to hook up JAR and WAR packaging targets to kick off when &apos;ant package&apos; is executed and have the results dropped into the expected locations. &lt;/p&gt;</comment>
                            <comment id="12725006" author="stack" created="Sun, 28 Jun 2009 22:37:58 +0000"  >&lt;p&gt;See recent commit.&lt;/p&gt;

&lt;p&gt;Checkout how package target calls down to the contribs.  In package there&apos;ll be a subdir at $&lt;/p&gt;
{HADOOP_HOME}
&lt;p&gt; named &apos;contrib&apos; and there lined up should be transactional and stargate.  I&apos;d expect user could cd into stargate and then be in stargate world.&lt;/p&gt;

&lt;p&gt;Here is how the package target is passed down to contrib. currently:&lt;/p&gt;

&lt;p&gt;    &amp;lt;subant target=&quot;package&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;!--Pass down the version in case its needed again and the target&lt;br/&gt;
      distribution directory so contribs know where to install to.--&amp;gt;&lt;br/&gt;
      &amp;lt;property name=&quot;version&quot; value=&quot;$&lt;/p&gt;
{version}
&lt;p&gt;&quot;/&amp;gt;&lt;br/&gt;
      &amp;lt;property name=&quot;dist.dir&quot; value=&quot;$&lt;/p&gt;
{dist.dir}
&lt;p&gt;&quot;/&amp;gt;&lt;br/&gt;
      &amp;lt;fileset file=&quot;$&lt;/p&gt;
{contrib.dir}
&lt;p&gt;/build.xml&quot;/&amp;gt;&lt;br/&gt;
    &amp;lt;/subant&amp;gt;&lt;/p&gt;

&lt;p&gt;See the build*.xml that are in src/contrib top-level.  Mostly they just relay down the calls.  I believe that the build-contrib.xml should be included by contrib build.xml files &amp;#8211; see contribs in hadoop 0.19.x for examples (I&apos;ll be hooking up the &apos;transactional&apos; next so maybe wait till that is done for an example).&lt;/p&gt;

&lt;p&gt;Tests currently fail with this for me (r789164):&lt;/p&gt;

&lt;p&gt;    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Tests run: 6, Failures: 2, Errors: 0, Time elapsed: 29.308 sec&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; TEST org.apache.hadoop.hbase.stargate.TestRowResource FAILED&lt;/p&gt;
</comment>
                            <comment id="12725009" author="apurtell" created="Sun, 28 Jun 2009 23:07:39 +0000"  >&lt;p&gt;Committed a working &apos;package&apos; target.&lt;/p&gt;

&lt;p&gt;Can you put up the output of the test that is failing for you? They all pass for me. &lt;/p&gt;</comment>
                            <comment id="12725010" author="stack" created="Sun, 28 Jun 2009 23:12:26 +0000"  >&lt;p&gt;Andrew, I made small changes to your build.xml.  I added import of src/contrib/build-contrib.xml and changed the init and clean targets to instead be init-contrib and init-clean and let the imported build-contrib.xml do the work that stargate build.xml used to do.  Need to do the other targets.  How you think we should do the jar and war?  I can add a war target to the build-contrib.xml?&lt;/p&gt;

&lt;p&gt;Good stuff Andrew.&lt;/p&gt;</comment>
                            <comment id="12725012" author="apurtell" created="Sun, 28 Jun 2009 23:53:33 +0000"  >&lt;p&gt;I think I&apos;ve found the problem you&apos;re seeing with TestRowResource on a hunch. Will work on this / commit later.&lt;/p&gt;

&lt;p&gt;I don&apos;t think a war target is needed. How many contribs will be a servlet? The jar build can happen as would otherwise. The war build should be an extra rule added somewhere in stargate/build.xml. &lt;/p&gt;</comment>
                            <comment id="12746208" author="stack" created="Fri, 21 Aug 2009 20:39:05 +0000"  >&lt;p&gt;Can we close this issue?&lt;/p&gt;</comment>
                            <comment id="12746461" author="apurtell" created="Sat, 22 Aug 2009 14:05:37 +0000"  >&lt;p&gt;Concur to close this issue. Stargate is in contrib and the build is hooked up. Brian and I got in what we wanted. Several issues tagged &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;stargate&amp;#93;&lt;/span&gt;&quot; supersede this issue in jira now. &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12409507" name="stargate-0.0.1.zip" size="7960703" author="apurtell" created="Sun, 31 May 2009 18:13:26 +0000"/>
                            <attachment id="12409508" name="stargate-testing.pdf" size="145146" author="apurtell" created="Sun, 31 May 2009 18:13:26 +0000"/>
                            <attachment id="12409445" name="stargate.pdf" size="208732" author="apurtell" created="Sat, 30 May 2009 02:11:45 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 11 May 2009 13:45:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32117</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 17 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hd0v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>99372</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>