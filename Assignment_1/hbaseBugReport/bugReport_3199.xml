<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:08:12 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3199/HBASE-3199.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3199] large response handling: some fixups and cleanups</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3199</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;This may not be common for many use cases, but it might be good to put a couple of safety nets as well as logging to protect against large responses.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Aravind and I were trying to track down why JVM memory usage was oscillating so much when dealing with very large buffers rather than OOM&apos;ing or hitting some Index out of bound type exception, and this is what we found.&lt;/p&gt;

&lt;p&gt;java.io.ByteArrayOutputStream graduates its internal buffers by doubling them. Also, it is supposed to be able to handle &quot;int&quot; sized buffers (2G). The code which handles &quot;write&quot; (in jdk 1.6) is along the lines of:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void write(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; b[], &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; off, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; len) {
	&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((off &amp;lt; 0) || (off &amp;gt; b.length) || (len &amp;lt; 0) ||
            ((off + len) &amp;gt; b.length) || ((off + len) &amp;lt; 0)) {
	    &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IndexOutOfBoundsException();
	} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (len == 0) {
	    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
	}
        &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; newcount = count + len;
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (newcount &amp;gt; buf.length) {
            buf = Arrays.copyOf(buf, &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.max(buf.length &amp;lt;&amp;lt; 1, newcount));
        }
        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy(b, off, buf, count, len);
        count = newcount;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &quot;buf.length &amp;lt;&amp;lt; 1&quot; will start producing -ve values when buf.length reaches 1G, and &quot;newcount&quot; will instead dictate the size of the buffer allocated. At this point, all attempts to write to the buffer will grow linearly, and the buffer will be resized by only the required amount on each write. Effectively, each write will allocate a new 1G buffer + reqd size buffer, copy the contents, and so on. This will put the process in heavy GC mode (with jvm heap oscillating by several GBs rapidly), and render it practically unusable.&lt;/p&gt;

&lt;p&gt;(ii) When serializing a Result, the writeArray method doesn&apos;t assert that the resultant size does not overflow an &quot;int&quot;.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; bufLen = 0;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(Result result : results) {
      bufLen += Bytes.SIZEOF_INT;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(result == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || result.isEmpty()) {
        &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
      }
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(KeyValue key : result.raw()) {
        bufLen += key.getLength() + Bytes.SIZEOF_INT;
      }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We should do the math in &quot;long&quot; and assert on bufLen values &amp;gt; Integer.MAX_VALUE.&lt;/p&gt;

&lt;p&gt;(iii) In HBaseServer.java on RPC responses, we could add some logging on responses above a certain thresholds.&lt;/p&gt;

&lt;p&gt;(iv) Increase buffer size threshold for buffers that are reused by RPC handlers. And make this configurable. Currently, any response buffer about 16k is not reused on next response. (HBaseServer.java).&lt;/p&gt;


</description>
                <environment></environment>
        <key id="12479245">HBASE-3199</key>
            <summary>large response handling: some fixups and cleanups</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ryanobjc">ryan rawson</assignee>
                                    <reporter username="kannanm">Kannan Muthukkaruppan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 5 Nov 2010 18:35:03 +0000</created>
                <updated>Fri, 20 Nov 2015 12:43:35 +0000</updated>
                            <resolved>Tue, 9 Nov 2010 22:58:23 +0000</resolved>
                                                    <fixVersion>0.90.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12928741" author="kannanm" created="Fri, 5 Nov 2010 18:38:10 +0000"  >&lt;p&gt;For &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, the thought was to subclass ByteArrayOutputStream, and override the write method to something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void write(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; b[], &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; off, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; len) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((off &amp;lt; 0) || (off &amp;gt; b.length) || (len &amp;lt; 0) ||
        ((off + len) &amp;gt; b.length) || ((off + len) &amp;lt; 0)) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IndexOutOfBoundsException();
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (len == 0) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
    }

    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; newcount = count + len;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (newcount &amp;gt; buf.length) {
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; newSize = (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.min((((&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;)buf.length) &amp;lt;&amp;lt; 1),                &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; proposed change.
                                  (&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;)(&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.MAX_VALUE));      
      buf = Arrays.copyOf(buf, &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.max(newSize, newcount));
    }
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy(b, off, buf, count, len);
    count = newcount;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12928772" author="hairong" created="Fri, 5 Nov 2010 19:20:47 +0000"  >&lt;p&gt;After talking to Konstantin, we decided to create the throttler on the fly for each file transfer. This patch does this.&lt;/p&gt;</comment>
                            <comment id="12928774" author="hairong" created="Fri, 5 Nov 2010 19:22:24 +0000"  >&lt;p&gt;Oops, commented on the wrong jira. I wish that I could delete the previous comment.&lt;/p&gt;</comment>
                            <comment id="12928775" author="ryanobjc" created="Fri, 5 Nov 2010 19:22:33 +0000"  >&lt;p&gt;I have a fix for all that and more. Ill post it in 2 hours&lt;/p&gt;</comment>
                            <comment id="12928776" author="hairong" created="Fri, 5 Nov 2010 19:23:12 +0000"  >&lt;p&gt;newcount calculation should guard against overflow too.&lt;/p&gt;</comment>
                            <comment id="12928820" author="kannanm" created="Fri, 5 Nov 2010 21:10:32 +0000"  >&lt;p&gt;Prelim patch for review/merge with Ryan&apos;s work.&lt;/p&gt;

&lt;p&gt;Chatted with Ryan in IRC, and he has more in-depth fix to avoid the whole &quot;double the buffer as you grow&quot; approach and replace it with a &quot;precompute size of buffer in one pass and then alloc what you need&quot;. So a good portion of my patch might be superceded by his. Still submitting my  patch so that Ryan  can do the needed merge/union of parts in this patch that are orthogonal to his changes.&lt;/p&gt;</comment>
                            <comment id="12928864" author="ryanobjc" created="Fri, 5 Nov 2010 23:00:22 +0000"  >&lt;p&gt;here is my base patch, i&apos;ll merge in the other in a moment here&lt;/p&gt;</comment>
                            <comment id="12928871" author="ryanobjc" created="Fri, 5 Nov 2010 23:24:53 +0000"  >&lt;p&gt;looks like my patch does nearly everything yours does except handle extremely large size replies.  I&apos;m going to go thru that and use longs and also add some exceptions so that those calls should fail with IOEs instead of choke the regionserver.&lt;/p&gt;</comment>
                            <comment id="12928883" author="ryanobjc" created="Fri, 5 Nov 2010 23:48:31 +0000"  >&lt;p&gt;here is a new version which returns exceptions instead of weirdly failing for really large Result buffers.&lt;/p&gt;

&lt;p&gt;For super completeness this patch also needs to have WritableWithSize applied to the multi result object as well.  &lt;/p&gt;</comment>
                            <comment id="12929084" author="kannanm" created="Sat, 6 Nov 2010 17:01:13 +0000"  >&lt;p&gt;Ryan,&lt;/p&gt;

&lt;p&gt;Looks awesome. Nice work eliminating a bunch of copies. Few minor comments:&lt;/p&gt;

&lt;p&gt;1) In the size computation:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; size = kvs.length;                                           &amp;lt;&amp;lt;&amp;lt;&amp;lt; The &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&quot;&lt;/span&gt; per key is accounted &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; in the loop below.
+    size *= Bytes.SIZEOF_INT; &lt;span class=&quot;code-comment&quot;&gt;// 1 &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; each kv.   &amp;lt;&amp;lt;&amp;lt; So &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; seems unnecessaru/
&lt;/span&gt;+
+    size += Bytes.SIZEOF_INT;
+
+    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (KeyValue kv : kvs) {
+      size += kv.getLength() + Bytes.SIZEOF_INT;
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2) checkSizeAndGrow() could probably use some protection against Integer.MAX_VALUE overflow.  (Similar to what my patch does in the HBaseByteArrayOutputStream:write() methods).&lt;/p&gt;

&lt;p&gt;3) Will you be adding the &quot;log responses above a configurable threshold&quot; changes from my patch?&lt;/p&gt;

</comment>
                            <comment id="12929087" author="kannanm" created="Sat, 6 Nov 2010 17:02:49 +0000"  >&lt;p&gt;My first comment above didn&apos;t format correctly...&lt;/p&gt;

&lt;p&gt;1) in the size computation for Result.write() case, the &quot;int&quot; per kv is accounted for in the loop already. So it seems like we are double counting for those.&lt;/p&gt;</comment>
                            <comment id="12929446" author="ryanobjc" created="Mon, 8 Nov 2010 04:25:49 +0000"  >&lt;p&gt;1. you are totally correct here!  I fixed that... I had also fixed it in a subsequent patch in my git.&lt;/p&gt;

&lt;p&gt;2. We won&apos;t need explicit protection, we get it from ByteBuffer.allocate(). &lt;/p&gt;

&lt;p&gt;3. what is the motivation for this feature?  could add it, but im not seeing the use case personally. &lt;/p&gt;</comment>
                            <comment id="12929451" author="kannanm" created="Mon, 8 Nov 2010 05:12:07 +0000"  >&lt;p&gt;#3 is mainly for debuggability. If there are some bad queries this&apos;ll help debug what the RPC and its params were. &lt;/p&gt;

&lt;p&gt;#2. In checkSizeAndGrow(): &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     ByteBuffer newBuf = ByteBuffer.allocate(buf.capacity() * 2);    &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; overflow possible when we reach 1G range.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;         

&lt;p&gt;When buf.capacity() say reaches 1G + something, buf.capacity() * 2 will become negative. It is not clear what ByteBuffer.allocate() will do, but we don&apos;t want this case to cause an exception since 1G + something is still within an &quot;int&quot;. At this point, we should resize to 2G (since we can&apos;t go past 2G).&lt;/p&gt;

&lt;p&gt;So,how about something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 ByteBuffer newBuf = ByteBuffer.allocate((&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.min(  (&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;)buf.capacity() * 2,
                                                                                                     (&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;)(&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.MAX_VALUE)));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


</comment>
                            <comment id="12929452" author="kannanm" created="Mon, 8 Nov 2010 05:13:46 +0000"  >&lt;p&gt;Reassigning to you since it is pretty much going to be your patch.&lt;/p&gt;</comment>
                            <comment id="12929708" author="kannanm" created="Mon, 8 Nov 2010 20:10:38 +0000"  >&lt;p&gt;Seeing this in testing:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2010-11-08 11:42:10,380 INFO org.apache.hadoop.ipc.HBaseServer: IPC Server handler 15 on 62469 caught: java.lang.NullPointerException
        at org.apache.hadoop.hbase.io.HbaseObjectWritable.getWritableSize(HbaseObjectWritable.java:301)
        at org.apache.hadoop.hbase.io.HbaseObjectWritable.getWritableSize(HbaseObjectWritable.java:235)
        at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:933)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Seems like &quot;instance&quot; inside HBaseObjectWritable can be null, and the code is currently not safely handling that case.&lt;/p&gt;</comment>
                            <comment id="12929712" author="kannanm" created="Mon, 8 Nov 2010 20:21:03 +0000"  >&lt;p&gt;I think we need something like this at the beginning of HbaseObjectWritable.java:getWritableSize()&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (instance == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 0L; &lt;span class=&quot;code-comment&quot;&gt;// no hint is the &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;
&lt;/span&gt;    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12929723" author="kannanm" created="Mon, 8 Nov 2010 20:44:52 +0000"  >&lt;p&gt;Ryan: &lt;/p&gt;

&lt;p&gt;In my testing, we are still going in the resize (buffer doubling code) even for the Result &quot;write&quot;. I think there is still some off by one error which is causing us to do one extra doubling/copy than necessary.&lt;/p&gt;

&lt;p&gt;Looking....&lt;/p&gt;</comment>
                            <comment id="12929758" author="ryanobjc" created="Mon, 8 Nov 2010 21:56:00 +0000"  >&lt;p&gt;a patch with fixes and implements all of kannan&apos;s suggestions&lt;/p&gt;</comment>
                            <comment id="12929793" author="kannanm" created="Mon, 8 Nov 2010 22:53:04 +0000"  >&lt;p&gt;+1 on latest patch. The off by one errors seem gone. Am running the unit tests as well right now.&lt;/p&gt;</comment>
                            <comment id="12929955" author="stack" created="Tue, 9 Nov 2010 05:00:31 +0000"  >&lt;p&gt;Marking patch available and bringing into 0.90.0.  Important bug fix.&lt;/p&gt;</comment>
                            <comment id="12930159" author="kannanm" created="Tue, 9 Nov 2010 15:21:02 +0000"  >&lt;p&gt;Stack: Please note there were two more int overflow type fixes that Aravind &amp;amp; Hairong pointed out. Have communicated that to Ryan. He&apos;ll upload a revised patch.&lt;/p&gt;</comment>
                            <comment id="12930338" author="ryanobjc" created="Tue, 9 Nov 2010 22:58:23 +0000"  >&lt;p&gt;resolved, thanks for the reviews and suggestions.  All feedback has been rolled into the committed patch (which was not published to jira).&lt;/p&gt;</comment>
                            <comment id="15017563" author="lars_francke" created="Fri, 20 Nov 2015 12:43:35 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12458973" name="HBASE-3199-2.txt" size="12237" author="ryanobjc" created="Fri, 5 Nov 2010 23:48:31 +0000"/>
                            <attachment id="12459033" name="HBASE-3199-3.txt" size="12199" author="ryanobjc" created="Mon, 8 Nov 2010 04:26:09 +0000"/>
                            <attachment id="12459090" name="HBASE-3199-4.txt" size="13608" author="ryanobjc" created="Mon, 8 Nov 2010 21:56:00 +0000"/>
                            <attachment id="12458966" name="HBASE-3199.txt" size="11859" author="ryanobjc" created="Fri, 5 Nov 2010 23:00:22 +0000"/>
                            <attachment id="12458954" name="HBASE-3199_prelim.txt" size="10958" author="kannanm" created="Fri, 5 Nov 2010 21:10:32 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 5 Nov 2010 19:20:47 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>26706</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hl5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100688</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>