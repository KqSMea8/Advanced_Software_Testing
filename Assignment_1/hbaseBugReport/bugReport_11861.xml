<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:27:20 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-11861/HBASE-11861.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-11861] Native MOB Compaction mechanisms.</title>
                <link>https://issues.apache.org/jira/browse/HBASE-11861</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Currently, the first cut of mob will have external processes to age off old mob data (the ttl cleaner), and to compact away deleted or over written data (the sweep tool).  &lt;/p&gt;

&lt;p&gt;From an operational point of view, having two external tools, especially one that relies on MapReduce is undesirable.  In this issue we&apos;ll tackle integrating these into hbase without requiring external processes.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12737853">HBASE-11861</key>
            <summary>Native MOB Compaction mechanisms.</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12721032">HBASE-11339</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jingcheng.du@intel.com">Jingcheng Du</assignee>
                                    <reporter username="jmhsieh">Jonathan Hsieh</reporter>
                        <labels>
                    </labels>
                <created>Fri, 29 Aug 2014 17:28:05 +0000</created>
                <updated>Wed, 22 Jul 2015 22:48:40 +0000</updated>
                            <resolved>Fri, 6 Feb 2015 14:18:47 +0000</resolved>
                                    <version>2.0.0</version>
                                    <fixVersion>hbase-11339</fixVersion>
                                    <component>regionserver</component>
                    <component>Scanners</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="14115537" author="jmhsieh" created="Fri, 29 Aug 2014 17:34:15 +0000"  >&lt;p&gt;Two straw man suggestions.&lt;/p&gt;

&lt;p&gt;1) Integrate the TTL cleaner as a Chore that the master runs periodically (once every 24 hours by default?)&lt;/p&gt;

&lt;p&gt;2) Explore ideas to enable a per mob hfile sweep (traverse back to natural hbase row do some sort of bulk load with all the new pointers) so that we can compact without using mr.&lt;/p&gt;</comment>
                            <comment id="14129404" author="jmhsieh" created="Thu, 11 Sep 2014 00:03:45 +0000"  >&lt;p&gt;integrating the ttl cleaner as a chore is implemented in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11644&quot; title=&quot;External MOB compaction tools&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11644&quot;&gt;&lt;del&gt;HBASE-11644&lt;/del&gt;&lt;/a&gt; &amp;#8211; so we can ignore that suggestion in this issue.&lt;/p&gt;</comment>
                            <comment id="14188524" author="jmhsieh" created="Wed, 29 Oct 2014 16:28:11 +0000"  >&lt;p&gt;Attached is a pictorial design of the proposed core mob compaction mechanism.&lt;/p&gt;</comment>
                            <comment id="14228118" author="jingcheng.du@intel.com" created="Fri, 28 Nov 2014 07:21:50 +0000"  >&lt;p&gt;Hi Jon &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;, in this design, we will have a del file. So what&apos;re saved in such a file? The deleted cells or the delete markers?&lt;br/&gt;
If they&apos;re the deleted cells, it&apos;s easy to know which mob file owns these deleted cells.&lt;br/&gt;
If they&apos;re delete markers, it&apos;s hard for this.&lt;br/&gt;
So in the design which are included in the del file? Please advise. Thanks.&lt;/p&gt;</comment>
                            <comment id="14231062" author="jingcheng.du@intel.com" created="Tue, 2 Dec 2014 06:30:25 +0000"  >&lt;p&gt;Ping Jon &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;. Please advise for the above comment. Thanks.&lt;/p&gt;</comment>
                            <comment id="14231409" author="jmhsieh" created="Tue, 2 Dec 2014 12:29:30 +0000"  >&lt;p&gt;I was thinking the deleted cells. Basically we&apos;d modify the scanner so that when we normally get a skip ahead we&apos;d start tracking the cells to write to the deleted cells hfile.  This would be part of the mob scanner and may require some refactoring of the scanner that it is derived from.&lt;/p&gt;
</comment>
                            <comment id="14232516" author="jingcheng.du@intel.com" created="Wed, 3 Dec 2014 03:20:01 +0000"  >&lt;p&gt;Got it, thanks Jon &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;.&lt;br/&gt;
Since in hbase minor compaction, there&apos;re cells deleted, we need to customize the minor compaction for the mob column that we should keep all the deleted cells and only merge small hfiles to bigger one in the minor compaction. And the cells will be deleted in the major compaction when we create the del files. Does it sound ok?&lt;/p&gt;</comment>
                            <comment id="14232784" author="jingcheng.du@intel.com" created="Wed, 3 Dec 2014 08:47:17 +0000"  >&lt;p&gt;Besides, we need to include the deleted cells in the output of the scanner, so how to differentiate the normal and deleted ones? Is it ok to add a new KeyValue.Type (how about DeletedCells)? Please advise. Thanks. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14232787" author="jingcheng.du@intel.com" created="Wed, 3 Dec 2014 08:52:18 +0000"  >&lt;p&gt;Hi Jon &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;, please ignore my last comment about the new KeyValue.Type. I think we could directly add a new API for the MobStoreScanner to add a new argument for the deleted cells, the API looks like&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; next(List&amp;lt;Cell&amp;gt; outResult, List&amp;lt;Cell&amp;gt; deletedCell, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; limit) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14234045" author="jingcheng.du@intel.com" created="Thu, 4 Dec 2014 09:08:41 +0000"  >&lt;p&gt;Upload the high level design for the mob compaction.&lt;br/&gt;
Hi all, please review and comment. Thanks a lot!&lt;/p&gt;</comment>
                            <comment id="14235263" author="jingcheng.du@intel.com" created="Fri, 5 Dec 2014 08:30:18 +0000"  >&lt;p&gt;Hi Jon &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jon%40cloudera.com&quot; class=&quot;user-hover&quot; rel=&quot;jon@cloudera.com&quot;&gt;Jonathan Hsieh&lt;/a&gt;, do you want to look at the high level design for the mob compaction? Thanks.&lt;/p&gt;</comment>
                            <comment id="14235867" author="jmhsieh" created="Fri, 5 Dec 2014 18:41:02 +0000"  >&lt;p&gt;thanks for doign the writeup.  High level I think need to define some invariants before we go into all the rules and procedures.&lt;/p&gt;

&lt;p&gt;here are some thoughts and questions:&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Overview:&lt;br/&gt;
0) when we do a mob compaction, are we compacting all mobs or just mobs relevant to a particular region?  &lt;/p&gt;

&lt;p&gt;1) I don&apos;t think mob compaction has to happen after major compactions.  It could have its own schedule and could run less frequently than the normal major compactions.  Doing them after a major compaction (or after a few) is reasonable first cut.&lt;/p&gt;

&lt;p&gt;2) cells deleted in minor compaction are ttl related?&lt;/p&gt;

&lt;p&gt;3) why should hfile link&apos;s be rewritten?  I think we can use the same critieria to decide on if we do a mob compaction on it.&lt;/p&gt;

&lt;p&gt;how to find candidate:&lt;/p&gt;

&lt;p&gt;4) I don&apos;t think we want to scan all the mob files to do a compaction on a single store.  Also, because of splits and merges, there could be other del mob files that are relevant that have a start key earlier or later that cover the range in a particular store. I think we&apos;ll have to do some start key and end key tracking in the delmob files and the mob files to reduce the candidate list.&lt;/p&gt;

&lt;p&gt;How to find invalid mob files:&lt;/p&gt;

&lt;p&gt;5) why do a mini del file compaction?  why not just use it as is?&lt;/p&gt;

&lt;p&gt;6) deletedCellsSizeInOneMobFile &amp;#8211; interesting.  I was thinking just a count of mobs associated with each mob file.&lt;/p&gt;

&lt;p&gt;How to find the small file?&lt;/p&gt;

&lt;p&gt;7) on merge &amp;#8211; shouldn&apos;t we try to guarantee time order in a merge so that the ttl cleaner is still effective?&lt;/p&gt;

&lt;p&gt;how to handle split?&lt;/p&gt;

&lt;p&gt;8) I&apos;m not clear about the splits case here.  Also does it manage merges?  (say we have a single del file with deletes in rows a b c d.  that region gets split into a b and c d, and then again into separate a, b, c, and d regions.  finally someone does a merge for b and c to create a bc region.  Does the grouping on hash idea break then?  &lt;/p&gt;

&lt;p&gt;I think we need to either track both the start and end keys in the del files and likely the mobfiles.  An alternative is somethign that splits mob flies and del files but that potentially causes write amplificaiton we want to avoid.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;My gut feeling is that we need to deal with all mob files, iterate through ranges, and use mob counts.  We&apos;d track start/end keys and counts in each mob file and each del file.  We could then iterate on mob files, and select nonly the del files that are relevant based on the start keys and end keys. We might want to track a histogram (count or size) of mob files deletions for  particular mob file in each del file.   &lt;/p&gt;</comment>
                            <comment id="14237612" author="jingcheng.du@intel.com" created="Mon, 8 Dec 2014 08:31:02 +0000"  >&lt;p&gt;Thanks Jon &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jon%40cloudera.com&quot; class=&quot;user-hover&quot; rel=&quot;jon@cloudera.com&quot;&gt;Jonathan Hsieh&lt;/a&gt; for the comments.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;0) when we do a mob compaction, are we compacting all mobs or just mobs relevant to a particular region?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Just relevant to a particular region.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;1) I don&apos;t think mob compaction has to happen after major compactions. It could have its own schedule and could run less frequently than the normal major compactions. Doing them after a major compaction (or after a few) is reasonable first cut.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree.&lt;br/&gt;
But it&apos;s better to compact the mob files in each region since we have to synchronize the major compaction and mob compaction to avoid the race condition. The way we do in the sweep tool is to use zookeeper. If we do the mob compaction in region, we could do it in locks.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;3) why should hfile link&apos;s be rewritten? I think we can use the same critieria to decide on if we do a mob compaction on it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agree.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;4) I don&apos;t think we want to scan all the mob files to do a compaction on a single store. Also, because of splits and merges, there could be other del mob files that are relevant that have a start key earlier or later that cover the range in a particular store. I think we&apos;ll have to do some start key and end key tracking in the delmob files and the mob files to reduce the candidate list.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I thought we could only list the mob file names from NN. But we only get the md5 of a start key, not the exact start key.&lt;br/&gt;
You&apos;re right, if the regions are merged, we could not find the related mob files at all only by the md5 of the start key.&lt;br/&gt;
Currently we have the start key and stop key in the metadata of hfiles. It means we could not get them only by the file names, but need to open readers to the files.&lt;br/&gt;
Do you have ideas on this to track the start and stop key besides reading the metadata, to revise the pattern of a mob file name? Please advise. Thanks.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;5) why do a mini del file compaction? why not just use it as is?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Is that possible there are too many delmob files? If not, we could directly open scanners to these delmob files.&lt;br/&gt;
Jon, do you have comments for the way to map the file names to deleted cells?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;6) deletedCellsSizeInOneMobFile &#8211; interesting. I was thinking just a count of mobs associated with each mob file.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Count is a good idea. But currently we don&apos;t have the accurate count information in the mob and del mob file. As you know we have threshold for the mob, we could not know how many of them are mob cells, how many are not. That&apos;s a problem, right?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;7) on merge &#8211; shouldn&apos;t we try to guarantee time order in a merge so that the ttl cleaner is still effective?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Right, we should guarantee time order in a merge, I missed that in the design.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;8) I&apos;m not clear about the splits case here. Also does it manage merges? (say we have a single del file with deletes in rows a b c d. that region gets split into a b and c d, and then again into separate a, b, c, and d regions. finally someone does a merge for b and c to create a bc region. Does the grouping on hash idea break then?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sorry, I missed the merge case. In order to get the start/stop keys information, we have to read the mob files instead of file names in each region now.&lt;br/&gt;
The region split and merge case will be handled in mob compaction by regions.&lt;br/&gt;
For split, If the start key of a mob file is between the start and stop keys of a region, this mob file is handled by this region. This mob file might cross regions by checking the its stop key. If this mob file crosses regions, it will create two/or more ref file for each daughter regions. Each of the ref file is handled in the mob compaction of daughter regions.&lt;br/&gt;
For merges, the files are not across regions, we directly select the mob files if they&apos;re qualified (small or invalid) owned by the current region.&lt;br/&gt;
in the mob compaction of a b,  if a mob file file#1 is selected we need create two ref files, one for a b named ref-ab-file#1, the other is for c d named ref-cd-file#1 (If a mob file is not selected, we don&apos;t need to create them at all). The ref file ref-ab-file#1 s handled in the mob compaction of a b to generate a new mob file file#1ab, the ref-bc-file#1 is handled in the mob compaction of c d to generate the mob file file#1cd.&lt;br/&gt;
After the region ab is split, if( and only if) the file file#1ab is selected in the mob compaction of region a, the new ref files are created and handled by region a and region b.&lt;br/&gt;
For merge, it&apos;s easier than the split, directly select the small or invalid mob files whose start/stop keys are between the key range of the current region.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think we need to either track both the start and end keys in the del files and likely the mobfiles. An alternative is somethign that splits mob flies and del files but that potentially causes write amplificaiton we want to avoid.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agree, we should track the start and stop keys. Now we track them in the metadata of mob files. Do we need to track them in the file name by directly using the hex string of start/stop key instead of md5(startkey)? So we could know the start/stop keys directly the file names whereas currently we have to read the metadata of the mob files. Please advise. Thanks.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My gut feeling is that we need to deal with all mob files, iterate through ranges, and use mob counts. We&apos;d track start/end keys and counts in each mob file and each del file. We could then iterate on mob files, and select nonly the del files that are relevant based on the start keys and end keys. We might want to track a histogram (count or size) of mob files deletions for particular mob file in each del file.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Currently we track the start/stop keys in the metadata of mob files. But it&apos;s hard to track the counts in each mob file since we have threshold for the mob cells.&lt;br/&gt;
In this design doc, the mob compaction is handled in each region, it means only part of mob files (owned by the current region) could be handled each time.&lt;br/&gt;
Instead, we could also do the mob compaction globally (in one single place) for all the mob files. But how to avoid the race condition between the major compaction and mob compaction for this? Still use the zookeeper?&lt;br/&gt;
Since the major compaction and mob compaction are not frequent, and deletion is rare in the mob cases, could we ignore the race condition directly? Please advise. Thanks.&lt;/p&gt;</comment>
                            <comment id="14240817" author="jingcheng.du@intel.com" created="Wed, 10 Dec 2014 08:36:37 +0000"  >&lt;p&gt;Hi Jon &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;, some further comments.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I don&apos;t think we want to scan all the mob files to do a compaction on a single store. Also, because of splits and merges, there could be other del mob files that are relevant that have a start key earlier or later that cover the range in a particular store. I think we&apos;ll have to do some start key and end key tracking in the delmob files and the mob files to reduce the candidate list.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Actually we could scan all the mob files (read the start/stop keys from the metadata of each file) in the region server, region could read these information from the region server.&lt;br/&gt;
For the del file across regions, we need to create ref files for them just like the way for normal mob files.&lt;br/&gt;
In each store, all of the file whose start key is between start/stop keys of the current region are owned by the current region. They will be candidates for the mob compaction. Then we will find the small files in these candidates, then we will scan the del file to find the invalid files. After that we&apos;ll rewrite them to a new mob file.&lt;/p&gt;

&lt;p&gt;Hi Jon, In your ideas, where should we run the mob compaction? In each region or in a single place for example HMaster? Please advise. Thanks.&lt;/p&gt;</comment>
                            <comment id="14240938" author="anoop.hbase" created="Wed, 10 Dec 2014 11:03:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;where should we run the mob compaction? In each region or in a single place for example HMaster?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Single place like HM won&apos;t be good IMO.  It should be distributed across RSs.&lt;/p&gt;</comment>
                            <comment id="14241422" author="jmhsieh" created="Wed, 10 Dec 2014 17:35:11 +0000"  >&lt;p&gt;This is a good discussion &amp;#8211; I&apos;ll spend some time designing out alternatives in more detail today and come back with some alternatives to consider (single region or globlal, locations for delmobs and potential race conditions). I would like to note that there are some pieces that could be implemented while this is going on (e.g. the code for modifying the compaction scan to write del mob lists will be the same regardless of where different actions end up happening).  &lt;/p&gt;

&lt;p&gt;I was initially thinking a global mob compaction, that would scan the set of del mob files once and only rewrite some regions.  The HM would keep a summary of the delmob files in memory and figure out which mobs need to rewritten,  and  for a first cut the HM would do the IO heavy portions since it is simpler and might be sufficient . If that isn&apos;t the case, then we&apos;d have the hm farm compaction work out to make the process distributed using either the procedure (my vote since &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt; is doing work over there) or distributed log splitting infrastructure to coordinate.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;But it&apos;s better to compact the mob files in each region since we have to synchronize the major compaction and mob compaction to avoid the race condition. The way we do in the sweep tool is to use zookeeper. If we do the mob compaction in region, we could do it in locks.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;With the del mob hfile approach, I&apos;m not sure if there is a race condition between major compactions and mob compactions.  In the 141030 attachmentv illustrated on slide #23 , we use bulk loading of new mobs and new references, and then use hfile links (or something like them) when reading mobs so that we point to the original mobs or archived mobs (similar to snapshots).   This avoid the need for zk locks or and only uses the region locks already hardened in the bulk load process. .&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You&apos;re right, if the regions are merged, we could not find the related mob files at all only by the md5 of the start key.&lt;br/&gt;
Currently we have the start key and stop key in the metadata of hfiles. It means we could not get them only by the file names, but need to open readers to the files.&lt;br/&gt;
Do you have ideas on this to track the start and stop key besides reading the metadata, to revise the pattern of a mob file name? Please advise. Thanks.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we&apos;d need to revise the pattern on the del mob file name  &amp;#8211; it would likely need a tuple of (start key, end key, start key, # unique mobs), These cells would have pointers to the particular files so we could gather counts of how many cells are being deleted.  We might be able to get away with not changing the format / name of the mob files themselves.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is that possible there are too many delmob files? If not, we could directly open scanners to these delmob files.&lt;br/&gt;
Jon, do you have comments for the way to map the file names to deleted cells?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This I don&apos;t really know &amp;#8211; let&apos;s do a back of the envelope.&lt;/p&gt;

&lt;p&gt;We create a del mob file per region compaction (major, and potentially minor due to ttl age offs).  Worst case we delete exactly one mob per compaction.  Assuming 1MB / mob, we might have to have 500 del mobs to meet a 50% threshold on  a 1GB mob file (and this is per region).  That is a lot of files.&lt;/p&gt;

&lt;p&gt;So I agree, this sounds like this would be a potential problem. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sorry, I missed the merge case. In order to get the start/stop keys information, we have to read the mob files instead of file names in each region now.&lt;br/&gt;
The region split and merge case will be handled in mob compaction by regions.&lt;br/&gt;
For split, If the start key of a mob file is between the start and stop keys of a region, this mob file is handled by this region. This mob file might cross regions by checking the its stop key. If this mob file crosses regions, it will create two/or more ref file for each daughter regions. Each of the ref file is handled in the mob compaction of daughter regions.&lt;br/&gt;
For merges, the files are not across regions, we directly select the mob files if they&apos;re qualified (small or invalid) owned by the current region.&lt;br/&gt;
in the mob compaction of a b, if a mob file file#1 is selected we need create two ref files, one for a b named ref-ab-file#1, the other is for c d named ref-cd-file#1 (If a mob file is not selected, we don&apos;t need to create them at all). The ref file ref-ab-file#1 s handled in the mob compaction of a b to generate a new mob file file#1ab, the ref-bc-file#1 is handled in the mob compaction of c d to generate the mob file file#1cd.&lt;br/&gt;
After the region ab is split, if( and only if) the file file#1ab is selected in the mob compaction of region a, the new ref files are created and handled by region a and region b.&lt;br/&gt;
For merge, it&apos;s easier than the split, directly select the small or invalid mob files whose start/stop keys are between the key range of the current region.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think we can have something simpler if we use a different approach.  We know these invariants:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The del mobs have the names of the mob files.&lt;/li&gt;
	&lt;li&gt;Splits or merges do not affect the mob files at all.  (doing del mobs should decouple major compactions for mob compactions).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If we do a scan on the del mobs instead of the mob files, we could get counts in specific mob files  and figure out which mob files to rewrite/compact with other mob files.  Using the reference bulk load mentioned early, we don&apos;t even have to worry about splits or merges of the normal regions.&lt;/p&gt;

&lt;p&gt;This has me really leaning more and more towards a global delmob scan on the master to id mob hfiles to compact as opposed to a per region approach.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Currently we track the start/stop keys in the metadata of mob files. But it&apos;s hard to track the counts in each mob file since we have threshold for the mob cells.&lt;br/&gt;
In this design doc, the mob compaction is handled in each region, it means only part of mob files (owned by the current region) could be handled each time.&lt;br/&gt;
Instead, we could also do the mob compaction globally (in one single place) for all the mob files. But how to avoid the race condition between the major compaction and mob compaction for this? Still use the zookeeper?&lt;br/&gt;
Since the major compaction and mob compaction are not frequent, and deletion is rare in the mob cases, could we ignore the race condition directly? Please advise. Thanks.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the bulk load approach avoids the potential race on mob compaction and normal compaction.  There might be the case where a new delmob shows up while a mob compaction is happening but we&apos;d just need to keep the list of del mobs we are reading when we do the del mob scan so that we don&apos;t accidentalkly remove new  del mobs a normal compaction would create while a mob compaction was happening.&lt;/p&gt;</comment>
                            <comment id="14241427" author="jmhsieh" created="Wed, 10 Dec 2014 17:36:17 +0000"  >&lt;p&gt;I&apos;ll do a writeup of the cartoon version I posted a while back addressing race condtions, where different actions happen and how we could dole out compaction work across the cluster.&lt;/p&gt;</comment>
                            <comment id="14242256" author="jingcheng.du@intel.com" created="Thu, 11 Dec 2014 07:12:43 +0000"  >&lt;p&gt;Thanks Jon. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I think the bulk load approach avoids the potential race on mob compaction and normal compaction.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think we still have the race condition even if we use the bulkload in mob compaction.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;We have a mob cell#1 in the hbase.&lt;/li&gt;
	&lt;li&gt;Now the mob compaction happens, and the mob file file#1 which has the cell#1 is merged into a bigger file file#2. and we write this new cell#1 with value file#2(use the file name) into a new store file, but not start to bulkload yet.&lt;/li&gt;
	&lt;li&gt;Users delete cell#1, and major compaction happens then, this cell#1 is not existent in the HBase.&lt;/li&gt;
	&lt;li&gt;The mob compaction bulkloads this new store file.&lt;/li&gt;
	&lt;li&gt;The cell#1 is back to the HBase again.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This is why I insist to run the mob compaction in regions. If we do the mob compaction out of region or across regions, we have to locks the major compactions globally.&lt;/p&gt;</comment>
                            <comment id="14242278" author="jingcheng.du@intel.com" created="Thu, 11 Dec 2014 07:34:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;We create a del mob file per region compaction (major, and potentially minor due to ttl age offs).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There&apos;re deleted cells in the minor compaction where only delete markers are retained, all the earlier cells will be deleted.&lt;br/&gt;
I think we could leave the expired(live longer than TTL) cells out of the del files. Let the ExpiredMobFileCleaner to handle those mob files directly.&lt;br/&gt;
Please advise. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;. Thanks!&lt;/p&gt;</comment>
                            <comment id="14247845" author="jingcheng.du@intel.com" created="Tue, 16 Dec 2014 06:36:19 +0000"  >&lt;p&gt;Hi Jon, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;, currently we don&apos;t have count information in the mob file, I think it&apos;s better to have it in the metadata of each mob file. I&apos;ll open another JIRA to implement that. Thanks.&lt;/p&gt;</comment>
                            <comment id="14248395" author="jmhsieh" created="Tue, 16 Dec 2014 15:56:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;This is why I insist to run the mob compaction in regions. If we do the mob compaction out of region or across regions, we have to locks the major compactions globally.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;nice catch on that race condition &amp;#8211; I buy it.  This is essentially the same as with the MR sweeper approach right? &lt;/p&gt;

&lt;p&gt;So we&apos;d need to guarantee that the compacted mob and the bulkload of the new references block a major compaction on the region that the ref bulk load is happening on.   This means no major compactions before step #2, but allowed after step #4.  &lt;/p&gt;

&lt;p&gt;Let&apos;s spell out the costs of the different approaches. &amp;#8211; the del mob global scan for the mob compaction approach and the per region mob compaction. &lt;/p&gt;

&lt;p&gt;Meanwhile I noticed you file a new jira for counts and I filed one for the del mob generator.  We can get code started on those, and hash out this higher level design while doing so.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think we could leave the expired(live longer than TTL) cells out of the del files. Let the ExpiredMobFileCleaner to handle those mob files directly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;sounds reasonable.  We need to enforce the mob file time ordering though to make sure the mob compaction is effective.&lt;/p&gt;
</comment>
                            <comment id="14249349" author="jingcheng.du@intel.com" created="Wed, 17 Dec 2014 02:40:03 +0000"  >&lt;p&gt;Upload the high-level design for the out-of-region compaction.&lt;/p&gt;</comment>
                            <comment id="14249500" author="jingcheng.du@intel.com" created="Wed, 17 Dec 2014 05:27:14 +0000"  >&lt;p&gt;The high level design for the mob compaction out-of-regions, and the cons and pros are listed in the document as well.&lt;/p&gt;</comment>
                            <comment id="14280021" author="jingcheng.du@intel.com" created="Fri, 16 Jan 2015 09:25:07 +0000"  >&lt;p&gt;Upload the first patch without test cases. Please help review. Thank a lot!&lt;/p&gt;</comment>
                            <comment id="14280023" author="jingcheng.du@intel.com" created="Fri, 16 Jan 2015 09:26:58 +0000"  >&lt;p&gt;Currently we choose the compaction approach that is out of region and have del files with only delete markers. Thanks.&lt;/p&gt;</comment>
                            <comment id="14280024" author="jingcheng.du@intel.com" created="Fri, 16 Jan 2015 09:27:48 +0000"  >&lt;p&gt;The patch is also uploaded in RB, you could find it through the link &lt;a href=&quot;https://reviews.apache.org/r/29963/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/29963/&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14283624" author="jingcheng.du@intel.com" created="Tue, 20 Jan 2015 09:16:22 +0000"  >&lt;p&gt;Upload the patch V1. Add unit tests, and refine the code according to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=yuzhihong%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;yuzhihong@gmail.com&quot;&gt;Ted Yu&lt;/a&gt; &apos;s comments.&lt;br/&gt;
1. Add more javadoc to the code.&lt;br/&gt;
2. Rename the class names.&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="14285400" author="jingcheng.du@intel.com" created="Wed, 21 Jan 2015 09:35:32 +0000"  >&lt;p&gt;Update the patch according to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=yuzhihong%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;yuzhihong@gmail.com&quot;&gt;Ted Yu&lt;/a&gt; &apos;s comments.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;some improvements in the comments.&lt;/li&gt;
	&lt;li&gt;change some methods from the recursion to iteration.&lt;br/&gt;
Thanks.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="14292933" author="jingcheng.du@intel.com" created="Tue, 27 Jan 2015 03:51:42 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoopsamjohn&quot; class=&quot;user-hover&quot; rel=&quot;anoopsamjohn&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, please help look at it. Thanks a lot!&lt;/p&gt;</comment>
                            <comment id="14293278" author="anoop.hbase" created="Tue, 27 Jan 2015 10:07:38 +0000"  >&lt;p&gt;Left some comments in RB&lt;/p&gt;

&lt;p&gt;major issue/Qs.. &lt;br/&gt;
Now the actual compaction is done by the chore thread itself. Instead the actual compact operation can be given to a pool of threads?  &lt;br/&gt;
The compaction work is done by master!  Can this be distributed to RSs.  (Even when we have multi threaded MOB compaction, we have to make sure that all the compaction is not running at once which will cause high IO)&lt;br/&gt;
We will have to give Admin APIs and shell support for the MOB compaction?&lt;/p&gt;</comment>
                            <comment id="14294214" author="jmhsieh" created="Tue, 27 Jan 2015 21:27:42 +0000"  >&lt;p&gt;I think for a first cut having the master do the mob compactions is reasonable.  Distributing the work will make this siginficatly more complicated but would be a good follow on.  (this will follow the life cycling similar to log splitting &amp;#8211; initially used MR, then on master, and then later distributed).  &lt;/p&gt;

&lt;p&gt;I&apos;m also thinking that with some of the notification bus ideas, it would be better to us that instead of piggy backing off the distributed log splitting mechanism or writing infrastructure to do distributed mob compaction.&lt;/p&gt;</comment>
                            <comment id="14296336" author="jingcheng.du@intel.com" created="Thu, 29 Jan 2015 03:38:31 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoopsamjohn&quot; class=&quot;user-hover&quot; rel=&quot;anoopsamjohn&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt; for the comments.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Now the actual compaction is done by the chore thread itself. Instead the actual compact operation can be given to a pool of threads? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I was thinking that. It&apos;s worth a try. Compact different partitions concurrently. What&apos;s your opinion for this? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;. Thanks.&lt;/p&gt;</comment>
                            <comment id="14296596" author="jingcheng.du@intel.com" created="Thu, 29 Jan 2015 08:50:02 +0000"  >&lt;p&gt;Think about the thread pool thing in the mob file compaction.&lt;br/&gt;
As you know, we have to divide the mob files to batches if there&apos;re two many candidates in the mob file compaction (native compaction), and it&apos;s 100 as default.&lt;br/&gt;
If we have multiple threads to do the compaction in chore, we have to reduce the batch limitation, for instance 10 ( from 100).&lt;br/&gt;
So that is less efficient in the mob compaction after the thread pool is used. Previously in one thread, we have 100 files merged to 1, After the pool is used, we have 10 files merged to 1.&lt;br/&gt;
Maybe we could do the compaction in parallel in future ( to dispatch the compaction the HRS). But for now we could have one thread to handle that.&lt;br/&gt;
Please advise. Thanks.&lt;/p&gt;</comment>
                            <comment id="14298413" author="jingcheng.du@intel.com" created="Fri, 30 Jan 2015 09:37:35 +0000"  >&lt;p&gt;Update the patch according the comments in RB. Thanks.&lt;br/&gt;
Two improvements still need to be done.&lt;br/&gt;
1. Add thread pool to the compactor to merging the small files in different partition in parallel.&lt;br/&gt;
2. Need more unit tests.&lt;/p&gt;</comment>
                            <comment id="14303014" author="jingcheng.du@intel.com" created="Tue, 3 Feb 2015 09:45:18 +0000"  >&lt;p&gt;Update the patch according to comments in RB.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Compact the mob files in parallel.&lt;/li&gt;
	&lt;li&gt;Add more tests.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoopsamjohn&quot; class=&quot;user-hover&quot; rel=&quot;anoopsamjohn&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, please take a look. Thanks a lot.&lt;/p&gt;</comment>
                            <comment id="14304814" author="jingcheng.du@intel.com" created="Wed, 4 Feb 2015 09:08:53 +0000"  >&lt;p&gt;Update the patch(V5) according the comments in RB.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Use recursion instead of iteration when compacting the del files.&lt;/li&gt;
	&lt;li&gt;Refine and add more unit tests.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="14306706" author="jingcheng.du@intel.com" created="Thu, 5 Feb 2015 06:03:52 +0000"  >&lt;p&gt;Update the patch (V6) according to comments in RB, add more unit tests and fix the bulkload issue in MOB.&lt;/p&gt;</comment>
                            <comment id="14309189" author="jmhsieh" created="Fri, 6 Feb 2015 14:18:48 +0000"  >&lt;p&gt;Thanks jingcheng and thanks ram and ted for the reviews.  I&apos;ve commited to hbase-11339&lt;/p&gt;</comment>
                            <comment id="14310567" author="ram_krish" created="Sat, 7 Feb 2015 05:47:17 +0000"  >&lt;p&gt;Committed? Oh I was reviewing this and thought would complete it over the weekend or the beginning of next week. No problem anyway. Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jingcheng.du%40intel.com&quot; class=&quot;user-hover&quot; rel=&quot;jingcheng.du@intel.com&quot;&gt;Jingcheng Du&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14310776" author="jon@cloudera.com" created="Sat, 7 Feb 2015 15:36:41 +0000"  >&lt;p&gt;We&apos;re on a branch and I&apos;d like to start focusing merging trunk in and on&lt;br/&gt;
testing.  We&apos;ll likely find problems but it is easier when the big patches&lt;br/&gt;
are in. (Follow up patches are smaller)&lt;/p&gt;

&lt;p&gt;On Friday, February 6, 2015, ramkrishna.s.vasudevan (JIRA) &amp;lt;jira@apache.org&amp;gt;&lt;/p&gt;



&lt;p&gt;&amp;#8211; &lt;br/&gt;
// Jonathan Hsieh (shay)&lt;br/&gt;
// HBase Tech Lead, Software Engineer, Cloudera&lt;br/&gt;
// jon@cloudera.com // @jmhsieh&lt;/p&gt;</comment>
                            <comment id="14637810" author="hudson" created="Wed, 22 Jul 2015 22:48:40 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6672 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6672/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6672/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11861&quot; title=&quot;Native MOB Compaction mechanisms.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11861&quot;&gt;&lt;del&gt;HBASE-11861&lt;/del&gt;&lt;/a&gt; Native MOB Compaction mechanisms (Jingcheng Du) (jmhsieh: rev 2c4934eda68e8ed1290c2e3fb50604c2d77bdf64)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/PartitionedMobFileCompactionRequest.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/MobFileCompactor.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/master/MobFileCompactionChore.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestPartitionedMobFileCompactionRequest.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestPartitionedMobFileCompactor.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/MobFileCompactionRequest.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestMobFileCompactor.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobConstants.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/resources/hbase-default.xml&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/PartitionedMobFileCompactor.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12765557">HBASE-12820</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12677923" name="141030-mob-compaction.pdf" size="300008" author="jmhsieh" created="Wed, 29 Oct 2014 16:28:11 +0000"/>
                            <attachment id="12693268" name="HBASE-11861-V1.diff" size="72554" author="jingcheng.du@intel.com" created="Tue, 20 Jan 2015 09:16:22 +0000"/>
                            <attachment id="12693549" name="HBASE-11861-V2.diff" size="81166" author="jingcheng.du@intel.com" created="Wed, 21 Jan 2015 09:35:32 +0000"/>
                            <attachment id="12695493" name="HBASE-11861-V3.diff" size="91997" author="jingcheng.du@intel.com" created="Fri, 30 Jan 2015 09:37:35 +0000"/>
                            <attachment id="12696141" name="HBASE-11861-V4.diff" size="104437" author="jingcheng.du@intel.com" created="Tue, 3 Feb 2015 09:45:18 +0000"/>
                            <attachment id="12696415" name="HBASE-11861-V5.diff" size="105619" author="jingcheng.du@intel.com" created="Wed, 4 Feb 2015 09:08:53 +0000"/>
                            <attachment id="12696677" name="HBASE-11861-V6.diff" size="107632" author="jingcheng.du@intel.com" created="Thu, 5 Feb 2015 06:03:52 +0000"/>
                            <attachment id="12692724" name="HBASE-11861.diff" size="46483" author="jingcheng.du@intel.com" created="Fri, 16 Jan 2015 09:25:07 +0000"/>
                            <attachment id="12687674" name="mob compaction-out-of-region.pdf" size="280997" author="jingcheng.du@intel.com" created="Wed, 17 Dec 2014 05:27:14 +0000"/>
                            <attachment id="12685073" name="mob compaction.pdf" size="284375" author="jingcheng.du@intel.com" created="Thu, 4 Dec 2014 09:08:41 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 28 Nov 2014 07:21:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 21 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1zhu7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>