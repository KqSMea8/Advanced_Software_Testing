<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:41:44 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-13291/HBASE-13291.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-13291] Lift the scan ceiling</title>
                <link>https://issues.apache.org/jira/browse/HBASE-13291</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Scanning medium sized rows with multiple concurrent scanners exhibits interesting &apos;ceiling&apos; properties. A server runs at about 6.7k ops a second using 450% of possible 1600% of CPUs  when 4 clients each with 10 threads doing scan 1000 rows.  If I add &apos;--filterAll&apos; argument (do not return results), then we run at 1450% of possible 1600% possible but we do 8k ops a second.&lt;/p&gt;

&lt;p&gt;Let me attach flame graphs for two cases. Unfortunately, there is some frustrating dark art going on. Let me try figure it... Filing issue in meantime to keep score in.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12783345">HBASE-13291</key>
            <summary>Lift the scan ceiling</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="stack">stack</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Thu, 19 Mar 2015 19:39:29 +0000</created>
                <updated>Mon, 25 Jan 2016 19:52:26 +0000</updated>
                                            <version>1.0.0</version>
                                                    <component>Scanners</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>17</watches>
                                                                                                            <comments>
                            <comment id="14370416" author="apurtell" created="Fri, 20 Mar 2015 00:04:50 +0000"  >&lt;p&gt;Those flame graphs show on-CPU differences. Would be also really interesting to see where and how long handler threads are waiting or blocked and how that differs among the two cases. &lt;/p&gt;

&lt;p&gt;A quick look over the nofilter and filterall graphs suggests that the filterall case removes a lot of RPC work so shifts on-CPU processing from a mix of:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;RPC handling and related data copies&lt;/li&gt;
	&lt;li&gt;iterating over cells (iterating or skipping over blocks in blockcache, and logic in SQM#match)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;to mostly iterating over cells. We maybe could optimize this with an index into the blockcache but the actual bottleneck may lie elsewhere with queueing, threading, or locking issues.&lt;/p&gt;

&lt;p&gt;Edits: Pardon the edits, having language precision issues today&lt;/p&gt;</comment>
                            <comment id="14370435" author="stack" created="Fri, 20 Mar 2015 00:26:32 +0000"  >&lt;p&gt;Thanks @apurtell for input. Yeah, need another view than this. My flight recordings do not surface obvious contention. Interesting they do point at HBB#_get as hot method for some reason. I messed around w/ some code and its only an array look up.  Started me on a distraction looking to see what is inlined and what is not.  &lt;/p&gt;

&lt;p&gt;This is the parent method:&lt;/p&gt;

&lt;p&gt;     @ 186   org.apache.hadoop.hbase.io.hfile.HFileReaderV3$ScannerV3::readKeyValueLen (348 bytes)   hot method too big&lt;/p&gt;

&lt;p&gt;I messed with it and got a new, also interesting flame graph (--filterAll).  Compare to filterAll.svg. Throughput went up a little. Let me look some more here for a while. Will report back.&lt;/p&gt;

&lt;p&gt;Will need to then circle back and try and figure how we are bound up...  (returning results to client seems to enable one bottleneck &amp;#8211; but let me see if can figure why near 3x CPU but only 15% more ops... if I am reading it right)&lt;/p&gt;</comment>
                            <comment id="14370686" author="ram_krish" created="Fri, 20 Mar 2015 04:19:46 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
The --fitlerAll property has a filterKeyValue() returning SKIP.  This means that we would endup in removing all the rows in the SQM layer itself. &lt;br/&gt;
If we make the filterKeyValue return INCLUDE then we will end up coming till the HRegion layer. Anyway there filterRow will filter out the results.  May be can you try changing that and see if there is a little bit of difference in that?&lt;/p&gt;</comment>
                            <comment id="14370721" author="stack" created="Fri, 20 Mar 2015 04:52:47 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; Thanks boss. What sort of difference you thinking? We&apos;ll use more CPU and return less rows (smile).&lt;/p&gt;</comment>
                            <comment id="14370742" author="ram_krish" created="Fri, 20 Mar 2015 05:09:41 +0000"  >&lt;p&gt;I think we have some more additional comparisons in this case if we return INCLUDE.  But am not very sure on how much it impacts. &lt;/p&gt;</comment>
                            <comment id="14370750" author="ram_krish" created="Fri, 20 Mar 2015 05:15:37 +0000"  >&lt;p&gt;Anyway I got your point here. We do a lot of CPUs but still the number of ops does not increase greatly is what you say.  Changing to INCLUDE would not affect this. Sorry. &lt;/p&gt;</comment>
                            <comment id="14372055" author="stack" created="Fri, 20 Mar 2015 20:38:57 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; Thanks for keeping an eye on me. Will try your suggestion in a while.&lt;/p&gt;

&lt;p&gt;Meantime, am able to get ScannerV2.next and all below inlined (see attached flame graph and patch breaking stuff into smaller methods) but the improvement is small. Could spend more time going down this path but payback is not of the proportions that I&apos;m after... so passing on this for time being.  Will put up graph of benefit in a while.&lt;/p&gt;</comment>
                            <comment id="14372072" author="stack" created="Fri, 20 Mar 2015 20:48:49 +0000"  >&lt;p&gt;Patch breaks up methods that were not being inlined or complaint was that they were &apos;too big&apos;. Adds &apos;final&apos; on methods though all I read has it that this makes no difference.&lt;/p&gt;

&lt;p&gt;See our flame graph that has all below ScannerV2.next inlined. Compare to the filterall.svg graph initially posted. Now with inlining we are using 29% of CPU doing ScannerV2.next. Previous we were doing 36% plus.&lt;/p&gt;

&lt;p&gt;Here are args passed JVM:&lt;/p&gt;

&lt;p&gt;export HBASE_OPTS=&quot; -agentpath:/home/stack/lightweight-java-profiler-read-only/build-64/liblagent.so -XX:+UseConcMarkSweepGC -XX:+UnlockDiagnosticVMOptions  -XX:+PrintInlining -XX:+PrintCompilation  -XX:+UnlockCommercialFeatures -XX:+FlightRecorder &quot;&lt;/p&gt;</comment>
                            <comment id="14372239" author="stack" created="Fri, 20 Mar 2015 22:26:39 +0000"  >&lt;p&gt;Here is before and after (two runs were not for same amount of time). GC is about the same (not posted). Looks like patch makes for about 6-7% more throughput. Should probably commit.&lt;/p&gt;

&lt;p&gt;Let me see if I can find a better place to go digging.&lt;/p&gt;

&lt;p&gt;(This is 5 servers each running a process that hosts 10 clients doing PE scan1000 against a zipfian dataset of ten columns of average size 180k or so)&lt;/p&gt;</comment>
                            <comment id="14372345" author="apurtell" created="Fri, 20 Mar 2015 23:57:43 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Patch breaks up methods that were not being inlined or complaint was that they were &apos;too big&apos;. &lt;br/&gt;
...&lt;br/&gt;
Looks like patch makes for about 6-7% more throughput. Should probably commit.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We should do this sort of thing over all of the hot paths, mileage will vary, but volunteer bandwidth to do this is low so let&apos;s take it where we can get it! Thanks for digging in here. +1&lt;/p&gt;</comment>
                            <comment id="14372347" author="apurtell" created="Sat, 21 Mar 2015 00:01:39 +0000"  >&lt;p&gt;A question about this though:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;export HBASE_OPTS=&quot; -agentpath:/home/stack/lightweight-java-profiler-read-only/build-64/liblagent.so -XX:+UseConcMarkSweepGC -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining -XX:+PrintCompilation -XX:+UnlockCommercialFeatures -XX:+FlightRecorder &quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Probably should break that up. Maybe you did? &lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Use flight recorder to get event trace data for profiling, IO, monitors, etc.&lt;/li&gt;
	&lt;li&gt;Use the lightweight profiler to get trace files for flame graph visualization&lt;/li&gt;
	&lt;li&gt;PrintInlining to get a sense of hot methods and suboptimal inlining&lt;/li&gt;
	&lt;li&gt;PrintCompilation with hsdis installed into jre/lib/&amp;lt;plat&amp;gt; or a fastdebug JDK build.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I wouldn&apos;t combine them, they&apos;ll work at various cross-purposes. Maybe not terribly, but results will be cleaner IMHO&lt;/p&gt;</comment>
                            <comment id="14372348" author="apurtell" created="Sat, 21 Mar 2015 00:02:32 +0000"  >&lt;p&gt;Maybe we should do a JVM perf tools session at a meetup sometime?&lt;/p&gt;

&lt;p&gt;Edit: s/I/we/ , no need for me to be presumptuous &lt;/p&gt;</comment>
                            <comment id="14372490" author="stack" created="Sat, 21 Mar 2015 03:54:17 +0000"  >&lt;p&gt;Thanks for the +1.&lt;/p&gt;

&lt;p&gt;Yeah, I&apos;d imagine that if we went through all code paths and did this hacky analysis, 1% here, and 7% there, it could add up.   During this session, it seemed like some fundamental code paths were &apos;too big&apos; to inline.&lt;/p&gt;

&lt;p&gt;On, the hbase-env.sh config, you have it right. The flight recorder has to be actually switched on to record (jcmd or the jmc console). My guess that when dormant, it impinges little. The PrintCompilation seems to work w/ stock jvm.  The emissions are cryptic enough especially when it starts talking about zombies but I found this note useful: &lt;a href=&quot;http://www.techpaste.com/2012/02/java-command-line-options-jvm-performance-improvement/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.techpaste.com/2012/02/java-command-line-options-jvm-performance-improvement/&lt;/a&gt; It seemed to match my observations.&lt;/p&gt;

&lt;p&gt;Let me commit the patch in a subissue. We are still pretty hung up and I&apos;d like to try figure why.&lt;/p&gt;

&lt;p&gt;On a JVM profiling session at a meetup, lets collect stories. I think we need some big wins first. Also, there is still too art involved; Flight Recorder says &apos;there could be an issue&apos; here&apos; but signals are faint, &apos;lightweight profiler&apos; says we are spending loads of time in an area sort of related, then, I happened to enable a particular logging and indeed, bad issue is plain!  It would be war stories like. Need to gather up some more. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=larsh&quot; class=&quot;user-hover&quot; rel=&quot;larsh&quot;&gt;larsh&lt;/a&gt; probably has a few.&lt;/p&gt;</comment>
                            <comment id="14375418" author="ram_krish" created="Mon, 23 Mar 2015 05:24:20 +0000"  >&lt;p&gt;One thing I would like to say here is that when I tried profiling with jprofiler the impact on the CPU with filterAll and without Filterall was varying betwee 5 to 8%.  But every time with filterall it is was taking more CPU but not in the order of 3X.&lt;/p&gt;</comment>
                            <comment id="14375420" author="ram_krish" created="Mon, 23 Mar 2015 05:26:09 +0000"  >&lt;p&gt;But this is an interesting learning.  I will try out your patch and see how things are.  &lt;/p&gt;</comment>
                            <comment id="14382479" author="stack" created="Thu, 26 Mar 2015 19:20:41 +0000"  >&lt;p&gt;Minor update. &lt;/p&gt;

&lt;p&gt;Played with doubling Handlers and Readers but made no difference in throughtput. I was maybe burning more CPU.  Using 20 handlers instead of 30 (default) had us doing about same cpu but less throughput (7k vs 8k). So we are up against ceiling.&lt;/p&gt;

&lt;p&gt;Looking at what we were doing, most is compareTo. I tried using java compareTo instead of our copy of guava unsafe (our default) but pure java was more cpu and slower by about 15% (8k vs 7k).&lt;/p&gt;

&lt;p&gt;Attached flamegraph is where we are at when up against the ceiling. Has inlining which gets us some small benefit but means lower methods are missing. Got perf top working using &lt;a href=&quot;https://github.com/jrudolph/perf-map-agent&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/jrudolph/perf-map-agent&lt;/a&gt;. It just shows us same thing that we spend all our CPU in HFileReaderV3#ScannerV3#readKeyValueLen and SQM#match (compareTo). If I ask perf top to show inlined functions, it fingers the HBB#_get again. Hmm...&lt;/p&gt;
</comment>
                            <comment id="14382801" author="apurtell" created="Thu, 26 Mar 2015 22:14:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;it fingers the HBB#_get again.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;HBB is generated from something called Heap-X-Buffer.java.template when the JDK is built. However, looks like _get for HBB is:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; _get(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i) {                          &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt;-&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt;
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; hb[i];
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;... a simple array access. You&apos;d expect this along with a lot of comparator work if we&apos;re scanning or skipping through a lot of cells in memory. I think the way to optimize this is keep an index to cells in the blockcache, to eliminate the need to read a length, skip, read a length, skip, read a length... &lt;/p&gt;</comment>
                            <comment id="14382808" author="stack" created="Thu, 26 Mar 2015 22:18:47 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; A hackup that avoids BB doing position and get and instead doing unsafe getInt seems to move us from 8k/s to 9k/s.&lt;/p&gt;</comment>
                            <comment id="14382813" author="stack" created="Thu, 26 Mar 2015 22:22:07 +0000"  >&lt;p&gt;Now we are spending most CPU in:&lt;/p&gt;

&lt;p&gt; 18.79%  perf-26908.map      &lt;span class=&quot;error&quot;&gt;&amp;#91;.&amp;#93;&lt;/span&gt; Lorg/apache/hadoop/hbase/util/Bytes;.readVLong in Lorg/apache/hadoop/hbase/io/hfile/HFileReaderV3$ScannerV3;.readKeyValueLen&lt;br/&gt;
 15.21%  perf-26908.map      &lt;span class=&quot;error&quot;&gt;&amp;#91;.&amp;#93;&lt;/span&gt; Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.match&lt;/p&gt;

&lt;p&gt;According to perf top.&lt;/p&gt;</comment>
                            <comment id="14382817" author="apurtell" created="Thu, 26 Mar 2015 22:25:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;Now we are spending most CPU in: 18.79% perf-26908.map &lt;span class=&quot;error&quot;&gt;&amp;#91;.&amp;#93;&lt;/span&gt; Lorg/apache/hadoop/hbase/util/Bytes;.readVLong&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yep, still scanning/skipping through memory&lt;/p&gt;</comment>
                            <comment id="14382820" author="lhofhansl" created="Thu, 26 Mar 2015 22:26:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;the way to optimize this is keep an index to cells in the blockcache&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I started something like this here: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11811&quot; title=&quot;Use binary search for seeking into a block&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11811&quot;&gt;HBASE-11811&lt;/a&gt;. Has a bunch of other advantages too.&lt;br/&gt;
(I&apos;m not using the index there to avoid readKeyValueLen, but it could be used for that)&lt;/p&gt;</comment>
                            <comment id="14382870" author="stack" created="Thu, 26 Mar 2015 22:49:50 +0000"  >&lt;p&gt;perf top shows jvm methods which is kinda of interesting.... after a while allocation of buffers is at the top:&lt;/p&gt;

&lt;p&gt;  typeArrayKlass::allocate_common(int, bool, Thread*)&lt;/p&gt;</comment>
                            <comment id="14382881" author="apurtell" created="Thu, 26 Mar 2015 22:55:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;A hackup that avoids BB doing position and get and instead doing unsafe getInt seems to move us from 8k/s to 9k/s.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Makes sense, and we might want to do this anyhow. HBB#_get has us drinking through a straw one byte at a time&lt;/p&gt;</comment>
                            <comment id="14382886" author="apurtell" created="Thu, 26 Mar 2015 22:59:18 +0000"  >&lt;p&gt;Hmm... We could revisit that while Stack has his rig? For full scans over a region, we shouldn&apos;t be worse. We would see the best results for point gets. Even for scans over a range of the region, I would hope to see a reduction in the number of memory accesses we make roughly proportional to the width of the desired keyspace.&lt;/p&gt;</comment>
                            <comment id="14382950" author="stack" created="Thu, 26 Mar 2015 23:39:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; That work seems to address other issues than what I am seeing here.&lt;/p&gt;</comment>
                            <comment id="14383319" author="stack" created="Fri, 27 Mar 2015 04:31:13 +0000"  >&lt;p&gt;This is the hack to bypass bb plus inlining of the vint of mvcc. No longer shows in perf top. Here is what it looks like now:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Samples: 4M of event &apos;cycles&apos;, Event count (approx.): 422533226118
 21.09%  perf-13042.map      [.] Lorg/apache/hadoop/hbase/io/hfile/HFileReaderV2$ScannerV2;._next in Lorg/apache/hadoop/hbase/io/hfile/HFileReaderV2$ScannerV2;.next
 12.76%  perf-13042.map      [.] Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.match
 11.61%  perf-13042.map      [.] &amp;lt;A0&amp;gt;4=^D&amp;lt;F4&amp;gt;^?
  6.00%  perf-13042.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.optimize in Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.next
  5.84%  perf-13042.map      [.] Lorg/apache/hadoop/hbase/regionserver/KeyValueHeap;.next
  4.75%  perf-13042.map      [.] Ljava/util/concurrent/locks/AbstractQueuedSynchronizer;.release in Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.peek
  3.87%  perf-13042.map      [.] Ljava/util/PriorityQueue;.siftUpUsingComparator in Lorg/apache/hadoop/hbase/regionserver/KeyValueHeap;.next
  3.57%  perf-13042.map      [.] Lorg/apache/hadoop/hbase/regionserver/KeyValueHeap;.peek in Lorg/apache/hadoop/hbase/regionserver/KeyValueHeap;.next
  3.09%  perf-13042.map      [.] Lorg/apache/hadoop/hbase/util/Bytes$LexicographicalComparerHolder$UnsafeComparer;.compareTo in Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.match
  2.00%  perf-13042.map      [.] Lorg/apache/hadoop/hbase/regionserver/ScanDeleteTracker;.reset in Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.next
  1.96%  libjvm.so           [.] BlockOffsetArrayNonContigSpace::block_start_unsafe(void &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;*) &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;
  1.38%  perf-13042.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreFileScanner;.next in Lorg/apache/hadoop/hbase/regionserver/KeyValueHeap;.next
  1.03%  libjvm.so           [.] ClearNoncleanCardWrapper::do_MemRegion(MemRegion)
  0.95%  perf-13042.map      [.] Ljava/util/concurrent/ConcurrentHashMap;.get in Lorg/apache/hadoop/hbase/io/hfile/LruBlockCache;.getBlock
  0.93%  perf-13042.map      [.] Ljava/util/concurrent/locks/LockSupport;.unpark in Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.next
  0.91%  perf-13042.map      [.] Ljava/nio/HeapByteBuffer;.slice in Lorg/apache/hadoop/hbase/io/hfile/HFileReaderV2$ScannerV2;.updateCurrBlock
  0.77%  libjvm.so           [.] typeArrayKlass::allocate_common(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, bool, &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;*)
  0.72%  libjvm.so           [.] CompactibleFreeListSpace::block_size(HeapWord &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;*) &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;
  0.60%  perf-13042.map      [.] Lorg/apache/hadoop/hbase/util/Bytes$LexicographicalComparerHolder$UnsafeComparer;.compareTo in Lorg/apache/hadoop/hbase/regionserver/HRegion$RegionScannerImpl;.nextInternal
  0.55%  perf-13042.map      [.] &amp;lt;D0&amp;gt;)=^D&amp;lt;F4&amp;gt;^?
  0.49%  libjvm.so           [.] SpinPause
  0.45%  perf-13042.map      [.] Lorg/apache/hadoop/hbase/util/Bytes$LexicographicalComparerHolder$UnsafeComparer;.compareTo in Lorg/apache/hadoop/hbase/regionserver/HRegion$RegionScannerImpl;.populateResult
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At about 8.5k/s. Up but not much.&lt;/p&gt;</comment>
                            <comment id="14383331" author="lhofhansl" created="Fri, 27 Mar 2015 04:53:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;That work seems to address other issues than what I am seeing here.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah. Was thinking we use the index I build there to avoid the repeated getKeyValueLen calls.&lt;/p&gt;

&lt;p&gt;I&apos;m surprised that that StoreScanner.next() is only in there with 6% and StoreScanner.peek() not all. By any chance is this still with the lock coarsening patch? (or you&apos;re testing with kinda larger column values too, so maybe that&apos;s why).&lt;/p&gt;</comment>
                            <comment id="14383356" author="lhofhansl" created="Fri, 27 Mar 2015 05:29:33 +0000"  >&lt;p&gt;Just ran a test with my setup. All local on one box.&lt;br/&gt;
I wrote 1m rows with 1 col of 1000 bytes each, i.e. ~1GB of data (verified the data size on HDFS). I can scan through that (in 0.98) 0.4s with filtering all, so that&apos;s over 2m rows/s. Is there anything different about P/E?&lt;/p&gt;</comment>
                            <comment id="14383366" author="stack" created="Fri, 27 Mar 2015 05:44:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;Yeah. Was thinking we use the index I build there to avoid the repeated getKeyValueLen calls.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;k.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;m surprised that that StoreScanner.next() is only in there with 6% and StoreScanner.peek() not all. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;peek is way down... &amp;lt; 1%.  SS#next is yeah 6%/8%.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is there anything different about P/E?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Rows here are ten column and on average 180k so if I do my math right, we are going at about same speed (I&apos;m slower by some).  Maybe I should move to smaller cells because then changes will be more noticeable?&lt;/p&gt;

&lt;p&gt;Issue now is reading the mvcc off the end of the Cell.  Its where I am spending time:&lt;/p&gt;

&lt;p&gt; 18.70%  perf-16373.map      &lt;span class=&quot;error&quot;&gt;&amp;#91;.&amp;#93;&lt;/span&gt; Lorg/apache/hadoop/hbase/io/hfile/HFileReaderV2$ScannerV2;.readMvccVersion in Lorg/apache/hadoop/hbase/io/hfile/HFileReaderV3$ScannerV3;.readKeyValueLen&lt;/p&gt;

&lt;p&gt;I&apos;ve refactored it some. Will look more. And then SQM#match... and StoreScanner#optimize&lt;/p&gt;
</comment>
                            <comment id="14383367" author="stack" created="Fri, 27 Mar 2015 05:45:08 +0000"  >&lt;p&gt;Oh, my test has 50 clients going over a network. Maybe I&apos;m going faster than you.&lt;/p&gt;</comment>
                            <comment id="14383376" author="lhofhansl" created="Fri, 27 Mar 2015 05:51:02 +0000"  >&lt;p&gt;Hmm... StoreScanner.optimize is what I added in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13109&quot; title=&quot;Make better SEEK vs SKIP decisions during scanning&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13109&quot;&gt;&lt;del&gt;HBASE-13109&lt;/del&gt;&lt;/a&gt;. It only does anything when we are trying to seek in the scanner... FilterAllFilter never seeks. Something&apos;s fishy &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14383381" author="ram_krish" created="Fri, 27 Mar 2015 05:55:26 +0000"  >&lt;p&gt;Using PE tool with ScanRange will do seek because it is using Explicit Column Tracker. Right? FilterallFilter usage will also do the same I think.&lt;/p&gt;</comment>
                            <comment id="14384196" author="stack" created="Fri, 27 Mar 2015 17:24:18 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; PE is doing scan1000 random rows. So 50 clients doing scan of 1000 rows at random locations.&lt;/p&gt;</comment>
                            <comment id="14384273" author="lhofhansl" created="Fri, 27 Mar 2015 18:12:21 +0000"  >&lt;p&gt;Ah. Hence the seeking. In that case the optimize won&apos;t help, but also still won&apos;t do any work for those (it&apos;s only does anything for SEEK_NEXT_COL and SEEK_NEXT_ROW).&lt;/p&gt;

&lt;p&gt;But since you see optimize being called and doing some work there must be many COL or ROW seeks (ExplicitColumnTracker probably, at least seeking to the next row), and I&apos;d expect it to be worse without &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13109&quot; title=&quot;Make better SEEK vs SKIP decisions during scanning&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13109&quot;&gt;&lt;del&gt;HBASE-13109&lt;/del&gt;&lt;/a&gt; applied, then again with large cells there won&apos;t be much advantage to skipping a lot before we&apos;d hit the next block (at most 64 cells would fit into a 64k block)... Would be cool to know what perf you&apos;d see without &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13109&quot; title=&quot;Make better SEEK vs SKIP decisions during scanning&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13109&quot;&gt;&lt;del&gt;HBASE-13109&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Is this a common usecase? We&apos;d have essentially an HFile block per row here, right?&lt;/p&gt;

&lt;p&gt;I&apos;ll also test with wider rows for this issue... Very curious about this!&lt;/p&gt;</comment>
                            <comment id="14384316" author="apurtell" created="Fri, 27 Mar 2015 18:31:16 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;So 50 clients doing scan of 1000 rows at random locations.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ah. Hence the seeking. In that case the optimize won&apos;t help,&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just for clarity, it is 1. generate random location, 2. scan 1000 rows sequentially from there. (See PE#generateStartAndStopRows and callers.) &lt;/p&gt;
</comment>
                            <comment id="14385094" author="ram_krish" created="Sat, 28 Mar 2015 03:32:31 +0000"  >&lt;p&gt;I would say it is because of the Explicit Column Trackers. See Sca&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   Scan scan = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Scan(startAndStopRow.getFirst(), startAndStopRow.getSecond());
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (opts.filterAll) {
        scan.setFilter(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; FilterAllFilter());
      }
      scan.addColumn(FAMILY_NAME, QUALIFIER_NAME);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This would do a seek every time.&lt;/p&gt;</comment>
                            <comment id="14387468" author="stack" created="Mon, 30 Mar 2015 21:43:22 +0000"  >&lt;ol&gt;
	&lt;li&gt;The vint mvcc on end of keyvalue is expensive to parse; we can&apos;t make use of the unsafe toLong which seems a good deal faster than get bytes and bit noodling going by micro-benchmarking (I see 10x diff doing unsafe #getLong over get byte and left shifting). This fact and the way we have tags tagged on end (perhaps) frustrates go-fast efforts.&lt;/li&gt;
	&lt;li&gt;Doing a getLong instead of two getInts and then bit noodling is faster than doing two getInts (this is using unsafe &amp;#8211; I saw almost 10x diff). Added it in.&lt;/li&gt;
	&lt;li&gt;Bulk of our time is in StoreFileScanner#_next&lt;/li&gt;
	&lt;li&gt;Next is ScanQueryMatcher#match. It is not being very smart. It uses the Cell Interface to pull out elements to compare only each getXXXoffset or getXXXlength starts over from scratch reparsing key, value, row, etc. lengths extracting ints so as to do some offset math. This is a killer.The worst offender is the call from #match to #isCellTTLExpired In here we check to see if tags are enabled. We do this by parsing key and value ints to figure end of KV to poke for tags. All scans are paying for that time when DLR sets an MVCC on a KV.&lt;/li&gt;
	&lt;li&gt;If lots of cells being returned, then we will be doing lots of array resizing. These show in the profilings.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The HFileReaderV3 and then HFileReaderV2 with an abstract under this makes it hard to navigate what is going on. Need to flatten now we are up on v3 file format and all is on by default.&lt;/p&gt;</comment>
                            <comment id="14387649" author="stack" created="Tue, 31 Mar 2015 00:03:15 +0000"  >&lt;p&gt;Adds methods on KV so SQM can use them in SQM#match if a KV and avoid reparse of KV offsets and lengths.&lt;/p&gt;

&lt;p&gt;Small methods so compile and inlining can happen.&lt;/p&gt;

&lt;p&gt;Self-position maintenance in readKeyValueLen methods in HFileReaderV2 and V3; faster.&lt;/p&gt;

&lt;p&gt;Inlined mvcc vint parse to try and speed it up.&lt;/p&gt;

&lt;p&gt;Here is what it looks like currently:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Samples: 40M of event &apos;cycles&apos;, Event count (approx.): 427157275282
 26.23%  perf-13101.map      [.] Lorg/apache/hadoop/hbase/io/hfile/HFileReaderV2$ScannerV2;._next in Lorg/apache/hadoop/hbase/regionserver/StoreFileScanner;.next
 12.62%  perf-13101.map      [.] Lorg/apache/hadoop/hbase/util/Bytes$LexicographicalComparerHolder$UnsafeComparer;.compareTo in Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.moreMatch
 11.65%  perf-13101.map      [.] 0x00007f1fed96e4ec
  6.22%  perf-13101.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.optimize in Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.next
  3.87%  perf-13101.map      [.] Lorg/apache/hadoop/hbase/util/Bytes$LexicographicalComparerHolder$UnsafeComparer;.compareTo in Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.match
  3.63%  perf-13101.map      [.] Ljava/util/PriorityQueue;.poll in Lorg/apache/hadoop/hbase/regionserver/KeyValueHeap;.pollRealKV
  2.92%  perf-13101.map      [.] Lorg/apache/hadoop/hbase/util/Bytes$LexicographicalComparerHolder$UnsafeComparer;.compareTo in Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.match
  2.83%  perf-13101.map      [.] Lorg/apache/hadoop/hbase/regionserver/KeyValueHeap;.next in Lorg/apache/hadoop/hbase/regionserver/HRegion$RegionScannerImpl;.populateResult
  1.80%  libjvm.so           [.] BlockOffsetArrayNonContigSpace::block_start_unsafe(void &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;*) &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;
  1.63%  perf-13101.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.next
  1.56%  perf-13101.map      [.] Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.match
  1.53%  perf-13101.map      [.] Lorg/apache/hadoop/hbase/util/Bytes$LexicographicalComparerHolder$UnsafeComparer;.compareTo in Lorg/apache/hadoop/hbase/regionserver/HRegion$RegionScannerImpl;.isStopRow
  1.53%  perf-13101.map      [.] Lorg/apache/hadoop/hbase/regionserver/KeyValueHeap;.peek in Lorg/apache/hadoop/hbase/regionserver/HRegion$RegionScannerImpl;.nextInternal
  0.93%  libjvm.so           [.] ClearNoncleanCardWrapper::do_MemRegion(MemRegion)
  0.91%  perf-13101.map      [.] Ljava/nio/HeapByteBuffer;.slice in Lorg/apache/hadoop/hbase/io/hfile/HFileReaderV2$ScannerV2;.updateCurrBlock
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;_next is all inlined but its bulk is readKeyValueLen which is reading key and value lengths, tags and mvcc.&lt;/p&gt;

&lt;p&gt;Bunch of Unsafe#compareTo. Probably hard to do anything about these with current formats.&lt;/p&gt;

&lt;p&gt;I ain&apos;t sure what 0x00007f1fed96e4ec is. Symbol not coming through for it.&lt;/p&gt;</comment>
                            <comment id="14388894" author="apurtell" created="Tue, 31 Mar 2015 17:31:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;The worst offender is the call from #match to #isCellTTLExpired In here we check to see if tags are enabled. We do this by parsing key and value ints to figure end of KV to poke for tags.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ah, fuck, that is my fault, sorry.&lt;/p&gt;</comment>
                            <comment id="14389971" author="anoop.hbase" created="Wed, 1 Apr 2015 04:24:50 +0000"  >&lt;p&gt;There can be a way to turn off the cell level TTL?&lt;/p&gt;</comment>
                            <comment id="14389979" author="ram_krish" created="Wed, 1 Apr 2015 04:35:18 +0000"  >&lt;p&gt;Did you have Tags ie. TTL set for the cells?  The call to isCellTTLExpired appears in the profiler but I found that it was not doing much work if the TTL was not set. But because it was checking if there was tags it appeared in the profiler for me.&lt;/p&gt;</comment>
                            <comment id="14390055" author="stack" created="Wed, 1 Apr 2015 06:21:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;There can be a way to turn off the cell level TTL?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We are not even getting that far. Its just the check to see if any tags at all.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But because it was checking if there was tags it appeared in the profiler for me.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Tags are not enabled. When I next the Cell out of block with HFileReaderV3#ScannerV3#next, we skip the tags because a flag on the hfile says there are none. Good. This isCellTTLExpired is higher up in the merge with no file context to check. It figures there are no tags by looking for a tag length of non-zero. To figure tag length, it first must parse the key and value ints. This work shows in two profilers: flight recorder and linux perf.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Ah, fuck, that is my fault, sorry.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We need the TTL check for DLR. Our key layout is a bit of hack. Hopefully we can get into place where we can do new layout soon so we don&apos;t have to do this kinda gymnastics just to see if the Cell tagged.&lt;/p&gt;</comment>
                            <comment id="14390068" author="ram_krish" created="Wed, 1 Apr 2015 06:29:07 +0000"  >&lt;p&gt;May be if we want to avoid this parsing to find the presence of tags - we could have an API in cell to say hasTags() and we could have a boolean to denote this when we construct the KV down in the readers. I think when we discussed on this API during tags it was decided that it would be redundant as getTagsLength() would be enough.&lt;/p&gt;</comment>
                            <comment id="14390082" author="eclark" created="Wed, 1 Apr 2015 06:45:06 +0000"  >&lt;p&gt;For now can we just add it on a per file level and have the Reader remember if it ever needs to read a tag. I would think it&apos;s pretty common to have either lots of tags or no tags at all.&lt;/p&gt;</comment>
                            <comment id="14390088" author="stack" created="Wed, 1 Apr 2015 06:46:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think when we discussed on this API during tags it was decided that it would be redundant as getTagsLength() would be enough.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, we probably said that.&lt;/p&gt;

&lt;p&gt;I have rig w/ CPU maxed out and am trying to knock off the top consumers so we can get more out when a hot box. In this pure scan scenario, all from blockcache, the repeated parse of Cell lengths &amp;#8211; key, value, row, qualifier &amp;#8211; when we want to check pieces of it (row, family, etc.) adds up.&lt;/p&gt;

&lt;p&gt;We could cache some of these calculations (as you do in your BB patch) but while back we thought it not worth the bulk-up in the heap. I could retry it...&lt;/p&gt;</comment>
                            <comment id="14390134" author="ram_krish" created="Wed, 1 Apr 2015 07:24:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;For now can we just add it on a per file level and have the Reader remember if it ever needs to read a tag.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;At the store scanner level not sure how easy it would be to make this.  StoreScanner I think would only deal with the cells that it has. Can check once if it is possible, then that would be better. We have the Hfilecontext and we could see if we can get information from that upto this StoreScanner level.&lt;/p&gt;</comment>
                            <comment id="14390187" author="anoop.hbase" created="Wed, 1 Apr 2015 08:02:54 +0000"  >&lt;p&gt;We can create a new Cell type extending KeyValue. This can include the cache for some of these lengths. In read path, when Cell is created from HFileScanner impls, we can create this new type. While adding Cells to Memstore we can make sure we have created old KeyValue objects only.  (So no overhead on heap size)&lt;/p&gt;</comment>
                            <comment id="14390189" author="anoop.hbase" created="Wed, 1 Apr 2015 08:04:03 +0000"  >&lt;p&gt;Yes as Ram said, at the StoreScanner level, cells come from diff StoreFiles.  At StoreFileScanner level we can do this file context based decisions.&lt;/p&gt;</comment>
                            <comment id="14390234" author="eclark" created="Wed, 1 Apr 2015 08:40:42 +0000"  >&lt;p&gt;If a store scanner needs to look at tags is just the logical OR of all the StoreFileScanners need to read tags value  (plus memstore&apos;s).&lt;/p&gt;</comment>
                            <comment id="14391471" author="lhofhansl" created="Wed, 1 Apr 2015 21:10:59 +0000"  >&lt;p&gt;Note that the mvcc is only stored/parsed in HFiles when needed. Every compaction of an hfile tracks the maximum mvcc stamp, when all known older than the oldest scanner, the mvcc vint is not parsed, when a new HFiles is created out of hfiles that all have only old mvcc stamps, it&apos;s not written at all.&lt;/p&gt;

&lt;p&gt;So I expect the majority of files would not need to parse/store the vint. See &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8151&quot; title=&quot;Decode memstoreTS in HFileReaderV2 only when necessary&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8151&quot;&gt;&lt;del&gt;HBASE-8151&lt;/del&gt;&lt;/a&gt; (avoid decoding) and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8166&quot; title=&quot;Avoid writing the memstoreTS into HFiles when possible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8166&quot;&gt;&lt;del&gt;HBASE-8166&lt;/del&gt;&lt;/a&gt; (avoid storing altogether).&lt;/p&gt;</comment>
                            <comment id="14391569" author="stack" created="Wed, 1 Apr 2015 22:05:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;Note that the mvcc is only stored/parsed in HFiles when needed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;They are present in my data. My table is major compacted but they are still present.  This is interesting from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8151&quot; title=&quot;Decode memstoreTS in HFileReaderV2 only when necessary&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8151&quot;&gt;&lt;del&gt;HBASE-8151&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&quot;... it is fairly cheap to decode vlongs of size 1.&quot;&lt;/p&gt;

&lt;p&gt;It is not what I am seeing in this test case.&lt;/p&gt;

&lt;p&gt;Let me look more at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8151&quot; title=&quot;Decode memstoreTS in HFileReaderV2 only when necessary&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8151&quot;&gt;&lt;del&gt;HBASE-8151&lt;/del&gt;&lt;/a&gt;. Either it is no longer cutting in or presumptions have changed.  Thanks.&lt;/p&gt;
</comment>
                            <comment id="14391845" author="lhofhansl" created="Thu, 2 Apr 2015 00:23:34 +0000"  >&lt;p&gt;Interesting. That would be a fairly important optimization to keep. If &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8151&quot; title=&quot;Decode memstoreTS in HFileReaderV2 only when necessary&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8151&quot;&gt;&lt;del&gt;HBASE-8151&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8166&quot; title=&quot;Avoid writing the memstoreTS into HFiles when possible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8166&quot;&gt;&lt;del&gt;HBASE-8166&lt;/del&gt;&lt;/a&gt; are broken that would be bad. Lemme look too.&lt;/p&gt;

&lt;p&gt;I assume you&apos;re playing with trunk?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;... it is fairly cheap to decode vlongs of size 1.&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think that comment refers to decoding the mvcc readpoint when it is 0. Where there&apos;re actua mvccl values stores, those would likely be 15 or 24 bits at least that would show.&lt;/p&gt;</comment>
                            <comment id="14391852" author="lhofhansl" created="Thu, 2 Apr 2015 00:26:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;My table is major compacted but they are still present.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm... Can you see the values? Are they 0? Or there (very) old scanners still open (their readpoint would prevent the optimization).&lt;br/&gt;
It would need a 2nd compaction (major or minor) of these hfiles to actually remove the mvcc data.&lt;/p&gt;</comment>
                            <comment id="14391854" author="stack" created="Thu, 2 Apr 2015 00:27:58 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12600&quot; title=&quot;Remove REPLAY tag dependency in Distributed Replay Mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12600&quot;&gt;&lt;del&gt;HBASE-12600&lt;/del&gt;&lt;/a&gt; seems to be the culprit. It makes it so on compaction we always preserve the mvcc.... trying to figure if that needed.&lt;/p&gt;</comment>
                            <comment id="14391879" author="lhofhansl" created="Thu, 2 Apr 2015 00:47:10 +0000"  >&lt;p&gt;Heh, just came here to say that &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Lemme reason through &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12600&quot; title=&quot;Remove REPLAY tag dependency in Distributed Replay Mode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12600&quot;&gt;&lt;del&gt;HBASE-12600&lt;/del&gt;&lt;/a&gt; (which undoes both &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8151&quot; title=&quot;Decode memstoreTS in HFileReaderV2 only when necessary&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8151&quot;&gt;&lt;del&gt;HBASE-8151&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8166&quot; title=&quot;Avoid writing the memstoreTS into HFiles when possible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8166&quot;&gt;&lt;del&gt;HBASE-8166&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;</comment>
                            <comment id="14391908" author="lhofhansl" created="Thu, 2 Apr 2015 01:16:07 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11315&quot; title=&quot;Keeping MVCC for configurable longer time &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11315&quot;&gt;&lt;del&gt;HBASE-11315&lt;/del&gt;&lt;/a&gt; is also related (removes the MVCC readpoints after 6 days). Does not help with these, though.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9751&quot; title=&quot;Excessive  readpoints checks in StoreFileScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9751&quot;&gt;&lt;del&gt;HBASE-9751&lt;/del&gt;&lt;/a&gt; also no longer works. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14391910" author="lhofhansl" created="Thu, 2 Apr 2015 01:20:13 +0000"  >&lt;p&gt;So it looks like &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8151&quot; title=&quot;Decode memstoreTS in HFileReaderV2 only when necessary&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8151&quot;&gt;&lt;del&gt;HBASE-8151&lt;/del&gt;&lt;/a&gt; would still work after 6 days, when all mvcc points are set to 0. &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8166&quot; title=&quot;Avoid writing the memstoreTS into HFiles when possible&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8166&quot;&gt;&lt;del&gt;HBASE-8166&lt;/del&gt;&lt;/a&gt; is permanently broken. We should either fix it, or remove the code.&lt;/p&gt;</comment>
                            <comment id="14392083" author="ram_krish" created="Thu, 2 Apr 2015 03:47:18 +0000"  >&lt;p&gt;+1 on this.  I cannot quantify how much percentage gain we get but the profiler would no longer shows that part of the code which tries to read from the byte[] every time.&lt;br/&gt;
In case of our BB patch that was even more significant.&lt;/p&gt;</comment>
                            <comment id="14394751" author="stack" created="Fri, 3 Apr 2015 17:41:53 +0000"  >&lt;p&gt;Filed &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13389&quot; title=&quot;[REGRESSION] HBASE-12600 undoes skip-mvcc parse optimizations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13389&quot;&gt;HBASE-13389&lt;/a&gt; for regression.&lt;/p&gt;

&lt;p&gt;On the mvcc parse cost, the hard part is skipping the mvcc... to see the difference it introduces; you can&apos;t if mvcc is present because the parse will run off the rails.&lt;/p&gt;

&lt;p&gt;But 6 days have now elapsed so I can see what it is like when mvcc is 0. I see an uptick in scan rate from about 9k to about 9.4k... about 5% diff in throughput?&lt;/p&gt;

&lt;p&gt;Profile looks like this in my modified 1.0 (it includes the attached patches):&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Samples: 13M of event &apos;cycles&apos;, Event count (approx.): 439449675139
 15.46%  perf-14056.map      [.] 0x00007f38f13fa41f
 10.94%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/util/Bytes;.toLongUnsafe in Lorg/apache/hadoop/hbase/regionserver/StoreFileScanner;.next
  3.53%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/regionserver/KeyValueHeap;.next in Lorg/apache/hadoop/hbase/regionserver/HRegion$RegionScannerImpl;.populateResult
  3.33%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.peek in Lorg/apache/hadoop/hbase/regionserver/HRegion$RegionScannerImpl;.populateResult
  2.74%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/util/Bytes;.toLongUnsafe in Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.moreMatch
  2.50%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.getNextIndexedKey in Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.next
  2.05%  perf-14056.map      [.] Ljava/util/PriorityQueue;.peek in Lorg/apache/hadoop/hbase/regionserver/KeyValueHeap;.next
  1.54%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreFileScanner;.getNextIndexedKey in Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.next
  1.43%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/util/Bytes;.toShortUnsafe in Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.match
  1.41%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/regionserver/ScanDeleteTracker;.reset in Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.next
  1.39%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/KeyValue;.getDelimiter in Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.match
  1.33%  perf-14056.map      [.] Ljava/nio/ByteBuffer;.arrayOffset in Lorg/apache/hadoop/hbase/regionserver/StoreFileScanner;.next
  1.10%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.next
  1.05%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/io/hfile/AbstractHFileReader$Scanner;.isSeeked in Lorg/apache/hadoop/hbase/regionserver/StoreFileScanner;.next
  1.01%  perf-14056.map      [.] Lorg/apache/hadoop/hbase/KeyValue;.getRowLength in Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.match
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can&apos;t really tell what the opaque 0x00007f38f13fa41f that is missing its symbol is. It could be Bytes... compareTo since this is what is in flight recorder output but is missing here (interesting how different the picture perf top and flight recorder present... same basic cast of characters but attribution is wildly different).&lt;/p&gt;

&lt;p&gt;Before the mvcc went to zero, I saw decodeVIntSize taking 15% of CPU (both in flight recorder and in perf top).&lt;/p&gt;
</comment>
                            <comment id="14395850" author="lhofhansl" created="Sat, 4 Apr 2015 18:06:00 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; Cool, at least code and observation match.&lt;/p&gt;</comment>
                            <comment id="14480941" author="stack" created="Mon, 6 Apr 2015 05:22:42 +0000"  >&lt;p&gt;Fun flame graph that shows where we spend our time scanning. Includes jvm allocations and GC. Made with linux perf record and using symbols made by this package: &lt;a href=&quot;https://github.com/jrudolph/perf-map-agent&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/jrudolph/perf-map-agent&lt;/a&gt; This was done against old dataset that is skipping the parse of the mvcc. Was run with the attached patches included.&lt;/p&gt;</comment>
                            <comment id="14481138" author="anoop.hbase" created="Mon, 6 Apr 2015 11:12:58 +0000"  >&lt;p&gt;One small improvement in TimeRange&lt;br/&gt;
compare(long timestamp) -&amp;gt; We can add allTime boolean check. (like in other methods in this class)&lt;br/&gt;
We can just add if(allTime) return 0;&lt;br/&gt;
Can avoid 2 compare ops.&lt;/p&gt;</comment>
                            <comment id="14481291" author="stack" created="Mon, 6 Apr 2015 15:10:08 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; Sounds good. Patch?&lt;/p&gt;</comment>
                            <comment id="14481479" author="apurtell" created="Mon, 6 Apr 2015 17:37:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;interesting how different the picture perf top and flight recorder present... same basic cast of characters but attribution is wildly different&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Guessing: perf top isn&apos;t aware like flight recorder on how HotSpit can de- and re-optimize methods. (It&apos;s a lovely hack though.) If you look in the perf map file in /tmp you might find several addresses for the &quot;same&quot; JIT-ed Java method. perf doesn&apos;t know the invocation count for the method should be aggregated from more than one emitted location, but I suspect FR does. Let me make a note to research if this is true or not.&lt;/p&gt;</comment>
                            <comment id="14481499" author="stack" created="Mon, 6 Apr 2015 17:55:43 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; The perf symbols get regenerated on each invocation. I&apos;ll run it after the rig has been running a while. Hotspot compile should have settled.&lt;/p&gt;</comment>
                            <comment id="14481941" author="lhofhansl" created="Mon, 6 Apr 2015 21:05:32 +0000"  >&lt;p&gt;SQM.match(), StoreFileScanner.next()... My old nemesis&apos; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14481950" author="lhofhansl" created="Mon, 6 Apr 2015 21:10:22 +0000"  >&lt;p&gt;SQM.match() was changed in truck to be expressed in term of operations on Cells (before it was hand &quot;optimized&quot; to deconstruct KVs in the most efficient way). I do not know how much that costs, but might be worth investigating.&lt;/p&gt;

&lt;p&gt;So far our introduction of Cells has made a bunch of things slower, but since we haven&apos;t finished I am not aware of a single perf advantage (when finished we should be able to make block encoding and prefix tries much faster). Maybe it&apos;s time to make a concerted effort and get rid of KeyValue.getKey() and KeyValue.getBuffer() for real, it&apos;s those two methods that prevent a lot of cool optimizations.&lt;/p&gt;</comment>
                            <comment id="14482093" author="stack" created="Mon, 6 Apr 2015 22:31:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;SQM.match() was changed in truck to be expressed in term of operations on Cells (before it was hand &quot;optimized&quot; to deconstruct KVs in the most efficient way).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; The attache hack undoes the Cellification in SQM#match. See in &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12708268/13291.hacks.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12708268/13291.hacks.txt&lt;/a&gt; Argument for the &apos;dirty tricks&apos; is:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
321	      &lt;span class=&quot;code-comment&quot;&gt;// Dirty tricks &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; cell is a KeyValue. Below uglyness is to save on our reparsing lengths of
&lt;/span&gt;322	      &lt;span class=&quot;code-comment&quot;&gt;// families, rows, and keys more than once.&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;So far our introduction of Cells ... I am not aware of a single perf advantage &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah....&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe it&apos;s time to make a concerted effort and get rid of KeyValue.getKey() and KeyValue.getBuffer() for real, it&apos;s those two methods that prevent a lot of cool optimizations.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; have done it in the read path. Need same on write path.&lt;/p&gt;</comment>
                            <comment id="14482543" author="anoop.hbase" created="Tue, 7 Apr 2015 04:02:45 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; simple patch attached.&lt;/p&gt;</comment>
                            <comment id="14482577" author="stack" created="Tue, 7 Apr 2015 04:43:42 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; Make a new issue for it? Its write-time anyways, right?, rather than read time which this issue is about. Thanks boss.&lt;/p&gt;</comment>
                            <comment id="14482589" author="ram_krish" created="Tue, 7 Apr 2015 04:57:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;&lt;br/&gt;
Again the tweaked patch also we call getKeyLength()?  That is again trying to do Bytes.toInt().  &lt;br/&gt;
Will it be possible to create a Cell which could do the caching of these values like we did in BB cell (Anoop has suggested the same in the above comments)?  KVs from memstore will not have that benefit but we can see how much that improves.  I have seen doing the caching has removed those methods from the &apos;hot&apos; methods.&lt;br/&gt;
And for the tags hack, we could add an interface with a hasTags API and when we construct the KV we could set that.  Let all the Cell implementation implement that new interface also. By default let it be true.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;but since we haven&apos;t finished I am not aware of a single perf advantage&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes but for the DBE cases I think we have some advantages.  Because of cells we are not copying the value part now. Previously we were reconstructing a KV by copying the key and value, now we do that only for the key part. If the values are bigger we should see some gain.&lt;/p&gt;</comment>
                            <comment id="14482592" author="anoop.hbase" created="Tue, 7 Apr 2015 05:00:01 +0000"  >&lt;p&gt;Nope..  I can see this is being used from SQM#match&lt;/p&gt;</comment>
                            <comment id="14482609" author="stack" created="Tue, 7 Apr 2015 05:14:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;Again the tweaked patch also we call getKeyLength()? That is again trying to do Bytes.toInt(). &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Come again &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;? I don&apos;t follow?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Will it be possible to create a Cell which could do the caching of these values like we did in BB cell ...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We could try it. Was interested in counting how many times say the key length is reparsed between original read from block and final delivery to the rpc.  What would you guess? (smile).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;And for the tags hack, we could add an interface with a hasTags API and when we construct the KV we could set that. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure. Seems to be plenty of flags floating about on whether tags or not. Would be nice if we could skip parsing them each time.&lt;/p&gt;</comment>
                            <comment id="14482619" author="ram_krish" created="Tue, 7 Apr 2015 05:26:35 +0000"  >&lt;p&gt;Am trying to say that even in this patch we are having calls to getKeyLength() in&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getQualifierLength(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rlength, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; flength) {
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; getQualifierLength(getKeyLength(), rlength, flength);
+  }

   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; getTypeByte() {
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; getTypeByte(getKeyLength());
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This may not be so efficient as caching those keyLength, rowLength etc.&lt;/p&gt;</comment>
                            <comment id="14499014" author="hudson" created="Fri, 17 Apr 2015 00:08:28 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.1 #403 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1/403/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1/403/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13291&quot; title=&quot;Lift the scan ceiling&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13291&quot;&gt;HBASE-13291&lt;/a&gt; Making methods under ScannerV2#next inlineable and faster (stack: rev 8166142b2e815fc6ab30c14a5a546cd242bf3b4c)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV3.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RSRpcServices.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15115852" author="stack" created="Mon, 25 Jan 2016 19:51:46 +0000"  >&lt;p&gt;Associating some old issues with good ideas in them.&lt;/p&gt;</comment>
                            <comment id="15115855" author="stack" created="Mon, 25 Jan 2016 19:52:26 +0000"  >&lt;p&gt;Here is another oldie but a goodie&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12554581">HBASE-5979</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12660940">HBASE-9102</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12708268" name="13291.hacks.txt" size="25771" author="stack" created="Tue, 31 Mar 2015 00:03:15 +0000"/>
                            <attachment id="12706034" name="13291.inlining.txt" size="7474" author="stack" created="Fri, 20 Mar 2015 20:48:49 +0000"/>
                            <attachment id="12707564" name="Screen Shot 2015-03-26 at 12.12.13 PM.png" size="101896" author="stack" created="Thu, 26 Mar 2015 19:20:41 +0000"/>
                            <attachment id="12707628" name="Screen Shot 2015-03-26 at 3.39.33 PM.png" size="586800" author="stack" created="Thu, 26 Mar 2015 22:49:50 +0000"/>
                            <attachment id="12723536" name="TimeRange.patch" size="592" author="anoop.hbase" created="Tue, 7 Apr 2015 04:02:45 +0000"/>
                            <attachment id="12707619" name="hack_to_bypass_bb.txt" size="4208" author="stack" created="Thu, 26 Mar 2015 22:22:07 +0000"/>
                            <attachment id="12707680" name="nonBBposAndInineMvccVint.txt" size="3673" author="stack" created="Fri, 27 Mar 2015 04:31:13 +0000"/>
                            <attachment id="12706073" name="q (1).png" size="10345" author="stack" created="Fri, 20 Mar 2015 22:26:39 +0000"/>
                            <attachment id="12723294" name="scan_no_mvcc_optimized.svg" size="362825" author="stack" created="Mon, 6 Apr 2015 05:22:42 +0000"/>
                            <attachment id="12706035" name="traces.7.svg" size="346141" author="stack" created="Fri, 20 Mar 2015 20:48:49 +0000"/>
                            <attachment id="12705682" name="traces.filterall.svg" size="349547" author="stack" created="Thu, 19 Mar 2015 19:40:01 +0000"/>
                            <attachment id="12705681" name="traces.nofilter.svg" size="576786" author="stack" created="Thu, 19 Mar 2015 19:40:01 +0000"/>
                            <attachment id="12707565" name="traces.small2.svg" size="375444" author="stack" created="Thu, 26 Mar 2015 19:20:41 +0000"/>
                            <attachment id="12705767" name="traces.smaller.svg" size="406698" author="stack" created="Fri, 20 Mar 2015 00:26:32 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12783827">HBASE-13307</subtask>
                            <subtask id="12787829">HBASE-13389</subtask>
                            <subtask id="12819982">HBASE-13447</subtask>
                            <subtask id="12819983">HBASE-13448</subtask>
                            <subtask id="12822092">HBASE-13496</subtask>
                            <subtask id="12822192">HBASE-13497</subtask>
                            <subtask id="12825498">HBASE-13579</subtask>
                            <subtask id="12832330">HBASE-13754</subtask>
                            <subtask id="12834080">HBASE-13817</subtask>
                            <subtask id="12834145">HBASE-13819</subtask>
                            <subtask id="12842554">HBASE-14020</subtask>
                            <subtask id="12851440">HBASE-14186</subtask>
                            <subtask id="12852475">HBASE-14188</subtask>
                            <subtask id="12856052">HBASE-14221</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 20 Mar 2015 00:04:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            46 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i26zx3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>