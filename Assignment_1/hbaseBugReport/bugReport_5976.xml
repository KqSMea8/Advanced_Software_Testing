<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:32:40 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-5976/HBASE-5976.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-5976] Initial module naming</title>
                <link>https://issues.apache.org/jira/browse/HBASE-5976</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;There is currently a lot of discussion around the &apos;right&apos; name for the initial module that will host all the code in the primary modularization of hbase. The current contenders are:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-core&lt;/li&gt;
	&lt;li&gt;hbase-common&lt;/li&gt;
	&lt;li&gt;hbase-server&lt;/li&gt;
	&lt;li&gt;hbase-bucket&lt;/li&gt;
	&lt;li&gt;hbase-hbase&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let&apos;s duke it out and pick the best, while keeping in mind that this module will &lt;b&gt;not&lt;/b&gt; remain the sole module going forward, but is merely the precursor &lt;/p&gt;

&lt;p&gt;Timeline to close this issue is the day before the code gets committed.&lt;/p&gt;

&lt;p&gt;Source: &lt;a href=&quot;http://search-hadoop.com/m/pwi1t1e9K0R/modularizing+trunk&amp;amp;subj=modularizing+trunk&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://search-hadoop.com/m/pwi1t1e9K0R/modularizing+trunk&amp;amp;subj=modularizing+trunk&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12554575">HBASE-5976</key>
            <summary>Initial module naming</summary>
                <type id="13" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/genericissue.png">Brainstorming</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jesse_yates">Jesse Yates</reporter>
                        <labels>
                    </labels>
                <created>Wed, 9 May 2012 22:01:00 +0000</created>
                <updated>Thu, 31 May 2012 18:55:45 +0000</updated>
                            <resolved>Thu, 31 May 2012 18:55:45 +0000</resolved>
                                    <version>0.95.2</version>
                                                    <component>build</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                    <timeoriginalestimate seconds="1209600">336h</timeoriginalestimate>
                            <timeestimate seconds="1209600">336h</timeestimate>
                                        <comments>
                            <comment id="13271861" author="stack" created="Wed, 9 May 2012 22:04:45 +0000"  >&lt;p&gt;+1 on hbase-hbase&lt;/p&gt;</comment>
                            <comment id="13271867" author="jesse_yates" created="Wed, 9 May 2012 22:06:55 +0000"  >&lt;p&gt;I went with hbase-core in the original naming because that is where the core of all the code is going to be placed. However, this has come up over and over to be confusing. &lt;/p&gt;

&lt;p&gt;+1 on hbase-common. This is a package we are going to need anyways going forward, so we might as well name it that.&lt;/p&gt;

&lt;p&gt;Having throw away names like hbase-bucket or hbase-hbase are tricky because there is a chance we get stuck with the names or have a release where they are named that way and end up with a mess like we have currently in different hadoop versions and the artifact naming they use (which is all over the map and nearly completely independent between versions). Also, I&apos;d rather save work in doing another rename.&lt;/p&gt;

&lt;p&gt;Finally, against hbase-server for the reason in the email thread that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we started with hbase-server there would be a while until all of the client and other&lt;br/&gt;
packages were split up where org.apache.hadoop.hbase.client was in the hadoop-server jar.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Elliot Clark&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Further, we don&apos;t have a timeline for when the other modules are going to be pulled out, so we could be stuck in this weird naming scheme for a while.&lt;/p&gt;</comment>
                            <comment id="13271893" author="mcorgan" created="Wed, 9 May 2012 22:40:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;+1 on hbase-common&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Do you mean start with hbase-common and later pull out hbase-server? (never introduce hbase-core)&lt;/p&gt;

&lt;p&gt;I think those are good names.  The reason i thought we should start with hbase-server was that there would be less code to extract to common and client, even though the name would be inaccurate for a while.  &lt;/p&gt;

&lt;p&gt;Looks like the trade-off is: 1) move less code but have a temporarily inaccurate name, or 2) move more code but keep the name accurate&lt;/p&gt;</comment>
                            <comment id="13271943" author="lhofhansl" created="Wed, 9 May 2012 23:32:59 +0000"  >&lt;p&gt;hbase-common makes the most sense to me. After a while we&apos;ll split out some client and some server classes.&lt;/p&gt;

&lt;p&gt;@Matt: On the mailing list you mentioned you wanted to pull out some &quot;core&quot; classes like KeyValue, etc. Where would these go?&lt;/p&gt;</comment>
                            <comment id="13271964" author="mcorgan" created="Thu, 10 May 2012 00:03:37 +0000"  >&lt;p&gt;Lars - i think we have 4 options on the table:&lt;/p&gt;

&lt;p&gt;1) We start with hbase-core.  Then i pull KeyValue out to hbase-common.  Downside here is that we have common and core which is confusing and is likely to stick around forever.  Sounds like we all want to avoid this.&lt;/p&gt;

&lt;p&gt;2) We start with hbase-common and i leave KeyValue there.  We would eventually pull most of the other stuff out to hbase-server.  The naming is good with this method, but i worry we will be moving a majority of the files to hbase-server.&lt;/p&gt;

&lt;p&gt;3) We start with hbase-server.  Then i pull KeyValue out to hbase-common.  Downside here is that hbase-server is a misleading name until the client code is pulled out.&lt;/p&gt;

&lt;p&gt;4) We start with hbase-hbase.  Then i pull KeyValue out to hbase-common (same as #3).  Downside here is that after pulling the client code out, this should probably be renamed to something like hbase-server.&lt;/p&gt;


&lt;p&gt;In #3 you are pulling core interfaces &quot;up&quot; the dependency hierarchy, while in #2 you are pulling implementations &quot;down&quot;.  I initially proposed #3 because i think it will be less work to pull the core classes out of the hairball then to pull all the implementation classes out.  Could work either way.  I defer to Jesse since he actually attempted it.&lt;/p&gt;</comment>
                            <comment id="13272104" author="jesse_yates" created="Thu, 10 May 2012 05:46:45 +0000"  >&lt;p&gt;Great breakdown Matt! &lt;/p&gt;

&lt;p&gt;Yeah, it would be to ditch the current hbase-core in favor of hbase-common.&lt;/p&gt;

&lt;p&gt;My preference for hbase-common is just because I think its going to be harder than we think to pull server classes out (having tried it once, it is pure misery). True, that in theory the server classes will likely be a large chunk of code, but I think we are going to end up with doing a lot this piecemeal, a couple server classes at a time. Since the server and client packages depend on common, HMaster and HRegion/HRegionServer seem like good initial candidates for the move. &lt;/p&gt;

&lt;p&gt;Stack had previously mentioned that he&apos;d rather wait on doing a client module until we rewrite the client, which seems a reasonable request (but who has the time?). This means we will likely take a while to get the hbase-client package out (especially since things are very entangled for between the client and server).&lt;/p&gt;

&lt;p&gt;-1 hbase-hbase (and transitively hbase-core since its essentially also a holding name) and hbase-server for the above reasons.&lt;/p&gt;

&lt;p&gt;It would be great to do all this refactoring and client rewrite in 0.96, but I&apos;m not holding my breath. In the meantime, common is a pretty standard name that everyone can use and won&apos;t hose downstream projects too much in terms of maven dependency naming (much simpler profiles will be possible, in contrast to the mess that we have with the different hadoop profiles).&lt;/p&gt;</comment>
                            <comment id="13272635" author="mcorgan" created="Thu, 10 May 2012 18:50:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think its going to be harder than we think to pull server classes out&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Trying to understand what you mean here Jesse.  I think i would agree with that statement, so I was suggesting pulling things like KeyValue, Bytes, from hbase-server up to hbase-common.&lt;/p&gt;

&lt;p&gt;The key benefit of the modules is to restrict the dependencies between modules with the goal of preventing big hairballs.  It&apos;s very similar to the motivation for interfaces and public/private/protected scopes in java - tools for strongly enforcing that classes don&apos;t directly depend on things they shouldn&apos;t.&lt;/p&gt;

&lt;p&gt;To think a little further down the line: after pulling &quot;up&quot; common classes like KeyValue, we could then pull &quot;up&quot; an hbase-memstore module that depended on hbase-common but could not see what is going on down in hbase-server.  Then pull &quot;up&quot; an hbase-wal module.  Then hbase-region.  When we pull up these modules, we try to bring their unit tests up with them (unit tests that don&apos;t need a whole cluster).&lt;/p&gt;

&lt;p&gt;Every time we pull one of these modules and its tests &quot;up&quot; out of hbase-server, it shrinks and simplifies the code in the hbase-server module.  Just as importantly, it also reduces the quantity of tests in hbase-server because modules like hbase-common, hbase-memstore, and hbase-wal each have unit tests that prove their correctness, so they can be treated like black boxes by hbase-server.  Just like the current project assumes that Guava classes are already well tested, the hbase-server module could now assume that the memstore internals are well tested.&lt;/p&gt;

&lt;p&gt;Just food for thought since we still have a couple weeks to discuss =).  We used a pulling &quot;up&quot; methodology at HotPads a few years back and it&apos;s worked really well for us.  Starting with a single &quot;site&quot; project, we first pulled up static utils, then services, then pulled out a complex indexing data-structure, etc, etc&lt;/p&gt;</comment>
                            <comment id="13273648" author="mcorgan" created="Fri, 11 May 2012 21:47:24 +0000"  >&lt;p&gt;I&apos;ll throw another name in the ring that&apos;s similar to stack&apos;s suggestions for hbase-hbase and hbase-bucket.  How about hbase-cluster?  It encompasses everything including client and server, and it&apos;s better than just a holding name.  It&apos;s better than hbase-server because it makes sense before and after the hbase-client module is pulled out.&lt;/p&gt;

&lt;p&gt;Jesse mentioned on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5977&quot; title=&quot;Usage of modules &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5977&quot;&gt;&lt;del&gt;HBASE-5977&lt;/del&gt;&lt;/a&gt; that it would be nice to eventually have an hbase-it (integration test) module.  After pulling things up out of hbase-cluster, it could find it&apos;s final resting place as the integration test module, or maybe just remain the catch-all forever.&lt;/p&gt;

&lt;p&gt;I hope i don&apos;t sound like a crazyperson worrying about a stupid name so much.  It&apos;s really the refactoring that comes after picking the name that i&apos;m talking about.&lt;/p&gt;</comment>
                            <comment id="13273658" author="jesse_yates" created="Fri, 11 May 2012 22:04:34 +0000"  >&lt;p&gt;@Matt: why the disposition to pulling up rather than pushing down? Having not had to do a refactor on this scale, it doesn&apos;t seem to make an appreciable difference at first glance.&lt;/p&gt;

&lt;p&gt;As far as hbase-cluster, sounds a lot like hbase-common: a catch-all for things that don&apos;t quite fit. &lt;/p&gt;

&lt;p&gt;The other thing that had shown up was having a common and a shared module (this is bleeding into &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5977&quot; title=&quot;Usage of modules &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5977&quot;&gt;&lt;del&gt;HBASE-5977&lt;/del&gt;&lt;/a&gt; a bit here), in that one was common dependencies and the other depends on all the other projects. I found things like the mini-cluster tended to show up in shared. The reason I bring it up, is it might be the right way to go for the &apos;first&apos; module, which you can then pull up things like common, server, client, etc. At this point, its just naming if we want to go with the cluster vs. shared naming.&lt;/p&gt;</comment>
                            <comment id="13273752" author="mcorgan" created="Sat, 12 May 2012 00:34:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;@Matt: why the disposition to pulling up rather than pushing down?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My assumption is that given 2 modules, hbase-common and hbase-cluster, we would configure it so that hbase-cluster can &quot;see&quot; hbase-common (hbase-common is in hbase-cluster&apos;s classpath), but NOT vice versa.  Were you also assuming that?  I think that&apos;s by far the most important part of the whole modularization effort.&lt;/p&gt;

&lt;p&gt;In that case, it is relatively easy to pull a class like KeyValue up from hbase-cluster to hbase-common because it has few dependencies.  For example, to pull KeyValue up, we&apos;d need to bring these classes/jars along with it: hadoop-core.jar, commons-logging.jar, guava.jar, HeapSize.java, ClassSize.java, and Bytes.java.  So that&apos;s pretty easy.  &lt;/p&gt;

&lt;p&gt;If later I go on to make an hbase-prefix-trie, or hbase-codec, or hbase-whatever module.  I let this new module see hbase-common, but not hbase-cluster.  For hbase-prefix-trie, I will need access to 2 more classes: DataBlockEncoder and DataBlockEncoding, so i just pull those up in to hbase-common and I&apos;m done.  It&apos;ll be important that hbase-prefix-trie cannot see into hbase-cluster and hbase-cluster cannot see into hbase-prefix-trie, because that is how hairballs happen.  In this case the two modules will communicate with each other through the DataBlockEncoder interface in hbase-common, and the DataBlockEncoder implementation is instantiated via reflection at runtime.&lt;/p&gt;

&lt;p&gt;If someone goes on to make hbase-client, they will need to pull a few more interfaces up into hbase-common.  And maybe in this case hbase-cluster can see into the simpler hbase-client module (but we don&apos;t want hbase-client seeing into hbase-cluster).&lt;/p&gt;

&lt;p&gt;If we go with a push-down methodology, i&apos;m not sure where you&apos;d start.  You would need to push down some big implementation classes that have circular dependencies on other classes, so you&apos;d have to push down the dependencies as well, which will lead to more dependencies and so on.  And if you pull out an implementation class, you need to push-down all the tests that reference it.  I suspect it would spiral out of control until you&apos;ve pushed down just about everything except KeyValue.&lt;/p&gt;</comment>
                            <comment id="13273861" author="stack" created="Sat, 12 May 2012 06:32:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;@Matt: why the disposition to pulling up rather than pushing down?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thinking on it, I think pulling up &amp;#8211; where up takes us toward more base types and down takes us toward client facing APIs &amp;#8211; is viable in that I can see us making headway extracting base types and utility out into coherent modules.  Going the other way, starting out at a base and then pulling classes won&apos;t happen methinks.  The master and the client and the regionserver packages all reach into other.  You won&apos;t be able to make modules of them (IMO).  In fact, I was thinking that the only way to go down would be by writing completely new stuff; e.g. a new client (perhaps in org.apache.hbase package rather than o.a.h.h to delineate it for sure a break w/ the past, or an hbase-server only this server is server &amp;#8211; o.a.h.Server &amp;#8211; does regionserver and master roles when called upon).&lt;/p&gt;

&lt;p&gt;If this the case, hbase-common might be hard to work with.  If we went w/ hbase-common, how would we make superior modules?  What would we have to name them: hbase-base? hbase-utils? hbase-base-types, hbase-foundation? hbase-fundamentals?&lt;/p&gt;

&lt;p&gt;hbase-cluster is a little awkward.  I do appreciate that it is not &apos;loaded&apos; like core and common are though so its hard to peg which &apos;tier&apos; it belongs to.&lt;/p&gt;

&lt;p&gt;I would like to avoid our having core and common as over in hadoop.  Its strikes me as a failed modeling exercise whenever I trip over it.&lt;/p&gt;</comment>
                            <comment id="13275031" author="jesse_yates" created="Mon, 14 May 2012 22:58:28 +0000"  >&lt;p&gt;@Stack:&lt;br/&gt;
I definitely don&apos;t want to have more than hbase-core OR hbase-common. Agree that it is not good to have both, but having some common utility/functionality in one place is all I&apos;m trying to get at with this module naming (see the other ticket for the eventual, final module naming). &lt;/p&gt;

&lt;p&gt;@all:&lt;br/&gt;
WRT pull-up/push-down what I found was that things are very entangled, as stack said, with lots of cross-package referencing. Will a pull-up method, its going to probably be 4-5 classes (KeyValue, Result, HConstants, Bytes) and require a large amount of refactoring  - if not necessarily rewrite - of the main classes (hregion(Server), hmaster, client). &lt;/p&gt;

&lt;p&gt;I&apos;m coming around to the idea of pulling up, but just don&apos;t want to get stuck with an odd-named package (e.g. hbase-cluster, hbase-hbase) that could live through the intermediate version and into a release; this would be really bad and part of what is weird with hadoop versions/modules. I would feel better if we can get some people can commit to doing parts of the refactoring (hackathon discussion?) to make 0.96 a real modularization. &lt;/p&gt;

&lt;p&gt;The test classes are going to be a big issue actually. Since we can&apos;t depend on the test-jar being created, there are going to be some pain around the tests. As Matt notes, the pure unit-tests are going to live per package at the moment, but then we are going to need to have a general tests module or a test-util module (but that&apos;s a bit off topic). &lt;/p&gt;

&lt;p&gt;No comment on the o.a.hbase.Server class, but I can see the appeal &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;p&gt;Sounds like hbase-server with the expectation that it we are going to pull up into a common and out into a client?&lt;/p&gt;</comment>
                            <comment id="13286829" author="jesse_yates" created="Thu, 31 May 2012 18:55:45 +0000"  >&lt;p&gt;First module got named hbase-server. See &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5977&quot; title=&quot;Usage of modules &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5977&quot;&gt;&lt;del&gt;HBASE-5977&lt;/del&gt;&lt;/a&gt; for more on modules.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12521509">HBASE-4336</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 9 May 2012 22:04:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>238825</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 29 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hudj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>102183</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>build, maven</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>