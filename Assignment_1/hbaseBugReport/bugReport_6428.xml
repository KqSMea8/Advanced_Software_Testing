<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:36:41 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-6428/HBASE-6428.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-6428] Pluggable Compaction policies</title>
                <link>https://issues.apache.org/jira/browse/HBASE-6428</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;For some usecases is useful to allow more control over how KVs get compacted.&lt;/p&gt;

&lt;p&gt;For example one could envision storing old versions of a KV separate HFiles, which then rarely have to be touched/cached by queries querying for new data.&lt;br/&gt;
In addition these date ranged HFile can be easily used for backups while maintaining historical data.&lt;/p&gt;

&lt;p&gt;This would be a major change, allowing compactions to provide multiple targets (not just a filter).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12599400">HBASE-6428</key>
            <summary>Pluggable Compaction policies</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="10">Implemented</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="lhofhansl">Lars Hofhansl</reporter>
                        <labels>
                    </labels>
                <created>Thu, 19 Jul 2012 04:27:45 +0000</created>
                <updated>Tue, 14 May 2013 00:20:53 +0000</updated>
                            <resolved>Tue, 14 May 2013 00:20:53 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>13</watches>
                                                                <comments>
                            <comment id="13418924" author="lhofhansl" created="Fri, 20 Jul 2012 05:13:36 +0000"  >&lt;p&gt;Another way of looking at this is a possible policy that considers all HFile in terms of a baseline + changes on top of that baseline.&lt;/p&gt;

&lt;p&gt;(For the record: I am not saying that I will do this any time soon, just recording this as an idea).&lt;/p&gt;</comment>
                            <comment id="13419279" author="apurtell" created="Fri, 20 Jul 2012 15:50:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;For example one could envision storing old versions of a KV separate HFiles, which then rarely have to be touched/cached by queries querying for new data. In addition these date ranged HFile can be easily used for backups while maintaining historical data.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d be curious if you think the Coprocessor API for compactions cannot be reworked to handle this.&lt;/p&gt;</comment>
                            <comment id="13419695" author="lhofhansl" created="Fri, 20 Jul 2012 23:49:57 +0000"  >&lt;p&gt;That is an excellent point.&lt;br/&gt;
Should also think about &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6427&quot; title=&quot;Pluggable compaction and scan policies via coprocessors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6427&quot;&gt;&lt;del&gt;HBASE-6427&lt;/del&gt;&lt;/a&gt; with this in mind.&lt;/p&gt;</comment>
                            <comment id="13419710" author="lhofhansl" created="Sat, 21 Jul 2012 00:44:51 +0000"  >&lt;p&gt;As it stands the Coprocessor could at best function as a post filter. In this case that might be good enough, though. preCompact could skip the normal processing and use the passed internalScanner and then write to multiple store files; for example based on TS.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6427&quot; title=&quot;Pluggable compaction and scan policies via coprocessors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6427&quot;&gt;&lt;del&gt;HBASE-6427&lt;/del&gt;&lt;/a&gt; is different in that there I want &quot;unfilter&quot; something, so any coprocessor hooks would have to be deeper in the stack.&lt;/p&gt;</comment>
                            <comment id="13420741" author="apurtell" created="Mon, 23 Jul 2012 16:12:07 +0000"  >&lt;p&gt;Is there a use case where there could be multiple receivers for a getSmallestReadPoint call? Where you want that kind of stacking, the CP API upcall approach is good; where you have a global behavior that you might want to override, a plug makes sense. For consistency&apos;s sake, those pluggable points should all work the same way. We have &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4050&quot; title=&quot;Update HBase metrics framework to metrics2 framework&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4050&quot;&gt;&lt;del&gt;HBASE-4050&lt;/del&gt;&lt;/a&gt;&apos;s ServiceLoader, but I think we should also look at Guice (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6407&quot; title=&quot;Investigate moving to DI (guice) framework for plugin arch.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6407&quot;&gt;&lt;del&gt;HBASE-6407&lt;/del&gt;&lt;/a&gt;). &lt;/p&gt;

&lt;p&gt;Edit: Another consideration is performance. I&apos;d like to draw a distinction between coarse grained extension and fine grained extension. The former is where large sections of functionality are replaced, for example using CPs to replace default compaction selection with another strategy. The latter certainly applies to single method calls on hot code paths. For the latter, ideally we want an extension mechanism that will still allow the JVM to inline what&apos;s plugged in. &lt;/p&gt;</comment>
                            <comment id="13420744" author="apurtell" created="Mon, 23 Jul 2012 16:14:45 +0000"  >&lt;p&gt;Above comment is really for &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6427&quot; title=&quot;Pluggable compaction and scan policies via coprocessors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6427&quot;&gt;&lt;del&gt;HBASE-6427&lt;/del&gt;&lt;/a&gt;. Linking it to here.&lt;/p&gt;

&lt;p&gt;As for a general &quot;pluggable compaction policy&quot; I can see where stacking could make sense for that, so I&apos;d suggest we see how the CP APIs could best be applied, or extended.&lt;/p&gt;</comment>
                            <comment id="13421182" author="lhofhansl" created="Tue, 24 Jul 2012 05:12:00 +0000"  >&lt;p&gt;Yep. I think we agree that the CP framework is good match for this issue (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6428&quot; title=&quot;Pluggable Compaction policies&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6428&quot;&gt;&lt;del&gt;HBASE-6428&lt;/del&gt;&lt;/a&gt;) and then &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6427&quot; title=&quot;Pluggable compaction and scan policies via coprocessors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6427&quot;&gt;&lt;del&gt;HBASE-6427&lt;/del&gt;&lt;/a&gt; needs a different approach. The CP might need a bit more information in order to be able to determine the desired location of new HFiles, but otherwise &quot;should&quot; (famous last words) be good.&lt;/p&gt;

&lt;p&gt;Speaking of CPs. I find that the apis for flushes and compaction are different in the sense that pre/post flush is per region whereas pre/postCompaction is per store.&lt;br/&gt;
Can&apos;t change that now, but maybe there should be a &lt;/p&gt;
{pre|post}
&lt;p&gt;StoreFlush CP hook that is passed the store and the scanner, so it can interfere with flush in the same it can with a compaction.&lt;/p&gt;

&lt;p&gt;For &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6427&quot; title=&quot;Pluggable compaction and scan policies via coprocessors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6427&quot;&gt;&lt;del&gt;HBASE-6427&lt;/del&gt;&lt;/a&gt; I was thinking something simple like RegionSplitPolicy, which just loads a class by reflection.&lt;br/&gt;
A generalized plugin loading mechanism would be nice, though.&lt;/p&gt;</comment>
                            <comment id="13424484" author="lhofhansl" created="Sun, 29 Jul 2012 03:51:23 +0000"  >&lt;p&gt;Just looked at the current compaction code.&lt;br/&gt;
At the very least the Store.completeCompaction and Store.createWriterInTmp need to be made public. In addition Store.completeCompaction has accept Collection&amp;lt;StoreFile.Writer&amp;gt; instead of just a single StoreFile.Writer.&lt;br/&gt;
Need to dig a bit deeper, but these changes should allow a coprocessor to take over compactions, write a new set of store files (maybe leveled, or time based) and hook these new HFiles up with HBase.&lt;/p&gt;</comment>
                            <comment id="13424485" author="lhofhansl" created="Sun, 29 Jul 2012 03:53:01 +0000"  >&lt;p&gt;To be complete, this needs the new postFlush hook suggested in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6427&quot; title=&quot;Pluggable compaction and scan policies via coprocessors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6427&quot;&gt;&lt;del&gt;HBASE-6427&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13481118" author="lhofhansl" created="Mon, 22 Oct 2012 01:35:50 +0000"  >&lt;p&gt;I would like to revive this issue. If Store.createWriterInTmp and Store.completeCompaction were public and Store.completeCompaction would allow also a list of new writers to be passed in, it would be possible a &quot;poor man&apos;s tiered compaction&quot; like this:&lt;/p&gt;

&lt;p&gt;RegionObserver.preCompact(Store, Scanner) would traverse through the scanner, and write the (say) 3 newest version of each KV into a writer and all others into another writer, (or one could tier based on multiple ranges of timestamp and hence keep historical data separate from current data).&lt;br/&gt;
Upon completion it would call completeCompaction passing all created writers.&lt;/p&gt;

&lt;p&gt;RegionObserver.preCompact would probably also need to know the compaction type (so that this tiering could be different between major and minor compactions).&lt;/p&gt;

&lt;p&gt;Does this make sense? I have a need to store historical data life in HBase for occasional historical queries, but would like to avoid a big impact to scanners who only care for the newest KVs.&lt;/p&gt;</comment>
                            <comment id="13481639" author="apurtell" created="Mon, 22 Oct 2012 18:59:02 +0000"  >&lt;p&gt;It does make sense, yes.&lt;/p&gt;</comment>
                            <comment id="13482163" author="lhofhansl" created="Tue, 23 Oct 2012 06:50:54 +0000"  >&lt;p&gt;Hmm... This actually would be much simpler if the entire Compactor class could be pluggable; along with some refactoring of that class into an extensible interface.&lt;br/&gt;
I guess that&apos;s what &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5334&quot; title=&quot;Pluggable Compaction Algorithms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5334&quot;&gt;&lt;del&gt;HBASE-5334&lt;/del&gt;&lt;/a&gt; has in mind.&lt;/p&gt;</comment>
                            <comment id="13482879" author="lhofhansl" created="Wed, 24 Oct 2012 00:53:45 +0000"  >&lt;p&gt;I&apos;ll have a demo patch of what I have in mind in a bit.&lt;/p&gt;</comment>
                            <comment id="13638881" author="jeason" created="Tue, 23 Apr 2013 08:21:59 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; Any updates on this?&lt;/p&gt;</comment>
                            <comment id="13639616" author="lhofhansl" created="Tue, 23 Apr 2013 20:55:19 +0000"  >&lt;p&gt;Thanks for the reminder, I never got to finishing the patch.&lt;/p&gt;</comment>
                            <comment id="13639618" author="lhofhansl" created="Tue, 23 Apr 2013 20:57:08 +0000"  >&lt;p&gt;Well... Reading back now. It seems we should do one of this and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5334&quot; title=&quot;Pluggable Compaction Algorithms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5334&quot;&gt;&lt;del&gt;HBASE-5334&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13639620" author="lhofhansl" created="Tue, 23 Apr 2013 21:00:35 +0000"  >&lt;p&gt;The general plan here was to make Compactor pluggable + some changes to Store/HStore to allow for compactions to produce multiple files.&lt;/p&gt;</comment>
                            <comment id="13641303" author="jeason" created="Thu, 25 Apr 2013 02:04:19 +0000"  >&lt;p&gt;Thanks for your reply, this is really a good feature&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13656577" author="lhofhansl" created="Tue, 14 May 2013 00:20:53 +0000"  >&lt;p&gt;Turns out this is already done in trunk. Closing.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12503555">HBASE-3745</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12598354">HBASE-6371</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12541160">HBASE-5334</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12599399">HBASE-6427</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 20 Jul 2012 15:50:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>250218</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 31 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0awa7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>61503</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>