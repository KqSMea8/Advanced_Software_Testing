<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:44:38 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7320/HBASE-7320.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7320] Remove KeyValue.getBuffer()</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7320</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;In many places this is simple task of just replacing the method name.&lt;br/&gt;
There, however, quite a few places where we assume that:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;the entire KV is backed by a single byte array&lt;/li&gt;
	&lt;li&gt;the KVs key portion is backed by a single byte array&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Some of those can easily be fixed, others will need their own jiras.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12623342">HBASE-7320</key>
            <summary>Remove KeyValue.getBuffer()</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="stack">stack</assignee>
                                    <reporter username="lhofhansl">Lars Hofhansl</reporter>
                        <labels>
                    </labels>
                <created>Tue, 11 Dec 2012 07:40:26 +0000</created>
                <updated>Tue, 28 Apr 2015 02:28:31 +0000</updated>
                                                            <fixVersion>2.0.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>15</watches>
                                                                                                            <comments>
                            <comment id="13748277" author="ram_krish" created="Fri, 23 Aug 2013 04:39:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;others will need their own jiras.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In the sense the Reader/Writers need changes right?  We tried working with Cells in these areas and that required changes in the read path like how we do seek(), reseek() and the way the reader creates the KVs from the internal buffer.&lt;br/&gt;
The readers are tightly coupled with the KV format.&lt;/p&gt;</comment>
                            <comment id="13877235" author="lhofhansl" created="Tue, 21 Jan 2014 05:53:34 +0000"  >&lt;p&gt;Yes. I was thinking we start with:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;deprecate KeyValue.getBuffer(). Nobody should use this going forward&lt;/li&gt;
	&lt;li&gt;fix all obvious cases with one large patch (i.e. at places where we should need the row, use getRowArray() instead of getBuffer())&lt;/li&gt;
	&lt;li&gt;for all non-trivial cases (like the readers and writers) file individual jiras to fix them&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;#1 and #2 should be simple (albeit repetitive) tasks. #3 are the interesting issues.&lt;/p&gt;</comment>
                            <comment id="13877239" author="ram_krish" created="Tue, 21 Jan 2014 05:59:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;for all non-trivial cases (like the readers and writers) file individual jiras to fix them&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13877295" author="stack" created="Tue, 21 Jan 2014 07:21:33 +0000"  >&lt;p&gt;Here is #1 deprecation. Lets get it into 0.98 at least.&lt;/p&gt;

&lt;p&gt;This is going to be a fun project.  I started to look at all the times we get the family array.  Its a bunch just to check if the KV famiily is legit client-side in the individual types &amp;#8211; Put, Increment, etc. &amp;#8211; and then on serverside in Region.&lt;/p&gt;

&lt;p&gt;I was going to take a look at this in background, especially on read path.&lt;/p&gt;</comment>
                            <comment id="13877297" author="stack" created="Tue, 21 Jan 2014 07:22:18 +0000"  >&lt;p&gt;Can we get the deprecation into 0.98 &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;  I&apos;ll presume yes and commit.  Let me know if you want me to back it out.&lt;/p&gt;</comment>
                            <comment id="13877301" author="stack" created="Tue, 21 Jan 2014 07:26:01 +0000"  >&lt;p&gt;Instead I made a subissue to get #1 into 0.98.  Will leave this issue open as umbrella issue.&lt;/p&gt;</comment>
                            <comment id="13877637" author="apurtell" created="Tue, 21 Jan 2014 17:32:43 +0000"  >&lt;p&gt;+1 for the deprecation. It already went in on the subtask anyhow.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This is going to be a fun project. I started to look at all the times we get the family array. Its a bunch just to check if the KV family is legit client-side in the individual types &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We get both family and qualifier arrays in the access controller because we have to look in descending order at perms for global, namespace, table, cf, cf + qualifier, cell.&lt;/p&gt;</comment>
                            <comment id="13877745" author="lhofhansl" created="Tue, 21 Jan 2014 19:05:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;I started to look at all the times we get the family array.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s legit, I think. Getting the row, family, qualifier and value via their own xyzArray method is OK.&lt;br/&gt;
We can assume that the row, family, qualifier, and value are laid out in ram in at least a byte[] (or bytebuffer). What we cannot assume that there is any layout relationship between them.&lt;/p&gt;

&lt;p&gt;What is not OK are at least KeyValue.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;getBuffer&lt;/li&gt;
	&lt;li&gt;getOffset&lt;/li&gt;
	&lt;li&gt;getLength&lt;/li&gt;
	&lt;li&gt;getKeyOffset&lt;/li&gt;
	&lt;li&gt;getKeyLength&lt;/li&gt;
	&lt;li&gt;getKey/getKeyString&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As we should not assume that row/family/qualifier are laid out together nor that the entire KV is laid out together.&lt;/p&gt;
</comment>
                            <comment id="13878242" author="ram_krish" created="Wed, 22 Jan 2014 04:21:11 +0000"  >&lt;p&gt;Would love to help out in this area.  While doing the HFileV3 with cells combined with the encoders faced a lot of blockades with the KV format tightly coupled. &lt;br/&gt;
Interesting places will be where we try to reseek/seek creating an Fake KV and do a compare to see if we have reached this KV or something greater than that. &lt;/p&gt;</comment>
                            <comment id="13878255" author="lhofhansl" created="Wed, 22 Jan 2014 04:45:50 +0000"  >&lt;p&gt;If we all agree that is OK to store row, family, qualifier, and value continuously in ram, I can knock off all the simple cases next week.&lt;br/&gt;
Note that that would work for block encoding, where we would no longer need to re-materialize the KV just so that the entire KV is stored continuously; but it would not help with prefix tries, as there we&apos;d even want to store partial rows, families, etc. (Correct &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt;?)&lt;/p&gt;</comment>
                            <comment id="13878266" author="stack" created="Wed, 22 Jan 2014 05:10:40 +0000"  >&lt;p&gt;Mighty &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;   I am a little confused now.  You have &quot;If we all agree that is OK to store row, family, qualifier, and value continuously in ram...&quot; but before this you have &quot;... What we cannot assume that there is any layout relationship between them.&quot;  I think I know what you are saying... but maybe clarify?&lt;/p&gt;</comment>
                            <comment id="13878279" author="mcorgan" created="Wed, 22 Jan 2014 05:28:19 +0000"  >&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;If we all agree that is OK to store row, family, qualifier, and value continuously in ram&lt;/p&gt;&lt;/blockquote&gt;Sounds like a step in the right direction.  So you would basically wrap naked byte[]&apos;s in KeyValue objects rather than operating on them directly?&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;but it would not help with prefix tries.&lt;/p&gt;&lt;/blockquote&gt;Right.  PrefixTreeCell goes further and breaks out each Cell field into its own primitive value/array.  For example, PrefixTreeCell.getFamilyLength() just returns a value it has already extracted rather than calling a few methods to calculate the length each time it&apos;s called (like KeyValue).&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;as there we&apos;d even want to store partial rows, families, etc&lt;/p&gt;&lt;/blockquote&gt;I&apos;m probably reading too closely here.  The PrefixTreeCell has a separate array for row/family/etc, but a single row/family/etc is not split further into fragments.  (It is while encoded, but the decoder assembles each field into consecutive bytes.)&lt;/p&gt;</comment>
                            <comment id="13878285" author="lhofhansl" created="Wed, 22 Jan 2014 05:39:01 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, sorry I am having a hard time phrasing this concisely.&lt;/p&gt;

&lt;p&gt;The problem is that we currently assume two things:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;the entire KV is stored in one contiguous area in ram&lt;/li&gt;
	&lt;li&gt;the key portion (row/family/qual/ts) is stored contiguously in ram&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;It is OK that the row key is stored contiguously in ram, same for the family, qualifier, and value. I.e. we do not break up row-key, family, qualifier, or value, but we do no longer assume the entire KV or the key-portion are in one piece.&lt;br/&gt;
With that in mind things like getFamily, getFamilyArray, getFamilyOffset, getFamilyLength (and same for row, qualifier, and value) are OK. But getKeyLength, getLength, getBuffer, etc, are not OK.&lt;/p&gt;

&lt;p&gt;Or in other words: To a caller it should not mater the the KV is stored in one byte[] or whether there are separate byte[] for some or all of rowkey, family, qualified, and value.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt;, cool, so this &lt;b&gt;would&lt;/b&gt; help with prefix trees. If families, row-keys, qualifier are not broken down into fragments. How about the values, can we assume them in one piece, still?&lt;/p&gt;

&lt;p&gt;I also have to go back and think about timestamp.&lt;/p&gt;</comment>
                            <comment id="13878292" author="mcorgan" created="Wed, 22 Jan 2014 05:51:13 +0000"  >&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;How about the values, can we assume them in one piece, still?&lt;/p&gt;&lt;/blockquote&gt;yes, an individual value is contiguous too.  The CellScanner.advance() call decodes all these fields into optimal format for reading, and then the CellScanner.current() method returns a reference to &quot;PrefixTreeCell implements Cell&quot;.  When you call cell.getWhatever(), it&apos;s a trivial pass-through call to each pre-extracted field.  For example, timestamp has already been converted from bytes to a &quot;long&quot; before you call cell.getTimestamp().&lt;/p&gt;</comment>
                            <comment id="13878305" author="apurtell" created="Wed, 22 Jan 2014 06:05:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;It is OK that the row key is stored contiguously in ram, same for the family, qualifier, and value. I.e. we do not break up row-key, family, qualifier, or value, but we do no longer assume the entire KV or the key-portion are in one piece.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would be great, that&apos;s the first step to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9794&quot; title=&quot;KeyValues / cells backed by buffer fragments&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9794&quot;&gt;HBASE-9794&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13878927" author="ndimiduk" created="Wed, 22 Jan 2014 18:09:54 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; if I follow your intentions, this means:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;KeyValue#getBuffer goes away entirely &amp;#8211; there&apos;s API assumption that a KeyValue is backed by a single &quot;buffer object&quot; of any type (byte[], ByteBuffer, &amp;amp;c.). A KeyValue instance /could/ be backed by a single &quot;buffer object&quot;, at the option of its creator, but this is an implementation detail.&lt;/li&gt;
	&lt;li&gt;KeyValue objects by API design is now backed by 5 &quot;buffer objects&quot; &amp;#8211; one for each rowkey, cf, qualifier, ts, and value.&lt;/li&gt;
	&lt;li&gt;previous point does not restrict some producer of KeyValue instances from using it&apos;s on encoding of multiple instances, but it does require that producer to generate instances that conform to this API. For example, say I wanted to store KeyValues in batches of 100 where all rowkeys are stored together, then all cf, then quals, then ts, then values and make optimizations therein. The requirement is I can produce a KeyValue instance from the block that implement getXXXArray methods AND I no longer must materialize a &quot;buffer object&quot; for support of getBuffer.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Did I get that right?&lt;/p&gt;

&lt;p&gt;Do we have any thought on what an appropriate &quot;buffer object&quot; should be? Is that for another ticket?&lt;/p&gt;</comment>
                            <comment id="13879080" author="lhofhansl" created="Wed, 22 Jan 2014 19:34:57 +0000"  >&lt;p&gt;Exactly.&lt;/p&gt;

&lt;p&gt;Would have to think a bit more about the TS. Do we want to this be backed by byte[] as well, or just completely get rid of the array/offset/length API for TS and just a getTimeStamp method?&lt;/p&gt;
</comment>
                            <comment id="13879120" author="mcorgan" created="Wed, 22 Jan 2014 20:10:23 +0000"  >&lt;p&gt;It would be nice to move towards callers of getTimestamp() expecting the &quot;long&quot; value returned by the Cell interface.  I&apos;m guessing there is little to negative performance gain operating on the bytes directly.&lt;/p&gt;</comment>
                            <comment id="13881346" author="lhofhansl" created="Fri, 24 Jan 2014 19:31:22 +0000"  >&lt;p&gt;Here&apos;s a patch that changes all the simple calls.&lt;br/&gt;
(Somebody had to do the repetitive work)&lt;/p&gt;

&lt;p&gt;All calls to getBuffer() left are of two categories:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;access a KVs complete key&lt;/li&gt;
	&lt;li&gt;access the KV as a whole&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Now we need to fix those.&lt;/p&gt;</comment>
                            <comment id="13881348" author="lhofhansl" created="Fri, 24 Jan 2014 19:31:49 +0000"  >&lt;p&gt;Let&apos;s see if I messed up anything.&lt;/p&gt;</comment>
                            <comment id="13881353" author="lhofhansl" created="Fri, 24 Jan 2014 19:35:53 +0000"  >&lt;p&gt;Looks like jenkins is taking a vacation.&lt;/p&gt;</comment>
                            <comment id="13881419" author="stack" created="Fri, 24 Jan 2014 20:50:18 +0000"  >&lt;p&gt;I went through trying to be careful.  Looks great to me.  If I had done it I would have missed loads of these... especially the likes of this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-                &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy(c.getTagsArray(), c.getTagsOffset(), newKV.getBuffer(),
+                &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy(c.getTagsArray(), c.getTagsOffset(), newKV.getTagsArray(),
                     newKV.getTagsOffset(), oldCellTagsLen);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Excellent &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13881472" author="lhofhansl" created="Fri, 24 Jan 2014 22:09:01 +0000"  >&lt;p&gt;Even better, when&apos;re done many of these array copies can go away as we can just make a new Cell and point it to the existing array if we do not change them.&lt;/p&gt;

&lt;p&gt;The next part is to get rid of the timestamp array API completely.&lt;/p&gt;

&lt;p&gt;After that, I think, is to writeTo/readFrom files. The writing side might be simple as long we keep the format, in that case the reading side might not have to change at all (it is still OK to back a Cell by a single byte[])&lt;/p&gt;

&lt;p&gt;Big parts are: ScanQueryMatcher, which dissects the KV itself, and all the comparators in KeyValue itself.&lt;/p&gt;</comment>
                            <comment id="13881473" author="lhofhansl" created="Fri, 24 Jan 2014 22:09:57 +0000"  >&lt;p&gt;As for this patch, should I put it into a subtask?&lt;/p&gt;</comment>
                            <comment id="13881728" author="hadoopqa" created="Sat, 25 Jan 2014 07:07:10 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12625095/7320-simple.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12625095/7320-simple.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12625095&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 24 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +              System.arraycopy(q, 0, newKV.getQualifierArray(), newKV.getQualifierOffset(), q.length);&lt;br/&gt;
+    KeyValue rewriteKv = new KeyValue(newKv.getRowArray(), newKv.getRowOffset(), newKv.getRowLength(),&lt;br/&gt;
+    KeyValue rewriteKv = new KeyValue(newKv.getRowArray(), newKv.getRowOffset(), newKv.getRowLength(),&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8502//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13881730" author="lhofhansl" created="Sat, 25 Jan 2014 07:18:37 +0000"  >&lt;p&gt;Coo. Passes all tests. I&apos;ll fix the long lines.&lt;br/&gt;
Then I think this is good to commit.&lt;/p&gt;</comment>
                            <comment id="13882066" author="stack" created="Sat, 25 Jan 2014 21:42:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;All calls to getBuffer() left are of two categories: access a KVs complete key, access the KV as a whole, Now we need to fix those.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How you think we fix these Lars?  Would the best approach now be to try and implement a new Cell type altogether?  That would shake out any reliance on KV?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The next part is to get rid of the timestamp array API completely.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can we change the Cell Interface ex post facto?  Cell was published in 0.96.0?  Or could we deprecate the array accesses on timestamp and behind the scenes return an array if asked but not use it in core codebase?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;After that, I think, is to writeTo/readFrom files. The writing side might be simple as long we keep the format, in that case the reading side might not have to change at all (it is still OK to back a Cell by a single byte[])&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What is to be done here?  Adding Cell Interfaces and moving over to use those?&lt;/p&gt;

&lt;p&gt;Encoders?&lt;/p&gt;

&lt;p&gt;bq, Big parts are: ScanQueryMatcher, which dissects the KV itself, and all the comparators in KeyValue itself.&lt;/p&gt;

&lt;p&gt;We would move to use Cell-base comparators rather than KV#comparators?&lt;/p&gt;</comment>
                            <comment id="13882067" author="stack" created="Sat, 25 Jan 2014 21:42:32 +0000"  >&lt;p&gt;I already gave +1 on commit.&lt;/p&gt;</comment>
                            <comment id="13882068" author="stack" created="Sat, 25 Jan 2014 21:44:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;As for this patch, should I put it into a subtask?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.&lt;/p&gt;</comment>
                            <comment id="13882073" author="lhofhansl" created="Sat, 25 Jan 2014 21:53:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can we change the Cell Interface ex post facto?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Cell has only &lt;tt&gt;long getTimestamp()&lt;/tt&gt;, so that&apos;s clean. I meant removing calls to getTimestampOffset, etc.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Would the best approach now be to try and implement a new Cell type altogether?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Maybe, but then we&apos;d have to replace KeyValue everywhere, and the KeyValue type leaks to the client, so not sure we can do that.&lt;br/&gt;
In the end it&apos;d come to the same, either we make a new type, or we fix KeyValue to be the new type. Either way seems fine.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How you think we fix these Lars?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Need to look at each case individually to see how to fix them. Some are only printing out the key for example and in that we just print the row/family/qualifier/timestamp separately.&lt;/p&gt;</comment>
                            <comment id="13882075" author="lhofhansl" created="Sat, 25 Jan 2014 21:56:44 +0000"  >&lt;p&gt;Filed &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10420&quot; title=&quot;Replace KV.getBuffer with KV.get{Row|Family|Qualifier|Value|Tags}Array&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10420&quot;&gt;&lt;del&gt;HBASE-10420&lt;/del&gt;&lt;/a&gt;. Let&apos;s leave this one unassigned as umbrella issue.&lt;/p&gt;</comment>
                            <comment id="13900263" author="ram_krish" created="Thu, 13 Feb 2014 12:03:45 +0000"  >&lt;p&gt;Replacing KeyValues with cells&lt;br/&gt;
==============================&lt;br/&gt;
I am trying to work on this, as a first step seeing how to replace the references to Keyvalue as cells and seeing how to ensure a new KeyValue format to fit in this code base.&lt;br/&gt;
Currently everywhere in the code we are passing KeyValue in the args and also returning keyvalue everywhere.&lt;br/&gt;
There are some places where there are specific instances of Keyvalue methods getting used like in TimeRangeTracker isDeleteColumnOrFamily. Already CellUtil.java has some of them.&lt;br/&gt;
I think we can move this to some helper class.&lt;/p&gt;

&lt;p&gt;When we trying to apply a different format of KeyValue say if we have individual byte arrays for rows, families, qualifiers, values and tags (if present), like Cellcodec&lt;br/&gt;
we need to handle these cases.  &lt;br/&gt;
As in the comment &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7320?focusedCommentId=13882073&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13882073&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-7320?focusedCommentId=13882073&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13882073&lt;/a&gt;&lt;br/&gt;
we may have to change the existing keyvalue only but support a new format, that would help us in avoiding these problems.&lt;/p&gt;

&lt;p&gt;Also take the case if we implement a new Cell type then every where we may need to instantiate that new class but reference it with a cell. And change the args&lt;br/&gt;
and return type every where to Cell.&lt;br/&gt;
In turn this would require changes through out the code.&lt;br/&gt;
KVComparator some of the apis still take KeyValue as the argument.  I think we could change that.&lt;br/&gt;
Should Cell interface itself extend HeapSize and Cloneable?  I think this would be needed. - (I can file JIRA for these two points).  &lt;br/&gt;
Memstore.maybeCloneWithAllocator is one place where may have to use the clone method of the Cell&apos;s implementation&lt;/p&gt;

&lt;p&gt;In StoreFileScanner we do reseekTo and seekTo that seeks to a key ( this is not the rowkey).  So can we change this to the rowkey?&lt;br/&gt;
Also I would suggest that all the StoreScanner, KeyValueSCanner etc. interfaces can be changed to work with Cell like the seek, reseek etc.  Let me know what you guys feel so that I can raise individual subtasks for them.&lt;/p&gt;</comment>
                            <comment id="13900599" author="lhofhansl" created="Thu, 13 Feb 2014 18:54:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;Currently everywhere in the code we are passing KeyValue in the args and also returning keyvalue everywhere.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think that not a problem per se, as long as nobody calls getBuffer, getKey, etc.&lt;br/&gt;
I have not quite wrapped my head around Cell vs. KeyValue. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;KVComparator some of the apis still take KeyValue as the argument. I think we could change that.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We could and probably should. But we do not need to as long the comparator does not assume anything beyond a continuous layout of row-key, family, column.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In StoreFileScanner we do reseekTo and seekTo that seeks to a key ( this is not the rowkey). So can we change this to the rowkey?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We&apos;re seeking to something identified by its coordinates, which in our case are row-key, family, column identifier, and timestamp. Passing the &quot;key&quot; was just a convenient way to pass of these together.&lt;/p&gt;

&lt;p&gt;Another tricky part is serialization and deserialization. We do not want to change the HFile storage format (I think). It is not incorrect to deserialize a KeyValue into a single byte[] (as long as nobody relies on it). So we could keep the current storage format and have serialization code that generates it from the individual byte[]&apos;s (i.e. we calculate the length and keylength from the individual parts and then write them to the HFile just like it would have been written now). Upon read we always deserilize into the current format.&lt;/p&gt;</comment>
                            <comment id="13900665" author="stack" created="Thu, 13 Feb 2014 19:54:31 +0000"  >&lt;p&gt;I read through your note &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;  What &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; says.&lt;/p&gt;

&lt;p&gt;On HFile, it needs a redo especially when you come up through compressors and codecs.  HFile APIs have KV hardwiring.  Start over might be appropriate, v4.  Unless better idea, for serializations, lets do cellblocks recording the codec used in the hfile metadata.&lt;/p&gt;</comment>
                            <comment id="13901025" author="mcorgan" created="Fri, 14 Feb 2014 02:13:45 +0000"  >&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;Another tricky part is serialization and deserialization. We do not want to change the HFile storage format (I think).&lt;/p&gt;&lt;/blockquote&gt;Could you implement a NoopDataBlockEncoder that writes the same format as unencoded blocks?  (might need a trick to get the block header correct).  This may allow you to delete the original unencoded serialization path and treat everything as encoded.  It might delete a lot of the code that otherwise would have to be converted to cells.&lt;/p&gt;</comment>
                            <comment id="13901110" author="ram_krish" created="Fri, 14 Feb 2014 04:53:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;Could you implement a NoopDataBlockEncoder that writes the same format as unencoded blocks? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is the way that i started of when we wanted Tags in the hfiles.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;On HFile, it needs a redo especially when you come up through compressors and codecs&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes.  I think we cannot have the stream as it is currently holding it. .May be the serilization we could do, but the deserialization should not be so.  It should be based on the codec format.&lt;br/&gt;
I agree with Stack here.  &lt;br/&gt;
Also I am still not getting the notion of using the same KeyValue.java class but use a different codec?  Should we have factory that reads the type of Cell we would be using an then create those instances of Cell.  &lt;br/&gt;
I think somewhere the codec type and the cell type used should be matched up? &lt;br/&gt;
Some where in the code we are using KeyValue.getRow(), which currently returns the entire byte[].  But that should be ideally keyvalue.getRowArray().  &lt;/p&gt;</comment>
                            <comment id="13901117" author="stack" created="Fri, 14 Feb 2014 05:12:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;Also I am still not getting the notion of using the same KeyValue.java class but use a different codec? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What are you referring to here &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think somewhere the codec type and the cell type used should be matched up? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;At the moment we have KeyValueCodec or CellCodec where the Codec is type particular in the first case but not so in the second.  For first case, the decoder would return KeyValues.  KeyValue implements Cell so it should pass through a Cell-based server fine.&lt;/p&gt;

&lt;p&gt;We&apos;d more want codecs like the second above where the type of Cell is not dictated by the Codec.  The server just iterates the Codec and reconstitutes Cells as it thinks best.&lt;/p&gt;

&lt;p&gt;But you know, I don&apos;t have this worked out end to end.  The Codecs and their API made sense doing the RPC. Might not be best fit for in and out of hfiles (though I like the idea of the hfile block being able to come up into block cache and our being able to keep blocks around and have Cell iterators over them that rehydrate Cells only when necessary (and not if it can be avoided).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Some where in the code we are using KeyValue.getRow(), which currently returns the entire byte[]. But that should be ideally keyvalue.getRowArray().&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, that seems wrong.&lt;/p&gt;</comment>
                            <comment id="13901126" author="ram_krish" created="Fri, 14 Feb 2014 05:33:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;How you think we fix these Lars? Would the best approach now be to try and implement a new Cell type altogether? That would shake out any reliance on KV?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Stack, you asked this question in one of the above comments.&lt;br/&gt;
I think your point is valid.&lt;br/&gt;
So my thinking was that may be if we could implement a different KeyValue altogether.  May be all the components of the kv are in individual byte arrays. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The server just iterates the Codec and reconstitutes Cells as it thinks best.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So this what i mean by saying use a new codec but again tightly couple it with current KeyValue. Hope you got what am trying to say here. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;But you know, I don&apos;t have this worked out end to end. The Codecs and their API made sense doing the RPC. Might not be best fit for in and out of hfiles (though I like the idea of the hfile block being able to come up into block cache and our being able to keep blocks around and have Cell iterators over them that rehydrate Cells only when necessary (and not if it can be avoided).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think atleast in cases where we need to strip the tags from the KVs, we are surely in need of a format which would help us do that easily without having a needs to reconstruct the KV as how are bound to do now.  I am just trying to make a patch where in every place possible we will refer as Cell rather than KV.  This would  mean that even if we change the format of the KV or use a new type of Cell our internal code does not change. &lt;/p&gt;</comment>
                            <comment id="13901134" author="ram_krish" created="Fri, 14 Feb 2014 05:48:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;We&apos;re seeking to something identified by its coordinates, which in our case are row-key, family, column identifier, and timestamp. Passing the &quot;key&quot; was just a convenient way to pass of these together.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. So either the comparator would change or the way we build this key should change. &lt;br/&gt;
So can we make Cell of type HeapSize and Cloneable?&lt;/p&gt;</comment>
                            <comment id="13901138" author="ram_krish" created="Fri, 14 Feb 2014 05:53:55 +0000"  >&lt;p&gt;One more thing is any change in kv object, the way we create kv object changes then the heapsize of it will also change and hence the no of kvs the memstore can occupy will also change.&lt;/p&gt;</comment>
                            <comment id="13901141" author="stack" created="Fri, 14 Feb 2014 06:05:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;So can we make Cell of type HeapSize and Cloneable?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Cloneable makes sense.&lt;/p&gt;

&lt;p&gt;HeapSize is how we do our accounting now so makes sense to me that we&apos;d implement it.  But what to do when a Cell implementation is but a facade on data that is elsewhere, not &apos;owned&apos; by the Cell?  For instance, say the Cell is a facade on direct byte buffers.  What will you return when I call heapSize?  (I suppose it would be the overhead the Cell consumes on heap, not the sizes of data which is offheap?).  What about when the Cell is a facade over an onheap block?  Here again you could return the Cell overhead and hope the block is being accounted some other way.  What if the Cell row, family, qualifier, type, and ts &amp;#8211; i.e. the &apos;key&apos; &amp;#8211; are onheap and the data offheap?  And so on.&lt;/p&gt;

&lt;p&gt;HeapSize is probably unavoidable.  A bunch of basic mechanisms in hbase count on it returning a decent answer.&lt;/p&gt;

&lt;p&gt;IIRC, I suggested Cell implementing HeapSize in the past and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; asked why not have size accounting done by a CellUtil method... This would probably be awkward to call in lots of contexts but would that work?&lt;/p&gt;</comment>
                            <comment id="13901147" author="ram_krish" created="Fri, 14 Feb 2014 06:17:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;What about when the Cell is a facade over an onheap block? Here again you could return the Cell overhead and hope the block is being accounted some other way. What if the Cell row, family, qualifier, type, and ts &#8211; i.e. the &apos;key&apos; &#8211; are onheap and the data offheap? And so on&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I like your explanation.  Fine with moving to CellUtil then.  So CellUtil would be talking with a factory that knows how the cell was created right?  That would internally know what was the heapsize?&lt;br/&gt;
Ok one basic question &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, may sound silly.  So we are agreeing to change the KeyValue format as mentioned in this blog, for eg, &lt;br/&gt;
&lt;a href=&quot;http://blog.cloudera.com/blog/2012/06/hbase-io-hfile-input-output/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blog.cloudera.com/blog/2012/06/hbase-io-hfile-input-output/&lt;/a&gt;&lt;br/&gt;
and various sources that talks about our KeyValue format.  Or to say keyvalueformat may be different?&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What if the Cell row, family, qualifier, type, and ts &#8211; i.e. the &apos;key&apos; &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Though we may call this combination as key, the way we form this combination may vary.&lt;br/&gt;
Sorry if am asking too many questions and going off track. am just trying to ensure that we all are same page or atleast am on the same page.&lt;/p&gt;</comment>
                            <comment id="13901158" author="stack" created="Fri, 14 Feb 2014 06:37:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;Fine with moving to CellUtil then.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It might not work but worth giving it a go I&apos;d say.  You&apos;ll have a better argument for why Cell needs to implement HeapSize after trying (smile).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So CellUtil would be talking with a factory that knows how the cell was created right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I hope not.  Should just ask the Cell.  This might be an argument for Cell implementing HeapSize (It knows how much space it has occupied, it knows if its data is compressed on heap so will return the Cell overhead + compressed sizes whereas a KV will return the size of the backing array.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So we are agreeing to change the KeyValue format as mentioned in this blog...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That is a nice old Matteo blog.  It suggests one way of packing keys, a method we should pursue.... but this will not be the only one.  Thinking about this I&apos;d suggest keep in mind Cells that could be formatted as our current KeyValue is, how Matteo describes it in his block, and then a third format would be the PrefixTree encoding that is a module here in hbase; i.e. the content stays encoded even as we traverse it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...the way we form this combination may vary.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Sorry if am asking too many questions and going off track&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Smile.  Thanks for digging in here &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13901805" author="ndimiduk" created="Fri, 14 Feb 2014 19:13:04 +0000"  >&lt;p&gt;For the heapsize question, there&apos;s further discussion over on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9383&quot; title=&quot;Have Cell interface extend HeapSize interface&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9383&quot;&gt;&lt;del&gt;HBASE-9383&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13902066" author="mcorgan" created="Fri, 14 Feb 2014 22:47:28 +0000"  >&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;I am just trying to make a patch where in every place possible we will refer as Cell rather than KV&lt;/p&gt;&lt;/blockquote&gt;I think maybe changing &lt;b&gt;every&lt;/b&gt; occurrence to Cell is going too far.  There are places where we know it is a KeyValue, like the memstore, so a method that gets a KeyValue from the memstore should have a return type of KeyValue.  This return type will be accepted by callers who want a Cell, but it&apos;s better because it contains more information.&lt;/p&gt;

&lt;p&gt;Because of the above, you can rely on the KeyValue.heapSize() method from the memstore, but anywhere you get a Cell, you couldn&apos;t rely on heapSize.  If you are dealing with Cells, then heapSize should be calculated on a more granular basis (the size of the block of encoded bytes that contains the cells).  So I&apos;m basically proposing that Cell should not implement heapSize().&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if that helps with every situation Ram, just trying to illustrate some general thoughts.&lt;/p&gt;</comment>
                            <comment id="13903019" author="ram_krish" created="Mon, 17 Feb 2014 07:38:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think maybe changing every occurrence to Cell is going too far&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, i too think its ok to have KeyValue on the memstore.  But may be on the server side on the block caches we may have to have a different type of cell.  So all KVs we can say accept KeyValue but return it as a cell.  Having heapsize in a util method is also fine with me.&lt;/p&gt;</comment>
                            <comment id="13905864" author="apurtell" created="Wed, 19 Feb 2014 18:55:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;Another tricky part is serialization and deserialization. We do not want to change the HFile storage format (I think).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Maybe. I think an ideal state is where we are operating in place on encoded cells from disk to socket and vice versa. (For example, &lt;a href=&quot;http://kentonv.github.io/capnproto/encoding.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://kentonv.github.io/capnproto/encoding.html&lt;/a&gt;)&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12666193">HBASE-9383</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12724166">HBASE-11425</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12623341">HBASE-7319</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12674359">HBASE-9794</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12625095" name="7320-simple.txt" size="39086" author="lhofhansl" created="Fri, 24 Jan 2014 19:31:22 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12689965">HBASE-10391</subtask>
                            <subtask id="12691232">HBASE-10420</subtask>
                            <subtask id="12695172">HBASE-10529</subtask>
                            <subtask id="12695173">HBASE-10530</subtask>
                            <subtask id="12695174">HBASE-10531</subtask>
                            <subtask id="12695176">HBASE-10532</subtask>
                            <subtask id="12698830">HBASE-10680</subtask>
                            <subtask id="12702557">HBASE-10801</subtask>
                            <subtask id="12707163">HBASE-10929</subtask>
                            <subtask id="12707165">HBASE-10930</subtask>
                            <subtask id="12707351">HBASE-10944</subtask>
                            <subtask id="12709224">HBASE-11027</subtask>
                            <subtask id="12738261">HBASE-11874</subtask>
                            <subtask id="12739097">HBASE-11895</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 23 Aug 2013 04:39:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>297038</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 43 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i14kyv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>234860</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Phoenix</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                </customfields>
    </item>
</channel>
</rss>