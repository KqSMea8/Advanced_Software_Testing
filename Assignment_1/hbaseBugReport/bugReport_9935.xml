<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:08:58 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-9935/HBASE-9935.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-9935] Slight perf improvement: Avoid KeyValue.getRowLength() at some places</title>
                <link>https://issues.apache.org/jira/browse/HBASE-9935</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Here&apos;s an example:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
KeyValue.createLastOnRow(
          kv.getBuffer(), kv.getRowOffset(), kv.getRowLength(),
          kv.getBuffer(), kv.getFamilyOffset(), kv.getFamilyLength(),
           kv.getBuffer(), kv.getQualifierOffset(), kv.getQualifierLength());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks harmless enough, but that actually recalculates the rowlength 5 times. And each time it needs to decode the rowlength again from the bytes of the KV.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12678386">HBASE-9935</key>
            <summary>Slight perf improvement: Avoid KeyValue.getRowLength() at some places</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="6">Invalid</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="lhofhansl">Lars Hofhansl</reporter>
                        <labels>
                    </labels>
                <created>Sat, 9 Nov 2013 07:51:49 +0000</created>
                <updated>Tue, 12 Nov 2013 01:01:46 +0000</updated>
                            <resolved>Tue, 12 Nov 2013 00:58:35 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13818068" author="lhofhansl" created="Sat, 9 Nov 2013 08:13:58 +0000"  >&lt;p&gt;There are some more cases like this in lazy seeking. Also some of the methods in KeyValue do similar things.&lt;/p&gt;</comment>
                            <comment id="13818117" author="jmspaggi" created="Sat, 9 Nov 2013 11:54:16 +0000"  >&lt;p&gt;Nice one again. We should take more attention when we call external methodes on the same object multiple time and see if we are not better to do it once and store the result.&lt;/p&gt;

&lt;p&gt;One improvement we can do here, is to store the row lenght and invalidate it only if it changes? Like&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@Override
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt; getRowLength() {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rowLength == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)
    rowLength = Bytes.toShort(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.bytes, getKeyOffset());
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; rowLength;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then each time we modify this.offset or this.byte we invalidate rowLenght... So that will optimize everywhere even if we missed it? Looking very quickly at the KV code, I have not seen anywhere except in the constructor where this is modified. So might be a quick and small optimization again...&lt;/p&gt;</comment>
                            <comment id="13818222" author="apurtell" created="Sat, 9 Nov 2013 18:11:10 +0000"  >&lt;p&gt;Nice, I&apos;ve been perpetuating this antipattern in some recent changes. Let&apos;s go look...&lt;/p&gt;</comment>
                            <comment id="13818256" author="lhofhansl" created="Sat, 9 Nov 2013 20:01:11 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmspaggi&quot; class=&quot;user-hover&quot; rel=&quot;jmspaggi&quot;&gt;Jean-Marc Spaggiari&lt;/a&gt;, caching stuff because of a profiler session is itself an anti pattern. See &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7279&quot; title=&quot;Avoid copying the rowkey in RegionScanner, StoreScanner, and ScanQueryMatcher&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7279&quot;&gt;&lt;del&gt;HBASE-7279&lt;/del&gt;&lt;/a&gt; where I removed a bunch of stuff that we cached. Now, we never cached the rowLength before and it is only short, so it might be OK.&lt;br/&gt;
I also want rationalize all these static methods we have on KeyValue. The particular one I quote in the description should be an object method - and interestingly there &lt;b&gt;is&lt;/b&gt; a method on KeyValue that does exactly that call createLastOnRowCol. If we use these or similar methods everywhere we can hide the KeyValue specific optimizations inside KeyValue while still not requiring a cache of the rowLength.&lt;/p&gt;</comment>
                            <comment id="13818272" author="lhofhansl" created="Sat, 9 Nov 2013 21:23:13 +0000"  >&lt;p&gt;Meant to put a &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; after &quot;anti pattern&quot; above.&lt;/p&gt;</comment>
                            <comment id="13818282" author="lhofhansl" created="Sat, 9 Nov 2013 21:49:51 +0000"  >&lt;p&gt;Looking at KeyValue. The overall static size is still 68 bytes. 4 of which are actually to cache the keyLength already. Adding 2 bytes to that might well worth the effort. (Right now I am trying what happens when I &lt;b&gt;remove&lt;/b&gt; 4 byte cache for the keyLength).&lt;/p&gt;</comment>
                            <comment id="13818287" author="lhofhansl" created="Sat, 9 Nov 2013 22:16:09 +0000"  >&lt;p&gt;Interestingly, when I remove the keyLength caching I see KeyValue.getKeyLength() prominently in the profiler, but I can&apos;t measure any performance detriment.&lt;br/&gt;
When I switch to a sampling profiler, I see the getRowLength() or getKeyLength() almost never sees a hit. So this caching (and even the reason why I filed this jira) might just be a profiler anomaly.&lt;/p&gt;

&lt;p&gt;Maybe somebody from Intel (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;, hint hint) could have a look? If the keyLength caching does not buy us much, we should remove it and save the memory.&lt;/p&gt;</comment>
                            <comment id="13818605" author="lhofhansl" created="Sun, 10 Nov 2013 22:52:38 +0000"  >&lt;p&gt;Did more some tests.&lt;br/&gt;
The steady state of this is even improved when I remove the keyLength caching from KeyValue. I my case I do full scans through 25m KVs, so in each run the extra keyLength cache produces 100mb of extra garbage to be collected.&lt;br/&gt;
I also observed a slight slowdown (mostly within the noise, though) in this scenario when I do the 2 byte rowLength caching.&lt;/p&gt;

&lt;p&gt;So my proposal is this:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;remove the keyLength caching&lt;/li&gt;
	&lt;li&gt;look through the callers of getFamilyOffset/getFamilyLength, etc, and see where we can optimize this while hiding all of this in the KeyValue class&lt;/li&gt;
	&lt;li&gt;no cache for the rowLength&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13818625" author="lhofhansl" created="Sun, 10 Nov 2013 23:21:23 +0000"  >&lt;p&gt;I tried a big&apos;ish patch. Didn&apos;t see any improvements. The JVM is probably smart enough to do the right thing anyway. Unless somebody has some new ideas, I&apos;ll close this as invalid (or maybe just remove the keyLenght caching).&lt;/p&gt;</comment>
                            <comment id="13818739" author="lhofhansl" created="Mon, 11 Nov 2013 07:01:01 +0000"  >&lt;p&gt;Here&apos;s a proposed patch. Two parts:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;remove keyLength caching in KeyValue and save 4 bytes on every KV.&lt;/li&gt;
	&lt;li&gt;improves the ScanQueryMatcher code. In match() we carefully decode the KeyValue manually and then go back and call kv.getTimestamp() and kv.getType(), both of which do all the decoding again&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The performance change is in the noise it seems. But it&apos;s good to save 4 bytes on a object that we are creating over and over.&lt;/p&gt;</comment>
                            <comment id="13818957" author="jmspaggi" created="Mon, 11 Nov 2013 13:38:27 +0000"  >&lt;p&gt;Might be good for the GC time. Also, nice small improvement for KeyValue.ROW_OFFSET move. But as you said, performance change is most probably in the noise.&lt;/p&gt;

&lt;p&gt;Since you are doing modifications to KeyValue, can you add the implement Cloneable since we have a clone() method? And the @Override keyword for equals and hashCode? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13819172" author="lhofhansl" created="Mon, 11 Nov 2013 18:14:03 +0000"  >&lt;p&gt;He yes can do &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I&apos;ll probably file another issue for the proposed KV changes and close this one.&lt;br/&gt;
(will also do a test on a machine with more cores, where CPU cycles are cheaper and memory bandwidth is more of a limited commodity)&lt;/p&gt;</comment>
                            <comment id="13819408" author="stack" created="Mon, 11 Nov 2013 21:21:49 +0000"  >&lt;p&gt;+1 on removing caching of a keylength that provides no discernible benefit (I probably added it after a &apos;profiling&apos; session &amp;#8211; or at least added an ancestor of current KV length caching).&lt;/p&gt;</comment>
                            <comment id="13819527" author="lhofhansl" created="Mon, 11 Nov 2013 22:39:56 +0000"  >&lt;p&gt;Lemme do a bit more testing. I&apos;ll report back as soon as I have done that. In either case it won&apos;t be a big perf improvement.&lt;/p&gt;</comment>
                            <comment id="13819682" author="lhofhansl" created="Tue, 12 Nov 2013 00:58:24 +0000"  >&lt;p&gt;Tried on a 6 core (12 hw threads) machine. Inconclusive as before. Variance of these test is quite hight (+- 5% runtime).&lt;br/&gt;
I&apos;d say we remove the caching and reclaim those 4 bytes.&lt;/p&gt;

&lt;p&gt;This issue itself was dud (sorry about that, it&apos;s easy to get fooled by the profiler &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).&lt;/p&gt;

&lt;p&gt;I&apos;ll close this and open a new one for the keyLength removal.&lt;/p&gt;</comment>
                            <comment id="13819689" author="lhofhansl" created="Tue, 12 Nov 2013 01:01:46 +0000"  >&lt;p&gt;Filed &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9956&quot; title=&quot;Remove keyLength cache from KeyValue&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9956&quot;&gt;&lt;del&gt;HBASE-9956&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12613099" name="9935-0.94.txt" size="4264" author="lhofhansl" created="Mon, 11 Nov 2013 07:01:01 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 9 Nov 2013 11:54:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>357761</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 5 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1poa7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>358051</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>