<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:15:35 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-4064/HBASE-4064.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-4064] Two concurrent unassigning of the same region caused the endless loop of &quot;Region has been PENDING_CLOSE for too long...&quot;</title>
                <link>https://issues.apache.org/jira/browse/HBASE-4064</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;1. If there is a &quot;rubbish&quot; RegionState object with &quot;PENDING_CLOSE&quot; in regionsInTransition(The RegionState was remained by some exception which should be removed, that&apos;s why I called it as &quot;rubbish&quot; object), but the region is not currently assigned anywhere, TimeoutMonitor will fall into an endless loop:&lt;/p&gt;

&lt;p&gt;2011-06-27 10:32:21,326 INFO org.apache.hadoop.hbase.master.AssignmentManager: Regions in transition timed out:  test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. state=PENDING_CLOSE, ts=1309141555301&lt;br/&gt;
2011-06-27 10:32:21,326 INFO org.apache.hadoop.hbase.master.AssignmentManager: Region has been PENDING_CLOSE for too long, running forced unassign again on region=test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f.&lt;br/&gt;
2011-06-27 10:32:21,438 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Starting unassignment of region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. (offlining)&lt;br/&gt;
2011-06-27 10:32:21,441 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Attempted to unassign region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. but it is not currently assigned anywhere&lt;br/&gt;
2011-06-27 10:32:31,207 INFO org.apache.hadoop.hbase.master.AssignmentManager: Regions in transition timed out:  test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. state=PENDING_CLOSE, ts=1309141555301&lt;br/&gt;
2011-06-27 10:32:31,207 INFO org.apache.hadoop.hbase.master.AssignmentManager: Region has been PENDING_CLOSE for too long, running forced unassign again on region=test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f.&lt;br/&gt;
2011-06-27 10:32:31,215 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Starting unassignment of region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. (offlining)&lt;br/&gt;
2011-06-27 10:32:31,215 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Attempted to unassign region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. but it is not currently assigned anywhere&lt;br/&gt;
2011-06-27 10:32:41,164 INFO org.apache.hadoop.hbase.master.AssignmentManager: Regions in transition timed out:  test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. state=PENDING_CLOSE, ts=1309141555301&lt;br/&gt;
2011-06-27 10:32:41,164 INFO org.apache.hadoop.hbase.master.AssignmentManager: Region has been PENDING_CLOSE for too long, running forced unassign again on region=test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f.&lt;br/&gt;
2011-06-27 10:32:41,172 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Starting unassignment of region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. (offlining)&lt;br/&gt;
2011-06-27 10:32:41,172 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Attempted to unassign region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. but it is not currently assigned anywhere&lt;br/&gt;
.....&lt;/p&gt;

&lt;p&gt;2  In the following scenario, two concurrent unassigning call of the same region may lead to the above problem:&lt;br/&gt;
the first unassign call send rpc call success, the master watched the event of &quot;RS_ZK_REGION_CLOSED&quot;, process this event, will create a ClosedRegionHandler to remove the state of the region in master.eg.&lt;br/&gt;
while ClosedRegionHandler is running in  &quot;hbase.master.executor.closeregion.threads&quot; thread (A), another unassign call of same region run in another thread(B).&lt;br/&gt;
while thread B  run &quot;if (!regions.containsKey(region))&quot;, this.regions have the region info, now  cpu switch to thread A.&lt;br/&gt;
The thread A will remove the region from the sets of &quot;this.regions&quot; and &quot;regionsInTransition&quot;, then switch to thread B. the thread B run continue, will throw an exception with the msg of &quot;Server null returned java.lang.NullPointerException: Passed server is null for 9a6e26d40293663a79523c58315b930f&quot;, but without removing the new-adding RegionState from &quot;regionsInTransition&quot;,and it can not be removed for ever.&lt;/p&gt;


&lt;p&gt; public void unassign(HRegionInfo region, boolean force) {&lt;br/&gt;
    LOG.debug(&quot;Starting unassignment of region &quot; +&lt;br/&gt;
      region.getRegionNameAsString() + &quot; (offlining)&quot;);&lt;br/&gt;
    synchronized (this.regions) {&lt;br/&gt;
      // Check if this region is currently assigned&lt;br/&gt;
      if (!regions.containsKey(region)) &lt;/p&gt;
{
        LOG.debug(&quot;Attempted to unassign region &quot; +
          region.getRegionNameAsString() + &quot; but it is not &quot; +
          &quot;currently assigned anywhere&quot;);
        return;
      }
&lt;p&gt;    }&lt;br/&gt;
    String encodedName = region.getEncodedName();&lt;br/&gt;
    // Grab the state of this region and synchronize on it&lt;br/&gt;
    RegionState state;&lt;br/&gt;
    long stamp = -1;&lt;br/&gt;
    synchronized (regionsInTransition) {&lt;br/&gt;
      state = regionsInTransition.get(encodedName);&lt;br/&gt;
      if (state == null) &lt;/p&gt;
{
        state = new RegionState(region, RegionState.State.PENDING_CLOSE);
        stamp =state.getStamp();               
        regionsInTransition.put(encodedName, state);
      }
&lt;p&gt; else if (force &amp;amp;&amp;amp; state.isPendingClose()) &lt;/p&gt;
{
        LOG.debug(&quot;Attempting to unassign region &quot; +
            region.getRegionNameAsString() + &quot; which is already pending close &quot;
            + &quot;but forcing an additional close&quot;);
        state.update(RegionState.State.PENDING_CLOSE);
      }
&lt;p&gt; else &lt;/p&gt;
{
        LOG.debug(&quot;Attempting to unassign region &quot; +
          region.getRegionNameAsString() + &quot; but it is &quot; +
          &quot;already in transition (&quot; + state.getState() + &quot;)&quot;);
        return;
      }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;    // Send CLOSE RPC&lt;br/&gt;
    HServerInfo server = null;&lt;br/&gt;
    synchronized (this.regions) &lt;/p&gt;
{
      server = regions.get(region);
    }
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;2011-06-27 10:20:59,583 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Starting unassignment of region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. (offlining) &lt;br/&gt;
2011-06-27 10:20:59,585 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Sent CLOSE to serverName=158-1-91-101,20020,1308983865292, load=(requests=0, regions=0, usedHeap=0, maxHeap=0) for region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. &lt;br/&gt;
2011-06-27 10:22:15,299 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Handling new unassigned node: /hbase/unassigned/9a6e26d40293663a79523c58315b930f (region=test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f., server=158-1-91-101,20020,1308983865292, state=RS_ZK_REGION_CLOSED) &lt;br/&gt;
2011-06-27 10:22:15,299 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Handling transition=RS_ZK_REGION_CLOSED, server=158-1-91-101,20020,1308983865292, region=9a6e26d40293663a79523c58315b930f &lt;br/&gt;
2011-06-27 10:25:22,636 INFO org.apache.hadoop.hbase.master.AssignmentManager: Regions in transition timed out: test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. state=CLOSED, ts=1309141335247 &lt;br/&gt;
2011-06-27 10:25:22,636 INFO org.apache.hadoop.hbase.master.AssignmentManager: Region 9a6e26d40293663a79523c58315b930f has been CLOSED for too long, waiting on queued ClosedRegionHandler to run or server shutdown &lt;br/&gt;
2011-06-27 10:25:55,022 DEBUG org.apache.hadoop.hbase.master.handler.ClosedRegionHandler: Handling CLOSED event for 9a6e26d40293663a79523c58315b930f &lt;br/&gt;
2011-06-27 10:25:55,022 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Table being disabled so deleting ZK node and removing from regions in transition, skipping assignment of region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. &lt;br/&gt;
2011-06-27 10:25:55,022 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign: master:20000-0x230ba8b85230036 Deleting existing unassigned node for 9a6e26d40293663a79523c58315b930f that is in expected state RS_ZK_REGION_CLOSED &lt;br/&gt;
2011-06-27 10:25:55,101 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign: master:20000-0x230ba8b85230036 Successfully deleted unassigned node for region 9a6e26d40293663a79523c58315b930f in expected state RS_ZK_REGION_CLOSED &lt;br/&gt;
2011-06-27 10:25:55,301 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Starting unassignment of region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. (offlining) &lt;br/&gt;
2011-06-27 10:25:55,302 INFO org.apache.hadoop.hbase.master.AssignmentManager: Server null returned java.lang.NullPointerException: Passed server is null for 9a6e26d40293663a79523c58315b930f &lt;br/&gt;
2011-06-27 10:32:21,326 INFO org.apache.hadoop.hbase.master.AssignmentManager: Regions in transition timed out: test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. state=PENDING_CLOSE, ts=1309141555301 &lt;br/&gt;
2011-06-27 10:32:21,326 INFO org.apache.hadoop.hbase.master.AssignmentManager: Region has been PENDING_CLOSE for too long, running forced unassign again on region=test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. &lt;br/&gt;
2011-06-27 10:32:21,438 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Starting unassignment of region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. (offlining) &lt;br/&gt;
2011-06-27 10:32:21,441 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Attempted to unassign region test2,070712,1308971310309.9a6e26d40293663a79523c58315b930f. but it is not currently assigned anywhere &lt;/p&gt;

&lt;p&gt;3  The following scenario shows how the above problem 2 happened:&lt;/p&gt;

&lt;p&gt;(1)A table have a lot of regions, more than 70000 in my test. &lt;br/&gt;
(2)Disable the table, if &apos;BulkDisabler.waitUntilDone&apos; timeout, &apos;DisableTableHandler.process&apos; will create another BulkDisabler object and start its thread pool. The region which was still online will call AssignmentManager.unassign again. so the same region &quot;AssignmentManager.unassign&quot; could be called concurrentlly more than 1. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12512920">HBASE-4064</key>
            <summary>Two concurrent unassigning of the same region caused the endless loop of &quot;Region has been PENDING_CLOSE for too long...&quot;</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jeason">Jieshan Bean</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Jul 2011 03:38:29 +0000</created>
                <updated>Sun, 9 Feb 2014 00:46:13 +0000</updated>
                            <resolved>Sun, 9 Feb 2014 00:46:13 +0000</resolved>
                                    <version>0.90.3</version>
                                    <fixVersion>0.90.7</fixVersion>
                                    <component>master</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13061597" author="stack" created="Thu, 7 Jul 2011 21:19:05 +0000"  >&lt;p&gt;Jieshan.  Please follow the conventions used by the code around you.  See how methods in the class add opening parenthesis on same line as function name rather than on line that follows, that we used two spaces for tabs, and that we have a space around operators &amp;#8211; on both sides, not just on one.&lt;/p&gt;

&lt;p&gt;So, how is this &apos;fix&apos; working?  If timestamp is not -1, we&apos;ll remove the region from the in-memory regions in transition?  It could be not -1 if we get a NotServingRegionException when we go to close the region.  That seems good that we cleanup the in-memory RIT if we get an exception (though something else must be going on if we went to close a region on a server that was not carrying it).  Same for the case of a generic Throwable.  Though, are we sure we want to give up on the closing completely?  What if a transient error?  Are there cases where we&apos;d want to retry the close?&lt;/p&gt;

&lt;p&gt;When would the state be -1?&lt;/p&gt;

&lt;p&gt;Thanks Jieshan.&lt;/p&gt;</comment>
                            <comment id="13064344" author="stack" created="Wed, 13 Jul 2011 04:24:15 +0000"  >&lt;p&gt;Any progress on this one Jieshan?&lt;/p&gt;</comment>
                            <comment id="13064347" author="jeason" created="Wed, 13 Jul 2011 04:28:11 +0000"  >&lt;p&gt;I&apos;m trying to make the change about the patch.. But I think it should be more considerate..&lt;br/&gt;
I try me best to commit the new patch today.&lt;br/&gt;
Thanks stack.&lt;/p&gt;

&lt;p&gt;For the code format, sorry&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, I made the same mistake again, for our code format is not exact the same.&lt;/p&gt;</comment>
                            <comment id="13064350" author="stack" created="Wed, 13 Jul 2011 04:30:41 +0000"  >&lt;p&gt;Moving it out of 0.90.4 in the meantime.&lt;/p&gt;</comment>
                            <comment id="13064400" author="jeason" created="Wed, 13 Jul 2011 07:18:41 +0000"  >&lt;p&gt;I have happened to several problems due to the two concorrent open/close process exected at the same time. The prev thread change the zk node state, but the latter one found the zk node was not the expect state, so the operation was fail.&lt;br/&gt;
If we use a timestamp to identify the a open/close operation flow. So if a the prev flow was timeout, the TimeoutMonitor will restart a new flow and update the timestamp. So once the prev one executed unexpectly, it should check the timestamp first, if it has outdated, it should skip the operation.&lt;br/&gt;
is it make any sense?&lt;/p&gt;</comment>
                            <comment id="13064451" author="yuzhihong@gmail.com" created="Wed, 13 Jul 2011 09:27:44 +0000"  >&lt;p&gt;@Jieshan:&lt;br/&gt;
I think you&apos;re suggesting adding sequence Id to region open/close process so that an out-of-order process can abort its operation.&lt;/p&gt;</comment>
                            <comment id="13064453" author="jeason" created="Wed, 13 Jul 2011 09:31:01 +0000"  >&lt;p&gt;yes. is that ok?&lt;/p&gt;</comment>
                            <comment id="13064454" author="yuzhihong@gmail.com" created="Wed, 13 Jul 2011 09:34:43 +0000"  >&lt;p&gt;It makes sense to me.&lt;/p&gt;</comment>
                            <comment id="13064720" author="stack" created="Wed, 13 Jul 2011 17:37:58 +0000"  >&lt;p&gt;And it makes sense to me (Isn&apos;t there one already integral to zk?)&lt;/p&gt;</comment>
                            <comment id="13065704" author="sunnygao" created="Fri, 15 Jul 2011 04:13:59 +0000"  >&lt;p&gt;I try to make a patch. if the region is in RIT, It shouldn&apos;t be unsigned again. So it seems changing the code position can solve this issue. &lt;br/&gt;
ALL test passed, Please review and give some suggesion.&lt;/p&gt;</comment>
                            <comment id="13066240" author="yuzhihong@gmail.com" created="Fri, 15 Jul 2011 21:57:56 +0000"  >&lt;p&gt;@Jinchao:&lt;br/&gt;
Please generate the patch at root level, not under src directory&lt;/p&gt;</comment>
                            <comment id="13066300" author="yuzhihong@gmail.com" created="Fri, 15 Jul 2011 23:24:57 +0000"  >&lt;p&gt;+1 on the patch v2.&lt;/p&gt;</comment>
                            <comment id="13066305" author="stack" created="Fri, 15 Jul 2011 23:34:36 +0000"  >&lt;p&gt;Gao v2 looks good to me too; do all tests pass and how do we know it works?  How did you test it?&lt;/p&gt;</comment>
                            <comment id="13066387" author="sunnygao" created="Sat, 16 Jul 2011 08:49:25 +0000"  >&lt;p&gt;@Stack:&lt;br/&gt;
I will reproduce and verify it after finishing review. Because it may spend a lot of time.&lt;/p&gt;</comment>
                            <comment id="13068796" author="sunnygao" created="Thu, 21 Jul 2011 04:27:04 +0000"  >&lt;p&gt;Hi, I verified the issue by adding a sleep in regionOffline. I think V2 is ok.&lt;/p&gt;

&lt;p&gt;below code:&lt;br/&gt;
 public void regionOffline(final HRegionInfo regionInfo) {&lt;br/&gt;
    synchronized(this.regionsInTransition) {&lt;br/&gt;
      if (this.regionsInTransition.remove(regionInfo.getEncodedName()) != null) &lt;/p&gt;
{
        this.regionsInTransition.notifyAll();
      }
&lt;p&gt;    }&lt;br/&gt;
    try&lt;/p&gt;
{
      Thread.sleep(1000);
    }
&lt;p&gt;catch(Throwable e)&lt;/p&gt;
{
      ;
    }
&lt;p&gt;    // remove the region plan as well just in case.&lt;br/&gt;
    clearRegionPlan(regionInfo);&lt;br/&gt;
    setOffline(regionInfo);&lt;br/&gt;
  }&lt;/p&gt;</comment>
                            <comment id="13068812" author="stack" created="Thu, 21 Jul 2011 05:46:09 +0000"  >&lt;p&gt;And what did you see. Do you have log snippets that demonstrate the fix working?  Thanks Gao.&lt;/p&gt;</comment>
                            <comment id="13068843" author="sunnygao" created="Thu, 21 Jul 2011 07:33:19 +0000"  >&lt;p&gt;I reproduced the issue by the above code. and modifed for below code, the issue can&apos;t reproduce.(about 2000 region)&lt;br/&gt;
So I think V2 is good..&lt;br/&gt;
  public void regionOffline(final HRegionInfo regionInfo) {&lt;/p&gt;

&lt;p&gt;    // remove the region plan as well just in case.&lt;br/&gt;
   clearRegionPlan(regionInfo);&lt;br/&gt;
   setOffline(regionInfo);&lt;/p&gt;

&lt;p&gt;   try&lt;/p&gt;
{
      Thread.sleep(1000);
    }
&lt;p&gt;catch(Throwable e)&lt;/p&gt;
{
      ;
    }
&lt;p&gt;   synchronized(this.regionsInTransition) {&lt;br/&gt;
      if (this.regionsInTransition.remove(regionInfo.getEncodedName()) != null) &lt;/p&gt;
{
        this.regionsInTransition.notifyAll();
      }
&lt;p&gt;    }&lt;/p&gt;

&lt;p&gt;  }&lt;br/&gt;
I don&apos;t collect the logs. So I produce it again. the logs:&lt;/p&gt;

&lt;p&gt;//disable table start.&lt;br/&gt;
hbase(main):002:0&amp;gt; disable &apos;ufdr5&apos;&lt;br/&gt;
11/07/21 15:07:25 DEBUG zookeeper.ZKUtil: hconnection-0x314b823b0a0005 Set watcher on existing znode /hbase/root-region-server&lt;/p&gt;

&lt;p&gt;hmaster logs:&lt;br/&gt;
2011-07-21 15:10:42,300 INFO org.apache.hadoop.hbase.master.AssignmentManager: Regions in transition timed out:  ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a. state=CLOSED, ts=1311232060203&lt;br/&gt;
2011-07-21 15:10:42,300 INFO org.apache.hadoop.hbase.master.AssignmentManager: Region 32cb070f97e3b7b0d261f427a0fc110a has been CLOSED for too long, waiting on queued ClosedRegionHandler to run or server shutdown&lt;br/&gt;
2011-07-21 15:12:25,672 DEBUG org.apache.hadoop.hbase.master.handler.ClosedRegionHandler: Handling CLOSED event for 32cb070f97e3b7b0d261f427a0fc110a&lt;br/&gt;
2011-07-21 15:12:25,672 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Table being disabled so deleting ZK node and removing from regions in transition, skipping assignment of region ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a.&lt;br/&gt;
2011-07-21 15:12:25,672 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign: master:60000-0x314b823b0a0000 Deleting existing unassigned node for 32cb070f97e3b7b0d261f427a0fc110a that is in expected state RS_ZK_REGION_CLOSED&lt;br/&gt;
2011-07-21 15:12:25,673 DEBUG org.apache.hadoop.hbase.zookeeper.ZKUtil: master:60000-0x314b823b0a0000 Retrieved 107 byte(s) of data from znode /hbase/unassigned/32cb070f97e3b7b0d261f427a0fc110a; data=region=ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a., server=C4C2.site,60020,1311231851946, state=RS_ZK_REGION_CLOSED&lt;br/&gt;
2011-07-21 15:12:25,688 DEBUG org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher: master:60000-0x314b823b0a0000 Received ZooKeeper Event, type=NodeDeleted, state=SyncConnected, path=/hbase/unassigned/32cb070f97e3b7b0d261f427a0fc110a&lt;br/&gt;
2011-07-21 15:12:25,688 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign: master:60000-0x314b823b0a0000 Successfully deleted unassigned node for region 32cb070f97e3b7b0d261f427a0fc110a in expected state RS_ZK_REGION_CLOSED&lt;br/&gt;
2011-07-21 15:12:26,383 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Starting unassignment of region ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a. (offlining)&lt;br/&gt;
2011-07-21 15:12:26,391 INFO org.apache.hadoop.hbase.master.AssignmentManager: Server serverName=C4C2.site,60020,1311231851946, load=(requests=0, regions=0, usedHeap=0, maxHeap=0) returned org.apache.hadoop.hbase.NotServingRegionException: org.apache.hadoop.hbase.NotServingRegionException: Received close for ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a. but we are not serving it for 32cb070f97e3b7b0d261f427a0fc110a&lt;br/&gt;
2011-07-21 15:15:32,300 INFO org.apache.hadoop.hbase.master.AssignmentManager: Regions in transition timed out:  ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a. state=PENDING_CLOSE, ts=1311232346385&lt;br/&gt;
2011-07-21 15:15:32,301 INFO org.apache.hadoop.hbase.master.AssignmentManager: Region has been PENDING_CLOSE for too long, running forced unassign again on region=ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a.&lt;br/&gt;
2011-07-21 15:15:32,301 DEBUG org.apache.hadoop.hbase.zookeeper.ZKUtil: master:60000-0x314b823b0a0000 Set watcher on existing znode /hbase/unassigned/32cb070f97e3b7b0d261f427a0fc110a&lt;br/&gt;
2011-07-21 15:15:32,303 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Starting unassignment of region ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a. (offlining)&lt;br/&gt;
2011-07-21 15:15:32,303 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Attempted to unassign region ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a. but it is not currently assigned anywhere&lt;br/&gt;
2011-07-21 15:15:42,300 INFO org.apache.hadoop.hbase.master.AssignmentManager: Regions in transition timed out:  ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a. state=PENDING_CLOSE, ts=1311232346385&lt;br/&gt;
2011-07-21 15:15:42,300 INFO org.apache.hadoop.hbase.master.AssignmentManager: Region has been PENDING_CLOSE for too long, running forced unassign again on region=ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a.&lt;br/&gt;
2011-07-21 15:15:42,301 DEBUG org.apache.hadoop.hbase.zookeeper.ZKUtil: master:60000-0x314b823b0a0000 Set watcher on existing znode /hbase/unassigned/32cb070f97e3b7b0d261f427a0fc110a&lt;br/&gt;
2011-07-21 15:15:42,303 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Starting unassignment of region ufdr5,0670286138,1311057525904.32cb070f97e3b7b0d261f427a0fc110a. (offlining) &lt;/p&gt;

&lt;p&gt;The log after modified code &lt;/p&gt;

&lt;p&gt;//I do this several times&lt;br/&gt;
hbase(main):004:0&amp;gt; disable &apos;ufdr5&apos;&lt;br/&gt;
11/07/21 15:42:52 DEBUG zookeeper.ZKUtil: hconnection-0x314b967b920003 Set watcher on existing znode /hbase/root-region-server&lt;/p&gt;

&lt;p&gt;2011-07-21 15:50:21,443 DEBUG org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher: master:60000-0x1314b9678830000 Received ZooKeeper Event, type=NodeChildrenChanged, state=SyncConnected, path=/hbase/unassigned&lt;br/&gt;
2011-07-21 15:50:21,571 INFO org.apache.hadoop.hbase.master.handler.DisableTableHandler: Disabled table is done=true&lt;br/&gt;
2011-07-21 15:51:26,908 DEBUG org.apache.hadoop.hbase.master.LoadBalancer: Server information: C4C3.site,60020,1311233178997=0, C4C2.site,60020,1311233178981=1, C4C1.site,60020,1311233179039=1&lt;br/&gt;
2011-07-21 15:51:26,908 INFO org.apache.hadoop.hbase.master.LoadBalancer: Skipping load balancing.  servers=3 regions=2 average=0.6666667 mostloaded=1 leastloaded=0&lt;br/&gt;
2011-07-21 15:51:27,402 DEBUG org.apache.hadoop.hbase.master.CatalogJanitor: Scanned 2156 catalog row(s) and gc&apos;d 0 unreferenced parent region(s)&lt;/p&gt;
</comment>
                            <comment id="13068876" author="sunnygao" created="Thu, 21 Jul 2011 09:19:02 +0000"  >&lt;p&gt;Please don&apos;t merge the patch, I found other issue and need dig whether is relation to the patch. Thanks.&lt;/p&gt;</comment>
                            <comment id="13069098" author="jdcryans" created="Thu, 21 Jul 2011 17:34:13 +0000"  >&lt;p&gt;This work should really be done for 0.92, not 0.90, because in its current state the master is &lt;em&gt;bound&lt;/em&gt; to have race conditions.&lt;/p&gt;

&lt;p&gt;As I have commented in other jiras, the TimeoutMonitor acts out of band with regards to the other threads. While most of the code in the master assumes that every operation is atomic on a single region, the TM doesn&apos;t. It can figure out that a RIT expired and then only process it minutes later because of how that code was written. Here&apos;s how it works:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;iterate on all RIT
	&lt;ol&gt;
		&lt;li&gt;if the timed out
		&lt;ol&gt;
			&lt;li&gt;Put the region in the assign/unassign list (depends on last state)&lt;/li&gt;
			&lt;li&gt;also depending on state, do some ZK operation (which can take a few tens of ms)&lt;/li&gt;
		&lt;/ol&gt;
		&lt;/li&gt;
	&lt;/ol&gt;
	&lt;/li&gt;
	&lt;li&gt;Process all the regions to unassign one by one&lt;/li&gt;
	&lt;li&gt;Process all the regions to assign one by one&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Here the issue is that at any time a region can change state while the TM runs. Let&apos;s say the TM saw region x timing out on PENDING_CLOSE, but then the millisecond later the master receives the notification that the region was finally closed. What happens is that the region will be forced unassigned in the loop at the end (while the region might already be reopened elsewhere). All of this is made even worse by the fact that ZK calls, in aggregate, really take a lot of time. Plus during the assign and unassign loops you need to talk to region servers.&lt;/p&gt;

&lt;p&gt;The window for races is so large basically anything can happen.&lt;/p&gt;

&lt;p&gt;One reason those operations are slow is that the master is suffering for a lot of lock contention, for reference see &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3789&quot; title=&quot;Cleanup the locking contention in the master&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3789&quot;&gt;&lt;del&gt;HBASE-3789&lt;/del&gt;&lt;/a&gt;. This is only in 0.92, and that&apos;s one more reason to focus our work there.&lt;/p&gt;

&lt;p&gt;Something we did late in 0.90 to make it less prone to races is to bump the timeout itself, as I was mentioning in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3669&quot; title=&quot;Region in PENDING_OPEN keeps being bounced between RS and master&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3669&quot;&gt;&lt;del&gt;HBASE-3669&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If anything else should be done in 0.90, it would be to disable the TimeoutMonitor as it does more harm than good.&lt;/p&gt;

&lt;p&gt;In 0.92 it should be completely redone to work atomically on regions, instead of doing its own thing. &lt;/p&gt;</comment>
                            <comment id="13069100" author="stack" created="Thu, 21 Jul 2011 17:39:50 +0000"  >&lt;p&gt;Yah!  J-D is back!&lt;/p&gt;</comment>
                            <comment id="13069442" author="sunnygao" created="Fri, 22 Jul 2011 08:31:24 +0000"  >&lt;p&gt;@J-D Thanks for your replay. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I got it. In my case, The race is between the disable threads and ClosedRegionHandler threads.&lt;/p&gt;

&lt;p&gt; 1.Disable thread get region from regions collection (reference getRegionsOfTable)&lt;/p&gt;

&lt;p&gt; 2.Thread pool gets region and sends request to region server. at the same time puts region into RIT(regionsInTransition),   it indicates that the region is processing.&lt;/p&gt;

&lt;p&gt; 3.Region server finishs closing region and changes the zk state, notifies the master.&lt;/p&gt;

&lt;p&gt; 4.When master receives the watcher event, It removes the region from RIT and then remove from regions collection.&lt;br/&gt;
   There is a short window when diable table can&apos;t finish in a period(). The region may be unssigned again.&lt;/p&gt;

&lt;p&gt;My patch try to fix above case. remove regions collection firstly and disable thread can&apos;t get a processing region.&lt;/p&gt;


&lt;p&gt;I found the issue yestertay, Enable threads is also a race condition.  &lt;br/&gt;
(I changed the period for 1 minutes because of reproducing the issue). It seems pool couldn&apos;t finish but a new enable process starts. we need a sleep time when a enable period finishes&lt;/p&gt;

&lt;p&gt;The master logs:&lt;br/&gt;
2011-07-22 13:33:27,806 INFO org.apache.hadoop.hbase.master.handler.EnableTableHandler: Table has 2156 regions of which 2156 are online.&lt;/p&gt;

&lt;p&gt;2011-07-22 13:34:28,646 INFO org.apache.hadoop.hbase.master.handler.EnableTableHandler: Table has 2156 regions of which 982 are online.&lt;br/&gt;
2011-07-22 13:34:31,079 WARN org.apache.hadoop.hbase.master.AssignmentManager: gjc:xxx ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229.&lt;br/&gt;
2011-07-22 13:34:31,080 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign: master:60000-0x31502ef4f00000 Creating (or updating) unassigned node for c9b1c97ac6c00033ceb1890e45e66229 with OFFLINE state&lt;br/&gt;
2011-07-22 13:34:31,104 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Forcing OFFLINE; was=ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229. state=OFFLINE, ts=1311312871080&lt;br/&gt;
2011-07-22 13:34:31,121 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: No previous transition plan was found (or we are ignoring an existing plan) for ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229. so generated a random one; hri=ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229., src=, dest=C4C2.site,60020,1311310281335; 3 (online=3, exclude=null) available servers&lt;br/&gt;
2011-07-22 13:34:31,121 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Assigning region ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229. to C4C2.site,60020,1311310281335&lt;br/&gt;
2011-07-22 13:34:31,122 WARN org.apache.hadoop.hbase.master.AssignmentManager: gjc:xxx ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229.&lt;br/&gt;
2011-07-22 13:34:31,123 FATAL org.apache.hadoop.hbase.master.HMaster: Unexpected state trying to OFFLINE; ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229. state=PENDING_OPEN, ts=1311312871121&lt;br/&gt;
java.lang.IllegalStateException&lt;br/&gt;
	at org.apache.hadoop.hbase.master.AssignmentManager.setOfflineInZooKeeper(AssignmentManager.java:1081)&lt;br/&gt;
	at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:1036)&lt;br/&gt;
	at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:864)&lt;br/&gt;
	at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:844)&lt;br/&gt;
	at org.apache.hadoop.hbase.master.handler.EnableTableHandler$BulkEnabler$1.run(EnableTableHandler.java:154)&lt;br/&gt;
	at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&lt;br/&gt;
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&lt;br/&gt;
	at java.lang.Thread.run(Thread.java:662)&lt;br/&gt;
2011-07-22 13:34:31,125 INFO org.apache.hadoop.hbase.master.HMaster: Aborting&lt;br/&gt;
2011-07-22 13:34:31,482 DEBUG org.apache.hadoop.hbase.zookeeper.ZooKeeperWatcher: master:60000-0x31502ef4f00000 Received ZooKeeper Event, type=NodeDataChanged, state=SyncConnected, path=/hbase/unassigned/c9b1c97ac6c00033ceb1890e45e66229&lt;br/&gt;
2011-07-22 13:34:31,482 WARN org.apache.hadoop.hbase.zookeeper.ZKUtil: master:60000-0x31502ef4f00000 Unable to get data of znode /hbase/unassigned/c9b1c97ac6c00033ceb1890e45e66229&lt;/p&gt;
</comment>
                            <comment id="13070106" author="stack" created="Sun, 24 Jul 2011 05:02:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;4.When master receives the watcher event, It removes the region from RIT and then remove from regions collection. There is a short window when diable table can&apos;t finish in a period(). The region may be unssigned again. My patch try to fix above case. remove regions collection firstly and disable thread can&apos;t get a processing region.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What is &apos;period()&apos; in the above Gao?  Where is it?  Where is the code that does the &apos;unassign again&apos;?  I&apos;m trying to understand why in particular your patch addresses.  Do you think your patch solves the problem in spite of the race windows described above by J-D?&lt;/p&gt;</comment>
                            <comment id="13070304" author="sunnygao" created="Mon, 25 Jul 2011 02:56:17 +0000"  >&lt;p&gt;&lt;img src=&quot;https://issues.apache.org/jira/secure/attachment/12487667/12487667_disableflow.png&quot; align=&quot;absmiddle&quot; border=&quot;0&quot; /&gt;&lt;/p&gt;</comment>
                            <comment id="13070306" author="sunnygao" created="Mon, 25 Jul 2011 03:07:19 +0000"  >&lt;p&gt;The patch can&apos;t solve J-D issue. But it is improvement for disable table.&lt;/p&gt;

&lt;p&gt;I make a flow chart(A &lt;del&gt;&amp;gt;B -&amp;gt;C&lt;/del&gt;&amp;gt;D). We can find there is a window between Remove region from RIT and Remove region from region clellections. So my patch want to change the positon.&lt;/p&gt;</comment>
                            <comment id="13070310" author="sunnygao" created="Mon, 25 Jul 2011 04:09:42 +0000"  >&lt;p&gt;I have made a patch, but I don&apos;t verify now. I want to review whether is reasonable firstly. then do it.&lt;/p&gt;

&lt;p&gt;In my cluster I had changed the parameter(hbase.bulk.assignment.waiton.empty.rit) to avoid this issue.&lt;/p&gt;</comment>
                            <comment id="13070311" author="yuzhihong@gmail.com" created="Mon, 25 Jul 2011 04:14:10 +0000"  >&lt;p&gt;How did you come up with the duration below ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+          &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.sleep(5 * 1000);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above code is inside a while loop. Why is it needed ?&lt;/p&gt;</comment>
                            <comment id="13070331" author="sunnygao" created="Mon, 25 Jul 2011 06:28:36 +0000"  >&lt;p&gt;Master may be crashed because of pool shutdown is asynchronous. &lt;/p&gt;

&lt;p&gt;The master show :&lt;br/&gt;
2011-07-22 13:33:27,806 INFO org.apache.hadoop.hbase.master.handler.EnableTableHandler: Table has 2156 regions of which 2156 are online.&lt;/p&gt;

&lt;p&gt;2011-07-22 13:34:28,646 INFO org.apache.hadoop.hbase.master.handler.EnableTableHandler: Table has 2156 regions of which 982 are online.&lt;br/&gt;
2011-07-22 13:34:31,079 WARN org.apache.hadoop.hbase.master.AssignmentManager: gjc:xxx ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229.&lt;br/&gt;
2011-07-22 13:34:31,080 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign: master:60000-0x31502ef4f00000 Creating (or updating) unassigned node for c9b1c97ac6c00033ceb1890e45e66229 with OFFLINE state&lt;br/&gt;
2011-07-22 13:34:31,104 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Forcing OFFLINE; was=ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229. state=OFFLINE, ts=1311312871080&lt;br/&gt;
2011-07-22 13:34:31,121 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: No previous transition plan was found (or we are ignoring an existing plan) for ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229. so generated a random one; hri=ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229., src=, dest=C4C2.site,60020,1311310281335; 3 (online=3, exclude=null) available servers&lt;br/&gt;
2011-07-22 13:34:31,121 DEBUG org.apache.hadoop.hbase.master.AssignmentManager: Assigning region ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229. to C4C2.site,60020,1311310281335&lt;br/&gt;
2011-07-22 13:34:31,122 WARN org.apache.hadoop.hbase.master.AssignmentManager: gjc:xxx ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229.&lt;br/&gt;
2011-07-22 13:34:31,123 FATAL org.apache.hadoop.hbase.master.HMaster: Unexpected state trying to OFFLINE; ufdr5,0590386138,1311057525896.c9b1c97ac6c00033ceb1890e45e66229. state=PENDING_OPEN, ts=1311312871121&lt;br/&gt;
java.lang.IllegalStateException&lt;br/&gt;
at org.apache.hadoop.hbase.master.AssignmentManager.setOfflineInZooKeeper(AssignmentManager.java:1081)&lt;br/&gt;
at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:1036)&lt;br/&gt;
at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:864)&lt;br/&gt;
at org.apache.hadoop.hbase.master.AssignmentManager.assign(AssignmentManager.java:844)&lt;br/&gt;
at java.lang.Thread.run(Thread.java:662)&lt;br/&gt;
2011-07-22 13:34:31,125 INFO org.apache.hadoop.hbase.master.HMaster: Aborting&lt;/p&gt;</comment>
                            <comment id="13076000" author="sunnygao" created="Tue, 2 Aug 2011 02:00:53 +0000"  >&lt;p&gt;Do we need fix this issue? If it need I will test it. or I will close the issue ?&lt;/p&gt;</comment>
                            <comment id="13079927" author="ram_krish" created="Fri, 5 Aug 2011 12:10:55 +0000"  >&lt;p&gt;As JD said timeout monitor has to be refactored, but additionally before changing the state to CLOSING again we could have checked what is the current state of the node. &lt;br/&gt;
Correct me if am wrong.&lt;/p&gt;</comment>
                            <comment id="13082212" author="sunnygao" created="Wed, 10 Aug 2011 07:43:03 +0000"  >&lt;p&gt;I will study the code for trunk and confirm that have fixed.&lt;/p&gt;</comment>
                            <comment id="13139860" author="sunnygao" created="Mon, 31 Oct 2011 02:10:02 +0000"  >&lt;p&gt;I found enable table issue was fixed in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4395&quot; title=&quot;EnableTableHandler races with itself&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4395&quot;&gt;&lt;del&gt;HBASE-4395&lt;/del&gt;&lt;/a&gt;. &lt;br/&gt;
I think this issue should use the same way to fix.&lt;/p&gt;</comment>
                            <comment id="13292724" author="stevenzhuang" created="Mon, 11 Jun 2012 10:05:29 +0000"  >&lt;p&gt;any one still work around this issue? Pls tell me how to fix this. Thanks!&lt;/p&gt;</comment>
                            <comment id="13292731" author="ram_krish" created="Mon, 11 Jun 2012 10:21:14 +0000"  >&lt;p&gt;@Steven&lt;br/&gt;
Which version of Hbase you are using?&lt;br/&gt;
In the latest versions HBase-0.94 and above we are trying to solve these type of issues.  Can you try with those versions?&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="13292777" author="stevenzhuang" created="Mon, 11 Jun 2012 12:30:29 +0000"  >&lt;p&gt;hi, Ramkrishna, thanks for you reply, I am now using HBase0.92, and no, I cannot upgrade the cluster at present.&lt;br/&gt;
actually my problem is a slightly different from this. I sort of closed the ROOT region under certain condition, later the cluster cannot be restarted, saying unsigning ROOT region because it&apos;s not assigned anywhere.&lt;br/&gt;
We fixed it by clear the root region node from the zookeeper&apos;s unsigned nodes list.&lt;br/&gt;
thanks anyway.&lt;/p&gt;</comment>
                            <comment id="13293328" author="ram_krish" created="Tue, 12 Jun 2012 04:20:39 +0000"  >&lt;p&gt;@Steven&lt;br/&gt;
Can you provide us some logs to see the problem.  Because its important we solve such issues.  May be it exists in other versions also?&lt;br/&gt;
Thanks Steve.&lt;/p&gt;</comment>
                            <comment id="13397332" author="stevenzhuang" created="Wed, 20 Jun 2012 07:41:22 +0000"  >&lt;p&gt;hi, Ramkrishna, sorry for the late response. &lt;/p&gt;

&lt;p&gt;This turn of event came because we wanted to update the hbase jar to enable our table-balancer without turning the whole cluster off. &lt;/p&gt;

&lt;p&gt;Here is what I did:&lt;br/&gt;
  1. turn off first half RS of the cluster, update the jars&lt;br/&gt;
  2. turn on the first half RS, (used &quot;hbase-daemon.sh stop &quot; on the RS which holds the META region coz it won&apos;t go down )&lt;br/&gt;
  3. turn off the second half RS of the cluster, update the jars,&lt;br/&gt;
  4. turn on the second half RS&lt;br/&gt;
At this time, I found the ROOT region is in transition, and status was CLOSING although the RS hold it was down . So I tried to restart the whole cluster, the cluster cannot be started now, coz the RS which master believes holds the ROOT region has no region served, master can only give out &quot;NotServingRegionException&quot;. I closed all the RS, the started the master again, only to find the master trying to reach the same &quot;ROOT-holding&quot; RS which was down then, and gave &quot;ServerNotRunningYetException&quot; after dozens of retries.&lt;/p&gt;

&lt;p&gt;I guess I restarted the &quot;half cluster&quot; too soon after I closed it, so root region was still in transition when the original RS restarted, and later I force closed the whole cluster, but status in ZK cluster stayed. so later when I restarted the cluster, the master tried to close the ROOT region instead of start it, but that time, the region is not on any RS, master then fall into a (dead?) loop.&lt;/p&gt;

&lt;p&gt;the log files is all messed up, with splitlog and other crappy exception log, and is way too big(even just the grepped part) to upload, so hope my description helps.&lt;/p&gt;</comment>
                            <comment id="13412363" author="jmhsieh" created="Wed, 11 Jul 2012 23:42:20 +0000"  >&lt;p&gt;There was some recent activity here, anyone planning on finishing this guy? (its been bumped a few times considering bumping it for the 0.90.7 release).                &lt;/p&gt;</comment>
                            <comment id="13895785" author="jmhsieh" created="Sun, 9 Feb 2014 00:46:13 +0000"  >&lt;p&gt;closing, ancient.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12485524" name="HBASE-4064-v1.patch" size="2614" author="jeason" created="Thu, 7 Jul 2011 02:19:47 +0000"/>
                            <attachment id="12487669" name="HBASE-4064_branch90V2.patch" size="1527" author="sunnygao" created="Mon, 25 Jul 2011 03:52:30 +0000"/>
                            <attachment id="12487667" name="disableflow.png" size="29645" author="sunnygao" created="Mon, 25 Jul 2011 02:55:41 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 7 Jul 2011 21:19:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27153</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 44 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02c3r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11562</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>