<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:10:48 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10136/HBASE-10136.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10136] the table-lock of TableEventHandler is released too early because reOpenAllRegions() is asynchronous</title>
                <link>https://issues.apache.org/jira/browse/HBASE-10136</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Expected behavior:&lt;br/&gt;
With the introduction of the table-lock, a user can issue a request for a snapshot of a table while that table is undergoing an online schema change and expect that snapshot request to complete correctly. Also, the same is true if a user issues a online schema change request while a snapshot attempt is ongoing.&lt;/p&gt;

&lt;p&gt;Observed behavior:&lt;br/&gt;
Snapshot attempts time out when there is an ongoing online schema change because the table lock is not acquired by anyone else and the regions are closed and opened during the snapshot. &lt;/p&gt;

&lt;p&gt;TableEventHandler trace&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// 1. client.addColumn() call from client...
&lt;/span&gt;
&lt;span class=&quot;code-comment&quot;&gt;// 2. The operation is now on the master
&lt;/span&gt;2013-12-12 12:09:57,613 DEBUG [MASTER] lock.ZKInterProcessLockBase: Acquired a lock &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; /hbase/table-lock/TestTable/write-master:452010000000001
2013-12-12 12:09:57,640 INFO  [MASTER] handler.TableEventHandler: Handling table operation C_M_ADD_FAMILY on table TestTable
2013-12-12 12:09:57,685 INFO  [MASTER] master.MasterFileSystem: AddColumn. Table = TestTable HCD = {NAME =&amp;gt; &apos;x-1386850197327&apos;, DATA_BLOCK_ENCODING =&amp;gt; &apos;NONE&apos;,$
2013-12-12 12:09:57,693 INFO  [MASTER] handler.TableEventHandler: Bucketing regions by region server...
...
2013-12-12 12:09:57,771 INFO  [MASTER] handler.TableEventHandler: Completed table operation C_M_ADD_FAMILY on table TestTable
2013-12-12 12:09:57,771 DEBUG [MASTER] master.AssignmentManager: Starting unassign of TestTable,,1386849056038.854b280$
2013-12-12 12:09:57,772 DEBUG [MASTER] lock.ZKInterProcessLockBase: Released /hbase/table-lock/TestTable/write-master:452010000000001

&lt;span class=&quot;code-comment&quot;&gt;// 3. The Table*Handler operation is now completed, and the client notified with &lt;span class=&quot;code-quote&quot;&gt;&quot;I&apos;m done!&quot;&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;code-comment&quot;&gt;// 4. Now the BulkReopen is starting doing the reopen
&lt;/span&gt;2013-12-12 12:09:57,772 INFO  [MASTER] master.RegionStates: Transitioned {854b280006aec464083778a5cb5f5456 state=OPEN,$
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12684137">HBASE-10136</key>
            <summary>the table-lock of TableEventHandler is released too early because reOpenAllRegions() is asynchronous</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="mbertozzi">Matteo Bertozzi</assignee>
                                    <reporter username="aleksshulman">Aleksandr Shulman</reporter>
                        <labels>
                            <label>online_schema_change</label>
                    </labels>
                <created>Thu, 12 Dec 2013 00:46:03 +0000</created>
                <updated>Tue, 17 Dec 2013 21:28:21 +0000</updated>
                                            <version>0.98.0</version>
                    <version>0.96.0</version>
                    <version>0.99.0</version>
                                                    <component>master</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="13845934" author="aleksshulman" created="Thu, 12 Dec 2013 00:50:55 +0000"  >&lt;p&gt;A potential solution might be table locking:&lt;br/&gt;
With the table lock we would expect the modifyTable to wait for the snapshot to complete or the snapshot to wait the modifyTable to complete.&lt;/p&gt;</comment>
                            <comment id="13845939" author="apurtell" created="Thu, 12 Dec 2013 00:54:52 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Expected behavior:&lt;br/&gt;
A user can take a snapshot of a table while that table is undergoing an online schema change.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It would be safer for one to hold for the other, and vice versa. &lt;/p&gt;</comment>
                            <comment id="13845945" author="aleksshulman" created="Thu, 12 Dec 2013 00:59:43 +0000"  >&lt;p&gt;Sorry, yes, I should have phrased it as:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;br/&gt;
A user can issue a request for a snapshot of a table while that table is undergoing an online schema change and expect that snapshot request to complete correctly. Also, the same is true if a user issues a online schema change request while a snapshot attempt is ongoing.&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="13846277" author="mbertozzi" created="Thu, 12 Dec 2013 12:42:55 +0000"  >&lt;p&gt;This is a more generic problem than alter table and snapshots.&lt;br/&gt;
both snapshots and alter table seems to acquire/release the table-lock properly, &lt;br/&gt;
but the BulkReopen operation called by TableEventHandler.reOpenAllRegions() is asynchronous &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[hbase/master/BulkReOpen.java]
/** Reopen the regions asynchronously, so always returns &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; immediately. */
&lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; waitUntilDone(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; timeout) {
  &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;this means that each table operation that is using TableEventHandler.reOpenAllRegions(), in this case the alter table operation, is releasing the lock before the operation is completed.&lt;/p&gt;

&lt;p&gt;If you just try to call admin.addColumn() and take a look at the logs you can easily see that the operation is done in an async way.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// 1. client.addColumn() call from client...
&lt;/span&gt;
&lt;span class=&quot;code-comment&quot;&gt;// 2. The operation is now on the master
&lt;/span&gt;2013-12-12 12:09:57,613 DEBUG [MASTER] lock.ZKInterProcessLockBase: Acquired a lock &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; /hbase/table-lock/TestTable/write-master:452010000000001
2013-12-12 12:09:57,640 INFO  [MASTER] handler.TableEventHandler: Handling table operation C_M_ADD_FAMILY on table TestTable
2013-12-12 12:09:57,685 INFO  [MASTER] master.MasterFileSystem: AddColumn. Table = TestTable HCD = {NAME =&amp;gt; &apos;x-1386850197327&apos;, DATA_BLOCK_ENCODING =&amp;gt; &apos;NONE&apos;,$
2013-12-12 12:09:57,693 INFO  [MASTER] handler.TableEventHandler: Bucketing regions by region server...
...
2013-12-12 12:09:57,771 INFO  [MASTER] handler.TableEventHandler: Completed table operation C_M_ADD_FAMILY on table TestTable
2013-12-12 12:09:57,771 DEBUG [MASTER] master.AssignmentManager: Starting unassign of TestTable,,1386849056038.854b280$
2013-12-12 12:09:57,772 DEBUG [MASTER] lock.ZKInterProcessLockBase: Released /hbase/table-lock/TestTable/write-master:452010000000001

&lt;span class=&quot;code-comment&quot;&gt;// 3. The Table*Handler operation is now completed, and the client notified with &lt;span class=&quot;code-quote&quot;&gt;&quot;I&apos;m done!&quot;&lt;/span&gt;
&lt;/span&gt;
&lt;span class=&quot;code-comment&quot;&gt;// 4. Now the BulkReopen is starting doing the reopen
&lt;/span&gt;2013-12-12 12:09:57,772 INFO  [MASTER] master.RegionStates: Transitioned {854b280006aec464083778a5cb5f5456 state=OPEN,$
2013-12-12 12:09:57,772 INFO  [Priority.RpcServer.handler=5,port=39384] regionserver.HRegionServer: Close 854b280006aec464083778a5cb5f5456, via zk=yes, znode version=0, on &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
2013-12-12 12:09:57,773 DEBUG [RS_CLOSE_REGION] handler.CloseRegionHandler: Processing close of TestTable,,1386849056038.854b280006aec464083778a5cb5f5456.
2013-12-12 12:09:57,773 DEBUG [MASTER] master.AssignmentManager: Sent CLOSE to localhost,39384,1386848453374 &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; regio$
2013-12-12 12:09:57,773 DEBUG [RS_CLOSE_REGION] regionserver.HRegion: Closing TestTable,,1386849056038.854b280006aec464083778a5cb5f5456.: disabling compactions &amp;amp; flush$
2013-12-12 12:09:57,773 DEBUG [RS_CLOSE_REGION] regionserver.HRegion: Updates disabled &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region TestTable,,1386849056038.854b280006aec464083778a5cb5f5456.
2013-12-12 12:09:57,774 INFO  [StoreCloserThread-TestTable,,1386849056038.854b280006aec464083778a5cb5f5456.-1] regionserver.HStore: Closed info
2013-12-12 12:09:57,774 INFO  [RS_CLOSE_REGION] regionserver.HRegion: Closed TestTable,,1386849056038.854b280006aec464083778a5cb5f5456.
2013-12-12 12:09:57,774 DEBUG [RS_CLOSE_REGION] zookeeper.ZKAssign: regionserver:39384-0x142e69bfea20001, quorum=localhost:2181, baseZNode=/hbase Transitioning 854b280$
2013-12-12 12:09:57,775 DEBUG [RS_CLOSE_REGION] zookeeper.ZKAssign: regionserver:39384-0x142e69bfea20001, quorum=localhost:2181, baseZNode=/hbase Transitioned node 854$
2013-12-12 12:09:57,775 DEBUG [RS_CLOSE_REGION] handler.CloseRegionHandler: Set closed state in zk &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; TestTable,,1386849056038.854b280006aec464083778a5cb5f5456. on lo$
2013-12-12 12:09:57,775 DEBUG [RS_CLOSE_REGION] handler.CloseRegionHandler: Closed TestTable,,1386849056038.854b280006aec464083778a5cb5f5456.
2013-12-12 12:09:57,775 INFO  [ProcessThread(sid:0 cport:-1):] server.PrepRequestProcessor: Processed session termination &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; sessionid: 0x142e69bfea20023
2013-12-12 12:09:57,775 DEBUG [AM.ZK.Worker-pool2-t70] master.AssignmentManager: Handling RS_ZK_REGION_CLOSED, server=localhost,39384,1386848453374, region=854b280006aec464083778a5cb5f5$
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so, this is another case where the Admin operation is not synchronous and also the table-lock is not really able to do its job, since at the end of the handler.process() doesn&apos;t match with &quot;operation completed&quot;.&lt;/p&gt;

&lt;p&gt;we can probably do a dirty fix for each case as they come up (see also &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6992&quot; title=&quot;Coprocessors semantic issues: post async operations, helper methods, ...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6992&quot;&gt;HBASE-6992&lt;/a&gt;). &lt;br/&gt;
but, This is a general problem with the current Master/Client Design. We don&apos;t really know when an operation is completed. Looking at the new master designs (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5487&quot; title=&quot;Generic framework for Master-coordinated tasks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5487&quot;&gt;HBASE-5487&lt;/a&gt;) looks like this stuff will be resolved, but the new master seems distant future...&lt;/p&gt;</comment>
                            <comment id="13847214" author="enis" created="Fri, 13 Dec 2013 07:00:30 +0000"  >&lt;p&gt;Matteo you are right in the analysis. The table lock is released before the regions are complete with opening, because of how region reopening and the master handlers are implemented. The most clear fix to this is to fix the master itself I think (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5487&quot; title=&quot;Generic framework for Master-coordinated tasks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5487&quot;&gt;HBASE-5487&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="13847658" author="jmhsieh" created="Fri, 13 Dec 2013 17:05:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;The most clear fix to this is to fix the master itself I think (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5487&quot; title=&quot;Generic framework for Master-coordinated tasks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5487&quot;&gt;HBASE-5487&lt;/a&gt;).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;While I think this kind of &quot;race&quot; is something that new &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5487&quot; title=&quot;Generic framework for Master-coordinated tasks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5487&quot;&gt;HBASE-5487&lt;/a&gt; designs should handle, I disagree that that is the clearest way.  I do think open/close/open cases can be handled within the current framework.  &lt;/p&gt;</comment>
                            <comment id="13849395" author="sershe" created="Mon, 16 Dec 2013 17:56:04 +0000"  >&lt;p&gt;Agree with Jon, it looks like the implementation detail to me.&lt;/p&gt;</comment>
                            <comment id="13849407" author="mbertozzi" created="Mon, 16 Dec 2013 18:08:13 +0000"  >&lt;p&gt;as I pointed out in my comment above we can fix case by case, but the main problems are still there.&lt;br/&gt;
If you implement a new handler you have to keep in mind the rules to make everything working.&lt;br/&gt;
In this case for example, the end of the handler is not the hand of the operation so the lock is released early.&lt;br/&gt;
also in this case, the master call uses handler.process() instead of the executor pool to make the client operation synchronous.&lt;br/&gt;
In the delete table case the last operation must be the removal of the table descriptor, otherwise the client call will not be synchronous.&lt;br/&gt;
...and so on with other, implementation details.&lt;/p&gt;

&lt;p&gt;I&apos;ve pointed out the new master design, to discuss this set of &quot;rules&quot; and be part of the design.&lt;br/&gt;
We must be able to know when an operation end, and not just guessing based on the result state of an operation. And this is a must for both server side (e.g. releasing the lock) and client side (e.g. sync operation)&lt;/p&gt;</comment>
                            <comment id="13849412" author="jmhsieh" created="Mon, 16 Dec 2013 18:16:53 +0000"  >&lt;p&gt;I agree with needing rules &amp;#8211; the invariant I think we need here is that if an operation starts with a region in open state and is supposed to complete with the regions in open state, it must be open.  (or a suitable replacement must be open).&lt;/p&gt;

&lt;p&gt;Currently I only see open/close/open conflicts.  (splits/alters, likely merges).  can we get away with just &quot;fixing&quot; those three operations so that their respective table locks are held until the opens complete?  Is the wait until handler completion needed for any other operations?&lt;/p&gt;


</comment>
                            <comment id="13849583" author="sershe" created="Mon, 16 Dec 2013 18:51:18 +0000"  >&lt;p&gt;If a server fails the region will not stay open... I don&apos;t think it&apos;s a good idea to rely on that. Locking would work as a temporary fix I guess, for this particular interaction. But why cannot snapshot handle the general case of regions becoming unavailable? It&apos;s not like close-open takes time like recovery does during alter table.&lt;/p&gt;</comment>
                            <comment id="13849592" author="mbertozzi" created="Mon, 16 Dec 2013 18:58:42 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sershe&quot; class=&quot;user-hover&quot; rel=&quot;sershe&quot;&gt;Sergey Shelukhin&lt;/a&gt; we&apos;re not talking about snapshots here. Currently snapshot are built to fail if a region is moving or is down, and this is by design. If you want to talk about how to fix this open another jira.&lt;/p&gt;

&lt;p&gt;The problem here is the TableEventHandler and when the table lock is released,&lt;br/&gt;
for example if you call modifyTable() twice or you have a split concurrently with modifyTable() you don&apos;t get the expected behavior that we want with the table lock, which should be an operation on the table is locked until the other is completed.&lt;/p&gt;

&lt;p&gt;also the other problem, not completly related, that I&apos;m pointing out is that since we have this async complete the client is not synchronous&lt;/p&gt;</comment>
                            <comment id="13850105" author="aleksshulman" created="Tue, 17 Dec 2013 04:48:58 +0000"  >&lt;p&gt;Adding a patch for a test that exposes this issue. Test should pass once this issue is resolved.&lt;/p&gt;</comment>
                            <comment id="13850700" author="jxiang" created="Tue, 17 Dec 2013 17:31:37 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10137&quot; title=&quot;GeneralBulkAssigner with retain assignment plan can be used in EnableTableHandler to bulk assign the regions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10137&quot;&gt;&lt;del&gt;HBASE-10137&lt;/del&gt;&lt;/a&gt; changed the table enabler.  Does that fix work for this case too?&lt;/p&gt;</comment>
                            <comment id="13850938" author="jxiang" created="Tue, 17 Dec 2013 21:28:21 +0000"  >&lt;p&gt;So you just reuse the waitUntilDone. Looks fine to me. I was wondering why we have to re-assign regions one by one.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12684142">HBASE-10137</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12544478">HBASE-5487</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12619034" name="HBASE-10136-trunk.patch" size="6297" author="aleksshulman" created="Tue, 17 Dec 2013 04:48:58 +0000"/>
                            <attachment id="12619164" name="HBASE-10136-v0.patch" size="4054" author="mbertozzi" created="Tue, 17 Dec 2013 21:02:15 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 12 Dec 2013 00:54:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>363209</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1qlwn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>363515</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>