<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:50:53 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7978/HBASE-7978.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7978] Merge hbase-prefixtree into hbase-server</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7978</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I would like to discuss the possibility of merging the prefix tree module into the hbase-server module. &lt;/p&gt;

&lt;p&gt;Ideally, I think we should have hbase-mapreduce and hbase-storage modules, the latter one containing most of HFile code. hbase-mapreduce depends on hbase-storage so that it knows how to encode hfiles. prefix-tree belongs to hbase-storage. &lt;/p&gt;

&lt;p&gt;prefix tree is just another DBE, although a big one, and it rightfully belongs with her sisters. The fact that the code is independent from the rest of the code base does not mean that it should have it&apos;s own module. We should keep the number of modules manageable, and stay away from hadoop trunk&apos;s one-module-per-package policy. &lt;/p&gt;

&lt;p&gt;Related: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7936&quot; title=&quot;Undo prefix-tree module as dependency for mapreduce and for DataBlockEncoding&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7936&quot;&gt;&lt;del&gt;HBASE-7936&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12634957">HBASE-7978</key>
            <summary>Merge hbase-prefixtree into hbase-server</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="enis">Enis Soztutar</reporter>
                        <labels>
                    </labels>
                <created>Sat, 2 Mar 2013 03:16:13 +0000</created>
                <updated>Sun, 3 Mar 2013 00:31:01 +0000</updated>
                                            <version>0.98.0</version>
                    <version>0.95.0</version>
                                                    <component>HFile</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13591245" author="yuzhihong@gmail.com" created="Sat, 2 Mar 2013 03:24:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;stay away from hadoop trunk&apos;s one-module-per-package policy&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Can you cite some literature supporting the above view ?&lt;/p&gt;

&lt;p&gt;From my understanding, usage of prefix-tree targets specific scenario where random read performance is critical but write patch can tolerate some latency. When prefix-tree was first proposed, our modularization was far from the current status. A lot of work has gone in so that the inclusion of prefix-tree has minimal impact on the rest of the code base.&lt;/p&gt;</comment>
                            <comment id="13591258" author="mcorgan" created="Sat, 2 Mar 2013 03:39:33 +0000"  >&lt;p&gt;I&apos;m confused about the issue title Enis - why merge to hbase-server when it will immediately go in hbase-storage?&lt;/p&gt;

&lt;p&gt;I agree with the concept of a module like hbase-storage.  In my mind it was something like hbase-codec.  In fact, the prefix-tree code is nested in a package called o.a.h.h.codec, as is Stack&apos;s RPC serialization code.  The idea being that hbase-common contains interfaces for different things that get encoded as opaque byte arrays, such as data blocks, bloom blocks, index blocks, rpc chunks, etc.  CellScanner and CellOutputStream are two such interfaces.  The highly optimized implementations of those interfaces that rely on lots of byte serialization would go in hbase-codec.  The internals of the package would be byte manipulation code to translate from bytes to usable objects, like prefix-tree does.&lt;/p&gt;

&lt;p&gt;All the codecs could probably share the same module, though i also don&apos;t mind having them separate.  Just think if you had to jump in and debug one... would sure be nice if you knew your bug was confined to a certain module.  You would know which module because they wouldn&apos;t depend on each other.  Also, once the codecs are running, people shouldn&apos;t really have to mess with them.  If you open hbase in eclipse, you can simply omit opening the codec projects.&lt;/p&gt;

&lt;p&gt;I&apos;d argue against putting more than codecs into the module though.  The concept of an HFile is a higher level thing that combines a bunch of different codecs into a persistent file.  Codec code should have no clue what an HFile is.&lt;/p&gt;</comment>
                            <comment id="13591269" author="lhofhansl" created="Sat, 2 Mar 2013 04:15:07 +0000"  >&lt;p&gt;I agree that more modules &amp;lt;&amp;gt; better.&lt;br/&gt;
Why is prefix tree its own module vs prefix encoding, which is not?&lt;/p&gt;

&lt;p&gt;Maybe we can just rename the prefix module to codec, and eventually move the other prefix encodings there?&lt;/p&gt;</comment>
                            <comment id="13591290" author="yuzhihong@gmail.com" created="Sat, 2 Mar 2013 04:20:54 +0000"  >&lt;p&gt;The prefix encoding in hbase-server is more widely used compared to prefix-tree encoding.&lt;/p&gt;

&lt;p&gt;I think prefix encoding can stay in hbase-server.&lt;/p&gt;</comment>
                            <comment id="13591291" author="mcorgan" created="Sat, 2 Mar 2013 04:23:56 +0000"  >&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;Maybe we can just rename the prefix module to codec, and eventually move the other prefix encodings there?&lt;/p&gt;&lt;/blockquote&gt;yeah, basically what i&apos;ve been thinking Lars.  i just didn&apos;t have time to pull the other encodings to the new module so felt silly giving it the more general name.&lt;/p&gt;</comment>
                            <comment id="13591382" author="enis" created="Sat, 2 Mar 2013 09:49:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can you cite some literature supporting the above view ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Importing hadoop trunk into eclipse... Do you need more? &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I&apos;m confused about the issue title Enis - why merge to hbase-server when it will immediately go in hbase-storage?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The title states what can be done in this issue. hbase-storage is a longer term goal, which might or might not happen later on. If it happens, we can just move the code there with the rest of the storage stuff. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In my mind it was something like hbase-codec. In fact, the prefix-tree code is nested in a package called o.a.h.h.codec, as is Stack&apos;s RPC serialization code. The idea being that hbase-common contains interfaces for different things that get encoded as opaque byte arrays, such as data blocks, bloom blocks, index blocks, rpc chunks, etc&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My understanding of the current DBE is that it is not suitable to be used outside an HFile block setting. I agree that we should extend these to support encoding bulks of cells, no matter the context (rpc, hfile, etc). I would be fine if we do a codec module, if we include all of the codecs, but -1 for having a module per codec type. We also need some sanity to be able to browse the code from IDE. Also, for generating hfiles for bulk load, then you have to dynamically link that appropriate codec jar into your mapreduce job, which is not a thing we would want.&lt;br/&gt;
The question here is whether to rename the current module to hbase-codec and have the rest there? How close are we do extract the DBE as generic codecs? &lt;/p&gt;
</comment>
                            <comment id="13591577" author="mcorgan" created="Sun, 3 Mar 2013 00:31:01 +0000"  >&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;but -1 for having a module per codec type&lt;/p&gt;&lt;/blockquote&gt;Seems like that is the consensus - makes sense to me.  I don&apos;t like having tons of separate projects in eclipse either.&lt;/p&gt;

&lt;p&gt;I&apos;m not familiar with Hadoop code base, but if they have a module per package that sounds weird to me.  The point of a module is not to just be a heavyweight package of some sort.  A module should only be considered when there is an opportunity to limit the compile time visibility of one module into another.  I&apos;ve left some comments on a bunch of other jira&apos;s about that so won&apos;t reiterate here.  Unfortunately, in Eclipse every class in a single project can access any other class in the project.  There&apos;s no way to limit the interdependencies by tweaking the src directories, build path, libs, etc.  The only way to isolate visibility from one class to another is to put them in separate projects, which are the maven modules.&lt;/p&gt;

&lt;p&gt;Elliott can probably speak to it best, but even though each developer thinks he&apos;s putting a constant in the right place, or it&apos;s ok to reach over and call a method from one place to another, after dozens of developers contribute stuff for years you end up with a big bowl of spaghetti.  Using public/private/protected keywords, interfaces, packages and all that good stuff will get you pretty far, but modules take you a step further and make it impossible for anyone to cheat the above mechanisms, despite their best intentions at the time.&lt;/p&gt;

&lt;p&gt;I would argue that carving out complex pieces of hbase into modules is critical to growing the code base and the number of developers.  Take the memstore for example - it should eventually be a very sophisticated piece of machinery that&apos;s 10x as efficient as it is today, and while the interface to it has only a few methods relating to Cells and such, the code to implement it will be pretty low-level and fragile.  The hbase-server module should not be able to reach into the inner workings of the memstore, nor should it care how it&apos;s implemented.  It should just request that someone give it an implementation to back up the memstore interface from hbase-common.  Pulling that memstore code into a module is a perfect way to enforce those principles.  Further, it&apos;s important that the correctness of the memstore be established without relying on grander tests in hbase-server.  Tests that prove memstore correctness should be in the memstore module.&lt;/p&gt;

&lt;p&gt;Having modules pulled out and strictly isolated like that speeds up development too.  Now someone working on the hbase-server module can work a little faster knowing that there&apos;s no way they&apos;re going to break the memstore.  I&apos;d say the hbase-server code is more readable too because memstore implementation details aren&apos;t there anymore.&lt;/p&gt;

&lt;p&gt;Anyway, just some arguments for modules improving understandability, testability, and development speed.  It all boils down to reducing compile-time visibility between modules to a minimum.&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;The question here is whether to rename the current module to hbase-codec and have the rest there? How close are we do extract the DBE as generic codecs?&lt;/p&gt;&lt;/blockquote&gt;Renaming hbase-prefix-tree to hbase-codec sounds great to me.  I think pulling the delta encoder&apos;s core functionality out into hbase-codec while leaving the hfile interaction stuff in hbase-server should be doable, and doing so will have the added benefit of getting the encoders more ready for RPC usage.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 2 Mar 2013 03:24:51 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>315450</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 41 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ifnb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>315794</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>