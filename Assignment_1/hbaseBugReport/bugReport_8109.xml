<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:52:07 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-8109/HBASE-8109.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-8109] HBase can manage blocks instead of (or inside) files in HDFS</title>
                <link>https://issues.apache.org/jira/browse/HBASE-8109</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Prompted by previous non-Hadoop experience and some dev list discussions, and after talking to some HDFS people about blocks.&lt;br/&gt;
HBase could improve a lot by managing HDFS blocks instead of files, and reusing the blocks among other things. Some areas that could improve are splits, compactions, management of large blobs, locality enforcement.&lt;br/&gt;
I was told that block APIs in Hadoop 2 are well-isolated, but not exposed yet. They can easily be exposed, and as one of the first potential users we could get to help shape them. Two areas that from my limited understanding is currently fuzzy are namespaces for blocks, and ref-counting.&lt;br/&gt;
We should come up with list of initial scenarios to figure out what we need from block API (locality, detecting/enforcing block boundary/variable size blocks, reusing one block, ...).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12637060">HBASE-8109</key>
            <summary>HBase can manage blocks instead of (or inside) files in HDFS</summary>
                <type id="13" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/genericissue.png">Brainstorming</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="sershe">Sergey Shelukhin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 14 Mar 2013 18:03:05 +0000</created>
                <updated>Thu, 18 Jul 2013 00:49:45 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>19</watches>
                                                                <comments>
                            <comment id="13602592" author="lhofhansl" created="Thu, 14 Mar 2013 19:09:35 +0000"  >&lt;p&gt;Due, you&apos;re talking heresy here &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;This sounds like a potentially good idea.&lt;br/&gt;
Won&apos;t you end up writing something similar to the name node again?&lt;br/&gt;
Also, what happens then with M/R on top what are now HFiles?&lt;/p&gt;

&lt;p&gt;Lastly, why not go further then? Why use HDFS at all? We could replicate at the RS level (which would also allow us to distribute reads across multiple servers).&lt;/p&gt;</comment>
                            <comment id="13602605" author="mbertozzi" created="Thu, 14 Mar 2013 19:23:02 +0000"  >&lt;p&gt;When I started &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7806&quot; title=&quot;Isolate the FileSystem calls&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7806&quot;&gt;HBASE-7806&lt;/a&gt; the idea was that one (look at the pdf &quot;future&quot; section).&lt;br/&gt;
the current problem in the code is that we rely in too many places on file names and path (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7806&quot; title=&quot;Isolate the FileSystem calls&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7806&quot;&gt;HBASE-7806&lt;/a&gt; should solve that).&lt;br/&gt;
Once we have isolated the fs calls, we can switch to a system table tracking blocks. (that is basically a sort of Name Node)&lt;br/&gt;
The main advantage of using blocks is a better compaction. Instead of rewriting the whole file, we can just rewrite few blocks. Also snapshot will have a better block sharing (now they share files). &lt;/p&gt;</comment>
                            <comment id="13602632" author="apurtell" created="Thu, 14 Mar 2013 19:51:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;Once we have isolated the fs calls, we can switch to a system table tracking blocks. (that is basically a sort of Name Node)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How would we bootstrap that block tracking system table out of a pool of blocks? Would there be an HBase side analogue to the NN fsimage? Would we keep that state in ZK, thus making ZK persistence critical? As a strawman I guess we could have one block containing pointers to all blocks holding the block tracking table &amp;#8211; in effect, a superblock &amp;#8211; and we could back this up to multiple locations like FSes do, and where today we have ZK pointing to META locations it would point to this bootstrap inode instead. HBCK could be taught how to scan for superblocks.&lt;/p&gt;

&lt;p&gt;A very interesting notion of building &quot;HBaseFS&quot;.&lt;/p&gt;

&lt;p&gt;Another option for getting the espoused benefits for compaction optimization without going all the way to a pool of blocks: Consider an HDFS API for stitching together files? We could get a list of blocks from the NN for a path, rewrite them independently as part of compaction (or split), and then hand an updated list of blocks/lengths back to the NN for it to store back into the fsimage. This would still give us the flexibility to even do (insane?) things like share blocks between files across splits.&lt;/p&gt;</comment>
                            <comment id="13602648" author="yuzhihong@gmail.com" created="Thu, 14 Mar 2013 20:03:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;notion of building &quot;HBaseFS&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This reminds me of &lt;a href=&quot;http://www.slideshare.net/Hadoop_Summit/dynamic-namespace-partitioning-with-giraffa-file-system&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.slideshare.net/Hadoop_Summit/dynamic-namespace-partitioning-with-giraffa-file-system&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;things like share blocks between files across splits&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This would involve reference counting. Does this mean hbck would need to solve inconsistency at a lower level ?&lt;/p&gt;</comment>
                            <comment id="13602652" author="sershe" created="Thu, 14 Mar 2013 20:09:03 +0000"  >&lt;p&gt;We can indeed scale it down from managing blocks to being block aware and reusing blocks (manipulating blocks inside files, knowing the boundaries and block reuse/refcounting would still be necessary but presumably handled in HDFS).&lt;/p&gt;</comment>
                            <comment id="13602720" author="enis" created="Thu, 14 Mar 2013 20:57:04 +0000"  >&lt;p&gt;We do no want to build a namespace on top of blocks, and my suggestion of embedding the NN inside master, and doing federation did not get good marks from the dfs folks here.&lt;/p&gt;

&lt;p&gt;Thinking about it, we actually do not have to have our data files, being actual files, that can be read from outside. There are very limited places I can think of, where we rely on a namespace semantics (correct me if I&apos;m wrong)&lt;/p&gt;

&lt;p&gt;I can definitely see that being block aware have advantages, in terms of compaction, splits, hard links (for backup, snapshots, splits, copy-on-write tables, etc), and caching (hbase block cache and/or fs block cache). &lt;/p&gt;</comment>
                            <comment id="13603329" author="jmspaggi" created="Fri, 15 Mar 2013 12:29:08 +0000"  >&lt;p&gt;Today HBCK is using a lot of files/dirs names checks to find lost regions and things like that. Will we be able to do almost the same thing with blocks? I mean, can we list blocks we are all HBase related but not referenced in the META?&lt;/p&gt;</comment>
                            <comment id="13603814" author="apurtell" created="Fri, 15 Mar 2013 20:30:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;Today HBCK is using a lot of files/dirs names checks to find lost regions and things like that. Will we be able to do almost the same thing with blocks?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the short answer is that HBCK might come to look a lot like a fsck for a filesystem.&lt;/p&gt;

&lt;p&gt;However going below the filesystem to the block pool directly presents difficulties. Not sure how HBase would get block reports from DataNodes to know where blocks are located, would guess this amounts to &quot;embedding NN inside master&quot; as Enis mentioned.&lt;/p&gt;

&lt;p&gt;If we had a couple of additional APIs to manipulate the block lists of files, then we can do block based optimizations and still retain the namespace view where it is useful, like for HBCK.&lt;/p&gt;</comment>
                            <comment id="13604712" author="shv" created="Sun, 17 Mar 2013 18:48:09 +0000"  >&lt;p&gt;Exposing block API from HDFS is an interesting idea. If done carefully. You probably still want HDFS to do block management and maintain the block namespace, otherwise you end up rewriting NameNode (and talking heresy).&lt;br/&gt;
As Ted mentioned in &lt;a href=&quot;http://code.google.com/a/apache-extras.org/p/giraffa/wiki/Introduction&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Giraffa (link to the project)&lt;/a&gt; we indeed encountered similar problem. Giraffa stores files&apos; metadata in a single HBase table, while the blocks reside in HDFS DataNodes. We use NameNode as a block manager in current implementation. Since blocks are not exposed from HDFS we used a workaround, namely we create a file, then allocate single block in it, then rename that file to the block id. The file then is used as the Giraffa block. Adding this operation to HDFS to do it atomically would help Giraffa a lot.&lt;br/&gt;
Sergey, I was wondering if you had similar scenarios for using block APIs in HBase? What are they?&lt;br/&gt;
You mention counting block references. I assume this means that the same block can belong to multiple files. While it seems natural and simple in single-NameNode design, in the world of distributed namespace this turns into a distributed operation and a potential obstacle for scalability.&lt;/p&gt;</comment>
                            <comment id="13607130" author="sershe" created="Wed, 20 Mar 2013 00:57:42 +0000"  >&lt;p&gt;Our scenarios are as such (off the top of my head):&lt;br/&gt;
1) Recombine files instead of rewriting where necessary (for example, in case of compactions we can add unchanged blocks to the destination file directly, during region split we can split file into two sets of blocks and make new files without rewriting, for large blob storage that has blobs stored off the main table we can do cleanup of removed entries without rewriting the files, etc.)&lt;br/&gt;
2) Hardlinks and copy-on-write (for example, snapshots or backup scenarios).&lt;br/&gt;
3) Locality. Determine where blocks are in order to put regions close to their blocks.&lt;/p&gt;

&lt;p&gt;There may be others.&lt;br/&gt;
Refcounting blocks can indeed complicate distributed namespaces, but I think it&apos;s an essential feature for block FS... If not supported natively, people will reimplement it due to how much stuff can be done with reused blocks. I think it should be doable on large scale, either by coordination, by some restrictions on block reuse with regard to namespace, or by separating block management and optionally namespace from file namespace.&lt;/p&gt;</comment>
                            <comment id="13704909" author="sershe" created="Wed, 10 Jul 2013 18:51:26 +0000"  >&lt;p&gt;btw, given that there is probably no advantage in terms on contiguity when we are reading across a block boundary in the same file, compared to reading separate files, we can prototype by having some sort of over-files that contain multiple one-block files. As far as I know, Accumulo is able to make use of bazillion files on each server, so it should be doable.&lt;/p&gt;</comment>
                            <comment id="13704959" author="ecn" created="Wed, 10 Jul 2013 19:38:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;Accumulo is able to make use of bazillion files on each server&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Accumulo dev here; I don&apos;t think that Accumulo stresses the NN or DNs with lots of files.  I would be happy to clarify anything you&apos;re wondering about.&lt;/p&gt;</comment>
                            <comment id="13711855" author="sershe" created="Thu, 18 Jul 2013 00:32:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;that Accumulo stresses the NN or DNs with lots of files&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Should this be read as &quot;Accumulo uses lots of files and that doesn&apos;t stress NN/DNs&quot;, or &quot;Accumulo doesn&apos;t use a lot of files and therefore doesn&apos;t stress NN/DNs&quot;? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13711871" author="ecn" created="Thu, 18 Jul 2013 00:49:45 +0000"  >&lt;p&gt;Probably &quot;Accumulo doesn&apos;t use a lot of files and therefore doesn&apos;t stress NN/DNs&quot;&lt;/p&gt;

&lt;p&gt;It uses plenty of files, and the number of NN write operations is becoming a bottleneck, but the number of files needed at any one moment does not stress the NN/DNs.&lt;/p&gt;
</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 14 Mar 2013 19:09:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>317552</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 22 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1islb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>317893</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>