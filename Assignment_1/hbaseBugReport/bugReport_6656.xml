<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:38:42 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-6656/HBASE-6656.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-6656] Cannot call a Coprocessor Endpoint from a RegionObserver</title>
                <link>https://issues.apache.org/jira/browse/HBASE-6656</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I&apos;m trying to call a Coprocessor Endpoint from within the preGet handler of a RegionObserver, and it&apos;s throwing Class Loader issues.&lt;br/&gt;
The exact same Coprocessor Endpoint works perfectly from remote Java client, however, fails from within the same Region Server.&lt;br/&gt;
For our particular test environment, only 1 Region Server is available, so I guess it&apos;s a &quot;local&quot; call that fails, and perhaps a remote RegionServer wouldn&apos;t fail, but that doesn&apos;t justify the issue &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;The Code within the RegionObserver is roughly (way reduced) as follows:&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;br/&gt;
	@Override&lt;br/&gt;
	public void preGet(ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; e, Get get, List&amp;lt;KeyValue&amp;gt; results)&lt;br/&gt;
     throws IOException {&lt;br/&gt;
		Map&amp;lt;byte[], Set&amp;lt;byte[]&amp;gt;&amp;gt; results;&lt;/p&gt;

&lt;p&gt;		// scan: for all regions&lt;br/&gt;
		try {&lt;br/&gt;
			Batch.Call&amp;lt;PlatformStatsIndexEndpointProtocol,Set&amp;lt;byte[]&amp;gt;&amp;gt; batchCall = new Batch.Call&amp;lt;PlatformStatsIndexEndpointProtocol,Set&amp;lt;byte[]&amp;gt;&amp;gt;() {&lt;br/&gt;
				  public Set&amp;lt;byte[]&amp;gt; call(PlatformStatsIndexEndpointProtocol instance) throws IOException&lt;/p&gt;
{
				    return instance.getKeyTokenByPrefix(index, match, additionalMatches);
				  }
&lt;p&gt;				};&lt;br/&gt;
			results = indexTable.coprocessorExec(PlatformStatsIndexEndpointProtocol.class, null, null, batchCall);&lt;br/&gt;
		} catch (Throwable e1) &lt;/p&gt;
{
			e1.printStackTrace();
			throw new IOException(e1);
		}

&lt;p&gt;		Set&amp;lt;byte[]&amp;gt; finalResultSet = new HashSet&amp;lt;byte[]&amp;gt;();&lt;br/&gt;
		for (Map.Entry&amp;lt;byte[], Set&amp;lt;byte[]&amp;gt;&amp;gt; e : results.entrySet()) &lt;/p&gt;
{
			finalResultSet.addAll(e.getValue());
		}
&lt;p&gt;	}&lt;br/&gt;
&amp;#8212;&lt;/p&gt;

&lt;p&gt;The Code for the Coprocessor Endpoint is irrelevant, as it never gets executed.&lt;/p&gt;

&lt;p&gt;This is the Exception I get on the Client side (Server side logged exception below).&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;br/&gt;
Thu Aug 23 17:37:45 CST 2012, org.apache.hadoop.hbase.client.HTable$5@26659db7,java.io.IOException: java.io.IOException: java.io.IOException: java.lang.IllegalArgumentException: interface com.company.hbase.platformstats.PlatformStatsIndexEndpointProtocol is not visible from class loader&lt;br/&gt;
        at com.company.hbase.platformstats.IndexQueryRegionObserver.preGet(IndexQueryRegionObserver.java:100)&lt;br/&gt;
        at org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost.preGet(RegionCoprocessorHost.java:553)&lt;br/&gt;
        at org.apache.hadoop.hbase.regionserver.HRegion.get(HRegion.java:3737)&lt;br/&gt;
        at org.apache.hadoop.hbase.regionserver.HRegion.get(HRegion.java:3639)&lt;br/&gt;
        at org.apache.hadoop.hbase.regionserver.HRegionServer.get(HRegionServer.java:1785)&lt;br/&gt;
        at sun.reflect.GeneratedMethodAccessor53.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
        at org.apache.hadoop.hbase.ipc.WritableRpcEngine$Server.call(WritableRpcEngine.java:364)&lt;br/&gt;
        at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:1336)&lt;br/&gt;
Caused by: java.io.IOException: java.lang.IllegalArgumentException: interface com.company.hbase.platformstats.PlatformStatsIndexEndpointProtocol is not visible from class loader&lt;br/&gt;
        at com.company.hbase.platformstats.PlatformStatsIndexer.getKeyTokens(PlatformStatsIndexer.java:390)&lt;br/&gt;
        at com.company.hbase.platformstats.PlatformStatsIndexer.getKeyTokensBySubstring(PlatformStatsIndexer.java:348)&lt;br/&gt;
        at com.company.hbase.platformstats.IndexQueryRegionObserver.searchTokens(IndexQueryRegionObserver.java:148)&lt;br/&gt;
        at com.company.hbase.platformstats.IndexQueryRegionObserver.preGet(IndexQueryRegionObserver.java:97)&lt;br/&gt;
        ... 9 more&lt;br/&gt;
Caused by: java.lang.IllegalArgumentException: interface com.company.hbase.platformstats.PlatformStatsIndexEndpointProtocol is not visible from class loader&lt;br/&gt;
        at java.lang.reflect.Proxy.getProxyClass(Proxy.java:353)&lt;br/&gt;
        at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581)&lt;br/&gt;
        at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation$4.call(HConnectionManager.java:1451)&lt;br/&gt;
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&lt;br/&gt;
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)&lt;br/&gt;
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&lt;br/&gt;
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&lt;br/&gt;
        at java.lang.Thread.run(Thread.java:662)&lt;/p&gt;


&lt;p&gt;        at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.getRegionServerWithRetries(HConnectionManager.java:1345)&lt;br/&gt;
        at org.apache.hadoop.hbase.client.HTable.get(HTable.java:657)&lt;br/&gt;
        at Test.queryIndex(Test.java:109)&lt;br/&gt;
        at Test.main(Test.java:42)&lt;br/&gt;
&amp;#8212;&lt;/p&gt;

&lt;p&gt;This is the Server Side exception logged:&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;br/&gt;
2012-08-23 19:37:44,705 ERROR org.apache.hadoop.hbase.regionserver.HRegionServer:&lt;br/&gt;
java.io.IOException: java.io.IOException: java.lang.IllegalArgumentException: interface com.company.hbase.platformstats.PlatformStatsIndexEndpointProtocol is not&lt;br/&gt;
visible from class loader&lt;br/&gt;
        at com.company.hbase.platformstats.IndexQueryRegionObserver.preGet(IndexQueryRegionObserver.java:100)&lt;br/&gt;
        at org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost.preGet(RegionCoprocessorHost.java:553)&lt;br/&gt;
        at org.apache.hadoop.hbase.regionserver.HRegion.get(HRegion.java:3737)&lt;br/&gt;
        at org.apache.hadoop.hbase.regionserver.HRegion.get(HRegion.java:3639)&lt;br/&gt;
        at org.apache.hadoop.hbase.regionserver.HRegionServer.get(HRegionServer.java:1785)&lt;br/&gt;
        at sun.reflect.GeneratedMethodAccessor53.invoke(Unknown Source)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:597)&lt;br/&gt;
        at org.apache.hadoop.hbase.ipc.WritableRpcEngine$Server.call(WritableRpcEngine.java:364)&lt;br/&gt;
        at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:1336)&lt;br/&gt;
Caused by: java.io.IOException: java.lang.IllegalArgumentException: interface com.company.hbase.platformstats.PlatformStatsIndexEndpointProtocol is not visible from class loader&lt;br/&gt;
        at com.company.hbase.platformstats.PlatformStatsIndexer.getKeyTokens(PlatformStatsIndexer.java:390)&lt;br/&gt;
        at com.company.hbase.platformstats.PlatformStatsIndexer.getKeyTokensBySubstring(PlatformStatsIndexer.java:348)&lt;br/&gt;
        at com.company.hbase.platformstats.IndexQueryRegionObserver.searchTokens(IndexQueryRegionObserver.java:148)&lt;br/&gt;
        at com.company.hbase.platformstats.IndexQueryRegionObserver.preGet(IndexQueryRegionObserver.java:97)&lt;br/&gt;
        ... 9 more&lt;br/&gt;
Caused by: java.lang.IllegalArgumentException: interface com.company.hbase.platformstats.PlatformStatsIndexEndpointProtocol is not visible from class loader&lt;br/&gt;
        at java.lang.reflect.Proxy.getProxyClass(Proxy.java:353)&lt;br/&gt;
        at java.lang.reflect.Proxy.newProxyInstance(Proxy.java:581)&lt;br/&gt;
        at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation$4.call(HConnectionManager.java:1451)&lt;br/&gt;
        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)&lt;br/&gt;
        at java.util.concurrent.FutureTask.run(FutureTask.java:138)&lt;br/&gt;
        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&lt;br/&gt;
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&lt;br/&gt;
        at java.lang.Thread.run(Thread.java:662)&lt;/p&gt;

&lt;p&gt;&amp;#8212;&lt;/p&gt;

&lt;p&gt;I&apos;m not senior java developer, so this Class Loader visibility issue goes beyond my reach. I have the theory that because it&apos;s a local call, the ClassLoaders for the very same Protocol interface may be different (1 reads from the .jar, another from the remote HTable client call); but I have not been able to prove nor fix this behavior.&lt;/p&gt;</description>
                <environment>&lt;p&gt;CentOS5&lt;/p&gt;</environment>
        <key id="12604882">HBASE-6656</key>
            <summary>Cannot call a Coprocessor Endpoint from a RegionObserver</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Not A Problem</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="mmorales">Mauricio Morales</reporter>
                        <labels>
                    </labels>
                <created>Fri, 24 Aug 2012 16:59:33 +0000</created>
                <updated>Wed, 27 Nov 2013 17:40:01 +0000</updated>
                            <resolved>Wed, 27 Nov 2013 17:33:39 +0000</resolved>
                                    <version>0.92.1</version>
                                                    <component>Coprocessors</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13551013" author="anoopsamjohn" created="Fri, 11 Jan 2013 09:47:43 +0000"  >&lt;p&gt;Is there a jar (which includes all the classes for your Endpoint) there in the Region Server process&apos;s classpath?&lt;/p&gt;</comment>
                            <comment id="13551134" author="mmorales" created="Fri, 11 Jan 2013 13:52:40 +0000"  >&lt;p&gt;The jar is stored in HDFS and the Coprocessor setup refers to the HDFS path for the Endpoint&apos;s class location.&lt;br/&gt;
The RegionServer is able to load that very same jar (from HDFS) on remote calls... it&apos;s only the local call from another Coprocessor (say a RegionObserver) that fails.&lt;/p&gt;

&lt;p&gt;Do you think having the jar on the CLASSPATH for the JVM should do the trick? (this implies, however, manual deployment to all nodes instead of the convenience of using HDFS for jar storage of Coprocessor jars. &lt;/p&gt;</comment>
                            <comment id="13553458" author="anoopsamjohn" created="Tue, 15 Jan 2013 03:31:30 +0000"  >&lt;p&gt;Have a try and let us know the result. This usage might be little bit strange I would say.&lt;/p&gt;</comment>
                            <comment id="13819341" author="apurtell" created="Mon, 11 Nov 2013 20:31:02 +0000"  >&lt;p&gt;Let&apos;s see if we can reproduce this or conclude it is not a problem.&lt;/p&gt;</comment>
                            <comment id="13833950" author="ghelmling" created="Wed, 27 Nov 2013 17:01:20 +0000"  >&lt;p&gt;Given that we seem to have consensus that making RPCs within an Observer&apos;s pre/post hooks is an anti-pattern, is this something that we want to support?  HTable.coprocessorExec() tends to be a heavy call, resulting in many RPCs.  I would strongly consider anyone looking at using it from a coprocessor context to restructure their application code so that it is not necessary.&lt;/p&gt;

&lt;p&gt;If the need is to make a method call to another &lt;em&gt;local&lt;/em&gt; coprocessor instance, then there may be better ways to accomplishing this than using a heavy client layer like HTable.coprocessorExec().  We already have CoprocessorHost.findCoprocessor().  Maybe this could be more directly exposed through the coprocessor environment.&lt;/p&gt;</comment>
                            <comment id="13833983" author="mmorales" created="Wed, 27 Nov 2013 17:40:01 +0000"  >&lt;p&gt;I can understand and agree to that (this is an anti-pattern and should be avoided). I&apos;m trying to recall the details of the application back when we had this issue. To shed some more light into this, we were trying to achieve an auto-indexing table. That is, basically, when you insert into TABLE1, the put coprocessors would check and index the entries in TABLE1_index. &lt;/p&gt;

&lt;p&gt;This can certainly be replaced by an offline indexer so we free the inline-coprocessor calls altogether. We ended up discarding this solution due to performance issues (all the more reasons to avoid coprocessors if possible).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 11 Jan 2013 09:47:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>241725</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 3 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02bmn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11485</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>