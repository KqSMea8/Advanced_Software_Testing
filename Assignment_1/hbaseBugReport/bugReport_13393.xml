<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:42:51 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-13393/HBASE-13393.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-13393] Optimize memstore flushing to avoid writing tag information to hfiles when no tags are present.</title>
                <link>https://issues.apache.org/jira/browse/HBASE-13393</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;We used to specify &apos;no tags&apos; by choosing to write files that were version 2.  After parent goes in, make it so can ask a v3 file not to write tags.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12787906">HBASE-13393</key>
            <summary>Optimize memstore flushing to avoid writing tag information to hfiles when no tags are present.</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12787221">HBASE-13373</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Fri, 3 Apr 2015 05:16:32 +0000</created>
                <updated>Tue, 22 Dec 2015 06:26:24 +0000</updated>
                            <resolved>Thu, 28 May 2015 05:10:03 +0000</resolved>
                                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>1.2.0</fixVersion>
                                    <component>HFile</component>
                    <component>Performance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="14394088" author="ram_krish" created="Fri, 3 Apr 2015 05:35:14 +0000"  >&lt;p&gt;Just to rephrase actually v3 does write the tag length even if it is 0 during &apos;flush&apos; but while compaction we don&apos;t write that also. &lt;/p&gt;</comment>
                            <comment id="14394590" author="busbey" created="Fri, 3 Apr 2015 15:45:00 +0000"  >&lt;p&gt;If you don&apos;t use tags, then the hfiles after compaction effectively already look like you&apos;d have if you requested no tag support. Is the extra config worth the savings on optimizing the flush?&lt;/p&gt;

&lt;p&gt;Could we instead track if there are any tags in a store and then do the same optimization on flush as we do in compaction?&lt;/p&gt;</comment>
                            <comment id="14394655" author="stack" created="Fri, 3 Apr 2015 16:36:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;Could we instead track if there are any tags in a store and then do the same optimization on flush as we do in compaction?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like this idea (no config!). What you think &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, or better, point me at how you&apos;d do it and I&apos;ll implement. Thanks.&lt;/p&gt;</comment>
                            <comment id="14394797" author="ram_krish" created="Fri, 3 Apr 2015 18:06:51 +0000"  >&lt;p&gt;In the memstore when we add the cells we need to count the tags.  If the tag count is &amp;gt; 0 while creating the tmp writer we have to pass the boolean to use the tags or not.&lt;/p&gt;</comment>
                            <comment id="14395238" author="stack" created="Fri, 3 Apr 2015 23:11:35 +0000"  >&lt;p&gt;So, a flag on memstore?  And if a kv insert includes tags, we set the flag?  At flush time, we check the flag.  If no tags, we say get a writer that will not output tags?  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; ? If so, I&apos;ll have a go at it.  This would be the usual case I believe.&lt;/p&gt;</comment>
                            <comment id="14395263" author="busbey" created="Fri, 3 Apr 2015 23:32:41 +0000"  >&lt;p&gt;That sounds correct.&lt;/p&gt;
</comment>
                            <comment id="14485474" author="anoop.hbase" created="Wed, 8 Apr 2015 16:30:00 +0000"  >&lt;p&gt;+1 to handle it during flush time itself. &lt;/p&gt;</comment>
                            <comment id="14518743" author="ram_krish" created="Wed, 29 Apr 2015 05:04:40 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;,&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;br/&gt;
You working on this JIRA?&lt;/p&gt;</comment>
                            <comment id="14519938" author="stack" created="Wed, 29 Apr 2015 18:51:16 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; I want tooo... but truth be told, no.&lt;/p&gt;</comment>
                            <comment id="14520820" author="ram_krish" created="Thu, 30 Apr 2015 04:10:45 +0000"  >&lt;p&gt;Can I take this up then?&lt;/p&gt;</comment>
                            <comment id="14520846" author="stack" created="Thu, 30 Apr 2015 04:41:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can I take this up then?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I can&apos;t think of a better man for the job.&lt;/p&gt;</comment>
                            <comment id="14551525" author="stack" created="Wed, 20 May 2015 00:11:42 +0000"  >&lt;p&gt;Any luck w/ this one &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; ? Thanks.&lt;/p&gt;</comment>
                            <comment id="14551716" author="ram_krish" created="Wed, 20 May 2015 03:03:31 +0000"  >&lt;p&gt;I will work on this in a day or two.&lt;/p&gt;</comment>
                            <comment id="14552867" author="apurtell" created="Wed, 20 May 2015 18:59:45 +0000"  >&lt;p&gt;So the plan is to write in hfile metadata that no tags were persisted in a V3 file so some optimizations can happen then? That sounds good. Or is the plan to add a site configuration option to disable tags in V3? In that case I would want to hear more why and the plan for fixing the security code that will break if it sees V3 but doesn&apos;t know tags have been disabled.&lt;/p&gt;</comment>
                            <comment id="14552955" author="busbey" created="Wed, 20 May 2015 19:37:27 +0000"  >&lt;p&gt;from what I understand it&apos;s just taking the optimization we do when writing v3 files for compactions and doing it also on the initial flush.&lt;/p&gt;</comment>
                            <comment id="14554123" author="ram_krish" created="Thu, 21 May 2015 11:20:08 +0000"  >&lt;p&gt;The plan is to avoid tags being written (even the tags length) when there are cells with no tags.&lt;/p&gt;</comment>
                            <comment id="14554131" author="anoop.hbase" created="Thu, 21 May 2015 11:23:56 +0000"  >&lt;p&gt;Compaction time, we already handle. When all the files compacted having 0 length tags, the we will avoid even writing the tag length part. This Jira aims to do so while flush also.&lt;/p&gt;</comment>
                            <comment id="14556499" author="ram_krish" created="Fri, 22 May 2015 17:47:32 +0000"  >&lt;p&gt;Patch with test case.  I was thinking of using a volatile boolean while adding in memstore and set it once per snapshot instead of checking for every cell. But the only issue is in remove().  As we have to know by iterating every cell if there was a cell added with tags. &lt;/p&gt;</comment>
                            <comment id="14556590" author="stack" created="Fri, 22 May 2015 18:39:14 +0000"  >&lt;p&gt;Simple patch but expensive.&lt;/p&gt;

&lt;p&gt;Here is getTagsLength:&lt;/p&gt;

&lt;p&gt;  public int getTagsLength() {&lt;br/&gt;
    int tagsLen = this.length - (getKeyLength() + getValueLength() + KEYVALUE_INFRASTRUCTURE_SIZE);&lt;br/&gt;
    if (tagsLen &amp;gt; 0) &lt;/p&gt;
{
      // There are some Tag bytes in the byte[]. So reduce 2 bytes which is added to denote the tags
      // length
      tagsLen -= TAGS_LENGTH_SIZE;
    }
&lt;p&gt;    return tagsLen;&lt;br/&gt;
  }&lt;/p&gt;

&lt;p&gt;So, just to update (a volatile) if we have a tag, we will do all above parses.... Some will be cached but others we&apos;ll do per Cell.&lt;/p&gt;

&lt;p&gt;Can we inline the update of tags count w/ some other parse we are doing on Cell as part of put to MemStore? Lets see if we can be smarter.&lt;/p&gt;</comment>
                            <comment id="14556660" author="hadoopqa" created="Fri, 22 May 2015 19:13:14 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12734877/HBASE-13393.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12734877/HBASE-13393.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit f8893e0012031a8c623d9da3839e757006878396.&lt;br/&gt;
  ATTACHMENT ID: 12734877&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 4 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1921 checkstyle errors (more than the master&apos;s current 1920 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.io.TestHeapSize&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14156//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14156//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14156//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14156//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14156//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14156//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14156//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14156//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14557107" author="anoop.hbase" created="Sat, 23 May 2015 03:11:41 +0000"  >&lt;p&gt;We can do another smart way. By default we use KeyValueCodec which is not supporting passing of tags with Cell from/to client. So when Mutation cells come into server, we use this Codec&apos;s Decoder to read stream of bytes and convert them to Cells.  We make KeyValue objects now but we can make NoTagsKeyValue as we are sure we are not supporting passing of tags with this Codec.  The getTagsLength() usage is cheap in this class.&lt;br/&gt;
Still I have a concern over using volatile int and adding tagsLength from each Cell. We might go out of range if too many cells we hold in memstore? Rare chance. May be we just need to keep this info as a boolean state only?  This can relax the cost of getTagsLength() with KeyValue also.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; isTags = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(!isTags || cell.getTagsLength &amp;gt; 0 ){
  isTags = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In a system with cells having tags (say it is visibility or per cell ACL system) only for the 1st cell the getTagsLength has to get called. (Remember here we are going to get KeyValue objects not NoTagsKeyValue)&lt;br/&gt;
Only downside is we can not do reverse op on remove(Cell).   But IMO that is ok. Let us not handle. A cell with tags was added but got removed because this transaction got failed.  All other cells in this memstore are with no tags.  Still just because of this single Cell, we will think that tags are present and we will write 0 tags length for all the cells when we flush.  But this should be ok I believe.  The scenario itself is rare that only one cell added was having tagslength and that only got removed.  Even if it happens, the next compaction will handle and avoid tagsLength write in resulting new file.&lt;br/&gt;
The boolean also we can make non volatile only? &lt;/p&gt;</comment>
                            <comment id="14557154" author="ram_krish" created="Sat, 23 May 2015 05:47:03 +0000"  >&lt;p&gt;See my above comment&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I was thinking of using a volatile boolean while adding in memstore and set it once per snapshot instead of checking for every cell. But the only issue is in remove()&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Exactly this is what I meant check only once per snapshot so that we don&apos;t do the check every time for every cell.  The concern that I had was remove() but I was also pretty  much convinced that we need not handle remove cases, anyway no harm.&lt;br/&gt;
I can change that but&lt;br/&gt;
When there are no CPs which is dealing with Tags, then the cells can be always NoTagsKeyValueLen. But for cases where there is Visibility CP configured but there are only few cells with Tags then ?  May be in that case we have to anyway check for every KV until we see a cell with tag.  I would still think boolean is the best option though.  I think we can do some smarter things in the TagRewriteCell though. Let me check.&lt;/p&gt;</comment>
                            <comment id="14557181" author="ram_krish" created="Sat, 23 May 2015 06:54:30 +0000"  >&lt;p&gt;Updated patch. In the KeyValueCodec we will create KeyValue or NoTagKeyValue based on the boolean.&lt;br/&gt;
For the security CP which heavily deals with Tags we will be using the TagRewriteCell which is again doing a cheaper way of finding tagsLength.&lt;br/&gt;
The boolean change is also applied which in my previous patch did not do. &lt;/p&gt;</comment>
                            <comment id="14557187" author="anoop.hbase" created="Sat, 23 May 2015 07:05:26 +0000"  >&lt;p&gt;Oh yes..  TagRewriteCell has a cheaper getTagsLength() impl. Good.&lt;br/&gt;
Am good with this approach now..  KeyValue even though marked private, might be used by users. So better we deprecate old iscreate() and add new?&lt;br/&gt;
Also the boolean can we just make it non volatile only?  &lt;/p&gt;</comment>
                            <comment id="14557199" author="stack" created="Sat, 23 May 2015 07:32:25 +0000"  >&lt;p&gt;We are still doing volatile boolean read on each update to memstore. In 90+% of cases, tags are not used? What if a table or column family config to say &apos;use tags&apos;?&lt;/p&gt;</comment>
                            <comment id="14557204" author="ram_krish" created="Sat, 23 May 2015 07:46:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;Also the boolean can we just make it non volatile only?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;We are still doing volatile boolean read on each update to memstore&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Okie.  We can change to non-volatile.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In 90+% of cases, tags are not used? What if a table or column family config to say &apos;use tags&apos;?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There is no such feature we have.  Tags are not supported directly from clients.  Tags are now added to Cells only in the server side as part of ACL or Visibilities. The client passes these information only as Attributes. &lt;br/&gt;
The reverse where a server sends a Tag to the client is also not there except in the case of replication or cell replay where we use WalCodec (in case of WAL replay).&lt;/p&gt;</comment>
                            <comment id="14557211" author="anoop.hbase" created="Sat, 23 May 2015 08:07:37 +0000"  >&lt;p&gt;Agree with Ram.. I dont think it will be good to add some config or HCD attribute for no tags. Tags is an impl detail for us in server. (Atleast as of now).&lt;/p&gt;
</comment>
                            <comment id="14557212" author="hadoopqa" created="Sat, 23 May 2015 08:12:57 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12734995/HBASE-13393_1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12734995/HBASE-13393_1.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit e93e1ea73c6ce5f632636c613068ddd877ebb60d.&lt;br/&gt;
  ATTACHMENT ID: 12734995&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 12 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1921 checkstyle errors (more than the master&apos;s current 1920 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.io.TestHeapSize&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14158//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14158//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14158//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14158//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14158//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14158//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14158//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14158//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14557468" author="busbey" created="Sat, 23 May 2015 18:45:19 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;We are still doing volatile boolean read on each update to memstore&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Okie. We can change to non-volatile.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Is it safe to change to a non-volatile? What are the concurrency expectations here, when does it need to be read?&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In 90+% of cases, tags are not used? What if a table or column family config to say &apos;use tags&apos;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There is no such feature we have. Tags are not supported directly from clients. Tags are now added to Cells only in the server side as part of ACL or Visibilities. The client passes these information only as Attributes. &lt;br/&gt;
The reverse where a server sends a Tag to the client is also not there except in the case of replication or cell replay where we use WalCodec (in case of WAL replay).&lt;/p&gt;&lt;/blockquote&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-comment&quot;&gt;// In no tags &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; NoTagsKeyValue.getTagsLength() is a cheap call.
&lt;/span&gt;+    &lt;span class=&quot;code-comment&quot;&gt;// When we use ACL CP or Visibility CP which deals with Tags during
&lt;/span&gt;+    &lt;span class=&quot;code-comment&quot;&gt;// mutation, the TagRewriteCell.getTagsLength() is a cheaper call. We &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not
&lt;/span&gt;+    &lt;span class=&quot;code-comment&quot;&gt;// parse the &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] to identify the tags length.
&lt;/span&gt;+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(!tagsAvailable &amp;amp;&amp;amp; e.getTagsLength() &amp;gt; 0) {
+      tagsAvailable = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;just change this check to ignore the current state of tagsAvailable. a rare spurious assignment to a volatile variable is better than a frequent read.&lt;/p&gt;</comment>
                            <comment id="14557599" author="anoop.hbase" created="Sun, 24 May 2015 01:31:13 +0000"  >&lt;p&gt;Yes we can avoid.&lt;br/&gt;
I was asking whether we can have boolean as non volatile.  The decision making read in snapshot and then there wont be concurrent writes. &lt;/p&gt;</comment>
                            <comment id="14558983" author="ram_krish" created="Tue, 26 May 2015 11:22:15 +0000"  >&lt;p&gt;The threading model in this case would be like&lt;br/&gt;
-&amp;gt; The memstore add() is going to be called by multiple threads and so the volatile variable would be read every time and the first thread that sees a tag tries to update it.  Other threads once written would see the updated value.&lt;br/&gt;
In the snapshot() API there is going to be only one thread that is going to read the updated value. During snapshot() we hold a write lock so there is no updates happening via add().&lt;br/&gt;
Wanted to confirm the behaviour of volatile so went thro this blog&lt;br/&gt;
&lt;a href=&quot;http://tutorials.jenkov.com/java-concurrency/volatile.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://tutorials.jenkov.com/java-concurrency/volatile.html&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
But in &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; one thread reads and writes the value of a &lt;span class=&quot;code-keyword&quot;&gt;volatile&lt;/span&gt; variable, and other threads only read the variable, then the reading threads are guaranteed to see the latest value written to the &lt;span class=&quot;code-keyword&quot;&gt;volatile&lt;/span&gt; variable. Without making the variable &lt;span class=&quot;code-keyword&quot;&gt;volatile&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; would not be guaranteed.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here once the update happens then it is only reads by multiple threads.  &lt;br/&gt;
I think we would need a volatile here because multiple threads could update the value of tagsAvailable but the flush thread may not see the actual updated value.  It may be better to remove the !tagsAvailable check and always update the tagsAvailable boolean to true.  Does that make sense here?&lt;/p&gt;</comment>
                            <comment id="14559197" author="busbey" created="Tue, 26 May 2015 14:48:52 +0000"  >&lt;blockquote&gt;
&lt;p&gt;It may be better to remove the !tagsAvailable check and always update the tagsAvailable boolean to true. Does that make sense here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes, this is what I was suggesting above.&lt;/p&gt;</comment>
                            <comment id="14559235" author="stack" created="Tue, 26 May 2015 15:24:21 +0000"  >&lt;p&gt;So, the check of tags length is cheap because it is a hardcoded &apos;0. 99% of the time (except for ACL, etc.), there will be no tags so we&apos;ll not be writing the volatile boolean (nor reading the volatile boolean if do what Sean says above). That sounds good to me.&lt;/p&gt;</comment>
                            <comment id="14559310" author="ram_krish" created="Tue, 26 May 2015 16:16:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;99% of the time (except for ACL, etc.)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Even for ACL cases this call is just going to be arrays.length call.  Nothing much.  Ok I will do as suggested above.  Will post a patch soon.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; == &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.tags) {
      &lt;span class=&quot;code-comment&quot;&gt;// Nulled out tags array optimization in constructor
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 0;
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.tags.length;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;is the getTagsLength() impl in TagRewriteCell.&lt;/p&gt;</comment>
                            <comment id="14559317" author="busbey" created="Tue, 26 May 2015 16:21:17 +0000"  >&lt;p&gt;updated subject to reflect current approach.&lt;/p&gt;</comment>
                            <comment id="14559592" author="ram_krish" created="Tue, 26 May 2015 18:43:55 +0000"  >&lt;p&gt;Updated patch. Now we don&apos;t read the tagsAvailable flag everytime.&lt;/p&gt;</comment>
                            <comment id="14559661" author="anoop.hbase" created="Tue, 26 May 2015 19:17:08 +0000"  >&lt;p&gt;getTagsAvailable() -&amp;gt; isTagsPresent() ?  And related variables&lt;/p&gt;

&lt;p&gt;KeyValue#iscreate() deprecate old and add new one as overloaded?  Yes this class is private still normally used by customers?  Better we add the new method in KeyValueUtil?&lt;/p&gt;</comment>
                            <comment id="14559757" author="hadoopqa" created="Tue, 26 May 2015 20:05:19 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12735374/HBASE-13393_2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12735374/HBASE-13393_2.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit c8c23cc3183735b02e9f43bf7115d9ce3cd2a880.&lt;br/&gt;
  ATTACHMENT ID: 12735374&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 12 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1920 checkstyle errors (more than the master&apos;s current 1919 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.io.TestHeapSize&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14181//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14181//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14181//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14181//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14181//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14181//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14181//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14181//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14560868" author="anoop.hbase" created="Wed, 27 May 2015 12:29:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;KeyValue#iscreate() deprecate old and add new one as overloaded? Yes this class is private still normally used by customers? Better we add the new method in KeyValueUtil?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Oh sorry.. U changed in KVUtil only. NP then.&lt;br/&gt;
+1&lt;br/&gt;
Change the method name on commit. (as per above comment)&lt;/p&gt;</comment>
                            <comment id="14561219" author="ram_krish" created="Wed, 27 May 2015 16:29:24 +0000"  >&lt;p&gt;Updated patch addressing the comments.&lt;/p&gt;</comment>
                            <comment id="14561284" author="stack" created="Wed, 27 May 2015 17:07:28 +0000"  >&lt;p&gt;Patch LGTM.&lt;/p&gt;</comment>
                            <comment id="14561317" author="ram_krish" created="Wed, 27 May 2015 17:18:42 +0000"  >&lt;p&gt;This should be pushed only to master?&lt;/p&gt;</comment>
                            <comment id="14561406" author="stack" created="Wed, 27 May 2015 18:16:51 +0000"  >&lt;p&gt;Looks like a nice optimization to have in any hbase version, at least a 1.2.0.  I do not see any problem w/ it being in branch-1. Do you?&lt;/p&gt;</comment>
                            <comment id="14561519" author="hadoopqa" created="Wed, 27 May 2015 19:05:53 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12735626/HBASE-13393_3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12735626/HBASE-13393_3.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit c8c23cc3183735b02e9f43bf7115d9ce3cd2a880.&lt;br/&gt;
  ATTACHMENT ID: 12735626&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 12 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1921 checkstyle errors (more than the master&apos;s current 1919 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +    MemStoreSnapshot memStoreSnapshot = new MemStoreSnapshot(this.snapshotId, snapshot.size(), this.snapshotSize,&lt;br/&gt;
+      ClassSize.OBJECT + (9 * ClassSize.REFERENCE) + (3 * Bytes.SIZEOF_LONG) + Bytes.SIZEOF_BOOLEAN);&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14199//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14199//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14199//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14199//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14199//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14199//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14199//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14199//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14562299" author="ram_krish" created="Thu, 28 May 2015 05:07:50 +0000"  >&lt;p&gt;Patch for branch-1.  Added isCreate with boolean in KeyvalueUtil and deprecated the isCreate in KeyValue.  This is the only change other than the trunk patch. &lt;/p&gt;</comment>
                            <comment id="14562302" author="ram_krish" created="Thu, 28 May 2015 05:10:03 +0000"  >&lt;p&gt;Pushed to trunk and branch-1.  Thanks for all the reviews - &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoopsamjohn&quot; class=&quot;user-hover&quot; rel=&quot;anoopsamjohn&quot;&gt;Anoop Sam John&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14562304" author="ram_krish" created="Thu, 28 May 2015 05:12:02 +0000"  >&lt;p&gt;Note that the checkstyle comment from QA has been fixed on commit. It is same as that of the long line.&lt;/p&gt;</comment>
                            <comment id="14562327" author="ram_krish" created="Thu, 28 May 2015 05:49:15 +0000"  >&lt;p&gt;Will commit this addendum on trunk deprecating the isCreate in KeyValue as discussed with Anoop.&lt;/p&gt;</comment>
                            <comment id="14562339" author="ram_krish" created="Thu, 28 May 2015 06:00:22 +0000"  >&lt;p&gt;Committed the addendum to master branch.&lt;/p&gt;</comment>
                            <comment id="14562414" author="hudson" created="Thu, 28 May 2015 07:25:02 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2 #107 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/107/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/107/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13393&quot; title=&quot;Optimize memstore flushing to avoid writing tag information to hfiles when no tags are present.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13393&quot;&gt;&lt;del&gt;HBASE-13393&lt;/del&gt;&lt;/a&gt; - Optimize memstore flushing to avoid writing tag information (ramkrishna: rev 17a75083e81f8d9fabb4fc7fbd553ab2d11cdca1)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultStoreFlusher.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreSnapshot.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/codec/KeyValueCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabels.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/codec/KeyValueCodec.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultMemStore.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValueUtil.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14562430" author="hudson" created="Thu, 28 May 2015 07:39:24 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6519 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6519/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6519/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13393&quot; title=&quot;Optimize memstore flushing to avoid writing tag information to hfiles when no tags are present.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13393&quot;&gt;&lt;del&gt;HBASE-13393&lt;/del&gt;&lt;/a&gt; - Optimize memstore flushing to avoid writing tag information (ramkrishna: rev eeb11b53279268806cf986d6389b20b539829c14)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/security/visibility/TestVisibilityLabels.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/codec/KeyValueCodec.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultMemStore.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultStoreFlusher.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/codec/KeyValueCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValueUtil.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreSnapshot.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14562655" author="hudson" created="Thu, 28 May 2015 10:40:45 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #6520 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6520/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6520/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13393&quot; title=&quot;Optimize memstore flushing to avoid writing tag information to hfiles when no tags are present.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13393&quot;&gt;&lt;del&gt;HBASE-13393&lt;/del&gt;&lt;/a&gt; - Addendum for trunk deprecating KeyValue.isCreate() (Ram) (ramkrishna: rev cd9c6de023aa783d92f9653301f1c944d95f2e10)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12825498">HBASE-13579</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12734877" name="HBASE-13393.patch" size="6394" author="ram_krish" created="Fri, 22 May 2015 17:47:32 +0000"/>
                            <attachment id="12734995" name="HBASE-13393_1.patch" size="13455" author="ram_krish" created="Sat, 23 May 2015 06:54:30 +0000"/>
                            <attachment id="12735374" name="HBASE-13393_2.patch" size="13437" author="ram_krish" created="Tue, 26 May 2015 18:43:55 +0000"/>
                            <attachment id="12735626" name="HBASE-13393_3.patch" size="14208" author="ram_krish" created="Wed, 27 May 2015 16:29:24 +0000"/>
                            <attachment id="12735802" name="HBASE-13393_addendum_trunk.patch" size="964" author="ram_krish" created="Thu, 28 May 2015 05:49:15 +0000"/>
                            <attachment id="12735794" name="HBase-13393_branch-1.patch" size="15143" author="ram_krish" created="Thu, 28 May 2015 05:07:50 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 3 Apr 2015 05:35:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 29 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i27qon:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>