<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:00:34 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2283/HBASE-2283.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2283] row level atomicity </title>
                <link>https://issues.apache.org/jira/browse/HBASE-2283</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The flow during a HRegionServer.put() seems to be the following. [For now, let&apos;s just consider single row Put containing edits to multiple column families/columns.&lt;/p&gt;

&lt;p&gt;HRegionServer.put() does a:&lt;/p&gt;

&lt;p&gt;        HRegion.put();&lt;br/&gt;
       syncWal()  (the HDFS sync call).  /* this is assuming we have &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-200&quot; title=&quot;In HDFS, sync() not yet guarantees data available to the new readers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-200&quot;&gt;&lt;del&gt;HDFS-200&lt;/del&gt;&lt;/a&gt; */&lt;/p&gt;

&lt;p&gt;HRegion.put() does a:&lt;br/&gt;
  for each column family &lt;/p&gt;
  {
      HLog.append(all edits to the colum family);

      write all edits to Memstore;
  }

&lt;p&gt;HLog.append() does a :&lt;br/&gt;
  foreach edit in a single column family &lt;/p&gt;
{
    doWrite()
  }

&lt;p&gt;doWrite() does a:&lt;br/&gt;
   this.writer.append().&lt;/p&gt;

&lt;p&gt;There seems to be two related issues here that could result in inconsistencies.&lt;/p&gt;

&lt;p&gt;Issue #1: A put() does a bunch of HLog.append() calls. These in turn do a bunch of &quot;write&quot; calls on the underlying DFS stream.  If we crash after having written out some append&apos;s to DFS, recovery will run and apply a partial transaction to memstore.  &lt;/p&gt;

&lt;p&gt;Issue #2: The updates to memstore  should happen after the sync rather than before. Otherwise, there is the danger that the write to DFS (sync) fails for some reason &amp;amp; we return an error to the client, but we have already taken edits to the memstore. So subsequent reads will serve uncommitted data.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12458055">HBASE-2283</key>
            <summary>row level atomicity </summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kannanm">Kannan Muthukkaruppan</assignee>
                                    <reporter username="kannanm">Kannan Muthukkaruppan</reporter>
                        <labels>
                    </labels>
                <created>Wed, 3 Mar 2010 23:55:15 +0000</created>
                <updated>Fri, 20 Nov 2015 12:43:23 +0000</updated>
                            <resolved>Sat, 20 Mar 2010 00:54:26 +0000</resolved>
                                                    <fixVersion>0.90.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="12840957" author="kannanm" created="Wed, 3 Mar 2010 23:58:34 +0000"  >&lt;p&gt;Followup discussions on the hbase-dev:&lt;/p&gt;

&lt;p&gt;JD wrote: &amp;lt;&amp;lt;&amp;lt; Indeed. The syncWal was taken back up in HRS as a way to optimize batch Puts but the fact it&apos;s called after all the MemStore operations is indeed a problem. I think we need to fix both (#1) and (#2) by ensuring we do only a single append for whatever we have to put and then syncWAL once before processing the MemStore. But, the other problem here is that the row locks have to be taken out on all rows before everything else in the case of a Put[] else we aren&apos;t atomic. And then I think some checks are ran under HRegion that we would need to run before everything else.&amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;Ryan wrote: &amp;lt;&amp;lt;&amp;lt; Do we really need a single actual DFS atomic write operation?  If we had some kind of end-of-row marker, would that help instead?&amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;Yes, a marker or length-prefixed approach would suffice to recognize and ignore incomplete transactions during recovery.&lt;/p&gt;

&lt;p&gt;Ryan wrote: &amp;lt;&amp;lt;&amp;lt; But as you said, what happens if hlog append fails?  The obvious thing would be to remove the additions from the memstore.  But how to accomplish this easily?&amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;Wouldn&apos;t moving all the memstore updates to happen after the sync suffice?&lt;/p&gt;
</comment>
                            <comment id="12841060" author="stack" created="Thu, 4 Mar 2010 04:57:54 +0000"  >&lt;p&gt;So, we should pull WAL.append out of Store and instead do the WAL appending up in the HRegionServer, add all edits for a row to WAL before proceeding per column family to add edits per MemStore.&lt;/p&gt;</comment>
                            <comment id="12841066" author="stack" created="Thu, 4 Mar 2010 05:28:53 +0000"  >&lt;p&gt;Moving into 0.20.4.&lt;/p&gt;</comment>
                            <comment id="12841295" author="dhruba" created="Thu, 4 Mar 2010 14:40:38 +0000"  >&lt;p&gt; &amp;gt;Issue #2: The updates to memstore should happen after the sync rather than before.&lt;/p&gt;

&lt;p&gt;A related question is : what should the region server do if a write/sync to the Hlog fails? A simple option would be to shut itself down. Another option would be to roll the logs?&lt;/p&gt;</comment>
                            <comment id="12841305" author="kannanm" created="Thu, 4 Mar 2010 14:48:28 +0000"  >&lt;p&gt;If I recall correctly, on write failure, the log is indeed already rolled, and an exception is thrown to the client (for the failure of the current transaction). I would have to check what we do if sync fails. But in either case rolling the logs seems like a good option. Shutting down the server might be a more heavy handed option. &lt;/p&gt;

&lt;p&gt;Was the thought that if we went with &quot;shutting down the server&quot; option, we could punt on Issue #2? My guess is the refactoring required for Issue #1 will make it easy to fix #2 also as part of the changes.&lt;/p&gt;

</comment>
                            <comment id="12841310" author="kannanm" created="Thu, 4 Mar 2010 14:52:10 +0000"  >&lt;p&gt;Regarding Issue #1: It seems like all edits for a row (including any start/end txn markers) should in fact happen in &lt;b&gt;one&lt;/b&gt; call to WAL append; otherwise, you can have interleaved edits in the log coming from multiple transactions. Agreed?&lt;/p&gt;</comment>
                            <comment id="12841321" author="dhruba" created="Thu, 4 Mar 2010 15:11:36 +0000"  >&lt;p&gt;If we say that we restart the region server when a write/sync to the region log fails, then we can defer a fix for #2. If we do that, then we do not need any refactoring of the code at all. We can solve #1 via putting a sync marker at the end of each transaction and making the HLog.reader handle this marker correctly (details not yet worked out).&lt;/p&gt;</comment>
                            <comment id="12841326" author="dhruba" created="Thu, 4 Mar 2010 15:15:40 +0000"  >&lt;p&gt;Oh, actually we have to do the refactoring, other we could satisfy a read request from an uncommitted transaction. So, my above comment is not applicable.&lt;/p&gt;</comment>
                            <comment id="12841417" author="jdcryans" created="Thu, 4 Mar 2010 18:07:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;Oh, actually we have to do the refactoring, other we could satisfy a read request from an uncommitted transaction.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;WRT serving stuff that&apos;s not committed, I&apos;d say it&apos;s more in the scope of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2248&quot; title=&quot;Provide new non-copy mechanism to assure atomic reads in get and scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2248&quot;&gt;&lt;del&gt;HBASE-2248&lt;/del&gt;&lt;/a&gt; since we don&apos;t serve from the WAL. In the case of a region server failure, then like you said if we don&apos;t meet the marker with HLog.Reader then those edits won&apos;t be replayed?&lt;/p&gt;</comment>
                            <comment id="12843240" author="kannanm" created="Tue, 9 Mar 2010 18:52:46 +0000"  >
&lt;p&gt;Have coded the changes to make all the &quot;appends&quot; happen first, then &quot;sync&quot; and then all the memstore edits are done. &lt;/p&gt;

&lt;p&gt;Now, trying to work on collapsing all the appends into a single append operation. The marker can simply be the number of edits we expect to find in the append operation. &lt;/p&gt;

&lt;p&gt;Today, if a transaction contains 3 edits to c1, c2, c3 for row R. The HLog contains, has three log entries:&lt;/p&gt;

&lt;p&gt;&amp;lt;logseq1-for-edit1&amp;gt;:&amp;lt;KeyValue-for-edit-c1&amp;gt;&lt;br/&gt;
&amp;lt;logseq2-for-edit2&amp;gt;:&amp;lt;KeyValue-for-edit-c2&amp;gt;&lt;br/&gt;
&amp;lt;logseq3-for-edit3&amp;gt;:&amp;lt;KeyValue-for-edit-c3&amp;gt;&lt;/p&gt;

&lt;p&gt;In the new model, the plan is to have something like:&lt;/p&gt;

&lt;p&gt;&amp;lt;logseq#-for-entire-txn&amp;gt;:&amp;lt;3, &amp;lt;Keyvalue-for-edit-c1&amp;gt;, &amp;lt;KeyValue-for-edit-c2&amp;gt;, &amp;lt;KeyValue-for-edit-c3&amp;gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;Implementing the change itself should be reasonably straightforward. &lt;/p&gt;

&lt;p&gt;But one quick question: In the new version, I presumably have to  worry about supporting both the old &amp;amp; the new log format, correct? (i.e. for cases when someone upgraded from an older version of HBase to this version)&lt;/p&gt;


</comment>
                            <comment id="12843271" author="stack" created="Tue, 9 Mar 2010 20:05:21 +0000"  >&lt;p&gt;.bq In the new version, I presumably have to worry about supporting both the old &amp;amp; the new log format, correct? (i.e. for cases when someone upgraded from an older version of HBase to this version)&lt;/p&gt;

&lt;p&gt;Well, a clean shutdown should have no outstanding wal logs since as part of the shutdown, we flush memstores.  Would it be hard reading both types?  I think that&apos;d be the best thing to do if its not too hard.  Otherwise, you could fail the startup if you find old-style files (make it easy on yourself and give the newstyle different name format) and have admin run a small script to convert old-style to new?&lt;/p&gt;</comment>
                            <comment id="12843436" author="kannanm" created="Wed, 10 Mar 2010 05:04:03 +0000"  >&lt;p&gt;Thanks for your input.&lt;/p&gt;

&lt;p&gt;Have the code changes to support things upward compatibly.  The serialized format of a KeyValue starts with a &quot;int&quot; length. Overloading the length now for versioning. If the length is the special value -1, then will interpret the rest of the data in new format. Else, interpret the data in old format. &lt;/p&gt;

&lt;p&gt;A HLog entry could now either be:&lt;/p&gt;

&lt;p&gt;&amp;lt;HLogKey&amp;gt;:&amp;lt;KeyValue&amp;gt;&lt;br/&gt;
or,&lt;br/&gt;
&amp;lt;HLogKey&amp;gt;:&amp;lt;-1 &amp;lt;# of edits, &amp;lt;KeyValue1&amp;gt;, &amp;lt;KeyValue2&amp;gt;, ...&amp;gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;I think we have the overall fix pretty much code complete. Will put up the patch after some basic testing (hopefully by tomorrow). And then will continue more detailed testing in parallel.&lt;/p&gt;


</comment>
                            <comment id="12844394" author="kannanm" created="Fri, 12 Mar 2010 07:19:01 +0000"  >&lt;p&gt;Attaching patch for intial review.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;The order is now, append/sync/memstore for all edits (such as Put, checkAndPut, Delete, etc. operations).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;Also edits within a single Put (row), are appened as a single edit (KeyValueList) to the WAL.  This will ensure recovery doesn&apos;t apply partial tranactions.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I still need to make one small change to recovery &amp;#8211; if we get an error while reading the WAL due to a partial txn at the end of the WAL-- (i.e. a incomplete HLogKey/KeyValueList) then ignore the error/partial txn. &lt;span class=&quot;error&quot;&gt;&amp;#91;This should happen, if at all, only for the last transaction in a WAL.&amp;#93;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I manually tested killing region server, and ensured that edits were recovered correctly.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul&gt;
	&lt;li&gt;I still need to run other unit tests, and need to add unit tests for these cases.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(Thanks to Aravind/Karthik/Dhruba for discussions/suggestions on the issue &amp;amp; fix.)&lt;/p&gt;
</comment>
                            <comment id="12844672" author="stack" created="Fri, 12 Mar 2010 20:50:41 +0000"  >&lt;p&gt;Here&apos;s some comments.&lt;/p&gt;

&lt;p&gt;I think KeyValueList not the best name for a List that is purposed to appending to a WAL log.  KVL implies List&amp;lt;KeyValue&amp;gt; which it replaces in your code but in fact it does much more.  For one its a Writable.  It also takes care of your fancy new transaction start/end markings.  Rename it WALEdit or HLogEdit or something?  Should it also be moved to the wal package? (o.a.h.h.regionserver.wal).&lt;/p&gt;

&lt;p&gt;Minor: Should it implement List&amp;lt;KeyValue&amp;gt;?  Would that help?  You wouldn&apos;t need to have a getList?&lt;/p&gt;

&lt;p&gt;I love the class comment on KVL.&lt;/p&gt;

&lt;p&gt;readNonLengthData should instead be an overloading of readFields, just add the length param?&lt;/p&gt;

&lt;p&gt;Minor: The following if (kvlist.size() &amp;gt; 0) { is usually cheaper if done as !kvlist.isEmpty IIRC, especially if the list one of the concurrent implementations where size calc is expensive (probably not pertinent here).&lt;/p&gt;

&lt;p&gt;Its interesting, our number-of-entries in hlog will change now, now you group up puts, etc.&lt;/p&gt;

&lt;p&gt;Patch looks great Kannan. &lt;/p&gt;


</comment>
                            <comment id="12844699" author="kannanm" created="Fri, 12 Mar 2010 21:39:25 +0000"  >&lt;p&gt;Stack: thanks for the comments. I will take care of them and resubmit a patch along with a few other test changes I had to make.&lt;/p&gt;</comment>
                            <comment id="12845468" author="kannanm" created="Mon, 15 Mar 2010 19:14:33 +0000"  >&lt;p&gt;Currently, with my patch, TestGetClosestAtOrBefore:testUsingMetaAndBinary() (in regionserver) is broken.&lt;/p&gt;

&lt;p&gt;Debugged this a bit, and it seems that my change has somehow broken the interaction between the scanner &amp;amp; delete. What&apos;s the expected semantics when a delete happens in the middle of a scan, as the test does here:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] firstRowInC = HRegionInfo.createRegionName(Bytes.toBytes(&quot;&quot; + &apos;C&apos;),
      HConstants.EMPTY_BYTE_ARRAY, HConstants.ZEROES);
    Scan scan = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Scan(firstRowInC);
    s = mr.getScanner(scan);
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      List&amp;lt;KeyValue&amp;gt; keys = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;KeyValue&amp;gt;();
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (s.next(keys)) {
        mr.delete(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Delete(keys.get(0).getRow()), &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
        keys.clear();
      }
    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
      s.close();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is the scanner expected to have snapshot semantics (i.e. not be affected by deletes that are happening)? With my patch, the scanner seems to be affected by deletes (need to debug why) &amp;#8211; but I was curious to hear if the old behavior is the expected one?&lt;/p&gt;

</comment>
                            <comment id="12845475" author="stack" created="Mon, 15 Mar 2010 19:29:23 +0000"  >&lt;p&gt;What are you seeing? Yes, the delete above should have an effect such that the subsequent gets return nothing and the ongoing Scan should progress unaffected.&lt;/p&gt;</comment>
                            <comment id="12845486" author="tlipcon" created="Mon, 15 Mar 2010 19:56:56 +0000"  >&lt;p&gt;Can we discuss the semantics questions in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2294&quot; title=&quot;Enumerate ACID properties of HBase in a well defined spec&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2294&quot;&gt;&lt;del&gt;HBASE-2294&lt;/del&gt;&lt;/a&gt;? I really strongly believe we need to nail down these questions before we push forward with code that interacts so closely with them.&lt;/p&gt;</comment>
                            <comment id="12845540" author="kannanm" created="Mon, 15 Mar 2010 21:34:08 +0000"  >&lt;p&gt;scatch my comment (@15/Mar/10 07:14 PM). I was misreading my debug output. The ongoing scan is indeed unaffected by the delete.  There is some other issue with this test + my patch that I am still trying to nail down.&lt;/p&gt;</comment>
                            <comment id="12845589" author="kannanm" created="Mon, 15 Mar 2010 23:17:21 +0000"  >&lt;p&gt;Found the issue with TestGetClosestAtOrBefore:testUsingMetaAndBinary() failures. It was indeed due to my patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/p&gt;

&lt;p&gt;During a put(), updateKeys() is called to convert the special &quot;LATEST&quot; timestamp to &quot;now&quot;. My patch had the inadvertent side effect of calling updateKeys() inside of the if (writeToWAL) check instead of doing so always. This particular test passes &quot;false&quot; for writeToWAL, and so the puts ended up having LATEST timestamps, as their timestamps never got adjusted. This causes subsequent deletes with &quot;now&quot; timestamps to become no-ops. &lt;/p&gt;

</comment>
                            <comment id="12845592" author="kannanm" created="Mon, 15 Mar 2010 23:20:23 +0000"  >&lt;p&gt;Stack: re: KeyValueList you wrote: &amp;lt;&amp;lt;Should it also be moved to the wal package? (o.a.h.h.regionserver.wal).&amp;gt;&amp;gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;I think the *.wal package is only in 0.21. Should I move it to o.a.h.h.regionserver instead for 0.20?&lt;/p&gt;
</comment>
                            <comment id="12845598" author="stack" created="Mon, 15 Mar 2010 23:34:24 +0000"  >&lt;p&gt;Oh, yeah, wal is in TRUNK only... so yes, I&apos;d suggest putting in o.a.h.h.regionserver for 0.20.&lt;/p&gt;</comment>
                            <comment id="12845657" author="kannanm" created="Tue, 16 Mar 2010 02:01:33 +0000"  >&lt;p&gt;Stack:&lt;/p&gt;

&lt;p&gt;btw, I think there might be preexisting issue with timestamps &amp;amp; WAL stuff for deletes that come in with LATEST timestamp.  Could you check the code and confirm?&lt;/p&gt;

&lt;p&gt;Basically, in:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 delete(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] family, List&amp;lt;KeyValue&amp;gt; kvs, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; writeToWAL)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;the  &quot;kv.updateLatestStamp(byteNow);&quot; time stamp massaging happens &lt;b&gt;after&lt;/b&gt; the WAL log.append() call. So the keyvalues written to the HLog does not have the massaged timestamp. On recovery, when these entries are replayed, we add them back to reconstructionCache but don&apos;t do anything with timestamps. &lt;/p&gt;
</comment>
                            <comment id="12846035" author="stack" created="Tue, 16 Mar 2010 17:57:12 +0000"  >&lt;p&gt;@Kannan I confirm you found an ugly bug.  Will I open an issue or you want to fix as part of this one.  Good on you.&lt;/p&gt;</comment>
                            <comment id="12846172" author="kannanm" created="Tue, 16 Mar 2010 22:17:38 +0000"  >&lt;p&gt;Might be simpler to take care of this as part of my fix. Let me do that.&lt;/p&gt;</comment>
                            <comment id="12846520" author="kannanm" created="Wed, 17 Mar 2010 18:41:14 +0000"  >&lt;p&gt;V2 of the patch.  Addresses Stack&apos;s earlier comments. Also, fixes unit tests which were using some of the lower level APIs to use the modified APIs.&lt;/p&gt;

&lt;p&gt;Unit tests pass now. Manually tested crashing RS and triggering recovery for single puts &amp;amp; multiputs. Also tried manual tests for delete (but that revealed some pre-existing issues with delete). The &quot;delete&quot; issue is being tracked in a separate JIRA (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2337&quot; title=&quot;log recovery: splitLog deletes old logs prematurely&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2337&quot;&gt;&lt;del&gt;HBASE-2337&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Will create a separate JIRA for adding automated tests for these. That&apos;ll be my next task. Might need some pointers from Stack or others on this.&lt;/p&gt;</comment>
                            <comment id="12846699" author="kannanm" created="Thu, 18 Mar 2010 00:48:56 +0000"  >&lt;p&gt;A small one line improvement to v2 patch based on internal feedback. The change makes it so that if someone reuses an instance of WALEdit across multiple calls to the sequence file reader, the readFields() method cleans out any  old state of the object cleanly.&lt;/p&gt;</comment>
                            <comment id="12847168" author="stack" created="Fri, 19 Mar 2010 00:22:29 +0000"  >&lt;p&gt;Patch looks good.  Applied to 0.20 branch.  Had to mess in transactional hbase to make it use new WALEdit rather than KeyValue as HLog value.   Working on forward port to TRUNK.&lt;/p&gt;</comment>
                            <comment id="12847673" author="stack" created="Sat, 20 Mar 2010 00:54:26 +0000"  >&lt;p&gt;Committed to TRUNK after some masssage including disable of replication contrib building at J-D&apos;s request... he wants to update replication to match this patch himself.&lt;/p&gt;

&lt;p&gt;Thanks for the patch Kannan.&lt;/p&gt;</comment>
                            <comment id="12848023" author="jdcryans" created="Mon, 22 Mar 2010 03:11:22 +0000"  >&lt;p&gt;Looks like the patch for trunk disables deferred log flush, in HLog.append:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// sync txn to file system
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.sync(info.isMetaRegion());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Doesn&apos;t check info.getTableDesc().isDeferredLogFlush()&lt;/p&gt;</comment>
                            <comment id="12848602" author="stack" created="Tue, 23 Mar 2010 07:49:37 +0000"  >&lt;p&gt;Let me reopen so we get deferred log flush back in again.  J-D, what should be happening in append?  We check deferred flush flag and if set, do not call sync?  Thanks.&lt;/p&gt;</comment>
                            <comment id="12848791" author="jdcryans" created="Tue, 23 Mar 2010 16:38:38 +0000"  >&lt;p&gt;Yeah check if info.isMetaRegion() || ! info.getTableDesc().isDeferredLogFlush()  &lt;br/&gt;
You want to force the sync if it&apos;s a catalog region or if deferred log flush is off. Actually I guess you could even get rid of the first check, unless we want to guard ourselves from a user setting .META. as deferred log flushed?&lt;/p&gt;</comment>
                            <comment id="12848806" author="kannanm" created="Tue, 23 Mar 2010 17:11:34 +0000"  >&lt;p&gt;Is the &quot;deferred log flush&quot; trunk specific? What is its use case/intended semantics? &lt;span class=&quot;error&quot;&gt;&amp;#91;Are you ok with the memstore edits being done before a sync for this use case?&amp;#93;&lt;/span&gt;&lt;/p&gt;

</comment>
                            <comment id="12848810" author="jdcryans" created="Tue, 23 Mar 2010 17:20:31 +0000"  >&lt;p&gt;This is from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1944&quot; title=&quot;Add a &amp;quot;deferred log flush&amp;quot; attribute to HTD&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1944&quot;&gt;&lt;del&gt;HBASE-1944&lt;/del&gt;&lt;/a&gt; (see our use case there) and it is currently trunk-specific since it&apos;s a new feature that came along at the same time as group commit. It relies on the awaitNanos timer in HLog.LogSyncer.run to hflush entries that were appended but not flushed to the DNs. This is turned on by default in trunk (edits are less durable) after a vote came along in November and, if I remember correctly, Stack wasn&apos;t ok with the idea of much slower inserts out of the box compared to the 0.20 branch.&lt;/p&gt;</comment>
                            <comment id="12866903" author="stack" created="Wed, 12 May 2010 23:53:55 +0000"  >&lt;p&gt;Marking these as fixed against 0.21.0 rather than against 0.20.5.&lt;/p&gt;</comment>
                            <comment id="15017506" author="lars_francke" created="Fri, 20 Nov 2015 12:43:23 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12458312">HBASE-2294</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12438586" name="rowLevelAtomicity_2283_v1.patch" size="31483" author="kannanm" created="Fri, 12 Mar 2010 07:19:01 +0000"/>
                            <attachment id="12439058" name="rowLevelAtomicity_2283_v2.patch" size="37340" author="kannanm" created="Wed, 17 Mar 2010 18:41:14 +0000"/>
                            <attachment id="12439104" name="rowLevelAtomicity_2283_v3.patch" size="37471" author="kannanm" created="Thu, 18 Mar 2010 00:48:56 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 4 Mar 2010 04:57:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>26238</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hh1z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100025</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>