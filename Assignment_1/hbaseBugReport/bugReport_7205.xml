<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:43:34 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7205/HBASE-7205.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7205] Coprocessor classloader is replicated for all regions in the HRegionServer</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7205</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6308&quot; title=&quot;Coprocessors should be loaded in a custom ClassLoader to prevent dependency conflicts with HBase&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6308&quot;&gt;&lt;del&gt;HBASE-6308&lt;/del&gt;&lt;/a&gt; introduced a new custom CoprocessorClassLoader to load the coprocessor classes and a new instance of this CL is created for each single HRegion opened. This leads to OOME-PermGen when the number of regions go above hundres / region server. &lt;br/&gt;
Having the table coprocessor jailed in a separate classloader is good however we should create only one for all regions of a table in each HRS.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12617239">HBASE-7205</key>
            <summary>Coprocessor classloader is replicated for all regions in the HRegionServer</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="zhihyu@ebaysf.com">Ted Yu</assignee>
                                    <reporter username="amuraru">Adrian Muraru</reporter>
                        <labels>
                    </labels>
                <created>Wed, 21 Nov 2012 23:41:22 +0000</created>
                <updated>Wed, 14 Jan 2015 18:58:40 +0000</updated>
                            <resolved>Fri, 14 Dec 2012 01:03:29 +0000</resolved>
                                    <version>0.92.2</version>
                    <version>0.94.2</version>
                                    <fixVersion>0.94.4</fixVersion>
                    <fixVersion>0.95.0</fixVersion>
                                    <component>Coprocessors</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                <comments>
                            <comment id="13502471" author="yuzhihong@gmail.com" created="Thu, 22 Nov 2012 00:21:46 +0000"  >&lt;p&gt;Looking at the change from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6308&quot; title=&quot;Coprocessors should be loaded in a custom ClassLoader to prevent dependency conflicts with HBase&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6308&quot;&gt;&lt;del&gt;HBASE-6308&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-      &lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt; cl = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; URLClassLoader(paths.toArray(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; URL[]{}),
+      &lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt; cl = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CoprocessorClassLoader(paths,
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I wonder if the duplication of CoprocessorClassLoader across regions is caused by the way JVM handles CoprocessorClassLoader differently from handling of URLClassLoader.&lt;/p&gt;

&lt;p&gt;RegionCoprocessorHost has access to RegionServerServices. One approach for solving this issue is to expose table to CoprocessorClassLoader mapping through RegionServerServices. loadTableCoprocessors() can consult the mapping and avoid creating duplicate CoprocessorClassLoader&apos;s.&lt;/p&gt;</comment>
                            <comment id="13502738" author="amuraru" created="Thu, 22 Nov 2012 12:18:49 +0000"  >&lt;p&gt;There is a caching tentative in the current implementation of &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;org.apache.hadoop.hbase.coprocessor.CoprocessorHost#load&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; :&lt;br/&gt;
and the custom class loader is cached on thread context:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.currentThread().setContextClassLoader(cl);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;However the classes are loaded from the current class-loader (different from thread classloader)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 implClass = getClass().getClassLoader().loadClass(className);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tedyu@apache.org&quot;&gt;Ted Yu&lt;/a&gt; Not sure if RegionCoprocessorHost is the right place, we need similar behavior on MasterCoprocessorHost so should be one level down.&lt;/p&gt;</comment>
                            <comment id="13502744" author="yuzhihong@gmail.com" created="Thu, 22 Nov 2012 12:34:02 +0000"  >&lt;p&gt;@Adrian:&lt;br/&gt;
Were you suggesting that we should retrieve thread classloader first so that we can reuse CoprocessorClassLoader instance ?&lt;/p&gt;</comment>
                            <comment id="13502763" author="amuraru" created="Thu, 22 Nov 2012 13:11:44 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tedyu@apache.org&quot;&gt;Ted Yu&lt;/a&gt; CHecking the thread classloader would be a quick fix in the current implementation, however this would break the following usecase:&lt;br/&gt;
1. User creates a table and adds a RegionObserver CP (say org.mycompany.MyRegionObserver) available in say hdfs:///lib/mycp-&lt;b&gt;0.1&lt;/b&gt;.jar&lt;br/&gt;
  (in turn, a new classloader will be cached on thread context)&lt;br/&gt;
2. The user updates the implementation and overwrite the COPROCESSOR att on table to load from a new jar (say hdfs:///lib/mycp-&lt;b&gt;0.2&lt;/b&gt;.jar)&lt;br/&gt;
In turn, the old/cached classloader will be used to load MyRegionObserver class - in other ways there is no way to drop an old classloader&lt;/p&gt;

&lt;p&gt;Though, this might be considered a corner case and documented properly&lt;/p&gt;


&lt;p&gt;The real solution here in my mind would be to cache the classloaders keyed by external jar canonical path:&lt;/p&gt;

&lt;p&gt;This would require two new methods on org.apache.hadoop.hbase.Server&lt;br/&gt;
1. getExternalClassLoader(String key)/&lt;br/&gt;
2. setExternalClassLoader(String key, ClassLoader cl)&lt;/p&gt;

</comment>
                            <comment id="13502820" author="yuzhihong@gmail.com" created="Thu, 22 Nov 2012 15:32:40 +0000"  >&lt;p&gt;As I said earlier, RegionCoprocessorHost has access to RegionServerServices. Should the new methods be added to RegionServerServices ?&lt;br/&gt;
In the case you described above, should we allow the path for ver 0.1 of the jar to be purged from the new classloader map ?&lt;/p&gt;</comment>
                            <comment id="13502856" author="lhofhansl" created="Thu, 22 Nov 2012 17:11:26 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; Want have a look?&lt;/p&gt;</comment>
                            <comment id="13502881" author="lhofhansl" created="Thu, 22 Nov 2012 18:06:35 +0000"  >&lt;p&gt;Looking at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6308&quot; title=&quot;Coprocessors should be loaded in a custom ClassLoader to prevent dependency conflicts with HBase&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6308&quot;&gt;&lt;del&gt;HBASE-6308&lt;/del&gt;&lt;/a&gt; it seems the memory behavior didn&apos;t change principally.&lt;br/&gt;
If this is indeed a new problem I will make this a blocker and sink the current 0.94.3RC for this.&lt;/p&gt;

&lt;p&gt;Any patch here should also explore the memory behavior in a test (although I am not entirely sure how one would do that)&lt;/p&gt;</comment>
                            <comment id="13502887" author="lhofhansl" created="Thu, 22 Nov 2012 18:26:29 +0000"  >&lt;p&gt;The other option is to revert &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6308&quot; title=&quot;Coprocessors should be loaded in a custom ClassLoader to prevent dependency conflicts with HBase&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6308&quot;&gt;&lt;del&gt;HBASE-6308&lt;/del&gt;&lt;/a&gt; from 0.94 and only put that fix into 0.96. (At this point I am favoring that)&lt;/p&gt;</comment>
                            <comment id="13502888" author="lhofhansl" created="Thu, 22 Nov 2012 18:27:08 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jbaldassari&quot; class=&quot;user-hover&quot; rel=&quot;jbaldassari&quot;&gt;James Baldassari&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13503304" author="apurtell" created="Fri, 23 Nov 2012 23:29:39 +0000"  >&lt;p&gt;CoprocessorClassLoader extends URLClassloader, and is used the same way. Reverting doesn&apos;t make sense if the effects in PermGen are not a consequence of this change.&#160;&lt;/p&gt;

&lt;p&gt;We need a test for checking PermGen use in the presence of coprocessors or not - open a few hundred regions and see.&#160;&lt;/p&gt;

&lt;p&gt;The suggestion to cache the CP classloader according to CP path is a good one, we should pursue that because we don&apos;t support replacing jars out underneath the RS after a CP is loaded anyway.&#160;&lt;/p&gt;</comment>
                            <comment id="13509340" author="yuzhihong@gmail.com" created="Mon, 3 Dec 2012 23:51:33 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CoprocessorClassLoader(List&amp;lt;URL&amp;gt; paths, &lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt; parent) {
    &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(paths.toArray(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; URL[]{}), parent);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;CoprocessorClassLoader is given a list of URLs.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; loadClass(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; name) 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;loadClass() delegates locating class to URLClassLoader.findClass().&lt;br/&gt;
Looks like we can extract the path where the class is actually loaded by calling &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/net/URLClassLoader.html#findResource%28java.lang.String%29&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/6/docs/api/java/net/URLClassLoader.html#findResource%28java.lang.String%29&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13510091" author="yuzhihong@gmail.com" created="Tue, 4 Dec 2012 23:01:31 +0000"  >&lt;p&gt;Since loadClass(String name) method is defined in ClassLoader, if we override loadClass() in CoprocessorClassLoader() to return both Class and URL, we must name that method differently from loadClass().&lt;/p&gt;</comment>
                            <comment id="13510123" author="zhihyu@ebaysf.com" created="Tue, 4 Dec 2012 23:40:25 +0000"  >&lt;p&gt;Patch v1 uses cache mapping Path to CoprocessorClassLoader.&lt;/p&gt;

&lt;p&gt;TestClassLoading and TestAggregateProtocol pass.&lt;/p&gt;</comment>
                            <comment id="13510166" author="amuraru" created="Wed, 5 Dec 2012 00:32:11 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ted_yu&quot; class=&quot;user-hover&quot; rel=&quot;ted_yu&quot;&gt;Ted Yu&lt;/a&gt; This is really similar with my wip patch - unfortunately I did not find enough time to clean it up until now.&lt;br/&gt;
Couple of comments on your patch&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;101 +      if (clsLoaderCache.containsKey(path)) {&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;1. CPH.load() is executed concurrently from multiple RS threads so clsLoaderCache needs to be synchronized/ConcurrentHashMap.&lt;/p&gt;


&lt;p&gt;2. We need a way to drop cached classloaders that are not being used by any online Region.&lt;/p&gt;



</comment>
                            <comment id="13510168" author="amuraru" created="Wed, 5 Dec 2012 00:33:13 +0000"  >&lt;p&gt;Adding v2 for this patch. We need to merge the tests though once discussed.&lt;/p&gt;</comment>
                            <comment id="13510234" author="zhihyu@ebaysf.com" created="Wed, 5 Dec 2012 02:56:56 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
       } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ClassNotFoundException e) {
+        classLoadersCache.remove(path);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Is the above code for point #2 ?&lt;br/&gt;
When would the catch clause be triggered ?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="13510241" author="zhihyu@ebaysf.com" created="Wed, 5 Dec 2012 03:36:12 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        classLoaders.add(cl);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I only found one reference to classLoaders, shown above. I wonder what purpose classLoaders would serve.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; Set&amp;lt;&lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt;&amp;gt; classLoaders = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt;&amp;gt;();
+  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; ConcurrentMap&amp;lt;Path, &lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt;&amp;gt; classLoadersCache = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MapMaker()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Shouldn&apos;t the above be declared as static ? (CoprocessorHost is per-region).&lt;/p&gt;

&lt;p&gt;I think we can unload ClassLoader from the cache using DeleteTableHandler and DisableTableHandler.&lt;br/&gt;
The assumption is that different tables have different schemas. Coprocessor for one table wouldn&apos;t directly fit another table.&lt;/p&gt;</comment>
                            <comment id="13510247" author="apurtell" created="Wed, 5 Dec 2012 04:04:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we can unload ClassLoader from the cache using DeleteTableHandler and DisableTableHandler. The assumption is that different tables have different schemas. Coprocessor for one table wouldn&apos;t directly fit another table.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;AccessController? TokenProvider? Every table with security enabled will have them loaded.&lt;/p&gt;</comment>
                            <comment id="13510249" author="yuzhihong@gmail.com" created="Wed, 5 Dec 2012 04:07:58 +0000"  >&lt;p&gt;How about putting security related classes in a set and exclude them from unloading ?&lt;/p&gt;</comment>
                            <comment id="13510254" author="apurtell" created="Wed, 5 Dec 2012 04:16:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;How about putting security related classes in a set and exclude them from unloading ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What about any other type of coprocessor that might be registered on multiple tables but not on all tables? Security was just a good example.&lt;/p&gt;</comment>
                            <comment id="13510275" author="zhihyu@ebaysf.com" created="Wed, 5 Dec 2012 04:44:30 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; E load(Path path, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; className, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; priority,
      Configuration conf) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above method is only called by RegionCoprocessorHost.loadTableCoprocessors().&lt;br/&gt;
We can establish a MultiMap from class name to table name. When there is no more table corresponding to given class, we can unload the class&apos; ClassLoader.&lt;/p&gt;</comment>
                            <comment id="13510755" author="amuraru" created="Wed, 5 Dec 2012 20:51:43 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ted_yu&quot; class=&quot;user-hover&quot; rel=&quot;ted_yu&quot;&gt;Ted Yu&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I only found one reference to classLoaders, shown above. I wonder what purpose classLoaders would serve.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;instance attribute &quot;classLoaders&quot; is keeping (strong) references to (possible multiple) region coproc classloaders.&lt;/p&gt;

&lt;p&gt;classLoadersCache on the other hand is the global cache (static) shared by all regions in RS.&lt;br/&gt;
The idea is that classloaders instances (values in classLoadersCache keyed by jar path) are WeakReferences so that they are GC eligible once there is no &lt;br/&gt;
region using them (what keeps them in cache is the above &quot;active classLoaders&quot;)&lt;/p&gt;

&lt;p&gt;Agree, the naming is a bit misleading in my patch, should be:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; Set&amp;lt;&lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt;&amp;gt; activeCoprocessorClassLoaders = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt;&amp;gt;();
+  &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; ConcurrentMap&amp;lt;Path, &lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt;&amp;gt; classLoadersCache = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MapMaker()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13511098" author="apurtell" created="Thu, 6 Dec 2012 04:15:07 +0000"  >&lt;p&gt;The patch &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7205&quot; title=&quot;Coprocessor classloader is replicated for all regions in the HRegionServer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7205&quot;&gt;&lt;del&gt;HBASE-7205&lt;/del&gt;&lt;/a&gt;_v2.patch looks good except for this:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;-    &quot;com.hadoop&quot;,
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the discussion over on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6843&quot; title=&quot;loading lzo error when using coprocessor&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6843&quot;&gt;&lt;del&gt;HBASE-6843&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Adding logging and ZooKeeper classes to the exceptions list is a good idea, thanks for fixing that oversight.&lt;/p&gt;

&lt;p&gt;Should have a test that opens a table with a few regions and confirms there&apos;s only one CP classloader instance for all of them?&lt;/p&gt;</comment>
                            <comment id="13511114" author="yuzhihong@gmail.com" created="Thu, 6 Dec 2012 05:02:45 +0000"  >&lt;p&gt;In RegionCoprocessorHost.postClose(), we can retrieve activeCoprocessorClassLoaders and release the (strong) references.&lt;/p&gt;</comment>
                            <comment id="13511126" author="yuzhihong@gmail.com" created="Thu, 6 Dec 2012 05:30:53 +0000"  >&lt;p&gt;Using patch v2, I got the following test failure:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
testHBase3810(org.apache.hadoop.hbase.coprocessor.TestClassLoading)  Time elapsed: 7.976 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!
java.lang.AssertionError: &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; SimpleRegionObserver was missing on a region
  at org.junit.Assert.fail(Assert.java:93)
  at org.junit.Assert.assertTrue(Assert.java:43)
  at org.apache.hadoop.hbase.coprocessor.TestClassLoading.testHBase3810(TestClassLoading.java:415)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13512048" author="yuzhihong@gmail.com" created="Thu, 6 Dec 2012 19:45:00 +0000"  >&lt;p&gt;Patch v3 fixes the test failure.&lt;/p&gt;

&lt;p&gt;Test that verifies single classloader instance being loaded comes later.&lt;/p&gt;</comment>
                            <comment id="13512093" author="hadoopqa" created="Thu, 6 Dec 2012 20:43:16 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12556487/7205-v3.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12556487/7205-v3.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 101 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 23 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestMultiParallel&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3452//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13512095" author="yuzhihong@gmail.com" created="Thu, 6 Dec 2012 20:44:53 +0000"  >&lt;p&gt;In writing the test for this JIRA, I am thinking of adding the following package private methods to CoprocessorHost because CoprocessorHost doesn&apos;t have knowledge about which table the coprocessor is being loaded for:&lt;br/&gt;
1. static void clearCacheForTesting();&lt;br/&gt;
2. static int getClassloaderCountForTesting(Path path);&lt;br/&gt;
The first method would be called at the beginning of every test. The second method would be called where we want to make sure only one ClassLoader exists per region server.&lt;/p&gt;

&lt;p&gt;Please comment on the above plan.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="13512097" author="yuzhihong@gmail.com" created="Thu, 6 Dec 2012 20:47:32 +0000"  >&lt;p&gt;I ran TestMultiParallel locally with patch v3 and it passed.&lt;/p&gt;</comment>
                            <comment id="13525810" author="yuzhihong@gmail.com" created="Thu, 6 Dec 2012 22:10:01 +0000"  >&lt;p&gt;Patch v4 adds the proposed methods for test.&lt;br/&gt;
testClassLoadingFromHDFS now creates table with multiple regions and verifies that each of the two custom coprocessors is loaded once.&lt;/p&gt;</comment>
                            <comment id="13525995" author="hadoopqa" created="Thu, 6 Dec 2012 23:24:44 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12559647/7205-v4.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12559647/7205-v4.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 101 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 23 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3453//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13527009" author="amuraru" created="Sat, 8 Dec 2012 02:51:58 +0000"  >&lt;p&gt;Ted, patch v5 also checks in TestClassLoading#testClassLoadingFromHDFS that all HRegions CPH are actually re-using cached classloaders. That is, all 4 regions should load the CPs from two classloaders only(two jars)&lt;/p&gt;

&lt;p&gt;This check spotted actually an issue in the activeClassLoader registration - we did it only when the classloader is firstly created - should be whenever the classloader is successfully used to load a CP.&lt;br/&gt;
Patch v5 also contains a fix for this.&lt;/p&gt;

&lt;p&gt;As for &lt;br/&gt;
1. static void clearCacheForTesting();&lt;br/&gt;
2. static int getClassloaderCountForTesting(Path path);&lt;/p&gt;

&lt;p&gt;Do you think we need them ? I wouldn&apos;t add them and use CoprocessorHost.classLoadersCache reference instead. (TestClassLoading is in the same package as CPH so can access package level attributes). Personally, I am not a big fan of adding methods used solely in tests &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13527016" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 03:06:10 +0000"  >&lt;p&gt;Thanks for following up, Adrian.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        regionsActiveClassLoaders.put(region, region.getCoprocessorHost().activeCoprocessorClassLoaders);
...
+    Set&amp;lt;&lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt;&amp;gt; allClassLoaders = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashSet&amp;lt;&lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt;&amp;gt;(CoprocessorHost.classLoadersCache.values());
...
+        assertEquals(&lt;span class=&quot;code-quote&quot;&gt;&quot;CP Classloader &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region &quot;&lt;/span&gt; + regionCP.getKey() + &lt;span class=&quot;code-quote&quot;&gt;&quot; is not cached&quot;&lt;/span&gt;, allClassLoaders, regionCP.getValue());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Above lines are beyond 100 characters.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    assertTrue(&lt;span class=&quot;code-quote&quot;&gt;&quot;No region has found &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; table &quot;&lt;/span&gt; + tableName, foundTableRegion);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&apos;has found&apos; -&amp;gt; &apos;was found&apos;&lt;/p&gt;

&lt;p&gt;Looks like clearCacheForTesting() can be replaced with calling classLoadersCache.clear() directly.&lt;br/&gt;
getClassloaderCountForTesting() can be removed since you added more assertions.&lt;/p&gt;</comment>
                            <comment id="13527025" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 03:31:31 +0000"  >&lt;p&gt;Patch v6 wraps long lines and removes xxForTesting() methods.&lt;/p&gt;

&lt;p&gt;TestClassLoading passes.&lt;/p&gt;</comment>
                            <comment id="13527026" author="hadoopqa" created="Sat, 8 Dec 2012 03:52:00 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12560010/7205-v5.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12560010/7205-v5.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 101 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 23 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.wal.TestHLog&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3462//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13527031" author="hadoopqa" created="Sat, 8 Dec 2012 04:29:20 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12560014/7205-v6.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12560014/7205-v6.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 101 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 23 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3463//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13527041" author="amuraru" created="Sat, 8 Dec 2012 05:26:32 +0000"  >&lt;p&gt;Great, we&apos;re almost there &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Few more things in patch v7:&lt;/p&gt;

&lt;p&gt; 1. An invalid CP classname would evict the entire classloader from cache (this is not good, as the same classloader might be used to load other valid CP classes) &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
       &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
         implClass = cl.loadClass(className);
+        &lt;span class=&quot;code-comment&quot;&gt;// cache cp classloader as a weak value, will be GC&apos;ed when no reference left
&lt;/span&gt;+        classLoadersCache.put (path, cl);
       } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ClassNotFoundException e) {
+        classLoadersCache.remove(path);
         &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(e);
       }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;cache.put not needed as it&apos;s already been added&lt;/li&gt;
	&lt;li&gt;cache.remote not needed as it&apos;ll be GC&apos;ed if not used anyway&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt; 2. TestClassLoading#testClassLoadingFromHDFS checks now for invalid CP classnames and double-checks that jar classloaders are actually cached&lt;/p&gt;</comment>
                            <comment id="13527073" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 05:41:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;cache.remote not needed as it&apos;ll be GC&apos;ed if not used anyway&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Is it possible that the classloader referenced by cache eclipses another classloader which would load className class correctly ?&lt;/p&gt;</comment>
                            <comment id="13527079" author="hadoopqa" created="Sat, 8 Dec 2012 06:32:01 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12560020/7205-v7.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12560020/7205-v7.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 101 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 23 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3465//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13527140" author="amuraru" created="Sat, 8 Dec 2012 13:33:20 +0000"  >&lt;p&gt;Right, two cases here:&lt;br/&gt;
1. Classloader for jarX added to cache but CPH fails to load CP classname from this cl (ie no strong ref kept to cached cl)&lt;br/&gt;
  Valid in the current patch, the cl will be GCed by jvm eventually&lt;/p&gt;

&lt;p&gt;2. Same jar packages multiple CP classes possible set on multiple tables:&lt;br/&gt;
First CP class loading will cache the jar classloader.&lt;br/&gt;
If then,one of the coproc config wrongly refer an invalid classname in this jar, the classlader shouldnt be evicted, he bravely loaded other cp classes and should stay in cache.&lt;/p&gt;

&lt;p&gt;These cases are covered in v7 patch&lt;/p&gt;</comment>
                            <comment id="13527155" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 14:54:47 +0000"  >&lt;p&gt;For case 2, can we detect that jar file contains multiple coprocessors ? Otherwise the class loader should be removed from cache. &lt;/p&gt;</comment>
                            <comment id="13527175" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 15:45:07 +0000"  >&lt;p&gt;In previous patches, we cache classloader before cl.loadClass() is called.&lt;br/&gt;
Patch v8 only caches classloader after the call to cl.loadClass() succeeds.&lt;/p&gt;

&lt;p&gt;TestClassLoading and TestAggregateProtocol pass.&lt;/p&gt;</comment>
                            <comment id="13527179" author="hadoopqa" created="Sat, 8 Dec 2012 16:03:03 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12560035/7205-v8.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12560035/7205-v8.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 101 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 23 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestSplitTransaction&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3466//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13527182" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 16:15:43 +0000"  >&lt;p&gt;I ran TestSplitTransaction with patch v8:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Running org.apache.hadoop.hbase.regionserver.TestSplitTransaction
2012-12-08 08:14:20.661 java[10741:1903] Unable to load realm mapping info from SCDynamicStore
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.047 sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13527197" author="amuraru" created="Sat, 8 Dec 2012 17:12:10 +0000"  >&lt;p&gt;Ted, I don&apos;t agree with v8 patch:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      cl = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CoprocessorClassLoader(paths, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.getClass().getClassLoader());
+
       &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
         implClass = cl.loadClass(className);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Imagine 3 concurrent RS_OPEN_REGION threads calling #load in parallel (this is actually happening when a pre-split table is created/enabled).&lt;br/&gt;
All these threads would create 3 instances of CoprocessorClassLoader (same jar) and in turn implClass  would be loaded from different classloaders.&lt;br/&gt;
That&apos;s the whole mission of this patch - and #putIfAbsent before #loadClass does the trick&lt;/p&gt;


&lt;p&gt;P.S.&lt;br/&gt;
I&apos;ll try to catch this case in TestClassLoading&lt;/p&gt;</comment>
                            <comment id="13527200" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 17:18:25 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
       } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (ClassNotFoundException e) {
-        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(e);
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Cannot load external coprocessor class &quot;&lt;/span&gt; + className, e);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I think classLoadersCache.remove(path) should be placed in the above catch block.&lt;/p&gt;</comment>
                            <comment id="13527205" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 17:34:55 +0000"  >&lt;p&gt;Looking at RegionCoprocessorHost.loadTableCoprocessors(), it simply logs a warning for any Exception.&lt;br/&gt;
User has to parse region server log to find out why his/her coprocessor wasn&apos;t loaded.&lt;br/&gt;
I wish there is a more prominent way of informing the user.&lt;br/&gt;
In CoprocessorHost.abortServer(), coprocessorName is given.&lt;br/&gt;
This is how RegionCoprocessorHost handles Throwable from coprocessor:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Throwable e) {
          handleCoprocessorThrowable(env, e);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I think similar action should be taken, for ClassNotFoundException thrown out of CoprocessorHost.load().&lt;/p&gt;</comment>
                            <comment id="13527245" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 19:46:27 +0000"  >&lt;p&gt;When classLoadersCache.remove(path) is added in the catch block, I got:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
testClassLoadingFromHDFS(org.apache.hadoop.hbase.coprocessor.TestClassLoading)  Time elapsed: 9.779 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!
java.lang.AssertionError: Some CP classloaders &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region TestClassLoading,,1354995818580.7fbabc669828f0c6435df9b6c0a57709. are not cached. &lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt; Cache:[org.apache.hadoop.hbase.coprocessor.CoprocessorClassLoader@6cd86cae, org.apache.hadoop.hbase.coprocessor.CoprocessorClassLoader@7b0c81a6] Region ClassLoaders:[org.apache.hadoop.hbase.coprocessor.CoprocessorClassLoader@29ab0eef, org.apache.hadoop.hbase.coprocessor.CoprocessorClassLoader@7b0c81a6]
  at org.junit.Assert.fail(Assert.java:93)
  at org.junit.Assert.assertTrue(Assert.java:43)
  at org.apache.hadoop.hbase.coprocessor.TestClassLoading.testClassLoadingFromHDFS(TestClassLoading.java:294)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Will take a closer look.&lt;/p&gt;</comment>
                            <comment id="13527256" author="amuraru" created="Sat, 8 Dec 2012 20:49:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;java.lang.AssertionError: Some CP classloaders &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region TestClassLoading,,1354995818580.7fbabc669828f0c6435df9b6c0a57709. are not cached&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&apos;s exactly why cache.remove() should not be called.&lt;br/&gt;
See the case 2 above:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt; 2. Same jar packages multiple CP classes possible set on multiple tables:&lt;br/&gt;
 First CP class loading will cache the jar classloader.&lt;br/&gt;
 If then,one of the coproc config wrongly refer an invalid classname in this jar, the classlader shouldnt be evicted, he bravely loaded other cp classes and should stay in cache.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;works fine with v7 so I propose to stick with that version at this stage&lt;/p&gt;</comment>
                            <comment id="13527282" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 22:51:54 +0000"  >&lt;p&gt;Thanks for the reminder, Adrian.&lt;br/&gt;
After poking a little bit, I want to discuss the following assertion:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Map.Entry&amp;lt;HRegion, Set&amp;lt;&lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt;&amp;gt;&amp;gt; regionCP : regionsActiveClassLoaders.entrySet()) {
      assertTrue(&lt;span class=&quot;code-quote&quot;&gt;&quot;Some CP classloaders &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region &quot;&lt;/span&gt; + regionCP.getKey() + &lt;span class=&quot;code-quote&quot;&gt;&quot; are not cached.&quot;&lt;/span&gt;
            + &lt;span class=&quot;code-quote&quot;&gt;&quot; &lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt; Cache:&quot;&lt;/span&gt; + allClassLoaders
            + &lt;span class=&quot;code-quote&quot;&gt;&quot; Region ClassLoaders:&quot;&lt;/span&gt; + regionCP.getValue(),
            allClassLoaders.containsAll(regionCP.getValue()));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The reason why the above assertion failed was that the classloader for jarFileOnHDFS2 was removed from classLoadersCache in the middle of the test because of attempt of loading cpNameInvalid class.&lt;br/&gt;
I think the above assertion places extra limit on how CoprocessorHost.load() handles ClassNotFoundException. It assumes that the classloader corresponding to attempt of loading invalid classname (more strictly, classname and jar file mismatch) would be retained in cache.&lt;/p&gt;

&lt;p&gt;For this particular scenario, I can see two possibilities for root cause:&lt;br/&gt;
1. user puts correct jar file on hdfs but specifies wrong class name.&lt;br/&gt;
2. user specifies correct class name but uploads wrong / stale jar file onto hdfs&lt;br/&gt;
From occurrence of ClassNotFoundException itself, we don&apos;t have enough evidence which one of the above is the root cause. &lt;br/&gt;
So it would be nice to give CoprocessorHost.load() flexibility in how this situation is handled.&lt;/p&gt;

&lt;p&gt;Time permitting, I want to use policy introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4014&quot; title=&quot;Coprocessors: Flag the presence of coprocessors in logged exceptions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4014&quot;&gt;&lt;del&gt;HBASE-4014&lt;/del&gt;&lt;/a&gt; to fail fast class loading instead of silently logging in region server log. If people think that should be tackled in separate JIRA, I am fine with that - provided we leave the door open as to how CoprocessorHost.load() handles ClassNotFoundException.&lt;br/&gt;
On top of the above assertion, we already have:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    assertTrue(jarFileOnHDFS1 + &lt;span class=&quot;code-quote&quot;&gt;&quot; was not cached&quot;&lt;/span&gt;,
      CoprocessorHost.classLoadersCache.containsKey(pathOnHDFS1));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So there is verification on caching behavior.&lt;/p&gt;

&lt;p&gt;This is nice exercise which allows me to understand coprocessor classloading a bit deeper.&lt;/p&gt;</comment>
                            <comment id="13527317" author="amuraru" created="Sun, 9 Dec 2012 01:33:57 +0000"  >&lt;p&gt;Right, classloading java is tough, I agree &lt;br/&gt;
Regarding your comments:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The reason why the above assertion failed was that the classloader for jarFileOnHDFS2 was removed from classLoadersCache in the middle of the test because of attempt of loading cpNameInvalid class.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;True, &lt;b&gt;cpNameInvalid&lt;/b&gt; fails to load (no such class in cp jar) however the same jar (i.e. its associated classloader) manages to successfully loads &lt;b&gt;another coprocessor: cpName2&lt;/b&gt;&lt;br/&gt;
Take a closer look on how the &lt;b&gt;test&lt;/b&gt; table is created in &lt;tt&gt;TestClassLoading#testClassLoadingFromHDFS&lt;/tt&gt;:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    htd.addFamily(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HColumnDescriptor(&lt;span class=&quot;code-quote&quot;&gt;&quot;test&quot;&lt;/span&gt;));
      &lt;span class=&quot;code-comment&quot;&gt;// without configuration values
&lt;/span&gt;    htd.setValue(&lt;span class=&quot;code-quote&quot;&gt;&quot;COPROCESSOR$1&quot;&lt;/span&gt;, jarFileOnHDFS1.toString() + &lt;span class=&quot;code-quote&quot;&gt;&quot;|&quot;&lt;/span&gt; + cpName1 + &lt;span class=&quot;code-quote&quot;&gt;&quot;|&quot;&lt;/span&gt; + Coprocessor.PRIORITY_USER);
      &lt;span class=&quot;code-comment&quot;&gt;// with configuration values
&lt;/span&gt;    htd.setValue(&lt;span class=&quot;code-quote&quot;&gt;&quot;COPROCESSOR$2&quot;&lt;/span&gt;, jarFileOnHDFS2.toString() + &lt;span class=&quot;code-quote&quot;&gt;&quot;|&quot;&lt;/span&gt; + cpName2 + &lt;span class=&quot;code-quote&quot;&gt;&quot;|&quot;&lt;/span&gt; + Coprocessor.PRIORITY_USER + &lt;span class=&quot;code-quote&quot;&gt;&quot;|k1=v1,k2=v2,k3=v3&quot;&lt;/span&gt;);
    &lt;span class=&quot;code-comment&quot;&gt;// invalid class name (should fail to load &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; class)
&lt;/span&gt;    htd.setValue(&lt;span class=&quot;code-quote&quot;&gt;&quot;COPROCESSOR$3&quot;&lt;/span&gt;, jarFileOnHDFS2.toString() + &lt;span class=&quot;code-quote&quot;&gt;&quot;|&quot;&lt;/span&gt; + cpNameInvalid + &lt;span class=&quot;code-quote&quot;&gt;&quot;|&quot;&lt;/span&gt; + Coprocessor.PRIORITY_USER);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;See, the same jar file &lt;tt&gt;jarFileOnHDFS2&lt;/tt&gt; is used to load two different coprocessor classes (one is successfully loaded, the other not). &lt;br/&gt;
What should we do in this case? &lt;br/&gt;
My take is to keep the classloader in cache and allow other regions to re-use it.&lt;br/&gt;
That&apos;s the reason I removed classloaderCache.remove() and I strongly go for it.&lt;/p&gt;

&lt;p&gt;Now, the fundamental question : &lt;br/&gt;
&lt;b&gt;Should we silently ignore failures in CP loading (excepting the warn message in log) ?&lt;/b&gt;&lt;br/&gt;
I think we should be more restrictive, propagate the failures upstream to the table handler and fail to bring the HRegion online in this case.&lt;br/&gt;
What do you think?&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;I think the above assertion places extra limit on how CoprocessorHost.load() handles ClassNotFoundException. It assumes that the classloader corresponding to attempt of loading invalid classname (more strictly, classname and jar file mismatch) would be retained in cache.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No, that&apos;s not true: The assertion is checking that &lt;b&gt;all region active-classloaders (i.e. those that managed to successfully load at least one CP) are all cached&lt;/b&gt;&lt;/p&gt;</comment>
                            <comment id="13527321" author="yuzhihong@gmail.com" created="Sun, 9 Dec 2012 02:22:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we should be more restrictive, propagate the failures upstream to the table handler and fail to bring the HRegion online in this case.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As I said previously, I wanted to go this route as well.&lt;/p&gt;

&lt;p&gt;Will upload a patch tomorrow using the configuration introduced by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4014&quot; title=&quot;Coprocessors: Flag the presence of coprocessors in logged exceptions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4014&quot;&gt;&lt;del&gt;HBASE-4014&lt;/del&gt;&lt;/a&gt; to fail fast class loading.&lt;/p&gt;</comment>
                            <comment id="13527346" author="yuzhihong@gmail.com" created="Sun, 9 Dec 2012 05:40:22 +0000"  >&lt;p&gt;I experimented with the above idea.&lt;br/&gt;
The reason for coprocessor loading to tolerate ClassNotFoundException is that the user table region where jar file and classname mismatch can reside on any of the region servers in the cluster. If we don&apos;t tolerate the mismatch, it is possible that all region servers in the cluster abort.&lt;/p&gt;

&lt;p&gt;I will try to think of a way to tackle the above scenario.&lt;/p&gt;

&lt;p&gt;However, the majority of the problem raised by this JIRA has been solved.&lt;br/&gt;
I am fine with patch v7.&lt;/p&gt;</comment>
                            <comment id="13527447" author="amuraru" created="Sun, 9 Dec 2012 13:17:06 +0000"  >&lt;p&gt;So you think we should have a separate JIRA for CP ClassNotFound handling ?&lt;/p&gt;</comment>
                            <comment id="13527458" author="yuzhihong@gmail.com" created="Sun, 9 Dec 2012 13:36:13 +0000"  >&lt;p&gt;I logged &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7310&quot; title=&quot;Allow region server UI to display critical errors so that user doesn&amp;#39;t have to peruse region server log&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7310&quot;&gt;&lt;del&gt;HBASE-7310&lt;/del&gt;&lt;/a&gt; as one possible (partial) solution for this scenario.&lt;/p&gt;</comment>
                            <comment id="13527531" author="apurtell" created="Sun, 9 Dec 2012 17:24:55 +0000"  >&lt;p&gt;We should not tolerate ClassNotFoundExceptions. At a minimum the region should not open. See &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6873&quot; title=&quot;Clean up Coprocessor loading failure handling&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6873&quot;&gt;&lt;del&gt;HBASE-6873&lt;/del&gt;&lt;/a&gt;.&#160;&lt;/p&gt;</comment>
                            <comment id="13527537" author="yuzhihong@gmail.com" created="Sun, 9 Dec 2012 17:31:24 +0000"  >&lt;p&gt;@Andy:&lt;br/&gt;
Thanks for the reminder.&lt;br/&gt;
Did you mean that &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6873&quot; title=&quot;Clean up Coprocessor loading failure handling&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6873&quot;&gt;&lt;del&gt;HBASE-6873&lt;/del&gt;&lt;/a&gt; would cover coprocessor ClassNotFound handling ?&lt;/p&gt;</comment>
                            <comment id="13527541" author="apurtell" created="Sun, 9 Dec 2012 17:41:10 +0000"  >&lt;p&gt;@Ted: I refer you to the discussion on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6873&quot; title=&quot;Clean up Coprocessor loading failure handling&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6873&quot;&gt;&lt;del&gt;HBASE-6873&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Failing closed - disallowing region open if a table CP fails to load and aborting the RS if a system CP fails to load - should be the default. This is an area we need to tighten up. I&apos;m glad you&apos;re looking at this now.&#160;&lt;/p&gt;

&lt;p&gt;For more justification see comments at the tail of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6222&quot; title=&quot;Add per-KeyValue Security&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6222&quot;&gt;&lt;del&gt;HBASE-6222&lt;/del&gt;&lt;/a&gt;, where Stack asks if coprocessor load failure would expose hidden data, and the response.&#160;&lt;/p&gt;

&lt;p&gt;Referring again to the discussion on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6873&quot; title=&quot;Clean up Coprocessor loading failure handling&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6873&quot;&gt;&lt;del&gt;HBASE-6873&lt;/del&gt;&lt;/a&gt;, it can be ok to tolerate failure but only if that is explicitly configured.&#160;&lt;/p&gt;</comment>
                            <comment id="13527586" author="yuzhihong@gmail.com" created="Sun, 9 Dec 2012 19:10:50 +0000"  >&lt;p&gt;@Andy:&lt;br/&gt;
I will look at hbase-6873 in more detail. &lt;/p&gt;

&lt;p&gt;Do you think patch v7 is good to go for this Jira ?&lt;/p&gt;</comment>
                            <comment id="13527612" author="amuraru" created="Sun, 9 Dec 2012 20:10:57 +0000"  >&lt;p&gt;Just realised that we don&apos;t need at all the &lt;tt&gt;activeCoprocessorClassLoaders&lt;/tt&gt; set of strong references. As long there is an open HRegion using a Coprocessor loaded from an external jar, there is a GC path to the classloader keeping it in memory.&lt;br/&gt;
See this trace:&lt;br/&gt;
&lt;a href=&quot;http://img.ly/images/6350023/full&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://img.ly/images/6350023/full&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;v9 patch removes this attributes and adds a new method to query the active list of classloaders from CPH&lt;/p&gt;</comment>
                            <comment id="13527638" author="hadoopqa" created="Sun, 9 Dec 2012 21:51:51 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12560118/7205-v9.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12560118/7205-v9.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 101 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 23 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.wal.TestHLog&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3469//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13528086" author="yuzhihong@gmail.com" created="Mon, 10 Dec 2012 17:33:17 +0000"  >&lt;p&gt;For getExternalClassLoaders(), since it cannot be changed to package private scope, I suggest naming it getExternalClassLoadersForTesting() - it is only called by unit test.&lt;/p&gt;

&lt;p&gt;I ran TestHLog and it passed with patch v9.&lt;/p&gt;</comment>
                            <comment id="13528100" author="amuraru" created="Mon, 10 Dec 2012 17:53:14 +0000"  >&lt;p&gt;I&apos;m not sure what&apos;s the convention in Hbase for this kind of methods (again, I hate &quot;forTesting&quot; suffixes  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/biggrin.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and I usually avoid to add this kind of code) but in this case - the getExternalClassLoaders() could be used from other places aswell like : JMX query ? or even Metrics ?&lt;/p&gt;</comment>
                            <comment id="13528108" author="yuzhihong@gmail.com" created="Mon, 10 Dec 2012 18:02:00 +0000"  >&lt;p&gt;Patch v10 makes getExternalClassLoaders() package private.&lt;br/&gt;
TestClassLoading passes.&lt;/p&gt;</comment>
                            <comment id="13528177" author="hadoopqa" created="Mon, 10 Dec 2012 18:58:13 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12560223/7205-v10.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12560223/7205-v10.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 101 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 23 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestFromClientSideWithCoprocessor&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3476//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13528189" author="yuzhihong@gmail.com" created="Mon, 10 Dec 2012 19:14:15 +0000"  >&lt;p&gt;I ran TestFromClientSideWithCoprocessor with patch v10 and it passed locally.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Running org.apache.hadoop.hbase.client.TestFromClientSideWithCoprocessor
2012-12-10 11:10:26.412 java[26891:1903] Unable to load realm mapping info from SCDynamicStore
Tests run: 62, Failures: 0, Errors: 0, Skipped: 3, Time elapsed: 175.557 sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13528213" author="stack" created="Mon, 10 Dec 2012 19:45:33 +0000"  >&lt;p&gt;It looks like a ClassNotFoundException throws an IOE if a null path passed and otherwise, we go to load from filesystem if not in cache.... which would seem to address @Andrew Purtell concern.  Is that so?&lt;/p&gt;

&lt;p&gt;Why we do this? setContextClassLoader on currentThread?  Is it in case we have stale cl?  One that was just replaced in cache?&lt;/p&gt;

&lt;p&gt;Is this iteration safe?&lt;/p&gt;

&lt;p&gt;+    for (E env : coprocessors) {&lt;/p&gt;

&lt;p&gt;Not sure I follow all that is going on but patch looks good to me lads.&lt;/p&gt;


</comment>
                            <comment id="13528220" author="yuzhihong@gmail.com" created="Mon, 10 Dec 2012 19:53:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is this iteration safe?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;coprocessors is backed by SortedCopyOnWriteSet. So the iteration is safe.&lt;/p&gt;

&lt;p&gt;Looking forward to Andy&apos;s review.&lt;/p&gt;</comment>
                            <comment id="13528250" author="amuraru" created="Mon, 10 Dec 2012 20:31:41 +0000"  >&lt;blockquote&gt;&lt;p&gt; Is this iteration safe?&lt;br/&gt;
coprocessors is backed by SortedCopyOnWriteSet. So the iteration is safe.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Is it Ted ? That was my guess initially when I saw that HBase provide an &quot;CopyOnWrite&quot; tree-set. Thread-safeness is a guarantee for all java.util.concurrent CopyOnWrite collections. they provide snapshot based iterators (no ConcurrentModificationException thrown) but that&apos;s not the case for SortedCopyOnWriteSet in hbase - it just returns the treeset iterator which is &lt;b&gt;not thread-safe&lt;/b&gt;! &lt;/p&gt;</comment>
                            <comment id="13528265" author="yuzhihong@gmail.com" created="Mon, 10 Dec 2012 20:41:38 +0000"  >&lt;p&gt;Looking at SortedCopyOnWriteSet, it creates new TreeSet in methods add, remove, addAll, etc.&lt;/p&gt;

&lt;p&gt;@Adrian:&lt;br/&gt;
Can you elaborate more on the above comment ?&lt;/p&gt;</comment>
                            <comment id="13528267" author="amuraru" created="Mon, 10 Dec 2012 20:46:11 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;It looks like a ClassNotFoundException throws an IOE if a null path passed and otherwise, we go to load from filesystem if not in cache.... which would seem to address @Andrew Purtell concern. Is that so?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The discussions around ClassNotFoundException were related to &lt;tt&gt;RegionCoprocessorHost#loadTableCoprocessors&lt;/tt&gt; which catch any Exception thrown by &lt;tt&gt;CPH.load&lt;/tt&gt; logs it and continue ignoring the faulty Coprocessor.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why we do this? setContextClassLoader on currentThread? Is it in case we have stale cl? One that was just replaced in cache?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This something I borrowed off jetty similar sandboxed classloader. &lt;br/&gt;
The reason is that custom CP class implementation might do some gymnastics and explicitly retrieve the caller thread context to load other classes and thus escaping the custom loader.&lt;/p&gt;</comment>
                            <comment id="13528272" author="stack" created="Mon, 10 Dec 2012 20:51:17 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=amuraru&quot; class=&quot;user-hover&quot; rel=&quot;amuraru&quot;&gt;Adrian Muraru&lt;/a&gt; Sounds good Adrian.  We might add comment to the above effect on commit... no biggie.  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andrew.purtell%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;andrew.purtell@gmail.com&quot;&gt;Andrew Purtell&lt;/a&gt; Patch looks good to me. What you reckon?&lt;/p&gt;</comment>
                            <comment id="13528274" author="amuraru" created="Mon, 10 Dec 2012 20:53:30 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tedyu@apache.org&quot;&gt;Ted Yu&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/concurrent/CopyOnWriteArrayList.java#956&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/concurrent/CopyOnWriteArrayList.java#956&lt;/a&gt;&lt;br/&gt;
See - the iterator is a COWIterator &lt;br/&gt;
documented in javadoc :&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Traversal via iterators is fast and cannot encounter interference from other threads. Iterators rely on unchanging snapshots of the array at the time the iterators were constructed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;compared to :&lt;br/&gt;
&lt;a href=&quot;http://grepcode.com/file/repo1.maven.org/maven2/org.apache.hbase/hbase/0.94.1/org/apache/hadoop/hbase/util/SortedCopyOnWriteSet.java#77&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://grepcode.com/file/repo1.maven.org/maven2/org.apache.hbase/hbase/0.94.1/org/apache/hadoop/hbase/util/SortedCopyOnWriteSet.java#77&lt;/a&gt;&lt;br/&gt;
which returns a TreeSet iterator known not be thread-safe in java collections&lt;/p&gt;


&lt;p&gt;@Stack - you eagle eye - is this what you were referring to when you asked about the safeness of the iterator?&lt;/p&gt;</comment>
                            <comment id="13528285" author="yuzhihong@gmail.com" created="Mon, 10 Dec 2012 21:01:12 +0000"  >&lt;p&gt;I searched HBase code base and didn&apos;t find any class using COWIterator.&lt;/p&gt;

&lt;p&gt;getExternalClassLoaders() is only called by unit test when all coprocessor loading has completed. I wonder if thread safety is needed for this method.&lt;/p&gt;</comment>
                            <comment id="13529175" author="ghelmling" created="Tue, 11 Dec 2012 18:03:00 +0000"  >&lt;p&gt;There are indeed parts of SortedCopyOnWriteSet that are not thread safe due to leaked references to the TreeSet implementation.  I opened &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7326&quot; title=&quot;SortedCopyOnWriteSet is not thread safe due to leaked TreeSet implementations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7326&quot;&gt;HBASE-7326&lt;/a&gt; to fix.  From a quick review of the trunk code, though, there is nothing (yet) using SortedCopyOnWriteSet in an unsafe way.&lt;/p&gt;</comment>
                            <comment id="13529419" author="apurtell" created="Tue, 11 Dec 2012 23:03:41 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7326&quot; title=&quot;SortedCopyOnWriteSet is not thread safe due to leaked TreeSet implementations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7326&quot;&gt;HBASE-7326&lt;/a&gt; makes sense. Let&apos;s do it.&lt;/p&gt;

&lt;p&gt;The v10 patch looks mostly ok. I like the test improvements. &lt;/p&gt;

&lt;p&gt;This hunk contains an error:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Index: hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorClassLoader.java
===================================================================
--- hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorClassLoader.java	(revision 1419585)
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorClassLoader.java	(working copy)
@@ -65,9 +65,13 @@
     &quot;org.w3c&quot;,
     &quot;org.xml&quot;,
     &quot;sunw.&quot;,
-    // Hadoop/HBase:
+    // logging
+    &quot;org.apache.commons.logging&quot;,
+    &quot;org.apache.log4j&quot;,
+    &quot;com.hadoop&quot;,
+    // Hadoop/HBase/ZK:
     &quot;org.apache.hadoop&quot;,
-    &quot;com.hadoop&quot;,
+    &quot;org.apache.zookeeper&quot;,
   };
   
   /**
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Don&apos;t remove &quot;com.hadoop&quot; from the whitelist. See &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6843&quot; title=&quot;loading lzo error when using coprocessor&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6843&quot;&gt;&lt;del&gt;HBASE-6843&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

</comment>
                            <comment id="13529459" author="yuzhihong@gmail.com" created="Tue, 11 Dec 2012 23:08:47 +0000"  >&lt;p&gt;@Andy:&lt;br/&gt;
Thanks for the review.&lt;br/&gt;
&quot;com.hadoop&quot; wasn&apos;t removed. It is now above the following comment:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// Hadoop/HBase/ZK&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13529463" author="apurtell" created="Tue, 11 Dec 2012 23:11:24 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ted_yu&quot; class=&quot;user-hover&quot; rel=&quot;ted_yu&quot;&gt;Ted Yu&lt;/a&gt; I see, ok, +1&lt;/p&gt;</comment>
                            <comment id="13529471" author="yuzhihong@gmail.com" created="Tue, 11 Dec 2012 23:21:11 +0000"  >&lt;p&gt;Integrated to trunk.&lt;/p&gt;

&lt;p&gt;Thanks for the help, Adrian.&lt;/p&gt;

&lt;p&gt;Thanks for the reviews, Andy and Stack.&lt;/p&gt;

&lt;p&gt;0.94 patch coming soon.&lt;/p&gt;</comment>
                            <comment id="13529475" author="lhofhansl" created="Tue, 11 Dec 2012 23:25:42 +0000"  >&lt;p&gt;Before you commit any 0.94 patch, please let me review it. 0.94 is churning.&lt;/p&gt;</comment>
                            <comment id="13529481" author="yuzhihong@gmail.com" created="Tue, 11 Dec 2012 23:31:25 +0000"  >&lt;p&gt;Patch for 0.94.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Running org.apache.hadoop.hbase.coprocessor.TestAggregateProtocol
2012-12-11 15:28:59.447 java[51424:1903] Unable to load realm mapping info from SCDynamicStore
Tests run: 45, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 30.924 sec
Running org.apache.hadoop.hbase.coprocessor.TestClassLoading
2012-12-11 15:29:30.943 java[51449:1903] Unable to load realm mapping info from SCDynamicStore
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 28.151 sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;@Lars:&lt;br/&gt;
Please take a look.&lt;/p&gt;</comment>
                            <comment id="13529490" author="lhofhansl" created="Tue, 11 Dec 2012 23:46:41 +0000"  >&lt;p&gt;Looks good. Should there be a test that verifies that these classloaders are in fact getting collected?&lt;br/&gt;
(Similar to the test I added for shared coprocessor data in TestCoprocessotInterface.testSharedData)&lt;/p&gt;

&lt;p&gt;This would verify the absence of current memory leaks and makes we won&apos;t introduce any in the future.&lt;/p&gt;</comment>
                            <comment id="13529548" author="yuzhihong@gmail.com" created="Wed, 12 Dec 2012 01:28:40 +0000"  >&lt;p&gt;In patch v10, activeCoprocessorClassLoaders is no longer used.&lt;br/&gt;
To verify classloaders being collected, we may need to trigger GC after table is disabled.&lt;br/&gt;
Is that what you were thinking ?&lt;/p&gt;</comment>
                            <comment id="13529557" author="hudson" created="Wed, 12 Dec 2012 01:40:46 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #3612 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/3612/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/3612/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7205&quot; title=&quot;Coprocessor classloader is replicated for all regions in the HRegionServer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7205&quot;&gt;&lt;del&gt;HBASE-7205&lt;/del&gt;&lt;/a&gt; Coprocessor classloader is replicated for all regions in the HRegionServer (Ted Yu and Adrian Muraru) (Revision 1420480)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorClassLoader.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13529564" author="lhofhansl" created="Wed, 12 Dec 2012 01:52:21 +0000"  >&lt;p&gt;Something like that. If it is as simple as that, let&apos;s just add a quick test for test.&lt;br/&gt;
(I&apos;ve seen subtle bugs over the years where references were held where folks did not expect that to happen)&lt;/p&gt;</comment>
                            <comment id="13529578" author="yuzhihong@gmail.com" created="Wed, 12 Dec 2012 02:29:42 +0000"  >&lt;p&gt;Will attach a patch for review later.&lt;br/&gt;
System.gc() call would be followed by a loop until collection count changes:&lt;br/&gt;
&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/lang/management/GarbageCollectorMXBean.html#getCollectionCount%28%29&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/7/docs/api/java/lang/management/GarbageCollectorMXBean.html#getCollectionCount%28%29&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Need to verify whether jdk 6 supports the above API.&lt;/p&gt;</comment>
                            <comment id="13529614" author="yuzhihong@gmail.com" created="Wed, 12 Dec 2012 04:13:51 +0000"  >&lt;p&gt;Did some experiment. First, as &lt;a href=&quot;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/management/ManagementFactory.html#getGarbageCollectorMXBeans%28%29&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/management/ManagementFactory.html#getGarbageCollectorMXBeans%28%29&lt;/a&gt; says, we may need to deal with several GarbageCollectorMXBean&apos;s.&lt;/p&gt;

&lt;p&gt;Here is what I came up with:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    admin.disableTable(htd.getName());
    admin.deleteTable(htd.getName());
    List&amp;lt;GarbageCollectorMXBean&amp;gt; mxbeans = ManagementFactory.getGarbageCollectorMXBeans();
    LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;There are &quot;&lt;/span&gt; + mxbeans.size() + &lt;span class=&quot;code-quote&quot;&gt;&quot; MXBeans&quot;&lt;/span&gt;);
    GarbageCollectorMXBean mxbean = mxbeans.get(0);
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; initialCollectionCount = mxbean.getCollectionCount();
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; startTime = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.gc();
    &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (mxbean.getCollectionCount() == initialCollectionCount &amp;amp;&amp;amp;
        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis() - startTime &amp;lt; 30000) {
      &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.sleep(10);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Path p : CoprocessorHost.classLoadersCache.keySet()) {
      &lt;span class=&quot;code-object&quot;&gt;ClassLoader&lt;/span&gt; cl = CoprocessorHost.classLoadersCache.get(p);
      assertTrue(&lt;span class=&quot;code-quote&quot;&gt;&quot; &quot;&lt;/span&gt; + cl, cl == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After waiting for 30 seconds, the assertion fails:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
testClassLoadingFromHDFS(org.apache.hadoop.hbase.coprocessor.TestClassLoading)  Time elapsed: 39.79 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!
java.lang.AssertionError:  org.apache.hadoop.hbase.coprocessor.CoprocessorClassLoader@24e7cb66
  at org.junit.Assert.fail(Assert.java:93)
  at org.junit.Assert.assertTrue(Assert.java:43)
  at org.apache.hadoop.hbase.coprocessor.TestClassLoading.testClassLoadingFromHDFS(TestClassLoading.java:339)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I don&apos;t know how long the test should wait for GC to kick in.&lt;/p&gt;</comment>
                            <comment id="13529624" author="lhofhansl" created="Wed, 12 Dec 2012 05:18:00 +0000"  >&lt;p&gt;Hmmm. System.gc() is synchronous, no?&lt;br/&gt;
The javadoc says this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     * When control returns from the method call, the Java Virtual
     * Machine has made a best effort to reclaim space from all discarded
     * objects.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If that would not be so my above mentioned test would not work.&lt;br/&gt;
I suspect then that the classloaders in fact are not collected...?&lt;/p&gt;</comment>
                            <comment id="13529630" author="yuzhihong@gmail.com" created="Wed, 12 Dec 2012 05:36:53 +0000"  >&lt;p&gt;WeakReference wraps the ClassLoader&apos;s in classLoadersCache. In pom.xml, we specify the 1.9GB heap for tests:&lt;br/&gt;
-Xmx1900m&lt;/p&gt;

&lt;p&gt;I think this heap doesn&apos;t incur pressure on GC in such a way that WeakReferences are collected. We need to lower -Xmx parameter to a value which allows the test to proceed.&lt;/p&gt;

&lt;p&gt;My feeling is that this route needs some more work.&lt;/p&gt;</comment>
                            <comment id="13529664" author="stack" created="Wed, 12 Dec 2012 06:25:40 +0000"  >&lt;p&gt;If gc logging enabled, does System.gc even show?  Trying to test weak references is going to be tough.  Would suggest it something that could go over in integration test where you could be run the heap up to its limit and mess around at its outer bounds.&lt;/p&gt;</comment>
                            <comment id="13529687" author="lhofhansl" created="Wed, 12 Dec 2012 07:04:57 +0000"  >&lt;p&gt;As far as I know objects are always collected during a full GC if they cannot be reached by a strong reference. I.e. when only reachable by weak reference(s) they should be collected.&lt;/p&gt;

&lt;p&gt;We should not have to change the heap settings for this. I still thinks that indicates that there is still a strong reference to these classloaders somewhere.&lt;/p&gt;</comment>
                            <comment id="13529882" author="hudson" created="Wed, 12 Dec 2012 12:12:56 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #293 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/293/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/293/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7205&quot; title=&quot;Coprocessor classloader is replicated for all regions in the HRegionServer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7205&quot;&gt;&lt;del&gt;HBASE-7205&lt;/del&gt;&lt;/a&gt; Coprocessor classloader is replicated for all regions in the HRegionServer (Ted Yu and Adrian Muraru) (Revision 1420480)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorClassLoader.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13530088" author="amuraru" created="Wed, 12 Dec 2012 16:41:28 +0000"  >&lt;p&gt;Lars you&apos;re right, apparently there is one thread keeping a strong reference to our custom classloader. The thing is that this seems to be a junit thread, when I&apos;m testing manually with HBase standalone by enabling/disabling a multi-region table I can see these instances GC&apos;ed. &lt;br/&gt;
Not 100% sure but I suspect the junit is doing some sort of class loading accounting - for reporting purposes or so and keeps these references&lt;/p&gt;</comment>
                            <comment id="13530671" author="lhofhansl" created="Thu, 13 Dec 2012 04:37:44 +0000"  >&lt;p&gt;Hmm... If it&apos;s a junit class that might be hard to fix. I&apos;d feel better if there was a test, but if that&apos;s a PITA, we can commit to 0.94 without a test (you guys have to swear it works OK outside of tests &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).&lt;/p&gt;</comment>
                            <comment id="13530672" author="yuzhihong@gmail.com" created="Thu, 13 Dec 2012 04:46:13 +0000"  >&lt;p&gt;Thanks for the green light, Lars.&lt;/p&gt;

&lt;p&gt;Integrated to 0.94 branch.&lt;/p&gt;

&lt;p&gt;Thanks all for the reviews.&lt;/p&gt;</comment>
                            <comment id="13530673" author="lhofhansl" created="Thu, 13 Dec 2012 04:47:34 +0000"  >&lt;p&gt;You didn&apos;t swear that works OK &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13530675" author="yuzhihong@gmail.com" created="Thu, 13 Dec 2012 04:57:44 +0000"  >&lt;p&gt;I swear it works.&lt;/p&gt;</comment>
                            <comment id="13530708" author="hudson" created="Thu, 13 Dec 2012 05:52:35 +0000"  >&lt;p&gt;Integrated in HBase-0.94 #623 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/623/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/623/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7205&quot; title=&quot;Coprocessor classloader is replicated for all regions in the HRegionServer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7205&quot;&gt;&lt;del&gt;HBASE-7205&lt;/del&gt;&lt;/a&gt; Coprocessor classloader is replicated for all regions in the HRegionServer (Ted Yu and Adrian Muraru) (Revision 1421076)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorClassLoader.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13530711" author="hadoopqa" created="Thu, 13 Dec 2012 05:55:28 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12560475/7205-0.94.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12560475/7205-0.94.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3514//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3514//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13530904" author="amuraru" created="Thu, 13 Dec 2012 11:15:25 +0000"  >&lt;p&gt;I&apos;m 100% sure it works - but I wouldn&apos;t swear ever for a piece of software &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/biggrin.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13531366" author="apurtell" created="Thu, 13 Dec 2012 19:30:55 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=amuraru&quot; class=&quot;user-hover&quot; rel=&quot;amuraru&quot;&gt;Adrian Muraru&lt;/a&gt; for pitching in on this. Thanks Ted for the reviews.&lt;/p&gt;</comment>
                            <comment id="13537909" author="hudson" created="Fri, 21 Dec 2012 14:17:09 +0000"  >&lt;p&gt;Integrated in HBase-0.94-security #87 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security/87/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security/87/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7205&quot; title=&quot;Coprocessor classloader is replicated for all regions in the HRegionServer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7205&quot;&gt;&lt;del&gt;HBASE-7205&lt;/del&gt;&lt;/a&gt; Coprocessor classloader is replicated for all regions in the HRegionServer (Ted Yu and Adrian Muraru) (Revision 1421076)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorClassLoader.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13544395" author="hudson" created="Sat, 5 Jan 2013 00:42:21 +0000"  >&lt;p&gt;Integrated in HBase-0.94-security-on-Hadoop-23 #10 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security-on-Hadoop-23/10/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security-on-Hadoop-23/10/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7205&quot; title=&quot;Coprocessor classloader is replicated for all regions in the HRegionServer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7205&quot;&gt;&lt;del&gt;HBASE-7205&lt;/del&gt;&lt;/a&gt; Coprocessor classloader is replicated for all regions in the HRegionServer (Ted Yu and Adrian Muraru) (Revision 1421076)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorClassLoader.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12623418">HBASE-7326</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12767516">HBASE-12856</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12560475" name="7205-0.94.txt" size="13637" author="yuzhihong@gmail.com" created="Tue, 11 Dec 2012 23:31:25 +0000"/>
                            <attachment id="12556012" name="7205-v1.txt" size="7748" author="zhihyu@ebaysf.com" created="Tue, 4 Dec 2012 23:40:25 +0000"/>
                            <attachment id="12560223" name="7205-v10.txt" size="13779" author="yuzhihong@gmail.com" created="Mon, 10 Dec 2012 18:02:00 +0000"/>
                            <attachment id="12556487" name="7205-v3.txt" size="7306" author="yuzhihong@gmail.com" created="Thu, 6 Dec 2012 19:45:00 +0000"/>
                            <attachment id="12559647" name="7205-v4.txt" size="10058" author="yuzhihong@gmail.com" created="Thu, 6 Dec 2012 22:10:01 +0000"/>
                            <attachment id="12560010" name="7205-v5.txt" size="13463" author="amuraru" created="Sat, 8 Dec 2012 02:51:58 +0000"/>
                            <attachment id="12560014" name="7205-v6.txt" size="11775" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 03:32:29 +0000"/>
                            <attachment id="12560020" name="7205-v7.txt" size="14104" author="amuraru" created="Sat, 8 Dec 2012 05:26:32 +0000"/>
                            <attachment id="12560035" name="7205-v8.txt" size="13266" author="yuzhihong@gmail.com" created="Sat, 8 Dec 2012 15:45:07 +0000"/>
                            <attachment id="12560118" name="7205-v9.txt" size="14632" author="amuraru" created="Sun, 9 Dec 2012 20:10:57 +0000"/>
                            <attachment id="12556025" name="HBASE-7205_v2.patch" size="7315" author="amuraru" created="Wed, 5 Dec 2012 00:33:13 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 22 Nov 2012 00:21:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>259446</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 49 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0lp7j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>124734</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>