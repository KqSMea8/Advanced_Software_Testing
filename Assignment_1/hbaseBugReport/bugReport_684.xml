<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:46:33 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-684/HBASE-684.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-684] unnecessary iteration in HMemcache.internalGet? got much better reading performance after break it.</title>
                <link>https://issues.apache.org/jira/browse/HBASE-684</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;hi stack:&lt;br/&gt;
first thanks much to your authors, it&apos;s a great system.&lt;/p&gt;

&lt;p&gt;not sure, but i think the tail map iteration should break after &apos;itKey.matchesRowCol(key)&apos; return false. in HStore.HMemcache.internalGet. because the tail map is SortedMap too, and keys matches the input &apos;key&apos; should in the beginnging of the map.&lt;/p&gt;

&lt;p&gt;i created a patched version of the class for testing , found about 5x read performance improving in my testcase.  &lt;br/&gt;
comments here:&lt;br/&gt;
1. i reach to reviewing HStore.java, because bothered by terrible reading performance using 0.1.2 release: ONE record per second. testing env: 4Gmem, 2*duo xeon 2G, 100k record in test table, 100k bytes per record column, 1 column only.&lt;br/&gt;
2. i have seen PerformanceEvaluation pages in wiki, 1k bytes record reading performence also acceptable in my testing env, but as the record size increasing, reading performance go down so quickly.&lt;br/&gt;
3. when profiling hregionserver process, i found the first bottleneck is data io in MapFile, this is the hbase.io.index.interval issue(&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-680&quot; title=&quot;config parameter hbase.io.index.interval  should be hbase.index.interval, accroding to HBaseMapFile.HbaseWriter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-680&quot;&gt;&lt;del&gt;HBASE-680&lt;/del&gt;&lt;/a&gt;) i posted yesterday.&lt;br/&gt;
4. after set hbase.io.index.interval to 1, reading performance improved much, but not enough(i thinks it should be Nx hadoop reading performance, where N&amp;lt;10), this time profiling show HMemcache.internalGet used much cpu time, and each row get will calling about 200 times HStoreKey#matchesRowCol, in my test env.&lt;br/&gt;
5. applying my patched version, i got mucher better reading performance.  test case desc: first inserting  100k records to a table, then random read  10000 from it.&lt;br/&gt;
6. this change tak no effect if no cache there, like regionserver refresh started, so my test case insert rows first, but this is a normal situation that reading and writing in same time.&lt;/p&gt;

&lt;p&gt;here is my simple patch:&lt;br/&gt;
Index: src/java/org/apache/hadoop/hbase/HStore.java&lt;br/&gt;
===================================================================&lt;br/&gt;
&amp;#8212; src/java/org/apache/hadoop/hbase/HStore.java	Fri Jun 13 00:15:59 CST 2008&lt;br/&gt;
+++ src/java/org/apache/hadoop/hbase/HStore.java	Fri Jun 13 00:15:59 CST 2008&lt;br/&gt;
@@ -478,11 +478,14 @@&lt;br/&gt;
           if (!HLogEdit.isDeleted(es.getValue())) &lt;/p&gt;
{ 
             result.add(tailMap.get(itKey));
           }
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;}&lt;/li&gt;
	&lt;li&gt;if (numVersions &amp;gt; 0 &amp;amp;&amp;amp; result.size() &amp;gt;= numVersions) 
{
-          break;
-        }
&lt;p&gt;+            if (numVersions &amp;gt; 0 &amp;amp;&amp;amp; result.size() &amp;gt;= numVersions) &lt;/p&gt;
{
+              break;
+            }
&lt;p&gt;+        }else&lt;br/&gt;
+          &lt;/p&gt;
{ //by L.N., map is sorted, so we can&apos;t find match any more.
+            break;
-      }
&lt;p&gt;+          }&lt;br/&gt;
+      }&lt;br/&gt;
       return result;&lt;br/&gt;
     }&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;after all, i&apos;d suggest a new hbase class for memory cache holder instead of synchronized sorted map, this can lead to much better performance, basicly avoid iteration(if my thoughts above is wrong), and remove many sync/lock unnecessary. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12398212">HBASE-684</key>
            <summary>unnecessary iteration in HMemcache.internalGet? got much better reading performance after break it.</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ln@webcate.net">Luo Ning</reporter>
                        <labels>
                    </labels>
                <created>Fri, 13 Jun 2008 06:44:13 +0000</created>
                <updated>Fri, 22 Aug 2008 21:14:46 +0000</updated>
                            <resolved>Mon, 16 Jun 2008 19:22:29 +0000</resolved>
                                    <version>0.1.2</version>
                                    <fixVersion>0.1.3</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12604914" author="stack" created="Fri, 13 Jun 2008 15:26:35 +0000"  >&lt;p&gt;Thanks for doing the great research, LN.  Patch makes sense to me.&lt;/p&gt;

&lt;p&gt;Yes, we should find an alternative to synchronized sorted map for memcache.  I made an issue to cover the search: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-685&quot; title=&quot;[Performance] Alternative to synchronized SortedMap&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-685&quot;&gt;&lt;del&gt;HBASE-685&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;


</comment>
                            <comment id="12604958" author="stack" created="Fri, 13 Jun 2008 19:47:27 +0000"  >&lt;p&gt;Ran a test and saw about 20% improvement in PE random read (345/s vs. 269/s).  Here&apos;s the patch I tested with.&lt;/p&gt;</comment>
                            <comment id="12604959" author="stack" created="Fri, 13 Jun 2008 19:55:02 +0000"  >&lt;p&gt;Committed to trunk.  Leaving open for now.  Should commit to branch.  Assigning 0.1.4 for moment.&lt;/p&gt;</comment>
                            <comment id="12605386" author="stack" created="Mon, 16 Jun 2008 19:22:29 +0000"  >&lt;p&gt;Committed to branch to include in 0.1.3 release.&lt;/p&gt;

&lt;p&gt;Thanks for the patch LN.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12383990" name="684.patch" size="695" author="stack" created="Fri, 13 Jun 2008 19:47:27 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 13 Jun 2008 15:26:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31813</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 27 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0h8tb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98690</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>