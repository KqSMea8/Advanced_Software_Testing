<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:03:48 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2670/HBASE-2670.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2670] MemStore should retain multiple KVs with the same timestamp when memstoreTS differs</title>
                <link>https://issues.apache.org/jira/browse/HBASE-2670</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;There appears to be a bug in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2248&quot; title=&quot;Provide new non-copy mechanism to assure atomic reads in get and scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2248&quot;&gt;&lt;del&gt;HBASE-2248&lt;/del&gt;&lt;/a&gt; as committed to trunk. See following failing test:&lt;br/&gt;
&lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/HBase-TRUNK/1296/testReport/junit/org.apache.hadoop.hbase/TestAcidGuarantees/testAtomicity/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/HBase-TRUNK/1296/testReport/junit/org.apache.hadoop.hbase/TestAcidGuarantees/testAtomicity/&lt;/a&gt;&lt;br/&gt;
Think this is the same bug we saw early on in 2248 in the 0.20 branch, looks like the fix didn&apos;t make it over.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12466239">HBASE-2670</key>
            <summary>MemStore should retain multiple KVs with the same timestamp when memstoreTS differs</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tlipcon">Todd Lipcon</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Sat, 5 Jun 2010 04:43:58 +0000</created>
                <updated>Fri, 20 Nov 2015 12:42:58 +0000</updated>
                            <resolved>Tue, 15 Jun 2010 22:38:52 +0000</resolved>
                                    <version>0.20.5</version>
                    <version>0.90.0</version>
                                    <fixVersion>0.90.0</fixVersion>
                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12876526" author="tlipcon" created="Tue, 8 Jun 2010 03:05:05 +0000"  >&lt;p&gt;The issue is that the memstore timestamps are lost once we flush the memstore to an HFile, and we immediately change over open scanners to scan from the HFile in updateReaders()&lt;/p&gt;

&lt;p&gt;I think the fix is one of the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;in updateReaders, scan ahead the memstore reader until the next row, and cache those KVs internally. Then when we hit the end of the cache, do the actual reseek in the HFile at the begining of the next row.&lt;/li&gt;
	&lt;li&gt;in updateReaders, simply mark a flag that we need to update as soon as we hit the next row. Then do the reseek lazily in next()&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12876531" author="tlipcon" created="Tue, 8 Jun 2010 03:30:47 +0000"  >&lt;p&gt;Actually, I misunderstood this a little bit. The above describes the issue when using intra-row scanning (see &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2673&quot; title=&quot;Investigate consistency of intra-row scans&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2673&quot;&gt;&lt;del&gt;HBASE-2673&lt;/del&gt;&lt;/a&gt;). Without intra-row scanning, since updateReaders is synchronized, it should only be called when the StoreScanner is between rows.&lt;/p&gt;

&lt;p&gt;So I think the issue may be how updateReaders itself works. It uses peak() on the heap to find the next row it&apos;s going to, and then seeks to that one. updateReaders, though, is called by a different thread with a different readpoint set. So that seek pulls in values for the next row that are different from what will be read.&lt;/p&gt;

&lt;p&gt;I&apos;ll try to make a patch for this tomorrow.&lt;/p&gt;</comment>
                            <comment id="12876532" author="ryanobjc" created="Tue, 8 Jun 2010 03:33:18 +0000"  >&lt;p&gt;I&apos;m committing a fix to StoreScanner that will do essentially &quot;#2&quot; in your option list.  &lt;/p&gt;</comment>
                            <comment id="12876533" author="tlipcon" created="Tue, 8 Jun 2010 03:35:22 +0000"  >&lt;p&gt;How about you post a patch for review instead of just committing? This stuff is bug prone, we should do code reviews.&lt;/p&gt;</comment>
                            <comment id="12876789" author="ryanobjc" created="Tue, 8 Jun 2010 20:17:44 +0000"  >&lt;p&gt;#1 is the old memstore scanner - it would get an &apos;entire row&apos; at a time and then chomp on it&apos;s internal array.  This made memstore scans really slow.  The whole index hbase saga.&lt;/p&gt;

&lt;p&gt;#2 workish, and is what is implemented in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2616&quot; title=&quot;TestHRegion.testWritesWhileGetting flaky on trunk&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2616&quot;&gt;&lt;del&gt;HBASE-2616&lt;/del&gt;&lt;/a&gt; (which is now in branch and trunk).&lt;/p&gt;

&lt;p&gt;The problem with #2, and you will see it in HRegionScanner is we no longer update the read point &quot;between rows&quot;.  Since by the time we figure out we are on the next row, we&apos;ve already peek()ed the value off the scanner, we cant switch to a different read point, or else you will get the first KeyValue from one read point, and the rest from another (sounds familiar?)&lt;/p&gt;

&lt;p&gt;As for why did I commit and not await review, this is because the hudson instance at hudson.hbase.org is one of the few machines that trips against this failure frequently.  I haven&apos;t been able to repro on my dev environment, ever.    And now we have 11 successful branch builds of 0.20, thus indicating that our bug is now fixed.&lt;/p&gt;</comment>
                            <comment id="12876795" author="tlipcon" created="Tue, 8 Jun 2010 20:35:32 +0000"  >&lt;p&gt;This isn&apos;t fixed in trunk, see: &lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/HBase-TRUNK/1308/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/HBase-TRUNK/1308/&lt;/a&gt;&lt;br/&gt;
Specifically:&lt;br/&gt;
&lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/HBase-TRUNK/1308/testReport/org.apache.hadoop.hbase/TestAcidGuarantees/testAtomicity/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/HBase-TRUNK/1308/testReport/org.apache.hadoop.hbase/TestAcidGuarantees/testAtomicity/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12876820" author="tlipcon" created="Tue, 8 Jun 2010 21:45:21 +0000"  >&lt;p&gt;Still not fixed after your recent patch, plus it broke two other tests in trunk. Specifically, getScanner() on the client now throws IOExceptions eagerly instead of on the first .next() call, so TestFSErrorsExposed failed. It&apos;s an easy test fix, but it seems strange to me that getScanner() could throw IOE before you even start to iterate on it?&lt;/p&gt;</comment>
                            <comment id="12876897" author="tlipcon" created="Wed, 9 Jun 2010 00:19:02 +0000"  >&lt;p&gt;I think I&apos;m understanding the issue here. Here&apos;s my theory:&lt;/p&gt;

&lt;p&gt;When we reseek, we reseek to the keyvalue that was previously the &quot;next&quot; in the scanner by way of peeking before reseeking. However, the peek takes into account the old read point, so we get a situation where our peek sees the old version of a column that has multiple versions, and we seek there. Then when we seek forward from there, we see the rows with newer timestamps because we&apos;re no longer restricted by the old read point.&lt;/p&gt;

&lt;p&gt;I&apos;m working on a test case and patch.&lt;/p&gt;</comment>
                            <comment id="12876899" author="ryanobjc" created="Wed, 9 Jun 2010 00:28:45 +0000"  >&lt;p&gt;In This case the fix should be to reseek to firstonrow of the peeked row. We&lt;br/&gt;
are guarenteed to be between rows so this works.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2670?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=12876897#action_12876897&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2670?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=12876897#action_12876897&lt;/a&gt;]&lt;br/&gt;
in the scanner by way of peeking before reseeking. However, the peek takes&lt;br/&gt;
into account the old read point, so we get a situation where our peek sees&lt;br/&gt;
the old version of a column that has multiple versions, and we seek there.&lt;br/&gt;
Then when we seek forward from there, we see the rows with newer timestamps&lt;br/&gt;
because we&apos;re no longer restricted by the old read point.&lt;br/&gt;
following failing test:&lt;br/&gt;
&lt;a href=&quot;http://hudson.zones.apache.org/hudson/job/HBase-TRUNK/1296/testReport/junit/org.apache.hadoop.hbase/TestAcidGuarantees/testAtomicity/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hudson.zones.apache.org/hudson/job/HBase-TRUNK/1296/testReport/junit/org.apache.hadoop.hbase/TestAcidGuarantees/testAtomicity/&lt;/a&gt;&lt;br/&gt;
looks like the fix didn&apos;t make it over.&lt;/p&gt;</comment>
                            <comment id="12876900" author="tlipcon" created="Wed, 9 Jun 2010 00:30:15 +0000"  >&lt;p&gt;We&apos;re not guaranteed to be between rows in trunk due to intra-row scanning, so we need a special flag to tell us when we should be between rows.&lt;/p&gt;

&lt;p&gt;I&apos;m right now running TestAcidGuarantees against 0.20 to see if this exists in 0.20.5 rcs.&lt;/p&gt;</comment>
                            <comment id="12876905" author="tlipcon" created="Wed, 9 Jun 2010 00:41:31 +0000"  >&lt;p&gt;Yep, this is in branch too. Anyone mind if I commit the TestAcidGuarantees case to the 20 branch?&lt;br/&gt;
Going to continue to work on a fix and a more targeted test case that fails even on laptops.&lt;/p&gt;</comment>
                            <comment id="12876924" author="ryanobjc" created="Wed, 9 Jun 2010 01:52:45 +0000"  >&lt;p&gt;On the subject of getScanner() failing, that is how it used to work&lt;br/&gt;
before some of the 2248 related fixes went it.  I don&apos;t think we want&lt;br/&gt;
to work too hard to move the IOExceptions around, you are going to&lt;br/&gt;
have to be able to handle the exception at any time.&lt;/p&gt;



</comment>
                            <comment id="12877594" author="tlipcon" created="Thu, 10 Jun 2010 22:07:47 +0000"  >&lt;p&gt;It turns out that the majority of this issue was that the comparator used by MemStore didn&apos;t take into account the &quot;memstore logical timestamp&quot; (memstoreTS). Thus, a new writer could overwrite older entries if it did a write in the same millisecond. A concurrent reader would then see a partial row because the new entries would be invisible, thus &quot;revealing&quot; cells with a lower &quot;real&quot; TS.&lt;/p&gt;

&lt;p&gt;This patch adds two tests to TestMemStore that check for the correct behavior.&lt;/p&gt;

&lt;p&gt;I believe there is still a separate issue with multi-row scans and updateReaders(), but I&apos;ll open a separate JIRA with separate tests for that one.&lt;/p&gt;</comment>
                            <comment id="12877688" author="tlipcon" created="Fri, 11 Jun 2010 01:40:35 +0000"  >&lt;p&gt;This patch causes issues with the incrementColumnValues() tests, which rely on updating a KV in-place in the memstore.&lt;/p&gt;

&lt;p&gt;Not sure what we should do here... on one hand it would be nice for incrementColumnValue to have proper semantics, on the other hand, we don&apos;t want to insert a new KV for every increment. Ryan, any thoughts?&lt;/p&gt;</comment>
                            <comment id="12877979" author="ryanobjc" created="Fri, 11 Jun 2010 21:32:48 +0000"  >&lt;p&gt;ICVs dont take part in this new concurrency system.  They are not actually being &apos;updated in place&apos; but KeyValues are being &apos;overwritten&apos;.  Given there is only 1 row/column involved in an ICV, there is no multi-KeyValue coherency to worry about here.   ICVs use memstoreTS==0 even (and are always included in every scan).&lt;/p&gt;

&lt;p&gt;In the future I think it might be possible to insert a new KV then delete the old one out of memstore... that shouldn&apos;t cause any issues with scanners, but we can do that later.&lt;/p&gt;</comment>
                            <comment id="12877981" author="tlipcon" created="Fri, 11 Jun 2010 21:35:35 +0000"  >&lt;p&gt;K, makes sense, I&apos;ll update the patch to ensure that the ICVs maintain equal memstoreTS (it seems in the current system they&apos;re getting double-inserted).&lt;/p&gt;</comment>
                            <comment id="12877983" author="ryanobjc" created="Fri, 11 Jun 2010 21:40:03 +0000"  >&lt;p&gt;as per our discussion there are several unresolved issues with this patch:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;apparently ICVs (how? why? where?)&lt;/li&gt;
	&lt;li&gt;extra KeyValues in the flush that would have previously been combined&lt;/li&gt;
	&lt;li&gt;lets not add new client dependencies&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12877984" author="tlipcon" created="Fri, 11 Jun 2010 21:42:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;extra KeyValues in the flush that would have previously been combined&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought we determined this was fine, since we already have potential duplicate keyvalue issues between separate HFiles, and this isn&apos;t any better/worse?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;lets not add new client dependencies&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think this patch changes anything client side.&lt;/p&gt;

&lt;p&gt;Will work on the ICV thing this afternoon.&lt;/p&gt;</comment>
                            <comment id="12877989" author="ryanobjc" created="Fri, 11 Jun 2010 21:55:20 +0000"  >&lt;p&gt;unfortunately &apos;KeyValue&apos; is part of the the Client API.&lt;/p&gt;



</comment>
                            <comment id="12878109" author="tlipcon" created="Fri, 11 Jun 2010 22:20:44 +0000"  >&lt;p&gt;ah, crap, I forgot that. Can we discuss the client side dependencies issue over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2714&quot; title=&quot;Remove Guava as a client dependency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2714&quot;&gt;&lt;del&gt;HBASE-2714&lt;/del&gt;&lt;/a&gt;? (this isn&apos;t a regression, we already use guava in a couple other places in the client).&lt;/p&gt;</comment>
                            <comment id="12878209" author="stack" created="Sat, 12 Jun 2010 04:33:15 +0000"  >&lt;p&gt;.bq Can we discuss the client side dependencies issue over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2714&quot; title=&quot;Remove Guava as a client dependency&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2714&quot;&gt;&lt;del&gt;HBASE-2714&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;Yes&lt;/p&gt;</comment>
                            <comment id="12878796" author="tlipcon" created="Mon, 14 Jun 2010 23:28:54 +0000"  >&lt;p&gt;Changing name of this JIRA to reflect the specific issue I&apos;m solving with the patch. Will open a second JIRA for the other atomicity issue regarding reseeks.&lt;/p&gt;</comment>
                            <comment id="12878798" author="hbasereviewboard" created="Mon, 14 Jun 2010 23:35:11 +0000"  >&lt;p&gt;Message from: &quot;Todd Lipcon&quot; &amp;lt;todd@cloudera.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/180/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for hbase and Ryan Rawson.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This changes the memstore comparator, improves the atomicity tests, and also fixes ICV to continue to have the right behavior even with the comparator change.&lt;/p&gt;


&lt;p&gt;This addresses bug hbase-2670.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/hbase-2670&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/hbase-2670&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/KeyValue.java 71284cf &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 2a0dcee &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/MultithreadedTestUtil.java 7c062d7 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/TestAcidGuarantees.java 75f3c8b &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/TestMemStore.java 9833d76 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java 0566af7 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/180/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Unit tests.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Todd&lt;/p&gt;

</comment>
                            <comment id="12879139" author="hbasereviewboard" created="Tue, 15 Jun 2010 22:06:51 +0000"  >&lt;p&gt;Message from: stack@duboce.net&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/180/#review229&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/#review229&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;


&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;I some minors in the below and then some questions but these should not get in way of a commit.&lt;/p&gt;


&lt;p&gt;src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/180/#comment1016&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/#comment1016&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Is this going to be correct always?  Cloning, we don&apos;t want the src memstoreTS?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/180/#comment1017&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/#comment1017&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    What we going to do about N versions all of same r/f/q/ts but of different memstoreTS?  We&apos;re not going to suppress them just yet?  We&apos;re going to punt till hbase-1485?  The multiple versions make it out to store files too?&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/TestAcidGuarantees.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/180/#comment1018&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/#comment1018&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Prefix w/ &apos;TODO&apos; to make this work-to-do more findable.&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/TestAcidGuarantees.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/180/#comment1019&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/#comment1019&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Nice&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreScanner.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/180/#comment1020&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/#comment1020&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Go ahead and remove then boss.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;stack&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12879154" author="tlipcon" created="Tue, 15 Jun 2010 22:35:46 +0000"  >&lt;p&gt;New patch addresses comments from stack&apos;s review - it was just clarification of some comments in the code, so I&apos;ll go ahead and commit. Thanks Stack.&lt;/p&gt;</comment>
                            <comment id="12879155" author="hbasereviewboard" created="Tue, 15 Jun 2010 22:36:24 +0000"  >&lt;p&gt;Message from: &quot;Todd Lipcon&quot; &amp;lt;todd@cloudera.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-06-15 15:03:40, stack wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/KeyValue.java, line 558&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/180/diff/1/?file=1345#file1345line558&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/diff/1/?file=1345#file1345line558&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Is this going to be correct always?  Cloning, we don&apos;t want the src memstoreTS?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yea, this clone is necessary so that incrementColumnValue() doesn&apos;t blow up to create a new memstore entry for every increment. We could put it in that code, but I think it&apos;s cleaner to just be part of clone. I think it&apos;s best in clone so that a foo.compareTo(foo.clone()) == 0 as an invariant.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-06-15 15:03:40, stack wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/KeyValue.java, line 1306&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/180/diff/1/?file=1345#file1345line1306&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/diff/1/?file=1345#file1345line1306&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     What we going to do about N versions all of same r/f/q/ts but of different memstoreTS?  We&apos;re not going to suppress them just yet?  We&apos;re going to punt till hbase-1485?  The multiple versions make it out to store files too?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yea, leaving that off since the problem already exists and it&apos;s a bit of a heavy change.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-06-15 15:03:40, stack wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/test/java/org/apache/hadoop/hbase/TestAcidGuarantees.java, line 140&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/180/diff/1/?file=1348#file1348line140&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/diff/1/?file=1348#file1348line140&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Prefix w/ &apos;TODO&apos; to make this work-to-do more findable.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ah, I mean that we don&apos;t need to verify at this point because the writer hasn&apos;t actually written any rows yet! will clarify&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Todd&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/180/#review229&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/#review229&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12879157" author="tlipcon" created="Tue, 15 Jun 2010 22:38:52 +0000"  >&lt;p&gt;Committed to trunk.&lt;/p&gt;</comment>
                            <comment id="12879217" author="hbasereviewboard" created="Wed, 16 Jun 2010 01:11:22 +0000"  >&lt;p&gt;Message from: &quot;Ryan Rawson&quot; &amp;lt;ryanobjc@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/180/#review235&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/#review235&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;


&lt;p&gt;ok looks good.  I&apos;m also prepping a new way to do ICVs in a different issue (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2501&quot; title=&quot;Refactor StoreFile Code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2501&quot;&gt;&lt;del&gt;HBASE-2501&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;


&lt;p&gt;src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/180/#comment1066&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/#comment1066&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    the extra KVs will make it out to hfile, but considering the problem I just don&apos;t see a better solution right now. Perhaps collapsing extra version during the flush, but then the question is &lt;em&gt;which&lt;/em&gt; extra versions?&lt;/p&gt;

&lt;p&gt;    Maybe this will lead us to using an extra timestamp in every KeyValue on disk and in memory, but I hope not.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ryan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12879241" author="hbasereviewboard" created="Wed, 16 Jun 2010 04:18:46 +0000"  >&lt;p&gt;Message from: stack@duboce.net&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-06-15 18:06:09, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/KeyValue.java, line 1306&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/180/diff/1/?file=1345#file1345line1306&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/diff/1/?file=1345#file1345line1306&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     the extra KVs will make it out to hfile, but considering the problem I just don&apos;t see a better solution right now. Perhaps collapsing extra version during the flush, but then the question is &lt;em&gt;which&lt;/em&gt; extra versions?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Maybe this will lead us to using an extra timestamp in every KeyValue on disk and in memory, but I hope not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;.bq ...but then the question is &lt;em&gt;which&lt;/em&gt; extra versions?&lt;/p&gt;

&lt;p&gt;For now, I&apos;d think we&apos;d keep most recently written.&lt;/p&gt;

&lt;p&gt;.bq Maybe this will lead us to using an extra timestamp in every KeyValue on disk and in memory&lt;/p&gt;

&lt;p&gt;Maybe.  When we tease out deletes and how ts&apos;s are meant to work then we&apos;ll learn whether or not they are needed I&apos;d imagine.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;stack&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/180/#review235&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/180/#review235&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="15017397" author="lars_francke" created="Fri, 20 Nov 2015 12:42:58 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12462576">HBASE-2474</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12465487">HBASE-2616</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12526531">HBASE-4570</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12447180" name="hbase-2670.txt" size="21369" author="tlipcon" created="Tue, 15 Jun 2010 22:35:46 +0000"/>
                            <attachment id="12446800" name="hbase-2670.txt" size="7464" author="tlipcon" created="Thu, 10 Jun 2010 22:07:47 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 8 Jun 2010 03:33:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>26415</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hipb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100292</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>