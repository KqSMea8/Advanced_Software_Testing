<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:22:18 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-4821/HBASE-4821.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-4821] A fully automated comprehensive distributed integration test for HBase</title>
                <link>https://issues.apache.org/jira/browse/HBASE-4821</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;To properly verify that a particular version of HBase is good for production deployment we need a better way to do real cluster testing after incremental changes. Running unit tests is good, but we also need to deploy HBase to a cluster, run integration tests, load tests, Thrift server tests, kill some region servers, kill the master, and produce a report. All of this needs to happen in 20-30 minutes with minimal manual intervention. I think this way we can combine agile development with high stability of the codebase. I am envisioning a high-level framework written in a scripting language (e.g. Python) that would abstract external operations such as &quot;deploy to test cluster&quot;, &quot;kill a particular server&quot;, &quot;run load test A&quot;, &quot;run load test B&quot; (we already have a few kinds of load tests implemented in Java, and we could write a Thrift load test in Python). This tool should also produce intermediate output, allowing to catch problems early and restart the test.&lt;/p&gt;

&lt;p&gt;No implementation has yet been done. Any ideas or suggestions are welcome.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12532006">HBASE-4821</key>
            <summary>A fully automated comprehensive distributed integration test for HBase</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="mikhail">Mikhail Bautin</assignee>
                                    <reporter username="mikhail">Mikhail Bautin</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Nov 2011 22:31:43 +0000</created>
                <updated>Tue, 19 Jun 2012 18:55:08 +0000</updated>
                                                                                <due></due>
                            <votes>1</votes>
                                    <watches>16</watches>
                                                                <comments>
                            <comment id="13153223" author="rvs" created="Fri, 18 Nov 2011 23:23:55 +0000"  >&lt;p&gt;Bigtop (&lt;a href=&quot;http://incubator.apache.org/projects/bigtop.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://incubator.apache.org/projects/bigtop.html&lt;/a&gt;) aims at providing a platform for the creations of exactly the kind of tests you&apos;re talking about &lt;b&gt;across&lt;/b&gt; all the projects of a Hadoop stack. Granted, we&apos;re a young project and our test management framework is nowhere near the scope and quality of something like TestNG, but I think it will be helpful to invest in improving it. To give you a quick idea of the baseline architecture, here&apos;s what Bigtop testing framework assumes:&lt;br/&gt;
   1. all tests are implemented as code running on top of JVM. We don&apos;t care what language it is (Java, Groovy, Clojure, etc) as long as at the end of the day there&apos;s a bunch of class files generated.&lt;br/&gt;
   2. all tests are packaged/versioned as Maven artifacts&lt;br/&gt;
   3. all test data is packaged/versioned as Maven artifacts&lt;br/&gt;
   4. the entry point into test execution is via Junit/TestNG-style&lt;br/&gt;
   5. tests NEVER concern themselves with deployment (we&apos;ve got Puppet for that)&lt;br/&gt;
   6. tests NEVER concern themselves with configuration (we&apos;ve got Puppet for that)&lt;/p&gt;

&lt;p&gt;If you think Bigtop can serve as a reasonable platform for what you&apos;re trying to accomplish, lets continue this discussion over at bigtop-dev@incubator (and Bigtop JIRAs).&lt;/p&gt;</comment>
                            <comment id="13153237" author="stack" created="Fri, 18 Nov 2011 23:43:01 +0000"  >&lt;p&gt;+1 on at least trying bigtop till we figure why it just won&apos;t work for us&lt;/p&gt;

&lt;p&gt;Mikhail, Accumulo, the other bigtable clone, has an integration suite that is made of python and c hackings.  You can check it out here: &lt;a href=&quot;http://svn.apache.org/viewvc/incubator/accumulo/trunk/test/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc/incubator/accumulo/trunk/test/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;d like a single integration suite/framework that could be run on amz, locally, on emc&apos;s 1k cluster that they are talking of donating to apache, etc.&lt;/p&gt;

&lt;p&gt;I&apos;d like to help w/ t his project.&lt;/p&gt;</comment>
                            <comment id="13153256" author="cos" created="Sat, 19 Nov 2011 00:12:04 +0000"  >&lt;p&gt;+1 on BigTop approach: it has been proven once and again to be a consistent and repeatable environment for stacks&apos; (no pun intended &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; integration testing. It has well thought separation of concerns in place (as has been pointed by Roman).&lt;/p&gt;

&lt;p&gt;Besides, I am not sure I am buying into obsession with Python (or Ruby, etc.) when it comes to work with software written in JVM languages: why one needs to block himself an access to all nice things the platform provides. If a scripting language is desirable - and I can totally buy that - be Groovy with your Java apps &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13153319" author="mikhail" created="Sat, 19 Nov 2011 01:39:22 +0000"  >&lt;p&gt;Thanks everyone for your comments. I will read up on BigTop and Puppet. I am also fine with using a JVM-based language for load tests themselves, as long as there is a way to do something like &quot;kill -9&quot;, which we can&apos;t really do in our unit tests. We could also try to reuse/modify the MiniHBaseCluster framework to talk to a real HBase cluster and script various distributed test scenarios in pure Java.&lt;/p&gt;

&lt;p&gt;However, I want to emphasize one thing. Once configured, this HBase integration test tool should be extremely easy to use, as simple as: hbase_integration_test.sh &amp;lt;hbase_source_dir&amp;gt;. We might have to write some amount of nontrivial &quot;glue&quot; script code (e.g. in bash) to make that happen.&lt;/p&gt;</comment>
                            <comment id="13153385" author="stack" created="Sat, 19 Nov 2011 04:51:54 +0000"  >&lt;p&gt;+1 on &apos;extremely easy to use&apos;&lt;/p&gt;</comment>
                            <comment id="13245528" author="kturner" created="Tue, 3 Apr 2012 17:37:59 +0000"  >&lt;p&gt;I am an Accumulo developer, there is some cruft in our test dir.  The two most successful cluster test we have are continuous ingest and random walk.  We have found lots of bugs w/ these test.  I wrote a Gora version of continuous ingest that should run against HBASE.  The readme on github has a nice description.  &lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;https://github.com/keith-turner/goraci/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/keith-turner/goraci/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The accumulo version of continuous ingest can be found here.&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://svn.apache.org/repos/asf/accumulo/tags/1.4.0/test/system/continuous/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/accumulo/tags/1.4.0/test/system/continuous/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This dir contains an old set of open office slides that also give an overview of continuous ingest.  At the end of the slides is the beginning of the idea of random walk test.  I am not sure if we have a nice description of random walk anywhere.  It is a fairly simple test framework.  You write test nodes in Java and link the nodes together in a graph using XML.  You start a test clients each node in a cluster.  The test client just does a random walk of the test graph.  We have found a ton of bugs in 1.3 and 1.4 using random walk.  &lt;/p&gt;

&lt;p&gt;Actually the Accumulo features page may be the only place we give an overview of randomwalk.  I noticed that our random walk readme only tells you how to run it, not what it is.  Below is a link to the random walk test, but like I said its not very informative.&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://svn.apache.org/repos/asf/accumulo/tags/1.4.0/test/system/randomwalk/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/accumulo/tags/1.4.0/test/system/randomwalk/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The actual Java code at the link below.  The framework and test nodes code is all here.&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://svn.apache.org/repos/asf/accumulo/tags/1.4.0/src/server/src/main/java/org/apache/accumulo/server/test/randomwalk/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/accumulo/tags/1.4.0/src/server/src/main/java/org/apache/accumulo/server/test/randomwalk/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The short description of randomwalk I mentioned is here.&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;http://accumulo.apache.org/notable_features.html#testing&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://accumulo.apache.org/notable_features.html#testing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If anyone is interested in generalizing random walk so that HBase could use it to, let me know.&lt;/p&gt;

&lt;p&gt;One last thing.  We tested Accumulo for over a month on a 10 node cluster using Continuous ingest, Random Walk, and the Agitator.  Below are some of the bugs we found during that time period.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/IssueNavigator.jspa?reset=true&amp;amp;jqlQuery=labels+%3D+14_qa_bug&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Bugs found in 1.4 testing&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13245536" author="stack" created="Tue, 3 Apr 2012 17:49:12 +0000"  >&lt;p&gt;@Keith Welcome.  Thanks for the nice fat comment.  I&apos;m not sure I want to run your randomwalk test if its going to generate that many bugs in hbase (smile).  Let us take a looksee at the continuous ingest....  Good on you Keith.&lt;/p&gt;</comment>
                            <comment id="13245557" author="kturner" created="Tue, 3 Apr 2012 18:16:26 +0000"  >&lt;p&gt;Eric Newton has been experimenting with running goraci against HBase.  One issue he ran into was that gora-hbase uses auto flush on every HTable connection.  This really slowed down ingest.  He modified the gora code locally so it would not do this. Eric posted a question on the gora user list asking why it behaved this way.  The Gora API has a flush call.&lt;/p&gt;</comment>
                            <comment id="13245705" author="kturner" created="Tue, 3 Apr 2012 20:38:30 +0000"  >&lt;p&gt;I noticed an early comment about Python code in the Accumulo test dir.  This is code in test/auto and we call these functional test.  This code is probably similar to some HBase unit test.  It supports test that run against a live instance of Accumulo.  The test framework starts an instance of Accumulo, runs a python or JAva test against that instance, and then shuts the instance down.  Running all of the functional test takes 1 to 2 hours.&lt;/p&gt;

&lt;p&gt;This test framework was written before random walk and it ensures basic functionality works.  For example theres a test to verify that adding split points to a table continues to work.  Since we have implemented random walk, I have found myself writing a lot more random walk test and less functional test. The reason for this is that the functional test usually test the feature when the system is one state, where as random walk test the same feature with the system in many different states.  For example a random walk test that adds splits points to a table will try to do that when the table and system are in many different states.  It may try to add the split when a tablet/region is migrating, currently splitting, minor compacting, major compacting, offline, etc.   So the likelyhood of finding a bug with addsplits() in randomwalk is much greater than the functional test.  The functional test will detect if the feature is completely broken, random walk can detect if the feature is broken under certain circumstances.&lt;/p&gt;
</comment>
                            <comment id="13245753" author="kturner" created="Tue, 3 Apr 2012 21:11:32 +0000"  >&lt;p&gt;One other comment about random walk test vs functional test.  Random walk will also test adding splits in many different combination with other table operations.  For example a random walker may split, merge, update, split, split, delete, etc.  A functional test for add splits will not randomly mix table operations like this.   It will generally always test the same table operation in the same order.   &lt;/p&gt;</comment>
                            <comment id="13261855" author="enis" created="Wed, 25 Apr 2012 17:58:10 +0000"  >&lt;p&gt;DD and I also want to commit some resources into developing/maintaining/running such tests. We are also willing to allocate some  cluster resources into running the tests for extended periods of time. &lt;/p&gt;

&lt;p&gt;@Mikhail, do you have anything planned yet? To go further with this, I think a short test design doc would be a great start, wdyt? &lt;/p&gt;

&lt;p&gt;@Keith, @Stack, do you think we should port goraci inside hbase or bigtop? &lt;/p&gt;

&lt;p&gt;@Roman, I love the idea that bigtop provides services for deployment, and running e2e (end to end) tests. But in my experience, maintaining the actual tests (code, logic, etc) will be a lot easier if the code resides inside hbase. Does bigtop provide that kind of use case?&lt;/p&gt;</comment>
                            <comment id="13261885" author="rvs" created="Wed, 25 Apr 2012 18:19:32 +0000"  >&lt;p&gt;@Enis,&lt;/p&gt;

&lt;p&gt;I had a really nice chat with Jon yesterday and we arrived at a common understanding that the tests in general fall into 3 distinct categories (please note that this categories classify test &lt;b&gt;implementation&lt;/b&gt; and not whether they are used as part of the mvn test, mvn verify or Bigtop&apos;s test infra &amp;#8211; more on that later): &lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;pure unit tests &amp;#8211; they reach into the guts of the implementation and use non-public APIs. There&apos;s absolutely no way to run that testcode on anything but MiniHBase/MiniDFS/MiniMR. Bigtop has no role to play in helping HBase community with developing/maintaining/executing those tests.&lt;/li&gt;
	&lt;li&gt;HBase-specific functional tests &amp;#8211; these are the tests that only use public APIs and don&apos;t muck about with internals. They are, however, only concerned with HBase itself. IOW, a test that wants to verify that you can submit an Oozie workflow that has Hive-&amp;gt;HBASE-&amp;gt;Pig pipeline does not fall into this category&lt;/li&gt;
	&lt;li&gt;Integration tests &amp;#8211; these are the multi-component tests that exercise  not just HBase but a # of different components. An above example of the Oozie workflow falls into this category.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Here&apos;s how an ideal situation looks from Bigtop&apos;s perspective: &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;you guys totally take care of #1 and you implement it as usual unit tests.&lt;/li&gt;
	&lt;li&gt;Bigtop (with your help) takes care of #3. It simply makes no sense to reproduce the same infra at the HBase level.&lt;/li&gt;
	&lt;li&gt;A proposal on #2 is this &amp;#8211; these tests belong to HBase. However, they have to be clearly marked as belonging to the functional class AND they have to utilize a very thin shim layer so you can use them in an mvn verify context and we can reuse them in Bigtop running against a fully distributed beefy clusters. At this point I&apos;m convinced that TestLoadAndVerify should be the first example of this class and it should reside in HBase codebase (yet be available to Bigtop).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let me know if this makes sense.&lt;/p&gt;</comment>
                            <comment id="13261960" author="jmhsieh" created="Wed, 25 Apr 2012 19:09:35 +0000"  >&lt;p&gt;TestLoadAndVerify is a Bigtop test currently, but others that might fit into Roman&apos;s category #2 include any of the HBase MR tests or tool-sy tests like TestImportTsv, TestImportExport, (possibly the thrift/rest/avro servers) and some of the other long running external-api only tests like TestAcidGuarantee. &lt;/p&gt;

&lt;p&gt;Also another purpose of the shim layer is to provide an abstraction layer so the same code is used against a minicluster when run in a HBase context or against a real cluster in the Bigtop context.  It would a thinner interface than Mini*Cluster that does not expose internals.  I haven&apos;t thought this out completely yet but it could potentially be useful for dealing Hadoop1 vs Hadoop2 issues as well.&lt;/p&gt;</comment>
                            <comment id="13261973" author="enis" created="Wed, 25 Apr 2012 19:22:53 +0000"  >&lt;p&gt;Yeah, it makes sense. Agreed that we want to run HBase MR kind of tests as both unit tests and #2 tests at a larger scale. What I wanted to ask actually was whether bigtop already provides such an API, or shall we develop one in bigtop. One other consideration is to abstract away the data for the tests. When run in a local cluster, we want to finish in a reasonable time, but when run on a 5-node cluster or a 100-node cluster, the tests should reasonable stress the cluster accordingly.  &lt;/p&gt;</comment>
                            <comment id="13261980" author="rvs" created="Wed, 25 Apr 2012 19:30:33 +0000"  >&lt;p&gt;@Enis, I&apos;m not sure what API are yous asking for. Bigtop currently provides a way of quickly deploying a fully distributed clusters using puppet code. You really don&apos;t want to burden your tests with deployment logic &amp;#8211; hence a choice of a full fledged CM system: puppet.&lt;/p&gt;

&lt;p&gt;We&apos;re already using that for nightly testing of the entire Hadoop stack on ~5 nodes fully distributed clusters that we sping on-demand on EC2. Here&apos;s a job that does that:&lt;br/&gt;
   &lt;a href=&quot;http://bigtop01.cloudera.org:8080/view/Test/job/DeployCluster/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bigtop01.cloudera.org:8080/view/Test/job/DeployCluster/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here&apos;s how a test runs looks like (bear with me while I fix a couple of things that got broken after Bigtop&apos;s trunk migration to Hadoop 2.X):&lt;br/&gt;
   &lt;a href=&quot;http://bigtop01.cloudera.org:8080/view/Test/job/SmokeCluster/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bigtop01.cloudera.org:8080/view/Test/job/SmokeCluster/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13261981" author="rvs" created="Wed, 25 Apr 2012 19:31:32 +0000"  >&lt;p&gt;@Enis, @Jon, yes you&apos;d have to provide knobs in the tests as to what the desired data size is. TestLoadAndVerify already does that and all the others should follow.&lt;/p&gt;</comment>
                            <comment id="13261993" author="jmhsieh" created="Wed, 25 Apr 2012 19:43:28 +0000"  >&lt;p&gt;@Enis I think may be asking if Bigtop already has a shim layer?  There is a little utility class (o.a.bigtop.itest.hbase.util.HBaseTestUtil) that Bigtop HBase tests run against.  The tests tend to be written in a style that are unit tests or run as main.  This could use a little polish &amp;#8211; maybe making a trimmed down o.a.h.hbase.HBastTestingUtility that doesn&apos;t expose internals.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apache/bigtop/blob/trunk/bigtop-tests/test-artifacts/hbase/src/main/groovy/org/apache/bigtop/itest/hbase/util/HBaseTestUtil.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/bigtop/blob/trunk/bigtop-tests/test-artifacts/hbase/src/main/groovy/org/apache/bigtop/itest/hbase/util/HBaseTestUtil.java&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13262131" author="enis" created="Wed, 25 Apr 2012 21:27:38 +0000"  >&lt;p&gt;Yep, I was referring to a shim layer + utilities to run against deployed or local cluster. Let me check out what we have in bigtop. &lt;/p&gt;</comment>
                            <comment id="13295453" author="apurtell" created="Fri, 15 Jun 2012 04:35:33 +0000"  >&lt;p&gt;This discussion was carried forward into &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6201&quot; title=&quot;HBase integration/system tests&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6201&quot;&gt;&lt;del&gt;HBASE-6201&lt;/del&gt;&lt;/a&gt; ?&lt;/p&gt;</comment>
                            <comment id="13396982" author="devaraj" created="Tue, 19 Jun 2012 18:55:08 +0000"  >&lt;p&gt;Attaching a cut of the patch (based against 0.92) that I was working on in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6053&quot; title=&quot;Enhance TestRegionRebalancing test to be a system test&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6053&quot;&gt;HBASE-6053&lt;/a&gt;. At a high level what this does is:&lt;br/&gt;
1. Abstracts out the methods from MiniHBaseCluster to HBaseClusterShim. &lt;/p&gt;

&lt;p&gt;2. Makes parts of HBaseTestingUtility work with the abstract class, HBaseClusterShim. &lt;/p&gt;

&lt;p&gt;3. Provides an implementation of HBaseClusterShim called RealHBaseCluster that would work with real clusters. MiniHBaseCluster would be used in the unit test mode.&lt;/p&gt;

&lt;p&gt;4. Provides a class ServerManager that provides APIs to start/stop/kill servers. This is used by the RealHBaseCluster implementation.&lt;/p&gt;

&lt;p&gt;The patch definitely requires work but thought I&apos;ll post what I currently have.. Feedback welcome on the approach.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12560281">HBASE-6201</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                            <outwardlinks description="requires">
                                        <issuelink>
            <issuekey id="12533360">HBASE-4908</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12532591" name="4821-1.patch" size="44731" author="devaraj" created="Tue, 19 Jun 2012 18:55:08 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 18 Nov 2011 23:23:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>217742</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 26 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02g5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12217</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>