<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:56:14 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-8542/HBASE-8542.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-8542] Need a more common and capable atomic row mutation</title>
                <link>https://issues.apache.org/jira/browse/HBASE-8542</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Hi&lt;/p&gt;

&lt;p&gt;For Atomic row mutation, currently , there are CheckAndPut/Delete and people ask for more CheckAndMutation like API,  also Increment/IncrementColumnValue are available. However there are a lot of limitation of these approaching. Say :&lt;/p&gt;

&lt;p&gt;1. The CheckAndMutation family can only check upon one value upon equal condition and upon single column. This is quite limited, you probably want to compare two column, or need more CompareOp (  for CompareOp, the lower level code can support different CompareOp, we probably could export them to client API level.)&lt;br/&gt;
2. The mutation can only be done upon success, do not have a fail branch to perform another operation. In order to implement branching at client level , you need to loop and check upon a serial different conditions and fall back from the beginning upon anyone fails. Sometime even this loop approaching can not full fill the requirements.&lt;br/&gt;
3. The CheckAndMutation don&apos;t return value, it&apos;s ok now, since it only do mutation upon equal, while if you support more CompareOp, you have no way to know what&apos;s the original value been changed.&lt;br/&gt;
4. Value can only be a constant one , could not reference other column&lt;br/&gt;
5. For ICV, well, it is only self referenced, could not check upon other column and increase. Thus limit the usage.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2322&quot; title=&quot;deadlock between put and cacheflusher in 0.20 branch&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2322&quot;&gt;&lt;del&gt;HBASE-2322&lt;/del&gt;&lt;/a&gt;, it said &quot;We provide a compare-and-swap primitive, which is sufficient to achieve the same effect as row locks from the client side&quot; But I don&apos;t see this is easy and seems to me only ICV is compare and swap primitve the others just do compare and set.&lt;/p&gt;

&lt;p&gt;To give a few example which I think are quite common simple cases, while could not be easily satisfied now :&lt;/p&gt;

&lt;p&gt;Case 1:  SQL like INSERT ON DUPLICATE, you want to insert a new row if there are no duplicate row exist, while you want to update some column if there are already existing row.&lt;/p&gt;

&lt;p&gt;Case 2: Upon update/add/delete a row which have one size column employ the value say &apos;S&apos;/&apos;M&apos;/&apos;L&apos;,  a count number also need to be updated according to the size column. In order to achieve this, you need to get the old size value to correctly figure out the count changes. Thus you need an atomic operation for Get+Put on the size column ( though you could do this job by looping through different value for check, just to figure out what the original value it is. But we could surely do better than this. Say if you got hundreds of status instead of three?)&lt;/p&gt;

&lt;p&gt;If you like , I am sure you can also think out more similar cases that you require a more capable row mutation.&lt;/p&gt;

&lt;p&gt;Thus I am wondering, can we provide a common atomic row mutation API like :&lt;/p&gt;

&lt;p&gt;AtomicRowMutation( Map&amp;lt;KV, CompareOp&amp;gt; compare,  List&amp;lt;KV|Column&amp;gt;onSuccessMutation,  List&amp;lt;KV|Column&amp;gt;onFaileMutation,  Map&amp;lt;Column, beforeafterflag&amp;gt; ColumntoReturn)&lt;/p&gt;

&lt;p&gt;Well , I believe you expert surely could figure out API better than this.&lt;/p&gt;

&lt;p&gt;The point is that I guess this won&apos;t be very hard to been implemented since in the current CheckAndMutation/Increment code path, most thing is available and not much additional logic is needed. API like this one might not solve all the issue  that people might ask for atomic row mutation ( and which could be solved by the deprecated buggy rowLock). But I guess it can solve majority of the mutation that involve a single row instead of cross row.  At least for my own use cases.&lt;/p&gt;

&lt;p&gt;Any ideas?&lt;/p&gt;</description>
                <environment></environment>
        <key id="12647433">HBASE-8542</key>
            <summary>Need a more common and capable atomic row mutation</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="7">Later</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="colorant">Raymond Liu</reporter>
                        <labels>
                    </labels>
                <created>Tue, 14 May 2013 02:20:43 +0000</created>
                <updated>Fri, 11 Nov 2016 20:34:18 +0000</updated>
                            <resolved>Wed, 17 Sep 2014 16:44:48 +0000</resolved>
                                    <version>0.95.0</version>
                                                    <component>Client</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>14</watches>
                                                                <comments>
                            <comment id="13656662" author="yuzhihong@gmail.com" created="Tue, 14 May 2013 02:47:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;Map&amp;lt;KV, CompareOp&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For more than one comparison, how do we express their relationship (and, or, etc) ?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Map&amp;lt;Column, beforeafterflag&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Is beforeafterflag an enum or a boolean ?&lt;br/&gt;
If the flag is boolean, would two maps (one for before, one for after) be better ?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;List&amp;lt;KV|Column&amp;gt;onSuccessMutation&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The list of mutations should be applied all or none, right ?&lt;/p&gt;</comment>
                            <comment id="13656674" author="colorant" created="Tue, 14 May 2013 03:17:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;For more than one comparison, how do we express their relationship (and, or, etc) ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;originally, I thought it will be &quot;and&quot; for all the condition. if complicate expression needed, I don&apos;t know is there a good way to implement them? seems to me not a easy task.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is beforeafterflag an enum or a boolean ?If the flag is boolean, would two maps (one for before, one for after) be better ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;hmm, good idea, two mpas might be better.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The list of mutations should be applied all or none, right ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, since we are on a single row, originally, I am image a PUT/Delete/increment here. that already been satisfied by current implementation. I am not sure if put/delete/increment been mixed here, is that atomic still been easy to be implemented?&lt;/p&gt;</comment>
                            <comment id="13656681" author="yuzhihong@gmail.com" created="Tue, 14 May 2013 03:34:52 +0000"  >&lt;p&gt;w.r.t. representing composite conditions, we can limit one &apos;and&apos; / one &apos;or&apos; for simplification.&lt;br/&gt;
e.g. c1 == value1 and c2 &amp;gt; value2&lt;/p&gt;

&lt;p&gt;w.r.t. mixed put/deletion/increment, we need some concrete use case(s) for further discussion.&lt;/p&gt;</comment>
                            <comment id="13656886" author="apurtell" created="Tue, 14 May 2013 08:14:55 +0000"  >&lt;p&gt;A while back at Trend Micro I developed a patch for CheckAndXXX that allowed one to use any CompareOp and comparator from the filter package. That was a reasonably simple change. Not sure if we ever discussed it publicly, I&apos;d guess not. I think the trouble was we moved the CompareOp enum out of CompareFilter and this was an API compatibility problem.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; checkAndPut(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] row,
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] family, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] qualifier, CompareOp op, ByteArrayComparable cmp,
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Put put);

 &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; checkAndDelete(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] row,
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] family, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] qualifier, CompareOp op, ByteArrayComparable cmp,
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Delete delete);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So rather than the expansive API change suggestion in the description, how about this? And if this is not sufficient then what would be the minimum change needed? &lt;/p&gt;</comment>
                            <comment id="13656887" author="colorant" created="Tue, 14 May 2013 08:23:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andrew.purtell%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;andrew.purtell@gmail.com&quot;&gt;Andrew Purtell&lt;/a&gt; thanks for comments, I agree that this would be a simple and quick change. while this could partly solve the first limitation from 5 I listed. However, this others still not addressed. the minimum extra requirement I think is that the original value should be returned. then we at least know what is changed on this single column. the multiple column check and mutation in the same row is add on.&lt;/p&gt;</comment>
                            <comment id="14137522" author="apurtell" created="Wed, 17 Sep 2014 16:44:48 +0000"  >&lt;p&gt;This proposal includes a big API departure for checkAndXXX including return of the original value. Might be useful someday if we have a volunteer to do the work. In the meantime we have &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11796&quot; title=&quot;Add client support for atomic checkAndMutate&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11796&quot;&gt;&lt;del&gt;HBASE-11796&lt;/del&gt;&lt;/a&gt;. Resolving this as Later.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="13020194">HBASE-17076</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12605922">HBASE-6712</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12459332">HBASE-2332</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 14 May 2013 02:47:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>327789</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 13 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1kk13:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>328133</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>