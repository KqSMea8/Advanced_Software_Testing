<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:08:18 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3211/HBASE-3211.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3211] Key (Index) Only Fetches</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3211</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;When you retrieve data from HBase you get Key (Row+Column+Timestamp) + Values. &lt;/p&gt;

&lt;p&gt;It would be nice to have a mode where we only fetch the keys (i.e. the index) but not the values.&lt;/p&gt;


</description>
                <environment></environment>
        <key id="12479538">HBASE-3211</key>
            <summary>Key (Index) Only Fetches</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="streamy">Jonathan Gray</assignee>
                                    <reporter username="kannanm">Kannan Muthukkaruppan</reporter>
                        <labels>
                    </labels>
                <created>Tue, 9 Nov 2010 23:48:21 +0000</created>
                <updated>Fri, 20 Nov 2015 12:42:25 +0000</updated>
                            <resolved>Wed, 10 Nov 2010 23:37:07 +0000</resolved>
                                                    <fixVersion>0.90.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12930367" author="streamy" created="Tue, 9 Nov 2010 23:50:23 +0000"  >&lt;p&gt;Cool.  I think we should be able to do this somewhat trivially with a filter.  Will take a look.&lt;/p&gt;</comment>
                            <comment id="12930369" author="ryanobjc" created="Tue, 9 Nov 2010 23:52:55 +0000"  >&lt;p&gt;we could fake this out by creating new KeyValue entries in the read path that skip the value part, and you&apos;d end up with a bunch of Results that have Keys but the value length = 0.&lt;/p&gt;</comment>
                            <comment id="12930414" author="kannanm" created="Wed, 10 Nov 2010 01:43:03 +0000"  >&lt;p&gt;That sounds great. Assigning to Jonathan since he was planning to help on this.&lt;/p&gt;</comment>
                            <comment id="12930823" author="hbasereviewboard" created="Wed, 10 Nov 2010 23:20:16 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for hbase, stack and Kannan Muthukkaruppan.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Adds a new filter, KeyOnlyFilter.  The idea is that this will make it so only the key portion of all the KVs are returned.  Could imagine a few use cases where you just need the keys/index not the values.  We have one where we have giant rows with big values and want to just get the qualifiers/versions w/o values.&lt;/p&gt;

&lt;p&gt;Adds a new method in KeyValue, convertToKeyOnly().  From javadoc:&lt;/p&gt;

&lt;p&gt;  /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Converts this KeyValue to only contain the key portion (the value is&lt;/li&gt;
	&lt;li&gt;changed to be null).  This method does a full copy of the backing byte&lt;/li&gt;
	&lt;li&gt;array and does not modify the original byte array of this KeyValue.&lt;/li&gt;
	&lt;li&gt;&amp;lt;p&amp;gt;&lt;/li&gt;
	&lt;li&gt;This method is used by 
{@link KeyOnlyFilter}
&lt;p&gt; and is an advanced feature of&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;KeyValue, proceed with caution.&lt;br/&gt;
   */&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3211&quot; title=&quot;Key (Index) Only Fetches&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3211&quot;&gt;&lt;del&gt;HBASE-3211&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-3211&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-3211&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java 1033617 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/filter/KeyOnlyFilter.java PRE-CREATION &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/io/HbaseObjectWritable.java 1033617 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/TestKeyValue.java 1033617 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/filter/TestFilter.java 1033617 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.cloudera.org/r/1208/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Test of the KV method added to TestKeyValue.  Test of KeyOnlyFilter added to TestFilter.  Both passing.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Jonathan&lt;/p&gt;

</comment>
                            <comment id="12930827" author="hbasereviewboard" created="Wed, 10 Nov 2010 23:26:13 +0000"  >&lt;p&gt;Message from: stack@duboce.net&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1890&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1890&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;


&lt;p&gt;Looks fine to me.  That kv copy is ugly but what else can you do?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;stack&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12930828" author="hbasereviewboard" created="Wed, 10 Nov 2010 23:26:14 +0000"  >&lt;p&gt;Message from: &quot;Ryan Rawson&quot; &amp;lt;ryanobjc@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1891&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1891&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1208/#comment6117&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#comment6117&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I&apos;m torn here, this is making the implementation easy, but KeyValues have been immutable to date.  While no one shares KeyValues between threads or scanners, and ideally no one should, this seems dangerous.&lt;/p&gt;




&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ryan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12930830" author="hbasereviewboard" created="Wed, 10 Nov 2010 23:32:13 +0000"  >&lt;p&gt;Message from: &quot;Kannan Muthukkaruppan&quot; &amp;lt;kannan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1893&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1893&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;


&lt;p&gt;Neat-O! Thanks for cranking this out so quickly.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Kannan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12930831" author="hbasereviewboard" created="Wed, 10 Nov 2010 23:32:14 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-11-10 15:24:52, stack wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Looks fine to me.  That kv copy is ugly but what else can you do?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Definitely can&apos;t modify the original buffer, so it&apos;s the only choice.&lt;/p&gt;

&lt;p&gt;In this case, it&apos;s not a huge deal because we&apos;ll do these allocations, return the result, and then immediately be done with the memory and will have no references to it.  Should be okay on GC.&lt;/p&gt;

&lt;p&gt;One potential optimization would be to do one big rewrite of the KVs at the end rather as we go.  Instead of allocating individual byte[] for each KV, you could potentially do one big byte[] behind all the key-only KVs.  This gets way more complicated and I&apos;m not sure it&apos;s worth it.  Was going for minimal approach.&lt;/p&gt;

&lt;p&gt;In the filter unit test, I&apos;m also going add an additional assert on commit (and verifying still passes).  The test verifies the values are not the same but we should actually explicitly also assert that the value is 0 length.&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1890&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1890&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12930833" author="hbasereviewboard" created="Wed, 10 Nov 2010 23:34:13 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-11-10 15:25:07, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java, line 1199&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1208/diff/1/?file=17147#file17147line1199&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/diff/1/?file=17147#file17147line1199&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I&apos;m torn here, this is making the implementation easy, but KeyValues have been immutable to date.  While no one shares KeyValues between threads or scanners, and ideally no one should, this seems dangerous.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It doesn&apos;t actually touch the original byte[] so does not actually destroy/mutate the underlying data in any way.  Agreed it&apos;s still potentially &quot;dangerous&quot; but that&apos;s why I&apos;ve added the nice warning message in javadoc &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1891&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1891&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12930834" author="hbasereviewboard" created="Wed, 10 Nov 2010 23:34:14 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-11-10 15:30:44, Kannan Muthukkaruppan wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Neat-O! Thanks for cranking this out so quickly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks for your help to keep this a super simple change!&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1893&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1893&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12930837" author="streamy" created="Wed, 10 Nov 2010 23:34:55 +0000"  >&lt;p&gt;Final patch for commit.  Same as one reviewed on RB, just adds an extra assert in the unit test.  Still passing.&lt;/p&gt;</comment>
                            <comment id="12930838" author="streamy" created="Wed, 10 Nov 2010 23:37:07 +0000"  >&lt;p&gt;Committed to trunk.  Thanks for reviews everyone.  Thanks Kannan for helping.&lt;/p&gt;</comment>
                            <comment id="12930844" author="streamy" created="Wed, 10 Nov 2010 23:52:32 +0000"  >&lt;p&gt;Actual final patch.  Forgot to add the new file on the last one.&lt;/p&gt;</comment>
                            <comment id="12930849" author="hbasereviewboard" created="Thu, 11 Nov 2010 00:02:15 +0000"  >&lt;p&gt;Message from: &quot;Nicolas&quot; &amp;lt;nspiegelberg@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1896&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1896&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1208/#comment6119&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#comment6119&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Would it be more straightforward to have a ReturnCode.MODIFY, that signals an include but suggests that the program must call modifyKeyValue() to get the transformed data.  Maybe this is too much of a one-off case...&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Nicolas&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12930852" author="hbasereviewboard" created="Thu, 11 Nov 2010 00:05:18 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-11-10 16:01:22, Nicolas wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java, line 1199&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1208/diff/1/?file=17147#file17147line1199&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/diff/1/?file=17147#file17147line1199&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Would it be more straightforward to have a ReturnCode.MODIFY, that signals an include but suggests that the program must call modifyKeyValue() to get the transformed data.  Maybe this is too much of a one-off case...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure I completely follow.  You&apos;re saying the modification would happen outside the filter?  No one needs to call modifyKeyValue() to get the transformed data, it&apos;s done in the filter.&lt;/p&gt;

&lt;p&gt;In any case, yeah, I would not be for adding another ReturnCode just for this.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1896&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1896&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12930880" author="hbasereviewboard" created="Thu, 11 Nov 2010 01:16:15 +0000"  >&lt;p&gt;Message from: &quot;Nicolas&quot; &amp;lt;nspiegelberg@facebook.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-11-10 16:01:22, Nicolas wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java, line 1199&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1208/diff/1/?file=17147#file17147line1199&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/diff/1/?file=17147#file17147line1199&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Would it be more straightforward to have a ReturnCode.MODIFY, that signals an include but suggests that the program must call modifyKeyValue() to get the transformed data.  Maybe this is too much of a one-off case...&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Not sure I completely follow.  You&apos;re saying the modification would happen outside the filter?  No one needs to call modifyKeyValue() to get the transformed data, it&apos;s done in the filter.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In any case, yeah, I would not be for adding another ReturnCode just for this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I suggested this alternative because users normally expect filters to do immutable operations on the data itself, and you&apos;re introducing side effects.  If we stay with this paradigm, it&apos;s probably best to add a note in Filter.filterKeyValue() that the KeyValue may be modified.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Nicolas&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1896&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1896&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12930891" author="hbasereviewboard" created="Thu, 11 Nov 2010 01:38:15 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-11-10 16:01:22, Nicolas wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java, line 1199&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1208/diff/1/?file=17147#file17147line1199&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/diff/1/?file=17147#file17147line1199&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Would it be more straightforward to have a ReturnCode.MODIFY, that signals an include but suggests that the program must call modifyKeyValue() to get the transformed data.  Maybe this is too much of a one-off case...&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Not sure I completely follow.  You&apos;re saying the modification would happen outside the filter?  No one needs to call modifyKeyValue() to get the transformed data, it&apos;s done in the filter.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In any case, yeah, I would not be for adding another ReturnCode just for this.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Nicolas wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I suggested this alternative because users normally expect filters to do immutable operations on the data itself, and you&apos;re introducing side effects.  If we stay with this paradigm, it&apos;s probably best to add a note in Filter.filterKeyValue() that the KeyValue may be modified.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But a user would have to knowingly use this filter, right?  And the filter only has one purpose of mutating the KVs.  I do agree with what you&apos;re saying at some level but not sure what a note in the interface would do.  This is so if writing other filters, you would know that other filters in the chain could modify the KV?  How would you behave differently then in that case?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1896&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1896&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12930898" author="hbasereviewboard" created="Thu, 11 Nov 2010 02:42:13 +0000"  >&lt;p&gt;Message from: &quot;Nicolas&quot; &amp;lt;nspiegelberg@facebook.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-11-10 16:01:22, Nicolas wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java, line 1199&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1208/diff/1/?file=17147#file17147line1199&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/diff/1/?file=17147#file17147line1199&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Would it be more straightforward to have a ReturnCode.MODIFY, that signals an include but suggests that the program must call modifyKeyValue() to get the transformed data.  Maybe this is too much of a one-off case...&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Not sure I completely follow.  You&apos;re saying the modification would happen outside the filter?  No one needs to call modifyKeyValue() to get the transformed data, it&apos;s done in the filter.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In any case, yeah, I would not be for adding another ReturnCode just for this.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Nicolas wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I suggested this alternative because users normally expect filters to do immutable operations on the data itself, and you&apos;re introducing side effects.  If we stay with this paradigm, it&apos;s probably best to add a note in Filter.filterKeyValue() that the KeyValue may be modified.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;But a user would have to knowingly use this filter, right?  And the filter only has one purpose of mutating the KVs.  I do agree with what you&apos;re saying at some level but not sure what a note in the interface would do.  This is so if writing other filters, you would know that other filters in the chain could modify the KV?  How would you behave differently then in that case?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I guess the overall worry just comes in because this is a map() operation and not a filter().  Granted, the user should reasonably know what they&apos;re doing.  One theoretical future scenario: someone wants to get all Keys for large objects that match some Value filter.  In that case, you have an order of operations problem between the two filters.  Maybe that&apos;s material for future refactoring when we hit that case.  Just cautioning that the filter/map 2-phase paradigm is a common problem that&apos;s been solved before and we&apos;re avoiding that in favor of a lightweight solution.  Ignorance is bliss as long as we understanding what we&apos;re ignoring and why.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Nicolas&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1896&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1896&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12930900" author="hbasereviewboard" created="Thu, 11 Nov 2010 02:48:13 +0000"  >&lt;p&gt;Message from: &quot;Ryan Rawson&quot; &amp;lt;ryanobjc@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1208/#review1903&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#review1903&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1208/#comment6125&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1208/#comment6125&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    my concern is far more down to earth here, the problem is that KeyValue is an immutable object that &lt;em&gt;sometimes&lt;/em&gt; mutates. Having this function call:&lt;/p&gt;

&lt;p&gt;    public KeyValue getKeyOnly() &lt;/p&gt;
{
     // insert implementation that doesnt modify this here
    }

&lt;p&gt;    would be better.&lt;/p&gt;



&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ryan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12931050" author="kannanm" created="Thu, 11 Nov 2010 15:55:12 +0000"  >&lt;p&gt;Nicolas: Hear your concern about filter vs. map approach. And if a user mixes this with other filters using a compound filter (such as &quot;or&quot; and &quot;and&quot; filter) and if some of the filters involved are &quot;value&quot; filters, then the fact the filter implementation has side-effects makes the behavior dependent on the order in which the filters are processed.&lt;/p&gt;

&lt;p&gt;Perhaps a middle ground is to at least not expose this feature as a &quot;filter&quot; to the end user. Instead, we could add a explicit method (on Get &amp;amp; Scan), say &quot;keysOnly&quot;. But its implementation could maybe still use the filter approach--- i.e. just before we serialize the Get/Scan request, if keysOnly() is requested, we could tack on this special (internal-only) filter to the very top of any user provided filters. This will prevent the ambiguous cases we are worried about from arising, and will still interop nicely with other filters.&lt;/p&gt;</comment>
                            <comment id="12931084" author="streamy" created="Thu, 11 Nov 2010 17:07:16 +0000"  >&lt;p&gt;@Kannan/Nicolas&lt;/p&gt;

&lt;p&gt;My inclination is to not go the way of introducing changes on the client APIs for this.&lt;/p&gt;

&lt;p&gt;I also hear the concern but see this is a very minor issue and have doubts that anyone would ever actually trip over this.  An end user would have to do something like create a list of filters with a KeyOnlyFilter as the first in the list, followed by a ValueFilter after it.  I would fault the user on not at all understanding what he is doing.&lt;/p&gt;

&lt;p&gt;In any case, I am a strong believer in being more explicit than implicit and in over-documenting rather than supposing people will figure things out.&lt;/p&gt;

&lt;p&gt;I will come up with some additional javadoc comments to apply both to the actual Filter interface (adding a note on any method which could possibly mutate results in some way) and then making it very clear both in the class comment and the filter method used in KeyOnlyFilter that it&apos;s a filter which actually mutates the returned values and you should take care if using it in conjunction with another filter.  I will also specifically state the example that if you need to do value filtering, that the KeyOnlyFilter must come after the ValueFilter and in general the KeyOnlyFilter should always be last.&lt;/p&gt;

&lt;p&gt;@Ryan&lt;/p&gt;

&lt;p&gt;Agree it would be better that way, but then we can&apos;t really implement this filter in as simple of a way.  As it is now, we mutate the passed KV on the filterKeyValue call.  If we were to not actually touch the existing KV in any way, then the filter would have to be very stateful and more complex.  We would hold an internal list of KVs that we built up on filterKeyValue calls, creating a new KV each time and adding it to the list.  Then on the final filterRow(List&amp;lt;KV&amp;gt;) call, we would clear the list and add all of the elements from our internal list.&lt;/p&gt;

&lt;p&gt;I actually implemented it this exact what the first time, it was just way more complex.&lt;/p&gt;

&lt;p&gt;My preference is to keep things simple but if others also feel we should be absolutely strict about never mutating a KV, then I can look at changing the filter implementation to this style.&lt;/p&gt;</comment>
                            <comment id="12931116" author="kannanm" created="Thu, 11 Nov 2010 18:28:23 +0000"  >&lt;p&gt;Jonathan: I could see a separate API as being a little cleaner, but I do not have a major objection to leaving the patch as it stands. So ok with as is.&lt;/p&gt;</comment>
                            <comment id="12931722" author="pranavkhaitan" created="Sat, 13 Nov 2010 20:00:06 +0000"  >&lt;p&gt;I think the patch along with documentation submitted by Jonathan is perfect for now. Later on, if we need to support a lot of mutating operations, we could add a new mutator api. &lt;/p&gt;</comment>
                            <comment id="15017244" author="lars_francke" created="Fri, 20 Nov 2015 12:42:25 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12479849">HBASE-3232</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12459297" name="HBASE-3211-v2.patch" size="9417" author="streamy" created="Wed, 10 Nov 2010 23:34:55 +0000"/>
                            <attachment id="12459299" name="HBASE-3211-v3.patch" size="11344" author="streamy" created="Wed, 10 Nov 2010 23:52:32 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 9 Nov 2010 23:50:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32946</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hl7r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100699</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>