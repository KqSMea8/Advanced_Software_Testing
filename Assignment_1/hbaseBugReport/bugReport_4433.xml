<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:18:52 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-4433/HBASE-4433.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-4433] avoid extra next (potentially a seek) if done with column/row</title>
                <link>https://issues.apache.org/jira/browse/HBASE-4433</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Noticed this in 89, but quite likely true of trunk as well.&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When we are done with the requested column(s) the code still does an extra next() call before it realizes that it is actually done. This extra next() call could potentially result in an unnecessary extra block load. This is likely to be especially bad for CFs where the KVs are large blobs where each KV may be occupying a block of its own. So the next() can often load a new unrelated block unnecessarily.&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;/p&gt;

&lt;p&gt;For the simple case of reading say the top-most column in a row in a single file, where each column (KV) was say a block of its own-- it seems that we are reading 3 blocks, instead of 1 block!&lt;/p&gt;

&lt;p&gt;I am working on a simple patch and with that the number of seeks is down to 2. &lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;There is still an extra seek left.  I think there were two levels of extra/unnecessary next() we were doing without actually confirming that the next was needed. One at the StoreScanner/ScanQueryMatcher level which this diff avoids. I think the other is at hfs.next() (at the storefile scanner level) that&amp;#39;s happening whenever a HFile scanner servers out a data-- and perhaps that&amp;#39;s the additional seek that we need to avoid. But I want to tackle this optimization first as the two issues seem unrelated.&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&amp;#8211; &lt;/p&gt;

&lt;p&gt;The basic idea of the patch I am working on/testing is as follows. The ExplicitColumnTracker currently returns &quot;INCLUDE&quot; to the ScanQueryMatcher if the KV needs to be included and then if done, only in the the next call it returns the appropriate SEEK_NEXT_COL or SEEK_NEXT_ROW hint. For the cases when ExplicitColumnTracker knows it is done with a particular column/row, the patch attempts to combine the INCLUDE code and done hint into a single match code-- INCLUDE_AND_SEEK_NEXT_COL and INCLUDE_AND_SEEK_NEXT_ROW.&lt;/p&gt;



</description>
                <environment></environment>
        <key id="12523503">HBASE-4433</key>
            <summary>avoid extra next (potentially a seek) if done with column/row</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kannanm">Kannan Muthukkaruppan</assignee>
                                    <reporter username="kannanm">Kannan Muthukkaruppan</reporter>
                        <labels>
                    </labels>
                <created>Mon, 19 Sep 2011 00:19:52 +0000</created>
                <updated>Fri, 20 Nov 2015 11:55:23 +0000</updated>
                            <resolved>Tue, 27 Sep 2011 18:45:17 +0000</resolved>
                                                    <fixVersion>0.92.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                <comments>
                            <comment id="13108110" author="streamy" created="Mon, 19 Sep 2011 20:20:56 +0000"  >&lt;p&gt;Good stuff.  I think the first iteration of the ColumnTracker had the INCLUDE_AND_* primitives but it was simplified.  Would be pretty cool that write up a unit test that creates single-KV sized blocks and you could run various queries to see the number of blocks accessed.  Especially nice to catch regressions in the future.&lt;/p&gt;</comment>
                            <comment id="13108162" author="kannanm" created="Mon, 19 Sep 2011 21:19:45 +0000"  >&lt;p&gt;Changing JIRA type from &quot;Bug&quot; -&amp;gt; &quot;Improvement&quot;.&lt;/p&gt;

&lt;p&gt;@Jonathan: Yes, adding such a unit test which counts the number of &quot;cf.&amp;lt;cfName&amp;gt;.fsDataBlockReadCnt&quot;.&lt;/p&gt;</comment>
                            <comment id="13114113" author="jiraposter@reviews.apache.org" created="Sun, 25 Sep 2011 01:30:26 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2044/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2044/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for Michael Stack, Jonathan Gray and Mikhail Bautin.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Avoids extra next (potentially seek) calls when we are done with each column requested.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4433&quot; title=&quot;avoid extra next (potentially a seek) if done with column/row&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4433&quot;&gt;&lt;del&gt;HBASE-4433&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4433&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-4433&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  &lt;a href=&quot;http://svn.apache.org/repos/asf/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/a&gt; 1175286 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/a&gt; 1175286 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/a&gt; 1175286 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java&lt;/a&gt; 1175286 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestExplicitColumnTracker.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestExplicitColumnTracker.java&lt;/a&gt; 1175286 &lt;br/&gt;
  &lt;a href=&quot;http://svn.apache.org/repos/asf/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java&lt;/a&gt; 1175286 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2044/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2044/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Ran TestBlocksRead/TestExplicitColumnTracker/TestQueryMatcher. Running the full suite now.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Kannan&lt;/p&gt;
</comment>
                            <comment id="13115113" author="kannanm" created="Tue, 27 Sep 2011 01:28:42 +0000"  >&lt;p&gt;ping. for code review.&lt;/p&gt;

&lt;p&gt;test suite ran clean.&lt;/p&gt;</comment>
                            <comment id="13115191" author="yuzhihong@gmail.com" created="Tue, 27 Sep 2011 04:16:49 +0000"  >&lt;p&gt;+1 on patch.&lt;br/&gt;
Nice work.&lt;/p&gt;</comment>
                            <comment id="13115230" author="streamy" created="Tue, 27 Sep 2011 05:30:59 +0000"  >&lt;p&gt;Good stuff Kannan!  Thanks for review Ted.  I also looked and I&apos;m +1.&lt;/p&gt;

&lt;p&gt;Committed to trunk.&lt;/p&gt;</comment>
                            <comment id="13115353" author="hudson" created="Tue, 27 Sep 2011 09:08:07 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #2261 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/2261/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/2261/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4433&quot; title=&quot;avoid extra next (potentially a seek) if done with column/row&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4433&quot;&gt;&lt;del&gt;HBASE-4433&lt;/del&gt;&lt;/a&gt;  avoid extra next (potentially a seek) if done with column/row (kannan via jgray)&lt;/p&gt;

&lt;p&gt;jgray : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestExplicitColumnTracker.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13115743" author="apurtell" created="Tue, 27 Sep 2011 17:42:18 +0000"  >&lt;p&gt;According to my tests, this is safe to do on 0.92 and 0.90 branches as well. This change should be applied there.&lt;/p&gt;</comment>
                            <comment id="13115789" author="stack" created="Tue, 27 Sep 2011 18:40:55 +0000"  >&lt;p&gt;Reopening until we apply to 0.92 and 0.90 too (as per Andrew).   I&apos;ll do it (stop me Jon if you are already at this).&lt;/p&gt;</comment>
                            <comment id="13115791" author="stack" created="Tue, 27 Sep 2011 18:45:17 +0000"  >&lt;p&gt;Applied to 0.92 branch too.  Didn&apos;t add to 0.90 because doesn&apos;t apply clean (there are test files missing).&lt;/p&gt;</comment>
                            <comment id="13115867" author="streamy" created="Tue, 27 Sep 2011 20:04:43 +0000"  >&lt;p&gt;Is this not strictly an improvement/feature?  It seems like it doesn&apos;t belong in stable branches &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13115938" author="hudson" created="Tue, 27 Sep 2011 21:18:25 +0000"  >&lt;p&gt;Integrated in HBase-0.92 #23 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.92/23/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.92/23/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4433&quot; title=&quot;avoid extra next (potentially a seek) if done with column/row&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4433&quot;&gt;&lt;del&gt;HBASE-4433&lt;/del&gt;&lt;/a&gt;: avoid extra next (potentially a seek) if done with column/row&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4433&quot; title=&quot;avoid extra next (potentially a seek) if done with column/row&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4433&quot;&gt;&lt;del&gt;HBASE-4433&lt;/del&gt;&lt;/a&gt;: avoid extra next (potentially a seek) if done with column/row&lt;/p&gt;

&lt;p&gt;stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.92/CHANGES.txt&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.92/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/regionserver/TestBlocksRead.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/regionserver/TestExplicitColumnTracker.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13588107" author="colorant" created="Wed, 27 Feb 2013 08:11:45 +0000"  >&lt;p&gt;I got a issue here related to this one. For a table which do not have multiple version for it&apos;s row. each row only got a single version. thus, a next operation will read in the next column&apos;s keyvalue and match the next column without a seek operation. In this case, this next() operation is actually save the time and improve the performance. With a 200G table to scan in my test, next instead of seek with be 30% faster. say 190s v.s. 250s.&lt;/p&gt;

&lt;p&gt;So I think this behavior might need to be treat differently for different situation. For I think this one version each row read only table is also very typical case. And this patch actually make the performance worse.&lt;/p&gt;</comment>
                            <comment id="13588122" author="ram_krish" created="Wed, 27 Feb 2013 08:36:37 +0000"  >&lt;p&gt;Reading the description of JIRA i understand it was basically done for large blobs.  Hence they tried to seek and then next() so that unnecessary block seek does not happen.&lt;br/&gt;
So your case is a plain case where you just need the next column.&lt;/p&gt;

&lt;p&gt;Any suggestions how to go about with this?  Can we have some configuration?&lt;/p&gt;</comment>
                            <comment id="13589068" author="colorant" created="Thu, 28 Feb 2013 02:08:48 +0000"  >&lt;p&gt;I am wondering, we might add a conf to let user choose the strategy to allow include_and_seek or just separate include/seek. However, the difference of this kind of settings might not be easy to be figure out by an end user. And whether the table have many history versions or not also totally depends on the usage of the table. Better to have some auto select mechanism to help with it. &lt;/p&gt;

&lt;p&gt;If the table is mainly go with one time write/many read mode, only user know it, I don&apos;t know is there any way to find out this by hbase itself?&lt;/p&gt;

&lt;p&gt;While if table is configed with MAX history VERSION set to 1 etc, Then for most chance I guess it is safe for the column tracker to go with separate include/seek approaching.&lt;/p&gt;</comment>
                            <comment id="13589206" author="ram_krish" created="Thu, 28 Feb 2013 05:24:59 +0000"  >&lt;p&gt;I agree Raymond with you on the part that end user cannot figure it out.  &lt;br/&gt;
But having a config knob will atleast help in understanding the behaviour of the application and then decide on the nature of the include/seek mechanism.  Also having a knob will atleast help users not to recompile code by making changes in the code.  Just saying. &lt;br/&gt;
But still will there be a chance that the &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;When we are done with the requested column(s) the code still does an extra next() call before it realizes that it is actually done. This extra next() call could potentially result in an unnecessary extra block load&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This may happen. &lt;/p&gt;</comment>
                            <comment id="13589221" author="colorant" created="Thu, 28 Feb 2013 05:42:56 +0000"  >&lt;p&gt;You are right, there are chance that an extra next() will be called. And for a large kv that occupy a single block, this might have it load an unnecessary extra block, while for most case if the single kv is not that big, then the next block always need to be loaded even for seek_next_col, seek_next_row might not if it involves a lot of cols that one row span multi blocks.&lt;/p&gt;

&lt;p&gt;And, if not for an extra big KV, for multi history version columns, this extra next might not cost much even it actually need to be seek through, for It save part of the time for seek since it is already passed. Anyway, it will need real case to verify the performance impact.&lt;/p&gt;

&lt;p&gt;And , Yes, I agree with you, if we can&apos;t tell which mechanism should be used, a configure is very useful.&lt;/p&gt;</comment>
                            <comment id="13589224" author="lhofhansl" created="Thu, 28 Feb 2013 05:44:38 +0000"  >&lt;p&gt;Interesting! This is almost impossible to get right automatically I think. Even with MAX_VERSIONS=1 there might be a bunch of version, where INCLUDE_AND_SEEK_* is better.&lt;/p&gt;

&lt;p&gt;Could use the size of the KV as a guidepost. If MAX_VERSIONS * size &amp;gt; than the HFile blocksize (64k by default) we could do INCLUDE_AND_SEEK, other do INCLUDE following by SEEK (if needed).&lt;/p&gt;

&lt;p&gt;(Just made this up, but we can probably use some heuristic like this)&lt;/p&gt;</comment>
                            <comment id="13589333" author="colorant" created="Thu, 28 Feb 2013 08:16:23 +0000"  >&lt;p&gt;I have run another test, say with the same 200G 18 column table, I do scan on every other column.&lt;br/&gt;
Thus with include then seek approaching, it will be c1 -&amp;gt; next c2 -&amp;gt; seek c3 -&amp;gt; next c4 -&amp;gt; seek c5 ...&lt;br/&gt;
And with include_and_seek approaching, it will be c1 -&amp;gt; seek c3 -&amp;gt; seek c5 ...&lt;/p&gt;

&lt;p&gt;Say, an extra next is involved for each seek op. And this is the worst case for include then seek approaching. While in my case, this two approaching don&apos;t show noticeable performance difference. say all around 207s. While for the previous best case(c1-&amp;gt;next c2-&amp;gt; next c3 v.s. c1-&amp;gt;seek c2-&amp;gt;seek c3) 190s vs 250s.&lt;/p&gt;

&lt;p&gt;So, if the next() op do not involve extra block loading, I think this is acceptable.&lt;br/&gt;
And for extra block loading, only happens when the next col is in next block, and it fully occupy the next block. This could be rare ( either col is huge, in this case, default block size should be adjusted? or history version is huge, in this case, only when the current kv happen to be the very last kv in current block, and the next block is all occupied by history versions)&lt;/p&gt;

&lt;p&gt;And also, the wildcolumntracker now go with include and seek approaching when max version is achieved.&lt;/p&gt;</comment>
                            <comment id="13589705" author="kannanm" created="Thu, 28 Feb 2013 17:45:12 +0000"  >&lt;p&gt;Sorry for missing this thread. Will post a more detailed reply when I am at&lt;br/&gt;
the computer. In a later jira we fixed it such that seek is really cheap if&lt;br/&gt;
it is to a key within the same block. No need for log(N) walk thru the&lt;br/&gt;
index if key we are seeking to is in the same block.&lt;/p&gt;

</comment>
                            <comment id="13589722" author="lhofhansl" created="Thu, 28 Feb 2013 17:58:14 +0000"  >&lt;p&gt;Thanks Kannan. Looks like something we should port into the 0.94/0.95/trunk branches as well (assuming from Raymond&apos;s numbers that this change is only in the FB branch).&lt;/p&gt;</comment>
                            <comment id="13589763" author="liyin" created="Thu, 28 Feb 2013 18:32:06 +0000"  >&lt;p&gt;Hi Lars, the jira Kannan mentioned is &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt; HFileBlockIndex improvements. By looking ahead at the next indexed key, HBase internal reader knows whether to keep scanning the current DataBlock or look up the index. This feature avoids additional index lookup overhead when multiple requests are sequentially scanning the HFile data block.&lt;/p&gt;

&lt;p&gt;Actually, we have a list of jiras in our FB internal HBase release. Do you know a proper place we could share these work with more hbase-dev ?&lt;/p&gt;</comment>
                            <comment id="13589767" author="kannanm" created="Thu, 28 Feb 2013 18:33:50 +0000"  >&lt;p&gt;The relevant JIRA that addresses this issue is: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically, whenever we go down an index, we also lookahead and maintain the start key of the next block in the HFileScanner state. When a need to reseek to a key arises, we do a quick check to see if the key is in the same block (i.e. is less than the start key of the next block). If it is, the reseek doesn&apos;t need to consult the index again and can simply march along in the same block to find the key; else, it uses the index to find the block it needs to go to.&lt;/p&gt;

&lt;p&gt;Looks like this was fixed in 0.95. Raymond: Which version are you trying this with?&lt;br/&gt;
&amp;#8212;&lt;/p&gt;</comment>
                            <comment id="13589776" author="yuzhihong@gmail.com" created="Thu, 28 Feb 2013 18:41:03 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5987&quot; title=&quot;HFileBlockIndex improvement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5987&quot;&gt;&lt;del&gt;HBASE-5987&lt;/del&gt;&lt;/a&gt; has been ported to 0.94 through &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6032&quot; title=&quot;Port HFileBlockIndex improvement from HBASE-5987&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6032&quot;&gt;&lt;del&gt;HBASE-6032&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
Meaning, the improvement is in 0.94.3&lt;/p&gt;</comment>
                            <comment id="13589784" author="lhofhansl" created="Thu, 28 Feb 2013 18:44:57 +0000"  >&lt;p&gt;Thanks Liyin, Kannan, and Ted &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=colorant&quot; class=&quot;user-hover&quot; rel=&quot;colorant&quot;&gt;Raymond Liu&lt;/a&gt; Which version of HBase did you use for your tests?&lt;/p&gt;</comment>
                            <comment id="13590138" author="colorant" created="Fri, 1 Mar 2013 01:16:42 +0000"  >&lt;p&gt;Hi, I did this test in 0.94.1 , but I have already port &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6032&quot; title=&quot;Port HFileBlockIndex improvement from HBASE-5987&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6032&quot;&gt;&lt;del&gt;HBASE-6032&lt;/del&gt;&lt;/a&gt; onto it. without this patch, the difference is even larger.&lt;/p&gt;

&lt;p&gt;So this is not about index key issue.&lt;br/&gt;
I think the overhead is that the fake key need to be construct for a seek operation. And still the seek op itself slightly expensive than get op.&lt;/p&gt;</comment>
                            <comment id="13590194" author="colorant" created="Fri, 1 Mar 2013 02:39:32 +0000"  >&lt;p&gt;Anyway, To make sure no other issue might impact on the result. I do the same test again upon 0.94.5. And with similar result.&lt;/p&gt;</comment>
                            <comment id="13590820" author="lhofhansl" created="Fri, 1 Mar 2013 18:49:24 +0000"  >&lt;p&gt;Thanks Raymond. Seems like there&apos;s room for improvement in many scenarios. I&apos;ll also do some tests.&lt;/p&gt;</comment>
                            <comment id="13592938" author="colorant" created="Tue, 5 Mar 2013 02:01:43 +0000"  >&lt;p&gt;To figure out how much overhead the seek will have. I read a few more code. My table is major compacted. And it seems that under this situation. The lazy seek approaching doesn&apos;t help. since there are only 1 scanner involved. Still each time this scanner will go through a lazy seek, then add to heap , sort, poll out , for a second real seek. it introduce one extra lazy seek and construction of a second fake key for seek. And the best path should be go direct seek without this lazy seek when there are only 1 storefilescanner is involved ( or 1 storefilescanner + 1 memstorescanner?). And I tweak the code a little bit to find out how much it will impact the result. it show to me the scan time is reduced from 260s to 240s for include_and_seek, though still far from 190s for include then seek since there are still one seek involved which is expensive than next.&lt;/p&gt;

&lt;p&gt;However I find it hard to do thing right if you want to switch from lazy seek to non_lazy seek later. try to read more code to find a solution.&lt;/p&gt;</comment>
                            <comment id="13593022" author="ram_krish" created="Tue, 5 Mar 2013 03:33:40 +0000"  >&lt;p&gt;Nice findings Liu.  As Lars pointed out we can work on improvments here.  Add some intelligence or some mathematics to figure out which path to take under what condition.&lt;/p&gt;</comment>
                            <comment id="13593129" author="ram_krish" created="Tue, 5 Mar 2013 06:47:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;The lazy seek approaching doesn&apos;t help. since there are only 1 scanner involved.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Can you brief more on this.  Basically lazy seek helps to reduce the numbers of hFiles to be seeked right?&lt;/p&gt;</comment>
                            <comment id="13593145" author="colorant" created="Tue, 5 Mar 2013 07:21:18 +0000"  >&lt;p&gt;Right, Lazy seek try to avoid seek in old hfiles when possible. While for my case, there are only 1 hFiles for Major compact is done. And also , during scan, storeFileScanner could be closed when done. Thus sooner or later, there will be only one storeFileScanner remain.&lt;/p&gt;

&lt;p&gt;And there are various other situation. say if you need to scan all version of data, in this case, a lazy seek just push the real seek later. But do not reduce the number of real seek.&lt;/p&gt;

&lt;p&gt;In both case, lazy seek will add overheads.&lt;/p&gt;

&lt;p&gt;Of course, when there are a lot of hfiles with different version of rows , and you just want to get the first version out of it. in this case lazy seek will provide helps.&lt;/p&gt;</comment>
                            <comment id="13593147" author="colorant" created="Tue, 5 Mar 2013 07:27:35 +0000"  >&lt;p&gt;And also , when there are only one version of row exist, no matter how many hfile you have, a sequence scan operation will always need scan all the hfile row by row. you don&apos;t skip any real seek by lazy seek. And in many case, like hive on top of hbase or a bulkloaded read only table, I think it&apos;s quite normal that a row only got one version.&lt;/p&gt;

&lt;p&gt;b.t.w how to modify exist comment? Find no way to do it, while it seems some one could modify their comment.&lt;/p&gt;</comment>
                            <comment id="13593210" author="ram_krish" created="Tue, 5 Mar 2013 07:59:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;b.t.w how to modify exist comment? Find no way to do it, while it seems some one could modify their comment.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You need admin access for that.  &lt;br/&gt;
Your above points makes sense.  Was going thro the code and hence got the doubt.  &lt;/p&gt;</comment>
                            <comment id="13594268" author="colorant" created="Wed, 6 Mar 2013 02:52:46 +0000"  >&lt;p&gt;submitted a patch in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8001&quot; title=&quot;Avoid unnecessary lazy seek&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8001&quot;&gt;&lt;del&gt;HBASE-8001&lt;/del&gt;&lt;/a&gt; try to reduce the unnecessary lazy seek.&lt;/p&gt;</comment>
                            <comment id="13834297" author="lhofhansl" created="Wed, 27 Nov 2013 23:07:09 +0000"  >&lt;p&gt;reseek was also dramatically improved with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9915&quot; title=&quot;Performance: isSeeked() in EncodedScannerV2 always returns false&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9915&quot;&gt;&lt;del&gt;HBASE-9915&lt;/del&gt;&lt;/a&gt; if a block encoder is used.&lt;/p&gt;</comment>
                            <comment id="15016465" author="lars_francke" created="Fri, 20 Nov 2015 11:55:23 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12674058">HBASE-9778</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12635294">HBASE-8001</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12678045">HBASE-9915</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 19 Sep 2011 20:20:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3502</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hqv3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>101614</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>