<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:10:47 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-16146/HBASE-16146.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-16146] Counters are expensive...</title>
                <link>https://issues.apache.org/jira/browse/HBASE-16146</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Doing workloadc, perf shows 10%+ of CPU being spent on counter#add. If I disable some of the hot ones &amp;#8211; see patch &amp;#8211; I can get 10% more throughput (390k to 440k). Figure something better.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12985147">HBASE-16146</key>
            <summary>Counters are expensive...</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12956205">HBASE-15594</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ghelmling">Gary Helmling</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Wed, 29 Jun 2016 19:15:39 +0000</created>
                <updated>Wed, 14 Dec 2016 21:55:59 +0000</updated>
                            <resolved>Tue, 11 Oct 2016 22:01:55 +0000</resolved>
                                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>1.3.0</fixVersion>
                    <fixVersion>1.4.0</fixVersion>
                                    <component>metrics</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="15360429" author="stack" created="Sun, 3 Jul 2016 06:33:38 +0000"  >&lt;p&gt;Here is branch-1 doing random read workloadc:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 12.05%  perf-56198.map      [.] Lorg/apache/hadoop/hbase/util/Counter;.add
  3.11%  libjvm.so           [.] BlockOffsetArrayNonContigSpace::block_start_unsafe(void &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;*) &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;
  2.19%  perf-56198.map      [.] Lorg/apache/hadoop/hbase/io/hfile/HFileBlockIndex$BlockIndexReader;.binarySearchNonRootIndex
  1.65%  perf-56198.map      [.] Lorg/apache/hadoop/hbase/protobuf/generated/CellProtos$Cell;.writeTo
  1.62%  perf-56198.map      [.] Lorg/apache/hadoop/hbase/io/hfile/LruBlockCache;.getBlock
  1.58%  perf-56198.map      [.] Lorg/apache/hadoop/hbase/io/hfile/HFileReaderV3$ScannerV3;.blockSeek
  1.49%  perf-56198.map      [.] Lorg/apache/hadoop/hbase/regionserver/HRegion$RegionScannerImpl;.&amp;lt;init&amp;gt;
  1.37%  libjvm.so           [.] ClearNoncleanCardWrapper::do_MemRegion(MemRegion)
  1.31%  perf-56198.map      [.] Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.match
  1.28%  perf-56198.map      [.] Lorg/apache/hadoop/hbase/ipc/CallRunner;.run
  1.23%  [kernel]            [k] _raw_spin_lock
  1.20%  perf-56198.map      [.] Ljava/util/concurrent/locks/ReentrantReadWriteLock$Sync;.tryAcquireShared
  1.12%  perf-56198.map      [.] Lorg/apache/hadoop/hbase/protobuf/ProtobufUtil;.toCell
  1.10%  perf-56198.map      [.] Lorg/apache/hadoop/hbase/regionserver/StoreScanner;.next
  1.06%  perf-56198.map      [.] Lsun/nio/ch/SocketChannelImpl;.read
  1.01%  perf-56198.map      [.] Ljava/util/concurrent/locks/ReentrantReadWriteLock$Sync;.tryReleaseShared
  0.99%  libjvm.so           [.] CompactibleFreeListSpace::block_size(HeapWord &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;*) &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;
  0.96%  perf-56198.map      [.] Lorg/apache/hadoop/hbase/io/hfile/HFileBlockIndex$BlockIndexReader;.loadDataBlockWithScanInfo
  0.92%  [kernel]            [k] tcp_sendmsg
  0.90%  libjvm.so           [.] SpinPause
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I hack out some counters (see attached patch and below perf output), throughput goes from 380k to 425k, ~10%. If I hack out more could go faster. Need to look at making counters that have less friction.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  3.77%  perf-64390.map      [.] Lorg/apache/hadoop/hbase/util/Counter;.add
  2.79%  libjvm.so           [.] BlockOffsetArrayNonContigSpace::block_start_unsafe(void &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;*) &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;
  2.57%  perf-64390.map      [.] Lorg/apache/hadoop/hbase/io/hfile/HFileBlockIndex$BlockIndexReader;.binarySearchNonRootIndex
  1.88%  perf-64390.map      [.] Lorg/apache/hadoop/hbase/ScheduledChore;.run
  1.84%  perf-64390.map      [.] Lorg/apache/hadoop/hbase/regionserver/ScanQueryMatcher;.match
  1.76%  perf-64390.map      [.] Lorg/apache/hadoop/hbase/io/hfile/LruBlockCache;.getBlock
  1.66%  perf-64390.map      [.] Lorg/apache/hadoop/hbase/protobuf/generated/CellProtos$Cell;.writeTo
  1.66%  perf-64390.map      [.] Ljava/util/concurrent/locks/ReentrantReadWriteLock$Sync;.tryAcquireShared
  1.63%  libjvm.so           [.] ClearNoncleanCardWrapper::do_MemRegion(MemRegion)
  1.56%  [kernel]            [k] _raw_spin_lock
  1.46%  perf-64390.map      [.] 0x00007fca5698778c
  1.43%  libjvm.so           [.] CompactibleFreeListSpace::block_size(HeapWord &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;*) &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt;
  1.36%  perf-64390.map      [.] Lorg/apache/hadoop/hbase/ipc/CallRunner;.run
  1.33%  perf-64390.map      [.] Ljava/util/concurrent/locks/ReentrantReadWriteLock$Sync;.tryReleaseShared
  1.27%  perf-64390.map      [.] Lorg/apache/hadoop/hbase/protobuf/ProtobufUtil;.toCell
  1.20%  libjvm.so           [.] SpinPause
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15360431" author="stack" created="Sun, 3 Jul 2016 06:35:20 +0000"  >&lt;p&gt;Also graph of my using less and then even less counters... w/ throughput going up.&lt;/p&gt;</comment>
                            <comment id="15514741" author="ghelmling" created="Thu, 22 Sep 2016 23:08:05 +0000"  >&lt;p&gt;We&apos;ve seen Counter come up as a source of high CPU utilization in 1.3, especially since the switch of metrics to use FastLongHistogram (each instance of which uses 260 Counter instances internally) from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15222&quot; title=&quot;Use less contended classes for metrics&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15222&quot;&gt;&lt;del&gt;HBASE-15222&lt;/del&gt;&lt;/a&gt;.  I think this is due to the use of the instance-level ThreadLocal in Counter to track the per-thread cell index, as perf output on hot nodes shows a huge amount of time in ThreadLocalMap.getEntryAfterMiss().  As the number of Counter instances (and ThreadLocal instances) we&apos;re retaining in memory grows, performance seems to degrade.&lt;/p&gt;

&lt;p&gt;This is all moot for master, since we&apos;ve already deprecated Counter and replaced its usage with LongAdder.  But we still need a solution for Counter in branch-1.  I&apos;m testing a patch which removes the ThreadLocal usage, which I&apos;ll attach here.  Benchmarking shows a small reduction in Counter performance, but a big improvement in FastLongHistogram performance when many histograms are retained in memory.&lt;/p&gt;</comment>
                            <comment id="15514759" author="ghelmling" created="Thu, 22 Sep 2016 23:14:46 +0000"  >&lt;p&gt;The attached patch removes the use of an instance-level ThreadLocal in Counter to store the per-thread last used cell index.  Instead, we just recompute the hash for each access.  This comes at a bit of a cost for writes, but provides big memory savings when many counters are in use, as well as avoiding spinning in ThreadLocalMap.getEntryAfterMiss().&lt;/p&gt;</comment>
                            <comment id="15514767" author="ghelmling" created="Thu, 22 Sep 2016 23:16:51 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, I&apos;m curious if this patch provides any improvement for your YCSB workload.&lt;/p&gt;</comment>
                            <comment id="15514911" author="enis" created="Fri, 23 Sep 2016 00:20:50 +0000"  >&lt;p&gt;Maybe we can make it so that Counter just delegates to LongAdder if it is available.  &lt;/p&gt;</comment>
                            <comment id="15518004" author="ghelmling" created="Sat, 24 Sep 2016 00:37:35 +0000"  >&lt;p&gt;In master, where we can rely on LongAdder, we&apos;ve already replaced Counter with that.&lt;/p&gt;

&lt;p&gt;In branch-1, I&apos;m not sure that using reflection to call through to LongAdder when running on Java 8 is going to give us a more performant solution.  And it still won&apos;t help the situation when running on Java &amp;lt; 8.  Besides, Counter generally performs well, it just seems to degrade as more Counters are kept in memory due to the ThreadLocal usage.&lt;/p&gt;</comment>
                            <comment id="15547198" author="mantonov" created="Wed, 5 Oct 2016 00:37:20 +0000"  >&lt;p&gt;From my perspective (I have not been running YCSB with this patch though) I&apos;m +1 on it for branch-1 and branch-1.3. In some tests/workloads we did see scenarios when excessive thread locals allocations for counters in metrics cause load / latency on the hot machines to go up, impairing stability.&lt;/p&gt;</comment>
                            <comment id="15547267" author="enis" created="Wed, 5 Oct 2016 01:08:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;And it still won&apos;t help the situation when running on Java &amp;lt; 8&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;ve seen somebody fork the LongAdder / Stripe64 code internally. Not sure whether we can do that from a licensing perspective. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;In some tests/workloads we did see scenarios when excessive thread locals allocations for counters in metrics cause load / latency on the hot machines to go up, impairing stability.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;ve also seen these TLs come up in profiling, but did not spend too much time. &lt;/p&gt;

&lt;p&gt;+1 on the patch if we are not forking the code. &lt;/p&gt;</comment>
                            <comment id="15566669" author="ghelmling" created="Tue, 11 Oct 2016 21:25:54 +0000"  >&lt;p&gt;Here are some microbenchmark results for posterity.&lt;/p&gt;

&lt;p&gt;Benchmarking 32 threads updating a single Counter instance:&lt;/p&gt;

&lt;p&gt;Counter with patch (removing ThreadLocal):&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Result &quot;testCounter&quot;:
  N = 121837900
  mean =    456.286 &#177;(99.9%) 3.249 ns/op

  Percentiles, ns/op:
      p(0.0000) =     45.000 ns/op
     p(50.0000) =    232.000 ns/op
     p(90.0000) =   1138.000 ns/op
     p(95.0000) =   1600.000 ns/op
     p(99.0000) =   2648.000 ns/op
     p(99.9000) =   4456.000 ns/op
     p(99.9900) =  11824.000 ns/op
     p(99.9990) =  45903.487 ns/op
     p(99.9999) = 1528139.979 ns/op
    p(100.0000) = 31424512.000 ns/op
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Counter with ThreadLocal:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Result &quot;testCounterThreadLocal&quot;:
  N = 104204449
  mean =    412.524 &#177;(99.9%) 5.910 ns/op

  Percentiles, ns/op:
      p(0.0000) =     45.000 ns/op
     p(50.0000) =    194.000 ns/op
     p(90.0000) =    976.000 ns/op
     p(95.0000) =   1404.000 ns/op
     p(99.0000) =   2532.000 ns/op
     p(99.9000) =   4448.000 ns/op
     p(99.9900) =  11792.000 ns/op
     p(99.9990) =  41655.456 ns/op
     p(99.9999) = 4312849.000 ns/op
    p(100.0000) = 105906176.000 ns/op
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Comparison of implementations:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Benchmark                                    Mode        Cnt     Score    Error  Units
IncrementBenchmark.testAtomicLong          sample   81080122  1880.701 &#177; 14.435  ns/op
IncrementBenchmark.testCounter             sample  121837900   456.286 &#177;  3.249  ns/op
IncrementBenchmark.testCounterThreadLocal  sample  104204449   412.524 &#177;  5.910  ns/op
IncrementBenchmark.testLongAdder           sample  108712812    77.910 &#177;  1.070  ns/op
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, when operating on a single instance, the ThreadLocal version is a bit faster.&lt;/p&gt;

&lt;p&gt;However, when microbenchmarking FastLongHistogram using the two different implementations, in a semi-realistic scenario which retains 500 histograms in memory, randomly selecting 10 to update each call, with 200 threads, the cost of the ThreadLocal becomes more clear:&lt;/p&gt;

&lt;p&gt;FastLongHistogram with Counter with patch:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Result &quot;fastLong&quot;:
  N = 1373429925
  mean =  48721.146 &#177;(99.9%) 196.908 ns/op

  Percentiles, ns/op:
      p(0.0000) =   2336.000 ns/op
     p(50.0000) =   6664.000 ns/op
     p(90.0000) =   7520.000 ns/op
     p(95.0000) =   7784.000 ns/op
     p(99.0000) =   8560.000 ns/op
     p(99.9000) =  24288.000 ns/op
     p(99.9900) = 94896128.000 ns/op
     p(99.9990) = 153878528.000 ns/op
     p(99.9999) = 654311424.000 ns/op
    p(100.0000) = 2092957696.000 ns/op
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;FastLongHistogram with Counter with ThreadLocal:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Result &quot;fastLongThreadLocal&quot;:
  N = 1251201915
  mean =  84227.741 &#177;(99.9%) 1114.037 ns/op

  Percentiles, ns/op:
      p(0.0000) =   4056.000 ns/op
     p(50.0000) =   9760.000 ns/op
     p(90.0000) =  12336.000 ns/op
     p(95.0000) =  13648.000 ns/op
     p(99.0000) =  16544.000 ns/op
     p(99.9000) = 285696.000 ns/op
     p(99.9900) = 111017984.000 ns/op
     p(99.9990) = 172228608.000 ns/op
     p(99.9999) = 4445962240.000 ns/op
    p(100.0000) = 31742492672.000 ns/op
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Result summary:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Benchmark                                           Mode         Cnt      Score      Error  Units
MultiHistogramBenchmark.fastLong                  sample  1373429925  48721.146 &#177;  196.908  ns/op
MultiHistogramBenchmark.fastLongThreadLocal       sample  1251201915  84227.741 &#177; 1114.037  ns/op
MultiHistogramBenchmark.testHDRAtomic             sample  1320949956  27066.038 &#177;  177.677  ns/op
MultiHistogramBenchmark.testHDRConcurrent         sample  1330869473  26586.309 &#177;  170.456  ns/op
MultiHistogramBenchmark.testMutableTimeHistogram  sample  1322279057  53766.021 &#177;  238.439  ns/op
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So with more Counters in memory and more threads, removing the ThreadLocal usage results in a ~40% improvement, with up to an order of magnitude improvement at upper percentiles.&lt;/p&gt;

&lt;p&gt;We may still want to investigate using HDRHistogram, since its implementations outperform both versions.  But in the short term this should still be an improvement.&lt;/p&gt;</comment>
                            <comment id="15566686" author="stack" created="Tue, 11 Oct 2016 21:32:53 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="15566743" author="ghelmling" created="Tue, 11 Oct 2016 21:59:38 +0000"  >&lt;p&gt;The patches for master and branch-1 each wound up being slightly different.  Attaching all here.&lt;/p&gt;</comment>
                            <comment id="15566751" author="ghelmling" created="Tue, 11 Oct 2016 22:01:59 +0000"  >&lt;p&gt;Committed to branch-1.3, branch-1, and master.  Counter is no longer used in master, but still present as a deprecated class, so included for consistency.&lt;/p&gt;

&lt;p&gt;Thanks, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mantonov&quot; class=&quot;user-hover&quot; rel=&quot;mantonov&quot;&gt;Mikhail Antonov&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; for reviews.&lt;/p&gt;</comment>
                            <comment id="15567218" author="hudson" created="Wed, 12 Oct 2016 01:31:51 +0000"  >&lt;p&gt;FAILURE: Integrated in Jenkins build HBase-1.3-JDK8 #42 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3-JDK8/42/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3-JDK8/42/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16146&quot; title=&quot;Counters are expensive...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16146&quot;&gt;&lt;del&gt;HBASE-16146&lt;/del&gt;&lt;/a&gt; Remove thread local usage in Counter (garyh: rev dcb47c9b715c2331abe7e8ccbc1b69f24168dd97)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;(edit) hbase-common/src/main/java/org/apache/hadoop/hbase/util/Counter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15567279" author="hudson" created="Wed, 12 Oct 2016 02:06:27 +0000"  >&lt;p&gt;SUCCESS: Integrated in Jenkins build HBase-1.4 #461 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.4/461/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.4/461/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16146&quot; title=&quot;Counters are expensive...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16146&quot;&gt;&lt;del&gt;HBASE-16146&lt;/del&gt;&lt;/a&gt; Remove thread local usage in Counter (garyh: rev 4f29c230384b82b64ef4ad9ba61497747436799f)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-common/src/main/java/org/apache/hadoop/hbase/util/Counter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15567444" author="hudson" created="Wed, 12 Oct 2016 03:41:58 +0000"  >&lt;p&gt;FAILURE: Integrated in Jenkins build HBase-1.3-JDK7 #37 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3-JDK7/37/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3-JDK7/37/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16146&quot; title=&quot;Counters are expensive...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16146&quot;&gt;&lt;del&gt;HBASE-16146&lt;/del&gt;&lt;/a&gt; Remove thread local usage in Counter (garyh: rev dcb47c9b715c2331abe7e8ccbc1b69f24168dd97)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;(edit) hbase-common/src/main/java/org/apache/hadoop/hbase/util/Counter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15567624" author="hudson" created="Wed, 12 Oct 2016 05:11:59 +0000"  >&lt;p&gt;FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #1770 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-Trunk_matrix/1770/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-Trunk_matrix/1770/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16146&quot; title=&quot;Counters are expensive...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16146&quot;&gt;&lt;del&gt;HBASE-16146&lt;/del&gt;&lt;/a&gt; Remove thread local usage in Counter (garyh: rev 7b0acc292e1854b09c6cedc4dae1f6dae07779bf)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;(edit) hbase-common/src/main/java/org/apache/hadoop/hbase/util/Counter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15749571" author="stack" created="Wed, 14 Dec 2016 21:40:58 +0000"  >&lt;p&gt;Ok I backport this one &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt;?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="13004301">HBASE-16616</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12832778" name="HBASE-16146.001.patch" size="1873" author="ghelmling" created="Tue, 11 Oct 2016 21:59:38 +0000"/>
                            <attachment id="12832779" name="HBASE-16146.branch-1.001.patch" size="2527" author="ghelmling" created="Tue, 11 Oct 2016 21:59:38 +0000"/>
                            <attachment id="12829953" name="HBASE-16146.branch-1.3.001.patch" size="1643" author="ghelmling" created="Thu, 22 Sep 2016 23:14:46 +0000"/>
                            <attachment id="12815944" name="counters.patch" size="8896" author="stack" created="Sun, 3 Jul 2016 06:35:19 +0000"/>
                            <attachment id="12815945" name="less_and_less_counters.png" size="22646" author="stack" created="Sun, 3 Jul 2016 06:35:19 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 22 Sep 2016 23:08:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30bzz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>