<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:21:08 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-11208/HBASE-11208.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-11208] Remove the hbase.hstore.blockingStoreFiles setting</title>
                <link>https://issues.apache.org/jira/browse/HBASE-11208</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;It&apos;s a little bit of a provocation, but the rational is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;there are some bugs around the delayed flush. For example, if the periodic scheduler has asked for a delayed flush, and that we need to flush, we will have to wait&lt;/li&gt;
	&lt;li&gt;if the number of WAL files increases, we won&apos;t flush immediately if the blockingFile number has been reached. This impacts the MTTR.&lt;/li&gt;
	&lt;li&gt;We don&apos;t write to limit the compaction impact, but they are many cases where we would want to flush anyway, as the writes cannot wait.&lt;/li&gt;
	&lt;li&gt;this obviously leads to huge write latency peaks.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So I&apos;m questioning this setting, it leads to multiple intricate cases, unpredictable write latency, and looks like a workaround for compaction performances. With all the work done on compaction, I think we can get rid of it.  A solution in the middle would be to deprecate it and to set it to a large value...&lt;/p&gt;

&lt;p&gt;Any opinion before I shoot &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ? &lt;/p&gt;

</description>
                <environment></environment>
        <key id="12715466">HBASE-11208</key>
            <summary>Remove the hbase.hstore.blockingStoreFiles setting</summary>
                <type id="13" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/genericissue.png">Brainstorming</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="nkeywal">Nicolas Liochon</assignee>
                                    <reporter username="nkeywal">Nicolas Liochon</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 May 2014 13:09:50 +0000</created>
                <updated>Tue, 9 Sep 2014 03:03:41 +0000</updated>
                                            <version>0.99.0</version>
                                    <fixVersion>2.0.0</fixVersion>
                                    <component>Compaction</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="14003455" author="stack" created="Tue, 20 May 2014 15:34:53 +0000"  >&lt;p&gt;This config was always a hack.  I&apos;d be game for bringing on a new context &amp;#8211; i.e. one where this config is gone, or at least has been way upped &amp;#8211; but would be interested in thinking around how we&apos;d then prevent condition where a region can get filled with hundreds of hfiles.  Client push-back?&lt;/p&gt;</comment>
                            <comment id="14003484" author="apurtell" created="Tue, 20 May 2014 15:37:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;Client push-back&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5162&quot; title=&quot;Basic client pushback mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5162&quot;&gt;&lt;del&gt;HBASE-5162&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14003641" author="lhofhansl" created="Tue, 20 May 2014 17:05:30 +0000"  >&lt;p&gt;Whoa... This is the one mechanism HBase has to limit writes when writes come in faster than the hardware (the IO system) can absorb. The only other mechanism is OOM&apos;ing.&lt;br/&gt;
How else do you purpose throttling clients?&lt;/p&gt;</comment>
                            <comment id="14004344" author="nkeywal" created="Wed, 21 May 2014 04:45:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;The only other mechanism is OOM&apos;ing.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;With this setting we&apos;re actually putting more pressure to the memory, by delaying the flush instead of writing the file. It lowers the pressure on the namenode and on the compaction (as we create less files), but we use more memory.&lt;/p&gt;

&lt;p&gt;The gbif team has changed this parameter to 200 (see &lt;a href=&quot;http://gbif.blogspot.fr/2012/07/optimizing-writes-in-hbase.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://gbif.blogspot.fr/2012/07/optimizing-writes-in-hbase.html&lt;/a&gt;), and, as far as I can tell, it&apos;s not an uncommon practice. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5162&quot; title=&quot;Basic client pushback mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5162&quot;&gt;&lt;del&gt;HBASE-5162&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;How else do you purpose throttling clients?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We have two parameters for OOM:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the block multiplier (not the ideal way imho, as said in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11209&quot; title=&quot;Increase the default value for hbase.hregion.memstore.block.multipler from 2 to 4&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11209&quot;&gt;&lt;del&gt;HBASE-11209&lt;/del&gt;&lt;/a&gt;)&lt;/li&gt;
	&lt;li&gt;the memory we allocate globally for the memstore: we block the writes if we reach this level.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I feel that we can remove this setting even if &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5162&quot; title=&quot;Basic client pushback mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5162&quot;&gt;&lt;del&gt;HBASE-5162&lt;/del&gt;&lt;/a&gt; is not there... But of course, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5162&quot; title=&quot;Basic client pushback mechanism&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5162&quot;&gt;&lt;del&gt;HBASE-5162&lt;/del&gt;&lt;/a&gt;  would be great to have. I will have a look as well.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;we&apos;d then prevent condition where a region can get filled with hundreds of hfiles. Client push-back?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Should we not be able to do more compactions in parallel in such a case?&lt;/p&gt;

&lt;p&gt;The issue with client push back is that it creates write latency.&lt;/p&gt;</comment>
                            <comment id="14004936" author="nkeywal" created="Wed, 21 May 2014 17:15:18 +0000"  >&lt;p&gt;BTW, by changing this on a YCSB load test, I divided the max latency by 3 (from 45s to 15s). &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11226&quot; title=&quot;Document and increase the default value for hbase.hstore.flusher.count&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11226&quot;&gt;&lt;del&gt;HBASE-11226&lt;/del&gt;&lt;/a&gt; adds another division by 3, and this leads us in 5s max latency. YMMV (obviously), but I like what I&apos;m seeing here &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14007459" author="nkeywal" created="Fri, 23 May 2014 17:54:13 +0000"  >&lt;p&gt;I&apos;m thinking about changing the setting to max int in trunk, to see what happens. Any opinion?&lt;/p&gt;</comment>
                            <comment id="14086514" author="sershe" created="Tue, 5 Aug 2014 17:33:52 +0000"  >&lt;p&gt;Makes sense to me... &lt;/p&gt;</comment>
                            <comment id="14086523" author="lhofhansl" created="Tue, 5 Aug 2014 17:41:11 +0000"  >&lt;p&gt;There are two issues: OOMs and read performance.&lt;/p&gt;

&lt;p&gt;We&apos;d then need another way than to &quot;configure&quot; HBase for read vs. write loads. This setting is what puts an upper bound on acceptable read performance by limiting the number of HFiles a scan has to look through - at the expense of blocking writers if they write faster than the IO subsystem can absorb. The key is some mechanism to force HBase to slow clients down or block them completely from writing if some &quot;guaranteed&quot; read performance is desired.&lt;/p&gt;</comment>
                            <comment id="14086587" author="stack" created="Tue, 5 Aug 2014 18:27:48 +0000"  >&lt;p&gt;Other problems with this config as it currently works:&lt;/p&gt;

&lt;p&gt;+ Stops the write dead in its tracks. Write throughput goes to zero.  Looks like a bug to the innocent user.&lt;br/&gt;
+ It makes the current &apos;live&apos; client suffer so a background process does not get &apos;overwhelmed&apos;.  Its like walking into a store, getting up ot the counter, and then the salesperson answers the phone and takes care of the caller&apos;s query ahead of yours.&lt;/p&gt;

&lt;p&gt;Removing this config ameliorates rather than aggravates memory pressure since we are letting the flush proceed. &lt;/p&gt;

&lt;p&gt;On other hand hundreds of hfiles under a column family (we&apos;ve seen thousands IIRC) is a bit of a perf killer (smile) and difficult to recover from.&lt;/p&gt;

&lt;p&gt;Making writes second class to reads is a legit use case but think we need a less coarse means of blocking than count of hfiles (if a multiput, we block the whole multiput succeeding rather than just the puts to this overwhelmed cf?)&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 May 2014 15:34:53 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>393752</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 19 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1vstz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>393907</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>