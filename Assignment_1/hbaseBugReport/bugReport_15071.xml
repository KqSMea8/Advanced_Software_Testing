<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:59:16 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-15071/HBASE-15071.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-15071] Cleanup bypass semantic in MasterCoprocessorHost</title>
                <link>https://issues.apache.org/jira/browse/HBASE-15071</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Lets decide on this one before we release 2.0.0.&lt;/p&gt;

&lt;p&gt;A bunch of methods in MasterCoprocessorHost on the &apos;pre&apos; step allow returning true which indicates the method invocation is not to proceed.&lt;/p&gt;

&lt;p&gt;Not all &apos;pre&apos; steps do this. Just some.&lt;/p&gt;

&lt;p&gt;Seems a little arbitrary.&lt;/p&gt;

&lt;p&gt;How we skip out if we are not proceed with the invocation is also a little arbitrary.&lt;/p&gt;

&lt;p&gt;When a deleteColumn call is supposed to skip out, it returns a -1, a non-procId. If we are to skip a balance call, we log that CP said skip and then return false to indicate the balancer did not run (why?). Elsewhere we just exit silently. In createNamespace we used to exit silently but &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14888&quot; title=&quot;ClusterSchema: Add Namespace Operations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14888&quot;&gt;&lt;del&gt;HBASE-14888&lt;/del&gt;&lt;/a&gt; just changed it so we throw a BypassCoprocessorException instead... &lt;/p&gt;

&lt;p&gt;Lets make them all work the same way.&lt;/p&gt;

&lt;p&gt;(This issue comes of chat w/ Matteo)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12927336">HBASE-15071</key>
            <summary>Cleanup bypass semantic in MasterCoprocessorHost</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Tue, 5 Jan 2016 19:19:00 +0000</created>
                <updated>Fri, 8 Jan 2016 03:08:47 +0000</updated>
                                            <version>2.0.0</version>
                                                    <component>Coprocessors</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="15083635" author="mbertozzi" created="Tue, 5 Jan 2016 19:37:26 +0000"  >&lt;p&gt;the bypass() documentation says&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Call to indicate that the current coprocessor&apos;s return value should be used in place of the normal HBase obtained value.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;so in my opinion bypass() make sense for stuff that return a value, like the get/scanners.&lt;br/&gt;
bypassing an addColumn() or a createTable() probably does not make any sense. is anyone doing its own create instead of an hbase create? how the new stuff created/added by a non hbase will play with the rest of the system?&lt;br/&gt;
maybe we can just remove the bypass boolean for operation that do not make sense.&lt;/p&gt;</comment>
                            <comment id="15084610" author="chenheng" created="Wed, 6 Jan 2016 03:11:54 +0000"  >&lt;p&gt;Sounds reasonable.  Let me take it, OK?&lt;/p&gt;</comment>
                            <comment id="15084959" author="chenheng" created="Wed, 6 Jan 2016 04:04:37 +0000"  >&lt;blockquote&gt;
&lt;p&gt;A bunch of methods in MasterCoprocessorHost on the &apos;pre&apos; step allow returning true which indicates the method invocation is not to proceed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Currently,  a lot of methods use this return value to decide whether proceed or not.  IMO &quot;exception&quot; is a better way to interrupt the process just like AccessController#preCreateTable etc.  And the bypass value should be used( &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt; mentioned above ) as comments said.&lt;/p&gt;</comment>
                            <comment id="15084985" author="apurtell" created="Wed, 6 Jan 2016 05:05:47 +0000"  >&lt;p&gt;Interrupts could work as long as they&apos;re not thrown back to the client. The notion of bypass is actions on the server in core code should be skipped with control handed back to the client as a normal return.&lt;/p&gt;</comment>
                            <comment id="15085064" author="chenheng" created="Wed, 6 Jan 2016 06:44:01 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Interrupts could work as long as they&apos;re not thrown back to the client. The notion of bypass is actions on the server in core code should be skipped with control handed back to the client as a normal return.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Currently, if operations have no return value (e.g. createNamespace/modifyNamespace etc.),  we use the bypass returned to skip actions and exit silently without any notifications to client.  I don&apos;t think it is a good way,  even an exception to client will make our user more clearly what happens after his request, right?&lt;/p&gt;</comment>
                            <comment id="15085071" author="apurtell" created="Wed, 6 Jan 2016 06:47:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t think it is a good way, even an exception to client will make our user more clearly what happens after his request, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The point of bypass is to skip further core code processing. The coprocessor says it has taken care of everything, time to return back to the client taking no further action. What you propose directly contravenes this semantic in place everywhere a coprocessor can call bypass()&lt;/p&gt;</comment>
                            <comment id="15085087" author="chenheng" created="Wed, 6 Jan 2016 06:57:22 +0000"  >&lt;blockquote&gt;
&lt;p&gt;The point of bypass is to skip further core code processing. The coprocessor says it has taken care of everything, time to return back to the client taking no further action. What you propose directly contravenes this semantic in place everywhere a coprocessor can call bypass()&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Hmm...  Sounds reasonable...   &lt;br/&gt;
So we should make all &quot;pre&quot; actions respect bypass returned (e.g.  preDeleteTable did not return bypass, we should return it and respect it ), right?  &lt;/p&gt;

&lt;p&gt;There are some special case, e.g. preGetNamespaceDescriptor, currently it return nothing, but as bypass logic,  it should return one &lt;tt&gt;NamespaceDescriptor&lt;/tt&gt; instance and the caller will use bypass to decide whether we should return it to client or not, but if so, it will be incompatible with old observer.  &lt;/p&gt;

&lt;p&gt;Or we can just comment the interface &quot;it can&apos;t bypass  the default action&quot; just like preListSnapshot did now.  And i notice except &lt;tt&gt;preBalanceSwitch&lt;/tt&gt;, all interfaces in MasterObserver return nothing, is it means we just bypass the default action and return something arbitrary is fine?  If so, maybe we should modify the semantic of bypass..... &lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; for your reply.&lt;/p&gt;</comment>
                            <comment id="15085961" author="stack" created="Wed, 6 Jan 2016 18:05:51 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The coprocessor says it has taken care of everything, time to return back to the client taking no further action. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The above blanket statement tears when hung on our current API. If the method is to return a procedure id &amp;#8211; i.e. it is an async call and the id of the precedure that the method started/added to the procedure work queue &amp;#8211; then what are we to do in this case when CP says bypass? (See create/delete/modify NS). Currently there is no such thing as a non-procedure identifier. We could add one but the fact that a CP can call &apos;bypass&apos; on this method remains nonsense (I suppose the CP could schedule the procedure itself, somehow, and thereafter manage all interaction &amp;#8211; but lets not go here). This is one example. There are others including the one where CP says bypass and then we return an empty response when what is probably intended is that we somehow return a response from CP&apos;s pre-call (only in most cases, there is no mechanism to do so).&lt;/p&gt;</comment>
                            <comment id="15085980" author="mbertozzi" created="Wed, 6 Jan 2016 18:17:16 +0000"  >&lt;p&gt;I don&apos;t think the problem is procedure. &lt;br/&gt;
the client is able to interpret a missing procId, and fallback to a waiting logic. &lt;br/&gt;
for example, waiting when the table is available on create. or checking if the table does not exist anymore on delete.&lt;br/&gt;
if you don&apos;t implement that fallback logic on the client you assume the server did everything synchronously and when you get back the response you are done and there are no error. the client with the proc code is already able to do that without any changes.&lt;/p&gt;

&lt;p&gt;the problem here is. what bypass mean for things that are not returning values&lt;br/&gt;
who is creating a table or adding a column? does that make sense or at least play well with all the assumptions we have around the code base? if someone does the operation for us and call bypass, that must be synchronous otherwise we can just guess on what to wait for&lt;/p&gt;</comment>
                            <comment id="15086047" author="apurtell" created="Wed, 6 Jan 2016 18:48:39 +0000"  >&lt;p&gt;Bypass should only be called from a CP that knows what it is doing. Can&apos;t and shouldn&apos;t expect to be able to dumb this down. Use of CPs isn&apos;t for everyone. &lt;/p&gt;

&lt;p&gt;FWIW, we already exclude some hooks from allowing a bypass. (Documented in Javadoc.. yeah). &lt;/p&gt;</comment>
                            <comment id="15086053" author="apurtell" created="Wed, 6 Jan 2016 18:52:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;So we should make all &quot;pre&quot; actions respect bypass returned (e.g. preDeleteTable did not return bypass, we should return it and respect it ), right? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I recall discussions where it was thought allowing bypass in every circumstance wasn&apos;t the right thing to do. We have some hooks where bypass isn&apos;t allowed. This is documented in their Javadoc.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If so, maybe we should modify the semantic of bypass....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can&apos;t do this in a minor release. Could do it for a major release. I do wonder if any coprocessor is making use of it. We could remove the semantic entirely for 2.0 and simplify some aspects of CPs a great deal.&lt;/p&gt;</comment>
                            <comment id="15086058" author="apurtell" created="Wed, 6 Jan 2016 18:55:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;the problem here is. what bypass mean for things that are not returning values who is creating a table or adding a column? does that make sense or at least play well with all the assumptions we have around the code base?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Increasingly difficult to make sense of, yes. See above where I remarked to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=chenheng&quot; class=&quot;user-hover&quot; rel=&quot;chenheng&quot;&gt;Heng Chen&lt;/a&gt; we could remove the bypass semantic in 2.0. It&apos;s a big deal but one can make the argument that a semantic increasingly difficult (or impossible) to manage as the code evolves is one that should be put on the chopping block. &lt;/p&gt;</comment>
                            <comment id="15086729" author="chenheng" created="Thu, 7 Jan 2016 03:20:32 +0000"  >&lt;p&gt;Currently, the usages of bypass in MasterCoprocessorHost:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;we ignore &apos;bypass&apos; and comment it in JavaDoc,  e.g. preListSnapshot/deleteTable/truncateTable&lt;/li&gt;
	&lt;li&gt;skip the default action and return something arbitrary.  e.g. deleteColumn/addColumn (it return -1, not a procedure id),  getNamespaces/listTableDescriptors (it return empty list)&lt;/li&gt;
	&lt;li&gt;skip the default action and throw exception.  e.g. deleteNamespace/createNamespace/modifyNamespace&lt;/li&gt;
	&lt;li&gt;skip default action and return nothing when caller has nothing to return.   e.g. preMove/&lt;/li&gt;
	&lt;li&gt;skip the default action and return the coprocessor&apos;s returned value. e.g. preBalanceSwitch (the implementation has some trick)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;IMO 2,3 contravenes semantic of &apos;bypass&apos;,  we could unify them firstly.  As &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt; suggestion,  some methods could just ignore &apos;bypass&apos;,  wdyt?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are others including the one where CP says bypass and then we return an empty response when what is probably intended is that we somehow return a response from CP&apos;s pre-call (only in most cases, there is no mechanism to do so).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; mentioned above,  if we want keep the semantic of &apos;bypass&apos;, we also need a mechanism to return pre-call response to client.  This is the 5th situation.&lt;/p&gt;
</comment>
                            <comment id="15088629" author="chenheng" created="Fri, 8 Jan 2016 03:08:47 +0000"  >&lt;p&gt;Make a patch.&lt;br/&gt;
Now in MasterCoprocessorHost&lt;/p&gt;

&lt;p&gt;only preMove/preBalance/preBalanceSwitch/preAssign/preUnAssign will respect &apos;bypass&apos;,  the other interfaces will just ignore it. And I make some comments on relates interfaces.&lt;/p&gt;

&lt;p&gt;On the side, preBalance/preAssign/preUnassign will be modified according &apos;bypass&apos; semantic.  Due to code compatible,  i just comment it in &apos;TODO&apos;.&lt;/p&gt;

&lt;p&gt;Any suggestions?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12781131" name="HBASE-15071.patch" size="29499" author="chenheng" created="Fri, 8 Jan 2016 03:08:47 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 5 Jan 2016 19:37:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            49 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2qtdz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>