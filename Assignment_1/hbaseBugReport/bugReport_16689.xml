<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:16:47 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-16689/HBASE-16689.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-16689] Durability == ASYNC_WAL means no SYNC</title>
                <link>https://issues.apache.org/jira/browse/HBASE-16689</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Setting DURABILITY=ASYNC_WAL on a Table suspends all syncs for all table Table appends. If all tables on a cluster have this setting, data is flushed from the RS to the DN at some arbitrary time and a bunch may just hang out in DFSClient buffers on the RS-side indefinitely if writes are sporadic, at least until there is a WAL roll &amp;#8211; a log roll sends a sync through the write pipeline to flush out any outstanding appends &amp;#8211; or a region close which does similar.... or we crash and drop the data in buffers RS.&lt;/p&gt;

&lt;p&gt;This is probably not what a user expects when they set ASYNC_WAL (We don&apos;t doc anywhere that I could find clearly what ASYNC_WAL means). Worse, old-time users probably associate ASYNC_WAL and DEFERRED_FLUSH, an old HTableDescriptor config that was deprecated and replaced by ASYNC_WAL. DEFERRED_FLUSH ran a background thread &amp;#8211; LogSyncer &amp;#8211; that on a configurable interval, sent a sync down the write pipeline so any outstanding appends since last last interval start get pushed out to the DN.  ASYNC_WAL doesn&apos;t do this (see below for history on how we let go of the LogSyncer feature).&lt;/p&gt;

&lt;p&gt;Of note, we always sync meta edits. You can&apos;t turn this off. Also, given WALs are per regionserver, if other regions on the RS are from tables that have sync set, these writes will push out to the DN any appends done on tables that have DEFERRED/ASYNC_WAL set.&lt;/p&gt;

&lt;p&gt;To fix, we could do a few things:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Simple and comprehensive would be always queuing a sync, even if ASYNC_WAL is set but we let go of Handlers as soon as we write the memstore &amp;#8211; we don&apos;t wait on the sync to complete as we do with the default setting of Durability=SYNC_WAL.&lt;/li&gt;
	&lt;li&gt;Be like a &apos;real&apos; database and add in a sync after N bytes of data have been appended (configurable) or after M milliseconds have passed, which ever threshold happens first. The size check would be easy. The sync-ever-M-millis would mean another thread.&lt;/li&gt;
	&lt;li&gt;Doc what ASYNC_WAL means (and other durability options)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Let me take a look and report back. Will file a bit of history on how we got here in next comment.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13007036">HBASE-16689</key>
            <summary>Durability == ASYNC_WAL means no SYNC</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="stack">stack</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Fri, 23 Sep 2016 04:19:50 +0000</created>
                <updated>Mon, 24 Oct 2016 03:58:43 +0000</updated>
                                            <version>1.0.3</version>
                    <version>1.1.6</version>
                    <version>1.2.3</version>
                                                    <component>wal</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                <comments>
                            <comment id="15515385" author="stack" created="Fri, 23 Sep 2016 04:38:14 +0000"  >&lt;h1&gt;&lt;a name=&quot;History&quot;&gt;&lt;/a&gt;History&lt;/h1&gt;

&lt;p&gt;We committed the below in time for 0.98.0:&lt;/p&gt;

&lt;p&gt;Author: Michael Stack &amp;lt;stack@apache.org&amp;gt;&lt;br/&gt;
Date:   Fri Dec 13 17:32:09 2013 +0000&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8755&quot; title=&quot;A new write thread model for HLog to improve the overall HBase write throughput&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8755&quot;&gt;&lt;del&gt;HBASE-8755&lt;/del&gt;&lt;/a&gt; A new write thread model for HLog to improve the overall HBase write throughput&lt;/p&gt;

&lt;p&gt;    git-svn-id: &lt;a href=&quot;https://svn.apache.org/repos/asf/hbase/trunk@1550778&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/hbase/trunk@1550778&lt;/a&gt; 13f79535-47bb-0310-9956-ffa450edef68&lt;/p&gt;

&lt;p&gt;It removed the LogSyncer thread because it didn&apos;t fit the new model..... From comments in above issue:&lt;/p&gt;

&lt;p&gt;+   * 6). No LogSyncer thread any more (since there is always AsyncWriter/AsyncFlusher threads&lt;br/&gt;
+   *     do the same job it does)&lt;/p&gt;

&lt;p&gt;And from reviews:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[stack] How does deferred log flush still work when you remove stuff like optionalFlushInterval? You say &apos;...don&apos;t pend on HLog.syncer() waiting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; its txid to be sync-ed&apos; but that is another behavior than what we had here previously.
===&amp;gt; When say &apos;still support deferred log flush&apos; I mean &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &apos;deferred log flush&apos; it can still response write success to client without wait/pend on syncer(txid),
in &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; sense, the AsyncWriter/AsyncSyncer &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; what the previous LogSyncer does from the point view of the write handler threads: clients don&apos;t wait &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the write persist before get reponse success.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The above got further clarification over in  &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10324&quot; title=&quot;refactor deferred-log-flush/Durability related interface/code/naming to align with changed semantic of the new write thread model&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10324&quot;&gt;&lt;del&gt;HBASE-10324&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&quot;By the &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; write thread model introduced by HBASE-8755, some deferred-log-flush/Durability API/code/names should be change accordingly:
1. no timer-triggered deferred-log-flush since flush is always done by async threads, so configuration &apos;hbase.regionserver.optionallogflushinterval&apos; is no longer needed
2. the async writer-syncer-notifier threads will always be triggered implicitly, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; semantic is that it always holds that &apos;hbase.regionserver.optionallogflushinterval&apos; &amp;gt; 0, so deferredLogSyncDisabled in HRegion.java which affects durability behavior should always be &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
3. what HTableDescriptor.isDeferredLogFlush really means is the write can &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; without waiting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the sync is done, so the &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; name should be changed to isAsyncLogFlush/setAsyncLogFlush to reflect their real meaning&quot;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Reading the patch, we just always did sync. There was no support for deferred.&lt;/p&gt;

&lt;p&gt;In 1.0.0, a new WAL refactor was brought in by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10156&quot; title=&quot;FSHLog Refactor (WAS -&amp;gt; Fix up the HBASE-8755 slowdown when low contention)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10156&quot;&gt;&lt;del&gt;HBASE-10156&lt;/del&gt;&lt;/a&gt;. It removed all vestiges of deferred. They weren&apos;t working anyways. But it also changed the model. It added support for durability with a variety of actions dependent on how durability is set. ASYNC_WAL became a pass through for sync.&lt;/p&gt;</comment>
                            <comment id="15515511" author="carp84" created="Fri, 23 Sep 2016 05:58:29 +0000"  >&lt;p&gt;+1, we also found this during benchmark testing weeks ago but didn&apos;t find a good way to fix it, and since there will always be some SYNC call online, we mark this as relatively low priority on our side. Already got some idea about how to fix this sir? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;btw, we also found that because currently we are using one disruptor per WAL and the disruptor is consumed in sequential, we&apos;ve seen more contention among different regions under high write pressure. I got a patch at hand and will open another JIRA to tell more details soon, JFYI.&lt;/p&gt;</comment>
                            <comment id="15517444" author="carp84" created="Fri, 23 Sep 2016 20:10:55 +0000"  >&lt;p&gt;Have opened &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16698&quot; title=&quot;Performance issue: handlers stuck waiting for CountDownLatch inside WALKey#getWriteEntry under high writing workload&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16698&quot;&gt;HBASE-16698&lt;/a&gt; about issue mentioned above.&lt;/p&gt;</comment>
                            <comment id="15596441" author="stack" created="Fri, 21 Oct 2016 21:33:18 +0000"  >&lt;p&gt;Doc on how our WAL Write works.&lt;/p&gt;</comment>
                            <comment id="15596595" author="stack" created="Fri, 21 Oct 2016 22:52:15 +0000"  >&lt;p&gt;If ASYNC_WAL, the most data you could lose in a crash of the RegionServer currently is ~dfs.client-write-packet-size (default=64k).&lt;/p&gt;

&lt;p&gt;The DFSOutputStream takes writes until it gets a DFSPacket-ful. It then queues the packet for the data DFSOS#Streamer thread to send down the DN pipeline for the DFSOS#Streamer#ResponseProcessor to ACK back. W/o syncs, there is a continuous fill the packet, send, and so on. Syncs mess up the rhythm by cutting the DFSPacket off before it fills not returning until the ResponseProcessor ACKs-back that the cut-off packet was sent.&lt;/p&gt;

&lt;p&gt;Unfortunately DFSOS is opaque giving us no insight on where it is in the above back and forth. We could try proxying the state by sizing our append and taking action at DFSPacket size hoping we align w/ DFSOS internals but unsatisfactory.&lt;/p&gt;

&lt;p&gt;When no sync&apos;ing we run much faster and the above packet flow seems to keep up w/ our append rate (Needs exposure).&lt;/p&gt;

&lt;p&gt;The &apos;fix&apos; here is, yuck, a (yet-another!) watcher thread. It wakes up every N ms and looks to see if unsynced data in the WAL and if so, sends in a sync.&lt;/p&gt;</comment>
                            <comment id="15599185" author="carp84" created="Sun, 23 Oct 2016 06:39:18 +0000"  >&lt;p&gt;Great doc! Will there be an umbrella tracking all TODOs mentioned in doc? Cannot wait to see the coming optimizations (smile).&lt;/p&gt;</comment>
                            <comment id="15600864" author="stack" created="Mon, 24 Oct 2016 03:58:43 +0000"  >&lt;p&gt;The TODOs are tests on my part to garner better evidence for the &apos;findings&apos; listed in the doc. Let me try them out to make the doc better.  But yeah, lets get a bit organized hereabouts. The SEDA core is coming up again &amp;#8211; as you note elsewhere &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt; &amp;#8211; but this time bubbling up out of questions around how to make the WAL go faster. Lets take up that baton again.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 23 Sep 2016 05:58:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i33zjb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>