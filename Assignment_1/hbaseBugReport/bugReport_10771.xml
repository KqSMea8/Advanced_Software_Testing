<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:16:59 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10771/HBASE-10771.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10771] Primitive type put/get APIs in ByteRange </title>
                <link>https://issues.apache.org/jira/browse/HBASE-10771</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;While doing &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10713&quot; title=&quot;A MemStore implementation with in memory flushes to CellBlocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10713&quot;&gt;&lt;del&gt;HBASE-10713&lt;/del&gt;&lt;/a&gt; I came across the need to write int/long (and read also) from a ByteRange.  CellBlocks are backed by ByteRange. So we can add such APIs.&lt;/p&gt;

&lt;p&gt;Also as per &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10750&quot; title=&quot;Pluggable MemStoreLAB&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10750&quot;&gt;&lt;del&gt;HBASE-10750&lt;/del&gt;&lt;/a&gt;  we return a ByteRange from MSLAB and also discussion under &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10191&quot; title=&quot;Move large arena storage off heap&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10191&quot;&gt;HBASE-10191&lt;/a&gt; suggest we can have BR backed HFileBlocks etc.  &lt;/p&gt;</description>
                <environment></environment>
        <key id="12701842">HBASE-10771</key>
            <summary>Primitive type put/get APIs in ByteRange </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="anoop.hbase">Anoop Sam John</assignee>
                                    <reporter username="anoop.hbase">Anoop Sam John</reporter>
                        <labels>
                    </labels>
                <created>Mon, 17 Mar 2014 09:17:16 +0000</created>
                <updated>Sat, 21 Feb 2015 23:31:09 +0000</updated>
                            <resolved>Sun, 15 Jun 2014 10:55:23 +0000</resolved>
                                                    <fixVersion>0.99.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13937583" author="ram_krish" created="Mon, 17 Mar 2014 09:19:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;also discussion under &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10191&quot; title=&quot;Move large arena storage off heap&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10191&quot;&gt;HBASE-10191&lt;/a&gt; suggest we can have BR backed HFileBlocks etc.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes.  Am trying to work on the HFileBlock layer and we found the need for having such getXXX and putXXX type of APIs.  Once we have this JIRA we could refactor our code based on this.&lt;/p&gt;</comment>
                            <comment id="13937964" author="apurtell" created="Mon, 17 Mar 2014 16:10:09 +0000"  >&lt;p&gt;+1 necessary next step&lt;/p&gt;</comment>
                            <comment id="13937983" author="ndimiduk" created="Mon, 17 Mar 2014 16:24:41 +0000"  >&lt;p&gt;Correct me if I&apos;m wrong, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt;, but my understanding of the ByteRange API design was in part to explicitly &lt;b&gt;not&lt;/b&gt; include all these get/setXXX methods, allowing the focus to be just on the bytes themselves and necessary position state for reading them.&lt;/p&gt;</comment>
                            <comment id="13937989" author="apurtell" created="Mon, 17 Mar 2014 16:29:47 +0000"  >&lt;p&gt;Well then you will force us to not use ByteRange for doing anything useful with non-byte[] backed data, right?&lt;/p&gt;</comment>
                            <comment id="13938001" author="apurtell" created="Mon, 17 Mar 2014 16:36:03 +0000"  >&lt;p&gt;I suppose we could create a class ByteRangeUtil and put some static methods there. Or similar.&lt;/p&gt;</comment>
                            <comment id="13938140" author="mcorgan" created="Mon, 17 Mar 2014 18:12:46 +0000"  >&lt;p&gt;Nick, I think I was mainly concerned about ByteRanges having a &quot;position&quot; field, preferring that multiple readers of the ByteRange each tracked their own position.&lt;/p&gt;

&lt;p&gt;I don&apos;t see a problem adding setXXX methods.  Just need to clear the cachedHashCode on any modifications.&lt;/p&gt;</comment>
                            <comment id="13943357" author="hadoopqa" created="Fri, 21 Mar 2014 18:34:00 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12636051/HBASE-10771.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12636051/HBASE-10771.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12636051&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.regionserver.wal.TestLogRolling.testLogRollOnDatanodeDeath(TestLogRolling.java:368)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9064//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13943739" author="ndimiduk" created="Fri, 21 Mar 2014 23:51:56 +0000"  >&lt;p&gt;Boilerplate looks good to me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13944092" author="anoop.hbase" created="Sat, 22 Mar 2014 14:45:27 +0000"  >&lt;p&gt;Ping &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt;&lt;br/&gt;
Any more types support needed Ram?&lt;/p&gt;</comment>
                            <comment id="13944173" author="apurtell" created="Sat, 22 Mar 2014 18:21:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;Any more types support needed &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Since you asked.&lt;/p&gt;

&lt;p&gt;Encode or decode in place of zero-compressed long values could be helpful. Otherwise we would need to encode into a temporary byte[] and then copy the result. Not sure it would make a difference but can&apos;t hurt. Call these getVLong and putVLong. &lt;/p&gt;</comment>
                            <comment id="13944245" author="mcorgan" created="Sat, 22 Mar 2014 21:38:08 +0000"  >&lt;p&gt;Looks ok to me&lt;/p&gt;</comment>
                            <comment id="13944405" author="anoop.hbase" created="Sun, 23 Mar 2014 10:56:30 +0000"  >&lt;p&gt;That should be good to add Andy.  If no objections I can add..  &lt;/p&gt;</comment>
                            <comment id="13944779" author="ram_krish" created="Mon, 24 Mar 2014 06:30:39 +0000"  >&lt;p&gt;I think we could name the put() as putInt, putShort, putLong and can have the variant with index as param also. &lt;br/&gt;
Also &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  /**
+   * Store {@code buf} another {@link PositionedByteRange} into the current one
+   * @param buf
+   *          the byterange to store.
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void put(PositionedByteRange buf);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  /**
+   * Compares the &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; retrieved from the {@link PositionedByteRange} with the specifed &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] b
+   * @param srcOffset - offset from which the source has to be read &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; comparison
+   * @param srcLength - length upto which the source has to be compared
+   * @param b - &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array with comparison is to happen
+   * @param offset - offset of the array to be compared
+   * @param length - length of the array to be compared
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; compare(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; srcOffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; srcLength, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] b, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length);
+
+  /**
+   * Store {@code buf} another {@link PositionedByteRange} into the current one
+   * @param buf
+   *          the byterange to store.
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void put(PositionedByteRange buf);
+  
+  /**
+   * Copies the bytes from the {@link PositionedByteRange} to the destination &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array
+   * @param srcOffset - offset from which the copy should happen
+   * @param dest -  &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array into which the elements should be copied
+   * @param destOffset - offset of the &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array from which the copy should happen
+   * @param length - length to be copied
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void copy(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; srcOffset, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] dest, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; destOffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are things that may be needed.  I created other apis like setLimit and getLimit also to mock the ByteBuffer related things.  but that we can add later also.&lt;/p&gt;
</comment>
                            <comment id="13944784" author="ram_krish" created="Mon, 24 Mar 2014 06:46:43 +0000"  >&lt;p&gt;Like we have shallowCopy we may need some ways to actually create a copy of the BR but one that has limits and postion being &apos;reset&apos;  and the other where we just create a copy with the existing limit and position.  We may end up in such scenarios.&lt;/p&gt;</comment>
                            <comment id="13944787" author="anoop.hbase" created="Mon, 24 Mar 2014 06:56:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think we could name the put() as putInt, putShort, putLong and can have the variant with index as param also. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;WIth index as param,  APIs are there in BR (in the patch)&lt;br/&gt;
I thought it will be better to overload the same name with diff arguments. (Like OutputStream write etc). If u strongly feel otherwise I can change.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;public void put(PositionedByteRange buf);&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 for this.  API can take offset and length also.  May be it can be an overloaded one.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;public int compare(int srcOffset, int srcLength, byte[] b, int offset, int length);&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not sure..  I feel these should go to some sort of comparator impl.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;public void copy(int srcOffset, byte[] dest, int destOffset, int length);&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We have this ,get(int index, byte[] dst, int offset, int length),  same as copy.&lt;/p&gt;</comment>
                            <comment id="13944790" author="ram_krish" created="Mon, 24 Mar 2014 07:03:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;We have this ,get(int index, byte[] dst, int offset, int length), same as copy.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes.  I did not see that. &lt;/p&gt;</comment>
                            <comment id="13944845" author="ram_krish" created="Mon, 24 Mar 2014 09:37:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;If u strongly feel otherwise I can change.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I would prefer putInt, putShort() still.  The layer using that can easily know what it is doing.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Not sure.. I feel these should go to some sort of comparator impl.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;May be the name comapre is not right? But it may be needed in place where a given byte[] is checked against the BR contents.  For eg in the HfileBlock we compare the HFileBlock&apos;s byte[] with a magic array.  So in such cases we need this.  So it is not necessary a different type of comparator.&lt;/p&gt;</comment>
                            <comment id="13945212" author="ndimiduk" created="Mon, 24 Mar 2014 15:28:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;Encode or decode in place of zero-compressed long values could be helpful&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OrderedBytes also provides an varint encoding. Have a look at the *Varuint64 methods on that class.&lt;/p&gt;</comment>
                            <comment id="13945794" author="stack" created="Mon, 24 Mar 2014 22:34:11 +0000"  >&lt;p&gt;The hadoop vint code gets bad review &lt;a href=&quot;http://grepcode.com/file/repo1.maven.org/maven2/org.hbase/asynchbase/1.3.1/org/hbase/async/HBaseRpc.java#818&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://grepcode.com/file/repo1.maven.org/maven2/org.hbase/asynchbase/1.3.1/org/hbase/async/HBaseRpc.java#818&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13945850" author="apurtell" created="Mon, 24 Mar 2014 23:15:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;I would prefer putInt, putShort() still. The layer using that can easily know what it is doing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The hadoop vint code gets bad review&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I assume this is a warning about Hadoop vints not an objection to having a vint helper for this class. We are going to want to encode and decode them in DBBs I am positive. I was thinking using of the better versions available recently, like protobuf&apos;s, or OrderedBytes.&lt;/p&gt;</comment>
                            <comment id="13945864" author="stack" created="Mon, 24 Mar 2014 23:32:45 +0000"  >&lt;p&gt;vints good.. just not hadoop vints.  Copy/paste the pb vints? (They are not accessible as is). &lt;/p&gt;</comment>
                            <comment id="13946585" author="anoop.hbase" created="Tue, 25 Mar 2014 14:16:18 +0000"  >&lt;p&gt;Added API which is equivalent to BB#hasArray().This will be needed when we have offheap impl for BR.  Now also the put(BR)  API uses this.&lt;/p&gt;</comment>
                            <comment id="13946737" author="hadoopqa" created="Tue, 25 Mar 2014 16:18:13 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12636704/HBASE-10771_V2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12636704/HBASE-10771_V2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12636704&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.regionserver.wal.TestLogRolling.testLogRollOnDatanodeDeath(TestLogRolling.java:368)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9090//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13946814" author="stack" created="Tue, 25 Mar 2014 17:21:06 +0000"  >&lt;blockquote&gt;&lt;p&gt;Added API which is equivalent to BB#hasArray().&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Is this a good idea?  Now we have to have two code paths... one for those with backing byte arrays and then another for those offheap?&lt;/p&gt;</comment>
                            <comment id="13947544" author="anoop.hbase" created="Wed, 26 Mar 2014 04:40:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;Now we have to have two code paths... one for those with backing byte arrays and then another for those offheap?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That need not be.  Now we have put/get APIs in BR.  so the impl can know whether it is on heap or offheap and do the best way of put/get.&lt;br/&gt;
Another thing can be the comprator. Here also we can come up with a comparator and it can have one code path only which can work with offheap also.&lt;/p&gt;

&lt;p&gt;Adding of this kind of an API will allow some one to have 2 code paths &lt;b&gt;if needed&lt;/b&gt;..&lt;br/&gt;
As u can see in the path, the put(BR) itself uses this new API.  When it is onheap (the src BR) System.arrayCopy can be the best way of copy rather than byte by byte assign &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  When on heap we have no such choice..&lt;/p&gt;

&lt;p&gt;So we wont have 2 code paths based on this.. But may be at some use places we &lt;b&gt;can have also&lt;/b&gt; like above case. (Now or later)&lt;/p&gt;

&lt;p&gt;How that sounds Stack?&lt;/p&gt;</comment>
                            <comment id="13947760" author="anoop.hbase" created="Wed, 26 Mar 2014 10:11:09 +0000"  >&lt;p&gt;Also getBytes() call on an offheap impl should throw Exception rather than copying bytes to onheap and returning. So having an API like hasBytes() will be useful IMHO&lt;/p&gt;</comment>
                            <comment id="13947764" author="ram_krish" created="Wed, 26 Mar 2014 10:18:16 +0000"  >&lt;p&gt;Yes we need in my opinion.  In the patch that i am using i created isDirect() that would say if it is on heap or offheap.  hasArray() also is fine. Some of the flows decision making may be based on this.&lt;/p&gt;</comment>
                            <comment id="13950599" author="anoop.hbase" created="Fri, 28 Mar 2014 11:41:47 +0000"  >&lt;p&gt;What do u say abt above reply &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;? Sounds fine?&lt;br/&gt;
Can I get some +1s pls &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; (Latest patch includes more APIs)&lt;/p&gt;</comment>
                            <comment id="13950613" author="ram_krish" created="Fri, 28 Mar 2014 11:55:16 +0000"  >&lt;p&gt;+1 on patch. &lt;/p&gt;</comment>
                            <comment id="13951095" author="stack" created="Fri, 28 Mar 2014 17:31:33 +0000"  >&lt;p&gt;Why again is it that we don&apos;t just do ByteBuffer?  ByteRange doc says:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 * This &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; differs from ByteBuffer:
 * &amp;lt;li&amp;gt;On-heap bytes only&amp;lt;/li&amp;gt;
 * &amp;lt;li&amp;gt;Raw {@code &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;} access only; does not encode other primitives.&amp;lt;/li&amp;gt;
 * &amp;lt;li&amp;gt;Implements {@code equals(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;)}, {@code #hashCode()}, and
 * {@code #compareTo(ByteRange)} so that it can be used in standard java
 * Collections. Comparison operations are lexicographic, which is &lt;span class=&quot;code-keyword&quot;&gt;native&lt;/span&gt; to
 * HBase.&amp;lt;/li&amp;gt;
 * &amp;lt;li&amp;gt;Allows the addition of simple core methods like the deep and shallow
 * copy methods.&amp;lt;/li&amp;gt;
 * &amp;lt;li&amp;gt;Can be reused in tight loops like a major compaction which can save
 * significant amounts of garbage. (Without reuse, we &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; off garbage like
 * &amp;lt;a href=&lt;span class=&quot;code-quote&quot;&gt;&quot;http:&lt;span class=&quot;code-comment&quot;&gt;//www.youtube.com/watch?v=lkmBH-MjZF4&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; thing&amp;lt;/a&amp;gt;.)&amp;lt;/li&amp;gt;
&lt;/span&gt; * &amp;lt;/p&amp;gt;
 * &amp;lt;p&amp;gt;
 * Mutable, and always evaluates {@code #equals(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;)}, {@code #hashCode()},
 * and {@code #compareTo(ByteRange)} based on the current contents.
 * &amp;lt;/p&amp;gt;
 * &amp;lt;p&amp;gt;
 * Can contain convenience methods &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; comparing, printing, cloning, spawning
 * &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; arrays, copying to other arrays, etc. Please place non-core methods into
 * {@link ByteRangeUtils}.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, we are violating at least the first two items in the Interface with these changes, right?&lt;/p&gt;

&lt;p&gt;Will we want to evolve to this &lt;a href=&quot;http://netty.io/4.0/api/io/netty/buffer/ByteBuf.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://netty.io/4.0/api/io/netty/buffer/ByteBuf.html&lt;/a&gt; eventually?  Or pull in some of this functionality too?  (If we did ByteBuf, then we&apos;d have other facility available to us from netty)&lt;/p&gt;

&lt;p&gt;Have we written up an end-to-end for ByteRange any place going in and out?  Pardon me if we have and I&apos;ve just not kept up.&lt;/p&gt;</comment>
                            <comment id="13951100" author="stack" created="Fri, 28 Mar 2014 17:33:52 +0000"  >&lt;p&gt;Otherwise, the patch seems fine.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Adding of this kind of an API will allow some one to have 2 code paths if needed..&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds like we will have two code paths in places (smile).  Probably unavoidable.&lt;/p&gt;</comment>
                            <comment id="13951143" author="ndimiduk" created="Fri, 28 Mar 2014 17:58:59 +0000"  >&lt;p&gt;IMO, we&apos;re better off making use of an upstream project&apos;s types than reinventing our own. We&apos;ll enjoy better compatibility with ecosystem tools. Trouble is, ByteBuffer is inflexible and we haven&apos;t a concensus on adopting Netty.&lt;/p&gt;

&lt;p&gt;The primary concerns of ByteRange are: reusable instances within a tight loop of compactions, simple(r) interface &amp;#8211; something I myself violated in introducing PositionedByteRange, and more relevant comparable implementation. Can we not resolve these difficulties using subclasses, helper/utility methods, and/or reflection?&lt;/p&gt;</comment>
                            <comment id="13951166" author="anoop.hbase" created="Fri, 28 Mar 2014 18:15:06 +0000"  >&lt;p&gt;Oh yes Stack.. We are violating.. My bad I didnt read those javadoc yet.  Would like to go with BR instead of BB as we have freedom of going with netty or others.  &lt;br/&gt;
Dont want to make this object fat. That is why was not thinking even adding a mark or reset kind of things also..  Why the put and get are added is it can abstract the impl detail.. Onheap and offheap can impl diff .. &lt;/p&gt;</comment>
                            <comment id="13951730" author="ram_krish" created="Sat, 29 Mar 2014 03:36:25 +0000"  >&lt;p&gt;Actually I read this javadoc while starting with BR. My bad is that once we wanted this API in BR then we should change the doc.  But seeing the above comments I think we should move them to helper classes I think.&lt;/p&gt;</comment>
                            <comment id="13951738" author="mcorgan" created="Sat, 29 Mar 2014 03:45:10 +0000"  >&lt;p&gt;I&apos;m not sure what the best solution is either.  I introduced ByteRange to&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;wrap cumbersome/fragile array/offset/length logic into a single place for byte[] as String does to char[]&lt;/li&gt;
	&lt;li&gt;give us native unsigned comparison (it&apos;s kinda wild that hbase doesn&apos;t have a unified abstraction for this)&lt;/li&gt;
	&lt;li&gt;add a potentially faster .equals implementation via cached hashCode comparison&lt;/li&gt;
	&lt;li&gt;make this wrapper object reusable object for highest performance (unlike ByteBuffer)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I only intended it to stay simple and am a little worried that creating too many subclasses could hurt its performance in critical paths, but we started talking about using it for more things.  I hadn&apos;t envisioned adding many methods to the interface, but still thinking on it and having a hard time coming up with negatives.  While a hasArray() method could probably be replaced with &quot;instanceof&quot; and casting by implementations and utilities, it probably wouldn&apos;t hurt to put it in the interface.&lt;/p&gt;

&lt;p&gt;It wasn&apos;t the original intention, but ByteRange could be a nice abstraction for moving (or avoiding moving) bytes between ByteBuffers and byte[]&apos;s.  Like in the seek method when you want to compare a byte[] key to some bytes in the block cache, the BR implementation can decide whether to do a byte-by-byte comparison behind the scenes (for off-heap blocks) or to use Unsafe to do full word comparisons when both BRs hasArray(), or even copy the off-heap bytes on heap for a comparison.  Seems like we should have this layer of abstraction - it gains us really clean code without much of a performance hit.  I agree it feels weird to add such basic functionality, but maybe it&apos;s just weird that it&apos;s not there already.&lt;/p&gt;</comment>
                            <comment id="13951743" author="stack" created="Sat, 29 Mar 2014 03:55:55 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt; What upstream project you thinking?  And what we need to adopt netty types?  Prove that an async server better than one that starts out w/ hundreds of handlers?  Or you mean netty ByteBuf?  When you say &quot;...Can we not resolve these difficulties using subclasses, helper/utility methods, and/or reflection?&quot;, do you mean subclasses of netty types or ByteBuffer or do you mean subclass of ByteRange?&lt;/p&gt;

&lt;p&gt;On why BR:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...reusable instances within a tight loop of compactions, simple(r) interface &#8211; something I myself violated in introducing PositionedByteRange, and more relevant comparable implementation&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;On being reusable, nioByteBuffer and nettyByteBuf both fail this requirement.&lt;/p&gt;

&lt;p&gt;What is simple(r) interface?  Looks like we are fast undoing this one w/ all the additions being made herein.&lt;/p&gt;

&lt;p&gt;.... and &quot;...more relevant comparable implementation&quot; prevails.&lt;/p&gt;

&lt;p&gt;Which we seem to argue proceed with BR... but we need to fix the javadoc up in BR so it aligns w/ these additions.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="13951747" author="stack" created="Sat, 29 Mar 2014 04:05:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;I agree it feels weird to add such basic functionality, but maybe it&apos;s just weird that it&apos;s not there already.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is funny.  This may actually be the root issue.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;  You raise this issue because &quot;... in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10713&quot; title=&quot;A MemStore implementation with in memory flushes to CellBlocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10713&quot;&gt;&lt;del&gt;HBASE-10713&lt;/del&gt;&lt;/a&gt; I came across the need to write int/long (and read also) from a ByteRange.&quot;  What were the explicit needs?  Write timestamp?  What else? Where else would we need say a BR#getLong?  Do you see the need for it elsewhere in the read/write pipeline?   Good on you.&lt;/p&gt;</comment>
                            <comment id="13951750" author="anoop.hbase" created="Sat, 29 Mar 2014 04:12:36 +0000"  >&lt;p&gt;Yes Stack.. write and read long is for mvcc.  Infact I plan to use put/getVLong(). The current impl what I am testing now uses put/getLong but will change.&lt;br/&gt;
Also when we write Cell we will need put int/short also  &lt;/p&gt;

&lt;p&gt;And Ram was working on the Block cache area. There he came across needs for other APIs. He raised another issue .&lt;/p&gt;</comment>
                            <comment id="13954825" author="mcorgan" created="Sun, 30 Mar 2014 20:16:38 +0000"  >&lt;p&gt;One of the problems with ByteBuffer is that it&apos;s difficult to copy multiple bytes from BB to byte[] in a multi-threaded scenario, for example, when the BlockCache is a bunch of DirectBBs and we want to have many simultaneous reader threads reading from a hot block.  For some reason, there&apos;s not a method to copy a range of bytes from a random position in the DBB, so you have to either acquire a lock on the DBB to take ownership of its position/limit fields, or you have to &quot;slice&quot; it to give the reader a copy with its own position/limit.  Both locking and slicing would be very expensive when trying to assemble encoded Cells in a tight loop.&lt;/p&gt;

&lt;p&gt;One solution might be to have a pool of reader threads (i think we already do), and to give each thread a pre-sliced BB for each big slab in the allocator.  The reader thread could reuse its private copy of the slab BB:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
ByteRange dest = some ByteRange we want to copy into;
&lt;span class=&quot;code-comment&quot;&gt;//the threadLocalBlock is a DirectByteBufferByteRange in &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt;.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//allocator sets position/limit to the block boundaries in the underlying slab.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//allocator manages thread-local pool of blocks and does ref counting.
&lt;/span&gt;ByteRange threadLocalBlock = allocator.acquireReadOnlyThreadLocalBlock(blockCacheKey);
dest.copyFrom(threadLocalBlock, srcOffset, destOffset, length);
allocator.releaseReadOnlyThreadLocalBlock(blockCacheKey);

the array-backed ByteRange would &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt;:
class ArrayByteRange &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; ByteRange{
  void copyFrom(ByteRange src, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; srcOffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; destOffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length){
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(src.hasArray()){
      &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy(src.getArray(), srcOffset, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.array, destOffset, length);
    }&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;{
      DirectByteBuffer srcBuffer = ((DirectByteBuffer)src).getBuffer();
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; previousPosition = srcBuffer.position();
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; previousLimit = srcBuffer.limit();
      srcBuffer.position(srcOffset);
      srcBuffer.limit(srcOffset + length);
      srcBuffer.get(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.array);&lt;span class=&quot;code-comment&quot;&gt;//copies the bytes
&lt;/span&gt;      srcBuffer.position(previousPosition);
      srcBuffer.limit(previousLimit);
    }
  }
}

&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; the DirectByteBufferByteRange would &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt;:
class DirectByteBufferByteRange &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; ByteRange{
  void copyFrom(ByteRange src, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; srcOffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; destOffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length){
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(src.hasArray()){
      &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] srcArray = ((ArrayByteBuffer)src).getArray();
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.buffer.put(srcArray, srcOffset, length);&lt;span class=&quot;code-comment&quot;&gt;//copies the bytes
&lt;/span&gt;    }&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;{
      DirectByteBuffer srcBuffer = ((DirectByteBuffer)src).getBuffer();
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; previousPosition = srcBuffer.position();
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; previousLimit = srcBuffer.limit();
      srcBuffer.position(srcOffset);
      srcBuffer.limit(srcOffset + length);
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.buffer.put(srcBuffer);&lt;span class=&quot;code-comment&quot;&gt;//copies the bytes
&lt;/span&gt;      srcBuffer.position(previousPosition);
      srcBuffer.limit(previousLimit);
    }
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Need to be careful with offset/limit calculations.  They may be more complex than in that example.&lt;/p&gt;</comment>
                            <comment id="13955007" author="apurtell" created="Mon, 31 Mar 2014 07:48:18 +0000"  >&lt;p&gt;The problems with ByteBuffer as I see it are threefold:&lt;br/&gt;
1. Locking and slicing on account of the &apos;limit&apos; and &apos;position&apos; fields can be expensive as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; says.&lt;br/&gt;
2. The get* and put* methods have bounds checking which add overhead that I think is unnecessary&lt;br/&gt;
3. BB methods don&apos;t inline well, partially on account of #2. &lt;/p&gt;

&lt;p&gt;I would not like to see ByteRange be as unsatisfying to use as ByteBuffer. So for me the test as to whether we are doing the right things with ByteRange is that none of the above three points are true for ByteRange.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;IMO, we&apos;re better off making use of an upstream project&apos;s types than reinventing our own. We&apos;ll enjoy better compatibility with ecosystem tools. Trouble is, ByteBuffer is inflexible and we haven&apos;t a concensus on adopting Netty.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt;: Here you repeat my rationale for looking at Netty 4&apos;s ByteBuf but I will note that only you seemed to raise an objection to using the Netty 4 ByteBuf classes. This was sufficient to de-prioritize any work on that and so I haven&apos;t touched it since our last discussion. I think your suggestion to use reflection will fail to address my point #3 above, as well as be expensive simply due to the use of reflection.&lt;/p&gt;</comment>
                            <comment id="13955011" author="apurtell" created="Mon, 31 Mar 2014 07:53:40 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;: When proposing API additions to ByteRange I think it is important first to establish that no other reasonable alternative exists. Try to change the calling site code to use (Positioned)ByteRange and what it provides today first. The code was written to the ByteBuffer API and may use some BB methods due to its programming model, not actually to serve some essential purpose. &lt;/p&gt;</comment>
                            <comment id="13955379" author="ndimiduk" created="Mon, 31 Mar 2014 16:54:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;I will note that only you seemed to raise an objection to using the Netty 4 ByteBuf classes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; I don&apos;t recall the specific comment to which you refer. My only objection to Netty4 (or any other alternative, as they are) is a lack of investigation. In no way did I expect such a comment to deter anyone from conducting exactly that investigation!&lt;/p&gt;

&lt;p&gt;The 3 alternatives I&apos;m aware of are ByteBuffer (perhaps with reflection hacks I experimented with a while back), Netty4 ByteBuf, and roll-our-own ByteRange. My understanding of these options places ByteBuf at the top of my list, but I have only anecdotal evidence to support its use. This is a fundamental component of this system and I&apos;d hope to see the decision driven by data proven through investigation/evaluation as opposed to anecdotal evidence. My primary criteria for a selection would be API compatibility down into HDFS and performance, and really the former is driven by the latter.&lt;/p&gt;

&lt;p&gt;All of this is just opinion of someone looking on. You three are doing the actual good work here, so please continue doing it. Until such time as I (or anyone else) am submitting patches along with you, please take my concerns as they are: concerns voiced from the peanut-gallery to be considered only if intelligent.&lt;/p&gt;</comment>
                            <comment id="13955385" author="ndimiduk" created="Mon, 31 Mar 2014 17:03:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can we not resolve these difficulties using subclasses, helper/utility methods, and/or reflection?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; I was referring to subclasses, helper/utility/reflect around ByteBuffers.&lt;/p&gt;</comment>
                            <comment id="13955728" author="stack" created="Mon, 31 Mar 2014 21:15:14 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And I like how you put it.  My comments are of the same class as yours (to be clear).&lt;/p&gt;

&lt;p&gt;We have ByteBuffers coming in the front door currently.   We give the socket a nioBB to read into.  Keeping position in another object, BR for instance seems fine (so we avoid #1 and #2 in @apurtell list above).&lt;/p&gt;

&lt;p&gt;Reading in from HDFS, we allocate a BB and read into it.&lt;/p&gt;

&lt;p&gt;Looking at ByteBuf, it has range checking (checkIndex) but the getBytes and the checkIndex are subclasseable so perhaps it could be &apos;turned off&apos; if we wanted it to be.   ByteBuf has nice features like allocations from pools but if we are talking tight loops (no range check) and reuse, then neither nioBB nor nettyBB will do.&lt;/p&gt;

</comment>
                            <comment id="13965067" author="mcorgan" created="Thu, 10 Apr 2014 06:45:55 +0000"  >&lt;p&gt;taking a look at patch_2 after a mention in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10861&quot; title=&quot;Extend ByteRange to create Mutable and Immutable ByteRange&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10861&quot;&gt;&lt;del&gt;HBASE-10861&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; getVLong(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; index) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this returns a fairly heavyweight object.  maybe it should just return a primitive long and we could have a public static method &quot;int numVLongBytes(long n)&quot; that quickly computes the number of bytes.  here is a different VLong format i wrote a while back.  i don&apos;t know what the numBytes formula for this particular VLong would be, but you can see how efficiently it could possibly be calculated.  probably much cheaper than creating 3 objects&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numBytes(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; in){&lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; a check &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; illegal arguments &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; not &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt;
&lt;/span&gt;		&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(in == 0){ &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 1; }&lt;span class=&quot;code-comment&quot;&gt;// doesn&apos;t work with the formula below
&lt;/span&gt;		&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (70 - &lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;.numberOfLeadingZeros(in)) / 7;&lt;span class=&quot;code-comment&quot;&gt;// 70 comes from 64+(7-1)
&lt;/span&gt;	}

	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] getBytes(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; value){
		&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numBytes = numBytes(value);
		&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[numBytes];
		&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; remainder = value;
		&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; numBytes - 1; ++i){
			bytes[i] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;)((remainder &amp;amp; LONG_7_RIGHT_BITS_SET) | LONG_8TH_BIT_SET);&lt;span class=&quot;code-comment&quot;&gt;// set the left bit
&lt;/span&gt;			remainder &amp;gt;&amp;gt;= 7;
		}
		bytes[numBytes - 1] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;)(remainder &amp;amp; LONG_7_RIGHT_BITS_SET);&lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not set the left bit
&lt;/span&gt;		&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; bytes;
	}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;also not sure the checked IOException is necessary since all of these methods could encounter similar corruption errors, plus the actual IO has presumably already been done earlier.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  @Override
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; getLong(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; index) {
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Bytes.toLong(bytes, index);
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;does the hbase Bytes util have the exact same format that ByteBuffers use?  native java format can be seen in java.nio.Bits.java&lt;/p&gt;

</comment>
                            <comment id="13976601" author="anoop.hbase" created="Tue, 22 Apr 2014 10:03:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;maybe it should just return a primitive long and we could have a public static method &quot;int numVLongBytes(long n)&quot; that quickly computes the number of bytes. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let me try out.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;does the hbase Bytes util have the exact same format that ByteBuffers use? native java format can be seen in java.nio.Bits.java&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;During writes we compute bytes using HBase Bytes util API.   Why BB compare ?&lt;/p&gt;</comment>
                            <comment id="13977080" author="mcorgan" created="Tue, 22 Apr 2014 17:25:30 +0000"  >&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;Why BB compare ?&lt;/p&gt;&lt;/blockquote&gt;i was thinking for a ByteRange backed by a ByteBuffer it would be nice if the BR could just forward the getLong(int index) call to the equivalent underlying BB method.  if the formats are different, then we can&apos;t use those methods without a translation layer&lt;/p&gt;</comment>
                            <comment id="13977812" author="anoop.hbase" created="Wed, 23 Apr 2014 04:10:18 +0000"  >&lt;p&gt;A BR impl backed by BB will be another class where the putLong() will be different and same byte representation as in BB. Infact we can call BB.putLong(long). so getLong() can use BB.getLong().    So my point is in a byte[] backed current BR impl, we can use HBase Bytes util for the byte[] convertion. Am I missing any thing?&lt;/p&gt;</comment>
                            <comment id="13978428" author="anoop.hbase" created="Wed, 23 Apr 2014 16:46:33 +0000"  >&lt;p&gt;Removed hasBytes() API as well as put which takes a BR.  Now only keep put/get primitive APIs.  Addressed Matt&apos;s comments also.&lt;/p&gt;</comment>
                            <comment id="13978800" author="hadoopqa" created="Wed, 23 Apr 2014 19:59:18 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12641506/HBASE-10771_V3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12641506/HBASE-10771_V3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12641506&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9375//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13979308" author="anoop.hbase" created="Thu, 24 Apr 2014 05:31:32 +0000"  >&lt;p&gt;How  it looks now &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; ? &lt;br/&gt;
I just removed the hasBytes() stuff etc as of now..  Later when we do more into the offheap work, we can come up with extensions as needed.  What do you say &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;.  Is this patch good to go in?&lt;/p&gt;</comment>
                            <comment id="13986353" author="mcorgan" created="Thu, 1 May 2014 05:08:15 +0000"  >&lt;p&gt;Looks good to me.  It looks like the encoding matches the LittleEndian representation from Bits.java, so a ByteBuffer implementation should be able to call straight through to its internal putInt method if we deem that&apos;s faster than writing 4 individual bytes to the ByteBuffer.&lt;/p&gt;

&lt;p&gt;putInt from java.io.Bits.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; int3(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; x) { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;)(x &amp;gt;&amp;gt; 24); }
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; int2(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; x) { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;)(x &amp;gt;&amp;gt; 16); }
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; int1(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; x) { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;)(x &amp;gt;&amp;gt;  8); }
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; int0(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; x) { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;)(x      ); }

    &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void putIntL(ByteBuffer bb, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; bi, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; x) {
        bb._put(bi + 3, int3(x));
        bb._put(bi + 2, int2(x));
        bb._put(bi + 1, int1(x));
        bb._put(bi    , int0(x));
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;putInt from hbase&apos;s Bytes.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; putInt(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; val) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (bytes.length - offset &amp;lt; SIZEOF_INT) {
      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Not enough room to put an &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; at&quot;&lt;/span&gt;
          + &lt;span class=&quot;code-quote&quot;&gt;&quot; offset &quot;&lt;/span&gt; + offset + &lt;span class=&quot;code-quote&quot;&gt;&quot; in a &quot;&lt;/span&gt; + bytes.length + &lt;span class=&quot;code-quote&quot;&gt;&quot; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array&quot;&lt;/span&gt;);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i= offset + 3; i &amp;gt; offset; i--) {
      bytes[i] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;) val;
      val &amp;gt;&amp;gt;&amp;gt;= 8;
    }
    bytes[offset] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;) val;
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; offset + SIZEOF_INT;
  }&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Might be interesting to add a test to confirm that.  You could write to an array using a ByteRange and then ByteBuffer.wrap(br.getArray()) and read the values back.&lt;/p&gt;</comment>
                            <comment id="13986823" author="apurtell" created="Thu, 1 May 2014 18:03:34 +0000"  >&lt;p&gt;Visually the get* and put* methods look small enough to be inlineable, but have you confirmed with -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining ?&lt;/p&gt;

&lt;p&gt;Edit: Use -Xcomp also to skip warmup and profiling issues. We want to test if it&apos;s possible to inline the methods in as many cases as we can trigger. &lt;/p&gt;

&lt;p&gt;Edit 2: Any chance of a unit test that builds and unpacks various structures using the new classes and methods, say 1M times in a loop? Bonus points if it is Cells in HFileBlocks. &lt;/p&gt;</comment>
                            <comment id="13987362" author="anoop.hbase" created="Fri, 2 May 2014 05:53:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;Might be interesting to add a test to confirm that. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Just tested that and it is able to read back using BB APIs.&lt;/p&gt;</comment>
                            <comment id="13987363" author="anoop.hbase" created="Fri, 2 May 2014 05:56:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;Any chance of a unit test that builds and unpacks various structures using the new classes and methods, say 1M times in a loop? Bonus points if it is Cells in HFileBlocks. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Will do&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Visually the get* and put* methods look small enough to be inlineable, but have you confirmed with ...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will check&lt;/p&gt;</comment>
                            <comment id="14008565" author="anoop.hbase" created="Mon, 26 May 2014 04:22:46 +0000"  >&lt;p&gt;Andy helped me to run a test for checking the inlining of put/getxxx() APIs.&lt;br/&gt;
As per that org.apache.hadoop.hbase.util.Bytes#explainWrongLengthOrOffset () is too big for inlining.  The patch changes the getxxx() API to not to use Bytes#putxxx API.  That code is copy pasted to SimpleByteRange without the sanity checking.&lt;br/&gt;
Also addressed comment about adding a test where lots of KV are written and read back from a PBR.&lt;/p&gt;</comment>
                            <comment id="14008599" author="hadoopqa" created="Mon, 26 May 2014 06:07:35 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12646734/HBASE-10771_V4.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12646734/HBASE-10771_V4.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12646734&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 8 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 3 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 release audit&lt;/font&gt;.  The applied patch generated 31 release audit warnings (more than the trunk&apos;s current 0 warnings).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9583//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14008607" author="anoop.hbase" created="Mon, 26 May 2014 06:24:17 +0000"  >&lt;p&gt;The javadoc warnings and release audit warnings are not related to this patch&lt;/p&gt;</comment>
                            <comment id="14018284" author="stack" created="Wed, 4 Jun 2014 22:28:44 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Where do you confirm that the long and int writing is same as BBs?  You should note in the implementations that they are equivalent in a comment on commit.&lt;/p&gt;

&lt;p&gt;I just read over this issue.  Nice back and forth.  Good stuff.&lt;/p&gt;</comment>
                            <comment id="14031519" author="anoop.hbase" created="Sat, 14 Jun 2014 09:13:06 +0000"  >&lt;blockquote&gt;&lt;p&gt;Where do you confirm that the long and int writing is same as BBs&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Just wrote a test to confirm.  I write using BR API and create a BB wrapping the byte[] and do read back using BB APIs. Looks good. Will add that test case also on commit.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You should note in the implementations that they are equivalent in a comment on commit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sure.&lt;/p&gt;</comment>
                            <comment id="14031697" author="stack" created="Sat, 14 Jun 2014 21:00:00 +0000"  >&lt;p&gt;Still +1 on commit. You can add the notes on commit &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14031833" author="anoop.hbase" created="Sun, 15 Jun 2014 10:55:23 +0000"  >&lt;p&gt;Committed to master.  Thanks all for the reviews.  Thanks Andy for helping me with the in-lining tests.&lt;/p&gt;</comment>
                            <comment id="14031869" author="hudson" created="Sun, 15 Jun 2014 13:01:31 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #5208 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/5208/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/5208/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10771&quot; title=&quot;Primitive type put/get APIs in ByteRange &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10771&quot;&gt;&lt;del&gt;HBASE-10771&lt;/del&gt;&lt;/a&gt; Primitive type put/get APIs in ByteRange (Anoop) (anoopsamjohn: rev 14c2c002966872373312f871f29cee9c1538cd9e)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRange.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestPositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/SimplePositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/SimpleByteRange.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestSimpleByteRange.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/PositionedByteRange.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestByteRangeWithKVSerialization.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14330785" author="enis" created="Sat, 21 Feb 2015 23:31:09 +0000"  >&lt;p&gt;Closing this issue after 0.99.0 release. &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12704225">HBASE-10861</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12685275">HBASE-10191</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12699803">HBASE-10713</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12636051" name="HBASE-10771.patch" size="10723" author="anoop.hbase" created="Fri, 21 Mar 2014 16:48:13 +0000"/>
                            <attachment id="12636704" name="HBASE-10771_V2.patch" size="19324" author="anoop.hbase" created="Tue, 25 Mar 2014 14:16:18 +0000"/>
                            <attachment id="12642621" name="HBASE-10771_V3.patch" size="14445" author="anoop.hbase" created="Wed, 30 Apr 2014 09:41:10 +0000"/>
                            <attachment id="12646734" name="HBASE-10771_V4.patch" size="19533" author="anoop.hbase" created="Mon, 26 May 2014 04:22:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 17 Mar 2014 09:19:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>380182</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 42 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ti7r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>380466</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>