<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:07:15 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-9751/HBASE-9751.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-9751] Excessive  readpoints checks in StoreFileScanner</title>
                <link>https://issues.apache.org/jira/browse/HBASE-9751</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;It seems that usage of skipKVsNewerThanReadpoint in StoreFileScanner can be greatly reduced or even eliminated all together (HFiles are immutable and no new KVs can be inserted after scanner instance is created). The same is true for MemStoreScanner which checks readpoint on every next() and seek(). Each readpoint check is ThreadLocal.get() and it is quite expensive.  &lt;/p&gt;</description>
                <environment></environment>
        <key id="12673529">HBASE-9751</key>
            <summary>Excessive  readpoints checks in StoreFileScanner</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lhofhansl">Lars Hofhansl</assignee>
                                    <reporter username="vrodionov">Vladimir Rodionov</reporter>
                        <labels>
                    </labels>
                <created>Sat, 12 Oct 2013 04:41:18 +0000</created>
                <updated>Fri, 8 Nov 2013 00:03:17 +0000</updated>
                            <resolved>Mon, 14 Oct 2013 04:01:13 +0000</resolved>
                                    <version>0.98.0</version>
                    <version>0.94.12</version>
                    <version>0.96.0</version>
                                    <fixVersion>0.98.0</fixVersion>
                    <fixVersion>0.94.13</fixVersion>
                    <fixVersion>0.96.1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13793256" author="vrodionov" created="Sat, 12 Oct 2013 04:49:26 +0000"  >&lt;p&gt;The possible optimization won&apos;t give much performance improvement unless tested directly on MemStoreScanner. There are many others performance issues on a scanner read path which will obscure the performance gain. The major offenders: &lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;new instance of KeyValue on every StoreScanner.next() (regardless of Filter selectivity).&lt;/li&gt;
	&lt;li&gt;sub-par implementation of :&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;        ScanQueryMatcher.MatchCode qcode = matcher.match(kv); in StoreScanner.next()&lt;/p&gt;

&lt;p&gt;ScanQueryMatcher code is responsible for &amp;gt; 50% of execution time of of StoreScanner.next(). &lt;/p&gt;

&lt;p&gt;Object creation in Java becomes expensive in MT mode.&lt;/p&gt;</comment>
                            <comment id="13793259" author="lhofhansl" created="Sat, 12 Oct 2013 04:59:39 +0000"  >&lt;p&gt;Was just about to file this &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Couple of comments:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;HFiles are immutable, but they can contain KVs that a current scanner should not see.&lt;/li&gt;
	&lt;li&gt;I have a patch that verifies the readpoint in HFiles only when needed.&lt;/li&gt;
	&lt;li&gt;Factoring this out of the memstore turns out to be harder. Memstore.next() can be called from any thread at any time), so I don&apos;t see how that can be easily fixed.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The patch from #2 saves about 3.2% overall during a scan where all data is filtered at the server with a value filter.&lt;/p&gt;</comment>
                            <comment id="13793260" author="lhofhansl" created="Sat, 12 Oct 2013 05:02:07 +0000"  >&lt;p&gt;Here&apos;s a sample patch against 0.94.&lt;br/&gt;
If a HFileReader can prove that the file does not have any KV with a none-0 memstoreTS, the scanner does not have even for skippedKV due to the threads readpoint.&lt;/p&gt;</comment>
                            <comment id="13793262" author="lhofhansl" created="Sat, 12 Oct 2013 05:06:50 +0000"  >&lt;p&gt;On a wide table with 100 cols, this patch saves 10% overall!&lt;/p&gt;</comment>
                            <comment id="13793269" author="lhofhansl" created="Sat, 12 Oct 2013 05:13:16 +0000"  >&lt;p&gt;And note that in a large system most KVs are in HFiles that have been compacted and the probability is high that they were older than the oldest scanner at compaction time; hence their memstoreTS is set to 0 in the HFile, and hence this optimization works.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;, if you have any ideas about the areas you mention, as well as how avoid getting the readpoint on each call to next in MemstoreScanner, I&apos;d love to hear them.&lt;/p&gt;</comment>
                            <comment id="13793273" author="lhofhansl" created="Sat, 12 Oct 2013 05:27:01 +0000"  >&lt;p&gt;trunk version&lt;/p&gt;</comment>
                            <comment id="13793282" author="hadoopqa" created="Sat, 12 Oct 2013 06:57:40 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12608137/9751-trunk.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12608137/9751-trunk.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7532//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13793358" author="yuzhihong@gmail.com" created="Sat, 12 Oct 2013 14:30:51 +0000"  >&lt;p&gt;+1 on patch.&lt;/p&gt;</comment>
                            <comment id="13793425" author="vrodionov" created="Sat, 12 Oct 2013 17:33:47 +0000"  >
&lt;ul&gt;
	&lt;li&gt;HFiles are immutable, but they can contain KVs that a current scanner should not see.&lt;/li&gt;
	&lt;li&gt;I have a patch that verifies the readpoint in HFiles only when needed.&lt;/li&gt;
	&lt;li&gt;Factoring this out of the memstore turns out to be harder. Memstore.next() can be called from any thread at any time), so I don&apos;t see how that can be easily fixed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;1. Lars, the first I do just do not understand. Yes, it is possible to have long lived scanners which is older than particular HFile but in this case I think, this file should not get into the scanner at all?&lt;/p&gt;

&lt;p&gt;2. There is another expensive call (in ScannerV2 and similar) which can be optimized  in case if memstoreTS is always 0.&lt;br/&gt;
I commented this section out and set explicit memstoreTS = 0. This is opportunity for another optimization.&lt;br/&gt;
This one:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; void readKeyValueLen() {
      blockBuffer.mark();
      currKeyLen = blockBuffer.getInt();
      currValueLen = blockBuffer.getInt();
      blockBuffer.reset();
&lt;span class=&quot;code-comment&quot;&gt;//      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.reader.shouldIncludeMemstoreTS()) {
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//          &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; memstoreTSOffset = blockBuffer.arrayOffset()
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//              + blockBuffer.position() + KEY_VALUE_LEN_SIZE + currKeyLen
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//              + currValueLen;
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//          currMemstoreTS = Bytes.readVLong(blockBuffer.array(),
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//              memstoreTSOffset);
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//          currMemstoreTSLen = WritableUtils.getVIntSize(currMemstoreTS);
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//         
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//          &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Error reading memstore timestamp&quot;&lt;/span&gt;, e);
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//        }
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;//      }
&lt;/span&gt;      currMemstoreTS = 0;
      currMemstoreTSLen = 1;
      
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (currKeyLen &amp;lt; 0 || currValueLen &amp;lt; 0
          || currKeyLen &amp;gt; blockBuffer.limit()
          || currValueLen &amp;gt; blockBuffer.limit()) {
        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Invalid currKeyLen &quot;&lt;/span&gt; + currKeyLen
            + &lt;span class=&quot;code-quote&quot;&gt;&quot; or currValueLen &quot;&lt;/span&gt; + currValueLen + &lt;span class=&quot;code-quote&quot;&gt;&quot;. Block offset: &quot;&lt;/span&gt;
            + block.getOffset() + &lt;span class=&quot;code-quote&quot;&gt;&quot;, block length: &quot;&lt;/span&gt; + blockBuffer.limit()
            + &lt;span class=&quot;code-quote&quot;&gt;&quot;, position: &quot;&lt;/span&gt; + blockBuffer.position() + &lt;span class=&quot;code-quote&quot;&gt;&quot; (without header).&quot;&lt;/span&gt;);
      }
    }

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3. I am going to test MemStoreScanner with readpoints on/off today. I am sure they expensive. I think we need instantiate MemStoreScanner with a readpoint already, as since they are not shared among threads (and can&apos;t be). Just a single arg to ctor: long readpoint. &lt;/p&gt;
</comment>
                            <comment id="13793426" author="vrodionov" created="Sat, 12 Oct 2013 17:37:55 +0000"  >&lt;p&gt;Never mind, 1. I think I got this.&lt;/p&gt;</comment>
                            <comment id="13793432" author="vrodionov" created="Sat, 12 Oct 2013 18:15:56 +0000"  >&lt;p&gt;Lars wrote:&lt;br/&gt;
&lt;b&gt;Factoring this out of the memstore turns out to be harder. Memstore.next() can be called from any thread at any time), so I don&apos;t see how that can be easily fixed.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I traced all scanners up to the top level: RegionScannerImpl and I do not understand how its possible to share RegionScanner among threads. It is not by design?&lt;/p&gt;</comment>
                            <comment id="13793437" author="yuzhihong@gmail.com" created="Sat, 12 Oct 2013 18:34:19 +0000"  >&lt;p&gt;In MemStoreScanner, around line 823:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; seekInSubLists(KeyValue key){
      kvsetNextRow = getNext(kvsetIt);
      snapshotNextRow = getNext(snapshotIt);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;getNext() is private.&lt;br/&gt;
One small optimization is to lift the call to MultiVersionConsistencyControl.getThreadReadPoint() outside getNext() so that we can pass the readpoint to getNext(). This saves one call to getThreadReadPoint().&lt;/p&gt;</comment>
                            <comment id="13793440" author="vrodionov" created="Sat, 12 Oct 2013 18:52:48 +0000"  >&lt;p&gt;8 threads on my 4core CPU:&lt;br/&gt;
Row size = 37 bytes (1 CF + 1 CQ)&lt;br/&gt;
MemStoreScanner (default) - 80M rows per sec&lt;br/&gt;
MemStoreScanner(readpoint in ctor) - 97.5M rows per sec.&lt;/p&gt;

</comment>
                            <comment id="13793447" author="vrodionov" created="Sat, 12 Oct 2013 19:04:55 +0000"  >&lt;p&gt;Sorry that was optimized version:&lt;/p&gt;

&lt;p&gt;Correct numbers: 71M and 80M respectively.&lt;/p&gt;

&lt;p&gt;The additional optimization I have done to get up to 97.5M :&lt;/p&gt;

&lt;p&gt;I replaced Bytes.compareTo with Bytes.equalsTo when checking for stopRow.  Its a dirty hack but we always can calculate the &lt;b&gt;real&lt;/b&gt; stopRow in a scanner, correct? If Scan operation has isolation level READ_COMMITTED we calculate &lt;b&gt;real&lt;/b&gt; stopRow when scanner is created. Checking equality is much efficient than compare operation.&lt;/p&gt;

&lt;p&gt;I am going to open separate JIRA for this possible improvement. &lt;/p&gt;</comment>
                            <comment id="13793449" author="vrodionov" created="Sat, 12 Oct 2013 19:08:25 +0000"  >&lt;p&gt;Ted, It does not make any sense to have ThreadLocal readpoints in MemStoreScanner at all. The readpoint can be passed in ctor when scanner instance is created. If I am wrong I would like to see the counter-example when multiple threads access the same scanner.  &lt;/p&gt;</comment>
                            <comment id="13793458" author="yuzhihong@gmail.com" created="Sat, 12 Oct 2013 20:14:55 +0000"  >&lt;p&gt;Two more optimizations:&lt;br/&gt;
In StoreScanner#parallelSeek(), the call to MultiVersionConsistencyControl.getThreadReadPoint() can be lifted out of the for loop.&lt;br/&gt;
In StoreFileScanner#reseek(), the call to skipKVsNewerThanReadpoint() can be guarded by hasMVCCInfo.&lt;/p&gt;</comment>
                            <comment id="13793464" author="yuzhihong@gmail.com" created="Sat, 12 Oct 2013 20:43:01 +0000"  >&lt;p&gt;I see the following pattern in various classes which are involved in scanning (HRegion line 3473 e.g.):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-comment&quot;&gt;// This could be a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; thread from the last time we called next().
&lt;/span&gt;        MultiVersionConsistencyControl.setThreadReadPoint(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.readPt);

        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; nextRaw(outResults, limit);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We could pass the readpoint into nextXX() methods to remove the call to MultiVersionConsistencyControl.getThreadReadPoint().&lt;/p&gt;

&lt;p&gt;This would be a bigger refactoring and can be done in another JIRA.&lt;/p&gt;</comment>
                            <comment id="13793504" author="lhofhansl" created="Sat, 12 Oct 2013 22:22:57 +0000"  >&lt;p&gt;Wanna split this into two parts? &lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;fix StoreFileScanner&lt;/li&gt;
	&lt;li&gt;fix MemstoreScanner&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;, note that RegionScanners can outlive an RPC call. They are created and then cached and used across multiple calls to next(). Each call to next() could be coming from a different handler thread, and hence we need to get the readpoint for the thread each time. Not saying it cannot be fixed, just saying that we need to be careful.&lt;/p&gt;

&lt;p&gt;If there are no objections, I&apos;ll commit this (and yes I forgot reseek, will add), and then we can open new jiras for the other issues.&lt;/p&gt;</comment>
                            <comment id="13793506" author="lhofhansl" created="Sat, 12 Oct 2013 22:27:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;//      if (this.reader.shouldIncludeMemstoreTS()) {&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Can&apos;t remove this, it will lead to incorrect results.&lt;br/&gt;
Note that we already optimize when we can prove that the memstoreTS is not needed.&lt;/p&gt;</comment>
                            <comment id="13793507" author="lhofhansl" created="Sat, 12 Oct 2013 22:29:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;I replaced Bytes.compareTo with Bytes.equalsTo&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Hmm... The stopRow need not exist, so I do not think that would work.&lt;/p&gt;</comment>
                            <comment id="13793509" author="vrodionov" created="Sat, 12 Oct 2013 22:36:35 +0000"  >&lt;p&gt;Still do not understand fully. Read points are necessary to filter out all changes (deletes, updates) that have been done  &lt;b&gt;after&lt;/b&gt; scanner creation time and if isolation level is READ_COMMITTED. Read point MUST be the attribute of a scanner - not a handler thread in this case. Correct?&lt;/p&gt;

&lt;p&gt;Sharing the same scanner instance between handler  threads is fine if: &lt;br/&gt;
A. not at the same time &lt;br/&gt;
B. read point is the same (from scanner)&lt;/p&gt;

&lt;p&gt;If it is not the case - then it looks like a flaw in the design.&lt;/p&gt;

&lt;p&gt;And even in this case there are some situations when scanner is opened/read/closed in the same thread in one RPC call:&lt;/p&gt;

&lt;p&gt;1. Get request&lt;br/&gt;
2. Short Scans (most of them)&lt;br/&gt;
3. Scanner inside coprocessor call. &lt;/p&gt;</comment>
                            <comment id="13793510" author="lhofhansl" created="Sat, 12 Oct 2013 22:37:04 +0000"  >&lt;p&gt;Created &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9753&quot; title=&quot;Excessive readpoint checks in MemstoreScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9753&quot;&gt;&lt;del&gt;HBASE-9753&lt;/del&gt;&lt;/a&gt; for the MemstoreScanner improvements.&lt;/p&gt;</comment>
                            <comment id="13793511" author="vrodionov" created="Sat, 12 Oct 2013 22:38:32 +0000"  >&lt;p&gt;&lt;b&gt;stopRow&lt;/b&gt; is the REAL stopRow which exists. It must be the closest to the Scan&apos;s stopRow, which is &lt;b&gt;less or equal&lt;/b&gt;.&lt;/p&gt;</comment>
                            <comment id="13793514" author="vrodionov" created="Sat, 12 Oct 2013 22:44:43 +0000"  >&lt;p&gt;Lars, this:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;If a HFileReader can prove that the file does not have any KV with a none-0 memstoreTS, the scanner does not have even for skippedKV due to the threads readpoint.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;and this:&lt;/p&gt;

&lt;p&gt;*Can&apos;t remove this, it will lead to incorrect results.&lt;br/&gt;
Note that we already optimize when we can prove that the memstoreTS is not needed.*&lt;/p&gt;

&lt;p&gt;contradicts to each other. &lt;/p&gt;
</comment>
                            <comment id="13793515" author="lhofhansl" created="Sat, 12 Oct 2013 22:45:09 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;, I think you&apos;re correct. The readpoint is set by the RegionScannerImpl and it should use the same readpoint upon each invocation. Thus getting the readpoint from the threadlocal is mere code convenience rather than needed for correctness. &lt;/p&gt;

&lt;p&gt;Feel like adding a patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9753&quot; title=&quot;Excessive readpoint checks in MemstoreScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9753&quot;&gt;&lt;del&gt;HBASE-9753&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;I&apos;ll commit this one.&lt;/p&gt;</comment>
                            <comment id="13793516" author="lhofhansl" created="Sat, 12 Oct 2013 22:47:23 +0000"  >&lt;p&gt;No it does not contradict. In fact they are saying the same thing.&lt;br/&gt;
If the reader can prove that it does not need the memstoreTS it won&apos;t use. You are removing part of the code that does the proving.&lt;/p&gt;</comment>
                            <comment id="13793519" author="lhofhansl" created="Sat, 12 Oct 2013 22:53:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;stopRow is the REAL stopRow which exists. It must be the closest to the Scan&apos;s stopRow, which is less or equal.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Which stopRow in which class are talking about? In RegionScannerImple.isStopRow() it is not.&lt;/p&gt;</comment>
                            <comment id="13793522" author="vrodionov" created="Sat, 12 Oct 2013 23:04:56 +0000"  >&lt;p&gt;OK.There are two stopRows: stopRow original from Scan and calculated &lt;b&gt;stopRowReal&lt;/b&gt; which is the closest &lt;b&gt;real&lt;/b&gt; row in a Store such that  stopRowReal &amp;lt;= stopRow and Scanner.nextAfter(stopRowReal) &amp;gt; stopRow. &lt;br/&gt;
At the time of a scanner creation (RegionScanner) we find &lt;b&gt;stopRowReal&lt;/b&gt; and now we can replace all &lt;b&gt;compareTo (stopRow)&lt;/b&gt; with &lt;b&gt;equalsTo(stopRowReal)&lt;/b&gt;?&lt;/p&gt;</comment>
                            <comment id="13793524" author="lhofhansl" created="Sat, 12 Oct 2013 23:10:22 +0000"  >&lt;p&gt;I see. You&apos;re talking about new code. How do you find stopRowReal efficiently?&lt;br/&gt;
Also what if a filter seek hint jumps you past stopRowReal?&lt;/p&gt;

&lt;p&gt;In any case, I think we have good consensus already. This patch is a good improvement I think; and I like your idea of passing the readpoint to the MemstoreScanner constructor.&lt;/p&gt;</comment>
                            <comment id="13793526" author="vrodionov" created="Sat, 12 Oct 2013 23:23:15 +0000"  >&lt;p&gt;&quot;Feel like adding a patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9753&quot; title=&quot;Excessive readpoint checks in MemstoreScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9753&quot;&gt;&lt;del&gt;HBASE-9753&lt;/del&gt;&lt;/a&gt;?&quot;&lt;/p&gt;

&lt;p&gt;OK, but probably not today/tomorrow. &lt;/p&gt;</comment>
                            <comment id="13793527" author="vrodionov" created="Sat, 12 Oct 2013 23:24:43 +0000"  >&lt;p&gt;&quot;How do you find stopRowReal efficiently?&quot; The same approach as one which is used in finding startRow when scanner is created?&lt;/p&gt;</comment>
                            <comment id="13793532" author="lhofhansl" created="Sun, 13 Oct 2013 00:09:33 +0000"  >&lt;p&gt;We&apos;re not finding the startRow, per se. We just start scanning at or after the row specified, the real startRow just happens to be the row key of the next KV.&lt;br/&gt;
In order to find the real stopRow you&apos;d have to seek to the stopRow and then scan forward once - hence incur and extra IO/cache lookup; might be worth it, need to try.&lt;br/&gt;
Would also have to think about how we&apos;d handle filter seeks that seek past the real stop row, might need a special check for that.&lt;/p&gt;

&lt;p&gt;I also like Ted&apos;s suggestion about just generally passing the readpoint down the scanner stack. In an unrelated project we followed an approach of using ThreadLocals on not so hot paths and passing down the object on the hot paths instead.&lt;br/&gt;
We could question the use of threadlocals altogether. I think that&apos;s would had in mind, Vladimir, right?&lt;/p&gt;</comment>
                            <comment id="13793538" author="lhofhansl" created="Sun, 13 Oct 2013 00:29:34 +0000"  >&lt;p&gt;Also does reseek.&lt;/p&gt;</comment>
                            <comment id="13793539" author="lhofhansl" created="Sun, 13 Oct 2013 00:30:34 +0000"  >&lt;p&gt;Same for trunk.&lt;/p&gt;</comment>
                            <comment id="13793543" author="vrodionov" created="Sun, 13 Oct 2013 00:41:29 +0000"  >&lt;p&gt;The performance advantage of &lt;b&gt;Bytes.equalsTo&lt;/b&gt; over &lt;b&gt;Bytes.compareTo&lt;/b&gt; outweigh any possible extra IO look up regardless of a size of a Scan operation. For short scans it will work as pre-fetching of index and data , for long scans - the extra IO seek time is negligible. &lt;br/&gt;
Sure, ThreadLocals needs to be removed from scanners. Too expensive, especially when you have direct access to memory or cache.&lt;/p&gt;</comment>
                            <comment id="13793558" author="hadoopqa" created="Sun, 13 Oct 2013 01:56:45 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12608182/9751-trunk-v2.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12608182/9751-trunk-v2.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7534//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13793905" author="lhofhansl" created="Mon, 14 Oct 2013 04:01:13 +0000"  >&lt;p&gt;Committed to all branches. Thanks for the review Ted.&lt;/p&gt;

&lt;p&gt;Note that this is complementary to the scanner related stuff in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9753&quot; title=&quot;Excessive readpoint checks in MemstoreScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9753&quot;&gt;&lt;del&gt;HBASE-9753&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9754&quot; title=&quot;Eliminate threadlocal from MVCC code&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9754&quot;&gt;&lt;del&gt;HBASE-9754&lt;/del&gt;&lt;/a&gt;. Here we use an HFile&apos;s metadata to avoid the MVCC altogether.&lt;/p&gt;</comment>
                            <comment id="13793912" author="hudson" created="Mon, 14 Oct 2013 05:10:59 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.94-security #312 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security/312/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security/312/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9751&quot; title=&quot;Excessive  readpoints checks in StoreFileScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9751&quot;&gt;&lt;del&gt;HBASE-9751&lt;/del&gt;&lt;/a&gt; Excessive readpoints checks in StoreFileScanner (larsh: rev 1531792)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13793913" author="hudson" created="Mon, 14 Oct 2013 05:11:13 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.94 #1171 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/1171/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/1171/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9751&quot; title=&quot;Excessive  readpoints checks in StoreFileScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9751&quot;&gt;&lt;del&gt;HBASE-9751&lt;/del&gt;&lt;/a&gt; Excessive readpoints checks in StoreFileScanner (larsh: rev 1531792)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13793943" author="hudson" created="Mon, 14 Oct 2013 06:22:20 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #4613 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/4613/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/4613/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9751&quot; title=&quot;Excessive  readpoints checks in StoreFileScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9751&quot;&gt;&lt;del&gt;HBASE-9751&lt;/del&gt;&lt;/a&gt; Excessive readpoints checks in StoreFileScanner (larsh: rev 1531790)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13793948" author="hudson" created="Mon, 14 Oct 2013 06:30:49 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.96 #137 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.96/137/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.96/137/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9751&quot; title=&quot;Excessive  readpoints checks in StoreFileScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9751&quot;&gt;&lt;del&gt;HBASE-9751&lt;/del&gt;&lt;/a&gt; Excessive readpoints checks in StoreFileScanner (larsh: rev 1531791)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13794078" author="hudson" created="Mon, 14 Oct 2013 12:30:32 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.96-hadoop2 #87 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.96-hadoop2/87/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.96-hadoop2/87/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9751&quot; title=&quot;Excessive  readpoints checks in StoreFileScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9751&quot;&gt;&lt;del&gt;HBASE-9751&lt;/del&gt;&lt;/a&gt; Excessive readpoints checks in StoreFileScanner (larsh: rev 1531791)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13794093" author="hudson" created="Mon, 14 Oct 2013 13:03:43 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #792 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/792/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/792/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9751&quot; title=&quot;Excessive  readpoints checks in StoreFileScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9751&quot;&gt;&lt;del&gt;HBASE-9751&lt;/del&gt;&lt;/a&gt; Excessive readpoints checks in StoreFileScanner (larsh: rev 1531790)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12608181" name="9751-0.94-v2.txt" size="4073" author="lhofhansl" created="Sun, 13 Oct 2013 00:29:34 +0000"/>
                            <attachment id="12608136" name="9751-0.94.txt" size="3836" author="lhofhansl" created="Sat, 12 Oct 2013 05:02:07 +0000"/>
                            <attachment id="12608182" name="9751-trunk-v2.txt" size="3763" author="lhofhansl" created="Sun, 13 Oct 2013 00:30:34 +0000"/>
                            <attachment id="12608137" name="9751-trunk.txt" size="3526" author="lhofhansl" created="Sat, 12 Oct 2013 05:27:01 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 12 Oct 2013 04:59:39 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>353152</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 9 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ovwv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>353439</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>