<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:27:50 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-5448/HBASE-5448.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-5448] Support for dynamic coprocessor endpoints with PB-based RPC</title>
                <link>https://issues.apache.org/jira/browse/HBASE-5448</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description></description>
                <environment></environment>
        <key id="12543626">HBASE-5448</key>
            <summary>Support for dynamic coprocessor endpoints with PB-based RPC</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12540505">HBASE-5305</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ghelmling">Gary Helmling</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Wed, 22 Feb 2012 06:48:44 +0000</created>
                <updated>Mon, 23 Sep 2013 18:30:29 +0000</updated>
                            <resolved>Tue, 18 Sep 2012 06:42:13 +0000</resolved>
                                                    <fixVersion>0.95.0</fixVersion>
                                    <component>IPC/RPC</component>
                    <component>master</component>
                    <component>migration</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>14</watches>
                                                                <comments>
                            <comment id="13405450" author="ghelmling" created="Mon, 2 Jul 2012 23:55:29 +0000"  >&lt;p&gt;Grabbing this, as I&apos;ve been thinking through some ideas of how CP implementors could expose their own protocols using protobufs.  I&apos;ll get up a patch so we can discuss some of the trickier points.&lt;/p&gt;</comment>
                            <comment id="13452684" author="ghelmling" created="Tue, 11 Sep 2012 03:27:43 +0000"  >&lt;p&gt;Here&apos;s a preliminary patch for discussion.  The intent here is that all coprocessor endpoints be defined and callable as protobuf services, so that we no longer have endpoint invocations passed through as Writable blobs.&lt;/p&gt;

&lt;p&gt;For coprocessor implementors, this means doing the following:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Define the coprocessor service and related messages in a .proto file&lt;/li&gt;
	&lt;li&gt;Run protoc to generate code&lt;/li&gt;
	&lt;li&gt;Write code implementing:
	&lt;ul&gt;
		&lt;li&gt;the generated protobuf Service interface&lt;/li&gt;
		&lt;li&gt;the new org.apache.hadoop.hbase.coprocessor.CoprocessorService interface (required for the RegionCoprocessorHost to register the  exposed service)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;With this done, clients can then call the new HTable.coprocessorService() methods to perform the endpoint RPCs. This basically mirrors the current HTable.coprocessorProxy() and HTable.coprocessorExec() calls.&lt;/p&gt;

&lt;p&gt;I debated for a while how we could hide away details of the protobuf generated service code from clients (i.e. Service methods take an RpcController instance which isn&apos;t used in the HBase client).  But it seems simpler to actually embrace that aspect of the generated code and pass through any provided RpcController where possible.  As part&lt;br/&gt;
of this patch, I created an o.a.h.h.ipc.ServerRpcController implementation to handle the RegionCoprocessorHost endpoint invocations.  This facilitates passing back exceptions to the RPC server.  But it may make sense to genericize this a bit more and allow clients to make use of the same implementation.&lt;/p&gt;

&lt;p&gt;For clients, invocations now look something like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
HTable myTable = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HTable(conf, &lt;span class=&quot;code-quote&quot;&gt;&quot;mytable&quot;&lt;/span&gt;);
CoprocessorRpcChannel channel = myTable.coprocessorService(rowkey);
MyService.BlockingInterface service = MyService.newBlockingStub(channel);

MyCallRequest request = MyCallRequest.newBuilder()
     ...
     .build();
MyCallResponse response = service.myCall(&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, request);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;Major changes in this patch are:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;CoprocessorProtocol and the associated HTable client methods (coprocessorProxy, coprocessorExec) are now deprecated.  The current implementation allows both CoprocessorProxy and CoprocessorService&lt;br/&gt;
implementations to be registered side-by-side (even for the same class), so we can have a full major-release cycle before dropping these.&lt;/li&gt;
	&lt;li&gt;AccessController now defines and registers a PB-based Service. TestAccessController is mostly converted to using this implementation in place of AccessControllerProtocol.&lt;/li&gt;
	&lt;li&gt;HRegionServer and HRegion define new execService() methods to handle the invocations&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;This still needs some additional documentation and clean up, but I wanted to get it out for some feedback on the direction for the exposed client interface.&lt;/p&gt;

&lt;p&gt;Additional work to do:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Convert other bundled CoprocessorProtocol-based implementations to PB-based services.  I think it&apos;s best to handle these in follow up issues.&lt;/li&gt;
	&lt;li&gt;Some extra doc on the added classes&lt;/li&gt;
	&lt;li&gt;Update org.apache.hadoop.hbase.coprocessor package javadoc with new usage&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13452693" author="stack" created="Tue, 11 Sep 2012 03:43:39 +0000"  >&lt;p&gt;Good on you Gary (Was afraid to ask about this one....its gnarly).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I debated for a while ...But it seems simpler to actually embrace that aspect of the generated code and pass through any provided RpcController where possible.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds reasonable G.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I created an o.a.h.h.ipc.ServerRpcController implementation to handle the RegionCoprocessorHost endpoint invocations. This facilitates passing back exceptions to the RPC server.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;... should that be back to the client in the above or do you mean passing exceptions from client to server?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;... but it may make sense to genericize this a bit more and allow clients to make use of the same implementation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Same rpccontroller for dynamic cp endpoints or you mean in general (Sorry if dumb question &amp;#8211; I don&apos;t know what the rpccontroller thing is about.. need to go read up).&lt;/p&gt;

&lt;p&gt;The bit of code pasted looks reasonable (I was going to say &apos;natural&apos; but that&apos;d be going too far... I think you know what I mean... when folks see a pb service, they know they got some building to do....)&lt;/p&gt;

&lt;p&gt;Implementors will be going directly against the pb messages.  Thats probably fine.  If important to them, they can do the work hiding the pb and doing the transforms in layers of their own.&lt;/p&gt;

&lt;p&gt;On #1, above, that means we can&apos;t just drop Writable in the rpc for 0.96 because you are thinking of supporting old and new in 0.96?  (0.96 is the singularity; unless someone screams otherwise, we can do stuff we wouldn&apos;t ever do over a major release &amp;#8211; I should go back to the dev list and make sure we are all good w/ this... but that is my understanding).&lt;/p&gt;

&lt;p&gt;On new issues for convertion of old cp-based implementations, that sounds good.&lt;/p&gt;

&lt;p&gt;Let me take a look at the patch now....&lt;/p&gt;







</comment>
                            <comment id="13452710" author="hadoopqa" created="Tue, 11 Sep 2012 04:40:26 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12544583/HBASE-5448.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12544583/HBASE-5448.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 14 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2846//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2846//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13452718" author="ghelmling" created="Tue, 11 Sep 2012 05:03:55 +0000"  >&lt;blockquote&gt;
&lt;p&gt;... should that be back to the client in the above or do you mean passing exceptions from client to server?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For the current implementation, I mean passing exceptions back up from coprocessor endpoint Service implementations, back up to HRegionServer.execService() where it can be re-thrown as a ServiceException (and sent back to the client by the RPC server).  See AccessController.grant() for an example:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      grant(perm);
      response = AccessControlProtos.GrantResponse.getDefaultInstance();
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException ioe) {
      &lt;span class=&quot;code-comment&quot;&gt;// pass exception back up
&lt;/span&gt;      ResponseConverter.setControllerException(controller, ioe);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The PB-generated Service sub-class only defines the async/callback based methods which do not throw ServiceException, so ServerRpcController provides an alternate (though maybe not so natural) channel for communicating the exception.  But if this is useful on the server-side maybe it would be useful in client-side invocations as well?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Same rpccontroller for dynamic cp endpoints or you mean in general (Sorry if dumb question &#8211; I don&apos;t know what the rpccontroller thing is about.. need to go read up).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Same ServerRpcController for clients invoking dynamic CP endpoints (if that&apos;s useful), and a bit of doc around that.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The bit of code pasted looks reasonable (I was going to say &apos;natural&apos; but that&apos;d be going too far... I think you know what I mean... when folks see a pb service, they know they got some building to do....)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, agree it&apos;s not quite as transparent as the proxy-based approach for CoprocessorProtocol, but I don&apos;t see any easy way other than exposing the PB Messages and Service directly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On #1, above, that means we can&apos;t just drop Writable in the rpc for 0.96 because you are thinking of supporting old and new in 0.96? (... I should go back to the dev list and make sure we are all good w/ this... but that is my understanding).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, that&apos;s true.  Deprecating would keep the current Exec/ExecResult and required handling of Writable params in place for 0.96.  Since the way we expose CP endpoints is an aspect of client interface, that seemed like the fairest approach.  Though if we poll the dev-list and there are no major objections, I could see making an exception to be able to phase out all Writable usage.  In the very short-term, keeping both paths in place will allow switching over current CP endpoints piece-by-piece without breakage.&lt;/p&gt;</comment>
                            <comment id="13453008" author="yuzhihong@gmail.com" created="Tue, 11 Sep 2012 13:27:25 +0000"  >&lt;p&gt;@Gary:&lt;br/&gt;
Do you mind rebasing your patch ?&lt;br/&gt;
Thanks&lt;/p&gt;</comment>
                            <comment id="13453826" author="ghelmling" created="Wed, 12 Sep 2012 08:20:37 +0000"  >&lt;p&gt;Updating patch to rebase against current trunk and address the review comments so far.&lt;/p&gt;</comment>
                            <comment id="13453849" author="hadoopqa" created="Wed, 12 Sep 2012 09:10:41 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12544789/HBASE-5448_2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12544789/HBASE-5448_2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 14 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The patch appears to cause mvn compile goal to fail.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs (version 1.3.9) to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.replication.TestReplication&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestSplitLogManager&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2850//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2850//testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2850//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2850//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13454099" author="yuzhihong@gmail.com" created="Wed, 12 Sep 2012 16:24:41 +0000"  >&lt;p&gt;I left a few minor comments on:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/7000/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/7000/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13454382" author="stack" created="Wed, 12 Sep 2012 21:35:14 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt; Those tests commonly fail on trunk.  Doubt it your patch.  I&apos;d be +1 on commit Gary.  Can address stuff like removing all Writable references in new JIRAs?  (Could address the Ted comments on commit?)&lt;/p&gt;</comment>
                            <comment id="13455947" author="ghelmling" created="Fri, 14 Sep 2012 17:07:45 +0000"  >&lt;p&gt;New patch updating package javadoc for org.apache.hadoop.hbase.coprocessor and org.apache.hadoop.hbase.client.coprocessor, addressing some review comments, and adding an example coprocessor Service implementation (RowCountEndpoint).&lt;/p&gt;</comment>
                            <comment id="13456016" author="hadoopqa" created="Fri, 14 Sep 2012 18:34:42 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12545173/HBASE-5448_3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12545173/HBASE-5448_3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 16 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    -1 javac.  The patch appears to cause mvn compile goal to fail.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to cause Findbugs (version 1.3.9) to fail.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.replication.TestReplication&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2871//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2871//testReport/&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2871//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2871//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13456025" author="stack" created="Fri, 14 Sep 2012 18:41:52 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt; Does the TestReplication pass for you Gary locally? I&apos;d doubt your patch the problem.&lt;/p&gt;

&lt;p&gt;I took a quick look at patch.  package doc is great.  +1 on commit.&lt;/p&gt;</comment>
                            <comment id="13456147" author="apurtell" created="Fri, 14 Sep 2012 21:10:24 +0000"  >&lt;p&gt;Big thanks for adding the rowcounter service-based coprocessor example Gary. Looks good to me. I see the follow up JIRAs also, makes sense. +1 for commit.&lt;/p&gt;</comment>
                            <comment id="13456177" author="ghelmling" created="Fri, 14 Sep 2012 21:45:52 +0000"  >&lt;p&gt;Thanks for the reviews guys.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; TestReplication is timing out for me locally both on current trunk and on my branch, so don&apos;t think it&apos;s anything specific to this change.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=yuzhihong%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;yuzhihong@gmail.com&quot;&gt;Ted Yu&lt;/a&gt; I&apos;ll fix up your additional comments on commit if that&apos;s okay with you.  Have local changes for them already.&lt;/p&gt;</comment>
                            <comment id="13456199" author="yuzhihong@gmail.com" created="Fri, 14 Sep 2012 22:28:49 +0000"  >&lt;p&gt;@Gary:&lt;br/&gt;
Totally fine with integration.&lt;/p&gt;

&lt;p&gt;It would be nice to see the performance difference between your rowcounter service-based coprocessor example and the map/reduce job example.&lt;/p&gt;</comment>
                            <comment id="13457640" author="ghelmling" created="Tue, 18 Sep 2012 06:35:47 +0000"  >&lt;p&gt;Attaching final patch committed to trunk.  Only changes from previous are minor javadoc tweaks and JUnit rule line from Ted&apos;s review.&lt;/p&gt;</comment>
                            <comment id="13457644" author="ghelmling" created="Tue, 18 Sep 2012 06:42:13 +0000"  >&lt;p&gt;Committed patch to trunk.  Thanks for the reviews Ted, Stack and Andy.&lt;/p&gt;</comment>
                            <comment id="13457645" author="hadoopqa" created="Tue, 18 Sep 2012 06:42:14 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12545530/HBASE-5448_4.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12545530/HBASE-5448_4.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 16 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2887//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2887//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13457674" author="hudson" created="Tue, 18 Sep 2012 07:49:36 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #3345 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/3345/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/3345/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5448&quot; title=&quot;Support for dynamic coprocessor endpoints with PB-based RPC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5448&quot;&gt;&lt;del&gt;HBASE-5448&lt;/del&gt;&lt;/a&gt;  Support dynamic coprocessor endpoints with protobuf based RPC (Revision 1387001)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
garyh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/HTableInterface.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/HTablePool.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Batch.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Exec.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/coprocessor/ExecResult.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/coprocessor/package-info.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorService.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/example/RowCountEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/example/generated&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/example/generated/ExampleProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/package-info.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/BlockingRpcCallback.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CoprocessorProtocol.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CoprocessorRpcChannel.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/ExecRPCInvoker.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/ServerRpcController.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/ResponseConverter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/generated/AccessControlProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ClientProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/rest/client/RemoteHTable.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/protobuf/AccessControl.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/protobuf/Client.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/protobuf/Examples.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/ColumnAggregationEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/ProtobufCoprocessorService.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/example/TestRowCountEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13457755" author="hudson" created="Tue, 18 Sep 2012 11:40:26 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #179 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/179/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/179/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5448&quot; title=&quot;Support for dynamic coprocessor endpoints with PB-based RPC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5448&quot;&gt;&lt;del&gt;HBASE-5448&lt;/del&gt;&lt;/a&gt;  Support dynamic coprocessor endpoints with protobuf based RPC (Revision 1387001)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
garyh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/HTableInterface.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/HTablePool.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Batch.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/coprocessor/Exec.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/coprocessor/ExecResult.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/coprocessor/package-info.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorService.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/example/RowCountEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/example/generated&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/example/generated/ExampleProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/package-info.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/BlockingRpcCallback.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CoprocessorProtocol.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CoprocessorRpcChannel.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/ExecRPCInvoker.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/ServerRpcController.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/ResponseConverter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/generated/AccessControlProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ClientProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/rest/client/RemoteHTable.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/protobuf/AccessControl.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/protobuf/Client.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/protobuf/Examples.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/ColumnAggregationEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/ProtobufCoprocessorService.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/example/TestRowCountEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestAccessController.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13536629" author="stack" created="Thu, 20 Dec 2012 00:15:30 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt; Mighty Gary, why ConcurrentSkipListMap in the below in HTable#coprocessorService rather than what was used previously up in HTable#coprocessorExec, a TreeMap wrapped in a Collections.synchronizedMap?  The former does not allow values of null whereas the latter does.  There is a test in TestServerCustomProtocol that tests we can get back null.  It fails if I try to return null because of the above change. Here is the code I refer to:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
	
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &amp;lt;T &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Service, R&amp;gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[],R&amp;gt; coprocessorService(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;T&amp;gt; service,
1389	
      &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] startKey, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] endKey, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Batch.Call&amp;lt;T,R&amp;gt; callable)
1390	
      &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; ServiceException, Throwable {
1391	
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[],R&amp;gt; results =  &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ConcurrentSkipListMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], R&amp;gt;(Bytes.BYTES_COMPARATOR);
1392	
    coprocessorService(service, startKey, endKey, callable, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Batch.Callback&amp;lt;R&amp;gt;() {
1393	
      &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void update(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] region, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] row, R value) {
1394	
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (value == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
1395	
          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isDebugEnabled()) {
1396	
            LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Call to &quot;&lt;/span&gt; + service.getName() +
1397	
                &lt;span class=&quot;code-quote&quot;&gt;&quot; received NULL value from Batch.Call &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region &quot;&lt;/span&gt; + Bytes.toStringBinary(region));
1398	
          }
1399	
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
1400	
          results.put(region, value);
1401	
        }
1402	
      }
1403	
    });
1404	
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; results;
1405	
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wondering if an explicit reason that I am not aware of (There maybe given you seem to go out of your way to  not return nulls though it seems simple enough to go back to the old way of doing nulls).&lt;/p&gt;

&lt;p&gt;Thanks boss.&lt;/p&gt;</comment>
                            <comment id="13536640" author="ghelmling" created="Thu, 20 Dec 2012 00:28:11 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; That seems an unintentional bug on my part.  I recall that the coprocessorExec() synchronization issue was being fixed at the same time I was working on this.  I might have missed the final resolution.  I probably chose CSLM for &quot;performance&quot; but missed the change in semantics with disallowing null.  With the switch to PB services, you should not get back null from an endpoint (except with an exception), but that doesn&apos;t mean the Batch.Call implementation wouldn&apos;t return null.&lt;/p&gt;</comment>
                            <comment id="13536654" author="ghelmling" created="Thu, 20 Dec 2012 01:03:20 +0000"  >&lt;p&gt;Opened &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7397&quot; title=&quot;HTable.coprocessorService() should allow null values in returned Map&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7397&quot;&gt;&lt;del&gt;HBASE-7397&lt;/del&gt;&lt;/a&gt; to fix.&lt;/p&gt;</comment>
                            <comment id="13536812" author="stack" created="Thu, 20 Dec 2012 06:16:47 +0000"  >&lt;p&gt;Thanks for fixing the null issue G.&lt;/p&gt;

&lt;p&gt;A thought.  I think this pb-based way of doing dynamic cps elegant after looking at it a while.  I know &apos;elegant&apos; is not the first thing that comes to mind when you have pb and rpc in the mix, but hey, can&apos;t keep it to myself.&lt;/p&gt;

&lt;p&gt;One thing I think we have lost though going to this new mechanism is the ability to do generics: i.e. GenericProtocol over in hbase-server/src/test can&apos;t be made work now.  I believe this so because pb requires you specify a type: &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/proto#simple&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://developers.google.com/protocol-buffers/docs/proto#simple&lt;/a&gt;  Do you agree G?&lt;/p&gt;

&lt;p&gt;I think this fine.  We just need to doc. it in ref notes above I&apos;d say and be done w/ it.&lt;/p&gt;</comment>
                            <comment id="13537197" author="stack" created="Thu, 20 Dec 2012 17:54:37 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt; One other question G.  How to do exceptions in a coprocessor?  I see where we set the exception on the controller if there is one, but should we then abandon further processing &amp;#8211; return?  We need to call the RpcCallback done, though, right?&lt;/p&gt;

&lt;p&gt;Here is example from tail of an endpoint cp implementation:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
...
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
      ResponseConverter.setControllerException(controller, e);
      &lt;span class=&quot;code-comment&quot;&gt;// Set result to -1 to indicate error.
&lt;/span&gt;      sumResult = -1;
      LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Setting sum result to -1 to indicate error&quot;&lt;/span&gt;, e);
    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (scanner != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
          scanner.close();
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
          ResponseConverter.setControllerException(controller, e);
          sumResult = -1;
          LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Setting sum result to -1 to indicate error&quot;&lt;/span&gt;, e);
        }
      }
    }
    done.run(SumResponse.newBuilder().setSum(sumResult).build());
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is that how you&apos;d do it?&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13537282" author="devaraj" created="Thu, 20 Dec 2012 19:19:52 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, yes, this is how I think it needs to be done.. For examples, please have a look at AggregateClient and AggregateImplementation classes. On the client side, you could do the following (to check/signal exceptions):&lt;br/&gt;
              AggregateResponse response = rpcCallback.get();&lt;br/&gt;
              if (controller.failedOnException()) &lt;/p&gt;
{
                throw controller.getFailedOn();
              }

&lt;p&gt;[&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt;, please chime in if I missed anything..&lt;/p&gt;</comment>
                            <comment id="13537300" author="ghelmling" created="Thu, 20 Dec 2012 19:39:40 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; Comments below:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;A thought. I think this pb-based way of doing dynamic cps elegant after looking at it a while. I know &apos;elegant&apos; is not the first thing that comes to mind when you have pb and rpc in the mix, but hey, can&apos;t keep it to myself.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m glad someone sees it that way &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  It is at least consistent, if a little verbose.  I think it could be more &quot;elegant&quot; if we did a custom PB compiler plugin and required service implementors to compile their endpoint definitions with our own script or build target.  Then I think we could control the generated service method signatures.  Maybe if I&apos;m feeling especially crazy I&apos;ll check that out over the holidays.  But I wouldn&apos;t consider actually shipping that unless it significantly simplified these cases and didn&apos;t require additional mass changes.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One thing I think we have lost though going to this new mechanism is the ability to do generics: i.e. GenericProtocol over in hbase-server/src/test can&apos;t be made work now. I believe this so because pb requires you specify a type: &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/proto#simple&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://developers.google.com/protocol-buffers/docs/proto#simple&lt;/a&gt; Do you agree G?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, I agree, though in a way generics don&apos;t even apply with the use of protobufs.  Services could do more dynamic interpretation of messages, but it would be up to them to implement that in a way that made sense for the specific case.  I don&apos;t think there&apos;s anything we need to do to support this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How to do exceptions in a coprocessor? I see where we set the exception on the controller if there is one, but should we then abandon further processing &#8211; return? We need to call the RpcCallback done, though, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, the exception should be set on the controller in order to be returned to the client.  It seems to be good practice to always call RpcCallback.done(), but it&apos;s not strictly required for endpoint implementations and it should also be fine to pass a null argument in the case of an exception.  Your implementation looks fine to me, assuming that &quot;sum&quot; is a required field in the proto message, otherwise you could skip setting the dummy value in the response on an exception.&lt;/p&gt;

&lt;p&gt;One additional idea would be to define a custom unchecked exception (EndpointException extends RuntimeException?) which we could watch for and use to set the exception in the controller, but either with this or the current ResponseConverter.setControllerException() we&apos;re relying on convention over a real contract, which doesn&apos;t seem great.&lt;/p&gt;</comment>
                            <comment id="13537316" author="ghelmling" created="Thu, 20 Dec 2012 19:54:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;if (controller.failedOnException()) { throw controller.getFailedOn(); }&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Since this was becoming such a common pattern, I recently added ServerRpcContoller.checkFailed() to do this in a single step.&lt;/p&gt;</comment>
                            <comment id="13537332" author="stack" created="Thu, 20 Dec 2012 20:08:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;Maybe if I&apos;m feeling especially crazy I&apos;ll check that out over the holidays. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d say wait for some demand.  Drink eggnog instead!&lt;/p&gt;

&lt;p&gt;Thanks for input on the exception handling (and you too DD).&lt;/p&gt;</comment>
                            <comment id="13774982" author="stack" created="Mon, 23 Sep 2013 18:30:29 +0000"  >&lt;p&gt;Marking closed.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12607677">HBASE-6785</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12607681">HBASE-6789</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12624751">HBASE-7397</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12607684">HBASE-6790</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12544583" name="HBASE-5448.patch" size="365505" author="ghelmling" created="Tue, 11 Sep 2012 03:27:43 +0000"/>
                            <attachment id="12544789" name="HBASE-5448_2.patch" size="388658" author="ghelmling" created="Wed, 12 Sep 2012 08:20:37 +0000"/>
                            <attachment id="12545173" name="HBASE-5448_3.patch" size="454724" author="ghelmling" created="Fri, 14 Sep 2012 17:07:45 +0000"/>
                            <attachment id="12545530" name="HBASE-5448_4.patch" size="454872" author="ghelmling" created="Tue, 18 Sep 2012 06:35:47 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 2 Jul 2012 23:55:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>228865</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 12 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i048gv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>22637</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Coprocessor endpoints can now be implemented as protocol buffer defined Services.  CoprocessorProtocol based implementations are now deprecated.  See the package javadoc for org.apache.hadoop.hbase.client.coprocessor for implementation details.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>