<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:12:24 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-16278/HBASE-16278.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-16278] Use ConcurrentHashMap instead of ConcurrentSkipListMap if possible</title>
                <link>https://issues.apache.org/jira/browse/HBASE-16278</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;SSD and 10G network make our system CPU bound again, so the speed of memory operation only code becomes more and more important.&lt;/p&gt;

&lt;p&gt;In HBase, if want to use byte[] as a map key, then we will always use CSLM even if we do not need the map to be ordered. I know that this could save one object allocation since we can not use byte[] directly as CHM&apos;s key. But we all know that CHM is faster than CSLM, so I wonder if it worth to use CSLM instead of CHM only because one extra object allocation.&lt;/p&gt;

&lt;p&gt;Then I wrote a simple jmh micro benchmark to test the performance of CHM and CSLM. The code could be found here&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Apache9/microbench&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/Apache9/microbench&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It turns out that CHM is still much faster than CSLM with one extra object allocation.&lt;/p&gt;

&lt;p&gt;So I think we should always use CHM if we do not need the keys to be sorted.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12992020">HBASE-16278</key>
            <summary>Use ConcurrentHashMap instead of ConcurrentSkipListMap if possible</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="Apache9">Duo Zhang</reporter>
                        <labels>
                    </labels>
                <created>Sat, 23 Jul 2016 07:17:39 +0000</created>
                <updated>Mon, 25 Jul 2016 08:17:48 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>13</watches>
                                                                                                            <comments>
                            <comment id="15390594" author="apache9" created="Sat, 23 Jul 2016 07:21:54 +0000"  >&lt;p&gt;This the test result on a machine with 2 * E5-2630 v2, 128G RAM, jdk8u72. The machine is not used by me exclusively so the result may have some noise, but it does not change the qualitative result since CHM is much faster.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;./bin/run.sh -f 1 -t 10 -i 10
Benchmark       Mode  Cnt     Score    Error  Units
CHMTest.test   thrpt   10  1328.692 &#177; 26.052  ops/s
CSLMTest.test  thrpt   10   371.875 &#177;  3.299  ops/s

./bin/run.sh -f 1 -t 20 -i 10
Benchmark       Mode  Cnt     Score    Error  Units
CHMTest.test   thrpt   10  2093.498 &#177; 42.794  ops/s
CSLMTest.test  thrpt   10   560.551 &#177; 23.960  ops/s

./bin/run.sh -f 1 -t 40 -i 10
Benchmark       Mode  Cnt     Score    Error  Units
CHMTest.test   thrpt   10  2072.665 &#177; 52.749  ops/s
CSLMTest.test  thrpt   10   621.861 &#177; 14.405  ops/s

./bin/run.sh -f 1 -t 100 -i 10
Benchmark       Mode  Cnt     Score    Error  Units
CHMTest.test   thrpt   10  2105.644 &#177; 27.742  ops/s
CSLMTest.test  thrpt   10   624.786 &#177; 12.830  ops/s

./bin/run.sh -f 1 -t 200 -i 10
Benchmark       Mode  Cnt     Score    Error  Units
CHMTest.test   thrpt   10  2160.738 &#177; 53.120  ops/s
CSLMTest.test  thrpt   10   639.131 &#177; 10.326  ops/s
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15390800" author="stack" created="Sat, 23 Jul 2016 18:11:15 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Anything you want me to try on a cluster? Anything that would highlight benefit of CHM over CSLM?&lt;/p&gt;</comment>
                            <comment id="15390945" author="apache9" created="Sun, 24 Jul 2016 05:15:30 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; We can find unnecessary CSLM in code and open sub tasks to change them. I do not know if it could make a big difference right now since HBase is not a micro benchmark...&lt;/p&gt;</comment>
                            <comment id="15391123" author="stack" created="Sun, 24 Jul 2016 17:48:38 +0000"  >&lt;p&gt;Makes sense &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Apache9&quot; class=&quot;user-hover&quot; rel=&quot;Apache9&quot;&gt;Duo Zhang&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15391375" author="ikeda" created="Mon, 25 Jul 2016 05:37:38 +0000"  >&lt;p&gt;Added a trial class which might be useful.&lt;/p&gt;</comment>
                            <comment id="15391387" author="apache9" created="Mon, 25 Jul 2016 05:59:08 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt; One problem is that, we may use a byte[] as key multiple times in a method, so declare a map with something like ByteArrayWrapper can prevent allocating an extra object every time.&lt;/p&gt;

&lt;p&gt;And I think it is also a burden that we need to track the interface change between different java versions. For example, in java8 there is a computeIfAbsent method, which is very useful. And master is claimed to only support java 8+, so in master we should also implement this method. But for branch-1, we can not implement it since we should also support java 7. Of course, this is not a problem that can not be solved but I think a wrapper class is simple and enough.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="15391480" author="ikeda" created="Mon, 25 Jul 2016 07:43:05 +0000"  >&lt;p&gt;Creating an object itself are quite light-weight and that has the almost same cost as synchronization without contention, according to my old Java book. If you haven&apos;t worry about how many times we access volatile fields nor CAS, it would not make sense to just think about creating small objects (and concurrent maps will use CAS many times in order to avoid block).&lt;/p&gt;

&lt;p&gt;However, I agree that using raw byte arrays is a bad design because of their mutability, in general. But it seems too late (and we cannot help from the beginning since Hadoop have adopted that in its API) and there too many usages of raw bytes. From viewpoints of both performance and object-oriented programing, I think it would not pay to do something about that.&lt;/p&gt;

&lt;p&gt;I didn&apos;t know the master just supports Java8+, but I think a developer who want to use the new method can fix the code. After all, maps using mutable keys cannot be used for general purposes.&lt;/p&gt;</comment>
                            <comment id="15391520" author="chenheng" created="Mon, 25 Jul 2016 08:17:48 +0000"  >&lt;p&gt;I don&apos;t  think use &lt;tt&gt;ByteArrayWrapper&lt;/tt&gt; as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Apache9&quot; class=&quot;user-hover&quot; rel=&quot;Apache9&quot;&gt;Duo Zhang&lt;/a&gt; said above has essential difference with &lt;tt&gt;ConcurrentHashByteArrayMap&lt;/tt&gt; which &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt; uploaded.  &lt;br/&gt;
It seems &lt;tt&gt;ConcurrentHashByteArrayMap&lt;/tt&gt; has wrapped the byte[] internal, but &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=Apache9&quot; class=&quot;user-hover&quot; rel=&quot;Apache9&quot;&gt;Duo Zhang&lt;/a&gt; do it explicitly outside the CHM....   &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12819857" name="ConcurrentHashByteArrayMap.java" size="10361" author="ikeda" created="Mon, 25 Jul 2016 05:37:38 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12992133">HBASE-16280</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 23 Jul 2016 18:11:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            20 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31eyn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>