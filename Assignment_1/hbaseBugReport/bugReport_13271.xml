<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:41:33 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-13271/HBASE-13271.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-13271] Table#puts(List&lt;Put&gt;) operation is indeterminate; needs fixing</title>
                <link>https://issues.apache.org/jira/browse/HBASE-13271</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Another API issue found by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=larsgeorge&quot; class=&quot;user-hover&quot; rel=&quot;larsgeorge&quot;&gt;Lars George&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&quot;Table.put(List&amp;lt;Put) is questionable after the API change.&quot;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[Mar-17 9:21 AM] Lars George: Table.put(List&amp;lt;Put&amp;gt;) is weird since you cannot flush partial lists
[Mar-17 9:21 AM] Lars George: Say out of 5 the third is broken, then the put() call returns with a local exception (say empty Put) and then you have 2 that are in the buffer
[Mar-17 9:21 AM] Lars George: but how to you force commit them?
[Mar-17 9:22 AM] Lars George: In the past you would call flushCache(), but that is &lt;span class=&quot;code-quote&quot;&gt;&quot;gone&quot;&lt;/span&gt; now
[Mar-17 9:22 AM] Lars George: and flush() is not available on a Table
[Mar-17 9:22 AM] Lars George: And you cannot access the underlying BufferedMutation neither
[Mar-17 9:23 AM] Lars George: You can *only* add more Puts &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; you can, or call close()
[Mar-17 9:23 AM] Lars George: that is just weird to explain
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, Table needs to get flush back or we deprecate this method or it flushes immediately and does not return until complete in the implementation.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12782981">HBASE-13271</key>
            <summary>Table#puts(List&lt;Put&gt;) operation is indeterminate; needs fixing</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Wed, 18 Mar 2015 18:44:24 +0000</created>
                <updated>Sat, 18 Jun 2016 01:49:09 +0000</updated>
                                            <version>1.0.0</version>
                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>1.4.0</fixVersion>
                                    <component>API</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="14367678" author="stack" created="Wed, 18 Mar 2015 19:02:45 +0000"  >&lt;p&gt;Related, HTableInterface deprecates getWriteBufferSize and setWriteBufferSize.  These methods are in the sub-Interface Table only here they are not deprecated. So, user may be getting wrong message &amp;#8211; especially if flush comes back into Table.  Needs clean up in alignment with how we deal with List&amp;lt;Put&amp;gt;&lt;/p&gt;</comment>
                            <comment id="14367917" author="sduskis" created="Wed, 18 Mar 2015 21:09:10 +0000"  >&lt;p&gt;The current implementation is:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void put(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Put&amp;gt; puts) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    getBufferedMutator().mutate(puts);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (autoFlush) {
      flushCommits();
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Would something like the following be better:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void put(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;Put&amp;gt; puts) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      getBufferedMutator().mutate(puts);
    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (autoFlush) {
        flushCommits();
      }
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14367934" author="nkeywal" created="Wed, 18 Mar 2015 21:15:27 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Mar-17 9:21 AM&amp;#93;&lt;/span&gt; Lars George: Say out of 5 the third is broken, then the put() call returns with a local exception (say empty Put) and then you have 2 that are in the buffer&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;Mar-17 9:21 AM&amp;#93;&lt;/span&gt; Lars George: but how to you force commit them?&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;Mar-17 9:22 AM&amp;#93;&lt;/span&gt; Lars George: In the past you would call flushCache(), but that is &quot;gone&quot; now&lt;/p&gt;

&lt;p&gt;If they failed the first time, why would they succeed the second time?&lt;br/&gt;
Why are they still in the buffer if it failed?&lt;br/&gt;
Why flushCache is not available? flushing the commit should be available to be end user, no?&lt;/p&gt;</comment>
                            <comment id="14367973" author="sduskis" created="Wed, 18 Mar 2015 21:38:17 +0000"  >&lt;p&gt;There shouldn&apos;t be a need to flush any buffer in Table.  Autoflush should always be true.  The idea is that users who want autoflush=false should use the new BufferedMutator interface rather than a table. &lt;/p&gt;

&lt;p&gt;The problem, it would seem, is that the behavior of getBufferedMutator().mutate(puts); is indeterminate.  We should have more determinate behavior for exception cases in put(List&amp;lt;Put&amp;gt;).&lt;/p&gt;

&lt;p&gt;I personally think that the put(List&amp;lt;Put&amp;gt;) method is useful.  There should be an efficient (and determinate) method of doing a synchronous batch call.  &lt;/p&gt;

&lt;p&gt;Maybe HTable.put(List&amp;lt;Put&amp;gt;) should use HTable.batch() rather than BufferedMutator.mutate for the autoflush=true case.  If autoflush=false, then someone must have accessed an HTable class rather than a Table interface, in which case they have access to the flush() method on HTable, and using a BufferedMutator should be safe.&lt;/p&gt;</comment>
                            <comment id="14367989" author="nkeywal" created="Wed, 18 Mar 2015 21:45:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;There shouldn&apos;t be a need to flush any buffer in Table. Autoflush should always be true. The idea is that users who want autoflush=false should use the new BufferedMutator interface rather than a table. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ok (if we can flush the BufferedMutator on demand it&apos;s fine).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I personally think that the put(List&amp;lt;Put&amp;gt;) method is useful&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree. And I think a lot of people depends on it: they use it to have better performances than calling multiple times a the put(Put).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe HTable.put(List&amp;lt;Put&amp;gt;) should use HTable.batch() rather than BufferedMutator.mutate for the autoflush=true case&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;From what I know of the code I like this idea. But it seems that Lars issue is with autoflush=false?&lt;/p&gt;

&lt;p&gt;Thanks Solomon.&lt;/p&gt;</comment>
                            <comment id="14368044" author="sduskis" created="Wed, 18 Mar 2015 22:22:59 +0000"  >&lt;blockquote&gt;
&lt;p&gt;But it seems that Lars issue is with autoflush=false?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I certainly don&apos;t want to put words in lars&apos; mouth, but I think that the case at hand is the default autoflush=true.  In the default case, if there&apos;s an exception in the bufferedMutator.put(puts), then bufferedMutator.flush() method is never invoked.  That leaves the possibility of some puts being left over in the bufferedMutator&apos;s buffer, and the user will have no way of knowing.  After that initial exception, there&apos;s no good way to clear the buffer.  If one calls Table.put(put) after that initial put(puts) failure, there still might be remnants of the previous call.  That might cause additional exceptions unrelated to the current put(put) operation.  &lt;/p&gt;

&lt;p&gt;I probably should add a test case for this scenario...&lt;/p&gt;</comment>
                            <comment id="14368052" author="nkeywal" created="Wed, 18 Mar 2015 22:29:22 +0000"  >&lt;p&gt;Oh ok. Thanks for the explanation. Then the call to batch seems to be the perfect solution.&lt;/p&gt;</comment>
                            <comment id="14368075" author="ndimiduk" created="Wed, 18 Mar 2015 22:51:02 +0000"  >&lt;p&gt;I think it&apos;s better to call flush from finally, because batch will use a different AP from the BufferedMutatorImpl#doMutate.&lt;/p&gt;</comment>
                            <comment id="14368149" author="mantonov" created="Wed, 18 Mar 2015 23:40:42 +0000"  >&lt;p&gt;HTable#flushCommits calls BufferedMutator#flush() internally, so user has a way to manually flush anyway, right?&lt;/p&gt;</comment>
                            <comment id="14368158" author="mantonov" created="Wed, 18 Mar 2015 23:45:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;That leaves the possibility of some puts being left over in the bufferedMutator&apos;s buffer, and the user will have no way of knowing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Wondering if BufferedMutaror should have a method to retrive the number of mutations in buffer (writeAsyncBuffer.size() in current impl)?&lt;/p&gt;</comment>
                            <comment id="14368183" author="sduskis" created="Thu, 19 Mar 2015 00:06:16 +0000"  >&lt;p&gt;Yes.  A user can cast to an HTable from a Table and call flushCommits().  I would prefer an implementation of Table that would not require casting down to HTable.&lt;/p&gt;</comment>
                            <comment id="14368862" author="larsgeorge" created="Thu, 19 Mar 2015 11:02:29 +0000"  >&lt;p&gt;Good discussion already, let me chime in: yes, this is about the autoflush==true case. And yes, this is &lt;em&gt;only&lt;/em&gt; using the new API. In that case, you have either a BufferedMutator or a Table. The latter has put(List&amp;lt;Put&amp;gt;) but what it does in case of an error is hard to handle since we mix local and remote errors. The remote errors can be dealt with when catching the exception. But inserting mutations into the local write buffer and triggering a local error (put is empty, or some such) will cause the above scenario.&lt;/p&gt;

&lt;p&gt;I also like to have a put(List) option, it is handy. So what could be done. Catching the exception and doing the flush() in the final does not help much, as it leaves the other Puts uncommitted. Example: you have 5 puts an the third is empty. You call put(list) and the third triggers the local exception. If we change to code to have a &quot;finally&quot; clause you commit #1 and #2. But &lt;em&gt;not&lt;/em&gt; #5. The client has to catch the exception, then somehow figure out which mutation was faulty and where to continue. That is mayhem!&lt;/p&gt;

&lt;p&gt;I suggest the following rather, for put(List) disable local checks! What that means is we send it all mutations to the server and get a list back of those that have failed, while the others all went through. This is assuming that the majority of API users will have some sense to created proper put instances.&lt;/p&gt;

&lt;p&gt;And that is what batch() apparently does, ie. no local checks. But the only version that is approved is &lt;tt&gt;batch(final List&amp;lt;? extends Row&amp;gt; actions, final Object[] results)&lt;/tt&gt; which needs to be translated into what put(List) is supposed to do. How would we return the list of results or errors for that call?&lt;/p&gt;

&lt;p&gt;BTW, this also applies to BufferedMutation.mutate(List&amp;lt;Mutation&amp;gt;). You still need to figure out what went wrong client side, which will lead to cumbersome, reinvented boilerplate code at many API users trying to handle lists of mutations sensibly.&lt;/p&gt;

&lt;p&gt;As for &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Wondering if BufferedMutaror should have a method to retrive the number of mutations in buffer (writeAsyncBuffer.size() in current impl)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like the idea of having ways to figure out the status of the local buffer. Right now it is very tightly guarded.&lt;/p&gt;</comment>
                            <comment id="14369362" author="larsgeorge" created="Thu, 19 Mar 2015 14:14:40 +0000"  >&lt;p&gt;Looking at delete(List&amp;lt;Delete&amp;gt;) now, that does it proper. It is because Delete&apos;s are immediate, same as Get&apos;s. The issue arises due to the client side write buffer with put(List&amp;lt;Put&amp;gt;). I propose for just that function we do exactly what delete(List) does, as put(List) also is flushing the buffer at the end of the list as it is implemented now (API in 1.0.0). That keep both the same, &lt;b&gt;and&lt;/b&gt; keeps put(List) away from flushing the local write buffer. &lt;/p&gt;

&lt;p&gt;In fact, it needs to be checked, maybe the entire local write buffer can be removed as you either get an explicit one (BufferedMutator) or expect Table to flush immediately anyways. Are we keeping this just for HTable users? It is deprecated, so when we drop it, we could then at least remove the entire crud?&lt;/p&gt;</comment>
                            <comment id="14369732" author="enis" created="Thu, 19 Mar 2015 17:15:56 +0000"  >&lt;p&gt;Agreed, &lt;tt&gt;delete(List&amp;lt;Delete&amp;gt;)&lt;/tt&gt; uses batch, which seems to be the right approach. &lt;/p&gt;</comment>
                            <comment id="14369888" author="ndimiduk" created="Thu, 19 Mar 2015 18:50:37 +0000"  >&lt;p&gt;See my earlier comment about using the correct AsyncProcess for writes. You&apos;ll probably need to replumb batch to get it&apos;s AP externally. Doing otherwise will lead to a change in behavior for users who have specified their own thread pools.&lt;/p&gt;</comment>
                            <comment id="14370113" author="mantonov" created="Thu, 19 Mar 2015 21:08:29 +0000"  >&lt;p&gt;Yeah, definitely. I think being able to flush forcibly should be in client interface. I was thinking that user could obtain BufferedMutator for this table and call flush() on it, but looks like that&apos;s not possible.&lt;/p&gt;</comment>
                            <comment id="14370127" author="mantonov" created="Thu, 19 Mar 2015 21:18:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;I like the idea of having ways to figure out the status of the local buffer. Right now it is very tightly guarded.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah. Other opinions on that? I think I&apos;ll open another jira to add getNumRows() and getCurrentWriteBufferSize() to BufferedMutator.&lt;/p&gt;</comment>
                            <comment id="14370141" author="ndimiduk" created="Thu, 19 Mar 2015 21:23:38 +0000"  >&lt;p&gt;There&apos;s intentionally no client-exposed buffer when a Table instance is used; it&apos;s an implementation detail. The intended meaning of put(List&amp;lt;Put&amp;gt;) &amp;#8211; as well as the other variants list get(List&amp;lt;Get&amp;gt;), delete(List&amp;lt;Delete&amp;gt;), &amp;amp;c. &amp;#8211; is a convenient special form of batch(List&amp;lt;&amp;gt;), which also exposes no concept of local buffer.&lt;/p&gt;</comment>
                            <comment id="14370151" author="mantonov" created="Thu, 19 Mar 2015 21:26:58 +0000"  >&lt;p&gt;Hm, as a bit side note..Connection class (public API) has method #getBufferedMutator(), but BufferedMutator interface is marked as Private. Looks a bit strange to me.&lt;/p&gt;</comment>
                            <comment id="14370192" author="larsgeorge" created="Thu, 19 Mar 2015 21:49:32 +0000"  >&lt;p&gt;That is indeed weird. It is used like Table by a client. Why is it not Public? I can only assume this is an oversight?&lt;/p&gt;</comment>
                            <comment id="14370212" author="mantonov" created="Thu, 19 Mar 2015 22:01:19 +0000"  >&lt;p&gt;Yep, looks like oversight for me to. And javadoc suggest it&apos;s indeed public, client-oriented API.&lt;/p&gt;</comment>
                            <comment id="14370214" author="mantonov" created="Thu, 19 Mar 2015 22:02:26 +0000"  >&lt;p&gt;.bq no client-exposed buffer when a Table instance is used&lt;br/&gt;
Is your comment related to BufferedMutator too?&lt;/p&gt;</comment>
                            <comment id="14370501" author="ndimiduk" created="Fri, 20 Mar 2015 01:20:36 +0000"  >&lt;p&gt;That sounds like a mistake, BufferedMutator is intended to be a @Public interface.&lt;/p&gt;</comment>
                            <comment id="14371845" author="enis" created="Fri, 20 Mar 2015 18:46:36 +0000"  >&lt;p&gt;The patch went a lot of iterations back and forth. It may have been an artifact of that. &lt;br/&gt;
Let&apos;s fix it. &lt;/p&gt;</comment>
                            <comment id="14374866" author="larsgeorge" created="Sun, 22 Mar 2015 10:40:42 +0000"  >&lt;p&gt;The issue with BM not being Public should be a separate issue. Did someone create that? If not, I can.&lt;/p&gt;</comment>
                            <comment id="14376328" author="mantonov" created="Mon, 23 Mar 2015 18:20:43 +0000"  >&lt;p&gt;There&apos;s &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13315&quot; title=&quot;BufferedMutator should be @InterfaceAudience.Public&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13315&quot;&gt;&lt;del&gt;HBASE-13315&lt;/del&gt;&lt;/a&gt; for audience. Don&apos;t think it makes sense to link it to this issue though.&lt;/p&gt;</comment>
                            <comment id="14376331" author="mantonov" created="Mon, 23 Mar 2015 18:22:14 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=larsgeorge&quot; class=&quot;user-hover&quot; rel=&quot;larsgeorge&quot;&gt;Lars George&lt;/a&gt; do you think we need also jira to add getNumRows() and getCurrentWriteBufferSize() to BufferedMutator interface, as discussed above?&lt;/p&gt;</comment>
                            <comment id="14654523" author="ndimiduk" created="Tue, 4 Aug 2015 23:28:52 +0000"  >&lt;p&gt;Any movement here? Bumping out of 1.1.2 but bring it on back if you can &amp;#8211; I&apos;m waiting on a resolution to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14085&quot; title=&quot;Correct LICENSE and NOTICE files in artifacts&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14085&quot;&gt;&lt;del&gt;HBASE-14085&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14988736" author="apurtell" created="Wed, 4 Nov 2015 02:10:26 +0000"  >&lt;p&gt;No movement. Unscheduling except from master and branch-1.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 18 Mar 2015 21:09:10 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 6 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i26xq7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>