<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:57:48 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14921/HBASE-14921.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14921] Inmemory Compaction Optimizations; Segment Structure</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14921</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Memory optimizations including compressed format representation and offheap allocations&lt;/p&gt;</description>
                <environment></environment>
        <key id="12917940">HBASE-14921</key>
            <summary>Inmemory Compaction Optimizations; Segment Structure</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12917935">HBASE-14918</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="anastas">Anastasia Braginsky</assignee>
                                    <reporter username="eshcar">Eshcar Hillel</reporter>
                        <labels>
                    </labels>
                <created>Thu, 3 Dec 2015 09:18:46 +0000</created>
                <updated>Wed, 26 Oct 2016 23:44:34 +0000</updated>
                            <resolved>Wed, 24 Aug 2016 03:56:36 +0000</resolved>
                                    <version>2.0.0</version>
                                    <fixVersion>2.0.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>19</watches>
                                                                <comments>
                            <comment id="15167345" author="anastas" created="Thu, 25 Feb 2016 15:56:08 +0000"  >&lt;p&gt;Hi Guys,&lt;/p&gt;

&lt;p&gt;So nice the &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14918&quot; title=&quot;In-Memory MemStore Flush and Compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14918&quot;&gt;HBASE-14918&lt;/a&gt; gets so much attention &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Lets move some attention to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
I have moved the discussion here from the umbrella. After all it is all about task #4.&lt;br/&gt;
For newcomers, for the previous discussion of this topic please take a look on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14918&quot; title=&quot;In-Memory MemStore Flush and Compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14918&quot;&gt;HBASE-14918&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One question; what happens when a CellBlockSegment runs into a HFileBlock? How will the marshalling from CBS to HFB run?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;CellBlocksSegment can be transferred to HFile (in snapshot time) exactly as it is done now, using the special KeyValueScanner for the MemStoreSnapshot object. As a side note, because CellBlocksSegment inherits from ImmutableSegment it supports both KeyValueScanner (for the MemStoreObject) and SegmentScanner (a scanner for the given read point).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Just striving to use an array of arrays, instead of list of arrays, in order to enjoy the binary search and less memory overhead.&lt;/p&gt;

&lt;p&gt;A noble goal.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So, an array of CellBlocks? You&apos;d allocate CellBlocks with MSLAB?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good question! So how MemStore is currently working? MSLAB deals with 90% of the memory and it is already flat. MSLAB allocates ByeRanges on top of which Cell data (Key/Value/Tags/etc.) is spread. After that the Cell object is created and the reference to this Cell is inserted into the skip-list to accelerate the search. &lt;/p&gt;

&lt;p&gt;In CellBlocksSegment the allocation from MSLAB is completely the same (!!!), meaning we are not going to change the mayBeCloneWithAllcoator(). Whether MSLAB&apos;s Chunks are going to be on/off-heap depends on MSLAB implementation and it is actually a separate issue. So CellBlocksSegment replaces the skip-list with array.&lt;/p&gt;

&lt;p&gt;We want to get a better search by using the binary search and binary search implies fixed-size elements of an array. Cell&#8217;s internals are written as variable-length elements in MSLAB&apos;s Chunks. In the array/block of CellBlocksSegment we keep the fixed-length references to Cells. This array/block can be allocated from MSLAB and can be not. Can be ByteRange[]/ByteBuffer[]/ByteBuff[]/MultipleByteBuf/BoundedByteBufferPool and the &#8220;plethora&#8221; of types as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; has already mentioned.&lt;/p&gt;

&lt;p&gt;Pay attention that Cell reference is something small. On a 32-bit JVM, it will be 32 bits. on a 64-bit JVM, it can be 32 or 64 bits depending on configuration. The array is very space-efficient, so we can squeeze up to million Cell references into 4MB, so not much memory will be required for CellBlocksSegment.&lt;/p&gt;

&lt;p&gt;What are pros of CellBlocks vs SkipList?&lt;br/&gt;
1. Space efficient: Array uses less space then skip-list &lt;br/&gt;
2. GC friendly: less fragmentation&lt;br/&gt;
3. Locality: Sequential scan (like when downloading snapshot to disk) should be faster&lt;br/&gt;
4. Can be taken off-heap&lt;/p&gt;

&lt;p&gt;However, the memory used for SkipList should be less than 10% from 128MB allowed for a MemStore. So it is unclear whether we are going to see &quot;de facto&#8221; any performance boost from flattening the navigation structure. Therefore, we want to separate this effort from &#8220;general MSLAB off-heaping&#8221; and to see benchmark results. Maybe we will see almost no improvement...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Yeah, lets align what you are doing here with the offheaping of the write path work @anastasia.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Please note that CellBlocksSegment and off-heaping are really separate issues and we plan to refer to the second after we finish with the first. &lt;br/&gt;
The initial plan (also supported by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;) was that MSLAB should be switched from ByteRange to ByteBuffer and support both on and off-heap. &lt;br/&gt;
We need to pre-allocate the Chunks with MemStoreChunkPool and to create a comfortable interface.&lt;br/&gt;
We also need to see how to do it with less pain, because MSLAB is referenced from many places in the code.&lt;/p&gt;

&lt;p&gt;What do you think?&lt;br/&gt;
Thanks to all previous repliers,&lt;br/&gt;
Anastasia&lt;/p&gt;</comment>
                            <comment id="15167411" author="anoop.hbase" created="Thu, 25 Feb 2016 16:46:53 +0000"  >&lt;p&gt;So after the in memory flush, the CellBlockSegment will be an array of Cells &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Or array of BBs, allocated from MSLAB?&lt;br/&gt;
 A cell from memstore (CSLM) when moved to CellBlockSegment, we will need copy the Cell bytes into new MSLAB area and recreate Cell?&lt;br/&gt;
How we will know this array&apos;s size before hand?  When an active memstore segment is flushed in memory, we may be able to remove some of these cells?(version expired and all). I think the initial use case mentioned in the 1st issue was this.  Am I missing some thing?&lt;/p&gt;</comment>
                            <comment id="15167470" author="stack" created="Thu, 25 Feb 2016 17:16:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;...using the special KeyValueScanner for the MemStoreSnapshot object. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What will the serialization/format-transform look like (if any)?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;After that the Cell object is created and the reference to this Cell is inserted into the skip-list to accelerate the search.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes. This is a copy. Would be good if we did not have to do this.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We want to get a better search by using the binary search and binary search implies fixed-size elements of an array.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You&apos;ve seen how we store blocks to hfiles with index blocks and blooms?&lt;/p&gt;

&lt;p&gt;What is &apos;fixed-size&apos; in the above? The arrays of cells? Or the references to cells kept elsewhere.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe we will see almost no improvement...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d imagine you&apos;d have to try really hard to make it so array access is less performant than CSLM (read-only so no synchronization primitives needed either)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Please note that CellBlocksSegment and off-heaping are really separate issues and we plan to refer to the second after we finish with the first. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Understood. Main concern is that the base types used align with those being carried through the read path and looking to see that we minimize (or do without completely) transforms converting between types or from one backing storage to another: e.g. from offheap bytebuffer into which we read the request Cells to MSLAB copied to CSLM then copied to Segment and finally copied to buffers written out to hfile... not to mind writes to WAL in the midst.  Would be good to we save a few copies/transforms (or have none at all !)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;was that MSLAB should be switched from ByteRange to ByteBuffer and support both on and off-heap. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok.&lt;/p&gt;

&lt;p&gt;All the rest sounds good.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;




</comment>
                            <comment id="15171229" author="anastas" created="Sun, 28 Feb 2016 23:03:00 +0000"  >&lt;p&gt;I apologize for not explaining it well. &lt;br/&gt;
In a try to clarify myself I wrote the attached paper. Not so long and with pictures &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Maybe I am missing something, so please show me where my understanding is wrong.&lt;br/&gt;
I am answering here shortly, but please, please, please take also a look on the attached document.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What will the serialization/format-transform look like (if any)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think there is no format-transform between CellBlocksSegment and HFile (if I understand you correctly).&lt;br/&gt;
Flushing Snapshot to disk is done exactly the same as previously. Writing data from scanner to sink (HFile via StoreFile).&lt;br/&gt;
But please look on &#8220;How CellBlocksSegment is transfered to HFile?&quot; in the document.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;After that the Cell object is created and the reference to this Cell is inserted into the skip-list to accelerate the search.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Yes. This is a copy. Would be good if we did not have to do this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Pay attention that CellBlocksSegments are created as result of the compaction process. This is how we compact: we take a mix of &#8220;obsolete&quot; cells and &#8220;updated&#8221; cells and copy to another place the &#8220;updated&#8221; cells only. Then the memory holding the mix can be released. Please look on &#8220;Why copies are needed in compacting process?&#8221; in the document.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You&apos;ve seen how we store blocks to hfiles with index blocks and blooms?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes. Maybe I am missing something, but it looks to me that this variant is not the best. When using single-level index you lose the logarithmic access and when using multiple-level index you get the logarithmic access but pay in memory overhead. This is also explained in the document.&lt;/p&gt;
</comment>
                            <comment id="15171434" author="stack" created="Mon, 29 Feb 2016 05:45:52 +0000"  >&lt;p&gt;Really helpful diagram&lt;/p&gt;

&lt;p&gt;On #2, you have heard the rumor that MSLAB may not be needed when running on G1GC (TBD)&lt;/p&gt;

&lt;p&gt;Should we move the MSLAB forward so when we pull form the socket on the read of requests, we read into an MSLAB (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;?)&lt;/p&gt;

&lt;p&gt;So, when you say the MSLAB can be offheap, its ok to have references only in CSLM?  We do not want to be copying data across the onheap/offheap boundary if it can be avoided. We can do compare offheap (more a question for our mighty &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Just to say that we want this compaction-in-memory feature ON by default. Even in the case where an in-memory compaction is unable to purge any cells because all updates are unique, this feature should &apos;cost&apos; no more than our current setup. Lets aim for this. We do not want you all doing a bunch of work on something that folks have to &apos;enable&apos;. In such a case, only the hbase cognescenti will get the benefit of your work. So, it looks like you are talking of doing at least an extra copy from the original MSLAB to a new Segment MSLAB.  Would be cool if a bit of evidence that this extra copy to a Segment, even in the worst case where no purge was possible, cost less than trying to continue with a &apos;fat&apos; CSLM.&lt;/p&gt;

&lt;p&gt;&quot;The compaction process can repeat until we must flush to disk. &quot; There will be guards in place to prevent our compacting in-memory when it not possible that a compaction can produce a tighter in-memory representation (no purges possible, etc.)?&lt;/p&gt;

&lt;p&gt;First pass. Thanks for the write-up&lt;/p&gt;
</comment>
                            <comment id="15171458" author="anoop.hbase" created="Mon, 29 Feb 2016 06:06:37 +0000"  >&lt;p&gt;Thanks for the details in the doc..   It neatly explains&lt;br/&gt;
So during in memory compaction will convert CSLM of Cells into array of Cells.  When will the compaction getting triggered?  Time based and/or #ImmutableSegments in the pipeline?&lt;br/&gt;
So for making the array of Cells we need to know how many cells will survive into the compacted result. So we will do scan over the ImmutableSegments 2 times? To know the #cells and then for actual moving it into array.&lt;br/&gt;
Ya when most of the Cells in the ImmutableSegments can go away during this compaction, the copy to new MSLAB area is very much needed.&lt;/p&gt;

&lt;p&gt;But can we consider other use cases also?  Normally there might not be that much #versions of cells and very rare cells will get expired within memstore. Then this extra copy will double the need for memory need from Pool. (Ya our aim is to make all these into off heap area and so a pool is a must then)  If we know the #cells compacting out and #cells which will get away, we can decide whether it is worth copy to new area or not.&lt;/p&gt;

&lt;p&gt;Also my consideration before was that when an in memory flush is happening, then itself we should get away with a CSLM. And we may have multiple CellBlocks associated with a memstore.  With a case of most cells version expired, yes the compaction is very much imp.  So am very interested to know when you consider we can compact the CSLM cells into array.&lt;/p&gt;

&lt;p&gt;It is not just 8 bytes extra overhead per cell when we have array of cells instead of plain bytes cellblock (as HFile data block)&lt;br/&gt;
Ref to cell in array (8 bytes)  + Cell Object (16 bytes) + ref to byte with Cell (8) + offset and length ints (8) = 40 bytes per cell.  &lt;/p&gt;</comment>
                            <comment id="15171461" author="anoop.hbase" created="Mon, 29 Feb 2016 06:11:27 +0000"  >&lt;p&gt;Seeing ur reply now Stack.  Ya u also mention abt a use case (I think more normal) where Cells in memstore can not go away that easily and will get flushed to file.  IMO we should avoid the extra copy then..  &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;On #2, you have heard the rumor that MSLAB may not be needed when running on G1GC (TBD)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Where we have this discussion? Abt MSLAB pool we had some jira that our Lars raised.   But in case of off heaping we will need an off heap MSLAB which can pool BBs.  For offheap we must need pool.&lt;br/&gt;
Regarding multiple options with off heaping we will be doing those Stack.&lt;/p&gt;</comment>
                            <comment id="15172035" author="anastas" created="Mon, 29 Feb 2016 15:49:44 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; big thank you for your great comments! Please see below.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;On #2, you have heard the rumor that MSLAB may not be needed when running on G1GC (TBD)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What makes you think that using G1GC is better than MSLAB? In my understanding G1GC indeed decreases the GC pauses, but it does so using parallel programming and more complex algorithms. So you are going to pay in CPU cycles and in memory. The ad hoc memory management is always at least as good as some universal one. So I believe MSLAB still need to be used (and not only because of off-heap option) even if G1GC is used.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So, when you say the MSLAB can be offheap, its ok to have references only in CSLM? We do not want to be copying data across the onheap/offheap boundary if it can be avoided. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When MSLAB goes off-heap there is no copying data across the onheap/offheap! Only at the beginning if data comes on-heap and need to be copied down to MSLAB off-heap Chunks. Then at the end when flushing to disk, (as I see it) the HFile Writer still uses on-heap byte stream. So no option, but to copy back from off-heap to on-heap.&lt;/p&gt;

&lt;p&gt;And about having references only in CSLM, what do you mean? No need in CellBlocks? Or do you want the entire Cell object to be pushed inside ConcurrentSkipListMap? Pay attention that references between off-heap and on-heap are OK (no extra performance cost), just those accesses are going to be performed differently.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So, it looks like you are talking of doing at least an extra copy from the original MSLAB to a new Segment MSLAB. Would be cool if a bit of evidence that this extra copy to a Segment, even in the worst case where no purge was possible, cost less than trying to continue with a &apos;fat&apos; CSLM.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You are totally right, it could be good to have some &#8220;compaction predictor&#8221;, which will indicate how much a compaction is needed. We have some thoughts how it can be done, but it is not a trivial task. In order not to intermix it all together just now, we can add such a predictor later, after we have benchmarking for flat representation and off-heaping. As you can see there is a lot to be done, let us just take the challenges one by one.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;The compaction process can repeat until we must flush to disk. &quot; There will be guards in place to prevent our compacting in-memory when it not possible that a compaction can produce a tighter in-memory representation (no purges possible, etc.)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Currently we do not have such &#8220;guards&#8221; and I understand your concern for unneeded or frequent compaction. For now compaction starts (asynchronously) soon after flush-in-memory and we assume flush-in-memory is infrequent task that &#8220;freezes&#8221; (makes immutable) a big amount of memory. So assumption is that among big amount of memory you have a higher probability to find something to compact.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When will the compaction getting triggered? Time based and/or #ImmutableSegments in the pipeline?&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;So am very interested to know when you consider we can compact the CSLM cells into array.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As I have said, currently the compaction is triggered asynchronously after each in-memory-flush, if there is no another on-going compaction. #ImmutableSegments in the pipeline can also be a trigger. Please pay attention that compaction process happens in background (!!!) meaning that none waits for it. It cost you CPU cycles only, and if you lower the priority of the compacting thread even the CPU cycles should not be an issue. So I wouldn&#8217;t be worried so much about the time spent on copy in the compaction time&#8230; Am I missing something?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So for making the array of Cells we need to know how many cells will survive into the compacted result. So we will do scan over the ImmutableSegments 2 times? To know the #cells and then for actual moving it into array.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No. We are going to allocate the array of Cells for the worst case - all the cells will survive. Pay attention that Cell reference takes very little.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we know the #cells compacting out and #cells which will get away, we can decide whether it is worth copy to new area or not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is also a possibility.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It is not just 8 bytes extra overhead per cell when we have array of cells instead of plain bytes cellblock (as HFile data block)&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;Ref to cell in array (8 bytes) + Cell Object (16 bytes) + ref to byte with Cell (8) + offset and length ints (8) = 40 bytes per cell.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK. Pay attention that when you have plain bytes cellblock (as HFile data block), in CellBlock as in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10713&quot; title=&quot;A MemStore implementation with in memory flushes to CellBlocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10713&quot;&gt;&lt;del&gt;HBASE-10713&lt;/del&gt;&lt;/a&gt; you had a TreeMap overhead on top of plain bytes for the search. So if we are not counting Cell data in the  MSLAB and if we have 40 bytes overhead per cell it is still good. In CLSM you have 4x40 = 160 bytes overhead per Cell (again not counting Cell data in MSLAB which can be 1KB).&lt;/p&gt;</comment>
                            <comment id="15173339" author="ram_krish" created="Tue, 1 Mar 2016 06:58:02 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Should we move the MSLAB forward so when we pull form the socket on the read of requests, we read into an MSLAB&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Do you see some benefit over here?&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;So, when you say the MSLAB can be offheap, its ok to have references only in CSLM? We do not want to be copying data across the onheap/offheap boundary if it can be avoided. We can do compare offheap &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The current scope of offheaping will only do this. (sorry for me replying here). Offheap references will be in CSLM.&lt;br/&gt;
I think with CSLM more the data in CSLM the more the comparisons in sorting the CSLM. (may be am wrong here?). So moving to array and a sorted one will make searching easier makes sense. i think this is going to be done after copying over to a new MSLAB.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;No. We are going to allocate the array of Cells for the worst case - all the cells will survive. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Worth doing I think.&lt;/p&gt;</comment>
                            <comment id="15192967" author="anastas" created="Mon, 14 Mar 2016 09:28:05 +0000"  >&lt;p&gt;Hi Guys,&lt;/p&gt;

&lt;p&gt;Long time no speak. Meanwhile, CellBlocksSegment based on simple Cells Array is ready (as on second picture in the document). This means additional dereferencing and spending some additional memory on object headers. I&apos;m also implementing the totally flat CellBlocks, so it would be possible to allocate it off-heap and it is generally more efficient (third picture in the updated document). In order to do that I need a toBytes representation of a reference to Chunk. As far as I know in pure Java you can&#8217;t get the address of an object. So it can be done only by defining an index per Chunk and having a translation/mapping from some integer index to Chunk and backward (from Chunk to its index).&lt;/p&gt;

&lt;p&gt;Looking closer on HeapMemStoreLAB and MemStoreChunkPool I see that HeapMemStoreLAB.Chunk can be allocated both directly from JVM Heap and also via MemStoreChunkPool, because MemStoreChunkPool is sometimes not configured or can&#8217;t be used. It makes much more sense that all Chunk allocations are centralized and go only through MemStoreChunkPool. It helps in managing the mapping described above and also in off-heaping. Can MemStoreChunkPool exists always? MemStoreChunkPool can pre-allocate Chunks as a Pool or allocate single Chunk on demand as HeapMemStoreLAB currently does.&lt;/p&gt;

&lt;p&gt;Then we have clear roles. HeapMemStoreLAB - deals only with reference counting and when Chunk can be deallocated. It gets/returns chunks from/to MemStoreChunkPool. While MemStoreChunkPool - deals only with chunks allocation, pre-allocation and re-allocation.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, and everybody, what do you think?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Anastasia&lt;/p&gt;</comment>
                            <comment id="15202132" author="anastas" created="Fri, 18 Mar 2016 20:46:25 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, can you please clarify what are the use cases where the chunkPool is null in MSLAB?&lt;/p&gt;</comment>
                            <comment id="15203931" author="anastas" created="Mon, 21 Mar 2016 09:17:52 +0000"  >&lt;p&gt;The patch with CellBlock for off- and on-heap is attached. Please take a look.&lt;br/&gt;
Please pay attention that it requires chunkPool to be existed in MSLAB. Therefore the answer to my previous question is required.&lt;/p&gt;</comment>
                            <comment id="15204041" author="ram_krish" created="Mon, 21 Mar 2016 11:12:49 +0000"  >&lt;p&gt;Went thro the patch. &lt;br/&gt;
The chunk pool is currently configurable but the main idea to design it was to avoid memstore fragmentation.  Currently in our related work with offheap writes we are trying to enable chunk pool always. &lt;br/&gt;
In the patch any specific reason to name CellBlockOffheapSegment with  &apos;offheap&apos;?  There is nothing offheap now in that. But I think you made the representation of the chunks array based so that you can do binary search which is good. &lt;/p&gt;
</comment>
                            <comment id="15204072" author="anastas" created="Mon, 21 Mar 2016 11:51:26 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; thank you for quick response!&lt;br/&gt;
Indeed CellBlockOffHeap were meant to be off-heap once Chunks are off-heap. We&apos;ll change the name.&lt;/p&gt;</comment>
                            <comment id="15204192" author="hadoopqa" created="Mon, 21 Mar 2016 13:42:18 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbaseanti &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not have any anti-patterns. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; @author &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not contain any @author tags. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; test4tests &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch appears to include 1 new or modified test files. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 54s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 58s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 39s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 4m 59s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 19s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 2m 28s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 5s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 15s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 31s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 31s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 56s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 56s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 6m 54s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server: patch generated 80 new + 11 unchanged - 0 fixed = 91 total (was 11) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 33s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; whitespace &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch has 14 line(s) that end in whitespace. Use git apply --whitespace=fix. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 46m 31s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 4m 9s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server generated 3 new + 0 unchanged - 0 fixed = 3 total (was 0) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 55s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 153m 4s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; asflicense &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 19s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not generate ASF License warnings. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt;&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; 233m 15s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Reason &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Tests &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; FindBugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; module:hbase-server &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  There is an apparent infinite recursive loop in org.apache.hadoop.hbase.regionserver.CellBlock$CellBlocksCollection.isEmpty()  At CellBlock.java:recursive loop in org.apache.hadoop.hbase.regionserver.CellBlock$CellBlocksCollection.isEmpty()  At CellBlock.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;line 353&amp;#93;&lt;/span&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  There is an apparent infinite recursive loop in org.apache.hadoop.hbase.regionserver.CellBlock$CellBlocksCollection.size()  At CellBlock.java:recursive loop in org.apache.hadoop.hbase.regionserver.CellBlock$CellBlocksCollection.size()  At CellBlock.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;line 350&amp;#93;&lt;/span&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Unread field:field be static?  At CellBlockOffHeap.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;line 49&amp;#93;&lt;/span&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Timed out junit tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; org.apache.hadoop.hbase.master.procedure.TestMasterFailoverWithProcedures &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; org.apache.hadoop.hbase.snapshot.TestMobFlushSnapshotFromClient &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12794488/HBASE-14921-V01.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12794488/HBASE-14921-V01.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Optional Tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; uname &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Linux asf909.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Build tool &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Personality &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build@2/component/dev-support/hbase-personality.sh &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; git revision &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; master / f48c92d &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Default Java &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1.7.0_79 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Multi-JDK versions &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  /home/jenkins/tools/java/jdk1.8.0:1.8.0 /usr/local/jenkins/java/jdk1.7.0_79:1.7.0_79 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v3.0.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; checkstyle &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/artifact/patchprocess/diff-checkstyle-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/artifact/patchprocess/diff-checkstyle-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; whitespace &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/artifact/patchprocess/whitespace-eol.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/artifact/patchprocess/whitespace-eol.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/artifact/patchprocess/new-findbugs-hbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/artifact/patchprocess/new-findbugs-hbase-server.html&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit test logs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Test Results &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/testReport/&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; modules &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; C: hbase-server U: hbase-server &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1106/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.2.0   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15206200" author="anastas" created="Tue, 22 Mar 2016 11:27:20 +0000"  >&lt;p&gt;New patch uploaded, with another names and some code style fixes.&lt;/p&gt;</comment>
                            <comment id="15206385" author="hadoopqa" created="Tue, 22 Mar 2016 13:49:24 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbaseanti &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not have any anti-patterns. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; @author &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not contain any @author tags. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; test4tests &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch appears to include 1 new or modified test files. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 7s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 37s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 30s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 4m 28s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 15s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 49s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 25s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 32s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 42s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 44s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 44s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 31s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 31s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 4m 31s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server: patch generated 32 new + 11 unchanged - 0 fixed = 43 total (was 11) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 15s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; whitespace &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch has 14 line(s) that end in whitespace. Use git apply --whitespace=fix. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 25m 5s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 2m 10s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 33s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 33s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 92m 47s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-server in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; asflicense &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 16s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not generate ASF License warnings. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt;&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; 140m 17s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12794742/HBASE-14921-V02.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12794742/HBASE-14921-V02.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Optional Tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; uname &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Linux asf907.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Build tool &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Personality &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; git revision &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; master / 797562e &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Default Java &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1.7.0_79 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Multi-JDK versions &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  /home/jenkins/tools/java/jdk1.8.0:1.8.0 /usr/local/jenkins/java/jdk1.7.0_79:1.7.0_79 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v3.0.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; checkstyle &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1134/artifact/patchprocess/diff-checkstyle-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1134/artifact/patchprocess/diff-checkstyle-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; whitespace &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1134/artifact/patchprocess/whitespace-eol.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1134/artifact/patchprocess/whitespace-eol.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Test Results &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1134/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1134/testReport/&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; modules &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; C: hbase-server U: hbase-server &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1134/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1134/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.2.0   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15207087" author="stack" created="Tue, 22 Mar 2016 19:23:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;The ad hoc memory management is always at least as good as some universal one. So&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Makes sense. &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15180?focusedCommentId=15124036&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15124036&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-15180?focusedCommentId=15124036&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15124036&lt;/a&gt; is the comment that has G1GC doing better w/ MSLAB off.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So no option, but to copy back from off-heap to on-heap.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We need to fix this... but this is what &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; are at.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Pay attention that references between off-heap and on-heap are OK (no extra performance cost), just those accesses are going to be performed differently.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We can measure.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;....we can add such a predictor later, after we have benchmarking for flat representation and off-heaping..... let us just take the challenges one by one.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agree&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;. So assumption is that among big amount of memory you have a higher probability to find something to compact.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Random thought: There will be metric or TRACE-level logging so can &apos;see&apos; effect of in-memory compaction?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...It cost you CPU cycles only, and if you lower the priority of the compacting thread even the CPU cycles should not be an issue. So I wouldn&#8217;t be worried so much about the time spent on copy in the compaction time&#8230; Am I missing something?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just that CPU will be our bottleneck if up on SSD/NVRAM and that you can&apos;t set priority on threads (not in java on linux at least). Minor.&lt;/p&gt;







</comment>
                            <comment id="15207094" author="stack" created="Tue, 22 Mar 2016 19:25:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do you see some benefit over here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If MSLAB is on all the time rather than an option, will it simplify write-path? If we can copy off the inbound socket to MSLAB (on/offheap), and then operate on MSLAB-backed Cells only, will that make write pipeline easier to reason about? &lt;/p&gt;</comment>
                            <comment id="15207107" author="stack" created="Tue, 22 Mar 2016 19:32:43 +0000"  >&lt;p&gt;Funny you mention it, but MSCP has been getting interest from another angle over at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15513&quot; title=&quot;hbase.hregion.memstore.chunkpool.maxsize is 0.0 by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15513&quot;&gt;&lt;del&gt;HBASE-15513&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If it would make reasoning about all this the easier, we should enable it always. Some questions outstanding though: need to figure why MSLAB makes G1GC profile worse and need to size the pool in a smart way.&lt;/p&gt;

&lt;p&gt;But sounds good &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15207539" author="stack" created="Tue, 22 Mar 2016 23:38:41 +0000"  >&lt;p&gt;On the patch, up to this, a CellBlock was nothing but a CellScanner at read time and a pride of Cells written by a Cell Codec sitting in a ByteBuffer or a byte [] when write had finished. CellBlocks were a ghost because we were afraid to commit in case it shut down our being able to do particular implementations or optimizations behind the scenes.&lt;/p&gt;

&lt;p&gt;In this patch, you appropriate CellBlock and give it a concret implementation and one that does not respect the above (badly spec&apos;d) CellBlock ghost structure; you implement Map but not CellScanner (See IPCUtil for write-side example of a &quot;CellBlock&apos; and RPCClientImpl#readResponse for how we read the written CellBlocks... CellBlocks up to this have been in RPC tier only.... but are a concept that should be throughout &amp;#8211; as you are trying to help us do). I think you have to call this CellBlock thing that is in the patch something else.&lt;/p&gt;

&lt;p&gt;The class comment on this CellBlock says &quot;...CellBlock stores a constant number of elements and is immutable after creation stage.&quot;.  Looking at this description makes me wonder if we couldn&apos;t do this with a Cell Codec? The &quot;SausageCodec&quot; since it is making CellBlocks of constant size?  Codec Interface does not support this notion of Encoding in pieces... The Interface just wants us to output to an OS.  Would extending Codec help so you could make your Cell sausages? &lt;/p&gt;

&lt;p&gt;But hang on... I&apos;ll be back. This patch looks interesting....&lt;/p&gt;


</comment>
                            <comment id="15207977" author="ebortnik" created="Wed, 23 Mar 2016 06:56:05 +0000"  >&lt;p&gt;Please note there&apos;s more to this subtask. We&apos;re working on CellBlock-based Segment implementation for CompactingStore - will post soon. &lt;/p&gt;

&lt;p&gt;Please take a look at the patch in HBase-14920 (subtask #3) - it&apos;s a big one, let&apos;s start digesting it together &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. BTW, with this patch we managed to reproduce the performance gains demonstrated by the early prototype, doing more benchmarking now, &lt;/p&gt;</comment>
                            <comment id="15208212" author="anastas" created="Wed, 23 Mar 2016 10:48:47 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;Thanks for taking a look. It looks like the name &#8220;CellBlock&quot; made a confusion.&lt;/p&gt;

&lt;p&gt;Please pay attention that we distinguish between the &#8220;Cell Data&#8221; and the &#8220;Cell Reference&#8221; as it was explained in the attached diagrams.&lt;br/&gt;
The &#8220;Cell Data&#8221; is key, value, tags, sequence ID, etc., it is de facto information explaining the given Cell.&lt;br/&gt;
However, the &#8220;Cell Reference&#8221; is any ability to reach this &#8220;Cell Data&#8221;. The &#8220;Cell Reference&#8221; holds no information explaining the given Cell, but a shortcut to where this information can be found. For example, in current MemStore, the skip-list holds &#8220;Cell References&#8221; and MSLAB holds &#8220;Cell Data&#8221;. &lt;/p&gt;

&lt;p&gt;We didn&#8217;t mean to change the way the Cell Data is represented, it is done very well via MSLAB. Alternatively, CellData can be allocated directly from Java heap or using any Cell Codec/Encoding/Decoding etc.&lt;br/&gt;
As it was explained also in the attached documents, all what we meant to do was to change the way the shortcut to the Cell in MemStore is working. If it is applicable anywhere beside MemStore - great!&lt;br/&gt;
The suggested structure uses 4 times less memory than the previous ConcurrentSkipListMap, provides no fragmentation and it is ready for off-heaping.&lt;/p&gt;

&lt;p&gt;Soon, I&#8217;ll upload the continuation of this patch, where you&#8217;ll see how this flat structure is integrated in ImmutableSegment and works well with the existing scanners.&lt;br/&gt;
Surely, we are also preparing the benchmark to measure the potential.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Anastasia&lt;/p&gt;</comment>
                            <comment id="15209811" author="stack" created="Thu, 24 Mar 2016 05:52:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;The suggested structure uses 4 times less memory than the previous ConcurrentSkipListMap, provides no fragmentation and it is ready for off-heaping.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Excellent.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Thanks for taking a look. It looks like the name &#8220;CellBlock&quot; made a confusion.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, needs another name... or maybe better to say, there is no defined &apos;CellBlock&apos; currently &amp;#8211; which is a problem to be addressed &amp;#8211; but if we defined it, it would not be what is here... an implementation of a Map; it would be more basic (A CellScanner only?).&lt;/p&gt;

&lt;p&gt;I went back to the nice doc.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The reference is just a machine word and thus occupies less memory than the Cell Object.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What is the &apos;machine word&apos; and how does it preserve sort?&lt;/p&gt;

&lt;p&gt;I need to read this doc a few times...&lt;/p&gt;

&lt;p&gt;On the patch..&lt;/p&gt;

&lt;p&gt;Its fun. I like what is going on in here.&lt;/p&gt;

&lt;p&gt;CellBlockObjectArray presumes passed in array of Cells already sorted? &lt;/p&gt;

&lt;p&gt;Calls to createCellBlocks are only when making subMaps? Who else would call them?&lt;/p&gt;

&lt;p&gt;Let me give more review tomorrow. This is interesting...&lt;/p&gt;

</comment>
                            <comment id="15212838" author="stack" created="Sat, 26 Mar 2016 06:25:28 +0000"  >&lt;p&gt;Reviewed again after another read of the attached diagram.&lt;/p&gt;

&lt;p&gt;Does the &apos;CellBlock&apos; Map have to be a Concurrent Map? This is a readonly datastructure once made? No need of the &apos;Concurrent&apos;?&lt;/p&gt;

&lt;p&gt;If so, you made CellSet (or Eshcar) made CellSet which implements NaviableSet. Here we are slinging Cells and implement NavigableMap. Call it CellMap rather than CellBock? I was trying to come up with a name that made reference to how it is actually implemented &amp;#8211; e.g. like ConcurrentSkipListMap &amp;#8211; which would seem to say all it CellArrayMap rather than CellBlock but when I see CellBlockObjectArray later..  may be CellBinSearchMap....&lt;/p&gt;

&lt;p&gt;It is odd that comparator is passed on construction and when we call createCellBlocks. Should constructor be protected so folks can&apos;t construct one w/o there being data in it? Should we save the comparator when createCellBlocks rather than pass on construction?  Then we have to make sure the comparators agree? Or do we? Seems like you need it on construction so can propagate instances with the createCellBlocks call. Seems like allowing passing different comparators would make for trouble so don&apos;t allow passing comparator on createCellBlocks?&lt;/p&gt;

&lt;p&gt;Why name the method getCellFromIndex(int i)? Should it be get&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/information.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; because we are getting the ith Cell in Map? (The comment says that this is what it is doing)&lt;/p&gt;

&lt;p&gt;It&apos;d be cool to compare a CSLM to one of these CAMs at different scales to see difference in perf in a test bench.&lt;/p&gt;

&lt;p&gt;For CellBlockObjectArray, it should be called CellArrayMap?&lt;/p&gt;

&lt;p&gt;What does &quot;CellBlockObjectArray is a simple array of Cells allocated using JVM.&quot; mean? All our stuff is on a JVM (smile)&lt;/p&gt;

&lt;p&gt;Below should be final&lt;/p&gt;

&lt;p&gt;  Cell[] block;&lt;/p&gt;


&lt;p&gt;Is the below total Cels?&lt;/p&gt;

&lt;p&gt;  private int numOfCellsInsideChunk;&lt;/p&gt;

&lt;p&gt;It looks like it is Cells per chunk? This is constant for all Chunks in a CellBlockSerialized?&lt;/p&gt;

&lt;p&gt;(BTW CellBlockSerialized could be ChunkCellMap or CellMLABMap&lt;/p&gt;

&lt;p&gt;This seems to be the &apos;key&apos;, or &apos;index key&apos; size, not bytes in a cell?: private static final int BYTES_IN_CELL = 3*(Integer.SIZE / Byte.SIZE); // each Cell requires 3 integers&lt;/p&gt;

&lt;p&gt;I love the way this works. Very nice. Simple. Only bit is how you ensure all Chunks have same amount of Cells?&lt;/p&gt;

&lt;p&gt;Remove this stuff rather than just comment it out:&lt;/p&gt;

&lt;p&gt;     //c = (chunkPool != null) ? chunkPool.getChunk() : new Chunk(chunkSize, 5); //14921&lt;br/&gt;
197	&lt;/p&gt;

&lt;p&gt;The 14921 everywhere should be stripped. Its &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt;? &lt;/p&gt;

&lt;p&gt;Is this a hardcoding?&lt;/p&gt;


&lt;p&gt;201	        c = new Chunk(chunkSize, 5);&lt;/p&gt;

&lt;p&gt;The Chunk Pool needs to be on for this all to work? Is that in this patch?&lt;/p&gt;

&lt;p&gt;For...&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Only used in testing&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;we usually mark with @VisibleForTestiing annotation.&lt;/p&gt;

&lt;p&gt;Patch looks great.&lt;/p&gt;

</comment>
                            <comment id="15212842" author="stack" created="Sat, 26 Mar 2016 06:30:40 +0000"  >&lt;p&gt;I still don&apos;t get this sentence from the diagram attachment:&lt;/p&gt;

&lt;p&gt;&quot;The reference to the Cell object is inserted into the ConcurrentSkipListMap. The reference is just a machine word and thus occupies less memory than the Cell Object.&quot;&lt;/p&gt;

&lt;p&gt;What is the machine word? There is the 3 * int that is used to find chunk, offset and length.. is the &apos;word&apos; the chunk+offset portion? What CSLM are we referring to? The MemStore? Or this &apos;CellBock&apos;? Thanks.&lt;/p&gt;</comment>
                            <comment id="15213470" author="anastas" created="Sun, 27 Mar 2016 13:48:32 +0000"  >&lt;p&gt;Thank you &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; for such thorough review! Hereby please find my answers:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;CellBlockObjectArray presumes passed in array of Cells already sorted?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Calls to createCellBlocks are only when making subMaps? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Does the &apos;CellBlock&apos; Map have to be a Concurrent Map? This is a readonly datastructure once made? No need of the &apos;Concurrent&apos;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As you have mentioned, CellBlock is implementing ConcurrentNavigbleMap because delegatee of the CellSet is of type ConcurrentNavigbleMap and we want just to give CellSet another delegatee instead of ConcurrentSkipListMap.&lt;/p&gt;

&lt;p&gt;Neither me nor Eshcar had implemented the CellSet. It was there, just called CellSkipListSet.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It is odd that comparator is passed on construction and when we call createCellBlocks&#8230;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt; You are right. As we are working only with Cells we actually need only CellComparator.COMPARATOR and there is no need to pass it in constructor.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why name the method getCellFromIndex(int i)? Should it be get( i ) because we are getting the ith Cell in Map?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&#8217;ll change the name as you say.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&apos;d be cool to compare a CSLM to one of these CAMs at different scales to see difference in perf in a test bench.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure, this is what I try to do next&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;For CellBlockObjectArray, it should be called CellArrayMap?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Regarding the names, as &#8220;CellBlock&#8221; is already in some other use, we suggest the following names (almost as you suggested). &lt;/p&gt;

&lt;p&gt;CellBlock  -&amp;gt; CellFlatMap&lt;/p&gt;

&lt;p&gt;CellBlockObjectArray  -&amp;gt; CellArrayMap&lt;/p&gt;

&lt;p&gt;CellBlockSerialized  -&amp;gt; CellChunkMap&lt;/p&gt;

&lt;p&gt;Why &#8220;flat&#8221;? Because this is how we call the process of changing the ConcurrentSkipListMap to CellMap. When we have in-memory-flash and there is no need to compact (unnecessary copies) we &lt;b&gt;flatten&lt;/b&gt; the segment. Meaning we create ImmutableSegment with the same MSLAB, but with different Map, replacing ConcurrentSkipListMap to CellMap. What do you think?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What does &quot;CellBlockObjectArray is a simple array of Cells allocated using JVM.&quot; mean? All our stuff is on a JVM (smile)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Indeed silly comment &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; , will improve it. I just wanted to emphasize that this is a &#8220;java array&#8221;, meaning allocated from Java Heap and this is actually an array of references pointing to Cell objects (as always in Java). All that is not-efficient when compared to CellBlockSerialized/CellFlatChunkMap which can be allocated off-heap and is a byte array using less memory and less de-referencing&#8230; &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Cell[] block;    &amp;lt;&amp;lt;&amp;lt; should be final&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;private int numOfCellsInsideChunk;  &amp;lt;&amp;lt;&amp;lt; Is that total Cells?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;no, as you said, it is Cells per chunk and it should be constant for all Chunks in a CellBlockSerialized, because MSLAB always allocates Chunks with same size&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This seems to be the &apos;key&apos;, or &apos;index key&apos; size, not bytes in a cell?: private static final int BYTES_IN_CELL = 3*(Integer.SIZE / Byte.SIZE); // each Cell requires 3 integers&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is the number of bytes we need to represent a reference to a single Cell. If we want to access Cell number 8 you need to skip 7*BYTES_IN_CELL bytes from the beginning of the byte array. You can see it as an index key of the Cell as well. But I think BYTES_IN_CELL is more intuitive.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I love the way this works. Very nice. Simple. Only bit is how you ensure all Chunks have same amount of Cells?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thank you!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Remove this stuff rather than just comment it out:        //c = (chunkPool != null) ? chunkPool.getChunk() : new Chunk(chunkSize, 5); //14921&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I left this comment in the code on purpose, in order to raise this question. This is related to your comment: &#8220;The Chunk Pool needs to be on for this all to work? Is that in this patch?&#8221;. Indeed the Chunk Pool must be on for this all to work. But we are not sure what are the configurations where ChunkPool is off on purpose and what we can do with such configurations. Do you know?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is this a hardcoding? :         c = new Chunk(chunkSize, 5);&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is typo... forgot it there after debugging&#8230; will remove all that &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;For&#8230;  &quot;Only used in testing&#8221; we usually mark with @VisibleForTestiing annotation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure, will fix that&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What is the machine word? There is the 3 * int that is used to find chunk, offset and length.. is the &apos;word&apos; the chunk+offset portion? What CSLM are we referring to? The MemStore? Or this &apos;CellBock&apos;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The sentence came to explain that the CSLM holds little data inside. The CSLM holds only references to the Cell, which points to the Cell object, which in turn reference to the Cell&#8217;s data on the MSLAB&#8217;s Chunk. The machine word is the size of the reference, which is 32 or 64 bits, depends on the machine. Sorry for being unclear...&lt;/p&gt;


</comment>
                            <comment id="15213756" author="ram_krish" created="Mon, 28 Mar 2016 03:31:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;shallowCellsToBuffer&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This method in the test and the corresponding code explains what really happens. It looks great.&lt;br/&gt;
So the CellBlockSerialized (I think we can have a better name) - will work only if the MSLAB Chunk pool is ON right?  If there is no MSLAB chunk pool still it can work?  I may be missing something.&lt;/p&gt;

&lt;p&gt;Now the entire cellblock is just referred from the index creating using 3 Integers. Great.&lt;br/&gt;
Now in  your shallowCellsToBuffer even the shallowBuffer is created with the same &apos;chunkSize&apos; as we create the deepbuffer also?  Is that really needed?  &lt;br/&gt;
How does things work when the chunkpool gets reset and initialized? Will do one more process later this week. &lt;/p&gt;</comment>
                            <comment id="15214273" author="anastas" created="Mon, 28 Mar 2016 14:54:50 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, you raise the really good questions about ChunkPool!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So the CellBlockSerialized (I think we can have a better name) - will work only if the MSLAB Chunk pool is ON right? If there is no MSLAB chunk pool still it can work? I may be missing something.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Indeed this requires ChunkPool to be ON. Please pay attention that we can design ChunkPool not to pre-allocate Chunks if this is what configuration wants. It can be just a global bookkeeper for all allocated Chunks. We just require ChunkPool not to be NULL.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Now in your shallowCellsToBuffer even the shallowBuffer is created with the same &apos;chunkSize&apos; as we create the deepbuffer also? Is that really needed? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The &#8220;chunkSize&#8221; used in shallowCellsToBuffer holds the size of any Chunk created by ChunkPool. I assume (as it is now in MemStoreChunkPool) that all Chunks created from the same instance of Pool are of same size. This is why one can reuse the Chunks. If Chunks are &quot;tailor-made&quot; with different sizes, they almost cannot be reused.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How does things work when the chunkpool gets reset and initialized? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This would be a problem. What is the case when ChunkPool need to be reset and initialized?&lt;/p&gt;



&lt;p&gt;And BTW regarding the names, do you like the names that I have suggested above?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Regarding the names, as &#8220;CellBlock&#8221; is already in some other use, we suggest the following names (almost as you suggested).&lt;/p&gt;

&lt;p&gt;CellBlock -&amp;gt; CellFlatMap&lt;/p&gt;

&lt;p&gt;CellBlockObjectArray -&amp;gt; CellArrayMap&lt;/p&gt;

&lt;p&gt;CellBlockSerialized -&amp;gt; CellChunkMap&lt;/p&gt;

&lt;p&gt;Why &#8220;flat&#8221;? Because this is how we call the process of changing the ConcurrentSkipListMap to CellMap. When we have in-memory-flash and there is no need to compact (unnecessary copies) we flatten the segment. Meaning we create ImmutableSegment with the same MSLAB, but with different Map, replacing ConcurrentSkipListMap to CellMap. What do you think?&lt;/p&gt;
&lt;/blockquote&gt;</comment>
                            <comment id="15214437" author="stack" created="Mon, 28 Mar 2016 16:40:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;As you have mentioned, CellBlock is implementing ConcurrentNavigbleMap because delegatee of the CellSet is of type ConcurrentNavigbleMap and we want just to give CellSet another delegatee instead of ConcurrentSkipListMap.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Please say more on this. CellSet is a NavigableMap (not a ConcurrentNavigableMap) so I&apos;m missing where we need the &apos;Concurrent&apos; (is it in this patch?)&lt;/p&gt;

&lt;p&gt;Your new names are better. I considered &apos;flat&apos; Map but shied away given its meaning over in spark/scala; I think it will be ok as long as you stick why its a &apos;flat&apos; map in the javadoc on CellFlatMap.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;... it is Cells per chunk and it should be constant for all Chunks in a CellBlockSerialized, because MSLAB always allocates Chunks with same size&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How do you see this working? We do not control the size of inbound Cells. They could have some regularity and they could also be erratic to the extreme (What to do when a 1G cell arrives into a column family that up to this has been taking on metrics?)&lt;/p&gt;

&lt;p&gt;I still do not see how the 3 * int is BYTES_IN_CELL. Not important.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But we are not sure what are the configurations where ChunkPool is off on purpose and what we can do with such configurations. Do you know?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It was introduced and off by default as is usual when new features. But as also happens this is our practice, the facility was &apos;forgotten&apos;. It came up then when our Lars noticed it and wanted to remove it since it was not being used. It came up again recently in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15513&quot; title=&quot;hbase.hregion.memstore.chunkpool.maxsize is 0.0 by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15513&quot;&gt;&lt;del&gt;HBASE-15513&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It would seem to make sense enabling it by default if we come up w/ a proper sizing. Having it on seems to mess w/ G1GC too. Would need to figure that.&lt;/p&gt;

&lt;p&gt;We need to do up a memory management doc. Between your work on Segments, Segment pipelines, MSLAB chunks, chunk pools and bytebufferpools to host requests read from sockets, bucket cache and reference counting bucketcache bucket blocks at read time, it would be good if we had a map so we could trace a Cell on its travels. &lt;/p&gt;


</comment>
                            <comment id="15215997" author="anastas" created="Tue, 29 Mar 2016 13:29:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;Please say more on this. CellSet is a NavigableMap (not a ConcurrentNavigableMap) so I&apos;m missing where we need the &apos;Concurrent&apos; (is it in this patch?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Indeed CellSet is NavigableMap. However, CellSet has field &#8220;delegatee&#8221;, whose type is ConcurrentNavigableMap. We want CellSet to have different types of delegatees, but they need to be ConcurrentNavigableMaps. Hereby, I copy-paste the code: &lt;/p&gt;

&lt;blockquote&gt;

&lt;p&gt;@InterfaceAudience.Private&lt;br/&gt;
public class CellSet implements NavigableSet&amp;lt;Cell&amp;gt;  {&lt;br/&gt;
  // Implemented on top of a &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {@link java.util.concurrent.ConcurrentSkipListMap}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;  // Differ from CSLS in one respect, where CSLS does &quot;Adds the specified element to this set if it&lt;br/&gt;
  // is not already present.&quot;, this implementation &quot;Adds the specified element to this set EVEN&lt;br/&gt;
  // if it is already present overwriting what was there previous&quot;.&lt;br/&gt;
  // Otherwise, has same attributes as ConcurrentSkipListSet&lt;br/&gt;
  private final ConcurrentNavigableMap&amp;lt;Cell, Cell&amp;gt; delegatee;&lt;/p&gt;

&lt;p&gt;  CellSet(final ConcurrentNavigableMap&amp;lt;Cell, Cell&amp;gt; m) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: { this.delegatee = m;}&lt;/span&gt; &lt;/div&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;Your new names are better. I considered &apos;flat&apos; Map but shied away given its meaning over in spark/scala; I think it will be ok as long as you stick why its a &apos;flat&apos; map in the javadoc on CellFlatMap.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&#8217;ll change the names and add explanations&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How do you see this working? We do not control the size of inbound Cells. They could have some regularity and they could also be erratic to the extreme (What to do when a 1G cell arrives into a column family that up to this has been taking on metrics?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Excellent comment! Indeed we have a problem with Cells bigger then Chunks. So we have no choice, but to introduce the special variable-size very-large Chunks to support the very-large Cells. We&#8217;ll improve the code after the basic benchmarking.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I still do not see how the 3 * int is BYTES_IN_CELL. Not important.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think the problem here (and also in some other questions) is the name &#8220;Cell&#8221;. Because CellFlatMap doesn&#8217;t work with &#8220;Cell data&#8221; or with &quot;true Cells&#8221; as you are (correctly) using this word. CellFlatMap works with some &quot;cell representation&#8221;, using those 3 integers you can get all other Cell information, what is the &#8220;true Cell&#8221;. Should I change this to BYTES_FOR_CELL_REPRESENTATION ?&lt;/p&gt;

&lt;blockquote&gt;

&lt;p&gt;It was introduced and off by default as is usual when new features. But as also happens this is our practice, the facility was &apos;forgotten&apos;. It came up then when our Lars noticed it and wanted to remove it since it was not being used. It came up again recently in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15513&quot; title=&quot;hbase.hregion.memstore.chunkpool.maxsize is 0.0 by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15513&quot;&gt;&lt;del&gt;HBASE-15513&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It would seem to make sense enabling it by default if we come up w/ a proper sizing. Having it on seems to mess w/ G1GC too. Would need to figure that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I took a look on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15513&quot; title=&quot;hbase.hregion.memstore.chunkpool.maxsize is 0.0 by default&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15513&quot;&gt;&lt;del&gt;HBASE-15513&lt;/del&gt;&lt;/a&gt;, it is very interesting. It looks like it favors turning ChunkPool on by default.It also looks very reasonable to me. I also took a very brief look on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15180&quot; title=&quot;Reduce garbage created while reading Cells from Codec Decoder&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15180&quot;&gt;&lt;del&gt;HBASE-15180&lt;/del&gt;&lt;/a&gt;. Specifically on the statement:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I noticed about 5-10% improvement on GC times and CPU utilization after disabling MSLAB only if using G1GC. Tuning MSLAB helps a little but I don&apos;t see to much advantage to have it enabled when G1GC is there.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;However, I do not see enough evidence in those measurement. How many workloads were tested? What where the sizes of Cells? Need to read this Jira more carefully.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We need to do up a memory management doc. Between your work on Segments, Segment pipelines, MSLAB chunks, chunk pools and bytebufferpools to host requests read from sockets, bucket cache and reference counting bucketcache bucket blocks at read time, it would be good if we had a map so we could trace a Cell on its travels.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt; I&#8217;ll do the document little later on.&lt;/p&gt;</comment>
                            <comment id="15216085" author="stack" created="Tue, 29 Mar 2016 14:26:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;We want CellSet to have different types of delegatees, but they need to be ConcurrentNavigableMaps. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Are there methods from ConcurrentNM that we use from delegatee? Or are we just doing NM methods? Wondering if we could change it so delegatee was just a NM.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So we have no choice, but to introduce the special variable-size very-large Chunks to support the very-large Cells. We&#8217;ll improve the code after the basic benchmarking.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Tell us more. Would a large Cell break our nice 3 int addressing scheme or this very large cell chunk will turn a few somersaults to make the stuff fit?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Should I change this to BYTES_FOR_CELL_REPRESENTATION ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Smile. Leave it as is I&apos;d say for now.&lt;/p&gt;

&lt;p&gt;We need to figure the G1GC + SlabPool issue.&lt;/p&gt;

&lt;p&gt;On memory management, I filed &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15555&quot; title=&quot;Memory Management&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15555&quot;&gt;HBASE-15555&lt;/a&gt;&lt;/p&gt;


</comment>
                            <comment id="15216118" author="anastas" created="Tue, 29 Mar 2016 14:48:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;Are there methods from ConcurrentNM that we use from delegatee? Or are we just doing NM methods? Wondering if we could change it so delegatee was just a NM.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think that the main reason why delegatee is ConcurrentNM is that CSLM is ConcurrentNM. CSLM is indeed concurrent.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Would a large Cell break our nice 3 int addressing scheme or this very large cell chunk will turn a few somersaults to make the stuff fit?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The last option. The addressing scheme remains 3 int, but very-large are special big chunks allocated for special size.&lt;/p&gt;</comment>
                            <comment id="15216318" author="stack" created="Tue, 29 Mar 2016 16:48:12 +0000"  >&lt;p&gt;I tried changing CNM to NM and it fails because we use tailMap and heapMap from CNM. Answered my own question.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;....but very-large are special big chunks allocated for special size.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Looking forward to this.&lt;/p&gt;</comment>
                            <comment id="15217795" author="ram_krish" created="Wed, 30 Mar 2016 10:54:35 +0000"  >&lt;p&gt;Sorry. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;This would be a problem. What is the case when ChunkPool need to be reset and initialized?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I mean the reset and init of Chunk not the pool itself. Anyway you can ignore this. I did not have the code with me that day. &lt;br/&gt;
But one qusetion why is that the init() method position changed now? When a chunk was got from the pool the init was previously happening after the CAS operation but now it is now moved into the allocateChunk itself?  Will it have ramifications?&lt;/p&gt;</comment>
                            <comment id="15221270" author="anoop.hbase" created="Fri, 1 Apr 2016 06:48:56 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt;&lt;br/&gt;
I read the new classes in this patch.  So in which patch this is being used ?  Or it will come later?&lt;br/&gt;
I see there are 2 sets of MSLAB chunks in place now&lt;br/&gt;
In one the actual cell bytes are present (Key + Value)&lt;br/&gt;
In second set of chunks (CellBlockSerialized.java) we have 3 ints per Cell serialized.   &lt;/p&gt;

&lt;p&gt;One suggestion- We dont need the last int of Cell length.  We have the offset to Cell..  And there we are serializing as how The KV structure looks like.  So we can read the key len and value len and sum it to get the cell total length. &lt;br/&gt;
See constructor - KeyValue(final byte [] bytes, final int offset) &lt;/p&gt;

&lt;p&gt;So what other structure we have?  CellBlockObjectArray where used?   &lt;br/&gt;
In CellBlockSerialized#getCellFromIndex(int i)    how we get the index to be passed?&lt;/p&gt;</comment>
                            <comment id="15221276" author="anoop.hbase" created="Fri, 1 Apr 2016 06:52:45 +0000"  >&lt;p&gt;I see..  &lt;br/&gt;
CellBlockSerialized  extends CellBlock..  So 2 impls of the CellBlock.  Hmm good..  &lt;br/&gt;
If we use the Cell[] way, per Cell we have more overhead.  I was having concern abt this.  That is why in 10713, I went with plain byte[] way of serialization and for speed up of seek used a TreeMap..  Ya if more entries in TreeMap the speed of seek is more but more overhead. If less entries we have lesser overhead..&lt;br/&gt;
CellBlock makes it possible for whatever way of serialization we need.  This is good. I like it.&lt;/p&gt;</comment>
                            <comment id="15221281" author="anoop.hbase" created="Fri, 1 Apr 2016 06:58:25 +0000"  >&lt;p&gt;When we have say offheap MSLAB also, an entry added to CSLM (Cell object) will have ~100 bytes overhead per cell.&lt;br/&gt;
The Cell[] way of CellBlock (CellBlockObjectArray) will have per Cell overhead of 48 bytes&lt;br/&gt;
CellBlockSerialized  way will have 12 bytes  (or 8 bytes also)&lt;br/&gt;
Good going.&lt;br/&gt;
BTW &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15179&quot; title=&quot;Cell/DBB end-to-end on the write-path&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15179&quot;&gt;HBASE-15179&lt;/a&gt;, under this we are doing some PoC and test with off heap Memstore.   But we have only CSLM added memstore now.. The overhead per Cell is much more here.  That is one issue we are seeing in our tests as well.   So we very much need ur work in for better results with offheap MSLAB &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Great work guys.&lt;/p&gt;</comment>
                            <comment id="15221293" author="anoop.hbase" created="Fri, 1 Apr 2016 07:13:50 +0000"  >&lt;p&gt;So we are having 2 sets of MSLAB chunks.   The 3 ints per cell also written to chunks we get from same MSLAB.  We need this really?  So if we change to 8 bytes per cell, and when chunk size is 2 MB, we can have 262144 cells.  We will have this many really? If not, we may waste that chunk?  Pros and cons. let me think more on that.&lt;/p&gt;</comment>
                            <comment id="15221489" author="anoop.hbase" created="Fri, 1 Apr 2016 10:04:35 +0000"  >&lt;p&gt;On CellBlock we have&lt;br/&gt;
CellBlock createCellBlocks(Comparator&amp;lt;? super Cell&amp;gt; comparator, int min,&lt;br/&gt;
	      int max, boolean descending);&lt;br/&gt;
This is for making a sub set of original block.  Can we have a better name pls?&lt;/p&gt;

&lt;p&gt;getCellFromIndex(int i) -&amp;gt; getCell (int index) Is this enough?&lt;/p&gt;

&lt;p&gt;getValidIndex -&amp;gt; Name looks diff to understand what it does.  Pls add some comments.. Other places wherever necessary&lt;/p&gt;

&lt;p&gt;HeapMemStoreLAB memStoreLAB -&amp;gt; WHy need the impl type here?  We have MSLAB interface now. &lt;br/&gt;
HeapMemStoreLAB.Chunk[] chunks  -&amp;gt; Do we need to keep Chunk refs?  byte[] refs is enough?&lt;br/&gt;
Or is this for return back to MSLAB pool after the DISK flush?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(chunkPool != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
199	        c = chunkPool.getChunk();
200	      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
201	        c = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Chunk(chunkSize, 5);
202	        c.init();
203	      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Why this move of init to here immediately after the new Chunk is made? When multiple threads are at this point, there is a chance that more than one will do this init call make make byte[]. If it is after compareAndSet, it is sure abt the concurrency solution.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Chunk translateIdToChunk(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; id) {
225	    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; chunkPool.translateIdToChunk(id);
226	  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What if chunk pool is null?&lt;/p&gt;

&lt;p&gt;allocateChunk - Why is it needed when we have getOrMakeChunk? Who will guarantee thread safety here?&lt;/p&gt;

&lt;p&gt;//org.junit.Assert.assertTrue(&quot;\n\n inside chunk initialization 3&quot;, false);&lt;br/&gt;
pls remove commented code.. Some other cases also.&lt;/p&gt;

&lt;p&gt;-reclaimedChunks.add(chunk);	&lt;br/&gt;
I can not see where we will be adding it as per the patch?  The initial created chunks were added here.  &lt;/p&gt;</comment>
                            <comment id="15221626" author="anastas" created="Fri, 1 Apr 2016 12:25:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;But one qusetion why is that the init() method position changed now? When a chunk was got from the pool the init was previously happening after the CAS operation but now it is now moved into the allocateChunk itself? Will it have ramifications?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We wanted to concentrate all chunk creations (allocation and initialization) in the ChunkPool, in order to let the ChunkPool manage the mapping to the ID. Previously the Chunk was initiated only just before it is going to be directly used. I see your point &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, as it is currently implemented Chunks are going to be initialized (memory allocated) also when just pre-created for the pool. This is not efficient. I&#8217;ll fix that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I read the new classes in this patch. So in which patch this is being used ? Or it will come later?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thank you &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; for taking a look. The CellFlatMap (CellBlock name changed with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; help) is going to be part of ImmutableSegment, so after in-memory-flush, the CSLM should be changed to CellFlatMap. I am currently writing this code and hope to present it soon. Some intuition for the usage can be found in the TestCellBlockSet.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We don&apos;t need the last int of Cell length. We have the offset to Cell. See constructor - KeyValue(final byte [] bytes, final int offset)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a very good comment! I didn&#8217;t think in that direction, but we can enjoy this &#8220;super-compact-representation&#8221; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we use the Cell[] way, per Cell we have more overhead.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Of course, Cell[] is expensive. It was implemented because it is very simple, easy to debug and to compare with plain byte array serialization. But the Cell[] can be useful for very large cells, those bigger then MSLAB Chunks (e.g. &amp;gt; 2MB). If we know we are going to deal with such very large cells and do not want to allocate un-reusable special-size MSLAB Chunks, CellArrayMap is good solution (also new name for CellBlockObjectArray).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;BTW &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15179&quot; title=&quot;Cell/DBB end-to-end on the write-path&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15179&quot;&gt;HBASE-15179&lt;/a&gt;, under this we are doing some PoC and test with off heap Memstore.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Please pay attention that as part of this jira we change MSLAB and MemStoreChunkPool files. Need to align with your code taking MSLAB off-heap.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The 3 ints per cell also written to chunks we get from same MSLAB. We need this really? So if we change to 8 bytes per cell, and when chunk size is 2 MB, we can have 262144 cells. We will have this many really? If not, we may waste that chunk?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Excellent discussion, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;! Those were my thoughts as well&#8230; Initially, I wrote CellBlockSerialized (now called CellChunkMap) as getting byte[] of any size and dealing with it. However, later I thought that this might be needed to be taken off-heap and maybe it is better to centralize all this off-heaping to the Chunks. So if Chunk is off-heap then all what is implemented on top of it is off-heap as well&#8230;&lt;/p&gt;

&lt;p&gt;Now, if we may have just 2 int for Cell representation (2^3 bytes), we may fit 2^21/2^3=2^18 cells in a Chunk of size 2MB.&lt;br/&gt;
A cell may use 256=2^8 bytes for all its data, which is not too much. Do we often serve Cells with size smaller than that?&lt;br/&gt;
If so, then one Chunk can represent 2^18*2^8=2^26 bytes = 64MB, which is already half of what we can hold in one MemStore without flushing to disk. &lt;br/&gt;
From here, in 99% we will not use Chunk[] and single Chunk is enough.&lt;/p&gt;

&lt;p&gt;But what if not? What if we have really small cells, like integer for a key and integer for a data? Is it a possible use-case? For such small cells the representation of metadata is actually super-important, as you do not want metadata to be bigger than data&#8230;&lt;/p&gt;


&lt;p&gt;I will continue answering more questions already posted here...&lt;/p&gt;</comment>
                            <comment id="15221995" author="stack" created="Fri, 1 Apr 2016 17:10:11 +0000"  >&lt;p&gt;Nice review &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; On not needing third int, I like the idea of saving on duplication, but will we always serialize as we do now? In fact, the way we serialize now &amp;#8211; key length then value length &amp;#8211; is a bit wonky. Should probably just be a long with full Cell length as first thing in the serialized stream rather than shorts of key and value as we do in KV now.&lt;/p&gt;

&lt;p&gt;I love the idea of saving a whole tier of chunks.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If so, then one Chunk can represent 2^18*2^8=2^26 bytes = 64MB, &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Smaller than 256 bytes? Yes. How&apos;d you get 256 bytes? I didn&apos;t follow. Sorry.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is it a possible use-case?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is for analytics-type uses.&lt;/p&gt;

</comment>
                            <comment id="15222013" author="ram_krish" created="Fri, 1 Apr 2016 17:19:08 +0000"  >&lt;p&gt;As per the internal discussion that we were having we were not sure if the 3 ints that we need for indexing also needs to be fetch from MSLAB and that will also be offheap. Any way we can experiment to see the pros and cons. &lt;/p&gt;</comment>
                            <comment id="15222100" author="anoop.hbase" created="Fri, 1 Apr 2016 18:19:39 +0000"  >&lt;p&gt;Ya on using the chunk from MSLAB for storing the meta data (2 ints)  am also not totally against it.  Ya it has its own adv. On demand on heap byte[] if we used, ya if smaller cells, we will have more such and so more meta data.  Also considering the fact that this compacted in memory CellBlock may last some time, it is not really short lived object and in most chance get promoted to old space also.  So on demand creation may cause more GC issues (Considering CMS here).. So MSLAB chunk make all sense.. Only worry was large cells.  Ya let us test more here.&lt;/p&gt;</comment>
                            <comment id="15223005" author="anastas" created="Sat, 2 Apr 2016 18:47:54 +0000"  >&lt;blockquote&gt;
&lt;p&gt;CellBlock createCellBlocks(Comparator&amp;lt;? super Cell&amp;gt; comparator, int min, int max, boolean descending);&lt;br/&gt;
This is for making a sub set of original block. Can we have a better name pls?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes, I&#8217;ll change to createSubCellMap()&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;getCellFromIndex(int i) -&amp;gt; getCell (int index) Is this enough?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;yes, changed already&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;getValidIndex -&amp;gt; Name looks diff to understand what it does. Pls add some comments.. Other places wherever necessary&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;added comments&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;HeapMemStoreLAB memStoreLAB -&amp;gt; WHy need the impl type here? We have MSLAB interface now.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, Chunk is internal class of HeapMemStoreLAB, therefore interface MemStoreLAB can not help. The best solution is to move the Chunk outside of the HeapMemStoreLAB, but I didn&#8217;t want to do this refactoring as part of this JIRA.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;HeapMemStoreLAB.Chunk[] chunks -&amp;gt; Do we need to keep Chunk refs? byte[] refs is enough? Or is this for return back to MSLAB pool after the DISK flush?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This point was already discussed, but generally for off-heaping and re-usage.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why this move of init to here immediately after the new Chunk is made? When multiple threads are at this point, there is a chance that more than one will do this init call make make byte[]. If it is after compareAndSet, it is sure abt the concurrency solution.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;First, this is for the case when ChunkPool is null and actually the entire code (as it is written now) doesn&#8217;t work if  ChunkPool is null. The issue of ensuring that ChunkPool is never null was already discussed here.&lt;br/&gt;
Second, if multiple threads run this code each thread is going to allocate and initiate its own chunk.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;allocateChunk - Why is it needed when we have getOrMakeChunk? Who will guarantee thread safety here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;allocateChunk() is a method of MemStoreChunkPool class and getOrMakeChunk() is a method of HeapMemStoreLAB class, so they do not intersect in their responsibilities. allocateChunk() is safe for multi-threading because it uses AtomicInteger, new-based allocation, ConcurrentHashMap, and finally each thread is going to initialize its own chunk (it is not shared memory yet).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;//org.junit.Assert.assertTrue(&quot;\n\n inside chunk initialization 3&quot;, false);&lt;br/&gt;
pls remove commented code.. Some other cases also.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;surely will remove&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-reclaimedChunks.add(chunk);	&lt;br/&gt;
I can not see where we will be adding it as per the patch? The initial created chunks were added here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It was my bug, which is already found and already fixed. The call for reclaimedChunks.add(chunk) on pre-allocation is indeed missing here.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Smaller than 256 bytes? Yes. How&apos;d you get 256 bytes? I didn&apos;t follow. Sorry.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just guessed that number for easier calculation.&lt;/p&gt;</comment>
                            <comment id="15230595" author="anoop.hbase" created="Thu, 7 Apr 2016 17:14:55 +0000"  >&lt;p&gt;Any chance for a new patch with comments fix? Need any help ?&lt;/p&gt;</comment>
                            <comment id="15230935" author="anastas" created="Thu, 7 Apr 2016 19:55:02 +0000"  >&lt;p&gt;Almost there &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Next week we&apos;re going to publish the patch with the comments fixed, and flat representation of the ImmutableSegment. All the new code is connected to CompactingMemStore. &lt;/p&gt;

&lt;p&gt;Thank you so much for suggesting your help!!&lt;/p&gt;</comment>
                            <comment id="15241093" author="anastas" created="Thu, 14 Apr 2016 12:58:42 +0000"  >&lt;p&gt;And here we go!!!&lt;/p&gt;

&lt;p&gt;Please take a look on the attached patch of CellFlatMaps connected to recent version of CompactingMemStore. The CellSet can now be implemented also as CellArrayMap or CellChunkMap, thus influencing the ImmutableSegment holding that CellSet.&lt;br/&gt;
For more explanations please also take a look on the attached &quot;Introduction to New Flat and Compact MemStore&quot; document. There are still some completions and improvements to be done, but please take a look to get the idea. Enjoy!&lt;/p&gt;</comment>
                            <comment id="15243220" author="yuzhihong@gmail.com" created="Fri, 15 Apr 2016 16:57:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;We flatten the index, thereby reducing the metadata memory overhead. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can you explain in bit more detail on the savings ?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Arrange flattening also to CellChunkMap, currently impossible to get the chunk ID out of already created cell metadata&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What&apos;s plan for flattening to CellChunkMap w.r.t. getting the chunk Id ?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="15243659" author="stack" created="Fri, 15 Apr 2016 21:09:21 +0000"  >&lt;p&gt;Diagrams are beautiful in the pdf....&lt;/p&gt;

&lt;p&gt;High-level questions:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Is MemstoreCompactingIterator what used to be a &apos;snapshot&apos;?  You interject this Iteration step rather than move current MemStore to be a &apos;snapshot&apos;?&lt;/li&gt;
	&lt;li&gt;On your list of todos, #1 and #2 seem fine (I think &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; are doing #2 for you).&lt;/li&gt;
	&lt;li&gt;I&apos;m interested in how #3 will be done (smile).&lt;/li&gt;
	&lt;li&gt;What is this &quot;...currently impossible to get the chunk ID out of already created cell metadata&quot;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;All looks great. Let me see patch....&lt;/p&gt;</comment>
                            <comment id="15243995" author="stack" created="Sat, 16 Apr 2016 03:49:39 +0000"  >&lt;p&gt;On patch....&lt;/p&gt;

&lt;p&gt;This is still in here:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;CellArrayMap is a simple array of Cells and can be allocated only using JVM.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;How can something called CellArrayMap be an array of Cells? Whats &apos;Map&apos; doing in there? It implements Map, so be nicer to Maps in your description ? (smile)&lt;/p&gt;

&lt;p&gt; And &apos;only using JVM&apos;... what else? You mean &apos;on heap&apos;?&lt;/p&gt;

&lt;p&gt;We pass comparator on construction and in createSubCellFlatMap? We need it in both places? The cell array is ordered? Why we need a comparator if it already ordered?&lt;/p&gt;

&lt;p&gt;When getCell, we should check the boundaries... the min and max.&lt;/p&gt;

&lt;p&gt;It is odd that CellFlatMap implements ConcurrentNavigableMap but...&lt;/p&gt;

&lt;p&gt;37	 * The CellFlatMap uses no synchronization primitives, it is assumed to be created by a&lt;br/&gt;
38	 * single thread and then it can be read-only by multiple threads.&lt;/p&gt;

&lt;p&gt;The parent ImmutableSegment has to know its subclasses? The enums?&lt;/p&gt;

&lt;p&gt;Can this be a CellScanner?&lt;/p&gt;

&lt;p&gt;	public class MemStoreCompactorIterator implements Iterator&amp;lt;Cell&amp;gt; {&lt;/p&gt;

&lt;p&gt;Will be back with closer review... but looks good.&lt;/p&gt;



</comment>
                            <comment id="15244119" author="anastas" created="Sat, 16 Apr 2016 09:46:45 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=yuzhihong%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;yuzhihong@gmail.com&quot;&gt;Ted Yu&lt;/a&gt;, thanks for taking the look!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can you explain in bit more detail on the savings ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Flattenning just means replacing the CellSet from one based on ConcurrentSkipListMap to one based on CellArrayMap. CellArayMap is a new name for CellBlockObjectArray and it uses less overhead (metadata) per cell than ConcurrentSkipListMap. I am quoting &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; below:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;an entry added to CSLM (Cell object) will have ~100 bytes overhead per cell.&lt;br/&gt;
The Cell[] way of CellBlock (CellBlockObjectArray) will have per Cell overhead of 48 bytes&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What&apos;s plan for flattening to CellChunkMap w.r.t. getting the chunk Id ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The following answer also answers the questions raised by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What is this &quot;...currently impossible to get the chunk ID out of already created cell metadata&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
In CellChunkMap we save a kind of reference to Cell using three integers (possible to deal with 2, but 3 for now). Assuming that all the data of Cell A is saved on Chunk C, in CellChunkMap we save the following per cell:&lt;br/&gt;
1.	Reference to C (some possibility to access the byte array of Chunk C)&lt;br/&gt;
2.	Offset from the beginning of Chunk C&lt;br/&gt;
3.	Length of the Cell A on C&lt;br/&gt;
The problem is in 1. In Java we can not have a pointer/reference/address of and object. To resolve that, we added an ID for each Chunk, which is created in the MemStoreChunkPool. In addition we added a mapping from Chunk IDs to Chunks references. So in 1 we save the Chunk ID and translate it to Chunk reference when we need to access the Cell data. This is OK when we create CellChunkMap from the scratch. &lt;/p&gt;

&lt;p&gt;But in case of flattening, we have an exisiting segment with MSLAB and ConcurrentSkipListMap and we do not want to copy the data in MSLAB. So as it is now, we can not just translate the ConcurrentSkipListMap to CellChunkMap, because we do not know the Chunk IDs of the Cells. But we can translate ConcurrentSkipListMap to CellArrayMap, which already reduces some metadata overhead.&lt;/p&gt;

&lt;p&gt;In order to allow translation to CellChunkMap we need the Cells to know where they are storred and their Chunk IDs. It is quite a big change and it is planned to be done after performance evaluation phase.&lt;/p&gt;</comment>
                            <comment id="15244228" author="anastas" created="Sat, 16 Apr 2016 13:37:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, I assume you are busy with HBaseConf and other stuff, so I appreciate your effort to look on this patch! Thanks!
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Is MemstoreCompactingIterator what used to be a &apos;snapshot&apos;? You interject this Iteration step rather than move current MemStore to be a &apos;snapshot&apos;? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt; MemstoreCompactingIterator and &apos;snapshot&apos; are not related. After all, the diagrams are not good enough and rather confusing, need to improve them (smile) &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
MemstoreCompactingIterator is an iterator (based on StoreScanner) over the compaction pipeline segments, only in the context of compaction. It is used to initiate all the relevant scanners, then to supply the next cell, which &#8216;&#8216;survives&#8216;&#8216; the compaction (meaning the cell is not eliminated). Finally, on iterator.close() all scans are closed so the iteration may be restarted. &lt;br/&gt;
With the new code we introduce many variants of compaction, so we may iterate over the compaction pipeline and compact in three different ways. So it makes sense to save all this code in different class.
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I think Anoop Sam John and ramkrishna.s.vasudevan are doing #2 for you.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Oh! This is great! What is the JIRA number?
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I&apos;m interested in how #3 will be done&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The plan is to support special very-large variable size Chunks, which are not going to be reused. In this case we plan to have Chunk per Cell.&lt;/p&gt;</comment>
                            <comment id="15244377" author="anastas" created="Sat, 16 Apr 2016 20:30:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;How can something called CellArrayMap be an array of Cells? Whats &apos;Map&apos; doing in there? It implements Map, so be nicer to Maps in your description?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought CellArrayMap was something you have previously suggested&#8230; Hereby I quote yourself:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If so, you made CellSet (or Eshcar) made CellSet which implements NaviableSet. Here we are slinging Cells and implement NavigableMap. Call it CellMap rather than CellBock? I was trying to come up with a name that made reference to how it is actually implemented &#8211; e.g. like ConcurrentSkipListMap &#8211; which would seem to say all it CellArrayMap rather than CellBlock but when I see CellBlockObjectArray later.. may be CellBinSearchMap&#8230;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&#8220;CellAray&#8221; is how it is implemented and &#8220;Map&#8221; is what it is implemented&#8230; Sounds quite reasonable for me&#8230; What name would you suggest?
&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;And &apos;only using JVM&apos;... what else? You mean &apos;on heap&#8217;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Correct, meant &#8220;on heap&#8221;, fixed that&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We pass comparator on construction and in createSubCellFlatMap? We need it in both places? The cell array is ordered? Why we need a comparator if it already ordered?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The comparator is needed both in constructor and in createSubCellFlatMap, because createSubCellFlatMap calls the constructor of the relevant derived class. We need comparator, for binary search, although the array is ordered. We have a cell X as input for binary search and then we need to compare X to some cells in the array.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When getCell, we should check the boundaries... the min and max.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK, fixed that&lt;/p&gt;
</comment>
                            <comment id="15244900" author="anastas" created="Sun, 17 Apr 2016 20:45:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;The parent ImmutableSegment has to know its subclasses? The enums?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Once there are subclasses of ImmutableSegment, there will be no need in the type enum&lt;/p&gt;</comment>
                            <comment id="15245522" author="anoop.hbase" created="Mon, 18 Apr 2016 11:54:03 +0000"  >&lt;p&gt;It will be bad, if we have to continue with Cell ref in case of flat map (No extra copy to new chunks as not much of the cells getting expired/removed).  Cells having ref to chunk data (byte[] now).  Can we make the meta data here as ref + offset  ( 8 = 4 = 12 bytes per Cell)..Ya it is 4 bytes more but its ok and better than 40 bytes per cell overhead.   We need to mark the Cells created out of copy to MSLAB in a special way so as to retrieve the byte[] ref.&lt;br/&gt;
Also one more thing is in case of Cells in CSLM, the seqId is a state (long) on Cell object.  That will be an issue in above approach.  So when the Cell is recreated after copying to MSLAB (mayCloneWithAllocator),  we can keep append the seqId 8 bytes after Cell key, value , &lt;span class=&quot;error&quot;&gt;&amp;#91;tags&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Am I making the explanation here?  Any help needed, I can do. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15247653" author="anastas" created="Tue, 19 Apr 2016 12:30:40 +0000"  >&lt;blockquote&gt;
&lt;p&gt;It will be bad, if we have to continue with Cell ref in case of flat map (No extra copy to new chunks as not much of the cells getting expired/removed). Cells having ref to chunk data (byte[] now). Can we make the meta data here as ref + offset ( 8 = 4 = 12 bytes per Cell)..Ya it is 4 bytes more but its ok and better than 40 bytes per cell overhead. We need to mark the Cells created out of copy to MSLAB in a special way so as to retrieve the byte[] ref.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agree with you that it is better to flatten into the CellChunkMap instead of CellArrayMap. But as you have said, in order to do that &#8220;We need to mark the Cells created out of copy to MSLAB in a special way so as to retrieve the byte[] ref.&#8221;. This is planned to be done in the future &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;in case of Cells in CSLM, the seqId is a state (long) on Cell object. That will be an issue in above approach. So when the Cell is recreated after copying to MSLAB (mayCloneWithAllocator), we can keep append the seqId 8 bytes after Cell key, value, tags.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am probably not familiar enough, so  I don&#8217;t quite understand the problem. If the Cell is copied to another Chunk in MSLAB, then everything is copied: Cell key, value, tags, seqId, isn&#8217;t it? Or do we care to &#8220;waste&#8221; those 8 bytes of seqId? Or would it give us wrong length? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, can you please try to explain the problem once again? Thanking you in advance!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Am I making the explanation here? Any help needed, I can do. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thank you so much again for suggesting your help! If you have extra time, you can deal with &#8220;We need to mark the Cells created out of copy to MSLAB in a special way so as to retrieve the byte[] ref.&#8221; But probably the merging it all together would be a nightmare&#8230; So at least it makes sense to wait to more stable version of this version of the code&#8230; What do you think?&lt;/p&gt;</comment>
                            <comment id="15248855" author="stack" created="Tue, 19 Apr 2016 22:59:25 +0000"  >&lt;p&gt;Man, it&apos;d be cool if could use a long for Cell reference!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But we can translate ConcurrentSkipListMap to CellArrayMap, which already reduces some metadata overhead.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;But if MSLAB has offheap chunks, then this will bring our data onheap?&lt;/p&gt;

&lt;p&gt;How you thinking of making CellChunkMaps out of MSLAB+CSLM? (No hurry, just interested).&lt;/p&gt;

&lt;p&gt;Thanks for the explanation above.&lt;/p&gt;

</comment>
                            <comment id="15248861" author="stack" created="Tue, 19 Apr 2016 23:03:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;MemstoreCompactingIterator is an iterator (based on StoreScanner) over the compaction pipeline segments...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok. Missed that. If it is a Scanner, why not call it a Scanner? CompactingScanner? InMemoryCompactingScanner ...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The plan is to support special very-large variable size Chunks, which are not going to be reused. In this case we plan to have Chunk per Cell.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok. Sounds good. Would they be allocated per use? Perhaps onheap rather than offheap because then we keep offheap regular and offheap allocations are slow anyways.&lt;/p&gt;
</comment>
                            <comment id="15248864" author="stack" created="Tue, 19 Apr 2016 23:04:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;&#8220;CellAray&#8221; is how it is implemented and &#8220;Map&#8221; is what it is implemented&#8230; Sounds quite reasonable for me&#8230; What name would you suggest? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You are right. Ignore my comment.&lt;/p&gt;
</comment>
                            <comment id="15249241" author="anoop.hbase" created="Wed, 20 Apr 2016 04:49:12 +0000"  >&lt;p&gt;For the seqId I mean this&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Cell maybeCloneWithAllocator(Cell cell) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (getMemStoreLAB() == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; cell;
    }

    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; len = KeyValueUtil.length(cell);
    ByteRange alloc = getMemStoreLAB().allocateBytes(len);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (alloc == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-comment&quot;&gt;// The allocation was too large, allocator decided
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// not to &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; anything with it.
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; cell;
    }
    &lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt; alloc.getBytes() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
    KeyValueUtil.appendToByteArray(cell, alloc.getBytes(), alloc.getOffset());
    KeyValue newKv = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; KeyValue(alloc.getBytes(), alloc.getOffset(), len);
    newKv.setSequenceId(cell.getSequenceId());
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; newKv;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So the seqId is a long state on the Cell object. (We make KeyValue only here)&lt;br/&gt;
What I was saying is we will have a new impl for Cell which dont have seqId state. We will ask Allocator to give cell length + 8 bytes and keep the seqId as the last 8 bytes after the cell key and value part.  So when off heap MSLAB in place, we can keep these 8 bytes also off heap.   And then this can be a special cell which can return the ref to MSLAB chunk so that when we flatten this CSLM as part of in memory flush/compaction, we dont have to keep the Cell object as such and we can get ref to MSLAB chunk and offset there.   Or may be we can even have this Cell to have the chunkId too..  That will make us same way as 8 bytes per cell meta data. (chunkId + offset)&lt;/p&gt;

&lt;p&gt;Any way we can do those as a follow up issue.&lt;/p&gt;</comment>
                            <comment id="15259784" author="ram_krish" created="Wed, 27 Apr 2016 08:36:13 +0000"  >&lt;p&gt;I read the last few comments and discussed few things yesterday with Anoop. I think it makes sense to make things work with CellChunkMap way atleast for the offheap case. We can discuss on that and decide how we can make that decision.&lt;/p&gt;

&lt;p&gt;&apos;Adding seqId&apos; - is also something that can be discussed and if we are aiming at reducing the onheap overhead caused by a the new CellChunkMap based meta data then better to add the seqId also to that byte[] or BB that we get from the chunk.&lt;/p&gt;</comment>
                            <comment id="15299412" author="yuzhihong@gmail.com" created="Wed, 25 May 2016 03:46:27 +0000"  >&lt;p&gt;Patch v3 no longer applies.&lt;/p&gt;

&lt;p&gt;Mind rebasing the patch and put it on reviewboard ?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="15300446" author="anastas" created="Wed, 25 May 2016 17:13:25 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=yuzhihong%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;yuzhihong@gmail.com&quot;&gt;Ted Yu&lt;/a&gt;, I&apos;ll rebase once I get back to my office. &lt;/p&gt;</comment>
                            <comment id="15306551" author="anastas" created="Mon, 30 May 2016 11:34:44 +0000"  >&lt;p&gt;Hi All,&lt;/p&gt;

&lt;p&gt;Hereby we would like to declare the intent of the roadmap for this JIRA.&lt;br/&gt;
After discussing this internally, we see that CellChunkMap bears additional overhead of yet unresolved problems like:&lt;br/&gt;
1. Problem with cells bigger then MSLAB chunk&lt;br/&gt;
2. Impossibility to flatten into CellChunkMap&lt;br/&gt;
3. Requirement to MemStoreChunkPool to always exist (non-null)&lt;br/&gt;
4. Etc.&lt;/p&gt;

&lt;p&gt;On the other hand, CellArrayMap data structure is already ready, well tested and bench-marked.&lt;br/&gt;
CellArrayMap is not involved in none of the problems mentioned above.&lt;br/&gt;
So next we would like to publish a possibly commit-able patch that includes all the needed refactoring and new CompactingMemStore, which may compact into ConcurrentSkipListMap or CellArrayMap and may flatten into CellArrayMap only.&lt;br/&gt;
This will be accompanied with the benchmark results.&lt;/p&gt;

&lt;p&gt;We hope that the CellArrayMap-only patch can be well reviewed and even quickly committed.&lt;br/&gt;
While dealing with CellChunkMap implementation will be left to the later phase.&lt;br/&gt;
So bottom line, we would like to separate a ready to commit CellArrayMap code (from which the majority of the HBase&apos;s users can already benefit) from the CellChunkMap code that may require more time to get ready.&lt;/p&gt;

&lt;p&gt;Would be nice to hear you comments!&lt;br/&gt;
Thanks!&lt;/p&gt;</comment>
                            <comment id="15306567" author="ebortnik" created="Mon, 30 May 2016 11:53:51 +0000"  >&lt;p&gt;My 2 cents. &lt;/p&gt;

&lt;p&gt;The exact scope of the suggested (committable) patch would be: &lt;br/&gt;
1. Adjusted Segment hierarchy and service classes - to accommodate new ImmutableSegment implementations. &lt;br/&gt;
2. CellArrayMap implementation. &lt;br/&gt;
3. Flattening-without-compaction path - new scenario. &lt;/p&gt;

&lt;p&gt;This patch will already be sizable, that&apos;s why we&apos;re suggesting to focus on it first, and isolate the treatment of CellChunkMap to a separate patch. &lt;/p&gt;</comment>
                            <comment id="15308312" author="stack" created="Tue, 31 May 2016 18:38:11 +0000"  >&lt;p&gt;Sounds good &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; What is the down side? The CellChunkMap is needed if we are to do offheap, right. Is there a risk that CellChunkMap might not arrive? Could we get stuck in a state where we could not, say, offheap the segment pipeline? This is my only concern. Otherwise, your proposal of piecemealing this stuff sounds good to me.&lt;/p&gt;</comment>
                            <comment id="15308334" author="ebortnik" created="Tue, 31 May 2016 18:47:15 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; - no worries, we&apos;re on it, very committed to deliver CellChunkMap. Just wanted to deliver first things first to keep the stuff manageable. &lt;/p&gt;</comment>
                            <comment id="15308345" author="anoop.hbase" created="Tue, 31 May 2016 18:52:20 +0000"  >&lt;p&gt;Fine with the proposal of breaking it into more than one patch. Ya lets us begin with CellArrayMap then.&lt;/p&gt;</comment>
                            <comment id="15311788" author="ram_krish" created="Thu, 2 Jun 2016 05:50:35 +0000"  >&lt;p&gt;+1 to begin with CellArrayMap.&lt;/p&gt;</comment>
                            <comment id="15331854" author="anastas" created="Wed, 15 Jun 2016 14:41:19 +0000"  >&lt;p&gt;Hi Guys,&lt;/p&gt;

&lt;p&gt;The patch including all the refactoring and onlythe  CellArrayMap relevant code is uploaded.&lt;br/&gt;
There might be still work done on this design as e.g. creating 2-3 classes derived from ImmutableSegment according to its type.&lt;br/&gt;
Alternatively as the patch was prepared quickly it still under test and some errors might need to be corrected.&lt;br/&gt;
Your comments are also a good reason for an update&lt;/p&gt;

&lt;p&gt;Generally, just wanted to provide you a patch as fast as possible to look on.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Anastasia&lt;/p&gt;</comment>
                            <comment id="15331866" author="yuzhihong@gmail.com" created="Wed, 15 Jun 2016 14:49:06 +0000"  >&lt;p&gt;Can you put the patch on review board ?&lt;/p&gt;</comment>
                            <comment id="15332288" author="hadoopqa" created="Wed, 15 Jun 2016 18:40:16 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbaseanti &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not have any anti-patterns. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; @author &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not contain any @author tags. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; test4tests &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch appears to include 5 new or modified test files. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 15s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for branch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 50s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 20s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 52s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 29s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 2m 59s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 15s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 7s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 11s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for patch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 11s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 32s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 32s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 54s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 54s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 55s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 29s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; whitespace &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch has no whitespace issues. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 29m 27s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 2m 14s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server generated 1 new + 0 unchanged - 0 fixed = 1 total (was 0) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 54s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 56s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_79 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 42s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-common in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 36m 23s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; asflicense &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 13s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not generate ASF License warnings. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt;&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; 92m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Reason &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Tests &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; FindBugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; module:hbase-server &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Switch statement found in org.apache.hadoop.hbase.regionserver.MemStoreCompactor.start() where default case is missing  At MemStoreCompactor.java:where default case is missing  At MemStoreCompactor.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;lines 96-102&amp;#93;&lt;/span&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Failed junit tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.mapred.TestMultiTableSnapshotInputFormat &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Timed out junit tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; org.apache.hadoop.hbase.coprocessor.TestOpenTableInCoprocessor &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; org.apache.hadoop.hbase.mapred.TestTableMapReduce &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12810860/HBASE-14921-V04-CA.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12810860/HBASE-14921-V04-CA.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Optional Tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; uname &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Linux asf906.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Build tool &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Personality &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; git revision &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; master / ae5fe1e &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Default Java &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1.7.0_79 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Multi-JDK versions &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  /home/jenkins/tools/java/jdk1.8.0:1.8.0 /usr/local/jenkins/java/jdk1.7.0_79:1.7.0_79 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v3.0.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2229/artifact/patchprocess/new-findbugs-hbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2229/artifact/patchprocess/new-findbugs-hbase-server.html&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2229/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2229/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit test logs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2229/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2229/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Test Results &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2229/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2229/testReport/&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; modules &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; C: hbase-common hbase-server U: . &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2229/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2229/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.2.1   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15333319" author="anastas" created="Thu, 16 Jun 2016 08:03:20 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu&quot; class=&quot;user-hover&quot; rel=&quot;tedyu&quot;&gt;Ted Yu&lt;/a&gt;, added the review board&lt;/p&gt;</comment>
                            <comment id="15333515" author="ram_krish" created="Thu, 16 Jun 2016 10:14:10 +0000"  >&lt;p&gt;Few nits and some comments added. Will get back here.&lt;/p&gt;</comment>
                            <comment id="15338490" author="anastas" created="Sun, 19 Jun 2016 11:44:39 +0000"  >&lt;p&gt;Thank you for all your comments!&lt;br/&gt;
I published some initial evaluation results.&lt;br/&gt;
Soon, I&apos;ll refer to all your comments and publish more evaluation results.&lt;/p&gt;</comment>
                            <comment id="15338550" author="yuzhihong@gmail.com" created="Sun, 19 Jun 2016 14:55:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;We use a data set of 1280KB records, record size is 100Bytes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Did you mean 1280K records ?&lt;/p&gt;

&lt;p&gt;Do you know what caused the spike for CellArrayMap based immutable segment at the beginning of the evaluation ?&lt;/p&gt;</comment>
                            <comment id="15339123" author="anastas" created="Mon, 20 Jun 2016 07:57:15 +0000"  >&lt;p&gt;Yes, 1,280,000 records. &lt;br/&gt;
The slowness at the beginning happens anytime with any implementation (at least when we are working with YCSB). &lt;br/&gt;
We believe it is related to the warm-up of the system and the clearing from the previous experiment.&lt;br/&gt;
We usually disregard this spike as it is not typical only to implementation that is based on CellArrayMap.&lt;/p&gt;</comment>
                            <comment id="15339144" author="anoop.hbase" created="Mon, 20 Jun 2016 08:18:43 +0000"  >&lt;p&gt;Any chance for  a test on a high end system config? 1 GB heap for RS seems very minimal.  How you arrived at only 30% being given as Memstore size where 40% is default? &lt;br/&gt;
You wanted to make use of MSLAB chunk pool.  But in the listed configs am not able to see &quot;hbase.hregion.memstore.chunkpool.maxsize&quot;.  This defaults to 0 and so no pooling of MALAB chunks !!&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;lt;name&amp;gt;hbase.regionserver.global.memstore.lowerLimit&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;1.0f&amp;lt;/value&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You wanted this lower size to be 10% ie. 0.1?   1.0 is an invalid value for this config&lt;/p&gt;</comment>
                            <comment id="15339264" author="anastas" created="Mon, 20 Jun 2016 09:56:34 +0000"  >&lt;p&gt;Hey!&lt;/p&gt;

&lt;p&gt;I am happy you are taking a punctilious look on the results &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Generally, we didn&apos;t intend to do a stress or a real system test, at least not now.&lt;br/&gt;
We plan to show the &lt;b&gt;relative&lt;/b&gt; behavior between different MemStore variants.&lt;/p&gt;

&lt;p&gt;From here, we test on a single Region Server and the limit on the MemStore is not so much relevant.&lt;br/&gt;
Let&apos;s say the limit on the MemStore size is X, we are interested to see how the space of X is used by Default/Skip-List/CellArayMap.&lt;br/&gt;
What happens if we flatten without compaction? How much frequent compaction &quot;cost&quot; us?&lt;br/&gt;
This is what is interesting for now. Later you can replace X by any number.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;1 GB heap for RS seems very minimal. How you arrived at only 30% being given as Memstore size where 40% is default? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I agree that this is not enough, but we want to keep the MemStore limit small, in order to see the flush to disk (of Default) earlier. &lt;br/&gt;
Otherwise you just need to wait longer before some interesting activity starts. But I can put Memstore size to be 40% and rerun the tests.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You wanted to make use of MSLAB chunk pool. But in the listed configs am not able to see &quot;hbase.hregion.memstore.chunkpool.maxsize&quot;. This defaults to 0 and so no pooling of MALAB chunks !!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Actually, in the resent patch we removed the CellChunkMap, so we do not care about MemStoreChunkPool, as far as all implementations behave the same with allocations. &lt;br/&gt;
CellArrayMap doesn&apos;t care where everything is allocated, but we use chunks, but without pooling.&lt;br/&gt;
Again, if you care, and if already rerunning the tests, I&apos;ll set the chunk pooling on.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You wanted this lower size to be 10% ie. 0.1? 1.0 is an invalid value for this config&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;First, thank you for paying my attention! I took a closer look and found that global.memstore.lowerLimit is depricated and I need to use global.memstore.lower.limit, will fix that.&lt;br/&gt;
Second, after fixing the name, it looks like 100% is a valid value. Copy-pasting below from hbase-default.xml about hbase.regionserver.global.memstore.size.lower.limit:&lt;br/&gt;
&quot;A 100% value for this value causes the minimum possible flushing to occur when updates are blocked due to memstore limiting.&quot;&lt;/p&gt;

&lt;p&gt;Anyway, will soon publish the newer results &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Anastasia&lt;/p&gt;</comment>
                            <comment id="15341483" author="ram_krish" created="Tue, 21 Jun 2016 10:02:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;private CellSet createCellArrayMapSet(int numOfCells, MemStoreCompactorIterator iterator) {&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think this flattening is going to help us a lot in terms of comparison because when the skip list map is used apart from the cells overhead we are having a comparison overhead also. This can be avoided.&lt;/p&gt;</comment>
                            <comment id="15342183" author="ram_krish" created="Tue, 21 Jun 2016 17:01:48 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; &lt;br/&gt;
Have you tried with pure write workload? And what is the number of threads you have used in your evaluation?&lt;/p&gt;</comment>
                            <comment id="15354612" author="ram_krish" created="Wed, 29 Jun 2016 06:00:48 +0000"  >&lt;p&gt;I still doubt the sizing part of the memstore. Trying to find the root cause. Will get back here. BTW any updates &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="15361086" author="anastas" created="Mon, 4 Jul 2016 09:32:19 +0000"  >&lt;p&gt;The sizing was wrong &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;br/&gt;
Good eye you have &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Patch with aaaaaallll the fixes &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; will be ready today&lt;/p&gt;</comment>
                            <comment id="15361210" author="hadoopqa" created="Mon, 4 Jul 2016 11:48:48 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; patch &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 4s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; does not apply to master. Rebase required? Wrong Branch? See &lt;a href=&quot;https://yetus.apache.org/documentation/0.2.1/precommit-patchnames&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://yetus.apache.org/documentation/0.2.1/precommit-patchnames&lt;/a&gt; for help. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12816025/HBASE-14921-V04-CA-V02.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12816025/HBASE-14921-V04-CA-V02.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2516/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2516/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.2.1   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15361215" author="anastas" created="Mon, 4 Jul 2016 11:51:55 +0000"  >&lt;p&gt;Hey Guys!&lt;/p&gt;

&lt;p&gt;Added a new patch: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt;-V04-CA-V02.patch&lt;br/&gt;
It includes bug fixes that you guys have found and we have found as well. It also reflects the fixes for the majority of your code review comments. If you do not see your comment fixed, I should had written an answer near your review comment.&lt;br/&gt;
The patch is available on the same review board as another diff.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu&quot; class=&quot;user-hover&quot; rel=&quot;tedyu&quot;&gt;Ted Yu&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, please take a look on the code.&lt;br/&gt;
Your comments are very welcome! You can also raise an issue from previous review once again.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Anastasia &lt;/p&gt;</comment>
                            <comment id="15361242" author="anastas" created="Mon, 4 Jul 2016 12:27:34 +0000"  >&lt;p&gt;Trying again with new patch:  &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt;-V05-CAO.patch&lt;/p&gt;</comment>
                            <comment id="15361439" author="hadoopqa" created="Mon, 4 Jul 2016 15:08:30 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; rubocop &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; rubocop was not available. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; ruby-lint &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Ruby-lint was not available. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbaseanti &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not have any anti-patterns. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; @author &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not contain any @author tags. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; test4tests &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch appears to include 7 new or modified test files. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 13s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for branch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 8s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 21s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 2s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 8s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 39s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 2m 40s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 7s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 59s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 10s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for patch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 15s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 19s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 19s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 3s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 3s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 7s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 39s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; whitespace &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch has no whitespace issues. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 27m 7s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 2m 19s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server generated 1 new + 0 unchanged - 0 fixed = 1 total (was 0) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 10s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 59s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 48s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-common in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 98m 57s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 7m 2s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-shell in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; asflicense &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 47s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not generate ASF License warnings. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt;&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; 159m 41s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Reason &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Tests &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; FindBugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; module:hbase-server &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Switch statement found in org.apache.hadoop.hbase.regionserver.MemStoreCompactor.start() where default case is missing  At MemStoreCompactor.java:where default case is missing  At MemStoreCompactor.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;lines 97-103&amp;#93;&lt;/span&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Failed junit tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.regionserver.TestCompactingToCellArrayMapMemStore &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.regionserver.TestWalAndCompactingMemStoreFlush &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.client.TestHCM &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.regionserver.TestCompactingMemStore &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12816035/HBASE-14921-V05-CAO.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12816035/HBASE-14921-V05-CAO.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Optional Tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  rubocop  ruby_lint  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; uname &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Linux asf900.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Build tool &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Personality &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; git revision &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; master / 6944a17 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Default Java &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1.7.0_80 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Multi-JDK versions &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  /home/jenkins/tools/java/jdk1.8.0:1.8.0 /home/jenkins/jenkins-slave/tools/hudson.model.JDK/JDK_1.7_latest_:1.7.0_80 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v3.0.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2517/artifact/patchprocess/new-findbugs-hbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2517/artifact/patchprocess/new-findbugs-hbase-server.html&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2517/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2517/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit test logs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2517/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2517/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Test Results &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2517/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2517/testReport/&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; modules &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; C: hbase-common hbase-server hbase-shell U: . &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2517/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2517/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.2.1   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15363253" author="yuzhihong@gmail.com" created="Tue, 5 Jul 2016 21:08:49 +0000"  >&lt;p&gt;Please check test failures in TestCompactingToCellArrayMapMemStore, etc.&lt;/p&gt;</comment>
                            <comment id="15381306" author="anastas" created="Sun, 17 Jul 2016 11:46:06 +0000"  >&lt;p&gt;I am referencing the code review comments. One of raised issues is about CELL_ARRAY_MAP_ENTRY size. In addition to Cell reference, I count there also the size of Cell object located between CellArrayMap and the MemStoreChunk with the actual data. Any comments about that?&lt;/p&gt;</comment>
                            <comment id="15382585" author="ram_krish" created="Mon, 18 Jul 2016 16:54:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;CELL_ARRAY_MAP_ENTRY = align(OBJECT + 2*REFERENCE + 2*Bytes.SIZEOF_INT);&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You mean in your next patch you will also add up the cell&apos;s actual data length to this?&lt;/p&gt;</comment>
                            <comment id="15382750" author="anastas" created="Mon, 18 Jul 2016 18:11:30 +0000"  >&lt;p&gt;No, in the next patch I plan to leave it as is, unless you explain me why it is wrong. In CELL_ARRAY_MAP_ENTRY I count the reference for the array entry itself, then I count object, reference and two integers for:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// KeyValue core instance fields.
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] bytes = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;  &lt;span class=&quot;code-comment&quot;&gt;// an immutable &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; array that contains the KV
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset = 0;  &lt;span class=&quot;code-comment&quot;&gt;// offset into bytes buffer KV starts at
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length = 0;  &lt;span class=&quot;code-comment&quot;&gt;// length of the KV starting from offset.&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The cell&apos;s actual data is counted not here, but via heapSize() method.&lt;/p&gt;</comment>
                            <comment id="15382953" author="anastas" created="Mon, 18 Jul 2016 19:59:10 +0000"  >&lt;p&gt;Also, got a comment saying that scan (being done for deciding whether to compact or to flatten) is too costly. However I empirical results we truly do not see any performance issues due to this scan. We probably can add some sophisticated logic to predict the duplicate ratio, but I suggest first to proof this scan is causing the performance degradation. Any thoughts about that?&lt;/p&gt;</comment>
                            <comment id="15383594" author="ram_krish" created="Tue, 19 Jul 2016 05:19:04 +0000"  >&lt;p&gt;I now got to which comment are you referring to wrt CELL_ARRAY_ENTRY. I checked the RB.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;CELL_ARRAY_MAP_ENTRY = align(OBJECT + 2*REFERENCE + 2*Bytes.SIZEOF_INT);&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When you see the CELL_ARRAY_MAP_ENTRY it should only have the reference to the cell and one object right?  The 2 ints and the byte[] will be accounted in the KeyValue.heapSize().  Now if you add the ref and int here then the KeyValue.heapSize will again add it. So the comment in RB is valid I feel.&lt;/p&gt;</comment>
                            <comment id="15383595" author="ram_krish" created="Tue, 19 Jul 2016 05:21:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;but I suggest first to proof this scan is causing the performance degradation. Any thoughts about that?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The point is just for the default case. In default cases we are sure that we don&apos;t need to remove any duplicates. In such a doing a compaction is not needed. Yes for flattening we need to do a scan but that should be like an iterator mode not with the ScanQueryMatcher. &lt;/p&gt;</comment>
                            <comment id="15383727" author="anastas" created="Tue, 19 Jul 2016 07:39:41 +0000"  >&lt;p&gt;Got it. Removed the double counting.&lt;/p&gt;</comment>
                            <comment id="15383748" author="anastas" created="Tue, 19 Jul 2016 07:57:23 +0000"  >&lt;p&gt;What is the default case, where we are sure we don&apos;t need to remove any duplicates?&lt;br/&gt;
Hereby, I add a summary of how the flattening is using scans.&lt;/p&gt;

&lt;p&gt;When the size of active segment is above some threshold in CompactingMemStore, the active segment is pushed to pipeline (MutableSegment wrapped as ImmutableSegment). After that a single dedicated thread is doing the following:&lt;br/&gt;
1. Scan &lt;b&gt;all&lt;/b&gt; segments in the pipeline (with ScanQueryMatcher) in order to understand whether compaction is needed. This is for now the only way to understand whether we have duplicates or not.&lt;br/&gt;
2. Decide whether to flatten or to compact&lt;br/&gt;
3. If to flatten, then scan the not-flat segment only (without ScanQueryMatcher) in order to flatten.&lt;/p&gt;

&lt;p&gt;Can we have the real numbers showing what is the performance difference with and without the scan (in stage 1)? May be you (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;) can run this experiment on your big set up (while we have a simple configuration)?&lt;/p&gt;</comment>
                            <comment id="15384110" author="anastas" created="Tue, 19 Jul 2016 13:01:11 +0000"  >&lt;p&gt;First, thanks everybody for the code review comments! And special thanks to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; for the thoroughly review!&lt;/p&gt;

&lt;p&gt;One question to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, I am looking on your comment:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I think it is already there. But this scanner will not deal with deletes, only if there are duplicate versions will be removed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;related to the following line in the MemStoreCompactorIterator:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   /**
   * Creates the scanner &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; compacting the pipeline.
   *
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the scanner
   */
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; StoreScanner createScanner(Store store, KeyValueScanner scanner)   &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    Scan scan = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Scan();
    scan.setMaxVersions();  &lt;span class=&quot;code-comment&quot;&gt;//Get all available versions
&lt;/span&gt;    StoreScanner internalScanner =
        &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StoreScanner(store, store.getScanInfo(), scan, Collections.singletonList(scanner),
            ScanType.COMPACT_RETAIN_DELETES, store.getSmallestReadPoint(),      &lt;span class=&quot;code-comment&quot;&gt;//&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; is the line
&lt;/span&gt;            HConstants.OLDEST_TIMESTAMP);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; internalScanner;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can we do anything better? It looks like we will never able to deal with deletion, because this compaction is always minor. Or am I wrong?&lt;/p&gt;</comment>
                            <comment id="15385330" author="ram_krish" created="Wed, 20 Jul 2016 04:55:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can we do anything better? It looks like we will never able to deal with deletion, because this compaction is always minor.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. I think so. So better to leave it as is. That is why we were saying that if for a default case there are not many version available, doing a compaction may not be really needed. Instead if we can flatten the segments and directly flush all the segments in the pipeline will be good enough and to see we are reducing the heap overhead because of flattening. &lt;/p&gt;</comment>
                            <comment id="15385639" author="anastas" created="Wed, 20 Jul 2016 10:02:13 +0000"  >&lt;p&gt;Thank you &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;! You understand this project so well, made a thoroughly code review, not to say how much do I appreciate your deep HBase knowledge and experience!&lt;br/&gt;
I am calling to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; to join our interesting discussions!&lt;/p&gt;

&lt;p&gt;I understand your point. You would prefer to flatten the segments without compaction. This is because you believe that the compaction should in average eliminate little cells and even a scan doing the compaction is costly.&lt;br/&gt;
Let me disagree with this point of view and let me explain myself. Here are my points:&lt;/p&gt;

&lt;p&gt;1. Whether compaction is going to eliminate cells or not is unknown till the run-time. We don&apos;t want to add (yet another) user configurable flag: whether to use compaction or not. Only in very rare cases, it is known ahead of time that keys never repeat or being deleted.&lt;br/&gt;
2. For the deletion case, if a key K was inserted and deleted, then we (at least) have 2 versions of K were one can be eliminated. So it is not the compaction is useless for deletions.&lt;br/&gt;
3. The performance degradation due to &quot;pre-compaction&quot; scan is yet to be estimated.&lt;br/&gt;
4. Whether there are duplicates or not, you are going to do the same minor compaction anyway on the disk &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/warning.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; just to reduce the number of files. And there it is going to cost you much more, due to write amplifications, HDFS file replications, networking, bounded number of threads for compaction, I/O multiplication, etc. &lt;/p&gt;

&lt;p&gt;So we can think about some compaction application policies, apply it once in a while, etc. &lt;br/&gt;
But just to disregard the great possibility to compact in-memory... I don&apos;t think it is wise. &lt;br/&gt;
At least you should do a homework and present me the clear cut performance evidences that the in-memory-compaction of flattened segments is not effective in the average case (&quot;default case&quot; as you call it).&lt;/p&gt;

&lt;p&gt;Please note that in-memory-compaction is actually more than saving some RAM space, especially coming together with flattening.&lt;br/&gt;
We are now holding more in the memory and thus having more possibility to let a cell &quot;die&quot; in memory. &lt;br/&gt;
As I explained in Point 4, this saves much more resources then just space in RAM.&lt;br/&gt;
Please convince me where I am wrong &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15385649" author="ram_krish" created="Wed, 20 Jul 2016 10:30:51 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt;&lt;br/&gt;
Thanks for your consolidated feedback and thoughts. I really appreciate your inputs and I totally agree with your above points but for&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Only in very rare cases, it is known ahead of time that keys never repeat or being deleted.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Am not very sure on this. You mean most of the cases will have duplicates? There are use cases we have seen where there is not much duplicates and each row is unique. Say in a time based row key impl. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Whether there are duplicates or not, you are going to do the same minor compaction anyway on the disk  just to reduce the number of files.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;YEs minor compaction on the disk is a bottleneck because of IO. But in the case where you have very less duplicates you are doing that operation twice, once in memory and once in disk. This patch is not going to say that since memory compaction has been done avoid disk minor compaction.&lt;br/&gt;
Coming to deletes, there are use cases where the deletes are there but very rare. So even when the in memory compaction is going to remove such deletes ( if it is encountered) that is going to create a flush which is going to be slighly lesser in size but again the minor compaction will be performed on this file also. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;At least you should do a homework and present me the clear cut performance evidences that the in-memory-compaction of flattened segments is not effective in the average case (&quot;default case&quot; as you call it).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The onus is on me for doing this and coming up with results. &lt;br/&gt;
For now we have done the following things&lt;br/&gt;
-&amp;gt; After the first version of compacting memstore went in we started testing it and found some issues with which we thought pipeline creation was costly. LAter the bugs that were solved helped in overcoming this part and we got a better result.&lt;br/&gt;
-&amp;gt; With only flattening &apos;ON&apos; by default and with offheap memstore we were able to clearly see a better G1GC mixed GC avg time. It got reduced from 0.6 sec to 0.2 secs. So we are 100% sure flattening is needed. Remember in this impl the entire pipeline segments are flushed.&lt;br/&gt;
-&amp;gt; For your point of seeing whether default case with inmemory compaction and flattening if it is impacting or not, I can get you the numbers. If it is not impacting the perf then we can definitely go with your design and no problem with that. &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; can comment more on the use case part and if anything is being missed here. &lt;/p&gt;
</comment>
                            <comment id="15385690" author="anastas" created="Wed, 20 Jul 2016 11:11:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;Am not very sure on this. You mean most of the cases will have duplicates? There are use cases we have seen where there is not much duplicates and each row is unique. Say in a time based row key impl. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, I do not mean most of the cases will have duplicates. I am sure there are cases where are no duplicates at all. I mean for example the cases where there are period of times with more duplicates and periods with less. When it is not clearly known ahead of time. Usually, the usecases with no duplicates at all and with lots of duplicates are rare. I just think that 10-15% of duplicates should worth compaction...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Yes minor compaction on the disk is a bottleneck because of IO. But in the case where you have very less duplicates you are doing that operation twice, once in memory and once in disk. This patch is not going to say that since memory compaction has been done avoid disk minor compaction. Coming to deletes, there are use cases where the deletes are there but very rare. So even when the in memory compaction is going to remove such deletes ( if it is encountered) that is going to create a flush which is going to be slighly lesser in size but again the minor compaction will be performed on this file also.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree with you that without duplicates in-memory compaction is unnecessary. I just wanted to show that in case of little duplicates you gain more then space in memory.&lt;/p&gt;

&lt;p&gt;The results are very interesting. On which version exactly was the estimation done? On my previous patch? Let me give you a new and updated pach today.&lt;br/&gt;
Thank you, Ramkrishna!&lt;/p&gt;</comment>
                            <comment id="15385748" author="ebortnik" created="Wed, 20 Jul 2016 12:11:14 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ramkrishna&quot; class=&quot;user-hover&quot; rel=&quot;ramkrishna&quot;&gt;ramkrishna&lt;/a&gt;, I&apos;d suggest to review the upcoming patch as-is, and discuss the enablement of compaction later on. I see your point about the cost vs value of compaction. But maybe we can build a cheaper predictor of overlap between sets, a-la Bloom filter. That might affect the worthiness of optimizing this point ... First things first. &lt;/p&gt;</comment>
                            <comment id="15385794" author="anastas" created="Wed, 20 Jul 2016 12:48:51 +0000"  >&lt;p&gt;Hi Guys,&lt;/p&gt;

&lt;p&gt;I really wanted to publish the patch today, but &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16194&quot; title=&quot;Should count in MSLAB chunk allocation into heap size change when adding duplicate cells&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16194&quot;&gt;&lt;del&gt;HBASE-16194&lt;/del&gt;&lt;/a&gt; is causing a big problem to rebase. I should take it carefully as I have changed the way heapSize is measured and so did &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16194&quot; title=&quot;Should count in MSLAB chunk allocation into heap size change when adding duplicate cells&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16194&quot;&gt;&lt;del&gt;HBASE-16194&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
I will try tonight once again to resolve all the conflicts.&lt;/p&gt;

&lt;p&gt;Sorry,&lt;br/&gt;
Anastasia&lt;/p&gt;</comment>
                            <comment id="15387034" author="hadoopqa" created="Thu, 21 Jul 2016 02:33:17 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; rubocop &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 2s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; rubocop was not available. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; ruby-lint &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 2s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Ruby-lint was not available. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbaseanti &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not have any anti-patterns. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; @author &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not contain any @author tags. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; test4tests &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch appears to include 7 new or modified test files. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 1m 3s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for branch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 4m 35s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 37s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 20s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 25s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 51s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 10s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 31s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 13s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 12s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for patch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 31s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 49s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 49s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 20s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 20s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 19s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 49s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; whitespace &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch has no whitespace issues. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 29m 17s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 2m 44s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server generated 1 new + 0 unchanged - 0 fixed = 1 total (was 0) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 11s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 58s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 44s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-common in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 118m 2s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 8m 13s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-shell in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; asflicense &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 44s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not generate ASF License warnings. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt;&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; 188m 34s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Reason &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Tests &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; FindBugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; module:hbase-server &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Switch statement found in org.apache.hadoop.hbase.regionserver.MemStoreCompactor.start() where default case is missing  At MemStoreCompactor.java:where default case is missing  At MemStoreCompactor.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;lines 98-101&amp;#93;&lt;/span&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Failed junit tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.replication.TestMasterReplication &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.master.procedure.TestMasterFailoverWithProcedures &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.security.visibility.TestEnforcingScanLabelGenerator &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12819195/HBASE-14921-V06-CAO.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12819195/HBASE-14921-V06-CAO.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Optional Tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  rubocop  ruby_lint  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; uname &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Linux asf905.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Build tool &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Personality &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; git revision &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; master / ce657d5 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Default Java &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1.7.0_80 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Multi-JDK versions &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  /home/jenkins/tools/java/jdk1.8.0:1.8.0 /home/jenkins/jenkins-slave/tools/hudson.model.JDK/JDK_1.7_latest_:1.7.0_80 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v3.0.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2702/artifact/patchprocess/new-findbugs-hbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2702/artifact/patchprocess/new-findbugs-hbase-server.html&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2702/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2702/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit test logs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2702/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2702/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Test Results &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2702/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2702/testReport/&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; modules &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; C: hbase-common hbase-server hbase-shell U: . &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2702/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2702/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.2.1   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15387050" author="anoop.hbase" created="Thu, 21 Jul 2016 03:02:27 +0000"  >&lt;p&gt;I got your argument abt dynamic decision making for compaction vs flatten only.  Worry was how costly it will be to do another round of scan.  It involve SQM and a Heap with many compares. It is not so cheap.  As of now you are not adding the CellChunkMap based flattening.  Things will be much worse, when we have that.  We get rid of Cell objects as such in that flattened form. But then this scan need Cells to be created again. Means lots of garbage.&lt;br/&gt;
May be in a use case where duplicates are possible, chances are there that there are not enough #duplicate records so that we get some real benefit out of compaction. So then flatten would be enough.  So an extra scan may make sense there.&lt;br/&gt;
But when the use case is like some thing of time series data, where we really dont expect duplicates/updates, it might be better to turn off compaction and do only flatten.&lt;br/&gt;
Again flatten to CellChunkMap would be ideal as that will release and reduce heap memory footprint for this memstore considerably. CellArrayMap, yes it reduces but not much.  In your usecase, the max adv you get because of the compaction as many cells will get removed.&lt;/p&gt;

&lt;p&gt;My another concern is regarding the fact that in this memstore only the tail of the pipeline getting flushed to disk when a flush request comes.  In 1st version it was like always the compaction happens. So all chances that the tail of pipeline is much bigger sized and so that much data gets flushed.  Now when compaction is not at all happening and we do have many small sized segments in pipeline, it would have been better to flush all the segments to disk that making small sized flushes. I raised this concern at first step also. But then the counter was that the compaction happens always but now it is not the case.&lt;/p&gt;

&lt;p&gt;Ya Ram will come up with al perf analysis.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We are now holding more in the memory and thus having more possibility to let a cell &quot;die&quot; in memory. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;JFYI..  There is a periodic memstore flush checking. If we accumulate more than 30 million edits in memstore, we will flush&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.maxFlushedSeqId &amp;gt; 0
          &amp;amp;&amp;amp; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.maxFlushedSeqId + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.flushPerChanges &amp;lt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.mvcc.getReadPoint())) {
      whyFlush.append(&lt;span class=&quot;code-quote&quot;&gt;&quot;more than max edits, &quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.flushPerChanges + &lt;span class=&quot;code-quote&quot;&gt;&quot;, since last flush&quot;&lt;/span&gt;);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This flushPerChanges is configurable btw.&lt;br/&gt;
The second check here is time based. If we have not flushed memstore for quite some time, we will make a flush. This time def to 1 hr.&lt;br/&gt;
Just saying for your consideration.&lt;/p&gt;</comment>
                            <comment id="15387214" author="anoop.hbase" created="Thu, 21 Jul 2016 05:52:47 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt;  So you got the comment abt the heap sizing for the CellArrayEntry ?  I mean to say here just consider the extra heap space need for adding an item to this CellArray structure.  Do not consider the heap need for that object as such. That can be done within that object&apos;s heap size calc.&lt;br/&gt;
Finally when we have to find whole heap size of a given CellArray structure we can &lt;br/&gt;
&amp;lt;Cell Array  Object overhead&amp;gt; + &lt;br/&gt;
for(Each entry in CellArray)&lt;br/&gt;
   CellArray Entry overhead + Cell object heap&lt;/p&gt;</comment>
                            <comment id="15387229" author="anoop.hbase" created="Thu, 21 Jul 2016 06:12:45 +0000"  >&lt;p&gt;I see your latest rebased patch.  Pls see &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16229&quot; title=&quot;Cleaning up size and heapSize calculation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16229&quot;&gt;&lt;del&gt;HBASE-16229&lt;/del&gt;&lt;/a&gt;.  Doing some changes wrt size and heap size accounting.  I can help you with rebase once we get that in.&lt;/p&gt;</comment>
                            <comment id="15387231" author="hadoopqa" created="Thu, 21 Jul 2016 06:15:12 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; rubocop &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 1s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; rubocop was not available. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; ruby-lint &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 1s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Ruby-lint was not available. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbaseanti &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not have any anti-patterns. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; @author &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not contain any @author tags. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; test4tests &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch appears to include 7 new or modified test files. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 24s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for branch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 27s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 29s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 4s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 21s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 42s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 2m 55s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 8s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 1s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 10s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for patch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 21s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 24s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 24s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 12s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 12s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 17s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 41s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; whitespace &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch has no whitespace issues. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 29m 31s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 2m 32s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server generated 1 new + 0 unchanged - 0 fixed = 1 total (was 0) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 11s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 2s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 59s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-common in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 127m 40s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 8m 29s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-shell in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; asflicense &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 46s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not generate ASF License warnings. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt;&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; 194m 35s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Reason &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Tests &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; FindBugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; module:hbase-server &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Switch statement found in org.apache.hadoop.hbase.regionserver.MemStoreCompactor.start() where default case is missing  At MemStoreCompactor.java:where default case is missing  At MemStoreCompactor.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;lines 98-101&amp;#93;&lt;/span&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Failed junit tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.tool.TestCanaryTool &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.master.procedure.TestMasterFailoverWithProcedures &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.client.TestBlockEvictionFromClient &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12819195/HBASE-14921-V06-CAO.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12819195/HBASE-14921-V06-CAO.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Optional Tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  rubocop  ruby_lint  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; uname &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Linux asf911.gq1.ygridcore.net 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Build tool &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Personality &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; git revision &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; master / ce657d5 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Default Java &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1.7.0_80 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Multi-JDK versions &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  /home/jenkins/tools/java/jdk1.8.0:1.8.0 /home/jenkins/jenkins-slave/tools/hudson.model.JDK/JDK_1.7_latest_:1.7.0_80 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v3.0.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2704/artifact/patchprocess/new-findbugs-hbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2704/artifact/patchprocess/new-findbugs-hbase-server.html&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2704/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2704/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit test logs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2704/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2704/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Test Results &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2704/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2704/testReport/&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; modules &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; C: hbase-common hbase-server hbase-shell U: . &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2704/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2704/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.2.1   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15387309" author="anastas" created="Thu, 21 Jul 2016 07:35:11 +0000"  >&lt;p&gt;I have re-based everything for now. Reapplied the change, please take a look on the last patch.&lt;/p&gt;</comment>
                            <comment id="15387315" author="anastas" created="Thu, 21 Jul 2016 07:45:38 +0000"  >&lt;p&gt;I think I set it all correct now. Please take a look on the last patch.&lt;/p&gt;</comment>
                            <comment id="15387470" author="anastas" created="Thu, 21 Jul 2016 10:06:47 +0000"  >&lt;p&gt;Thank you &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; for your very reasonable comments!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But when the use case is like some thing of time series data, where we really dont expect duplicates/updates, it might be better to turn off compaction and do only flatten.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do you suggest to make an externally editable flag for turning compaction on and off? So what should be the default value for this flag? Didn&#8217;t we wanted sysadmins to work less with all those flags and settings (that we already have)? We can make this compaction-pre-check scan every second (Xth) flush to pipeline if it appears to decrease the performance.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Again flatten to CellChunkMap would be ideal as that will release and reduce heap memory footprint for this memstore considerably. CellArrayMap, yes it reduces but not much. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;CellChunkMap is valuable because it can be taken off-heap, but CellChunkMap doesn&#8217;t significantly reduces the memory usage compared to CellArrayMap. All that you save memory-wise in CellChunkMap is that Cell object is now &#8220;embedded&quot; as part of the array, and so you do not need the reference and the object overhead. So the difference between CellArrayMap and CellChunkMap is in 24 bytes per Cell.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In your usecase, the max adv you get because of the compaction as many cells will get removed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I do not agree. In our experiments we (on purpose) use uniform distribution with small data size and we have little duplicates. We still see that the compaction has little impact on the performance.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My another concern is regarding the fact that in this memstore only the tail of the pipeline getting flushed to disk when a flush request comes. In 1st version it was like always the compaction happens. So all chances that the tail of pipeline is much bigger sized and so that much data gets flushed. Now when compaction is not at all happening and we do have many small sized segments in pipeline, it would have been better to flush all the segments to disk that making small sized flushes. I raised this concern at first step also. But then the counter was that the compaction happens always but now it is not the case.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I remember this concern of yours from the code review. This is a valid concern and we are thinking about it. Apparently, this is one more reason to do compactions (at least for merge) once in a while. We can do it when we have like e.g. 10 segments in the pipeline. If we are going to simply flush it all to disk we are going to create many small files and their compaction is going to run on disk then...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;JFYI.. There is a periodic memstore flush checking. If we accumulate more than 30 million edits in memstore, we will flush&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We know there is a flush to disk once about every hour. The main reason for that is WAL, right? Otherwise, why would we care how many cells are in memory? Actually, may be in this we do not want to flush absolutely everything to disk and to flush just the oldest part so the WAL can truncate a bit is enough?&lt;/p&gt;</comment>
                            <comment id="15387509" author="ram_krish" created="Thu, 21 Jul 2016 10:39:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;We can do it when we have like e.g. 10 segments in the pipeline. If we are going to simply flush it all to disk we are going to create many small files and their compaction is going to run on disk then...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; - The idea was to flush all the segments into one file. So the snapshot will contain 10 segments and all the 10 will be flushed at one shot. Not that we will create 10 files - 1 out of each segment.&lt;br/&gt;
I am just reviewing this code. If the patch is not updated in RB can you update it? &lt;/p&gt;</comment>
                            <comment id="15387517" author="anastas" created="Thu, 21 Jul 2016 10:51:20 +0000"  >&lt;p&gt;The recent patch is in RB now&lt;/p&gt;</comment>
                            <comment id="15387993" author="ebortnik" created="Thu, 21 Jul 2016 16:27:56 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, thanks for all the feedback so far. My 2 cents:&lt;br/&gt;
1. On-disk fragmentation - agree we might need to merge upon flush (or maybe a bit before) if the pipeline becomes too big. We don&apos;t want to create too many files, obviously. &lt;br/&gt;
2. Flattening without compaction - let&apos;s give this feature a second thought, I&apos;m not all that sure it&apos;s worth separating between the two. At least that would be confusing for the administrator to deal with one more flag. Could you please bring some hard benchmark numbers that show that the overhead of compaction doesn&apos;t make sense? &lt;/p&gt;

&lt;p&gt;Maybe we can solve the fragmentation and compaction problems together? Like, a new immutable segment is automatically flattened but not merged with other segments. Once there are enough segments in the pipeline (3?), they are merged, without any speculative prediction check. Upon flush, the oldest segment goes to disk - same as now. No flags, no configuration parameters (other than just using the new Store type). &lt;/p&gt;

&lt;p&gt;Opinions? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, please chime in &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15387999" author="ebortnik" created="Thu, 21 Jul 2016 16:29:10 +0000"  >&lt;p&gt;Appreciate if we could get the new patch reviewed really quick, to move on to CellChunkMap (the real thing). &lt;/p&gt;</comment>
                            <comment id="15388017" author="anoop.hbase" created="Thu, 21 Jul 2016 16:41:20 +0000"  >&lt;p&gt;When the compaction of 3 or more segments can not really remove duplicate/deleted cells, why you think we need to compact it?  Just to make the tail of the pipeline grow bigger?  &lt;br/&gt;
Ya rather than compact a segment with another in pipeline immediately after the second one comes in might not be needed.  The compaction can kick start at some interval (may be based on #segments in pipeline)&lt;/p&gt;</comment>
                            <comment id="15388051" author="ram_krish" created="Thu, 21 Jul 2016 17:06:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;to move on to CellChunkMap (the real thing).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ya fine to move to this. We have made necessary changes to avoid copy to get the chunk id. This change and the chunkId creation  can be committed as seperate patches. You can create the CellChunkMap based on that.&lt;/p&gt;</comment>
                            <comment id="15389043" author="ram_krish" created="Fri, 22 Jul 2016 06:51:51 +0000"  >&lt;p&gt;Did the testing with compacting memstore. &lt;br/&gt;
Based on our write path offheaping work we had arrived at certain config params and gc tuning.&lt;br/&gt;
Onheap case : Xmx : 32  G&lt;br/&gt;
Offheap case Xmx : 12 G&lt;br/&gt;
Offheap memory for memstore : 25 G&lt;/p&gt;

&lt;p&gt;global memstore size : 0.42&lt;br/&gt;
GC - G1GC&lt;br/&gt;
&quot;-XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:InitiatingHeapOccupancyPercent=60 -XX:G1HeapWastePercent=20  -XX:G1MixedGCCountTarget=8&quot;&lt;/p&gt;

&lt;p&gt;PE :  ./hbase org.apache.hadoop.hbase.PerformanceEvaluation --nomapred --presplit=50 --size=150 --columns=50 --valueSize=200 --writeToWAL=false --bloomFilter=NONE --inmemoryCompaction=false/true  randomWrite 50&lt;/p&gt;

&lt;p&gt;We were able to run and get results for the default memstore (onheap), default memstore(offheap), Pipelinememstore (Internal impl where all segments are flushed with no in memory compaction) - flatten to ARRAY_MAP and flatten to CHUNK_MAP.&lt;/p&gt;

&lt;p&gt;But with compacting memstore we are not able to run and get results as with the offheap case 12G is just not enough because we have duplicates while doing in memory compaction. The segments are read once again to create a compacted segment and it is creating lot of garbage and more memory need.&lt;/p&gt;

&lt;p&gt;With onheap case I increased the heap size to 50G (as with 32G I was not able to run) still the compaction was taking lot of memory and most importantly the disk flushes and disk compactions were getting piled up and finally got &apos;Too many open files&apos; exception.&lt;/p&gt;

&lt;p&gt;So I copied the latest trunk patch and gave a run and it had other exception due to invalid region size settings as it was going negative. &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2016-07-22 16:14:51,066 ERROR [RpcServer.FifoWFPBQ.&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;.handler=60,queue=0,port=16041-inmemoryCompactions-1469184056544] regionserver.HRegion: Asked to modify &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; region&apos;s (TestTable,00000000000000000005033136,1469184040624.26d47b5614da8885fd0768b66a5d6457.) memstoreSize to a negative value which is incorrect. Current memstoreSize=33534312, delta=-33570288
java.lang.Exception
        at org.apache.hadoop.hbase.regionserver.HRegion.addAndGetGlobalMemstoreSize(HRegion.java:1125)
        at org.apache.hadoop.hbase.regionserver.RegionServicesForStores.addAndGetGlobalMemstoreSize(RegionServicesForStores.java:72)
        at org.apache.hadoop.hbase.regionserver.CompactionPipeline.swap(CompactionPipeline.java:111)
        at org.apache.hadoop.hbase.regionserver.CompactingMemStore.swapCompactedSegments(CompactingMemStore.java:208)
        at org.apache.hadoop.hbase.regionserver.MemStoreCompactor.doCompaction(MemStoreCompactor.java:173)
        at org.apache.hadoop.hbase.regionserver.MemStoreCompactor.start(MemStoreCompactor.java:114)
        at org.apache.hadoop.hbase.regionserver.CompactingMemStore.flushInMemory(CompactingMemStore.java:311)
        at org.apache.hadoop.hbase.regionserver.CompactingMemStore$InMemoryFlushRunnable.run(CompactingMemStore.java:384)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So in order to avoid compaction I just ensure that only flattening happens (because in the default case that is what you are trying to do). Even here the problem is that since only the flush happens on the tail part we keep pressurizing the memstore and we have lot of blocked regions. Also the tail flush is creating lot of small files and this is leading to more compactions and hence  again getting &apos;Too  many file open&apos; exception. &lt;/p&gt;

&lt;p&gt;When i did the above change to the offheap memstore (allow only flattening) case the problem is similar but here the tests are taking longer time to complete as every time only a small portion of the memstore is getting flushed out. &lt;/p&gt;

&lt;p&gt;So we feel that if we go only with flattening then we should ensure that entire segments in pipeline has to be flushed.&lt;/p&gt;</comment>
                            <comment id="15389649" author="anoop.hbase" created="Fri, 22 Jul 2016 15:05:26 +0000"  >&lt;p&gt;Thanks Ram&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; Suggest you people also test this with large load as we are doing.  A min of 50 client threads doing the writes and let it run for mins.  We are trying to write 150 GB of data so that it takes more than 10 mins always.  We can know the impact of flushes/compactions also.&lt;/p&gt;</comment>
                            <comment id="15389678" author="ebortnik" created="Fri, 22 Jul 2016 15:29:14 +0000"  >&lt;p&gt;Agreed. We all need more benchmarking. Let&apos;s proceed with the CR independently. &lt;/p&gt;</comment>
                            <comment id="15392213" author="ebortnik" created="Mon, 25 Jul 2016 16:23:43 +0000"  >&lt;p&gt;Suggest we install some order in this discussion, there are really multiple issues on the table.&lt;/p&gt;

&lt;p&gt;TL;DR: Let&apos;s get this patch in shape and check it in without over-optimizing; it&apos;s already quite big. &lt;/p&gt;

&lt;p&gt;1. Bugs in the current PR. Thanks for reporting. Those must be fixed, period. We are working on reproducing and fixing.&lt;br/&gt;
2. Decoupling In-Memory Flush (with Flattening) from Compaction - either algorithmic or via configuration. IMHO, this is a matter of optimization, either approach has its pros and contras. For example, if flattening and compaction were always coupled, the too-many-open-files problem would not have emerged. In general, we&apos;re in favor of having a smart system with as few parameter knobs as possible, capable of figuring out the compaction benefits at a low cost. But again, this is a matter of policy. We suggest to defer it beyond the current commit. &lt;br/&gt;
3. Concurrent development. Currently, there are at least two JIRA&apos;s (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16003&quot; title=&quot;Compacting memstore related fixes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16003&quot;&gt;HBASE-16003&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16229&quot; title=&quot;Cleaning up size and heapSize calculation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16229&quot;&gt;&lt;del&gt;HBASE-16229&lt;/del&gt;&lt;/a&gt;) that try to concurrently handle the same issues as this JIRA, which creates a lot of friction in the code. The prior consensus was that &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; would be the umbrella for all memory optimizations, including the ultimate flattening (CellChunkMap). Failing to stick to this discipline slows us down a lot. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, if you feel you&apos;ve reached a more advanced stage of flat memory implementation for the ultimate off-heaping, and prefer to lead that charge - this is perfectly fine with us. But let us merge the 14921 patch first (it&apos;s already heavily invested), and start optimizing on top of it. &lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Ed&lt;/p&gt;</comment>
                            <comment id="15392298" author="anoop.hbase" created="Mon, 25 Jul 2016 17:03:16 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16229&quot; title=&quot;Cleaning up size and heapSize calculation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16229&quot;&gt;&lt;del&gt;HBASE-16229&lt;/del&gt;&lt;/a&gt; trying to just make the size accounting in a better shape..  The accounting happens within each class like Segment/ CompactingMemstore.  Not like using setter some one else set a size and then some places we add some overhead and some other place minus it.. It was really confusing.&lt;br/&gt;
Pls see that change.. I said above that I can help with the rebase which might be needed because of this change.  Sorry for the rebase effort caused by other issue fixes.&lt;br/&gt;
See we all wanted to make sure that this feature is well accepted.  We feel that this has relevance not just in scenario where there are many duplicates/deletes.. But in a normal case also..  Or else we would not have given this much of our effort. &lt;/p&gt;

&lt;p&gt;I had raised 2 points of concerns on the general approach.  Am not saying that those has to be handled as part of this jira. We can get this in and then work on those also.. But I wanted to highlight those. I raised this at initial stage also.. But then there were counters.  And now those counter args can not stand at all time.&lt;/p&gt;</comment>
                            <comment id="15392425" author="stack" created="Mon, 25 Jul 2016 18:18:14 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; I like this reasoning. You&apos;ve done this a few times in this issue. Please do not have these comments lost in the general back and forth. Can you hoist your thoughts into release notes/documentation for this feature?&lt;/p&gt;</comment>
                            <comment id="15392497" author="stack" created="Mon, 25 Jul 2016 19:00:10 +0000"  >&lt;p&gt;Just did a reread of this whole issue.&lt;/p&gt;

&lt;p&gt;First, what is going on in here is wonderful. True, the issue is going on too long and starting to run away from us but it is a shining example of the best of collaboration; informed, data-based compares, accommodating, smart, respectful back-and-forth, detailed reviews, actual testing (and fixes) of posted patches, etc. You can&apos;t beat it.&lt;/p&gt;

&lt;p&gt;Second, all involved agree on the merit of these developments, their promise, and are trying to help land the patch. There is consensus that we should commit and then-address-outstanding-issues afterward but as I read it there seems to be a reluctance to take on the patch while it demonstrably slows down the default case &amp;#8211; i.e. when no duplicates &amp;#8211; and there is concern that we may not be able to recover the lost perf with the current approach. We could of course turn this feature &apos;off&apos;, by default, but most of us don&apos;t want to do that for reasons stated above (another is that &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; want to base some of their offheaping of write path on the work done here). Can I help in here? I can run some perf compares like &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;&apos;s?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; Mind repeating what your two concerns were here just so the discussion is contained (this issue is long now).&lt;/p&gt;
</comment>
                            <comment id="15392525" author="stack" created="Mon, 25 Jul 2016 19:12:17 +0000"  >&lt;p&gt;Oh, and with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ebortnik&quot; class=&quot;user-hover&quot; rel=&quot;ebortnik&quot;&gt;Edward Bortnikov&lt;/a&gt;, what is shortest path to commit of this patch. Reviewing the RB comments, it seems like there are outstanding issues still. Can these be addressed or if not fundamental, removed and done in a separate issue?&lt;/p&gt;</comment>
                            <comment id="15392571" author="anastas" created="Mon, 25 Jul 2016 20:02:08 +0000"  >&lt;p&gt;First, I agree that the sizing issue is ugly and need to be improved. Which is partially done in this patch and I planned to improve it further. &lt;/p&gt;

&lt;p&gt;However, I think it is unnecessary and not urgent, to open another JIRA for this fix. This is not an issue of rebase only, because we take the code in two different directions. We could live with the code as is (or at least could see the final outcome of 14921) and later we could agree how to arrange the sizes (if what we have is not good enough)... &lt;/p&gt;

&lt;p&gt;Your two concerns are very clear.&lt;br/&gt;
1. The flattening without compaction is causing many small segments in pipeline, and they are not flushed all together.&lt;br/&gt;
2. The issue of compaction prediction cost.&lt;/p&gt;

&lt;p&gt;Please correct me if I am wrong.&lt;/p&gt;

&lt;p&gt;We understand those concerns. There is no argument that your first concern will be fixed. For your second concern we are going to benchmark it ourselves with PE.&lt;/p&gt;</comment>
                            <comment id="15392580" author="anastas" created="Mon, 25 Jul 2016 20:10:50 +0000"  >&lt;p&gt;All code review comments from review board were addressed. All replies are in the review board. As I have said above the main concerns are:&lt;/p&gt;

&lt;p&gt;1. Correctness exceptions &amp;#8211; this is under investigation and is going to be fixed&lt;br/&gt;
2. The concern about how much the compaction-estimation costs &amp;#8211; we are going to run the PE tool ourselves&lt;br/&gt;
3. The problem with small flushes to disk due to lack of compaction &amp;#8211; no doubt this can be arranged, but probably not under this JIRA&lt;/p&gt;

&lt;p&gt;This is my summary&lt;/p&gt;</comment>
                            <comment id="15392669" author="stack" created="Mon, 25 Jul 2016 21:03:44 +0000"  >&lt;p&gt;Ok. Left some notes on the review but any chance of a high-level overview on what the latest patch iteration delivers? Does it jibe w/ the attached design? If so, thats grand. I am asking because I presume it has morphed since my old reviews. Would it help &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; if i ran another version of &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;&apos;s loading test? A YCSB say?&lt;/p&gt;</comment>
                            <comment id="15392671" author="ebortnik" created="Mon, 25 Jul 2016 21:04:53 +0000"  >&lt;p&gt;Let me re-iterate we are respectful of everyone&apos;s contribution, and are trying to do the right thing, as much by-consensus as possible. &lt;/p&gt;

&lt;p&gt;Here&apos;s a suggestion. For the sake of the current patch, let&apos;s decouple the in-memory flush configuration from compaction configuration. The latter is a special case of the former. With compaction protected by a explicit flag, we no more need the speculative scan to predict its worthiness. The code becomes simple. In the future, we can discuss smart policies to help us eliminate this flag. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, can we agree on this as base for further discussion? &lt;/p&gt;</comment>
                            <comment id="15393193" author="anoop.hbase" created="Tue, 26 Jul 2016 04:17:52 +0000"  >&lt;p&gt;Ya &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; the 2 points I raised are those..  I wanted to make sure those are highlighted early rather than saying it after..  And I dont mean they should be addressed in a single jira. Ya this is already big patch and no need to do more work again.. That is the common practice we follow.. When a comment needs more work, the developer can suggest doing it later as part of another jira and reviewers mostly agree. I am fine for that..  Sorry if I was not saying it explicitly.  It is a practice for us so I missed. Sorry.&lt;br/&gt;
It is your wish..  In this form also am ok to get that in.. We can always make things better after.&lt;br/&gt;
The cost of scan may be more when we have CellChunkMap.. In this flattened form, we get rid of Cell objects and again this Scan will make these objects over us.  With CellArrayMap the overhead might be from SQM and StoreScanner heap.  With CellChunkMap it is more.. That is why I raised it early.  Ya let us do that later also. Its ok.&lt;/p&gt;</comment>
                            <comment id="15393204" author="stack" created="Tue, 26 Jul 2016 04:31:21 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; What you think of the &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ebortnik&quot; class=&quot;user-hover&quot; rel=&quot;ebortnik&quot;&gt;Edward Bortnikov&lt;/a&gt; proposal.&lt;/p&gt;

&lt;p&gt;I just want to iterate that it is priority that the 80% case, the case where we do not have much by way of Cell overlaps/duplicates, cannot suffer when we add in this feature. It is fine if there is a temporary performance regression. We can live with that in master branch, but it cannot go unaddressed. Just saying.&lt;/p&gt;</comment>
                            <comment id="15393386" author="anoop.hbase" created="Tue, 26 Jul 2016 07:51:47 +0000"  >&lt;p&gt;Am fine with committing this jira first..  EVen with cur way of scan based decision of flatten vs compaction.  We can always make that better as part of other jira. Even turn off using a config.&lt;/p&gt;</comment>
                            <comment id="15393993" author="ebortnik" created="Tue, 26 Jul 2016 15:54:51 +0000"  >&lt;p&gt;Thanks, all, for the last round ... Seems like we are converging. &lt;/p&gt;

&lt;p&gt;So, we seem to agree on the following:&lt;br/&gt;
1. At the end of the day, we want compaction (data de-duplication) where it helps, and don&apos;t want it where it doesn&apos;t. That might use a flag or some smart policy. Getting there might take 1-2 more (smaller) patches. &lt;br/&gt;
2. We want to land the current patch because it&apos;s getting big. The mandatory condition for passing it is bug-freedom (via improved coverage), including the more stressful PE tests. Hopeful to finish this week or early next week. &lt;br/&gt;
3. We want to release all the dependencies for &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; on their way to off-heap memory implementation. We&apos;ll switch to that as soon as the current patch is landed. We have a common goal (smile). &lt;/p&gt;

&lt;p&gt;Deal? &lt;/p&gt;</comment>
                            <comment id="15394004" author="anoop.hbase" created="Tue, 26 Jul 2016 16:04:17 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="15394006" author="stack" created="Tue, 26 Jul 2016 16:05:41 +0000"  >&lt;p&gt;Let me do some more review of the posted patch. I promise not to expand scope (other than as new related JIRAs). May I have a bit of overview of what is in it &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; currently. My latest reviews are messy as I&apos;m bad on context (point at doc if current patch aligns still &amp;#8211; I&apos;m not sure). Thanks.&lt;/p&gt;
</comment>
                            <comment id="15395276" author="anastas" created="Wed, 27 Jul 2016 09:00:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, I attached a presentation explaining current patch flow. I know it doesn&apos;t clarify all that we have in this patch, but this is what I can quickly do for now. I will probably add class diagram and more explanations latter. Will be happy to answer specific question if any. Thank you for taking a look.&lt;/p&gt;</comment>
                            <comment id="15395368" author="anoop.hbase" created="Wed, 27 Jul 2016 10:13:33 +0000"  >&lt;p&gt;Thanks for the ppt.. It is a very clear explanation. (Even though I knew it after reading the code many a times by now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; )&lt;/p&gt;</comment>
                            <comment id="15395371" author="anoop.hbase" created="Wed, 27 Jul 2016 10:15:00 +0000"  >&lt;p&gt;The ppt says in case of flatten, we scan the cells in the segment with out using SQM.  I am +1 for this.  But not sure code wise it happens this way !  Pls check once.. We just need a simple iterator over the CSLM for this flatten. &lt;/p&gt;</comment>
                            <comment id="15395408" author="anoop.hbase" created="Wed, 27 Jul 2016 10:35:28 +0000"  >&lt;p&gt;I read it again. I think it is fine. &lt;br/&gt;
recreateCellArrayMapSet is doing a Segment#getSegementScanner only. Good.&lt;/p&gt;</comment>
                            <comment id="15395713" author="eshcar" created="Wed, 27 Jul 2016 13:54:51 +0000"  >&lt;p&gt;We are trying to reproduce the PE results you reported &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, and we need your help with the following questions:&lt;/p&gt;

&lt;p&gt;1. What is the exact cluster configuration you are running on? Is it a single machine hosting both the master and 1 RS? What is the setting of the underlying HDFS? Again NN and 1 DN on the same machine?&lt;/p&gt;

&lt;p&gt;2. --inmemoryCompaction flag you are using in PE is not in master? Can you open a Jira to share the patch with this supplement so we don&apos;t need to re-implement this or even better commit this code to master.&lt;/p&gt;

&lt;p&gt;3. How much time the experiment is expected to run (approximately)? &lt;/p&gt;

&lt;p&gt;One major drawback of the PE tool is that it does not allow to benchmark concurrent reads and writes.&lt;br/&gt;
Once we are able to test 100% writes and have results for all settings we should also compare the 50%-50% workload. But we can discuss this when we get there.&lt;/p&gt;</comment>
                            <comment id="15395835" author="anastas" created="Wed, 27 Jul 2016 15:21:51 +0000"  >&lt;p&gt;The ppt is meant for those unfamiliar with this patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15395836" author="anastas" created="Wed, 27 Jul 2016 15:22:29 +0000"  >&lt;p&gt;Indeed, no SQM, both in ppt and in the code&lt;/p&gt;</comment>
                            <comment id="15395945" author="ram_krish" created="Wed, 27 Jul 2016 16:32:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;. What is the exact cluster configuration you are running on? Is it a single machine hosting both the master and 1 RS? What is the setting of the underlying HDFS? Again NN and 1 DN on the same machine?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes this is a single node system. 1NN and 1DN all running on same machine.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Xmx - 32G
&amp;lt;property&amp;gt;
  &amp;lt;name&amp;gt;hbase.regionserver.global.memstore.size&amp;lt;/name&amp;gt;
  &amp;lt;value&amp;gt;0.42&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hbase.hregion.memstore.mslab.enabled&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hbase.hregion.memstore.chunkpool.maxsize&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;

&amp;lt;property&amp;gt;
    &amp;lt;name&amp;gt;hbase.hregion.memstore.chunkpool.initialsize&amp;lt;/name&amp;gt;
    &amp;lt;value&amp;gt;0.5&amp;lt;/value&amp;gt;
  &amp;lt;/property&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Do you need any other information?&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;--inmemoryCompaction flag you are using in PE is not in master? Can you open a Jira to share the patch with this supplement so we don&apos;t need to re-implement this or even better commit this code to master.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think this is already in master.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; inMemoryCompaction = &lt;span class=&quot;code-quote&quot;&gt;&quot;--inmemoryCompaction=&quot;&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;&lt;p&gt;How much time the experiment is expected to run (approximately)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It should run for approx 20mins. Because we load 150G of data. &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
./hbase org.apache.hadoop.hbase.PerformanceEvaluation --nomapred --presplit=50 --size=150 --columns=50 --valueSize=200 --writeToWAL=&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; --bloomFilter=NONE --inmemoryCompaction=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;  randomWrite 50
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Thanks for the updates.&lt;/p&gt;</comment>
                            <comment id="15401013" author="anastas" created="Sun, 31 Jul 2016 07:15:39 +0000"  >&lt;p&gt;Hey &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, thank you for your comment explaining the problem with MemStoreCompactorIterator!&lt;br/&gt;
You said that you have the UT exposing the bug. I fixed the problem (at least I think I do), but in order to be sure I would very much like to run your UT.&lt;br/&gt;
Can you please share the UT with me anyhow? I am OK with even copy-pasting the method here.&lt;/p&gt;</comment>
                            <comment id="15401076" author="eshcar" created="Sun, 31 Jul 2016 09:48:51 +0000"  >&lt;p&gt;Questions on PE tests:&lt;br/&gt;
1. you set hbase.regionserver.global.memstore.size to 0.42. Did you also set hfile.block.cache.size to 0.38? or even lower?&lt;br/&gt;
2. which setting did you use for WAL writeToWAL=true/false?&lt;/p&gt;</comment>
                            <comment id="15401099" author="anoop.hbase" created="Sun, 31 Jul 2016 11:03:54 +0000"  >&lt;p&gt;1. Ours is a write only workload.  So BC size not that relevant any way.. Ya it was way lower than 0.38.  Less than 10% I believe&lt;br/&gt;
2. writeToWAL = false&lt;/p&gt;</comment>
                            <comment id="15401503" author="ram_krish" created="Mon, 1 Aug 2016 03:57:52 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt;&lt;br/&gt;
My UT was very simple. I selected the testCompaction1Bucket or any such test case. I just added some keyvalues but ensured that there are 50 cols in each row. &lt;br/&gt;
I called flattening manually and then checked the count of cells in that flattened segment. I think you will get that issue pretty directly. I don&apos;t have that UT now as i reverted my changes. &lt;br/&gt;
Let me know if you still need them I can paste them here. Thank you.&lt;/p&gt;</comment>
                            <comment id="15401825" author="anastas" created="Mon, 1 Aug 2016 10:46:39 +0000"  >&lt;p&gt;If you can please paste them here it would be really great. Thank you very much!!&lt;/p&gt;</comment>
                            <comment id="15402087" author="eshcar" created="Mon, 1 Aug 2016 14:08:15 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, &lt;br/&gt;
Did you use ssd machines for the PE?&lt;br/&gt;
So far when running the suggested setting on an hdd machine I get an insufficient memory error even when running the default memstore, so I suspect this is due to IO bottleneck (flushes are simply too slow).&lt;br/&gt;
Can you share the configuration of the machine you run on?&lt;/p&gt;</comment>
                            <comment id="15403355" author="ram_krish" created="Tue, 2 Aug 2016 05:04:42 +0000"  >&lt;p&gt;Ok. I will paste that UT in some time now. Yesterday was without internet. So could not do it.&lt;/p&gt;</comment>
                            <comment id="15403357" author="ram_krish" created="Tue, 2 Aug 2016 05:06:46 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eshcar&quot; class=&quot;user-hover&quot; rel=&quot;eshcar&quot;&gt;Eshcar Hillel&lt;/a&gt;&lt;br/&gt;
With default memstore impl with MSLAB ON and Chunk pool we were able to run with 32G. But with MSLAB and chunk pool are OFF we need atleast 50G to run with this load and other GC tunings. Because it generates lot of garbage. &lt;br/&gt;
With 32G see if you could run with CompactingMemstore with MSLAB ON and Chunk pool. &lt;/p&gt;</comment>
                            <comment id="15403442" author="ram_krish" created="Tue, 2 Aug 2016 06:18:02 +0000"  >&lt;p&gt;Attaching a simple UT. I have added two test cases. One where we do in memory flush and then do a memstore scan. Here we get the exact count.&lt;br/&gt;
Next is with MemstoreITerator we do a count. (As it is in MemstoreCompactor). Here the count is much lesser and exposes the bug.&lt;br/&gt;
Note that even in the case where we do scan the flushInMemory does a compaction which ideally should have been avoided if the count had worked correctly.&lt;/p&gt;</comment>
                            <comment id="15403444" author="ram_krish" created="Tue, 2 Aug 2016 06:18:37 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; - JFYI.&lt;/p&gt;</comment>
                            <comment id="15403504" author="hadoopqa" created="Tue, 2 Aug 2016 07:00:28 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbaseanti &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not have any anti-patterns. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; @author &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not contain any @author tags. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; test4tests &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch appears to include 1 new or modified test files. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 5m 58s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 26s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 20s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 35s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 22s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 57s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 57s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 59s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 1m 23s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed with JDK v1.8.0. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 1m 23s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed with JDK v1.8.0. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 59s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed with JDK v1.7.0_80. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 59s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed with JDK v1.7.0_80. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 17s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 36s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; whitespace &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch has no whitespace issues. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 1m 58s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; Patch causes 30 errors with Hadoop v2.4.0. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 3m 53s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; Patch causes 30 errors with Hadoop v2.4.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 5m 41s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; Patch causes 30 errors with Hadoop v2.5.0. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 7m 27s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; Patch causes 30 errors with Hadoop v2.5.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 9m 13s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; Patch causes 30 errors with Hadoop v2.5.2. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 11m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; Patch causes 30 errors with Hadoop v2.6.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 12m 48s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; Patch causes 30 errors with Hadoop v2.6.2. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 14m 34s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; Patch causes 30 errors with Hadoop v2.6.3. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 16m 26s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; Patch causes 30 errors with Hadoop v2.7.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 46s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 55s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 59s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_80 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 1m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; asflicense &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 15s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not generate ASF License warnings. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt;&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; 41m 37s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12821517/MemstoreItrCountissue.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12821517/MemstoreItrCountissue.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Optional Tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; uname &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Linux pomona.apache.org 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Build tool &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Personality &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; git revision &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; master / b35cf8f &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Default Java &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1.7.0_80 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Multi-JDK versions &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  /usr/local/jenkins/java/jdk1.8.0:1.8.0 /usr/local/asfpackages/java/jdk1.7.0_80:1.7.0_80 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v3.0.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; mvninstall &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-mvninstall-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-mvninstall-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; compile &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-compile-hbase-server-jdk1.8.0.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-compile-hbase-server-jdk1.8.0.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; javac &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-compile-hbase-server-jdk1.8.0.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-compile-hbase-server-jdk1.8.0.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; compile &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-compile-hbase-server-jdk1.7.0_80.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-compile-hbase-server-jdk1.7.0_80.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; javac &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-compile-hbase-server-jdk1.7.0_80.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-compile-hbase-server-jdk1.7.0_80.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-findbugs-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-findbugs-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Test Results &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/testReport/&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; modules &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; C: hbase-server U: hbase-server &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2884/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.2.1   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15403568" author="anastas" created="Tue, 2 Aug 2016 07:59:39 +0000"  >&lt;p&gt;THANK YOU SO MUCH !!!&lt;/p&gt;</comment>
                            <comment id="15416542" author="ram_krish" created="Thu, 11 Aug 2016 04:39:36 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eshcar&quot; class=&quot;user-hover&quot; rel=&quot;eshcar&quot;&gt;Eshcar Hillel&lt;/a&gt;&lt;br/&gt;
Any updates/feedback here?  &lt;/p&gt;</comment>
                            <comment id="15416904" author="anoop.hbase" created="Thu, 11 Aug 2016 08:59:37 +0000"  >&lt;p&gt;Pls update the RB link with latest patch&lt;/p&gt;</comment>
                            <comment id="15416924" author="anastas" created="Thu, 11 Aug 2016 09:12:13 +0000"  >&lt;p&gt;All done according to your requests &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; , will soon come with a summary about where we stand and what we have &lt;/p&gt;</comment>
                            <comment id="15416941" author="hadoopqa" created="Thu, 11 Aug 2016 09:27:02 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; reexec &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 13s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Docker mode activated. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; @author &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not contain any @author tags. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; test4tests &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch appears to include 7 new or modified test files. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 27s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for branch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 21s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 59s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 8s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 8s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 44s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 2m 47s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 50s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 1s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 12s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for patch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 28s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 12s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 12s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 30s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed with JDK v1.7.0_101. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 30s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed with JDK v1.7.0_101. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 12s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 47s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; rubocop &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 10s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch generated 1 new + 705 unchanged - 1 fixed = 706 total (was 706) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; ruby-lint &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 2s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch generated 5 new + 507 unchanged - 5 fixed = 512 total (was 512) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; whitespace &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch has no whitespace issues. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 1m 4s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch causes 20 errors with Hadoop v2.4.0. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 2m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch causes 20 errors with Hadoop v2.4.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 2m 56s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch causes 20 errors with Hadoop v2.5.0. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 3m 53s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch causes 20 errors with Hadoop v2.5.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 4m 48s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch causes 20 errors with Hadoop v2.5.2. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 5m 46s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch causes 20 errors with Hadoop v2.6.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 6m 44s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch causes 20 errors with Hadoop v2.6.2. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 7m 44s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch causes 20 errors with Hadoop v2.6.3. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 8m 43s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch causes 20 errors with Hadoop v2.7.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbaseprotoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 21s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 21s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 3s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 43s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-common in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 28s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 3m 47s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-shell in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; asflicense &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 26s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not generate ASF License warnings. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt;&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; 38m 9s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Reason &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Tests &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Failed junit tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.client.TestShell &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.client.TestReplicationShell &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.client.rsgroup.TestShellRSGroups &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Docker &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Client=1.11.2 Server=1.11.2 Image:yetus/hbase:date2016-08-11 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12823192/HBASE-14921-V08-CAO.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12823192/HBASE-14921-V08-CAO.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Optional Tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  rubocop  ruby_lint  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; uname &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Linux 9a97a77d700c 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Build tool &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Personality &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; git revision &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; master / fb668a0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Default Java &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1.7.0_101 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Multi-JDK versions &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  /usr/lib/jvm/java-8-oracle:1.8.0_101 /usr/lib/jvm/java-7-openjdk-amd64:1.7.0_101 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v3.0.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; mvninstall &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-mvninstall-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-mvninstall-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; compile &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-compile-hbase-server-jdk1.7.0_101.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-compile-hbase-server-jdk1.7.0_101.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; javac &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-compile-hbase-server-jdk1.7.0_101.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-compile-hbase-server-jdk1.7.0_101.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; rubocop &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v0.42.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; rubocop &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/diff-patch-rubocop.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/diff-patch-rubocop.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; ruby-lint &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v2.3.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; ruby-lint &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/diff-patch-ruby-lint.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/diff-patch-ruby-lint.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hbaseprotoc &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-hbaseprotoc-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-hbaseprotoc-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-findbugs-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-findbugs-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-unit-hbase-shell.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-unit-hbase-shell.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit test logs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-unit-hbase-shell.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/artifact/patchprocess/patch-unit-hbase-shell.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Test Results &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/testReport/&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; modules &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; C: hbase-common hbase-server hbase-shell U: . &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3062/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.3.0   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15416955" author="anastas" created="Thu, 11 Aug 2016 09:50:55 +0000"  >&lt;p&gt;Submitted another patch that fixes some compilation errors, no need to update the review board&lt;/p&gt;</comment>
                            <comment id="15417138" author="anastas" created="Thu, 11 Aug 2016 12:34:59 +0000"  >&lt;p&gt;The current patch includes fixes to all accepted code review comments. Thank you &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; for your comments!!&lt;/p&gt;

&lt;p&gt;The goal of this patch is finalize the implementation reflecting the design published on this Jira. Our intent is to isolate non-critical issues to the following jira&apos;s, before the current code becomes unmanageable &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; The current patch will go thru the normal review cycle, of course. In the future, we&apos;ll be shooting for much smaller jira&apos;s to converge faster.&lt;/p&gt;

&lt;p&gt;Suggested roadmap of taking care about the related issues.&lt;br/&gt;
1. Size arithmetic. I&apos;ll be publishing a design proposal for this issue here and on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16229&quot; title=&quot;Cleaning up size and heapSize calculation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16229&quot;&gt;&lt;del&gt;HBASE-16229&lt;/del&gt;&lt;/a&gt; soon, let&apos;s manage the rest of the discussion there.  There seems to be an elegant solution, which I even have a partial code for. Can post a suggested patch immediately after &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; is committed.&lt;br/&gt;
2. In-memory flattening/compaction policy. The current patch circumvents the &quot;too many open files&quot; with a simple heuristic that prevents too many segments from piling up. However, we realize that this issue might require more discussion, so let&apos;s open a new jira for it.  We can deal with all performance issues and  configuration possibilities there.&lt;br/&gt;
3. And finally, the crown jewel - the CellChunkMap project. Its main value is providing platform for the Off-Heap Memory project. Here too, let us create a new jira, focusing on the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The CellChunkMap implementation itself (already prototyped but not integrated yet)&lt;/li&gt;
	&lt;li&gt;Related design issues (some refactoring of MemStoreChunkPool, MSLAB and HeapMSLAB).&lt;/li&gt;
	&lt;li&gt;Flattening to CellChunkMap (integrating with new &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; code)&lt;/li&gt;
	&lt;li&gt;The Big Cells issue.&lt;br/&gt;
We might need to manage this project as an umbrella jira, to de-clutter the space &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Looking forward to your review comments.&lt;br/&gt;
Thank you!&lt;/p&gt;</comment>
                            <comment id="15417149" author="hadoopqa" created="Thu, 11 Aug 2016 12:43:15 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; reexec &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 19s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Docker mode activated. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; @author &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not contain any @author tags. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; test4tests &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch appears to include 7 new or modified test files. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 3m 20s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for branch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 8m 2s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 58s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 4s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 27s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 16s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 2m 38s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 56s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 58s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 11s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for patch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 16s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 53s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 53s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 5s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 5s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 2s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 42s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; rubocop &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 8s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch generated 1 new + 705 unchanged - 1 fixed = 706 total (was 706) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; ruby-lint &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 3s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch generated 5 new + 507 unchanged - 5 fixed = 512 total (was 512) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; whitespace &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch has no whitespace issues. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 27m 28s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbaseprotoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 36s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 3s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 46s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 58s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 40s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-common in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 94m 58s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-server in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 6m 41s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-shell in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; asflicense &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 49s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not generate ASF License warnings. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt;&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; 164m 13s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Docker &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Client=1.11.2 Server=1.11.2 Image:yetus/hbase:date2016-08-11 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12823201/HBASE-14921-V09-CAO.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12823201/HBASE-14921-V09-CAO.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Optional Tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  rubocop  ruby_lint  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; uname &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Linux 3beb4f6d89ca 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Build tool &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Personality &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; git revision &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; master / fb668a0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Default Java &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1.7.0_101 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Multi-JDK versions &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  /usr/lib/jvm/java-8-oracle:1.8.0_101 /usr/lib/jvm/java-7-openjdk-amd64:1.7.0_101 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v3.0.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; rubocop &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v0.42.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; rubocop &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3065/artifact/patchprocess/diff-patch-rubocop.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3065/artifact/patchprocess/diff-patch-rubocop.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; ruby-lint &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v2.3.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; ruby-lint &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3065/artifact/patchprocess/diff-patch-ruby-lint.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3065/artifact/patchprocess/diff-patch-ruby-lint.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Test Results &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3065/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3065/testReport/&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; modules &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; C: hbase-common hbase-server hbase-shell U: . &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3065/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3065/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.3.0   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15418386" author="ram_krish" created="Fri, 12 Aug 2016 05:35:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;1. Size arithmetic. I&apos;ll be publishing a design proposal for this issue here and on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16229&quot; title=&quot;Cleaning up size and heapSize calculation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16229&quot;&gt;&lt;del&gt;HBASE-16229&lt;/del&gt;&lt;/a&gt; soon, let&apos;s manage the rest of the discussion there. There seems to be an elegant solution, which I even have a partial code for. Can post a suggested patch immediately after &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; is committed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. We are infact waiting for gettig in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16229&quot; title=&quot;Cleaning up size and heapSize calculation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16229&quot;&gt;&lt;del&gt;HBASE-16229&lt;/del&gt;&lt;/a&gt; after this JIRA is done. Size arithmetic is important for us for the offheap accounting also.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The current patch circumvents the &quot;too many open files&quot; with a simple heuristic that prevents too many segments from piling up. However, we realize that this issue might require more discussion, so let&apos;s open a new jira for it. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Makes sense. So were you able to observe the problems that we highlighted in the previous discussions - We got two problems one is the invalid negative size for memstore and the &apos;Too many open files&apos;?&lt;br/&gt;
Were you able to get this patch running with the PE tool and the configs that we had updated in the earlier discussions?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;And finally, the crown jewel - the CellChunkMap project. Its main value is providing platform for the Off-Heap Memory project. Here too, let us create a new jira, focusing on the following:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. Once you can get the CellChunkMap code into it - we can help you with the new type of Cell to avoid chunk copying and the MSLAB chunk creation related code which we have maintained internally.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The Big Cells issue.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 to address this. Need to see what best can be done here. May be discuss what we call as a BigCell. &lt;/p&gt;</comment>
                            <comment id="15420309" author="anastas" created="Sun, 14 Aug 2016 12:03:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;Makes sense. So were you able to observe the problems that we highlighted in the previous discussions - We got two problems one is the invalid negative size for memstore and the &apos;Too many open files&apos;?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Were you able to get this patch running with the PE tool and the configs that we had updated in the earlier discussions?&lt;/p&gt;

&lt;p&gt;We are yet unable to use the PE tool. Even on DefaultMemStore it doesn&apos;t work properly. We are currently running with YCSB, stressing the writes. We didn&apos;t get the exceptions that you mentioned, neither &quot;negative size&quot; nor &quot;too many open files&quot;.&lt;br/&gt;
However, we were able to see the problem of &quot;too many open files&quot; without getting the exception. From here, the quick fix of limiting the number of segments in the pipeline. This to be managed by a proper policy later. &lt;/p&gt;

&lt;p&gt;Later today I am going to publish the patch where we have instrumentation measuring the time it takes to do the speculative scan. Will you be able to give it a run on your PE tool? You can by the way take a look if you are still seeing the &quot;negative size&quot; exception. This one (if still exists) can later be investigated while dealing with the sizes issues.&lt;/p&gt;</comment>
                            <comment id="15420787" author="anastas" created="Mon, 15 Aug 2016 09:36:09 +0000"  >&lt;p&gt;Hi Guys!&lt;/p&gt;

&lt;p&gt;I have published the patch that measures how long it takes to do the speculative scan. It appears we can not run PE and we try to evaluate using YCSB. On YCSB we see no performance impact due to the compaction-evaluation scan. The scan per store takes in average 280 milliseconds and happens in average every 3.5 minutes.  Can you please run this patch with your PE and tell us what you see?&lt;/p&gt;</comment>
                            <comment id="15420825" author="anastas" created="Mon, 15 Aug 2016 10:30:52 +0000"  >&lt;p&gt;I created &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16417&quot; title=&quot;In-Memory MemStore Policy for Flattening and Compactions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16417&quot;&gt;HBASE-16417&lt;/a&gt; to follow this JIRA and to deal with all the policy issues, meaning whether to flat/compact/merge the compaction pipeline scans and how to decide about that. Please move all the discussion about that to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16417&quot; title=&quot;In-Memory MemStore Policy for Flattening and Compactions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16417&quot;&gt;HBASE-16417&lt;/a&gt;. Thanks!&lt;/p&gt;</comment>
                            <comment id="15420875" author="ebortnik" created="Mon, 15 Aug 2016 11:57:04 +0000"  >&lt;p&gt;Indeed let&apos;s defer this discussion to the new JIRA. Not sure we have a good definition of admissible overhead for speculative scan, but it&apos;s good to be talking around numbers. &lt;/p&gt;

&lt;p&gt;With this JIRA, it is our strong preference to commit ASAP (maybe this week?) unless there is some insurmountable problem. We&apos;ll be posting a new patch soon - please weigh in on the RB!&lt;/p&gt;</comment>
                            <comment id="15422361" author="ram_krish" created="Tue, 16 Aug 2016 07:48:31 +0000"  >&lt;p&gt;May be I can apply the patch and test with current trunk and see if the negtive size still persists. &lt;br/&gt;
For defaultMemstore also with the PE tool config that we specified you may not be able to run with 32G and you may need 50G atleast I think. Anyway that is fine. We need not spend time there now I believe. LEts focus on getting this in. &lt;br/&gt;
I can do the testing and report back by EOD tomorrow my time. Today quite busy with some other things.&lt;/p&gt;</comment>
                            <comment id="15422571" author="anastas" created="Tue, 16 Aug 2016 10:37:32 +0000"  >&lt;p&gt;This would be amazing, if we could get this in ASAP and continue to next level &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I have published the last V11 patch (I hope) it is ready to be committed. The patch includes small review fixes that I got so far.&lt;br/&gt;
It is also on the RB. &lt;/p&gt;</comment>
                            <comment id="15422577" author="anastas" created="Tue, 16 Aug 2016 10:43:10 +0000"  >&lt;p&gt;I created &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16421&quot; title=&quot;Introducing the CellChunkMap as a new additional index variant in the MemStore&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16421&quot;&gt;HBASE-16421&lt;/a&gt; to continue with the CellChunkMap there.&lt;/p&gt;

&lt;p&gt;Pay attention, both JIRAs numbers end with 21! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Is it a good sign?&lt;/p&gt;</comment>
                            <comment id="15424241" author="ram_krish" created="Wed, 17 Aug 2016 10:03:00 +0000"  >&lt;p&gt;I did a test with the latest patch - V10 version.&lt;/p&gt;

&lt;p&gt;With 40G heap space and the below PE configs,&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 ./hbase org.apache.hadoop.hbase.PerformanceEvaluation --nomapred --presplit=50 --size=150 --columns=50 --valueSize=200 --writeToWAL=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt; --bloomFilter=NONE --inmemoryCompaction=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;/&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;  randomWrite 50
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt; Am still not able to run with InMemoryCompaction enabled and we get a FullGC. With default memstore am able to run.&lt;br/&gt;
Good news is that in that 2 min that the sytem ran there was no negative flush size happening. So it may be we are good here.&lt;/p&gt;

&lt;p&gt;The reason should be because, &lt;br/&gt;
From the code I think though flattening is enabled, we see if the number of segments is &amp;gt; 3 and so we do compaction. I think it goes under that logic. Speculative scan is default false.&lt;br/&gt;
Since compaction is happening I think we have duplicated segments till the new one is updated in the pipeline. This is what I was saying in the last test also. &lt;br/&gt;
You said you were able to run with YCSB. With YCSB what were the number of cols and the data size?&lt;br/&gt;
As said I won&apos;t block the check in - we need to identify the reason for the Full GC and add some policy or do the all segment flush thing that we had done based on the policy. Lets discuss that in other JIRA.&lt;/p&gt;
</comment>
                            <comment id="15424310" author="anoop.hbase" created="Wed, 17 Aug 2016 11:16:14 +0000"  >&lt;p&gt;Ya for YCSB test, what is the load? per row size and total data size? How many client threads? What is the RS heap size?   G1GC? conf?&lt;/p&gt;</comment>
                            <comment id="15424523" author="anastas" created="Wed, 17 Aug 2016 13:38:04 +0000"  >&lt;p&gt;Hey,&lt;/p&gt;

&lt;p&gt;Thank for taking the look! &lt;br/&gt;
The recent patch is V11. I don&apos;t know why QA didn&apos;t work for the last patch. Now I have added the same patch once again, hoping this time the QA will be triggered.&lt;/p&gt;

&lt;p&gt;Can we please move all performance discussions to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16417&quot; title=&quot;In-Memory MemStore Policy for Flattening and Compactions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16417&quot;&gt;HBASE-16417&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="15424540" author="ebortnik" created="Wed, 17 Aug 2016 13:45:27 +0000"  >&lt;p&gt;Hate to be pushy - but next week we might be short of resources to work on this patch. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, mind making a (final) pass on RB and go for commit if all is clean? &lt;/p&gt;

&lt;p&gt;That would be a huge relief.  We&apos;ll strive to make the future jiras more manageable. &lt;/p&gt;</comment>
                            <comment id="15424793" author="hadoopqa" created="Wed, 17 Aug 2016 16:02:00 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; reexec &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 13s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Docker mode activated. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; @author &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not contain any @author tags. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; test4tests &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch appears to include 7 new or modified test files. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 27s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for branch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 9s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 57s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 7s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 6s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 43s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 2m 42s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 48s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 11s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for patch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 19s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 55s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 55s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 6s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 6s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 7s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 42s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; rubocop &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 9s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch generated 1 new + 705 unchanged - 1 fixed = 706 total (was 706) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; ruby-lint &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 2s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch generated 5 new + 507 unchanged - 5 fixed = 512 total (was 512) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; whitespace &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch has no whitespace issues. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 27m 25s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbaseprotoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 38s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 7s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 47s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 42s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-common in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 92m 29s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; hbase-server in the patch failed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 6m 55s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-shell in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; asflicense &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 49s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not generate ASF License warnings. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt;&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; 153m 29s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Reason &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Tests &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Failed junit tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; hadoop.hbase.master.procedure.TestDispatchMergingRegionsProcedure &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Docker &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Client=1.11.2 Server=1.11.2 Image:yetus/hbase:date2016-08-17 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12824135/HBASE-14921-V11-CAO.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12824135/HBASE-14921-V11-CAO.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Optional Tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  rubocop  ruby_lint  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; uname &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Linux dc6e2eb43ebd 3.13.0-36-lowlatency #63-Ubuntu SMP PREEMPT Wed Sep 3 21:56:12 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Build tool &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Personality &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/component/dev-support/hbase-personality.sh &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; git revision &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; master / d5080e8 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Default Java &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1.7.0_101 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Multi-JDK versions &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  /usr/lib/jvm/java-8-oracle:1.8.0_101 /usr/lib/jvm/java-7-openjdk-amd64:1.7.0_101 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v3.0.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; rubocop &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v0.42.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; rubocop &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/artifact/patchprocess/diff-patch-rubocop.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/artifact/patchprocess/diff-patch-rubocop.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; ruby-lint &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v2.3.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; ruby-lint &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/artifact/patchprocess/diff-patch-ruby-lint.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/artifact/patchprocess/diff-patch-ruby-lint.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; unit test logs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/artifact/patchprocess/patch-unit-hbase-server.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/artifact/patchprocess/patch-unit-hbase-server.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Test Results &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/testReport/&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; modules &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; C: hbase-common hbase-server hbase-shell U: . &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3129/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.3.0   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15424799" author="ram_krish" created="Wed, 17 Aug 2016 16:03:13 +0000"  >&lt;p&gt;As I said I won&apos;t block the commit here. You can just let us know about the YCSB param that you had tested. If @anoop.hbase and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; are fine then no problem with me too. &lt;/p&gt;</comment>
                            <comment id="15424881" author="lhofhansl" created="Wed, 17 Aug 2016 16:49:09 +0000"  >&lt;p&gt;MSLAB forces another copy of the data backing each Cell coming in, consuming memory bandwidth. With G1GC that does not appear to be necessary, since G1 manages small&apos;ish memory regions anyway.&lt;/p&gt;

&lt;p&gt;I will repeat what I always say: Let&apos;s not try to be smarter than the garbage collector. Chances are we&apos;re not &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15424938" author="anoop.hbase" created="Wed, 17 Aug 2016 17:16:05 +0000"  >&lt;p&gt;What we observed in our tests with G1GC is that the MSLAB pool is not behaving worse.  And in off heap write path, our idea is to have an MSLAB with off heap backing and here we would need pool any way.&lt;/p&gt;</comment>
                            <comment id="15426640" author="anastas" created="Thu, 18 Aug 2016 15:26:27 +0000"  >&lt;p&gt;Published yet another patch with recent code review comments.&lt;/p&gt;</comment>
                            <comment id="15426647" author="ebortnik" created="Thu, 18 Aug 2016 15:32:12 +0000"  >&lt;p&gt;Agree with Anoop - the CellChunkMap implementation is targeted mainly for the off-heap path. It is tracked in jira HBase-16421, and is unrelated to the this jira and the candidate patch (smile). &lt;/p&gt;</comment>
                            <comment id="15426934" author="hadoopqa" created="Thu, 18 Aug 2016 18:10:05 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; reexec &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 15s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Docker mode activated. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; @author &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not contain any @author tags. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; test4tests &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch appears to include 7 new or modified test files. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 12s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for branch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 20s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 17s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 12s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 56s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 3s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 50s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 3s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; master passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt;0&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; mvndep &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; 0m 12s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;blue&quot;&gt; Maven dependency ordering for patch &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvninstall &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 23s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; compile &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 10s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javac &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 10s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; checkstyle &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 9s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; mvneclipse &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 47s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; rubocop &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 11s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch generated 5 new + 703 unchanged - 3 fixed = 708 total (was 706) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; ruby-lint &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 4s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; The patch generated 5 new + 507 unchanged - 5 fixed = 512 total (was 512) &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; whitespace &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 0s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch has no whitespace issues. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hadoopcheck &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 30m 28s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; Patch does not cause any errors with Hadoop 2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.1 2.6.2 2.6.3 2.7.1. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbaseprotoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 40s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; findbugs &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 3m 32s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 52s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.8.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; javadoc &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 5s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; the patch passed with JDK v1.7.0_101 &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 1m 49s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-common in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 95m 20s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-server in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; unit &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 6m 46s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; hbase-shell in the patch passed. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; asflicense &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; 0m 45s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;green&quot;&gt; The patch does not generate ASF License warnings. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt;&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; 161m 14s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;black&quot;&gt; &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Docker &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Client=1.11.2 Server=1.11.2 Image:yetus/hbase:date2016-08-18 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12824388/HBASE-14921-V12-CAO.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12824388/HBASE-14921-V12-CAO.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Optional Tests &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  asflicense  javac  javadoc  unit  findbugs  hadoopcheck  hbaseanti  checkstyle  compile  rubocop  ruby_lint  &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; uname &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Linux 34e871c6a346 3.13.0-92-generic #139-Ubuntu SMP Tue Jun 28 20:42:26 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Build tool &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; maven &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Personality &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build@2/component/dev-support/hbase-personality.sh &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; git revision &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; master / 642d2fe &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Default Java &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; 1.7.0_101 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Multi-JDK versions &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  /usr/lib/jvm/java-8-oracle:1.8.0_101 /usr/lib/jvm/java-7-openjdk-amd64:1.7.0_101 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; findbugs &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v3.0.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; rubocop &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v0.42.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; rubocop &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3147/artifact/patchprocess/diff-patch-rubocop.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3147/artifact/patchprocess/diff-patch-rubocop.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; ruby-lint &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; v2.3.0 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; ruby-lint &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3147/artifact/patchprocess/diff-patch-ruby-lint.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3147/artifact/patchprocess/diff-patch-ruby-lint.txt&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Test Results &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3147/testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3147/testReport/&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; modules &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; C: hbase-common hbase-server hbase-shell U: . &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3147/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3147/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.3.0   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                            <comment id="15430237" author="anoop.hbase" created="Mon, 22 Aug 2016 07:21:54 +0000"  >&lt;p&gt;Only very few minor comments left for this over in RB I believe.  Can u make a latest patch ASAP pls..  We can target to get this in this week. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15430659" author="anastas" created="Mon, 22 Aug 2016 12:29:16 +0000"  >&lt;p&gt;To get this in, this week, would be just awesome!!!&lt;/p&gt;

&lt;p&gt;I have targeted (fixed or answered) just all the comments in Review Board.&lt;br/&gt;
Everything is already in the latest patch which is V12.&lt;br/&gt;
When I am looking on RB, I do not see anything new there, which wasn&apos;t targeted in V12.&lt;br/&gt;
If I miss something, please reopen the issue on RB or write it here.&lt;/p&gt;

&lt;p&gt;Tonight I am flying to a conference in Europe and I am not going to be highly responsive till next Monday.&lt;br/&gt;
However, I am going to take a look from time to time.&lt;br/&gt;
I hope you have everything to take it in. If you see something small that disturbs you, feel free to fix it yourself, in order not to delay the commit.&lt;/p&gt;

&lt;p&gt;Thank you all very very much!&lt;br/&gt;
Anastasia&lt;/p&gt;
</comment>
                            <comment id="15431204" author="devaraj" created="Mon, 22 Aug 2016 17:06:55 +0000"  >&lt;p&gt;Great work, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt;. I&apos;d like to know whether you ran ITBLL and such other &quot;correctness&quot; benchmarks using these family of patches. Given the magnitude of the changes, I was thinking we should get some runs of ITBLL on these. Pardon me if you have already covered that aspect earlier.&lt;/p&gt;</comment>
                            <comment id="15431348" author="ebortnik" created="Mon, 22 Aug 2016 18:18:48 +0000"  >&lt;p&gt;Thanks for suggesting, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=devaraj&quot; class=&quot;user-hover&quot; rel=&quot;devaraj&quot;&gt;Devaraj Das&lt;/a&gt;. We are actually not aware of ITBLL. We&apos;re generating high loads with YCSB already, but it&apos;s always good to have one more test. Is there any &quot;golden standard&quot; for ITBLL benchmark?  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; - do you have experience with this tool? Can help? Thanks!&lt;/p&gt;</comment>
                            <comment id="15431686" author="devaraj" created="Mon, 22 Aug 2016 22:00:39 +0000"  >&lt;p&gt;I am trying to get hold of a rig for running itbll. But that might take some time, and if others feel comfortable getting this patch in, it&apos;s fine with me. &lt;/p&gt;</comment>
                            <comment id="15432100" author="anoop.hbase" created="Tue, 23 Aug 2016 03:59:14 +0000"  >&lt;p&gt;These patches as such do not touch the existing memstore and write/flush path much.   On the new type of memstore and flush from there, ya we can do the ITBLL tests.  Can be done later also NP.&lt;/p&gt;</comment>
                            <comment id="15432102" author="anoop.hbase" created="Tue, 23 Aug 2016 04:00:37 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; You good with latest patch?  Will see once. Any minor comments can fix and major we can add TODO for doing in followup issues.  I can do that and get it committed.  Thanks for the great work &lt;/p&gt;</comment>
                            <comment id="15432202" author="ram_krish" created="Tue, 23 Aug 2016 06:07:49 +0000"  >&lt;p&gt;+1 to commit.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=devaraj&quot; class=&quot;user-hover&quot; rel=&quot;devaraj&quot;&gt;Devaraj Das&lt;/a&gt;&lt;br/&gt;
I think it is ok to commit it. We should add an ITBLL test case that runs with the new memstore impl. I think that is part of a follow up JIRA. Thanks you.&lt;/p&gt;</comment>
                            <comment id="15432618" author="anoop.hbase" created="Tue, 23 Aug 2016 11:02:18 +0000"  >&lt;p&gt;Will commit tonight my time unless obejctions.&lt;/p&gt;</comment>
                            <comment id="15434145" author="anoop.hbase" created="Wed, 24 Aug 2016 03:56:37 +0000"  >&lt;p&gt;Pushed to master.  Thanks for the great work and perseverance Anastasia.&lt;br/&gt;
Thanks all for the reviews and discussions around here. &lt;/p&gt;</comment>
                            <comment id="15434220" author="ebortnik" created="Wed, 24 Aug 2016 05:57:07 +0000"  >&lt;p&gt;Fantastic. Thanks, all, for helping out. Let&apos;s move on with the next jiras and make the whole thing happen. &lt;/p&gt;</comment>
                            <comment id="15434222" author="stack" created="Wed, 24 Aug 2016 05:59:20 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; I&apos;ve not reviewed yet. Will raise new issues if issues. Thanks for commit (and thanks for the work &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15434264" author="hudson" created="Wed, 24 Aug 2016 06:33:05 +0000"  >&lt;p&gt;FAILURE: Integrated in Jenkins build HBase-Trunk_matrix #1471 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-Trunk_matrix/1471/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-Trunk_matrix/1471/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt; In-Memory MemStore Flush and Compaction : Memory (anoopsamjohn: rev 32c21f45942f9f45e34b28df47180fe6498fc337)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;(edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestWalAndCompactingMemStoreFlush.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactingMemStore.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ImmutableSegment.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SegmentScanner.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingMemStore.java&lt;/li&gt;
	&lt;li&gt;(add) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCellFlatSet.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreScanner.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SegmentFactory.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-shell/src/main/ruby/hbase/admin.rb&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Segment.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultMemStore.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/test/java/org/apache/hadoop/hbase/io/TestHeapSize.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactionPipeline.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/VersionedSegmentsList.java&lt;/li&gt;
	&lt;li&gt;(add) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CellArrayMap.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegionWithInMemoryFlush.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreCompactor.java&lt;/li&gt;
	&lt;li&gt;(add) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreCompactorIterator.java&lt;/li&gt;
	&lt;li&gt;(add) hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompactingToCellArrayMapMemStore.java&lt;/li&gt;
	&lt;li&gt;(add) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CellFlatMap.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MutableSegment.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-common/src/main/java/org/apache/hadoop/hbase/util/ClassSize.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/AbstractMemStore.java&lt;/li&gt;
	&lt;li&gt;(edit) hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CellSet.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15443088" author="anastas" created="Sun, 28 Aug 2016 08:54:39 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu&quot; class=&quot;user-hover&quot; rel=&quot;tedyu&quot;&gt;Ted Yu&lt;/a&gt;, please find my very belated, but very sincere THANK YOU! &lt;/p&gt;

&lt;p&gt;Looking forward to continue working with you all on the next issues!! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15609436" author="stack" created="Wed, 26 Oct 2016 19:32:46 +0000"  >&lt;p&gt;For anyone trying to read along later, the CellBlockSerialized is in the second patch posted above only: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt;-V02.patch&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12952284">HBASE-15513</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="13005485">HBASE-16645</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12790382" name="CellBlocksSegmentInMemStore.pdf" size="254785" author="anastas" created="Sun, 28 Feb 2016 22:57:35 +0000"/>
                            <attachment id="12792492" name="CellBlocksSegmentinthecontextofMemStore(1).pdf" size="295352" author="anastas" created="Thu, 10 Mar 2016 11:02:49 +0000"/>
                            <attachment id="12794488" name="HBASE-14921-V01.patch" size="36409" author="anastas" created="Mon, 21 Mar 2016 09:13:23 +0000"/>
                            <attachment id="12794742" name="HBASE-14921-V02.patch" size="36670" author="anastas" created="Tue, 22 Mar 2016 11:26:13 +0000"/>
                            <attachment id="12798726" name="HBASE-14921-V03.patch" size="108867" author="anastas" created="Thu, 14 Apr 2016 12:48:39 +0000"/>
                            <attachment id="12816025" name="HBASE-14921-V04-CA-V02.patch" size="112670" author="anastas" created="Mon, 4 Jul 2016 11:43:06 +0000"/>
                            <attachment id="12810860" name="HBASE-14921-V04-CA.patch" size="98791" author="anastas" created="Wed, 15 Jun 2016 14:36:54 +0000"/>
                            <attachment id="12816035" name="HBASE-14921-V05-CAO.patch" size="112651" author="anastas" created="Mon, 4 Jul 2016 12:26:38 +0000"/>
                            <attachment id="12819195" name="HBASE-14921-V06-CAO.patch" size="113332" author="anastas" created="Wed, 20 Jul 2016 21:07:16 +0000"/>
                            <attachment id="12823192" name="HBASE-14921-V08-CAO.patch" size="141524" author="anastas" created="Thu, 11 Aug 2016 08:46:23 +0000"/>
                            <attachment id="12823201" name="HBASE-14921-V09-CAO.patch" size="141182" author="anastas" created="Thu, 11 Aug 2016 09:50:00 +0000"/>
                            <attachment id="12823662" name="HBASE-14921-V10-CAO.patch" size="143343" author="anastas" created="Mon, 15 Aug 2016 09:18:30 +0000"/>
                            <attachment id="12824135" name="HBASE-14921-V11-CAO.patch" size="142774" author="anastas" created="Wed, 17 Aug 2016 13:24:18 +0000"/>
                            <attachment id="12823867" name="HBASE-14921-V11-CAO.patch" size="142774" author="anastas" created="Tue, 16 Aug 2016 10:30:21 +0000"/>
                            <attachment id="12824388" name="HBASE-14921-V12-CAO.patch" size="142258" author="anastas" created="Thu, 18 Aug 2016 15:25:50 +0000"/>
                            <attachment id="12811704" name="InitialCellArrayMapEvaluation.pdf" size="135212" author="anastas" created="Sun, 19 Jun 2016 11:42:04 +0000"/>
                            <attachment id="12798727" name="IntroductiontoNewFlatandCompactMemStore.pdf" size="188964" author="anastas" created="Thu, 14 Apr 2016 12:48:39 +0000"/>
                            <attachment id="12823230" name="MemStoreSizes.pdf" size="141589" author="anastas" created="Thu, 11 Aug 2016 12:57:56 +0000"/>
                            <attachment id="12821517" name="MemstoreItrCountissue.patch" size="2986" author="ram_krish" created="Tue, 2 Aug 2016 06:18:02 +0000"/>
                            <attachment id="12820397" name="NewCompactingMemStoreFlow.pptx" size="82114" author="anastas" created="Wed, 27 Jul 2016 08:57:21 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>20.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 25 Feb 2016 15:56:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2p8fz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>A long, working issue that discussed Segment formats introducing CellArrayMap (delivered as the patch attached to this issue) and CellChunkMap (to be delivered later in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16421&quot; title=&quot;Introducing the CellChunkMap as a new additional index variant in the MemStore&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16421&quot;&gt;HBASE-16421&lt;/a&gt; but see patch v02 for an embryonic form named CellBlockSerialized); when to copy Segment data (and when not too); and then what to include at flush time (the suffix Segment or all Segments). Designs that evolved as discussion went on are attached. Outstanding issues turned up here, not including a CellChunkMap implementation, are listed below but are to be addressed in follow-ons (See &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16417&quot; title=&quot;In-Memory MemStore Policy for Flattening and Compactions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16417&quot;&gt;HBASE-16417&lt;/a&gt;):&lt;br/&gt;
&lt;br/&gt;
1. The flattening without compaction is causing many small segments in pipeline, and they are not flushed all together.&lt;br/&gt;
2. The issue of compaction prediction cost.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>