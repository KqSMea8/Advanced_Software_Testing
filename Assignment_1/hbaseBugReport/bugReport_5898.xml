<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:31:57 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-5898/HBASE-5898.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-5898] Consider double-checked locking for block cache lock</title>
                <link>https://issues.apache.org/jira/browse/HBASE-5898</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Running a workload with a high query rate against a dataset that fits in cache, I saw a lot of CPU being used in IdLock.getLockEntry, being called by HFileReaderV2.readBlock. Even though it was all cache hits, it was wasting a lot of CPU doing lock management here. I wrote a quick patch to switch to a double-checked locking and it improved throughput substantially for this workload.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12553264">HBASE-5898</key>
            <summary>Consider double-checked locking for block cache lock</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tlipcon">Todd Lipcon</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Sun, 29 Apr 2012 03:13:53 +0000</created>
                <updated>Tue, 26 Feb 2013 08:21:00 +0000</updated>
                            <resolved>Tue, 13 Nov 2012 06:55:15 +0000</resolved>
                                    <version>0.94.1</version>
                                    <fixVersion>0.94.3</fixVersion>
                    <fixVersion>0.95.0</fixVersion>
                                    <component>Performance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>18</watches>
                                                                <comments>
                            <comment id="13264455" author="tlipcon" created="Sun, 29 Apr 2012 03:15:24 +0000"  >&lt;p&gt;Here&apos;s a patch which implements the double checked locking. The first attempt to look up the value does so without locking it. If it fails, then it tries to acquire the lock, and checks again. If the re-check fails, then it actually goes to disk. Assuming that going to disk is slow, the extra check of cache should be inconsequential, but this made a big difference in throughput of a read-only in-cache workload.&lt;/p&gt;</comment>
                            <comment id="13264456" author="zhihyu@ebaysf.com" created="Sun, 29 Apr 2012 03:38:54 +0000"  >&lt;p&gt;Interesting idea.&lt;br/&gt;
Minor comments:&lt;br/&gt;
The indentation for while (true) loop is off.&lt;br/&gt;
Changes to conf/hbase-site.xml belong to another JIRA.&lt;/p&gt;</comment>
                            <comment id="13264468" author="tlipcon" created="Sun, 29 Apr 2012 04:02:03 +0000"  >&lt;p&gt;this isn&apos;t meant to be a final patch - I&apos;m just proposing the idea and put the patch up to illustrate what I meant. It needs more benchmarking in realistic scenarios to know if it&apos;s generally a good idea or not&lt;/p&gt;</comment>
                            <comment id="13264470" author="zhihyu@ebaysf.com" created="Sun, 29 Apr 2012 04:17:22 +0000"  >&lt;p&gt;Consider the case where off heap cache is enabled.&lt;br/&gt;
From DoubleBlockCache:&lt;br/&gt;
Suppose getBlock() is executed without the lock (first pass in the new loop of readBlock) and doesn&apos;t find cacheKey from onHeapCache but finds it in offHeapCache - it will call onHeapCache.cacheBlock():&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Cacheable getBlock(BlockCacheKey cacheKey, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; caching) {
    Cacheable cachedBlock;

    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((cachedBlock = onHeapCache.getBlock(cacheKey, caching)) != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      stats.hit(caching);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; cachedBlock;

    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((cachedBlock = offHeapCache.getBlock(cacheKey, caching)) != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (caching) {
        onHeapCache.cacheBlock(cacheKey, cachedBlock);
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Another thread calls cacheBlock() around the same time and executes onHeapCache.cacheBlock() for the same cacheKey:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void cacheBlock(BlockCacheKey cacheKey, Cacheable buf) {
    onHeapCache.cacheBlock(cacheKey, buf);
    offHeapCache.cacheBlock(cacheKey, buf);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I think there is a race condition which didn&apos;t exist before the proposed change: the entries for the same cacheKey in onHeapCache and offHeapCache would diverge.&lt;/p&gt;

&lt;p&gt;If off heap cache is disabled, I don&apos;t see problem with proposed optimization.&lt;/p&gt;</comment>
                            <comment id="13266031" author="zhihyu@ebaysf.com" created="Tue, 1 May 2012 20:19:48 +0000"  >&lt;p&gt;Some changes to TestBlocksRead are needed to make it pass.&lt;/p&gt;

&lt;p&gt;See if the increase in blocks read is acceptable.&lt;/p&gt;</comment>
                            <comment id="13266045" author="jdcryans" created="Tue, 1 May 2012 20:30:23 +0000"  >&lt;p&gt;Once this is fixed I think we can close &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5000&quot; title=&quot;Speed up simultaneous reads of a block when block caching is turned off&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5000&quot;&gt;&lt;del&gt;HBASE-5000&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13266054" author="tlipcon" created="Tue, 1 May 2012 20:36:06 +0000"  >&lt;p&gt;Really? I don&apos;t think this solves the same problem as &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5000&quot; title=&quot;Speed up simultaneous reads of a block when block caching is turned off&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5000&quot;&gt;&lt;del&gt;HBASE-5000&lt;/del&gt;&lt;/a&gt;. This addresses the case where there&apos;s a really high cache hit ratio, whereas that one addresses the case where there&apos;s a 0% cache hit ratio.&lt;/p&gt;</comment>
                            <comment id="13266059" author="stack" created="Tue, 1 May 2012 20:38:27 +0000"  >&lt;p&gt;@Todd Double-checked locking should &quot;...should usually be avoided.&quot; &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;Looking at block cache, it looks like a block should be fully initialized before its added to the cache so we should avoid the horror stories detailed in the article.&lt;/p&gt;

&lt;p&gt;Let me try take it for a run...&lt;/p&gt;

&lt;p&gt;1. &lt;a href=&quot;http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/Double-checked_locking#Usage_in_Java&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13266064" author="tlipcon" created="Tue, 1 May 2012 20:41:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;@Todd Double-checked locking should &quot;...should usually be avoided.&quot; &lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am above the law, Stack, didn&apos;t you know that? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Seriously, though, I think the use of the idiom here is safe.&lt;/p&gt;</comment>
                            <comment id="13266076" author="stack" created="Tue, 1 May 2012 20:47:29 +0000"  >&lt;p&gt;Marking this critical.  Seems like small change w/ big win.  All that is missing is a bit of exercise while under heavy read load.&lt;/p&gt;</comment>
                            <comment id="13266077" author="stack" created="Tue, 1 May 2012 20:48:27 +0000"  >&lt;p&gt;Assigning Todd.&lt;/p&gt;</comment>
                            <comment id="13266090" author="tlipcon" created="Tue, 1 May 2012 20:57:50 +0000"  >&lt;p&gt;The downside is that for a workload with a lower cache hit ratio, we&apos;ll ask the cache twice for every cache miss instead of just once. So we should see what the performance difference is for something like a 10MB cache with 1GB dataset, where the dataset fits in the OS buffer cache.&lt;/p&gt;</comment>
                            <comment id="13266101" author="stack" created="Tue, 1 May 2012 21:05:31 +0000"  >&lt;p&gt;Thanks for the prescription Todd.&lt;/p&gt;</comment>
                            <comment id="13266123" author="jdcryans" created="Tue, 1 May 2012 21:26:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;This addresses the case where there&apos;s a really high cache hit ratio, whereas that one addresses the case where there&apos;s a 0% cache hit ratio.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Now that I actually read the patch I see how I was wrong, sorry for the noise.&lt;/p&gt;</comment>
                            <comment id="13266149" author="jdcryans" created="Tue, 1 May 2012 21:43:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;The downside is that for a workload with a lower cache hit ratio, we&apos;ll ask the cache twice for every cache miss instead of just once.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Won&apos;t this also skew the cache stats themselves?&lt;/p&gt;</comment>
                            <comment id="13266665" author="stack" created="Wed, 2 May 2012 16:11:30 +0000"  >&lt;p&gt;j-d Can you run your blockcache cache checker against this?   That&apos;d probably be the best way of figuring if there a problem here (do you have a verify you got the right block; i.e. do a read from the block?)&lt;/p&gt;</comment>
                            <comment id="13267005" author="jdcryans" created="Wed, 2 May 2012 23:15:35 +0000"  >&lt;p&gt;A not too scientific comparison.&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;p&gt;total=6.26 GB, free=1.04 GB, max=7.3 GB, blocks=101753, accesses=5078311, hits=4333154, hitRatio=85.32%, cachingAccesses=5078311, cachingHits=4333154, cachingHitsRatio=85.32%, evictions=54, evicted=643404, evictedPerRun=11914.888671875&lt;/p&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;p&gt;total=6.45 GB, free=878.07 MB, max=7.3 GB, blocks=104747, accesses=5810869, hits=4345850, hitRatio=74.78%, cachingAccesses=5810869, cachingHits=4345850, cachingHitsRatio=74.78%, evictions=52, evicted=627755, evictedPerRun=12072.2119140625&lt;/p&gt;

&lt;p&gt;This is using the benchmark tool I&apos;m working on right now, I had to port Todd&apos;s patch since I&apos;m not going through the HFile code but I&apos;m doing exactly what he does. The test is started completely cold. It uses 5 threads.&lt;/p&gt;

&lt;p&gt;The big takeout is that it did 14% more cache accesses which had the side effect of lowering the hit ratio. The number of actual cache hits was a big higher.&lt;/p&gt;</comment>
                            <comment id="13270801" author="stack" created="Tue, 8 May 2012 20:32:27 +0000"  >&lt;p&gt;Can you do a test where much lower hit ratio?  Any way to compare the amount of &apos;work&apos; done by the cache or how latency is effected?  I&apos;m wondering if you can use your tool to simulate the below:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The downside is that for a workload with a lower cache hit ratio, we&apos;ll ask the cache twice for every cache miss instead of just once. So we should see what the performance difference is for something like a 10MB cache with 1GB dataset, where the dataset fits in the OS buffer cache.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If you can&apos;t, is it something you should make it measure?&lt;/p&gt;</comment>
                            <comment id="13271791" author="jdcryans" created="Wed, 9 May 2012 20:45:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can you do a test where much lower hit ratio?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Here it is with 100MB for a ~10GB working data set:&lt;/p&gt;

&lt;p&gt;Before:&lt;/p&gt;

&lt;p&gt;total=84.22 MB, free=15.78 MB, max=100 MB, blocks=1288, accesses=5078238, hits=3186246, hitRatio=62.74%, cachingAccesses=5078238, cachingHits=3186246, cachingHitsRatio=62.74%, evictions=11196, evicted=1890704, evictedPerRun=168.8731689453125&lt;/p&gt;

&lt;p&gt;real	1m12.487s&lt;br/&gt;
user	8m54.470s&lt;br/&gt;
sys	0m23.850s&lt;/p&gt;

&lt;p&gt;After:&lt;/p&gt;

&lt;p&gt;LRU Stats: total=84.09 MB, free=15.91 MB, max=100 MB, blocks=1286, accesses=6967721, hits=3189074, hitRatio=45.76%, cachingAccesses=6967721, cachingHits=3189074, cachingHitsRatio=45.76%, evictions=10876, evicted=1887926, evictedPerRun=173.58642578125&lt;/p&gt;

&lt;p&gt;real	1m12.614s&lt;br/&gt;
user	9m34.990s&lt;br/&gt;
sys	0m21.390s&lt;/p&gt;


&lt;p&gt;Again the hit ratio is much worse but in reality the hits were about the same in both cases. Included is the &quot;time&quot; output for those runs, the user cpu is somewhat higher (expected) but the total run time is really the same.&lt;/p&gt;</comment>
                            <comment id="13271901" author="tlipcon" created="Wed, 9 May 2012 22:48:05 +0000"  >&lt;p&gt;Shouldn&apos;t be hard to get that CPU time back &amp;#8211; we can just add an array of cacheline-padded AtomicLongs to the cache. Whenever we add something to the cache, we do &lt;tt&gt;changeCounters&lt;span class=&quot;error&quot;&gt;&amp;#91;key.hashCode() % changeCounters.length&amp;#93;&lt;/span&gt;.getAndIncrement()&lt;/tt&gt;. Then change the code to:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
AtomicLong changeCounter = changeCounters[key.hashCode() % changeCounters.length];
&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; firstTimeChangeCounter = changeCounter.get();
first time:
  &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; to look up in cache
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; found: &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; it
second time:
  take lock:
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; changeCounter.get() == firstTimeChangeCounter: it&apos;s not in cache
    otherwise: look up in cache again
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We&apos;d probably want to cache-pad the AtomicLongs too to avoid false sharing.&lt;/p&gt;</comment>
                            <comment id="13272534" author="mikhail" created="Thu, 10 May 2012 17:40:39 +0000"  >&lt;p&gt;Todd: where do we increment those AtomicLong counters?&lt;/p&gt;</comment>
                            <comment id="13272543" author="tlipcon" created="Thu, 10 May 2012 17:47:52 +0000"  >&lt;p&gt;Mikhail: whenever we insert something into the cache, we&apos;d increment the counter for that hash bucket.&lt;/p&gt;</comment>
                            <comment id="13272561" author="mikhail" created="Thu, 10 May 2012 18:00:13 +0000"  >&lt;p&gt;Is there any way to avoid messing up cache hit ratio with these optimizations? Maybe pass a flag to getBlock saying we should not update the metrics.&lt;/p&gt;

&lt;p&gt;Another suggestion from Kannan: maybe we should move metric updates and other extra logic outside of the lock, and only leave cache lookup and HDFS I/O inside the lock.&lt;/p&gt;</comment>
                            <comment id="13272716" author="tlipcon" created="Thu, 10 May 2012 20:23:44 +0000"  >&lt;p&gt;Yep, I agree we need to fix the metrics messup before this is a candidate for commit.&lt;/p&gt;

&lt;p&gt;I like the idea of moving the metric updates out.&lt;/p&gt;</comment>
                            <comment id="13480566" author="lhofhansl" created="Sat, 20 Oct 2012 00:50:32 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; mentioned today that he saw a problem very similar to this.&lt;/p&gt;</comment>
                            <comment id="13482724" author="eclark" created="Tue, 23 Oct 2012 21:43:58 +0000"  >&lt;p&gt;We saw this on a production cluster.&lt;/p&gt;

&lt;p&gt;A single data block was being requested by all ipc handlers.  This caused a great deal of lock contention.  Todd&apos;s patch fixed the issue and caused reads to go back to a normal duration.&lt;/p&gt;

&lt;p&gt;This patch is almost identical to Todd&apos;s patch.  It makes the second try to get a block from the block cache not count as a miss.&lt;/p&gt;</comment>
                            <comment id="13482856" author="lhofhansl" created="Wed, 24 Oct 2012 00:22:16 +0000"  >&lt;p&gt;I&apos;d be still worried about checking the cache multiple times especially when the hit ratio is low.&lt;br/&gt;
On the other hand in that case the cost of checking the cache twice is probably eclipsed by the cost of actually loading the block... So maybe it&apos;s nothing to worry about.&lt;/p&gt;</comment>
                            <comment id="13482866" author="eclark" created="Wed, 24 Oct 2012 00:35:50 +0000"  >&lt;p&gt;Since it&apos;s possible that the thread blocked behind a reader that went to hdfs for the block, I think checking the cache is most likely to be a win.&lt;/p&gt;

&lt;p&gt;I have a demo app that hits one block multi-threaded.  I&apos;ll try and get some concrete numbers up to back up my thoughts.&lt;/p&gt;</comment>
                            <comment id="13482949" author="lhofhansl" created="Wed, 24 Oct 2012 04:29:16 +0000"  >&lt;p&gt;That&apos;s a good theory &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I guess the worst case here is the uncontended case with lots of cache misses.&lt;br/&gt;
For example a single threaded large scan over data not in the block cache; in that case we&apos;ll always needlessly go around twice in that loop.&lt;/p&gt;</comment>
                            <comment id="13484290" author="lhofhansl" created="Thu, 25 Oct 2012 17:16:25 +0000"  >&lt;p&gt;Instead of checking &lt;tt&gt;blockReadTryCount != 2&lt;/tt&gt; we could also check useLock, right? It should be &lt;tt&gt;true&lt;/tt&gt; exactly when &lt;tt&gt;blockReadTryCount != 2&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="13484292" author="lhofhansl" created="Thu, 25 Oct 2012 17:18:31 +0000"  >&lt;p&gt;I meant it is &lt;tt&gt;false&lt;/tt&gt; when &lt;tt&gt;blockReadTryCount != 2&lt;/tt&gt;&lt;/p&gt;</comment>
                            <comment id="13484297" author="lhofhansl" created="Thu, 25 Oct 2012 17:22:47 +0000"  >&lt;p&gt;Otherwise looks good. I think the double cache check is fine.&lt;/p&gt;</comment>
                            <comment id="13484520" author="eclark" created="Thu, 25 Oct 2012 21:55:25 +0000"  >&lt;p&gt;Good catch on that.  Here&apos;s a patch without the counting.&lt;/p&gt;</comment>
                            <comment id="13484536" author="eclark" created="Thu, 25 Oct 2012 22:12:13 +0000"  >&lt;p&gt;patch without the counter.&lt;/p&gt;</comment>
                            <comment id="13484544" author="hadoopqa" created="Thu, 25 Oct 2012 22:34:32 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12550877/HBASE-5898-1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12550877/HBASE-5898-1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 85 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestStoreFile&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3152//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13484549" author="lhofhansl" created="Thu, 25 Oct 2012 22:44:23 +0000"  >&lt;p&gt;Test failure is suspicious &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13484734" author="ram_krish" created="Fri, 26 Oct 2012 06:01:40 +0000"  >&lt;p&gt;We have recently hit this issue.. My major concern here is there is contention only happening right?  But here in our case the scan itself did not happen for almost 10 mins?&lt;br/&gt;
The thread dump clearly says what was found over in this JIRA.&lt;/p&gt;</comment>
                            <comment id="13484739" author="stack" created="Fri, 26 Oct 2012 06:25:57 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; How you mean Ram?  It was stuck where in particular?  Was it a bunch of threads getting same block?  What did the thread dump look like?  There is some issue in here around the wait/notify it seems as implemented.  The double-checked is probably better anyways but could the issue come back just less frequently after this patch goes in?&lt;/p&gt;</comment>
                            <comment id="13484856" author="ram_krish" created="Fri, 26 Oct 2012 11:18:17 +0000"  >&lt;p&gt;I can attach some parts of the thread dump &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Was it a bunch of threads getting same block? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The double-checked is probably better anyways but could the issue come back just less frequently after this patch goes in?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Am not sure.  We tried to restart the client twice still this persisted.  Later the RS we restarted after that we could not get this.&lt;br/&gt;
This thing repeats many times.  We took 3 thread dumps in a span of 2 mins&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 42 on 60020&quot;&lt;/span&gt; daemon prio=10 tid=0x00007f2f38f1a000 nid=0x6c4d in &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait() [0x00007f2f33e4f000]
   java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.State: WAITING (on object monitor)
	at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(Native Method)
	at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.wait(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.java:485)
	at org.apache.hadoop.hbase.util.IdLock.getLockEntry(IdLock.java:77)
	- locked &amp;lt;0x00000006cc2a7178&amp;gt; (a org.apache.hadoop.hbase.util.IdLock$Entry)
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2.readBlock(HFileReaderV2.java:290)
	at org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.seekToDataBlock(HFileBlockIndex.java:213)
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2$AbstractScannerV2.seekTo(HFileReaderV2.java:455)
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2$AbstractScannerV2.reseekTo(HFileReaderV2.java:493)
	at org.apache.hadoop.hbase.regionserver.StoreFileScanner.reseekAtOrAfter(StoreFileScanner.java:242)
	at org.apache.hadoop.hbase.regionserver.StoreFileScanner.reseek(StoreFileScanner.java:167)
	at org.apache.hadoop.hbase.regionserver.NonLazyKeyValueScanner.doRealSeek(NonLazyKeyValueScanner.java:54)
	at org.apache.hadoop.hbase.regionserver.KeyValueHeap.generalizedSeek(KeyValueHeap.java:299)
	at org.apache.hadoop.hbase.regionserver.KeyValueHeap.reseek(KeyValueHeap.java:244)
	at org.apache.hadoop.hbase.regionserver.StoreScanner.reseek(StoreScanner.java:523)
	- locked &amp;lt;0x000000069a665420&amp;gt; (a org.apache.hadoop.hbase.regionserver.StoreScanner)
	at org.apache.hadoop.hbase.regionserver.StoreScanner.next(StoreScanner.java:399)
	- locked &amp;lt;0x000000069a665420&amp;gt; (a org.apache.hadoop.hbase.regionserver.StoreScanner)
	at org.apache.hadoop.hbase.regionserver.KeyValueHeap.next(KeyValueHeap.java:127)
	at org.apache.hadoop.hbase.regionserver.HRegion$RegionScannerImpl.nextInternal(HRegion.java:3424)
	at org.apache.hadoop.hbase.regionserver.HRegion$RegionScannerImpl.next(HRegion.java:3379)
	- locked &amp;lt;0x000000069a7da458&amp;gt; (a org.apache.hadoop.hbase.regionserver.HRegion$RegionScannerImpl)
	at org.apache.hadoop.hbase.regionserver.HRegion$RegionScannerImpl.next(HRegion.java:3396)
	- locked &amp;lt;0x000000069a7da458&amp;gt; (a org.apache.hadoop.hbase.regionserver.HRegion$RegionScannerImpl)
	at org.apache.hadoop.hbase.regionserver.HRegionServer.next(HRegionServer.java:2411)
	at sun.reflect.GeneratedMethodAccessor32.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Also we could see that sometimes the relaseLock was also happening.  But in the 3 thread dumps this came only once.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 18 on 60020&quot;&lt;/span&gt; daemon prio=10 tid=0x00007f2f38ee9800 nid=0x6c35 runnable [0x00007f2f35667000]
   java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.State: RUNNABLE
	at java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;.notify(Native Method)
	at org.apache.hadoop.hbase.util.IdLock.releaseLockEntry(IdLock.java:108)
	- locked &amp;lt;0x00000006cc2a7178&amp;gt; (a org.apache.hadoop.hbase.util.IdLock$Entry)
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2.readBlock(HFileReaderV2.java:352)
	at org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.seekToDataBlock(HFileBlockIndex.java:213)
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2$AbstractScannerV2.seekTo(HFileReaderV2.java:455)
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2$AbstractScannerV2.reseekTo(HFileReaderV2.java:493)
	at org.apache.hadoop.hbase.regionserver.StoreFileScanner.reseekAtOrAfter(StoreFileScanner.java:242)
	at org.apache.hadoop.hbase.regionserver.StoreFileScanner.reseek(StoreFileScanner.java:167)
	at org.apache.hadoop.hbase.regionserver.NonLazyKeyValueScanner.doRealSeek(NonLazyKeyValueScanner.java:54)
	at org.apache.hadoop.hbase.regionserver.KeyValueHeap.generalizedSeek(KeyValueHeap.java:299)
	at org.apache.hadoop.hbase.regionserver.KeyValueHeap.reseek(KeyValueHeap.java:244)
	at org.apache.hadoop.hbase.regionserver.StoreScanner.reseek(StoreScanner.java:523)
	- locked &amp;lt;0x000000069a89d678&amp;gt; (a org.apache.hadoop.hbase.regionserver.StoreScanner)
	at org.apache.hadoop.hbase.regionserver.StoreScanner.next(StoreScanner.java:399)
	- locked &amp;lt;0x000000069a89d678&amp;gt; (a org.apache.hadoop.hbase.regionserver.StoreScanner)
	at org.apache.hadoop.hbase.regionserver.KeyValueHeap.next(KeyValueHeap.java:127)
	at org.apache.hadoop.hbase.regionserver.HRegion$RegionScannerImpl.nextInternal(HRegion.java:3424)
	at org.apache.hadoop.hbase.regionserver.HRegion$RegionScannerImpl.next(HRegion.java:3379)
	- locked &amp;lt;0x000000069ae0bbb8&amp;gt; (a org.apache.hadoop.hbase.regionserver.HRegion$RegionScannerImpl)
	at org.apache.hadoop.hbase.regionserver.HRegion$RegionScannerImpl.next(HRegion.java:3396)
	- locked &amp;lt;0x000000069ae0bbb8&amp;gt; (a org.apache.hadoop.hbase.regionserver.HRegion$RegionScannerImpl)
	at org.apache.hadoop.hbase.regionserver.HRegionServer.next(HRegionServer.java:2411)

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;All the client threads were hanging here&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;-29&quot;&lt;/span&gt; prio=10 tid=0x00007f9f2c549000 nid=0x639f waiting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; monitor entry [0x00007f9f2adec000]
   java.lang.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.State: BLOCKED (on object monitor)
	at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.locateRegionInMeta(HConnectionManager.java:955)
	- waiting to lock &amp;lt;0x000000078ba82828&amp;gt; (a java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;)
	at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.locateRegion(HConnectionManager.java:841)
	at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.locateRegion(HConnectionManager.java:810)
	at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.locateRegionInMeta(HConnectionManager.java:942)
	at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.locateRegion(HConnectionManager.java:845)
	at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.locateRegion(HConnectionManager.java:810)
	at org.apache.hadoop.hbase.client.HTable.finishSetup(HTable.java:232)
	at org.apache.hadoop.hbase.client.HTable.&amp;lt;init&amp;gt;(HTable.java:172)
	at org.apache.hadoop.hbase.client.HTable.&amp;lt;init&amp;gt;(HTable.java:131)

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13485155" author="stack" created="Fri, 26 Oct 2012 20:02:38 +0000"  >&lt;p&gt;I&apos;ve seen that thread dump before!  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; has a program to try and repro the above and hopefully we can add some instrumentation and get clues on why the above happens.&lt;/p&gt;</comment>
                            <comment id="13485313" author="lhofhansl" created="Sat, 27 Oct 2012 00:56:56 +0000"  >&lt;p&gt;Sounds like a missed notify or a deadlock.&lt;br/&gt;
Although looking at the code I do not see how that can happen. The use of notify (vs. notifyAll) seems correct in IdLock since all waiting threads wait for the same condition and only one thread will be able to proceed.&lt;/p&gt;

&lt;p&gt;@Ram: Which version of HBase?&lt;/p&gt;</comment>
                            <comment id="13485328" author="lhofhansl" created="Sat, 27 Oct 2012 01:58:15 +0000"  >&lt;p&gt;Clearly this can happen when HDFS has a problem. One thread tries to load the block, and if that is delayed due to HDFS all other threads need to queue up and wait.&lt;/p&gt;</comment>
                            <comment id="13485339" author="lhofhansl" created="Sat, 27 Oct 2012 03:35:58 +0000"  >&lt;p&gt;I think we should commit this fix (after checking out the TestStoreFile failure) and investigate Ram&apos;s issue in a different jira, these look like two different scenarios.&lt;/p&gt;</comment>
                            <comment id="13485341" author="stack" created="Sat, 27 Oct 2012 03:45:50 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; When you say different scenarios, are you thinking a.) Todd saw contention on this lock and made a workaround &amp;#8211; this is what this issue addresses &amp;#8211; meanwhile the other scenario b.), is what JD and a few of us saw that looked like weird jvm-bug-like slowness in this same area and this patch works around that issue (Ram saw slowness too)?  I&apos;m a little worried that after this patch goes in, b.) will still happen but will just be harder to trip.  Would be coolio if could reproduce and poke at it. &lt;/p&gt;</comment>
                            <comment id="13485348" author="lhofhansl" created="Sat, 27 Oct 2012 04:22:15 +0000"  >&lt;p&gt;Something like this. I don&apos;t think the patch works around or even affects the 2nd issue.&lt;/p&gt;

&lt;p&gt;The most likely explanation for the 2nd issue seems to be HDFS slowness:&lt;br/&gt;
The block is not in the cache, the first thread tries to load it, and while that is happening all other threads have to (and should) wait.&lt;br/&gt;
If there is a temporary network hickup that will take a bit... And it would look exactly like these stack traces, where many threads are queued up behind this lock.&lt;/p&gt;

&lt;p&gt;Now that you say it, though... On further consideration I am not sure I buy there even &lt;b&gt;is&lt;/b&gt; a contention issue here. We either:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;have the block in the cache, in which case we&apos;ll return it very quickly.&lt;/li&gt;
	&lt;li&gt;do not have the block, in that case we have to load it and all other threads must wait.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13485354" author="stack" created="Sat, 27 Oct 2012 04:35:07 +0000"  >&lt;p&gt;Onus is on us to show you the thread dumps where no thread was going to hdfs.... let me see if can dig up one.&lt;/p&gt;</comment>
                            <comment id="13485356" author="ram_krish" created="Sat, 27 Oct 2012 04:47:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;@Ram: Which version of HBase?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;0.94.0 + few more patches over it.&lt;br/&gt;
Going thro the code in getLockId and releaseLockId things seems to be pretty much fine there.&lt;br/&gt;
Reg could be an HDFS issue,&lt;br/&gt;
If that is the case the thread dump should have something where the code is waiting for the HDFS right? somewhere in fsReader.readBlockData() or similar area where we try to read from HDFS.  &lt;/p&gt;</comment>
                            <comment id="13487542" author="lhofhansl" created="Wed, 31 Oct 2012 05:25:43 +0000"  >&lt;p&gt;What should we do with this one?&lt;/p&gt;

&lt;p&gt;@Ram: you&apos;re probably right, on the other hand I cannot see anything wrong with this code (and I looked at it multiple times). The proposed patch will probably not fix the problem you saw.&lt;/p&gt;

&lt;p&gt;And from some comment earlier it is doubtful that this patch is even an improvement for the issue that Todd saw. I&apos;d say we should table this (at least for 0.94), until we know what exactly the issue is.&lt;/p&gt;</comment>
                            <comment id="13488011" author="jdcryans" created="Wed, 31 Oct 2012 17:52:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;The most likely explanation for the 2nd issue seems to be HDFS slowness&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Improbable. With the patch, the first thread would try to get the block and get stuck, the others would first try to read without the lock, fail, and then would also block. Except that when I applied the patch it resolved the issue.&lt;/p&gt;</comment>
                            <comment id="13488028" author="lhofhansl" created="Wed, 31 Oct 2012 18:04:48 +0000"  >&lt;p&gt;You wanna just commit it? It won&apos;t do any harm. I&apos;m just doubtful that it will fix anything.&lt;/p&gt;</comment>
                            <comment id="13488069" author="ram_krish" created="Wed, 31 Oct 2012 18:36:02 +0000"  >&lt;p&gt;I think we can commit this.  Surely this will have an impact on performance.&lt;br/&gt;
Just before committing can we check if Ted&apos;s comment&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5898?focusedCommentId=13264470&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13264470&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-5898?focusedCommentId=13264470&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13264470&lt;/a&gt; could be a problem if offheapcache is enabled.&lt;/p&gt;</comment>
                            <comment id="13488470" author="lhofhansl" created="Thu, 1 Nov 2012 05:09:26 +0000"  >&lt;p&gt;Offtopic: Is the offheap cache even working currently? If not I&apos;d be in favor of ripping that code out.&lt;/p&gt;</comment>
                            <comment id="13488477" author="stack" created="Thu, 1 Nov 2012 05:28:14 +0000"  >&lt;p&gt;The offheap cache is being used by no one &amp;#8211; its unusable in current form &amp;#8211; and doubtful anyone would ever use it or if it even makes sense to use it as currently implemented instead of just having bigger block cache w/ decent GC tuning + file system cache instead.  I&apos;d be fine for ripping it out until someone wanted to take it up and finish it off.&lt;/p&gt;</comment>
                            <comment id="13488478" author="stack" created="Thu, 1 Nov 2012 05:31:01 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; Elliott, you get any more data on the hung up case (Elliott has been trying to repo it so can get more data on slow wait/notifying)&lt;/p&gt;</comment>
                            <comment id="13488479" author="lhofhansl" created="Thu, 1 Nov 2012 05:32:03 +0000"  >&lt;p&gt;Yeah, offheap caching for diskblocks always seemed a bit &quot;interesting&quot; as the blocks all have the same size the GC should be able to deal with the churn nicely.&lt;/p&gt;</comment>
                            <comment id="13490454" author="lhofhansl" created="Mon, 5 Nov 2012 05:02:56 +0000"  >&lt;p&gt;I wonder whether &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6032&quot; title=&quot;Port HFileBlockIndex improvement from HBASE-5987&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6032&quot;&gt;&lt;del&gt;HBASE-6032&lt;/del&gt;&lt;/a&gt; helps with this.&lt;/p&gt;</comment>
                            <comment id="13490784" author="lhofhansl" created="Mon, 5 Nov 2012 18:10:52 +0000"  >&lt;p&gt;Gentlemen, what should we do with this? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I would like the next 0.94RC soon. Do we want this now, or can it wait a few weeks for the next RC?&lt;/p&gt;</comment>
                            <comment id="13490821" author="jdcryans" created="Mon, 5 Nov 2012 18:51:49 +0000"  >&lt;p&gt;If we want to get people testing it I say we include it right now else not at all for 0.94&lt;/p&gt;</comment>
                            <comment id="13490880" author="lhofhansl" created="Mon, 5 Nov 2012 20:03:11 +0000"  >&lt;p&gt;Let&apos;s commit it, and add to the release notes that this potentially breaks off-heap caching.&lt;/p&gt;</comment>
                            <comment id="13491166" author="lhofhansl" created="Tue, 6 Nov 2012 03:02:38 +0000"  >&lt;p&gt;OK. Somebody who wants this committed should do so. I am +0.&lt;/p&gt;</comment>
                            <comment id="13491732" author="lhofhansl" created="Tue, 6 Nov 2012 19:18:36 +0000"  >&lt;p&gt;If nobody is willing to sponsor this (by committing), maybe it should not be committed...?&lt;/p&gt;</comment>
                            <comment id="13491781" author="stack" created="Tue, 6 Nov 2012 20:14:21 +0000"  >&lt;p&gt;This patch was difference between a stalling sick cluster and one that worked properly again.  I think it has to be committed (off-heap cache should not be in the way of committing this issue).&lt;/p&gt;</comment>
                            <comment id="13491971" author="lhofhansl" created="Wed, 7 Nov 2012 00:14:19 +0000"  >&lt;p&gt;Wanna commit Stack? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13491999" author="lhofhansl" created="Wed, 7 Nov 2012 00:55:23 +0000"  >&lt;p&gt;In the light of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt;, even saving taking the lock if we already have cached the block, might lead to a nice performance improvement.&lt;/p&gt;</comment>
                            <comment id="13492727" author="stack" created="Wed, 7 Nov 2012 21:40:25 +0000"  >&lt;p&gt;Retry&lt;/p&gt;</comment>
                            <comment id="13492728" author="hadoopqa" created="Wed, 7 Nov 2012 21:42:31 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12552544/HBASE-5898-1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12552544/HBASE-5898-1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3258//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3258//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13492790" author="eclark" created="Wed, 7 Nov 2012 22:56:07 +0000"  >&lt;p&gt;Looks like the patch has gone stale after the big metrics2 commit.  I&apos;ll get a new version up for trunk in a little bit.&lt;/p&gt;</comment>
                            <comment id="13494998" author="lhofhansl" created="Sun, 11 Nov 2012 21:27:31 +0000"  >&lt;p&gt;Rebased trunk patch. (want to get 0.94.3 RC out)&lt;/p&gt;</comment>
                            <comment id="13495000" author="lhofhansl" created="Sun, 11 Nov 2012 21:30:06 +0000"  >&lt;p&gt;Oops. No, not quite the same.&lt;/p&gt;</comment>
                            <comment id="13495002" author="lhofhansl" created="Sun, 11 Nov 2012 21:31:39 +0000"  >&lt;p&gt;Arggh... NM. This is the right patch.&lt;/p&gt;</comment>
                            <comment id="13495004" author="lhofhansl" created="Sun, 11 Nov 2012 21:38:39 +0000"  >&lt;p&gt;Figured my confusion. Took the patch from the wrong directory. This version is good now.&lt;/p&gt;</comment>
                            <comment id="13495005" author="lhofhansl" created="Sun, 11 Nov 2012 21:39:45 +0000"  >&lt;p&gt;I can&apos;t make patches.&lt;/p&gt;</comment>
                            <comment id="13495006" author="lhofhansl" created="Sun, 11 Nov 2012 21:41:05 +0000"  >&lt;p&gt;Last try.&lt;/p&gt;</comment>
                            <comment id="13495013" author="hadoopqa" created="Sun, 11 Nov 2012 22:07:37 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12553048/5898-v2.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12553048/5898-v2.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 87 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 17 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestStoreFile&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3307//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13495032" author="lhofhansl" created="Sun, 11 Nov 2012 23:04:15 +0000"  >&lt;p&gt;TestStoreFile fails because it checks CacheStats.getMissCount(), which will be wrong even after modified patch. CacheStats.miss updates two counters: missCount and missCachingCount. Only missCachingCount is counted correctly.&lt;br/&gt;
So, we can change the test and accept the wrong number for missCount, or we change the CacheStats API.&lt;/p&gt;</comment>
                            <comment id="13495039" author="lhofhansl" created="Sun, 11 Nov 2012 23:17:33 +0000"  >&lt;p&gt;Version that fixes TestStoreFile (by using getMissCachingCount() instead of getMissCount())&lt;/p&gt;

&lt;p&gt;The missCount is still over counted.&lt;/p&gt;</comment>
                            <comment id="13495053" author="hadoopqa" created="Mon, 12 Nov 2012 00:16:03 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12553057/5898-v3.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12553057/5898-v3.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 87 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 17 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestFromClientSide&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestFromClientSideWithCoprocessor&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3308//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13495098" author="stack" created="Mon, 12 Nov 2012 05:35:11 +0000"  >&lt;p&gt;Seems fine by me Lars.&lt;/p&gt;</comment>
                            <comment id="13495472" author="lhofhansl" created="Mon, 12 Nov 2012 18:26:27 +0000"  >&lt;p&gt;OK... Will commit in the next hour.&lt;/p&gt;</comment>
                            <comment id="13495570" author="lhofhansl" created="Mon, 12 Nov 2012 19:56:58 +0000"  >&lt;p&gt;Actually... Which metric is measures via JMX? It would be bad if that metric would be double reported now via JMX.&lt;br/&gt;
This is last jira open against 0.94.3.&lt;/p&gt;</comment>
                            <comment id="13495676" author="lhofhansl" created="Mon, 12 Nov 2012 22:07:30 +0000"  >&lt;p&gt;Yeah, just verified that RegionServerMetrics.blockCacheMissCount is driven by CacheStats.missCount, which will be double counted with this patch.&lt;/p&gt;</comment>
                            <comment id="13495694" author="lhofhansl" created="Mon, 12 Nov 2012 22:25:31 +0000"  >&lt;p&gt;BTW. It also turns out that HFileReaderVx update an AtomicLong (cacheHits) that is not read anywhere...?! I&apos;ll remove that.&lt;/p&gt;</comment>
                            <comment id="13495699" author="lhofhansl" created="Mon, 12 Nov 2012 22:28:52 +0000"  >&lt;p&gt;same for metaLoads and blockLoads. Both are atomic longs updated for no reason.&lt;/p&gt;</comment>
                            <comment id="13495720" author="lhofhansl" created="Mon, 12 Nov 2012 22:52:47 +0000"  >&lt;p&gt;Patch that handled the cache misses correctly. Also removes the unnecessary AtomicLong updates.&lt;/p&gt;

&lt;p&gt;Not pretty... BlockCache.getBlock has another boolean parameter to indicate whether cache misses should be counted... All callers and implementors needed to be changed.&lt;/p&gt;

&lt;p&gt;Please let me know what you think.&lt;/p&gt;</comment>
                            <comment id="13495786" author="lhofhansl" created="Tue, 13 Nov 2012 00:27:47 +0000"  >&lt;p&gt;Any comments? Would like to commit and do a 0.94.3rc.&lt;/p&gt;</comment>
                            <comment id="13495919" author="stack" created="Tue, 13 Nov 2012 04:08:18 +0000"  >&lt;p&gt;The repeat is a bit strange but it is at least easy to follow what is going on in this block getting code so +1 on commit for 0.94.  No harm in beefing up this comment on commit:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+   * @param repeat Whether &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; is a repeat lookup &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the same block
+   *        {@see HFileReaderV2#readBlock(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;, BlockType)}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You refer to the code responsible for this &apos;repeat&apos; param but maybe make mention of not wanting to double-count metrics when doing double-check locking in the cited code?&lt;/p&gt;

&lt;p&gt;Good on you Lars.&lt;/p&gt;</comment>
                            <comment id="13495947" author="lhofhansl" created="Tue, 13 Nov 2012 04:40:48 +0000"  >&lt;p&gt;Will update the comment. I would like to get a HadoopQA run through, but it&apos;s currently broken. (possibly related to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7104&quot; title=&quot;HBase includes multiple versions of netty: 3.5.0; 3.2.4; 3.2.2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7104&quot;&gt;&lt;del&gt;HBASE-7104&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;</comment>
                            <comment id="13495950" author="lhofhansl" created="Tue, 13 Nov 2012 04:43:32 +0000"  >&lt;p&gt;Attaching same patch again for HadoopQA&lt;/p&gt;</comment>
                            <comment id="13495962" author="lhofhansl" created="Tue, 13 Nov 2012 05:02:06 +0000"  >&lt;p&gt;Triggered HadoopQA directly through jenkins.&lt;/p&gt;</comment>
                            <comment id="13495979" author="hadoopqa" created="Tue, 13 Nov 2012 05:54:08 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12553266/5898-v4.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12553266/5898-v4.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 93 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 17 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestShell&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3320//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13495982" author="hadoopqa" created="Tue, 13 Nov 2012 05:58:06 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12553266/5898-v4.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12553266/5898-v4.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 93 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 17 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestShell&lt;br/&gt;
                  org.apache.hadoop.hbase.TestDrainingServer&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3321//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13496003" author="lhofhansl" created="Tue, 13 Nov 2012 06:39:57 +0000"  >&lt;p&gt;TestDrainingServer passes locally. TestShell fails with or without this patch.&lt;/p&gt;</comment>
                            <comment id="13496006" author="lhofhansl" created="Tue, 13 Nov 2012 06:52:38 +0000"  >&lt;p&gt;0.94 version of the patch&lt;/p&gt;</comment>
                            <comment id="13496010" author="lhofhansl" created="Tue, 13 Nov 2012 06:55:15 +0000"  >&lt;p&gt;Committed to 0.94 and 0.96.&lt;br/&gt;
(Removal of those unneeded AtomicLongs will give some additional cycles back)&lt;/p&gt;</comment>
                            <comment id="13496044" author="hudson" created="Tue, 13 Nov 2012 09:00:52 +0000"  >&lt;p&gt;Integrated in HBase-0.94 #582 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/582/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/582/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5898&quot; title=&quot;Consider double-checked locking for block cache lock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5898&quot;&gt;&lt;del&gt;HBASE-5898&lt;/del&gt;&lt;/a&gt; Consider double-checked locking for block cache lock (Todd, Elliot, LarsH) (Revision 1408621)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/DoubleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/LruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/SimpleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileDataBlockEncoder.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/TestCacheOnWriteInSchema.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13496049" author="hudson" created="Tue, 13 Nov 2012 09:07:56 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #3534 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/3534/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/3534/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5898&quot; title=&quot;Consider double-checked locking for block cache lock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5898&quot;&gt;&lt;del&gt;HBASE-5898&lt;/del&gt;&lt;/a&gt; Consider double-checked locking for block cache lock (Todd, Elliot, LarsH) (Revision 1408620)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/DoubleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/LruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/SimpleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileDataBlockEncoder.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCacheOnWriteInSchema.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13496081" author="hudson" created="Tue, 13 Nov 2012 10:24:15 +0000"  >&lt;p&gt;Integrated in HBase-0.94-security #83 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security/83/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security/83/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5898&quot; title=&quot;Consider double-checked locking for block cache lock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5898&quot;&gt;&lt;del&gt;HBASE-5898&lt;/del&gt;&lt;/a&gt; Consider double-checked locking for block cache lock (Todd, Elliot, LarsH) (Revision 1408621)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/DoubleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/LruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/SimpleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileDataBlockEncoder.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/TestCacheOnWriteInSchema.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13496192" author="hudson" created="Tue, 13 Nov 2012 13:37:56 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #258 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/258/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/258/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5898&quot; title=&quot;Consider double-checked locking for block cache lock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5898&quot;&gt;&lt;del&gt;HBASE-5898&lt;/del&gt;&lt;/a&gt; Consider double-checked locking for block cache lock (Todd, Elliot, LarsH) (Revision 1408620)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/DoubleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/LruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/SimpleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileDataBlockEncoder.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCacheOnWriteInSchema.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13529300" author="lhofhansl" created="Tue, 11 Dec 2012 20:14:01 +0000"  >&lt;p&gt;One interesting behavior I saw was that HBase grinds to a halt when many threads scan along the same set of blocks &lt;b&gt;and&lt;/b&gt; read short circuit is &lt;b&gt;not&lt;/b&gt; enabled for the dfs client.&lt;br/&gt;
This seems to be a problem in the dfs client (1.0.3 and 1.0.4).&lt;/p&gt;

&lt;p&gt;Have no time right now to investigate, but thought that might give a hint.&lt;/p&gt;</comment>
                            <comment id="13529517" author="lhofhansl" created="Wed, 12 Dec 2012 00:48:03 +0000"  >&lt;p&gt;I tracked it down to locking on istream in HFileBlock.readAtOffset.&lt;/p&gt;

&lt;p&gt;Here&apos;s my test case: 20m rows, single column family, single column, blockcache disabled for the scan, all data fits into the OS buffer cache.&lt;br/&gt;
Full scan over all rows.&lt;/p&gt;

&lt;p&gt;One client scanning: 15s (regionserver keeps one core busy ~120%)&lt;br/&gt;
Two clients scanning along the same set of blocks: They both time out. (regionserver is a 5-6% CPU, clearly just waiting)&lt;/p&gt;

&lt;p&gt;Then I changed readAtOffset to always do preads. Now:&lt;br/&gt;
One client scanning: 39s (regionserver at ~120%)&lt;br/&gt;
Two clients scanning: 39s each (regionserver at ~210%)&lt;/p&gt;

&lt;p&gt;So not sure how to proceed. Generally switching to pread obviously does not work (scan time almost tripled).&lt;br/&gt;
seek + read does not scale to multiple threads. I &lt;b&gt;bet&lt;/b&gt; this is the issue folks have been seeing and this patch does not address that.&lt;/p&gt;</comment>
                            <comment id="13529536" author="lhofhansl" created="Wed, 12 Dec 2012 01:14:35 +0000"  >&lt;p&gt;Why is there only one reader/fsinput stream per store file?&lt;/p&gt;</comment>
                            <comment id="13529546" author="lhofhansl" created="Wed, 12 Dec 2012 01:22:24 +0000"  >&lt;p&gt;When read short circuiting is enabled:&lt;/p&gt;

&lt;p&gt;One client: 15s (120% CPU)&lt;br/&gt;
Two clients: 41s each (160% CPU)&lt;/p&gt;

&lt;p&gt;with pread:&lt;br/&gt;
One client: 18s (160% CPU)&lt;br/&gt;
Two clients: 19s each (250% CPU)&lt;/p&gt;

&lt;p&gt;Presumably local read is fast enough in this case to make the synchronization less of a problem.&lt;/p&gt;</comment>
                            <comment id="13529547" author="lhofhansl" created="Wed, 12 Dec 2012 01:24:00 +0000"  >&lt;p&gt;Last comment (I promise). Note: That this all with the block cache disabled.&lt;/p&gt;</comment>
                            <comment id="13529577" author="shrijeet" created="Wed, 12 Dec 2012 02:28:53 +0000"  >&lt;p&gt;Hello Lars,&lt;/p&gt;

&lt;p&gt;Do not mean to sidetrack you but I raised &lt;a href=&quot;http://markmail.org/thread/ulki4uccwb43ahdj&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://markmail.org/thread/ulki4uccwb43ahdj&lt;/a&gt; , what you are describing still seem to fall in #2 of my list. What do you think?&lt;/p&gt;

&lt;p&gt;Just wanted to link mailing list discussion here. &lt;/p&gt;</comment>
                            <comment id="13529606" author="lhofhansl" created="Wed, 12 Dec 2012 03:54:02 +0000"  >&lt;p&gt;Possibly. This will very much look like a deadlock. Scanners will time out, and it will look like the system has ground to a halt.&lt;br/&gt;
This will be exasperated by large store files. Imagine a 20GB store file and only one reader at a time allowed on it.&lt;/p&gt;

&lt;p&gt;I think we can have a adhoc fix where attempt seek + read and if the istream is locked we&apos;ll switch to pread. That way we get seek + read when possible and pread when necessary.&lt;/p&gt;

&lt;p&gt;There also &lt;b&gt;might&lt;/b&gt; be a mysterious deadlock, but until I see a jstack or am shown code that causes it I&apos;ll be skeptical.&lt;/p&gt;
</comment>
                            <comment id="13529608" author="shrijeet" created="Wed, 12 Dec 2012 04:01:03 +0000"  >&lt;p&gt;Lars, I had put the stack trace here &lt;a href=&quot;https://gist.github.com/4261746&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://gist.github.com/4261746&lt;/a&gt;. It seems my issue is indeed a deadlock but its being triggered via a jvm bug &lt;a href=&quot;http://bugs.sun.com/view_bug.do?bug_id=6822370&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bugs.sun.com/view_bug.do?bug_id=6822370&lt;/a&gt; . &lt;/p&gt;

&lt;p&gt;We recently revisited our GC opts and removed UseMembar flag (did not seem useful). I guess any HBase install running java &amp;lt; 6u21 will potentially hit this deadlock. &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3622&quot; title=&quot;Deadlock in HBaseServer (JVM bug?)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3622&quot;&gt;&lt;del&gt;HBASE-3622&lt;/del&gt;&lt;/a&gt; touched upon it. &lt;/p&gt;

&lt;p&gt;Thanks for your attention. &lt;/p&gt;</comment>
                            <comment id="13529612" author="lhofhansl" created="Wed, 12 Dec 2012 04:09:42 +0000"  >&lt;p&gt;Sorry... Missed the jstack there. I can see that all handlers are waiting to get the lock to load a block, but not where the lock is held. If HDFS is slow that would happen, if there was a deadlock that would also happen. I agree since it appears that all handlers are blocked this could be a deadlock.&lt;/p&gt;</comment>
                            <comment id="13529629" author="eclark" created="Wed, 12 Dec 2012 05:33:19 +0000"  >&lt;p&gt;That&apos;s what we saw too (I can&apos;t remember the java version).  All the handlers were waiting for the lock and nothing was reading from hdfs.  We had guessed either a cpu bug or a java bug.&lt;/p&gt;</comment>
                            <comment id="13529637" author="stack" created="Wed, 12 Dec 2012 05:46:54 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; Can we make a new issue w/ your important finding?  Need to fix.  Do something like &quot;...adhoc fix where attempt seek + read and if the istream is locked we&apos;ll switch to pread. That way we get seek + read when possible and pread when necessary.&quot;  Its pretty critical I&apos;d say.  Opening a pool of readers would be a PITA.&lt;/p&gt;</comment>
                            <comment id="13529640" author="lhofhansl" created="Wed, 12 Dec 2012 05:48:01 +0000"  >&lt;p&gt;Was just about to file a new bug. Will repost my findings there.&lt;/p&gt;</comment>
                            <comment id="13529695" author="ram_krish" created="Wed, 12 Dec 2012 07:20:47 +0000"  >&lt;p&gt;Agree with Elliot here.  It was waiting for a lock and not to read from hdfs.&lt;/p&gt;</comment>
                            <comment id="13531533" author="shrijeet" created="Thu, 13 Dec 2012 21:27:41 +0000"  >&lt;p&gt;After putting UseMembar in GC opts we have not seen the previously reported deadlock. Just wanted to update. &lt;/p&gt;</comment>
                            <comment id="13531555" author="lhofhansl" created="Thu, 13 Dec 2012 21:55:22 +0000"  >&lt;p&gt;Thanks Shrijeet. How reliably have you seen this before (Once a day, once a mongth, etc)?&lt;/p&gt;

&lt;p&gt;If this really causes issues we should:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;ship with -XX:+UseMembar by default in hbase-env.sh&lt;/li&gt;
	&lt;li&gt;document that this must be set&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Are we confident enough this to do that?&lt;/p&gt;</comment>
                            <comment id="13531575" author="shrijeet" created="Thu, 13 Dec 2012 22:20:58 +0000"  >&lt;p&gt;Lars, we saw this twice in two days (once each day, on different region servers).&lt;br/&gt;
It was been 36 hours since we put -XX:+UseMembar back &amp;amp; restarted region servers, have not seen again yet.&lt;/p&gt;

&lt;p&gt;Stack documented this as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3622&quot; title=&quot;Deadlock in HBaseServer (JVM bug?)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3622&quot;&gt;&lt;del&gt;HBASE-3622&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;http://hbase.apache.org/book/trouble.rs.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hbase.apache.org/book/trouble.rs.html&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="13544404" author="hudson" created="Sat, 5 Jan 2013 00:42:23 +0000"  >&lt;p&gt;Integrated in HBase-0.94-security-on-Hadoop-23 #10 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security-on-Hadoop-23/10/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security-on-Hadoop-23/10/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5898&quot; title=&quot;Consider double-checked locking for block cache lock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5898&quot;&gt;&lt;del&gt;HBASE-5898&lt;/del&gt;&lt;/a&gt; Consider double-checked locking for block cache lock (Todd, Elliot, LarsH) (Revision 1408621)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/DoubleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/LruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/SimpleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileDataBlockEncoder.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/TestCacheOnWriteInSchema.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12616035">HBASE-7160</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12623489">HBASE-7336</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12554851">HBASE-5987</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12553277" name="5898-0.94.txt" size="30888" author="lhofhansl" created="Tue, 13 Nov 2012 06:52:38 +0000"/>
                            <attachment id="12525210" name="5898-TestBlocksRead.txt" size="3571" author="zhihyu@ebaysf.com" created="Tue, 1 May 2012 20:19:47 +0000"/>
                            <attachment id="12553048" name="5898-v2.txt" size="6035" author="lhofhansl" created="Sun, 11 Nov 2012 21:41:05 +0000"/>
                            <attachment id="12553057" name="5898-v3.txt" size="8318" author="lhofhansl" created="Sun, 11 Nov 2012 23:17:33 +0000"/>
                            <attachment id="12553266" name="5898-v4.txt" size="30430" author="lhofhansl" created="Tue, 13 Nov 2012 04:43:32 +0000"/>
                            <attachment id="12553215" name="5898-v4.txt" size="30430" author="lhofhansl" created="Mon, 12 Nov 2012 22:52:47 +0000"/>
                            <attachment id="12550536" name="HBASE-5898-0.patch" size="6363" author="eclark" created="Tue, 23 Oct 2012 21:43:58 +0000"/>
                            <attachment id="12552544" name="HBASE-5898-1.patch" size="6365" author="stack" created="Wed, 7 Nov 2012 21:40:25 +0000"/>
                            <attachment id="12550877" name="HBASE-5898-1.patch" size="6365" author="eclark" created="Thu, 25 Oct 2012 21:55:25 +0000"/>
                            <attachment id="12525001" name="hbase-5898.txt" size="2061" author="tlipcon" created="Sun, 29 Apr 2012 03:15:23 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 29 Apr 2012 03:38:54 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>237373</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 49 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i016fj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4811</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>