<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:46:25 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-669/HBASE-669.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-669] MultiRegion transactions with Optimistic Concurrency Control</title>
                <link>https://issues.apache.org/jira/browse/HBASE-669</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;We have a need for ACID transactions across tables. This issue is about adding transactions which span multiple regions.  We do not envision many competing writes, and will be read-dominated in general. This makes Optimistic Concurrency Control (OCC) seem like the way to go.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12397637">HBASE-669</key>
            <summary>MultiRegion transactions with Optimistic Concurrency Control</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="clint.morgan">Clint Morgan</assignee>
                                    <reporter username="clint.morgan">Clint Morgan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 6 Jun 2008 00:08:17 +0000</created>
                <updated>Sun, 13 Sep 2009 22:33:29 +0000</updated>
                            <resolved>Sun, 17 Aug 2008 22:05:07 +0000</resolved>
                                                    <fixVersion>0.18.0</fixVersion>
                                    <component>Client</component>
                    <component>IPC/RPC</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12602867" author="clint.morgan" created="Fri, 6 Jun 2008 00:31:55 +0000"  >&lt;p&gt;This is my current, in-progress, attempt:&lt;/p&gt;

&lt;p&gt;HRegions keep track of read and write sets for each transaction. &lt;/p&gt;

&lt;p&gt;To decide if we commit transaction A, we check for overlap between the read set of A and the write set of all transactions that were commited since A started. If there is overlap, then we must abort. If not the we can commit this transaction without conflict (in the given region).&lt;/p&gt;

&lt;p&gt;Client-side we keep track of all the regions involved in a transaction. When the client asks to commit, we ask all participating regions if it is ok to commit. If so we commit, otherwise we abort.&lt;/p&gt;

&lt;p&gt;This patch contains a few simple tests to communicate the API.&lt;/p&gt;

&lt;p&gt;Still missing are Write Ahead Logs (WALs) on clientside and integrating with the HRegion&apos;s log. &lt;/p&gt;

&lt;p&gt;I would appreciate high-level review/feedback on:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;clientside API&lt;/li&gt;
	&lt;li&gt;implications of this OCC approach on the rest of hbase&lt;/li&gt;
	&lt;li&gt;general implementation approach. Currently I&apos;m subclassing to keep my changes isolated, but this may not be best. EG, I have subclasses of HRegionServer that do both transactions and secondary indexes. How do I get both? A mixin/AOP approach may work better here...&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="12603631" author="clint.morgan" created="Mon, 9 Jun 2008 18:08:20 +0000"  >&lt;p&gt;Current version:&lt;/p&gt;

&lt;p&gt;Added StressTestTransactions which tries to do a lot of conflicting transactions. This was useful in finding some subtle issues with synchronization and the commit protocol, and gives me some confidence that everything is working properly.&lt;/p&gt;

&lt;p&gt;still TODO:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;integrate with regionserver&apos;s WAL&lt;/li&gt;
	&lt;li&gt;come up with global transaction log solution. This log is only read when there has been a failure during the commit process: Regionservers are holding a COMMIT_PENDING transaction (they voted to commit, but have not heard the final, global solution) and never hear back the client. Or a regionserver crashes, restarts, looks at his WAL and sees entries for a transaction, but no final decision (commit or abort).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have a simple interface for the transaction logger client, and I&apos;m considering implementations in hdfs, zookeeper, or a specialized transaction server backed by hdfs. A pure hdfs implementation is attractive because it requires no additional infrastructure/servers, however performance will not be good as we will just be writing lots of small, short lived files. (All we need is ability to get unique transactionId&apos;s, and map between transactionId&apos;s and transaction state)&lt;/p&gt;

&lt;p&gt;So now I&apos;m leaning toward a special-purpose server which could run alongside the master...&lt;/p&gt;</comment>
                            <comment id="12603966" author="stack" created="Tue, 10 Jun 2008 18:32:02 +0000"  >&lt;p&gt;Couple of quick comments in no particular order after cursory read (so some of the questions might be extra dumb):&lt;/p&gt;

&lt;p&gt;+ The client runs the delete edits to invalidate the transaction?  (By replaying the edits out of the client-side WAL)?  If so, can it be done regionserver side?  If client lease expires or client cancels the transaction, the regionserver does the undo operations?&lt;br/&gt;
+ Good stuff making HTable, etc. subclassable.  If you want to do these changes as a separate patch, I&apos;ll just commit it so you don&apos;t have to reproduce it in this and your secondary index patch.  Make an issue.&lt;br/&gt;
+ On, feedback regards how to have more than one regionserver implementation &amp;#8211; transactional and secondary indices &amp;#8211; I think yeah, probably has to be some mixin factility.  I can see this transactional stuff eventually making it into core.&lt;br/&gt;
+ I don&apos;t get the global transaction log doohickey.  Why not just have regionservers just discard COMMIT_PENDING if lease times out or on restart, comes across a COMMIT_PENDING replaying?&lt;br/&gt;
+ We&apos;re trying to get zookeeper into the mix tout-de-suite.  Then you wouldn&apos;t have to do a custom server?&lt;br/&gt;
+ Classes are missing licenses.  Some of those that have them, have 2007 as date.&lt;br/&gt;
+ On &apos;// FIXME, not sure why this is needed, but copied over from HTable&apos;, you want to use Arrays.toArray or some such? (I ain&apos;t sure why its there either)&lt;br/&gt;
+ Why pass transaction state when doing scan/get reads?&lt;br/&gt;
+ Add a package info under client transactional that explains what this feature is, how it works and how to use it (will help others get invovled).&lt;br/&gt;
+ TransctionalState on server side should inherit from the client TransactionState?  They have mostly same enums?&lt;br/&gt;
+ I applied your getBytes.toInt ...&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-676&quot; title=&quot;Bytes.getInt returns a long&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-676&quot;&gt;&lt;del&gt;HBASE-676&lt;/del&gt;&lt;/a&gt; (thanks)&lt;/p&gt;




</comment>
                            <comment id="12603981" author="clint.morgan" created="Tue, 10 Jun 2008 19:02:39 +0000"  >&lt;p&gt;I basically followed the original OCC paper with modifications for a distributed commit protocol (because we have multiple parties involved). That paper is available here: &lt;a href=&quot;http://www.seas.upenn.edu/~zives/cis650/papers/opt-cc.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.seas.upenn.edu/~zives/cis650/papers/opt-cc.pdf&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;&amp;gt; The client runs the delete edits to invalidate the transaction? &lt;/p&gt;

&lt;p&gt;No, we don&apos;t apply the edits until after the global commit decision has been made. As they come into the regionserver they are WAL&apos;ed and stored with the transaction state until a commit.&lt;/p&gt;

&lt;p&gt;&amp;gt; I don&apos;t get the global transaction log doohickey. Why not just have regionservers just discard COMMIT_PENDING if lease times out or on restart, comes across a COMMIT_PENDING replaying?&lt;/p&gt;

&lt;p&gt;This is to handle the case where we voted to commit and then either regionserver or the client dies. Its possible that the client told everyone else to commit, so if we disregarded our part of the transaction the we loose the AC from ACID.&lt;/p&gt;

&lt;p&gt;+ We&apos;re trying to get zookeeper into the mix tout-de-suite. Then you wouldn&apos;t have to do a custom server?&lt;/p&gt;

&lt;p&gt;Yeah, that would be ideal.&lt;/p&gt;

&lt;p&gt;&amp;gt; Why pass transaction state when doing scan/get reads?&lt;br/&gt;
We need this to check for conflicts. If we read a row that was later written (in a transaction that committed in the meantime) the we have to abort the read transaction.&lt;/p&gt;

&lt;p&gt;&amp;gt; TransctionalState on server side should inherit from the client TransactionState? They have mostly same enums?&lt;/p&gt;

&lt;p&gt;Yeah this probably makes sense. &lt;/p&gt;

&lt;p&gt;Thanks for review.&lt;/p&gt;</comment>
                            <comment id="12604045" author="clint.morgan" created="Tue, 10 Jun 2008 21:15:03 +0000"  >&lt;p&gt;&amp;gt; On &apos;// FIXME, not sure why this is needed, but copied over from HTable&apos;, you want to use Arrays.toArray or some such? (I ain&apos;t sure why its there either)&lt;/p&gt;

&lt;p&gt;Why can&apos;t we just &apos;return values;&apos;? Seems to me all the following code does is make a copy of the values array:&lt;/p&gt;

&lt;p&gt;&amp;lt;code&amp;gt;&lt;/p&gt;

&lt;p&gt;    if (values != null) {&lt;br/&gt;
      ArrayList&amp;lt;Cell&amp;gt; cellValues = new ArrayList&amp;lt;Cell&amp;gt;();&lt;br/&gt;
      for (int i = 0 ; i &amp;lt; values.length; i++) &lt;/p&gt;
{
        cellValues.add(values[i]);
      }
&lt;p&gt;      return cellValues.toArray(new Cell&lt;span class=&quot;error&quot;&gt;&amp;#91;values.length&amp;#93;&lt;/span&gt;);&lt;br/&gt;
    }&lt;br/&gt;
    return null;&lt;/p&gt;

&lt;p&gt;&amp;lt;/code&amp;gt;&lt;/p&gt;

&lt;p&gt;maybe thats just remains of a past, no longer needed conversion? &lt;/p&gt;</comment>
                            <comment id="12604071" author="stack" created="Tue, 10 Jun 2008 22:54:20 +0000"  >&lt;p&gt;I committed change that just returns &apos;values&apos;.  Thanks.&lt;/p&gt;</comment>
                            <comment id="12604084" author="clint.morgan" created="Wed, 11 Jun 2008 00:11:22 +0000"  >&lt;p&gt;This patch includes an attempt at integrating with the HLog&lt;/p&gt;

&lt;p&gt;We add log messages from transaction operations START, WRITE, COMMIT, and ABORT.&lt;/p&gt;

&lt;p&gt;transactional writes are written to the HLog as they are received (before the commit decision has been made). When we actually decide to commit, we just write the COMMIT message to the log, and the apply all of the BatchUpdates &lt;b&gt;without&lt;/b&gt; logging them.&lt;/p&gt;

&lt;p&gt;To restore from the log we scan though, keeping track of all the WRITES for a given transactionId, and when we see the COMMIT message we go ahead and apply the writes. If we don&apos;t see a COMMIT or ABORT message, the we have to go to the transaction log to see what happened to the transaction.&lt;/p&gt;

&lt;p&gt;So this means that in order to restore a transaction, we need to look at all of the log entries for the transaction. To ensure this, we need to fiddle with the commitSequenceId that is written as we flush to the HLog. When we flush, we need to use the minimum sequence Id from the START messages from all transactions that are currently pending. That way when we go to recover we will have all those pending transaction&apos;s log messages...&lt;/p&gt;

&lt;p&gt;Adding this behavior was kinda messy because:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HLog recover takes place in each HStore, but I need to recover at the region level (because transactions cross stores). This means the HLog is being scanned once for each HStore which seems ineffecient. I added a hook for the region to do it&apos;s log recovery that I use in TransactionalRegion.&lt;/li&gt;
	&lt;li&gt;HLog/HLogEdit/HLogKey are not easily subclassable.&lt;/li&gt;
	&lt;li&gt;Log writing concerns are in HLog, while reading is in HStore.&lt;/li&gt;
	&lt;li&gt;Log recovery took place in the constructor of HRegion. I put this in an initialize() method for the HRegion so that HRegion&apos;s subclass constructors can run before they process a log.&lt;/li&gt;
	&lt;li&gt;startSequence fiddling as described above&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I have a test to make sure that reading/writing from the log works, but to have any confidence in this I need to test in the broader context where hregion is driving the writes. So I&apos;d like to bring up a cluster, do some operations, be sure that some stuff was not flushed, bring down a regionserver hard, and bring it back up such that it recovers from log. I did not see any such tests of the current WAL.... &lt;/p&gt;

&lt;p&gt;Would really appreciate a review of this approach from someone more familiar with logging/flushing process than I.&lt;/p&gt;</comment>
                            <comment id="12605374" author="clint.morgan" created="Mon, 16 Jun 2008 18:59:21 +0000"  >&lt;p&gt;Latest patch. Testing of hlog recovery. &lt;/p&gt;</comment>
                            <comment id="12615837" author="clint.morgan" created="Wed, 23 Jul 2008 00:14:03 +0000"  >&lt;p&gt;updated version applies to trunk, fixes a few bugs in prev version&lt;/p&gt;</comment>
                            <comment id="12618559" author="clint.morgan" created="Wed, 30 Jul 2008 23:45:02 +0000"  >&lt;p&gt;newest version. Fixes bug when reading from cells that have been previously written from the same transaction.&lt;/p&gt;</comment>
                            <comment id="12621978" author="stack" created="Tue, 12 Aug 2008 21:09:58 +0000"  >&lt;p&gt;I tried to apply last patch Clint. Fails in HTable.  I&apos;d like to commit this.  It has a bunch of unit tests so its at least basically working.  Blocker is lack of package documentation.  Please add a package.html (see thrift package for example) or a package-info.java (e.g. mapred package) that explains what this is all about with pointer to the OCC paper and a basic howto on what configuration is needed to make a transactional hbase float.  Thanks Clint.&lt;/p&gt;</comment>
                            <comment id="12623214" author="clint.morgan" created="Sun, 17 Aug 2008 19:18:41 +0000"  >&lt;p&gt;Attaching current version: a few fixes, documentation, and cleanup.&lt;/p&gt;

&lt;p&gt;I think this is ready for commit. The main remaining issue is correctly recovering from the HLog in event of crash. After this patch is applied, I&apos;ll create a new JIRA to track that work.&lt;/p&gt;

&lt;p&gt;Running full tests now...&lt;/p&gt;</comment>
                            <comment id="12623220" author="gottesmm" created="Sun, 17 Aug 2008 20:08:00 +0000"  >&lt;p&gt;+1. I have been using this without any issues for the past few weeks.&lt;/p&gt;</comment>
                            <comment id="12623235" author="stack" created="Sun, 17 Aug 2008 22:05:07 +0000"  >&lt;p&gt;Committed (fixed up a few of the licenses &amp;#8211; said 2007 &amp;#8211; and added on to TestHLogRecover).&lt;/p&gt;

&lt;p&gt;Thanks for the sweet new feature Clint.&lt;/p&gt;</comment>
                            <comment id="12623396" author="jimk" created="Mon, 18 Aug 2008 16:22:18 +0000"  >&lt;p&gt;&amp;gt; Clint Morgan - 17/Aug/08 12:18 PM&lt;br/&gt;
&amp;gt; Attaching current version: a few fixes, documentation, and cleanup.&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; I think this is ready for commit. The main remaining issue is correctly recovering from the HLog in event&lt;br/&gt;
&amp;gt; of crash.&lt;/p&gt;

&lt;p&gt;How would this recovery be different from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-728&quot; title=&quot;Supporting for HLog appends&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-728&quot;&gt;&lt;del&gt;HBASE-728&lt;/del&gt;&lt;/a&gt; combined with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-698&quot; title=&quot;HLog recovery is not performed after master failure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-698&quot;&gt;&lt;del&gt;HBASE-698&lt;/del&gt;&lt;/a&gt; ?&lt;/p&gt;</comment>
                            <comment id="12623580" author="clint.morgan" created="Tue, 19 Aug 2008 06:55:40 +0000"  >&lt;p&gt;When replaying a hlog, we need to track transaction start, write, commit, and abort messages and react appropriately. This contrasts with the normal logic of simply replaying HLog edits at the hstore level. I have this logic in place (see changes to HLog, HLogEdit, HLogKey), but have not fully tested it. There are a couple of tricky/sublte issues there that I&apos;m not sure I&apos;ve gotten right. EG, the min sequence number that we have to look at for recovery is not simply that of the last flush. Rather it depends on the min seq numbers of the start messages of pending transactions at the time of hlog flush...&lt;/p&gt;

&lt;p&gt;Also, if we crash at just the right time, we could have committed pieces of a transaction in other regions, but not have the commit message in the log for this region. In this case, we need to lookup the transaction state (commited/aborted) in a global transaction log. I&apos;d like to put this global transaction log in Zookeper when its in the mix.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12390273">HBASE-493</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12401756">HBASE-798</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12383698" name="hbase-669-v2.patch" size="100804" author="clint.morgan" created="Mon, 9 Jun 2008 18:08:20 +0000"/>
                            <attachment id="12383796" name="hbase-669-v3.patch" size="155363" author="clint.morgan" created="Wed, 11 Jun 2008 00:11:22 +0000"/>
                            <attachment id="12384081" name="hbase-669-v4.patch" size="159204" author="clint.morgan" created="Mon, 16 Jun 2008 18:59:21 +0000"/>
                            <attachment id="12386670" name="hbase-669-v5.patch" size="164831" author="clint.morgan" created="Wed, 23 Jul 2008 00:14:03 +0000"/>
                            <attachment id="12388391" name="hbase-669.patch" size="170558" author="clint.morgan" created="Sun, 17 Aug 2008 19:18:41 +0000"/>
                            <attachment id="12387243" name="hbase-669.patch" size="163429" author="clint.morgan" created="Wed, 30 Jul 2008 23:45:02 +0000"/>
                            <attachment id="12383520" name="hbase-669.patch" size="73489" author="clint.morgan" created="Fri, 6 Jun 2008 00:31:55 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 10 Jun 2008 18:32:02 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31806</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 18 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0h8pz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98675</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>