<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:32:26 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-5950/HBASE-5950.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-5950] Add a decimal comparator for Filter</title>
                <link>https://issues.apache.org/jira/browse/HBASE-5950</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Suppose we have a requirement like below:&lt;/p&gt;

&lt;p&gt;we want to get the rows with one specified column value larger than A and less than B.&lt;br/&gt;
(They are all decimals or integers)&lt;br/&gt;
namely:                         &lt;br/&gt;
       A &amp;lt; Integer.valueof(column) &amp;lt; B&lt;/p&gt;

&lt;p&gt;Use BinaryComparator will not help us to archive that goal:&lt;br/&gt;
e.g.   suppose A = 100, B = 200, one column value is 110000.&lt;br/&gt;
   So it can satisfy that condition, but it&apos;s not the row we wanted.&lt;/p&gt;

&lt;p&gt;So I suggest to add one comparator to help implementing this.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12554155">HBASE-5950</key>
            <summary>Add a decimal comparator for Filter</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="jeason">Jieshan Bean</assignee>
                                    <reporter username="jeason">Jieshan Bean</reporter>
                        <labels>
                    </labels>
                <created>Mon, 7 May 2012 12:37:46 +0000</created>
                <updated>Wed, 13 May 2015 14:22:07 +0000</updated>
                                            <version>0.94.0</version>
                    <version>0.95.2</version>
                                                    <component>Filters</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13461731" author="ram_krish" created="Mon, 24 Sep 2012 11:01:59 +0000"  >&lt;p&gt;Infact for comparing the negative and positive numbers we need a similar comparator.&lt;br/&gt;
Otherwise Binary Comparator will represent -6 to be greater than -5.&lt;/p&gt;</comment>
                            <comment id="13461734" author="jeason" created="Mon, 24 Sep 2012 11:10:13 +0000"  >&lt;p&gt;This comparator is not needed if we store the Integer/Double/Float as bytes directly. Right?&lt;/p&gt;</comment>
                            <comment id="14541430" author="anoop.hbase" created="Wed, 13 May 2015 06:18:59 +0000"  >&lt;p&gt;Yes if the Integer/Double/Float values are stored by converting into its bytes form, the existing comparator itself can work correctly. All values to have the same type. You can not have one value int 101 converted to its bytes form and another 100.1 converted to its bytes form. The comparator  will give wrong results. 101 should be converted to bytes form of 101.0&lt;br/&gt;
So do we really need new comparator ?&lt;/p&gt;</comment>
                            <comment id="14541953" author="bhupendra" created="Wed, 13 May 2015 14:04:18 +0000"  >&lt;p&gt;I think, For Numeric comparison of positive and negative value, Binary comparator will not be sufficient enough. Consider below scenarios&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;    // Scenario 1 : Compare Negative double value with Negative double value using Binary Comparator&lt;br/&gt;
    double d1 = -4.0d;&lt;br/&gt;
    double d2 = -5.0d;&lt;br/&gt;
    BinaryComparator cp = new BinaryComparator(Bytes.toBytes(d1));&lt;br/&gt;
    assertEquals(1, cp.compareTo(Bytes.toBytes(d2))); //FAIL&lt;/p&gt;


&lt;p&gt;    // Scenario 2 : Compare Negative long value with Negative long value using Binary Comparator&lt;br/&gt;
    long l1 = -4L;&lt;br/&gt;
    long l2 = -5L;&lt;br/&gt;
    BinaryComparator cp1 = new BinaryComparator(Bytes.toBytes(l1));&lt;br/&gt;
    assertEquals(1, cp1.compareTo(Bytes.toBytes(l2))); //PASS&lt;/p&gt;


&lt;p&gt;    // Scenario 3 : Compare positive long value with Negative long value using Binary Comparator&lt;br/&gt;
    long l3 = 4L;&lt;br/&gt;
    long l4 = -5L;&lt;br/&gt;
    BinaryComparator cp2 = new BinaryComparator(Bytes.toBytes(l3));&lt;br/&gt;
    assertEquals(1, cp2.compareTo(Bytes.toBytes(l4))); //FAIL&lt;/p&gt;


&lt;p&gt;    // Scenario 4 : Compare positive long value with Negative long value using Long Comparator&lt;br/&gt;
    long l5 = 4L;&lt;br/&gt;
    long l6 = -5L;&lt;br/&gt;
    LongComparator cp3 = new LongComparator(l5);&lt;br/&gt;
    assertEquals(1, cp3.compareTo(Bytes.toBytes(l6))); //PASS&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To compare the Non decimal values, LongComparator is sufficient. Similar way to compare the Decimal Values , DecimalComparator will be required. &lt;br/&gt;
May be there is some other better way which I am not aware ....  Am I missing something ? &lt;/p&gt;</comment>
                            <comment id="14541965" author="ashish singhi" created="Wed, 13 May 2015 14:17:16 +0000"  >&lt;blockquote&gt;
&lt;p&gt;// Scenario 3 : Compare positive long value with Negative long value using Binary Comparator&lt;br/&gt;
long l3 = 4L;&lt;br/&gt;
long l4 = -5L;&lt;br/&gt;
BinaryComparator cp2 = new BinaryComparator(Bytes.toBytes(l3));&lt;br/&gt;
assertEquals(1, cp2.compareTo(Bytes.toBytes(l4))); //FAIL&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Why not use LongComparator here ? If we use that I am sure it will pass.&lt;/p&gt;</comment>
                            <comment id="14541983" author="ashish singhi" created="Wed, 13 May 2015 14:22:07 +0000"  >&lt;p&gt;Ok. I get your point ignore the above comment.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 24 Sep 2012 11:01:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>238381</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 31 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0huc7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>102177</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>