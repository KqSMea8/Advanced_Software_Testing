<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:57:38 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-8693/HBASE-8693.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-8693] DataType: provide extensible type API</title>
                <link>https://issues.apache.org/jira/browse/HBASE-8693</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description></description>
                <environment></environment>
        <key id="12651164">HBASE-8693</key>
            <summary>DataType: provide extensible type API</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12636797">HBASE-8089</parent>
                                    <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ndimiduk">Nick Dimiduk</assignee>
                                    <reporter username="ndimiduk">Nick Dimiduk</reporter>
                        <labels>
                    </labels>
                <created>Wed, 5 Jun 2013 17:31:28 +0000</created>
                <updated>Mon, 6 Jan 2014 20:47:02 +0000</updated>
                            <resolved>Sun, 11 Aug 2013 23:46:52 +0000</resolved>
                                                    <fixVersion>0.98.0</fixVersion>
                    <fixVersion>0.95.2</fixVersion>
                                    <component>Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>16</watches>
                                                                <comments>
                            <comment id="13692438" author="ndimiduk" created="Mon, 24 Jun 2013 22:08:15 +0000"  >&lt;p&gt;WIP. This patch introduces an extensible data types API for HBase. It is inspired by the following systems:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;PostgreSQL. Postgres has a user-extensible data type API, which has been used to great effect by it&apos;s user community (ie, PostGIS). The desire is for HBase to expose an equally extensible data type API. One aspect of the Postgres data type is the ability to provide equivalence functions for index operations. This appears to be of critical performance utility for its execution engine.&lt;/li&gt;
	&lt;li&gt;Orderly. Orderly handles the issue of compound rowkeys by providing convenience classes for handling these kinds of data types. This influence is reflected in the Struct and Union family of classes.&lt;/li&gt;
	&lt;li&gt;Phoenix. The PDataType enum used in Phoenix provides type hints, similar Postgres&apos;s equivalence functions. These appear to be used during query execution for numerical type promotion.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This initial WIP patch is intended to take a first cut at exercising the OrderedBytes API, particularly around numerical value support. The other intention is to establish the set of data types HBase should provide out of the box. The final intention of this WIP patch is to shop around the data types and API for their definition with a wider audience. Feedback from maintainers of both Phoenix and the Pig, Hive, and Impala HBase interoperability layers is desired.&lt;/p&gt;

&lt;p&gt;Patch TODOs include:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;proper implementation of isComparableTo and isCoercibleTo&lt;/li&gt;
	&lt;li&gt;test coverage&lt;/li&gt;
	&lt;li&gt;javadocs&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13692447" author="ndimiduk" created="Mon, 24 Jun 2013 22:17:16 +0000"  >&lt;p&gt;on rb: &lt;a href=&quot;https://reviews.apache.org/r/12069/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/12069/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(cc &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dmeil&quot; class=&quot;user-hover&quot; rel=&quot;dmeil&quot;&gt;Doug Meil&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=giacomotaylor&quot; class=&quot;user-hover&quot; rel=&quot;giacomotaylor&quot;&gt;James Taylor&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=owen.omalley&quot; class=&quot;user-hover&quot; rel=&quot;owen.omalley&quot;&gt;Owen O&apos;Malley&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ashutoshc&quot; class=&quot;user-hover&quot; rel=&quot;ashutoshc&quot;&gt;Ashutosh Chauhan&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=alangates&quot; class=&quot;user-hover&quot; rel=&quot;alangates&quot;&gt;Alan Gates&lt;/a&gt;)&lt;/p&gt;</comment>
                            <comment id="13692489" author="ndimiduk" created="Mon, 24 Jun 2013 22:37:53 +0000"  >&lt;p&gt;A note regarding variable length encodings. Variable vs fixed-width encodings was a highlighted point during conversations around &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7221&quot; title=&quot;[experiment] RowKey utility class for rowkey construction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7221&quot;&gt;&lt;del&gt;HBASE-7221&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt;. These data type implementations make exclusive use of the &lt;tt&gt;OrderedBytes&lt;/tt&gt; encodings. That is because my thinking around them thus far is focused on use as rowkeys and column qualifiers. However, this requirement isn&apos;t strictly necessary for use in values. I noticed a rough analogy in Postgres&apos;s data type implementation is the distinction between the encoding used to store data and the encoding used for an index entry.&lt;/p&gt;

&lt;p&gt;Do you think we should have a similar kind of dichotomy for encoding into order-preserving context vs non-order-preserving context? My initial thinking is probably not (due to additional API surface area), but I want to have the conversation.&lt;/p&gt;</comment>
                            <comment id="13692855" author="nkeywal" created="Tue, 25 Jun 2013 08:54:30 +0000"  >&lt;p&gt;You kept the java name for all types, except BigDecimal, is there a reason?&lt;br/&gt;
Some unit tests could help to see how it should be used. For example, the constructors are private, I was wondering if one would not want to create these objects from core java classes (i.e.: create a hbase.Double from a java double).&lt;/p&gt;</comment>
                            <comment id="13693214" author="ndimiduk" created="Tue, 25 Jun 2013 18:01:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;You kept the java name for all types, except BigDecimal, is there a reason?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The data types come from the (outdated) spec posted on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8089&quot; title=&quot;Add type support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8089&quot;&gt;HBASE-8089&lt;/a&gt;. I believe there is value in choosing types that are meaningful in a SQL context, but we shouldn&apos;t limit our thinking on this to what was laid down 30 years ago.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Some unit tests could help to see how it should be used.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed. Look for those in a followup patch. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;For example, the constructors are private...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The idea is instances of &lt;tt&gt;HDataType&lt;/tt&gt; are type definitions, not data values. For instance, the &lt;tt&gt;o.a.h.h.t.Decimal#DECIMAL&lt;/tt&gt; instance is the definition of how to encode,decode values and how values of this type relate to values of other types. It does not represent a numeric value.&lt;/p&gt;</comment>
                            <comment id="13693632" author="stack" created="Wed, 26 Jun 2013 04:51:30 +0000"  >&lt;p&gt;Should this work be in hbase-common rather than in hbase-client?  They are client facility at first but one day they might go server-side.  Also, easier adding to hbase-common than to hbase-client.  Unless they have dependencies?&lt;/p&gt;

&lt;p&gt;What is Order here?&lt;/p&gt;

&lt;p&gt;+  /**&lt;br/&gt;
+   * Write instance &amp;lt;code&amp;gt;v&amp;lt;/code&amp;gt; into buffer &amp;lt;code&amp;gt;b&amp;lt;/code&amp;gt;.&lt;br/&gt;
+   */&lt;br/&gt;
+  public abstract void write(ByteBuffer b, T v, Order ord);&lt;/p&gt;


&lt;p&gt;When would I use isCoercibleTo?&lt;/p&gt;

&lt;p&gt;I see a read on Union4 but not a write.  That intentional?  The union3 will take care of it?  Ditto union3...&lt;/p&gt;

&lt;p&gt;How I describe a Struct outside of a Struct (JSON to describe how to make one?)&lt;/p&gt;

&lt;p&gt;Whats a Binary?&lt;/p&gt;

&lt;p&gt;Agree that example usage would help.&lt;/p&gt;

&lt;p&gt;Do we need all these types?&lt;/p&gt;

&lt;p&gt;Good stuff N.&lt;/p&gt;

&lt;p&gt;I think you should post today&apos;s slides here too; they are good on the high-level.&lt;/p&gt;</comment>
                            <comment id="13694262" author="ndimiduk" created="Wed, 26 Jun 2013 21:41:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should this work be in hbase-common rather than in hbase-client?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Initial conversations required the type stuff not be in common. I agree, it makes more sense there and I think that community opinion is changing. The current implementation doesn&apos;t bring in any dependencies, so it should be painless.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What is Order here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;tt&gt;Order&lt;/tt&gt; is a component from the &lt;tt&gt;OrderedBytes&lt;/tt&gt; implementation (see patch on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8201&quot; title=&quot;OrderedBytes: an ordered encoding strategy&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8201&quot;&gt;&lt;del&gt;HBASE-8201&lt;/del&gt;&lt;/a&gt;). It enables users to store data sorted in ascending or descending order. Right now it&apos;s mostly a vestigial appendage; I don&apos;t know how the data types API wants to expose and consume this functionality. I&apos;m hoping to gain insight from Phoenix, Kiji, &amp;amp;c in future reviews.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When would I use isCoercibleTo?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This comes from examination of Phoenix&apos;s &lt;tt&gt;PDataType&lt;/tt&gt;. My understanding is, in the absence of secondary indices, the query planner can use type coercion to its advantage. This is the part of the data type API that I understand the least. I&apos;m hoping for more clarity from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=giacomotaylor&quot; class=&quot;user-hover&quot; rel=&quot;giacomotaylor&quot;&gt;James Taylor&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I see a read on Union4&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds like a bug to me.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How I describe a Struct outside of a Struct..?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Examples to follow.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Whats a Binary?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Equivalent to SQL BLOB. This is how a user can inject good old fashion &lt;tt&gt;byte[]}}s into a {{Struct&lt;/tt&gt; or &lt;tt&gt;Union&lt;/tt&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do we need all these types?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Great question. That conversation is happening up on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8089&quot; title=&quot;Add type support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8089&quot;&gt;HBASE-8089&lt;/a&gt;. My preference is no, but I think the SQL guys want more of these for better interoperability between them.&lt;/p&gt;</comment>
                            <comment id="13706081" author="ndimiduk" created="Thu, 11 Jul 2013 18:29:25 +0000"  >&lt;p&gt;This patch extends the list of provided types to include &quot;legacy&quot; types, intended to ease user transition of existing applications. It also extends the test coverage and addresses some of &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&apos;s comments on the earlier draft. Also of interest primarily to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=giacomotaylor&quot; class=&quot;user-hover&quot; rel=&quot;giacomotaylor&quot;&gt;James Taylor&lt;/a&gt;, it defers the &lt;tt&gt;isComparableTo&lt;/tt&gt;/&lt;tt&gt;isCoercableTo&lt;/tt&gt; API conversation to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8863&quot; title=&quot;Enhance data type API with type vs type comparison methods&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8863&quot;&gt;HBASE-8863&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13706083" author="ndimiduk" created="Thu, 11 Jul 2013 18:30:27 +0000"  >&lt;p&gt;Marking as patch available to that it&apos;s clear the patch is ready for a proper review. Will fail BuildBot because its dependency isn&apos;t committed yet.&lt;/p&gt;</comment>
                            <comment id="13710336" author="ndimiduk" created="Tue, 16 Jul 2013 21:56:04 +0000"  >&lt;p&gt;RB is down at the moment. I have some incremental work on github, including an &lt;a href=&quot;https://github.com/ndimiduk/hbase/commit/c07c1c4f0187b78169b11f3a1ed20d9d268f5b65&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;example&lt;/a&gt; of using &lt;tt&gt;HDataType&lt;/tt&gt; in &lt;tt&gt;HRegionInfo&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I&apos;m thinking I want to rename &lt;tt&gt;HDataType#{read,write&lt;/tt&gt;} to &lt;tt&gt;HDataType#{decode,encode&lt;/tt&gt;}. Thoughts?&lt;/p&gt;</comment>
                            <comment id="13710457" author="ndimiduk" created="Tue, 16 Jul 2013 23:23:21 +0000"  >&lt;p&gt;This patch introduces the isSkippable() api to HDataType. It provides a StructBuilder helper for dealing with anonymous Structs. It adds Wrappers for making an existing type Terminated or of FixedLength. It also corrects some copy-paste errors in initial implementations of some of the Legacy types.&lt;/p&gt;</comment>
                            <comment id="13710476" author="ndimiduk" created="Tue, 16 Jul 2013 23:37:21 +0000"  >&lt;p&gt;Per &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt;&apos;s comment, this is an example of using the HDataType classes to manage HRegionInfo&apos;s regionName. It could probably be taken a step further to manage the MD5Hash as a LegacyBytesFixedLength subclass. That would allow the total size of the allocated buffer to be calculated with HREGIONINFO_NEW_CODEC#encodedLength() instead of by hand.&lt;/p&gt;</comment>
                            <comment id="13711250" author="ndimiduk" created="Wed, 17 Jul 2013 16:32:48 +0000"  >&lt;p&gt;Moving &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt;&apos;s comment from the dev list back to JIRA:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I was looking at the &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8693&quot; title=&quot;DataType: provide extensible type API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8693&quot;&gt;&lt;del&gt;HBASE-8693&lt;/del&gt;&lt;/a&gt; patch, and looks good to me for the primitive types.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks, and I&apos;m glad to hear it. Any comments about redundant or missing types a user would expect out of the box?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;but I can&apos;t see how do you plan to evolve stuff like the struct.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Struct is a programatic data structure, not a tool for schema management. It has no concept of &quot;upgrade Struct Foo, version 1 to Foo version 2 by adding a new field in the middle here and changing the last one from X to Y.&quot; It&apos;s a convenience for manipulating complex &lt;tt&gt;byte[]&lt;/tt&gt; structures. Schema management may become of concern for HBase, but that&apos;s out of scope. Any chance this topic came up at yesterday&apos;s meetup?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;By &quot;evolve&quot; I mean add/remove fields, or just query it with a subset of fields. the fields don&apos;t have an id, and on read you must specify all of them in the same order as you&apos;ve used for write. (but maybe is just an immutable/fixed list of fields, and I&apos;m ok with just adding that info to the comment on top of the class)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I discovered this missing API while working through the example use patch, above. The update I posted on RB yesterday adds an API for accessing a specific struct member by position. If RB links work, take a look at &lt;a href=&quot;https://reviews.apache.org/r/12069/diff/2-3/#12.21&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Struct#read(ByteBuffer, int)&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13711708" author="mbertozzi" created="Wed, 17 Jul 2013 22:12:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;Struct is a programatic data structure, not a tool for schema management. It has no concept of &quot;upgrade Struct Foo, version 1 to Foo version 2 by adding a new field in the middle here and changing the last one from X to Y.&quot; It&apos;s a convenience for manipulating complex byte[] structures. Schema management may become of concern for HBase, but that&apos;s out of scope.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ok, make sense with this limited scope (no schema) have a fixed list of fields.&lt;/p&gt;

&lt;p&gt;My main concern is: I start use 96 with this struct encoding... is fixed so I can&apos;t add  fields.. so I work around it adding a version number in front of the struct and then I do the switch for v1, v2, v3 with all the fixed struct that I know...&lt;/p&gt;

&lt;p&gt;...later I switch to a future release that have the code for table schema that &quot;half&quot; relies on this patch. How can I map my data? since I&apos;ve done some tricks for my versioning I probably can&apos;t do anything... and I must rewrite everything..&lt;/p&gt;

&lt;p&gt;as you said, data evolution is out of the scope. so if you consider this patch just as a  &quot;smarter&quot; alternative to the Bytes encoding. feel free to ignore my comments since this stuff already looks good to me as it is.&lt;/p&gt;</comment>
                            <comment id="13711775" author="ndimiduk" created="Wed, 17 Jul 2013 23:05:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;Ok, make sense with this limited scope (no schema) have a fixed list of fields.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right. In this implementation Struct is a simple concatenation of fields. No schema information is written into that concatenation because to do so will mess with sort order. Struct is merely API convenience. Now, the field encodings implemented in OrderedBytes include a header byte which is currently used to identify the type of encoded field that follows. The full space of 256 available bit patterns in that header bit is not consumed by the current implementation. I&apos;ve been thinking about extending that header byte to include some version bits at the very beginning. That would enable evolution of the individual field encodings (say, if you later want to re-implement blob-mid, for example). This doesn&apos;t address the user-level logical structure of a Struct data type, only evolution of the OrderedBytes codec.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My main concern is: I start use 96 with this struct encoding... is fixed so I can&apos;t add fields.. so I work around it adding a version number in front of the struct and then I do the switch for v1, v2, v3 with all the fixed struct that I know...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Prepending a version number to the Struct&apos;s members will impact sort order. Struct definition is fixed in that you can&apos;t prepend or interpose a new field in the middle of an existing encoded value. You&apos;re free to append fields. Appending a field would look like the following:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;application defines Struct v0 with members &lt;span class=&quot;error&quot;&gt;&amp;#91;A,B,C&amp;#93;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;application writes lots of data&lt;/li&gt;
	&lt;li&gt;application changes, Struct v1 becomes &lt;span class=&quot;error&quot;&gt;&amp;#91;A,B,C,D,E&amp;#93;&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;application writes lots more data&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;At step 3, the application now needs to become version aware. Because the fields of v0 are a subset of v1, the application can use the definition of struct v1 with the following safe-guards. (1) Any place where v0 was used, it now needs to be sure to check for end-of-buffer and skip over the two new elements. (2) Anywhere v1 is used, mindful of truncated records and be prepared to only receive the v0 fields. Maybe the API defined around Struct can be improved to support these needs?&lt;/p&gt;

&lt;p&gt;Records of v0 and v1 can be intermixed, ie, as rowkeys in the same table. According to the documented sort semantics, they&apos;ll sort &quot;left-to-right and depth-first&quot;. Meaning, they&apos;ll sort first according to v0 values and then within that group, by v1 values.&lt;/p&gt;

&lt;p&gt;We leave all of this up to user applications today, so this change management isn&apos;t mitigated. Changing a compound rowkey today requires rewriting data (or duplication into a new table). A smarter struct encoding, one that&apos;s able to preserve the sorted semantics I&apos;ve described but that can also track more sophisticated schama change would be very useful indeed &amp;#8211; I don&apos;t think it exists.&lt;/p&gt;

&lt;p&gt;Prepending a version field to a Struct will change the sorting behavior; v0 will sort before v1, &amp;amp;c. IMHO, this is a less flexible migration strategy than the append behavior described above. It&apos;s also perfectly valid, and the user of the Struct API is free to do so in their own application. In that case, the application is still version-aware. Instead of being cautious about consuming the potentially truncated records, instead it&apos;s executing a scan for each version.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;as you said, data evolution is out of the scope. so if you consider this patch just as a &quot;smarter&quot; alternative to the Bytes encoding.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8201&quot; title=&quot;OrderedBytes: an ordered encoding strategy&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8201&quot;&gt;&lt;del&gt;HBASE-8201&lt;/del&gt;&lt;/a&gt; is a smarter alternative to Bytes and this ticket adds some higher-level APIs for manipulating them. In short, yes, schema definition and evolution is out of scope.&lt;/p&gt;</comment>
                            <comment id="13712084" author="mbertozzi" created="Thu, 18 Jul 2013 06:58:37 +0000"  >&lt;p&gt;above you talk about the sort order, and I guess just about the key.&lt;br/&gt;
but when I talk about data or schema I refer to the cell value, not the key.&lt;br/&gt;
For the key I think that the fixed or append-only, as you pointed out is good enough.&lt;/p&gt;

&lt;p&gt;again, maybe I&apos;m out of scope.. but do you see those classes used only to encode the key? e.g. the struct mention explicitly the key in the comment. I probably see this as more generic key/value serialization, knowing about the future direction with the schema.&lt;/p&gt;</comment>
                            <comment id="13713011" author="ndimiduk" created="Thu, 18 Jul 2013 22:41:36 +0000"  >&lt;p&gt;To be fair, sort order also is of concern in column names. My choice of the word &quot;schema&quot; was unfortunate in my previous comment. I should have said &quot;no composite structure is written into the concatenation.&quot; Because HBase&apos;s only native data type is byte[], encodings are necessary for any application value other than byte[], wherever it hits a rowkey, qualifier, or value.&lt;/p&gt;

&lt;p&gt;It&apos;s quite out of scope for my purposes, but I&apos;m curious what you think about the future direction with schema. I think the Phoenix and Kiji folk will have some good insights.&lt;/p&gt;</comment>
                            <comment id="13713025" author="ndimiduk" created="Thu, 18 Jul 2013 22:48:53 +0000"  >&lt;p&gt;I had a look over the kiji-schema project. They have a much more developed sense of schema than anything I&apos;ve proposed, which makes me think I&apos;m still on the right track. I haven&apos;t been through it end-to-end, but I took a stab at implementing a piece of their stack using this data types API. It looks to me like the bit they use to implement HBase rowkeys.&lt;/p&gt;

&lt;p&gt;I don&apos;t know how it would wire up into their Avro IDL, but it looks like they could open up the restrictions on their RowKeyFormat2.ComponentType to support any HDataType implementation if so desired. Here&apos;s the example.&lt;/p&gt;</comment>
                            <comment id="13713028" author="hadoopqa" created="Thu, 18 Jul 2013 22:53:30 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12593082/KijiFormattedEntityId.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12593082/KijiFormattedEntityId.java&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6404//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6404//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13713076" author="mbertozzi" created="Thu, 18 Jul 2013 23:23:32 +0000"  >&lt;p&gt;Thanks for keeping following up on my out of scope questions.&lt;/p&gt;

&lt;p&gt;again, I think that I&apos;m focusing more on the cell-value side instead of the key part which will be the one that will have the benefit from the ordered byte stuff and will probably have more restriction on the evolution since this stuff is client side only and you&apos;ve to deal with the raw byte sorting of hbase.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&apos;s quite out of scope for my purposes, but I&apos;m curious what you think about the future direction with schema. I think the Phoenix and Kiji folk will have some good insights.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;(I&apos;ll talk only about cell-values here, so I&apos;m not interested in the ordered stuff in this case)&lt;br/&gt;
I want to write my app today with this library.&lt;br/&gt;
I&apos;ll start off using a Struct, and it&apos;s ok until I have to add/remove a field.&lt;br/&gt;
so.. I can add a version/schema id.. but now I have the problem that I have to keep all the schemas and then project to the schema that I want to use.&lt;/p&gt;

&lt;p&gt;Example:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;get row0 -&amp;gt; cell with schema 1&lt;/li&gt;
	&lt;li&gt;get row1 -&amp;gt; cell with schema 2&lt;/li&gt;
	&lt;li&gt;get row2 -&amp;gt; cell with schema 3&lt;/li&gt;
	&lt;li&gt;Now the user/api have to handle this 3 different rows and project to a user provided schema to get out something useful to the user...&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In this case, you have to store all the schemas and you&apos;ve to provide a mapping for each schema to the one that the user wants.&lt;/p&gt;

&lt;p&gt;The other approach, more protobuf like is each field has an id that must be unique. on read you provide your &quot;read schema&quot; and you load only the field present in the &quot;read schema&quot;.&lt;br/&gt;
note that this can also work with just with the api similar to what you have &quot;getField(field_id)&quot; where the id is the unique id and not the index.&lt;/p&gt;

&lt;p&gt;again, I think that your focus at the moment is more on the key side... and my guess is that the struct is fine for that.&lt;br/&gt;
but this jira is &quot;serialization primitives&quot; without a &quot;row-keys&quot; in front... so I assume you plan to use this stuff also for the cell values, and from what I said above... I don&apos;t see an easy way to evolve my cell data, without rewrite every time or doing &quot;manual&quot; mappings for each struct version.&lt;/p&gt;</comment>
                            <comment id="13713136" author="ndimiduk" created="Thu, 18 Jul 2013 23:55:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;again, I think that your focus at the moment is more on the key side... and my guess is that the struct is fine for that. but this jira is &quot;serialization primitives&quot; without a &quot;row-keys&quot; in front... so I assume you plan to use this stuff also for the cell values, and from what I said above... I don&apos;t see an easy way to evolve my cell data, without rewrite every time or doing &quot;manual&quot; mappings for each struct version.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You&apos;re right, this implementation is too simplistic for storing complex entities in a Cell. You can do it, but you&apos;ll be a bit stuck as there&apos;s no concept schema identification or of evolution. I can see how the title can be miss-leading. OrderedBytes and HDataType are no replacement for application use of {protobuf,avro,thrift}, particularly in the &quot;entity-centric modeling&quot; approach with fat key-values.&lt;/p&gt;</comment>
                            <comment id="13713153" author="stack" created="Fri, 19 Jul 2013 00:15:56 +0000"  >&lt;p&gt;IIRC, their avro idl is for all but the description of the rowkey.  When they talk about rowkey &apos;schema&apos;, it is allowed that it cannot evolve for reasons discussed above.  Adding to the right of a rowkey should be fine though.  Ditto when serializing column qualifiers.&lt;/p&gt;

&lt;p&gt;High in this issue you raise: &quot;Do you think we should have a similar kind of dichotomy for encoding into order-preserving context vs non-order-preserving context? My initial thinking is probably not (due to additional API surface area), but I want to have the conversation.&quot;&lt;/p&gt;

&lt;p&gt;You allow that there are two contexts (and indeed Matteo asks for clarification on this) &amp;#8211; one where there is no way around it but you need to rewrite the data if you want to refer to it using a different struct/&apos;schema&apos;; e.g. a rowkey (caveat adding fields to the right) &amp;#8211; and then there are the contexts where you should be able to evolve the content; e.g. cell content and even to a higher level where you might impose a schema made of multiple column content (or full row), and so on.&lt;/p&gt;

&lt;p&gt;This seems like a good split.  In the cell context, the area where you would like to be able to evolve, sort order preservation is not required.  In the simple case, an int16 type, you probably don&apos;t need versioning either?  Its serialization is unlikely to change but you might want version even these primitive types just in case?  If a compound type in a cell, you would like to be able to evolve it; to add fields, etc.  So you could add a version to structs here?  (but why would user use this lib over pb in this case?)  Now you bleed over into higher level issues; schema and its follow-ons, where to store it and how to evolve, etc. (Matteo&apos;s concerns).&lt;/p&gt;

&lt;p&gt;I suppose we are fine given you have &apos;schema&apos; and &apos;schema evolution&apos; as out-of-scope in your answer to Matteo.  We should be clear that these problems remain as to-be-solved (or solved by others &amp;#8211; see kiji) after this patch is done and be sure folks don&apos;t get the wrong impression.  Just saying.&lt;/p&gt;

&lt;p&gt;On the adding fields to the right of your struct, where you have the application use the right struct version, pity your lib couldn&apos;t do that for the app.  PB has a lead-off serialized length which saves it reading off the end of the record.  You can&apos;t do that because you&apos;ll mess up your ordering.  You can&apos;t lead the record with a version since that will also mess your sort order (as you say above).  A buffer where you check available would be expensive...&lt;/p&gt;


</comment>
                            <comment id="13713834" author="ndimiduk" created="Fri, 19 Jul 2013 16:52:02 +0000"  >&lt;p&gt;This &lt;tt&gt;HDataType&lt;/tt&gt; interface and the two codecs upon which the implementations rely is not schema management for HBase. &lt;tt&gt;HDataType&lt;/tt&gt; can be used to manage encoding values into rowkeys, column qualifiers, or values. Use an instance of &lt;tt&gt;Struct&lt;/tt&gt;, or don&apos;t, in any of those contexts. The use of &lt;tt&gt;Struct&lt;/tt&gt; in the order-sensitive context has driven more design thought, but it generates a &lt;tt&gt;byte[]&lt;/tt&gt; wherever it&apos;s used. Would an example of an Avro, Thrift, or Protobuff &lt;tt&gt;HDataType&lt;/tt&gt; implementation help to drive this idea home?&lt;/p&gt;

&lt;p&gt;My trouble with using the word &quot;schema&quot; for key-values is that context is too narrow a scope. Being able to consistently read a value out of a cell does not tell me what the schema of the database is. HBase provides basic &lt;b&gt;table&lt;/b&gt; definition management but not &lt;b&gt;data&lt;/b&gt; definition management, the effective meaning of schema. Pheonix and Kiji both provide a layer of schema management on top of HBase. Through them you define the logical layout of data in tables, and you abandon to them how that data is physically arranged and encoded. &lt;tt&gt;HDataType&lt;/tt&gt; provides an API with which its user can control how data is physically arranged and encoded. Its user is still left to manage the logical layout and its meaning to their application for themselves.&lt;/p&gt;

&lt;p&gt;This patch is not schema management. It provides a common set of primitives that other applications can consume &amp;#8211; be them user applications developed directly against HBase or Phoenix or Kiji themselves. The consumers I&apos;ve always had in mind have always been myself and application developers like me, Hive, Pig, and Phoenix. The primary benefit being that all those applications gain some level of interoperability through data in HBase. That I was able to read Kiji&apos;s avdl file and in an afternoon understand how HDataType could be used to make it&apos;s implementation simpler and more extensible is validation of utility.&lt;/p&gt;</comment>
                            <comment id="13715923" author="ndimiduk" created="Tue, 23 Jul 2013 00:33:34 +0000"  >&lt;p&gt;This version of the patch rebases onto the latest patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8201&quot; title=&quot;OrderedBytes: an ordered encoding strategy&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8201&quot;&gt;&lt;del&gt;HBASE-8201&lt;/del&gt;&lt;/a&gt; and exposes additional read, write methods on LegacyBytes.&lt;/p&gt;</comment>
                            <comment id="13715979" author="hadoopqa" created="Tue, 23 Jul 2013 02:03:10 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12593621/0001-HBASE-8693-Extensible-data-types-API.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12593621/0001-HBASE-8693-Extensible-data-types-API.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 28 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6432//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6432//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13717734" author="ndimiduk" created="Tue, 23 Jul 2013 22:55:17 +0000"  >&lt;p&gt;Canceling patch until dependency &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8201&quot; title=&quot;OrderedBytes: an ordered encoding strategy&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8201&quot;&gt;&lt;del&gt;HBASE-8201&lt;/del&gt;&lt;/a&gt; is merged.&lt;/p&gt;</comment>
                            <comment id="13717736" author="ndimiduk" created="Tue, 23 Jul 2013 22:57:33 +0000"  >&lt;p&gt;This patch addresses remaining reviewer comments.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;rename HDataType -&amp;gt; DataType&lt;/li&gt;
	&lt;li&gt;rename DataType#
{read,write}
&lt;p&gt; -&amp;gt; decode,encode&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;rename types based on OrderedBytes encoding to Ordered*&lt;/li&gt;
	&lt;li&gt;propagate rename of blob
{mid,last}
&lt;p&gt; -&amp;gt; blob&lt;/p&gt;
{var,copy}&lt;/li&gt;
	&lt;li&gt;fill in holes in LegacyString*, en/decode API&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13724821" author="ndimiduk" created="Wed, 31 Jul 2013 03:40:06 +0000"  >&lt;p&gt;Refactored to remove dependency on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8201&quot; title=&quot;OrderedBytes: an ordered encoding strategy&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8201&quot;&gt;&lt;del&gt;HBASE-8201&lt;/del&gt;&lt;/a&gt;. Now includes dependency on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9091&quot; title=&quot;Update ByteRange to maintain consumer&amp;#39;s position&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9091&quot;&gt;&lt;del&gt;HBASE-9091&lt;/del&gt;&lt;/a&gt;. Provides DataType interface and implementations based on o.a.h.h.util.Bytes only.&lt;/p&gt;</comment>
                            <comment id="13727197" author="ndimiduk" created="Fri, 2 Aug 2013 01:21:10 +0000"  >&lt;p&gt;Based on new version of OrderedBytes. Does not use ByteRange or ByteBuffer, just a byte[] and offset.&lt;/p&gt;</comment>
                            <comment id="13727199" author="ndimiduk" created="Fri, 2 Aug 2013 01:26:55 +0000"  >&lt;p&gt;On RB.&lt;/p&gt;</comment>
                            <comment id="13727396" author="hadoopqa" created="Fri, 2 Aug 2013 06:22:49 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12595534/0001-HBASE-8693-Extensible-data-types-API.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12595534/0001-HBASE-8693-Extensible-data-types-API.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 32 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 hadoop1.0&lt;/font&gt;.  The patch failed to compile against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6566//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6566//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13727980" author="mcorgan" created="Fri, 2 Aug 2013 19:19:45 +0000"  >&lt;p&gt;unofficial +1&lt;/p&gt;</comment>
                            <comment id="13728081" author="nkeywal" created="Fri, 2 Aug 2013 20:42:58 +0000"  >&lt;p&gt;The javadoc still references the ByteRange stuff, but it can be fixed on commit.&lt;/p&gt;

&lt;p&gt;+1 (if it does compile &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ). I&apos;m restarting a build to check. It would be great to get a +1 from &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt;, as he started the review on RB.&lt;/p&gt;</comment>
                            <comment id="13728132" author="ndimiduk" created="Fri, 2 Aug 2013 21:17:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;The javadoc still references the ByteRange stuff&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oh bother. I also just found one API remnant that uses ByteBuffer instead of (ByteRange instead of) byte[]. I&apos;ll go back through one more time and clean it up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkeywal&quot; class=&quot;user-hover&quot; rel=&quot;nkeywal&quot;&gt;Nicolas Liochon&lt;/a&gt; I see you uploaded a new patch, but diff show me no delta. Was there some other change you intended?&lt;/p&gt;</comment>
                            <comment id="13728159" author="ndimiduk" created="Fri, 2 Aug 2013 21:40:18 +0000"  >&lt;p&gt;Updated patch. Purge vestigial remnants of previous API variants. no javadoc warnings or errors produced locally.&lt;/p&gt;</comment>
                            <comment id="13728251" author="hadoopqa" created="Fri, 2 Aug 2013 23:20:42 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12595679/0001-HBASE-8693-Extensible-data-types-API.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12595679/0001-HBASE-8693-Extensible-data-types-API.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 32 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 hadoop1.0&lt;/font&gt;.  The patch failed to compile against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6579//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6579//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13728584" author="nkeywal" created="Sat, 3 Aug 2013 16:54:17 +0000"  >&lt;p&gt;Any objection or time needed for a review? If not I will commit on Monday. &lt;/p&gt;</comment>
                            <comment id="13729068" author="ndimiduk" created="Mon, 5 Aug 2013 01:47:52 +0000"  >&lt;p&gt;Address reviewer comments from Stack and James.&lt;/p&gt;</comment>
                            <comment id="13729071" author="hadoopqa" created="Mon, 5 Aug 2013 01:52:47 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12595843/0001-HBASE-8693-Extensible-data-types-API.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12595843/0001-HBASE-8693-Extensible-data-types-API.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 32 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 hadoop1.0&lt;/font&gt;.  The patch failed to compile against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6601//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6601//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13732870" author="ndimiduk" created="Wed, 7 Aug 2013 22:45:20 +0000"  >&lt;p&gt;Updated to use ByteRange.&lt;/p&gt;</comment>
                            <comment id="13732939" author="ndimiduk" created="Wed, 7 Aug 2013 23:41:44 +0000"  >&lt;p&gt;s/Legacy/Raw/ as per Stack&apos;s RB comment.&lt;/p&gt;</comment>
                            <comment id="13732971" author="hadoopqa" created="Thu, 8 Aug 2013 00:04:22 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12596742/0001-HBASE-8693-Extensible-data-types-API.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12596742/0001-HBASE-8693-Extensible-data-types-API.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 32 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 hadoop1.0&lt;/font&gt;.  The patch failed to compile against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/6645//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/6645//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13735258" author="nkeywal" created="Fri, 9 Aug 2013 20:31:32 +0000"  >&lt;p&gt;@stack, are you ok with this last version? &lt;/p&gt;</comment>
                            <comment id="13735397" author="stack" created="Fri, 9 Aug 2013 22:17:29 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Needs a fat release note (the patch preamble makes for a good start)&lt;/p&gt;</comment>
                            <comment id="13736277" author="nkeywal" created="Sun, 11 Aug 2013 13:56:06 +0000"  >&lt;p&gt;It&apos;s committed. I keep the jira open with a blocker status until Nick updates the release notes (I know he&apos;s on vacation this week-end, but I&apos;m not sure about next week. I will do the sum-up if necessary).&lt;/p&gt;</comment>
                            <comment id="13736325" author="hudson" created="Sun, 11 Aug 2013 16:12:25 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #4372 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/4372/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/4372/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8693&quot; title=&quot;DataType: provide extensible type API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8693&quot;&gt;&lt;del&gt;HBASE-8693&lt;/del&gt;&lt;/a&gt;  DataType: provide extensible type API (Nick Dimiduck) (nkeywal: rev 1512929)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/DataType.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/FixedLengthWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBlob.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBlobVar.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBytesBase.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedFloat32.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedFloat64.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedInt32.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedInt64.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedNumeric.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedString.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytes.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytesFixedLength.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytesTerminated.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawDouble.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawFloat.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawInteger.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawLong.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawString.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawStringFixedLength.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawStringTerminated.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Struct.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/StructBuilder.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/StructIterator.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/TerminatedWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union2.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union3.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union4.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/package-info.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestFixedLengthWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedBlob.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedBlobVar.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedString.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestRawString.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestStruct.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestTerminatedWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestUnion2.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13736331" author="hudson" created="Sun, 11 Aug 2013 16:28:07 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #668 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/668/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/668/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8693&quot; title=&quot;DataType: provide extensible type API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8693&quot;&gt;&lt;del&gt;HBASE-8693&lt;/del&gt;&lt;/a&gt;  DataType: provide extensible type API (Nick Dimiduck) (nkeywal: rev 1512929)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/DataType.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/FixedLengthWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBlob.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBlobVar.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBytesBase.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedFloat32.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedFloat64.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedInt32.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedInt64.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedNumeric.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedString.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytes.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytesFixedLength.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytesTerminated.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawDouble.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawFloat.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawInteger.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawLong.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawString.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawStringFixedLength.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawStringTerminated.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Struct.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/StructBuilder.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/StructIterator.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/TerminatedWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union2.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union3.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union4.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/package-info.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestFixedLengthWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedBlob.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedBlobVar.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedString.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestRawString.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestStruct.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestTerminatedWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestUnion2.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13736335" author="hudson" created="Sun, 11 Aug 2013 16:39:55 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.95 #432 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.95/432/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.95/432/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8693&quot; title=&quot;DataType: provide extensible type API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8693&quot;&gt;&lt;del&gt;HBASE-8693&lt;/del&gt;&lt;/a&gt;  DataType: provide extensible type API (Nick Dimiduck) (nkeywal: rev 1512927)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/DataType.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/FixedLengthWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBlob.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBlobVar.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBytesBase.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedFloat32.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedFloat64.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedInt32.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedInt64.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedNumeric.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedString.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytes.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytesFixedLength.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytesTerminated.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawDouble.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawFloat.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawInteger.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawLong.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawString.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawStringFixedLength.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawStringTerminated.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Struct.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/StructBuilder.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/StructIterator.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/TerminatedWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union3.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union4.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/package-info.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestFixedLengthWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedBlob.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedBlobVar.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedString.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestRawString.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestStruct.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestTerminatedWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestUnion2.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13736466" author="hudson" created="Sun, 11 Aug 2013 23:19:01 +0000"  >&lt;p&gt;FAILURE: Integrated in hbase-0.95-on-hadoop2 #235 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.95-on-hadoop2/235/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.95-on-hadoop2/235/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8693&quot; title=&quot;DataType: provide extensible type API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8693&quot;&gt;&lt;del&gt;HBASE-8693&lt;/del&gt;&lt;/a&gt;  DataType: provide extensible type API (Nick Dimiduck) (nkeywal: rev 1512927)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/DataType.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/FixedLengthWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBlob.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBlobVar.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedBytesBase.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedFloat32.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedFloat64.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedInt32.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedInt64.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedNumeric.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/OrderedString.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytes.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytesFixedLength.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawBytesTerminated.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawDouble.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawFloat.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawInteger.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawLong.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawString.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawStringFixedLength.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/RawStringTerminated.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Struct.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/StructBuilder.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/StructIterator.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/TerminatedWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union3.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Union4.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/main/java/org/apache/hadoop/hbase/types/package-info.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestFixedLengthWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedBlob.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedBlobVar.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestOrderedString.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestRawString.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestStruct.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestTerminatedWrapper.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestUnion2.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13736469" author="stack" created="Sun, 11 Aug 2013 23:46:53 +0000"  >&lt;p&gt;Nick added a release note (from the mosh pit at outside lands) so resolving.  Nice-one Nick.&lt;/p&gt;</comment>
                            <comment id="13736495" author="hudson" created="Mon, 12 Aug 2013 02:13:51 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.95 #433 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.95/433/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.95/433/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8693&quot; title=&quot;DataType: provide extensible type API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8693&quot;&gt;&lt;del&gt;HBASE-8693&lt;/del&gt;&lt;/a&gt;  DataType: provide extensible type API (Nick Dimiduck) &amp;#8211; ADD MISSING LICENSE (stack: rev 1513020)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestStruct.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13736511" author="hudson" created="Mon, 12 Aug 2013 02:37:33 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #4373 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/4373/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/4373/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8693&quot; title=&quot;DataType: provide extensible type API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8693&quot;&gt;&lt;del&gt;HBASE-8693&lt;/del&gt;&lt;/a&gt;  DataType: provide extensible type API (Nick Dimiduck) &amp;#8211; ADD MISSING LICENSE (stack: rev 1513019)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestStruct.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13736564" author="hudson" created="Mon, 12 Aug 2013 04:27:26 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.95-on-hadoop2 #236 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.95-on-hadoop2/236/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.95-on-hadoop2/236/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8693&quot; title=&quot;DataType: provide extensible type API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8693&quot;&gt;&lt;del&gt;HBASE-8693&lt;/del&gt;&lt;/a&gt;  DataType: provide extensible type API (Nick Dimiduck) &amp;#8211; ADD MISSING LICENSE (stack: rev 1513020)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestStruct.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13736833" author="hudson" created="Mon, 12 Aug 2013 12:58:04 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #669 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/669/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/669/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8693&quot; title=&quot;DataType: provide extensible type API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8693&quot;&gt;&lt;del&gt;HBASE-8693&lt;/del&gt;&lt;/a&gt;  DataType: provide extensible type API (Nick Dimiduck) &amp;#8211; ADD MISSING LICENSE (stack: rev 1513019)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/types/TestStruct.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13743027" author="giacomotaylor" created="Sat, 17 Aug 2013 21:14:37 +0000"  >&lt;p&gt;Thought of one more important thing for composite keys in the new type syste. For a composite row key, Phoenix strips off trailing null columns values in the row key. The reason this is important is that then new nullable row key columns can be added to a schema without requiring any data upgrade to existing rows. Otherwise, adding new row key columns to the end of a schema becomes extremely cumbersome, as you&apos;d need to delete all existing rows and add them back with a row key that includes a null value.&lt;/p&gt;

&lt;p&gt;Not sure how you&apos;re handling this now, but I wanted to bring it up before this gets released/frozen, as changing this later would require upgrading/changing existing data.&lt;/p&gt;</comment>
                            <comment id="13744499" author="ndimiduk" created="Mon, 19 Aug 2013 23:27:44 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=giacomotaylor&quot; class=&quot;user-hover&quot; rel=&quot;giacomotaylor&quot;&gt;James Taylor&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;I&apos;m assuming Phoenix intends to use the provided &lt;tt&gt;Struct&lt;/tt&gt; and &lt;tt&gt;StructIterator&lt;/tt&gt; implementations.&lt;/p&gt;

&lt;p&gt;In the case of reading a written value, a call to &lt;tt&gt;Struct#decode(PositionedByteRange)&lt;/tt&gt; will return the decoded &lt;tt&gt;Object[]&lt;/tt&gt;. If you&apos;ve previously stripped off null columns or you&apos;ve extended your schema since the data was written, the resulting array will be shorter than your schema demands. In this case, it should be a simple check of the length of the decoded &lt;tt&gt;Object[]&lt;/tt&gt; and act accordingly.&lt;/p&gt;

&lt;p&gt;The case of writing a value, your scenario is almost supported, except for this silly little &lt;a href=&quot;https://github.com/apache/hbase/blob/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/types/Struct.java#L158&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;&lt;tt&gt;assert&lt;/tt&gt;&lt;/a&gt;. To support writing fewer members than are defined in the &lt;tt&gt;Struct&lt;/tt&gt; definition, this needs changed to&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;assert fields.length &amp;gt;= val.length;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Does that sound about right to you?&lt;/p&gt;</comment>
                            <comment id="13745535" author="giacomotaylor" created="Tue, 20 Aug 2013 22:24:33 +0000"  >&lt;p&gt;Yes, Phoenix would plan to use the Struct and StructIterator. Rather than the client needing to modify the iteration code everywhere, it&apos;d be good if the StructIterator handled this out-of-the-box.&lt;/p&gt;

&lt;p&gt;On the write side of things, it&apos;d be good if the thing that writes a Struct striped off trailing nulls. You can only do this when writing the key is complete, because of course you might have nulls in the middle which is valid.&lt;/p&gt;

&lt;p&gt;I don&apos;t mean to push everything back to your framework, but the important thing is that the framework writes in the expected way already. If Phoenix has to specialize it, then we lose the interop piece which is what we&apos;re trying to get in the first place.&lt;/p&gt;</comment>
                            <comment id="13745638" author="ndimiduk" created="Tue, 20 Aug 2013 23:44:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t mean to push everything back to your framework, but...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I generally agree with you &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Since 0.95.2RC0 has received the necessary votes, this ticket won&apos;t see an addendum. Let&apos;s move this conversation into a new issue. I&apos;ve created &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9283&quot; title=&quot;Struct and StructIterator should properly handle trailing nulls&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9283&quot;&gt;&lt;del&gt;HBASE-9283&lt;/del&gt;&lt;/a&gt; just for you &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=giacomotaylor&quot; class=&quot;user-hover&quot; rel=&quot;giacomotaylor&quot;&gt;James Taylor&lt;/a&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12687518">HIVE-6150</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12639244">HBASE-8201</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12648821">HBASE-8593</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12596742" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="139203" author="ndimiduk" created="Wed, 7 Aug 2013 23:41:44 +0000"/>
                            <attachment id="12596737" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="139563" author="ndimiduk" created="Wed, 7 Aug 2013 22:45:20 +0000"/>
                            <attachment id="12595843" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="134606" author="ndimiduk" created="Mon, 5 Aug 2013 01:47:52 +0000"/>
                            <attachment id="12595679" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="130209" author="ndimiduk" created="Fri, 2 Aug 2013 21:40:18 +0000"/>
                            <attachment id="12595665" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="130811" author="nkeywal" created="Fri, 2 Aug 2013 20:43:46 +0000"/>
                            <attachment id="12595534" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="130811" author="ndimiduk" created="Fri, 2 Aug 2013 01:21:10 +0000"/>
                            <attachment id="12595121" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="102161" author="ndimiduk" created="Wed, 31 Jul 2013 03:40:06 +0000"/>
                            <attachment id="12593797" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="139947" author="ndimiduk" created="Tue, 23 Jul 2013 22:57:33 +0000"/>
                            <attachment id="12593621" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="133095" author="ndimiduk" created="Tue, 23 Jul 2013 00:33:34 +0000"/>
                            <attachment id="12592663" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="130246" author="ndimiduk" created="Tue, 16 Jul 2013 23:23:21 +0000"/>
                            <attachment id="12591887" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="95360" author="ndimiduk" created="Thu, 11 Jul 2013 18:29:25 +0000"/>
                            <attachment id="12589495" name="0001-HBASE-8693-Extensible-data-types-API.patch" size="50999" author="ndimiduk" created="Mon, 24 Jun 2013 22:08:15 +0000"/>
                            <attachment id="12592666" name="0002-HBASE-8693-example-Use-DataType-API-to-build-regionN.patch" size="9417" author="ndimiduk" created="Tue, 16 Jul 2013 23:37:21 +0000"/>
                            <attachment id="12593082" name="KijiFormattedEntityId.java" size="2539" author="ndimiduk" created="Thu, 18 Jul 2013 22:48:53 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 25 Jun 2013 08:54:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>331490</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 17 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1l6rr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>331822</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>This patch introduces an extensible data types API for HBase. It is inspired by the following systems:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- PostgreSQL. Postgres has a user-extensible data type API, which has been used to great effect by it&amp;#39;s user community (ie, PostGIS). The desire is for HBase to expose an equally extensible data type API. One aspect of the Postgres data type is the ability to provide equivalence functions for index operations. This appears to be of critical performance utility for its execution engine.&lt;br/&gt;
&amp;nbsp;- Orderly. Orderly handles the issue of compound rowkeys by providing convenience classes for handling these kinds of data types. This influence is reflected in the Struct and Union family of classes.&lt;br/&gt;
&amp;nbsp;- Phoenix. The PDataType enum used in Phoenix provides type hints, similar Postgres&amp;#39;s equivalence functions. These appear to be used during query execution for numerical type promotion.&lt;br/&gt;
&lt;br/&gt;
This patch introduces an interface, DataType, along with a number of data type implementations based on the Bytes encoding. Also included are Struct and Union types, demonstrating simple implementations of compound types. Helper classes around the Struct implementation are also provided.&lt;br/&gt;
&lt;br/&gt;
This patch does not address the type compatibility concerns expressed by Phoenix&amp;#39;s PDataType API (ie, isComparableTo, isCoercibleTo); these will be addressed in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8863&quot; title=&quot;Enhance data type API with type vs type comparison methods&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8863&quot;&gt;HBASE-8863&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
This patch also provides DataType implementations based on the OrderedBytes encoding from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8201&quot; title=&quot;OrderedBytes: an ordered encoding strategy&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8201&quot;&gt;&lt;strike&gt;HBASE-8201&lt;/strike&gt;&lt;/a&gt;.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.96notable</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>