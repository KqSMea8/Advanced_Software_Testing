<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:43:53 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-13496/HBASE-13496.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-13496] Make Bytes$LexicographicalComparerHolder$UnsafeComparer::compareTo inlineable</title>
                <link>https://issues.apache.org/jira/browse/HBASE-13496</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;While testing with some other perf comparisons I have noticed that the above method (which is very hot in read path) is not getting inline&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;@ 16   org.apache.hadoop.hbase.util.Bytes$LexicographicalComparerHolder$UnsafeComparer::compareTo (364 bytes)   hot method too big&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We can do minor refactoring to make it inlineable.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12822092">HBASE-13496</key>
            <summary>Make Bytes$LexicographicalComparerHolder$UnsafeComparer::compareTo inlineable</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12783345">HBASE-13291</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="anoop.hbase">Anoop Sam John</assignee>
                                    <reporter username="anoop.hbase">Anoop Sam John</reporter>
                        <labels>
                    </labels>
                <created>Sat, 18 Apr 2015 17:41:25 +0000</created>
                <updated>Fri, 3 Jul 2015 23:35:50 +0000</updated>
                            <resolved>Thu, 23 Apr 2015 05:18:18 +0000</resolved>
                                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>1.1.0</fixVersion>
                    <fixVersion>1.0.2</fixVersion>
                                    <component>Scanners</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="14501562" author="stack" created="Sat, 18 Apr 2015 19:52:58 +0000"  >&lt;p&gt;Yeah. Would be sweet to see if diff in perf after making smaller and inlineable ... it may help given this such a hot method (this and CRC are top of the CPU consumption heap).  What JVM is it? Let me see if I see similar complaint over here on my rig.... Can you do the compare in a small test &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and still get the &apos;too big&apos; complaint? And then after refactor see if faster.&lt;/p&gt;</comment>
                            <comment id="14501664" author="vrodionov" created="Sun, 19 Apr 2015 01:43:29 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; I think you already knows this, but ... &lt;br/&gt;
You can control max size of inline method through JVM config (command-line) options:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;-XX:MaxInlineSize=&amp;lt;n&amp;gt;* (byte-code size)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Try first before refactoring. &lt;/p&gt;</comment>
                            <comment id="14504427" author="anoop.hbase" created="Tue, 21 Apr 2015 06:24:04 +0000"  >&lt;p&gt;Stack&lt;br/&gt;
I am using jre1.8.0_45.&lt;/p&gt;

&lt;p&gt;I was playing with some other compare tests and noticed the Bytes Unsafe based compare is performing lower than an Unsafe comparator we wrote to work with BBs. (Over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11425&quot; title=&quot;Cell/DBB end-to-end on the read-path&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11425&quot;&gt;&lt;del&gt;HBASE-11425&lt;/del&gt;&lt;/a&gt;) and then observer that with default settings the inline in not happening.  With a small change it is happening for def setting.&lt;br/&gt;
Vladimir&lt;br/&gt;
Yes with the change in inlineSize, we can make the bigger methods to get inlined (tested also)  I was saying with the default case. Or else we will have to change our script to pass some bigger max inline size while starting the RS process.  Similar inline optimization is done in this Jiras siblings.&lt;/p&gt;</comment>
                            <comment id="14504434" author="anoop.hbase" created="Tue, 21 Apr 2015 06:26:18 +0000"  >&lt;p&gt;Pls note the statements movements to other private methods.  Actually we have to reverseBytes (for littleEndian case) iff we have a non equal case.(Only while compare- so inside the if).   Not a big deal still avoiding 2 ops.&lt;br/&gt;
Also a multiply in loop var is avoided.  &lt;/p&gt;</comment>
                            <comment id="14505277" author="stack" created="Tue, 21 Apr 2015 17:04:25 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; Patch looks good to me. You have evidence of better perf at all? Thanks.&lt;/p&gt;</comment>
                            <comment id="14505302" author="anoop.hbase" created="Tue, 21 Apr 2015 17:17:14 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;br/&gt;
I have evidence from the micro test case where I do compare of 2 byte[]s with and without patched code.&lt;br/&gt;
byte[]s have equal length of 135 bytes and both are equal too.( I want to make sure the loop executes all cycles). 10 million times am doing the compare calls. Doing tests in Java 8&lt;br/&gt;
This gives an avg 30% improvement.&lt;br/&gt;
But not done the cluster testing&lt;/p&gt;</comment>
                            <comment id="14505398" author="stack" created="Tue, 21 Apr 2015 18:06:30 +0000"  >&lt;p&gt;I&apos;d say post the test code, how to run it, and numbers, and then I am +1 on commit.&lt;/p&gt;</comment>
                            <comment id="14505443" author="anoop.hbase" created="Tue, 21 Apr 2015 18:30:26 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;br/&gt;
OffheapVsOnHeapCompareTest  is the micro test I was running. Basically I was testing the byte[] compare vs BB compare both using Unsafe APIs.  As that result not valid in this Jira not saying abt that.&lt;/p&gt;

&lt;p&gt;Then I saw the inlining problem and with the patch I evaluated the onheap compare time&lt;br/&gt;
Avg of 25 runs  - For comparing the 2 arrays for 10 million time&lt;br/&gt;
With out patch  321814965.3  (nano secs) &lt;br/&gt;
With patch 211087522.8&lt;/p&gt;</comment>
                            <comment id="14505892" author="apurtell" created="Tue, 21 Apr 2015 22:09:30 +0000"  >&lt;p&gt;No, we can&apos;t ask people to tweak wizard level compiler parameters in order to get good performance. &lt;/p&gt;</comment>
                            <comment id="14505895" author="apurtell" created="Tue, 21 Apr 2015 22:11:06 +0000"  >&lt;p&gt;Why are you not using JMH? I am inclined not to believe your results until you employ a well known rigorous microbenchmark framework to get stable results. JMH will help you/us avoid all of the common and almost unavoidable pitfalls one faces when trying to microbenchmark on a highly dynamic optimizing platform.&lt;/p&gt;</comment>
                            <comment id="14506038" author="ndimiduk" created="Tue, 21 Apr 2015 23:47:10 +0000"  >&lt;p&gt;+1 on jmh. This is what you&apos;re looking for, &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://openjdk.java.net/projects/code-tools/jmh/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There&apos;s some nice examples that accompany some really great blog posts on this topic, though they might be out dated vs. the latest jmh version. &lt;a href=&quot;https://github.com/nitsanw/jmh-samples&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/nitsanw/jmh-samples&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14506088" author="stack" created="Wed, 22 Apr 2015 00:14:42 +0000"  >&lt;p&gt;You make a good point &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;  Lets just use this going forward for all compares.&lt;/p&gt;

&lt;p&gt;Let me attach &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; &apos;s code redone for JMH.&lt;/p&gt;

&lt;p&gt;First the results show unsafe compare against offheap buffer is is 30% faster than unsafe against an onheap BB array.&lt;/p&gt;

&lt;p&gt;This does not have attached patch&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
kalashnikov:onheapoffheapcompare stack$ java -jar target/benchmarks.jar net.duboce.OnheapOffheapCompare.offheap -wi 3 -wmb 3 -wf 3 -i 3 -f 3
# JMH 1.9 (released 4 days ago)
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/bin/java
# VM options: &amp;lt;none&amp;gt;
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: net.duboce.OnheapOffheapCompare.offheap

# Run progress: 0.00% complete, ETA 00:00:36
# Warmup Fork: 1 of 3
# Warmup Iteration   1: 40405814.674 ops/s
# Warmup Iteration   2: 39543540.514 ops/s
# Warmup Iteration   3: 41606902.264 ops/s
Iteration   1: 38586392.256 ops/s
Iteration   2: 40288847.812 ops/s
Iteration   3: 39909092.296 ops/s

# Run progress: 16.67% complete, ETA 00:00:31
# Warmup Fork: 2 of 3
# Warmup Iteration   1: 38922871.181 ops/s
# Warmup Iteration   2: 41366404.618 ops/s
# Warmup Iteration   3: 40964570.763 ops/s
Iteration   1: 39633298.954 ops/s
Iteration   2: 40079375.963 ops/s
Iteration   3: 39220530.393 ops/s

# Run progress: 33.33% complete, ETA 00:00:25
# Warmup Fork: 3 of 3
# Warmup Iteration   1: 40851101.637 ops/s
# Warmup Iteration   2: 40026443.875 ops/s
# Warmup Iteration   3: 40233304.903 ops/s
Iteration   1: 38803789.321 ops/s
Iteration   2: 38164635.144 ops/s
Iteration   3: 38628486.154 ops/s

# Run progress: 50.00% complete, ETA 00:00:18
# Fork: 1 of 3
# Warmup Iteration   1: 38389355.584 ops/s
# Warmup Iteration   2: 40670449.399 ops/s
# Warmup Iteration   3: 39692011.027 ops/s
Iteration   1: 39972794.821 ops/s
Iteration   2: 39871969.084 ops/s
Iteration   3: 39274714.589 ops/s

# Run progress: 66.67% complete, ETA 00:00:12
# Fork: 2 of 3
# Warmup Iteration   1: 39579020.449 ops/s
# Warmup Iteration   2: 40040917.951 ops/s
# Warmup Iteration   3: 41771914.576 ops/s
Iteration   1: 39036428.655 ops/s
Iteration   2: 40680623.481 ops/s
Iteration   3: 41386782.492 ops/s

# Run progress: 83.33% complete, ETA 00:00:06
# Fork: 3 of 3
# Warmup Iteration   1: 39278019.575 ops/s
# Warmup Iteration   2: 39617906.299 ops/s
# Warmup Iteration   3: 40959272.421 ops/s
Iteration   1: 39808506.268 ops/s
Iteration   2: 41423402.879 ops/s
Iteration   3: 40484950.136 ops/s


Result &lt;span class=&quot;code-quote&quot;&gt;&quot;offheap&quot;&lt;/span&gt;:
  40215574.712 &#177;(99.9%) 1423136.708 ops/s [Average]
  (min, avg, max) = (39036428.655, 40215574.712, 41423402.879), stdev = 846885.827
  CI (99.9%): [38792438.004, 41638711.419] (assumes normal distribution)


# Run complete. Total time: 00:00:37

Benchmark                      Mode  Cnt         Score         Error  Units
OnheapOffheapCompare.offheap  thrpt    9  40215574.712 &#177; 1423136.708  ops/s

kalashnikov:onheapoffheapcompare stack$ java -jar target/benchmarks.jar net.duboce.OnheapOffheapCompare.onheap -wi 3 -wmb 3 -wf 3 -i 3 -f 3
# JMH 1.9 (released 4 days ago)
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/bin/java
# VM options: &amp;lt;none&amp;gt;
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: net.duboce.OnheapOffheapCompare.onheap

# Run progress: 0.00% complete, ETA 00:00:36
# Warmup Fork: 1 of 3
# Warmup Iteration   1: 31867510.027 ops/s
# Warmup Iteration   2: 30028630.589 ops/s
# Warmup Iteration   3: 33687633.869 ops/s
Iteration   1: 32222065.627 ops/s
Iteration   2: 33131719.286 ops/s
Iteration   3: 31564166.944 ops/s

# Run progress: 16.67% complete, ETA 00:00:31
# Warmup Fork: 2 of 3
# Warmup Iteration   1: 31422485.005 ops/s
# Warmup Iteration   2: 31002717.261 ops/s
# Warmup Iteration   3: 33718561.788 ops/s
Iteration   1: 33404312.160 ops/s
Iteration   2: 33564603.329 ops/s
Iteration   3: 30730618.344 ops/s

# Run progress: 33.33% complete, ETA 00:00:25
# Warmup Fork: 3 of 3
# Warmup Iteration   1: 31976230.984 ops/s
# Warmup Iteration   2: 31469206.976 ops/s
# Warmup Iteration   3: 33966111.804 ops/s
Iteration   1: 34501343.952 ops/s
Iteration   2: 33884137.262 ops/s
Iteration   3: 31021199.684 ops/s

# Run progress: 50.00% complete, ETA 00:00:18
# Fork: 1 of 3
# Warmup Iteration   1: 31339790.845 ops/s
# Warmup Iteration   2: 31098331.023 ops/s
# Warmup Iteration   3: 33886103.423 ops/s
Iteration   1: 34070557.543 ops/s
Iteration   2: 33340208.663 ops/s
Iteration   3: 30380920.160 ops/s

# Run progress: 66.67% complete, ETA 00:00:12
# Fork: 2 of 3
# Warmup Iteration   1: 30590920.526 ops/s
# Warmup Iteration   2: 32820049.296 ops/s
# Warmup Iteration   3: 33060247.452 ops/s
Iteration   1: 33865093.227 ops/s
Iteration   2: 33263291.673 ops/s
Iteration   3: 33925533.481 ops/s

# Run progress: 83.33% complete, ETA 00:00:06
# Fork: 3 of 3
# Warmup Iteration   1: 29096911.911 ops/s
# Warmup Iteration   2: 30985824.533 ops/s
# Warmup Iteration   3: 34356926.601 ops/s
Iteration   1: 33809683.353 ops/s
Iteration   2: 33301106.606 ops/s
Iteration   3: 33173433.914 ops/s


Result &lt;span class=&quot;code-quote&quot;&gt;&quot;onheap&quot;&lt;/span&gt;:
  33236647.624 &#177;(99.9%) 1885165.178 ops/s [Average]
  (min, avg, max) = (30380920.160, 33236647.624, 34070557.543), stdev = 1121831.559
  CI (99.9%): [31351482.446, 35121812.803] (assumes normal distribution)


# Run complete. Total time: 00:00:37

Benchmark                     Mode  Cnt         Score         Error  Units
OnheapOffheapCompare.onheap  thrpt    9  33236647.624 &#177; 1885165.178  ops/s
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;Here is the patched version.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
kalashnikov:onheapoffheapcompare stack$ java -jar target/benchmarks.jar net.duboce.OnheapOffheapCompare.offheap -wi 3 -wmb 3 -wf 3 -i 3 -f 3
# JMH 1.9 (released 4 days ago)
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/bin/java
# VM options: &amp;lt;none&amp;gt;
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: net.duboce.OnheapOffheapCompare.offheap

# Run progress: 0.00% complete, ETA 00:00:36
# Warmup Fork: 1 of 3
# Warmup Iteration   1: 38705824.349 ops/s
# Warmup Iteration   2: 40968480.128 ops/s
# Warmup Iteration   3: 40282889.540 ops/s
Iteration   1: 40702237.123 ops/s
Iteration   2: 42617568.994 ops/s
Iteration   3: 41598589.465 ops/s

# Run progress: 16.67% complete, ETA 00:00:31
# Warmup Fork: 2 of 3
# Warmup Iteration   1: 40784095.045 ops/s
# Warmup Iteration   2: 40483383.471 ops/s
# Warmup Iteration   3: 37572518.311 ops/s
Iteration   1: 39560674.538 ops/s
Iteration   2: 40555672.357 ops/s
Iteration   3: 40880540.757 ops/s

# Run progress: 33.33% complete, ETA 00:00:25
# Warmup Fork: 3 of 3
# Warmup Iteration   1: 39862891.631 ops/s
# Warmup Iteration   2: 40261276.539 ops/s
# Warmup Iteration   3: 39848202.244 ops/s
Iteration   1: 38678248.714 ops/s
Iteration   2: 39254253.795 ops/s
Iteration   3: 39351040.172 ops/s

# Run progress: 50.00% complete, ETA 00:00:18
# Fork: 1 of 3
# Warmup Iteration   1: 39136106.519 ops/s
# Warmup Iteration   2: 39707432.443 ops/s
# Warmup Iteration   3: 40208894.012 ops/s
Iteration   1: 39335541.854 ops/s
Iteration   2: 40391095.986 ops/s
Iteration   3: 41930971.302 ops/s

# Run progress: 66.67% complete, ETA 00:00:12
# Fork: 2 of 3
# Warmup Iteration   1: 40747764.072 ops/s
# Warmup Iteration   2: 38806087.810 ops/s
# Warmup Iteration   3: 39532335.320 ops/s
Iteration   1: 39994729.179 ops/s
Iteration   2: 39809095.219 ops/s
Iteration   3: 40985424.095 ops/s

# Run progress: 83.33% complete, ETA 00:00:06
# Fork: 3 of 3
# Warmup Iteration   1: 39917919.237 ops/s
# Warmup Iteration   2: 40428549.733 ops/s
# Warmup Iteration   3: 40628153.354 ops/s
Iteration   1: 38728312.063 ops/s
Iteration   2: 40151049.176 ops/s
Iteration   3: 40688979.137 ops/s


Result &lt;span class=&quot;code-quote&quot;&gt;&quot;offheap&quot;&lt;/span&gt;:
  40223910.890 &#177;(99.9%) 1571242.520 ops/s [Average]
  (min, avg, max) = (38728312.063, 40223910.890, 41930971.302), stdev = 935021.221
  CI (99.9%): [38652668.370, 41795153.410] (assumes normal distribution)

kalashnikov:onheapoffheapcompare stack$ java -jar target/benchmarks.jar net.duboce.OnheapOffheapCompare.onheap -wi 3 -wmb 3 -wf 3 -i 3 -f 3
# JMH 1.9 (released 4 days ago)
# VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_20.jdk/Contents/Home/jre/bin/java
# VM options: &amp;lt;none&amp;gt;
# Warmup: 3 iterations, 1 s each
# Measurement: 3 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: net.duboce.OnheapOffheapCompare.onheap

# Run progress: 0.00% complete, ETA 00:00:36
# Warmup Fork: 1 of 3
# Warmup Iteration   1: 36335116.201 ops/s
# Warmup Iteration   2: 37110644.116 ops/s
# Warmup Iteration   3: 33671084.279 ops/s
Iteration   1: 34677255.413 ops/s
Iteration   2: 32881045.678 ops/s
Iteration   3: 35990860.149 ops/s

# Run progress: 16.67% complete, ETA 00:00:31
# Warmup Fork: 2 of 3
# Warmup Iteration   1: 35573712.462 ops/s
# Warmup Iteration   2: 35603905.398 ops/s
# Warmup Iteration   3: 34639558.917 ops/s
Iteration   1: 34095635.010 ops/s
Iteration   2: 34425913.095 ops/s
Iteration   3: 35715426.857 ops/s

# Run progress: 33.33% complete, ETA 00:00:25
# Warmup Fork: 3 of 3
# Warmup Iteration   1: 34966707.523 ops/s
# Warmup Iteration   2: 35676214.007 ops/s
# Warmup Iteration   3: 33693682.775 ops/s
Iteration   1: 32957484.472 ops/s
Iteration   2: 33809096.037 ops/s
Iteration   3: 35925135.387 ops/s

# Run progress: 50.00% complete, ETA 00:00:18
# Fork: 1 of 3
# Warmup Iteration   1: 35175304.900 ops/s
# Warmup Iteration   2: 34994155.480 ops/s
# Warmup Iteration   3: 34688793.076 ops/s
Iteration   1: 33979408.010 ops/s
Iteration   2: 35760999.472 ops/s
Iteration   3: 35674549.834 ops/s

# Run progress: 66.67% complete, ETA 00:00:12
# Fork: 2 of 3
# Warmup Iteration   1: 34835124.860 ops/s
# Warmup Iteration   2:
36552517.432 ops/s
# Warmup Iteration   3: 34668159.076 ops/s
Iteration   1:

35550437.413 ops/s
Iteration   2: 34841030.522 ops/s
Iteration   3: 34978397.580 ops/s

# Run progress: 83.33% complete, ETA 00:00:06
# Fork: 3 of 3
# Warmup Iteration   1: 33884306.332 ops/s
# Warmup Iteration   2: 35024086.104 ops/s
# Warmup Iteration   3: 34183938.730 ops/s
Iteration   1: 34133219.169 ops/s
Iteration   2: 32109732.886 ops/s
Iteration   3: 31063256.007 ops/s


Result &lt;span class=&quot;code-quote&quot;&gt;&quot;onheap&quot;&lt;/span&gt;:
  34232336.766 &#177;(99.9%) 2767851.257 ops/s [Average]
  (min, avg, max) = (31063256.007, 34232336.766, 35760999.472), stdev = 1647103.886
  CI (99.9%): [31464485.509, 37000188.022] (assumes normal distribution)


# Run complete. Total time: 00:00:37

Benchmark                     Mode  Cnt         Score         Error  Units
OnheapOffheapCompare.onheap  thrpt    9  34232336.766 &#177; 2767851.257  ops/s
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, the patch only effects the onheap compare (if I read it right): &lt;/p&gt;

&lt;p&gt;OnheapOffheapCompare.onheap  thrpt    9  33236647.624 &#177; 1885165.178  ops/s&lt;/p&gt;

&lt;p&gt;vs &lt;/p&gt;

&lt;p&gt;OnheapOffheapCompare.onheap  thrpt    9  34232336.766 &#177; 2767851.257  ops/s&lt;/p&gt;

&lt;p&gt;which is an improvement of about ~3%... (there is more variability.... but maybe this would quell if I ran more iterations) &lt;/p&gt;</comment>
                            <comment id="14506101" author="apurtell" created="Wed, 22 Apr 2015 00:28:53 +0000"  >&lt;p&gt;Sweet, thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;+1 on using JMH going forward for all microbenchmarking. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;which is an improvement of about ~3%... (there is more variability.... but maybe this would quell if I ran more iterations)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah maybe.&lt;/p&gt;

&lt;p&gt;Seems reasonable to take a 3% improvement. &lt;/p&gt;</comment>
                            <comment id="14506102" author="apurtell" created="Wed, 22 Apr 2015 00:30:34 +0000"  >&lt;p&gt;+1 for 0.98 if you&apos;re so inclined (or I&apos;m happy to cherry pick if this is committed)&lt;/p&gt;</comment>
                            <comment id="14506329" author="stack" created="Wed, 22 Apr 2015 03:17:46 +0000"  >&lt;p&gt;My little JMH project after following these instructions: &lt;a href=&quot;http://openjdk.java.net/projects/code-tools/jmh/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://openjdk.java.net/projects/code-tools/jmh/&lt;/a&gt;  I still need to learn it but seems very nice for this kinda thing. +1 on using this going forward (lets think about how we&apos;d add these to our codebase; its a little awkward in that jmh wants to own the parent pom and running the test is done against a built jar).&lt;/p&gt;

&lt;p&gt;I made two &apos;benchmarks&apos; out of &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&apos;s class unrolling the loop (jmh warns about how loops can color measurement). One using onheap compare and another offheap with unsafe compares. I then ran one test and then another using flags to specify forks and iterations.  I ran them independently (see above for how I did it).&lt;/p&gt;</comment>
                            <comment id="14507253" author="anoop.hbase" created="Wed, 22 Apr 2015 15:25:48 +0000"  >&lt;p&gt;Thanks Stack.&lt;br/&gt;
I also followed the sample and run JMH. On Java 8 the throughput gain what I got is ~5% and on Java7  it was 7%&lt;br/&gt;
Edit:  With out patch case throughput itself is better when coming to Java 8 and that is why lesser % of gain. Java 8 is better performing in any case.&lt;/p&gt;</comment>
                            <comment id="14507296" author="stack" created="Wed, 22 Apr 2015 15:52:54 +0000"  >&lt;p&gt;Commit I&apos;d say &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; You have the +1s.&lt;/p&gt;</comment>
                            <comment id="14507442" author="anoop.hbase" created="Wed, 22 Apr 2015 17:13:38 +0000"  >&lt;p&gt;Waiting for QA run.&lt;/p&gt;</comment>
                            <comment id="14507571" author="hadoopqa" created="Wed, 22 Apr 2015 18:08:58 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12727250/HBASE-13496.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12727250/HBASE-13496.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 2bf8cda4f68940909e9bcfdf8ae41cc751a49c7d.&lt;br/&gt;
  ATTACHMENT ID: 12727250&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13777//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13777//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13777//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13777//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13777//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13777//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13777//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13777//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14508480" author="anoop.hbase" created="Thu, 23 Apr 2015 05:18:18 +0000"  >&lt;p&gt;Pushed to 0.98+ branches.  Thanks for reveiws  Andy &amp;amp; Stack.&lt;br/&gt;
Thanks a lot Stack for testing with JMH and sharing the test. Helped me a lot to learn it and start doing same for other micro benchmarks.&lt;/p&gt;</comment>
                            <comment id="14508558" author="hudson" created="Thu, 23 Apr 2015 06:54:14 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.1.0RC0-JDK8 #4 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1.0RC0-JDK8/4/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1.0RC0-JDK8/4/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13496&quot; title=&quot;Make Bytes$LexicographicalComparerHolder$UnsafeComparer::compareTo inlineable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13496&quot;&gt;&lt;del&gt;HBASE-13496&lt;/del&gt;&lt;/a&gt; Make Bytes::compareTo inlineable. (anoopsamjohn: rev 5511ce6d3c54236022289e574af049692d210853)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14508576" author="hudson" created="Thu, 23 Apr 2015 07:13:05 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.0 #877 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.0/877/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.0/877/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13496&quot; title=&quot;Make Bytes$LexicographicalComparerHolder$UnsafeComparer::compareTo inlineable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13496&quot;&gt;&lt;del&gt;HBASE-13496&lt;/del&gt;&lt;/a&gt; Make Bytes::compareTo inlineable. (anoopsamjohn: rev 3d285cbad80fd9a0e230867df2396d0061e223eb)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14508577" author="hudson" created="Thu, 23 Apr 2015 07:17:54 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2 #17 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/17/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/17/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13496&quot; title=&quot;Make Bytes$LexicographicalComparerHolder$UnsafeComparer::compareTo inlineable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13496&quot;&gt;&lt;del&gt;HBASE-13496&lt;/del&gt;&lt;/a&gt; Make Bytes::compareTo inlineable. (anoopsamjohn: rev 4666bf86a23f98d0989ec4e7b09fe729f654a65c)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14508584" author="hudson" created="Thu, 23 Apr 2015 07:23:46 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.1 #424 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1/424/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1/424/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13496&quot; title=&quot;Make Bytes$LexicographicalComparerHolder$UnsafeComparer::compareTo inlineable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13496&quot;&gt;&lt;del&gt;HBASE-13496&lt;/del&gt;&lt;/a&gt; Make Bytes::compareTo inlineable. (anoopsamjohn: rev 5511ce6d3c54236022289e574af049692d210853)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14508623" author="hudson" created="Thu, 23 Apr 2015 07:54:37 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.1.0RC0-JDK7 #5 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1.0RC0-JDK7/5/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1.0RC0-JDK7/5/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13496&quot; title=&quot;Make Bytes$LexicographicalComparerHolder$UnsafeComparer::compareTo inlineable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13496&quot;&gt;&lt;del&gt;HBASE-13496&lt;/del&gt;&lt;/a&gt; Make Bytes::compareTo inlineable. (anoopsamjohn: rev 5511ce6d3c54236022289e574af049692d210853)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14508701" author="hudson" created="Thu, 23 Apr 2015 09:08:37 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.98 #960 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98/960/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98/960/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13496&quot; title=&quot;Make Bytes$LexicographicalComparerHolder$UnsafeComparer::compareTo inlineable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13496&quot;&gt;&lt;del&gt;HBASE-13496&lt;/del&gt;&lt;/a&gt; Make Bytes::compareTo inlineable. (anoopsamjohn: rev 80cf84838d8f86391c16cb9910a4efdd141744e4)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14508767" author="hudson" created="Thu, 23 Apr 2015 10:00:32 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6404 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6404/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6404/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13496&quot; title=&quot;Make Bytes$LexicographicalComparerHolder$UnsafeComparer::compareTo inlineable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13496&quot;&gt;&lt;del&gt;HBASE-13496&lt;/del&gt;&lt;/a&gt; Make Bytes::compareTo inlineable. (anoopsamjohn: rev a4202879ad12d797d8c05f3174b824e06cd74279)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14508793" author="hudson" created="Thu, 23 Apr 2015 10:20:13 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.98-on-Hadoop-1.1 #913 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/913/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/913/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13496&quot; title=&quot;Make Bytes$LexicographicalComparerHolder$UnsafeComparer::compareTo inlineable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13496&quot;&gt;&lt;del&gt;HBASE-13496&lt;/del&gt;&lt;/a&gt; Make Bytes::compareTo inlineable. (anoopsamjohn: rev 80cf84838d8f86391c16cb9910a4efdd141744e4)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14571070" author="ndimiduk" created="Wed, 3 Jun 2015 15:28:41 +0000"  >&lt;p&gt;Closing issues released in 1.1.0.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12726939" name="ByteBufferUtils.java" size="6528" author="anoop.hbase" created="Tue, 21 Apr 2015 18:30:26 +0000"/>
                            <attachment id="12727250" name="HBASE-13496.patch" size="4133" author="anoop.hbase" created="Wed, 22 Apr 2015 15:23:52 +0000"/>
                            <attachment id="12726806" name="HBASE-13496.patch" size="4133" author="anoop.hbase" created="Tue, 21 Apr 2015 06:26:18 +0000"/>
                            <attachment id="12726940" name="OffheapVsOnHeapCompareTest.java" size="1271" author="anoop.hbase" created="Tue, 21 Apr 2015 18:30:26 +0000"/>
                            <attachment id="12727103" name="onheapoffheapcompare.tgz" size="2098987" author="stack" created="Wed, 22 Apr 2015 03:17:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 18 Apr 2015 19:52:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 28 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2dfv3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>