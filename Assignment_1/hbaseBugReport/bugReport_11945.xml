<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:28:09 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-11945/HBASE-11945.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-11945] Client writes may be reordered under contention</title>
                <link>https://issues.apache.org/jira/browse/HBASE-11945</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I haven&apos;t seen this bug in practice, but I was thinking about this a bit and think there may be a correctness issue with the way that we handle client batches which contain multiple operations which touch the same row. The client expects that these operations will be performed in the same order they were submitted, but under contention I believe they can get arbitrarily reordered, leading to incorrect results.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12740660">HBASE-11945</key>
            <summary>Client writes may be reordered under contention</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="dimaspivak">Dima Spivak</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Thu, 11 Sep 2014 01:36:10 +0000</created>
                <updated>Thu, 11 Sep 2014 17:25:42 +0000</updated>
                                            <version>0.98.6</version>
                                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="14129502" author="tlipcon" created="Thu, 11 Sep 2014 01:49:37 +0000"  >&lt;p&gt;The potential interleaving is:&lt;/p&gt;

&lt;p&gt;Client 1: issues a batch with 2000 puts: Put &quot;row1&quot;, &quot;cf:col1&quot;, &lt;/p&gt;
{0...1000}, Put &quot;row2&quot;, &quot;cf:col1&quot;, {0...1000}
&lt;p&gt;Client 2: issues a batch with 1 put: Put &quot;row2&quot;, &quot;cf:col2&quot;, &quot;x&quot;&lt;br/&gt;
(ie same row, different column)&lt;/p&gt;

&lt;p&gt;These two clients will contend for the same row lock. The &quot;minibatch&quot; code path iterates through the batch trying to acquire locks, and skipping the operations for a later pass if the lock is not available. So, I think these may interleave as follows:&lt;/p&gt;

&lt;p&gt;C1: acquires lock for row1, and is in the process of iterating over the rest of the &quot;row1&quot; operations&lt;br/&gt;
C2: acquires lock for &quot;row2&quot;, and is in the process of actually applying the operation to MemStore, etc&lt;br/&gt;
C1: fails to acquire the lock for the first row2 op, since row1 already has it. But, there are still 999 more row2 ops to iterate over&lt;br/&gt;
C2: commits its &quot;row2&quot; operation, releasing the lock&lt;br/&gt;
C1: manages to acquire the lock for a later row2 op (eg the put of &quot;row2&quot;, &quot;cf:col1&quot;, 500&lt;br/&gt;
C1: commits the minibatch&lt;/p&gt;

&lt;p&gt;Now it is easy to see that C1 has committed its put of &quot;500&quot; before other puts which came earlier from the client.&lt;/p&gt;

&lt;p&gt;This re-ordering is unexpected from C1&apos;s point of view, since when it later reads the row, something other than the &quot;latest&quot; data might persist (eg the 1000th put it did might actually have gotten executed first instead of last). The problem&apos;s worse with a delete/insert sequence, when you have a 50% chance of ending up with a deleted row at the end.&lt;/p&gt;

&lt;p&gt;I haven&apos;t tried to produce this bug, but I think you could build a functional test as follows:&lt;/p&gt;

&lt;p&gt;T1: writes batches with 1000 puts (arbitrary contnets) to &quot;row1&quot; and 1000 puts to &quot;row2&quot; (increasing integers)&lt;br/&gt;
T2: writes non-batched writes to a different column of row2&lt;br/&gt;
T3: read &quot;row2&quot; in a loop and verify that the integer column is never seen to decrease.&lt;/p&gt;

&lt;p&gt;1000 might not be large enough batches to reliably reproduce it, but I bet you could get this to fail eventually.&lt;/p&gt;</comment>
                            <comment id="14129555" author="aczire" created="Thu, 11 Sep 2014 02:58:15 +0000"  >&lt;p&gt;is it applicable to MR jobs with TableOutputFormat? &lt;br/&gt;
Consider we are writing to same rowkey from a lot of map tasks running across multiple nodes. &lt;br/&gt;
Will the behavior be the serial writes?&lt;/p&gt;</comment>
                            <comment id="14129565" author="yuzhihong@gmail.com" created="Thu, 11 Sep 2014 03:11:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;C1: manages to acquire the lock for a later row2 op&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In HRegion#doMiniBatchMutation() around line 2570:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rowLock == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
          &lt;span class=&quot;code-comment&quot;&gt;// We failed to grab another lock
&lt;/span&gt;          &lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt; !shouldBlock : &lt;span class=&quot;code-quote&quot;&gt;&quot;Should never fail to get lock when blocking&quot;&lt;/span&gt;;
          &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;; &lt;span class=&quot;code-comment&quot;&gt;// stop acquiring more rows &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; batch&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Would the above code prevent lock acquisition ?&lt;/p&gt;</comment>
                            <comment id="14129583" author="tlipcon" created="Thu, 11 Sep 2014 03:44:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;Consider we are writing to same rowkey from a lot of map tasks running across multiple nodes. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Will the behavior be the serial writes?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The behavior has always been somewhat serial writes if you&apos;re writing to the same row key. There are some optimizations here around early lock release so the throughput is good, but they&apos;re definitely serialized if they&apos;re in the same row.&lt;/p&gt;

&lt;p&gt;This issue is about a case where you might have two writes from the same client in the same batch getting re-ordered when they get committed.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Would the above code prevent lock acquisition ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;hmm.. good catch, yea, maybe the &apos;break&apos; actually prevents this issue. Does anyone have time to write the functional test I suggested above?&lt;/p&gt;</comment>
                            <comment id="14129608" author="dimaspivak" created="Thu, 11 Sep 2014 04:41:53 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tlipcon&quot; class=&quot;user-hover&quot; rel=&quot;tlipcon&quot;&gt;Todd Lipcon&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;Working on it now.&lt;/p&gt;

&lt;p&gt;-Dima&lt;/p&gt;</comment>
                            <comment id="14130143" author="apurtell" created="Thu, 11 Sep 2014 15:31:51 +0000"  >&lt;p&gt;Assigned to you (for the test), thanks Dima. &lt;/p&gt;</comment>
                            <comment id="14130335" author="lhofhansl" created="Thu, 11 Sep 2014 17:25:42 +0000"  >&lt;p&gt;Personally I did not expect that I can assume anything about the order of edits inside a batch. That was just my personal implicit assumption though. We do not state anything about order in the Javadocs.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 11 Sep 2014 02:58:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 14 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1zwov:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>