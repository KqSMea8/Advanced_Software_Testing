<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:43:20 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7180/HBASE-7180.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7180] RegionScannerImpl.next() is inefficient.</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7180</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;We just came across a special scenario.&lt;/p&gt;

&lt;p&gt;For our Phoenix project (SQL runtime for HBase), we push a lot of work into HBase via coprocessors. One method is to wrap RegionScanner in coprocessor hooks and then do processing in the hook to avoid returning a lot of data to the client unnecessarily.&lt;/p&gt;

&lt;p&gt;In this specific case this is pretty bad. Since the wrapped RegionScanner&apos;s next() does not &quot;know&quot; that it is called this way is still does all of this on each invocation:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Starts a RegionOperation&lt;/li&gt;
	&lt;li&gt;Increments the request count&lt;/li&gt;
	&lt;li&gt;set the current read point on a thread local (because generally each call could come from a different thread)&lt;/li&gt;
	&lt;li&gt;Finally does the next on its StoreScanner(s)&lt;/li&gt;
	&lt;li&gt;Ends the RegionOperation&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;When this is done in a tight loop millions of times (as is the case for us) it starts to become significant.&lt;/p&gt;

&lt;p&gt;Not sure what to do about this, really. Opening this issue for discussion.&lt;/p&gt;

&lt;p&gt;One way is to extend the RegionScanner with an &quot;internal&quot; next() method of sorts, so that all this overhead can be avoided. The coprocessor could call the regular next() methods once and then just call the cheaper internal version.&lt;/p&gt;

&lt;p&gt;Are there better/cleaner ways?&lt;/p&gt;</description>
                <environment></environment>
        <key id="12616561">HBASE-7180</key>
            <summary>RegionScannerImpl.next() is inefficient.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lhofhansl">Lars Hofhansl</assignee>
                                    <reporter username="lhofhansl">Lars Hofhansl</reporter>
                        <labels>
                    </labels>
                <created>Sun, 18 Nov 2012 06:39:17 +0000</created>
                <updated>Tue, 26 Feb 2013 08:22:54 +0000</updated>
                            <resolved>Tue, 11 Dec 2012 05:47:23 +0000</resolved>
                                                    <fixVersion>0.94.4</fixVersion>
                    <fixVersion>0.95.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13499627" author="lhofhansl" created="Sun, 18 Nov 2012 06:57:36 +0000"  >&lt;p&gt;Something nasty like this.&lt;br/&gt;
There must be a cleaner way.&lt;/p&gt;</comment>
                            <comment id="13499911" author="lhofhansl" created="Sun, 18 Nov 2012 21:32:20 +0000"  >&lt;p&gt;With this patch a RegionObserver wrapping a RegionScanner in preScannerOpen can handle the readpoint and start/close region operation itself and then call the cheaper next() on the wrapped scanner when needed.&lt;/p&gt;</comment>
                            <comment id="13500793" author="lhofhansl" created="Tue, 20 Nov 2012 02:01:50 +0000"  >&lt;p&gt;We did an internal test here (using a count&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/star_yellow.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; aggregator) without the patch (the coprocessor calls RegionScanner.next(...)) the test ran for 20s (0.94.3-current). With this patch (the coprocessor now sets up the readpoint once and also calls start/closeRegionOperation only once) the runtime went down to 17s. I.e. a 15% performance improvement, not quite as much as I had expected, but nothing to scoff at either. This same logic can potentially be used when scanner caching is enabled; right each call to next resets the threads readpoint though each call to next is done serially by the same thread in this scenario.&lt;/p&gt;

&lt;p&gt;Now this is a bit of a hack, I admit, but it does allow a coprocessor to access a RegionScanner at a slightly lower level. What are the thoughts about committing this (maybe find a better name for the new next() method)?&lt;/p&gt;

&lt;p&gt;Another further optimization would be to avoid using ThreadLocals to pass the readpoint through the layers, but instead pass it as method argument (that&apos;d be a significant change).&lt;/p&gt;</comment>
                            <comment id="13500833" author="lhofhansl" created="Tue, 20 Nov 2012 05:15:45 +0000"  >&lt;p&gt;Slightly better patch.&lt;br/&gt;
Also changes the call in RegionServer to use the cheaper version of next().&lt;/p&gt;

&lt;p&gt;Looking around at the code, we can also replace all the calls from the AggregationImplementation to use this cheaper next() method.&lt;/p&gt;</comment>
                            <comment id="13501355" author="stack" created="Tue, 20 Nov 2012 18:27:29 +0000"  >&lt;p&gt;getReadPt has to be public?&lt;/p&gt;

&lt;p&gt;nextInternal has to be public too?&lt;/p&gt;

&lt;p&gt;closeRegionOperation and startRegionOperation too?&lt;/p&gt;

&lt;p&gt;So CPs can get at them?&lt;/p&gt;

&lt;p&gt;You add KeyValue to RegionScanner when it did not need it previous.  You have to?&lt;/p&gt;

&lt;p&gt;And a nextInternal in an Interface like RegionScanner seems wrong?&lt;/p&gt;

&lt;p&gt;I am for speedup but as you say, this one is ugly&lt;/p&gt;</comment>
                            <comment id="13501375" author="lhofhansl" created="Tue, 20 Nov 2012 18:50:03 +0000"  >&lt;p&gt;Yeah I don&apos;t like it either. We somehow need to expose more internals to coprocessors in a clean way.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;KeyValue already is needed for RegionScanner, since it extends internal scanner.&lt;/li&gt;
	&lt;li&gt;start/closeRegionOperation should be available to coprocessors anyway (I think). Otherwise it is hard to implement these types of things in coprocessors.&lt;/li&gt;
	&lt;li&gt;I mainly do not like nextInternal on the interface. Is there a better way to expose the inner workings of RegionScannerImpl to avoid expensive setup at each iteration?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Another option is to keep the RegionScanner interface as it, and just make these methods public in RegionScannerImpl. A coprocessor can then cast the RegionScanner to RegionScannerImpl and access the stuff it needs.&lt;/p&gt;</comment>
                            <comment id="13508476" author="lhofhansl" created="Mon, 3 Dec 2012 05:18:45 +0000"  >&lt;p&gt;How about another approach:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;introduce a RawRegionScanner interface, which extends RegionScanner.&lt;/li&gt;
	&lt;li&gt;RawRegionScanner has all the additional methods on it we need.&lt;/li&gt;
	&lt;li&gt;Add a getRawScannner to the RegionScanner interface.&lt;/li&gt;
	&lt;li&gt;RegionScannerImpl would then implement RawRegionScanner.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;To the coprocessor framework we&apos;d still hand a RegionScanner, but now the coprocessor can get the raw scanner via getRawScanner(). The RegionScannerImpl&apos;s implementation of getRawScanner() just returns &quot;this&quot;.&lt;br/&gt;
Is that better? Or does anybody have another a cleaner idea?&lt;/p&gt;

&lt;p&gt;closeRegionOperation and startRegionOperation would still need to be public, so that coprocessors can start/stop region operations.&lt;/p&gt;</comment>
                            <comment id="13510102" author="lhofhansl" created="Tue, 4 Dec 2012 23:10:53 +0000"  >&lt;p&gt;Talked to Stack and Gregory C. offline. Will use the initial approach with a better name for the &quot;internal&quot; next method.&lt;/p&gt;</comment>
                            <comment id="13510172" author="lhofhansl" created="Wed, 5 Dec 2012 00:38:05 +0000"  >&lt;p&gt;Updated patch.&lt;br/&gt;
Has nextRaw(...) instead of nextInternal(...).&lt;/p&gt;</comment>
                            <comment id="13510182" author="stack" created="Wed, 5 Dec 2012 00:48:33 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13510999" author="lhofhansl" created="Thu, 6 Dec 2012 01:16:13 +0000"  >&lt;p&gt;Just changes a comment slightly&lt;/p&gt;</comment>
                            <comment id="13511000" author="lhofhansl" created="Thu, 6 Dec 2012 01:16:42 +0000"  >&lt;p&gt;And a 0.96 version&lt;/p&gt;</comment>
                            <comment id="13528497" author="lhofhansl" created="Tue, 11 Dec 2012 00:26:26 +0000"  >&lt;p&gt;It&apos;s slightly better if nextRaw can even avoid being synchronized (allowing the caller to control the scope of the synchronizing on the scanner object).&lt;br/&gt;
I.e. a caller can synchronize once and call nextRaw 1000&apos;s of time, rather than caused 1000&apos;s of synchronized (each forcing a memory barrier)&lt;/p&gt;</comment>
                            <comment id="13528558" author="lhofhansl" created="Tue, 11 Dec 2012 01:17:34 +0000"  >&lt;p&gt;Same for trunk.&lt;br/&gt;
If there&apos;re no objections this should be good to go.&lt;/p&gt;</comment>
                            <comment id="13528574" author="lhofhansl" created="Tue, 11 Dec 2012 01:30:16 +0000"  >&lt;p&gt;The only last change I would make is document (in the JavaDoc) exactly what is required from a caller that calls nextRaw(). I.e.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;set the readpoint&lt;/li&gt;
	&lt;li&gt;start/close the region operation&lt;/li&gt;
	&lt;li&gt;and synchronize on the scanner object&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Again, if there no objections, I&apos;ll do that on commit.&lt;/p&gt;</comment>
                            <comment id="13528612" author="hadoopqa" created="Tue, 11 Dec 2012 02:08:15 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12560327/7180-0.96-v2.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12560327/7180-0.96-v2.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3483//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3483//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13528645" author="lhofhansl" created="Tue, 11 Dec 2012 03:53:32 +0000"  >&lt;p&gt;Some imports changed since I created the patch. This patch should apply.&lt;/p&gt;</comment>
                            <comment id="13528671" author="hadoopqa" created="Tue, 11 Dec 2012 05:08:24 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12560343/7180-0.96-v3.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12560343/7180-0.96-v3.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 104 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 23 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.mapreduce.TestHFileOutputFormat&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3484//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13528675" author="stack" created="Tue, 11 Dec 2012 05:16:02 +0000"  >&lt;p&gt;The THOF failure was my fault, since fixed by addendum to hbase-7289.&lt;/p&gt;

&lt;p&gt;On commit change this to mvcc read point as in getMvccReadPoing rather than getReadPt?&lt;/p&gt;

&lt;p&gt;This was intentional?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public synchronized boolean next(List&amp;lt;KeyValue&amp;gt; outResults, int limit)&lt;br/&gt;
+    public boolean next(List&amp;lt;KeyValue&amp;gt; outResults, int limit)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I get that you didn&apos;t want nextRaw synchronized but wasn&apos;t clear you wanted to remove it on public next too.&lt;/p&gt;

&lt;p&gt;Else patch looks good to me (I like the javadoc)&lt;/p&gt;</comment>
                            <comment id="13528677" author="lhofhansl" created="Tue, 11 Dec 2012 05:22:52 +0000"  >&lt;p&gt;Yeah... That&apos;s better name.&lt;/p&gt;

&lt;p&gt;Sorry, should have mentioned the change to synchronized on some of the public next(...) methods.&lt;br/&gt;
It was intentional... These all end up calling the same next method (which is synchronized), so they did not need to be synchronized and we avoid double synchronization (the performance gain from this will be minimal, but it is better form - I think)&lt;/p&gt;

&lt;p&gt;(I think at the RegionScanner level we could eventually remove all synchronization - it does not make sense for client to interleave calls to next() on the &lt;b&gt;same&lt;/b&gt; scanner between multiple threads. But that&apos;s for another issue.)&lt;/p&gt;</comment>
                            <comment id="13528680" author="stack" created="Tue, 11 Dec 2012 05:26:27 +0000"  >&lt;p&gt;+1 on commit.&lt;/p&gt;</comment>
                            <comment id="13528693" author="lhofhansl" created="Tue, 11 Dec 2012 05:44:42 +0000"  >&lt;p&gt;Also note how the nextRaw signature is different in trunk vs 0.94. The metric2 patch accidentally (it seems?) removed the KV size metric, which used to be passed via the next() method when called from the region server code.&lt;br/&gt;
When that is fixed the signature needs to be changed accordingly.&lt;/p&gt;</comment>
                            <comment id="13528697" author="lhofhansl" created="Tue, 11 Dec 2012 05:47:23 +0000"  >&lt;p&gt;Committed to 0.94 and 0.96.&lt;br/&gt;
Thanks for bearing with me &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13528698" author="lhofhansl" created="Tue, 11 Dec 2012 05:48:01 +0000"  >&lt;p&gt;What I committed.&lt;/p&gt;</comment>
                            <comment id="13528702" author="stack" created="Tue, 11 Dec 2012 05:51:08 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; You see above comment by might Lars? &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7180?focusedCommentId=13528693&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13528693&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-7180?focusedCommentId=13528693&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13528693&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13528736" author="hudson" created="Tue, 11 Dec 2012 06:46:55 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #3609 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/3609/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/3609/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7180&quot; title=&quot;RegionScannerImpl.next() is inefficient.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7180&quot;&gt;&lt;del&gt;HBASE-7180&lt;/del&gt;&lt;/a&gt; RegionScannerImpl.next() is inefficient. (Revision 1420004)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13528771" author="hudson" created="Tue, 11 Dec 2012 07:47:44 +0000"  >&lt;p&gt;Integrated in HBase-0.94 #618 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/618/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/618/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7180&quot; title=&quot;RegionScannerImpl.next() is inefficient.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7180&quot;&gt;&lt;del&gt;HBASE-7180&lt;/del&gt;&lt;/a&gt; RegionScannerImpl.next() is inefficient. (Revision 1420005)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13528906" author="hudson" created="Tue, 11 Dec 2012 12:05:35 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #292 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/292/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/292/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7180&quot; title=&quot;RegionScannerImpl.next() is inefficient.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7180&quot;&gt;&lt;del&gt;HBASE-7180&lt;/del&gt;&lt;/a&gt; RegionScannerImpl.next() is inefficient. (Revision 1420004)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13529449" author="hudson" created="Tue, 11 Dec 2012 23:08:27 +0000"  >&lt;p&gt;Integrated in HBase-0.94-security #86 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security/86/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security/86/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7180&quot; title=&quot;RegionScannerImpl.next() is inefficient.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7180&quot;&gt;&lt;del&gt;HBASE-7180&lt;/del&gt;&lt;/a&gt; RegionScannerImpl.next() is inefficient. (Revision 1420005)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13544412" author="hudson" created="Sat, 5 Jan 2013 00:42:25 +0000"  >&lt;p&gt;Integrated in HBase-0.94-security-on-Hadoop-23 #10 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security-on-Hadoop-23/10/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security-on-Hadoop-23/10/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7180&quot; title=&quot;RegionScannerImpl.next() is inefficient.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7180&quot;&gt;&lt;del&gt;HBASE-7180&lt;/del&gt;&lt;/a&gt; RegionScannerImpl.next() is inefficient. (Revision 1420005)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/RegionScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12553946" name="7180-0.94-SKETCH.txt" size="4559" author="lhofhansl" created="Sun, 18 Nov 2012 06:57:36 +0000"/>
                            <attachment id="12554290" name="7180-0.94-v1.txt" size="6747" author="lhofhansl" created="Tue, 20 Nov 2012 05:15:45 +0000"/>
                            <attachment id="12556027" name="7180-0.94-v2.txt" size="7521" author="lhofhansl" created="Wed, 5 Dec 2012 00:38:05 +0000"/>
                            <attachment id="12556196" name="7180-0.94-v3.txt" size="7531" author="lhofhansl" created="Thu, 6 Dec 2012 01:16:13 +0000"/>
                            <attachment id="12560319" name="7180-0.94-v4.txt" size="8357" author="lhofhansl" created="Tue, 11 Dec 2012 00:26:26 +0000"/>
                            <attachment id="12560354" name="7180-0.94-v5.txt" size="9058" author="lhofhansl" created="Tue, 11 Dec 2012 05:48:01 +0000"/>
                            <attachment id="12556197" name="7180-0.96-v1.txt" size="8101" author="lhofhansl" created="Thu, 6 Dec 2012 01:16:42 +0000"/>
                            <attachment id="12560327" name="7180-0.96-v2.txt" size="8949" author="lhofhansl" created="Tue, 11 Dec 2012 01:17:34 +0000"/>
                            <attachment id="12560343" name="7180-0.96-v3.txt" size="8403" author="lhofhansl" created="Tue, 11 Dec 2012 03:53:32 +0000"/>
                            <attachment id="12560355" name="7180-0.96-v4.txt" size="9104" author="lhofhansl" created="Tue, 11 Dec 2012 05:48:01 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Nov 2012 18:27:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>258474</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 49 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0ktk7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>119606</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>