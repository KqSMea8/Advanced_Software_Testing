<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:50:42 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7958/HBASE-7958.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7958] Statistics per-column family per-region</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7958</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Originating from this discussion on the dev list: &lt;a href=&quot;http://search-hadoop.com/m/coDKU1urovS/Simple+stastics+per+region/v=plain&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://search-hadoop.com/m/coDKU1urovS/Simple+stastics+per+region/v=plain&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Essentially, we should have built-in statistics gathering for HBase tables. This allows clients to have a better understanding of the distribution of keys within a table and a given region. We could also surface this information via the UI.&lt;/p&gt;

&lt;p&gt;There are a couple different proposals from the email, the overview is this:&lt;br/&gt;
We add in something on compactions that gathers stats about the keys that are written and then we surface them to a table.&lt;/p&gt;

&lt;p&gt;The possible proposals include:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;How to implement it?&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Coprocessors -
	&lt;ul&gt;
		&lt;li&gt;advantage - it easily plugs in and people could pretty easily add their own statistics.&lt;/li&gt;
		&lt;li&gt;disadvantage - UI elements would also require this, we get into dependent loading, which leads down the OSGi path. Also, these CPs need to be installed &lt;em&gt;after&lt;/em&gt; all the other CPs on compaction to ensure they see exactly what gets written (doable, but a pain)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Built into HBase as a custom scanner
	&lt;ul&gt;
		&lt;li&gt;advantage - always goes in the right place and no need to muck about with loading CPs etc.&lt;/li&gt;
		&lt;li&gt;disadvantage - less pluggable, at least for the initial cut&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;&lt;b&gt;Where do we store data?&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;.META.
	&lt;ul&gt;
		&lt;li&gt;advantage - its an existing table, so we can jam it into another CF there&lt;/li&gt;
		&lt;li&gt;disadvantage - this would make META much larger, possibly leading to splits AND will make it much harder for other processes to read the info&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;A new stats table
	&lt;ul&gt;
		&lt;li&gt;advantage - cleanly separates out the information from META&lt;/li&gt;
		&lt;li&gt;disadvantage - should use a &apos;system table&apos; idea to prevent accidental deletion, manipulation by arbitrary clients, but still allow clients to read it.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Once we have this framework, we can then move to an actual implementation of various statistics.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12634541">HBASE-7958</key>
            <summary>Statistics per-column family per-region</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="jesse_yates">Jesse Yates</assignee>
                                    <reporter username="jesse_yates">Jesse Yates</reporter>
                        <labels>
                    </labels>
                <created>Thu, 28 Feb 2013 01:51:18 +0000</created>
                <updated>Wed, 28 Oct 2015 17:48:09 +0000</updated>
                            <resolved>Wed, 28 Oct 2015 17:48:09 +0000</resolved>
                                    <version>0.95.2</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>22</watches>
                                                                                                            <comments>
                            <comment id="13589061" author="jesse_yates" created="Thu, 28 Feb 2013 01:55:54 +0000"  >&lt;p&gt;The notable piece here is that we can put this &apos;stats scanner&apos; in as we write the compaction. It sees every key that gets written, so it can build perfect stats as of the compaction. The only limitation then is that its not &apos;per region&apos;, but &apos;per-CF per region&apos;; it would be a much larger overhaul to combine all the information across all the compactions in the region - doable, but probably not worth it as you actually lose information and only gain a little savings in terms of math effort when calculating per-region, cross CF key distributions.&lt;/p&gt;

&lt;p&gt;(For calculating key distributions, you basically sum the area under the histogram across the columns to determine the &apos;volume&apos; of keys in the given range)&lt;/p&gt;</comment>
                            <comment id="13589117" author="tlipcon" created="Thu, 28 Feb 2013 02:41:41 +0000"  >&lt;p&gt;Before we get too much into the detail, can we clarify what kind of statistics we&apos;re interested in collecting in the first place? There are a bunch of different things we could collect, maybe it&apos;s good to enumerate some of them and list some of the potential applications of them before we get into the details of how they&apos;re implemented.&lt;/p&gt;

&lt;p&gt;Here are a few of the places where I&apos;ve considered adding &quot;statistics&quot; in the past &amp;#8211; though they fall into different buckets which not everyone might consider statistics &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; :&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;b&gt;Block &quot;heat&quot;&lt;/b&gt; &amp;#8211; keep a reservoir sample of which rows in memstore have been read recently. When we flush the file, create a bitmap based on the sample mapping each flushed HFile block to its &quot;heat&quot;. These heat maps could be re-generated periodically based on block cache contents after the file is flushed. (something like 2 bits per HFile block would mean that the heat map for even a very large region could be re-written to disk in only a few MB). &lt;b&gt;Use case&lt;/b&gt;: when we move a region to another server, it can effectively more effectively pre-warm its cache.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;Row key distribution&lt;/b&gt; &amp;#8211; this seems to be the thing that people are talking about here mostly. Useful for calculating better split points for MR or region splits.&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;Row key cardinality&lt;/b&gt; - useful for join ordering in SQL engines with optimizers&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;Column qualifier and cell value cardinality&lt;/b&gt; - useful for join ordering as well as potentially automatic dictionary-coding?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;There are bunches of others that could be brainstormed up... so my main point is: what do we mean by stats? How should we build this so that it&apos;s extensible and usable for future stats as well as whatever first one we want to implement?&lt;/p&gt;</comment>
                            <comment id="13589869" author="jesse_yates" created="Thu, 28 Feb 2013 19:56:09 +0000"  >&lt;p&gt;Good call Todd.&lt;/p&gt;

&lt;p&gt;The origina; intention was to enable histograms over the keyvalues in a region. They are pretty simple to implement and get people really far, for many cases.&lt;/p&gt;

&lt;p&gt;The histograms support things like determining parallelization of scan within a region (should I use 1, 5, or 100 threads to scan this region) as well as key/value cardinality (helpful for using non-covered indexes). &lt;/p&gt;

&lt;p&gt;Hopefully not getting too far into the implementation details, we could easily use a compound key structure in the stats table to support a large variety of stats going forward that adds almost no complication to the intial, histogram case. &lt;/p&gt;</comment>
                            <comment id="13590067" author="jesse_yates" created="Thu, 28 Feb 2013 23:45:06 +0000"  >&lt;p&gt;Attaching patch with what I was thinking for the underlying framework around stats. This is the built-in (non-CP), system stat table implementation.&lt;/p&gt;

&lt;p&gt;Things it doesn&apos;t have (but should before commit):&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;real system table semantics&lt;/li&gt;
	&lt;li&gt;a clean way to add statistic tracker&lt;/li&gt;
	&lt;li&gt;all the coprocessor hooks.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This implementation is just for major compactions since its a bit harder to deal with general statistics on a minor compaction basis since you don&apos;t see all the keys. However, you could easily see adding different hooks based on different statistics around the codebase.&lt;/p&gt;

&lt;p&gt;I&apos;d recommend looking at the package-info for a general overview and then jumping down into DefaultCompactor to see how we hook it up. From there StatisticsTable would (to me) be a very natural next step and finally MinMaxStatisticTracker gives you a &lt;em&gt;very simple&lt;/em&gt; example of how you would write a statistic.&lt;/p&gt;

&lt;p&gt;Mostly, looking for overall design feedback rather than nits. Its also on RB here: &lt;a href=&quot;https://reviews.apache.org/r/9686/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/9686/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13593791" author="whitingj" created="Tue, 5 Mar 2013 19:20:53 +0000"  >&lt;p&gt;Some stats I would like to see are historic requests per region / CF and requests per second. &lt;/p&gt;

&lt;p&gt;In newer versions of hbase the number of ops done on a region are exposed in the web interface and jmx how it gives you very little context as to what it has been historically nor what the current requests per second are.&lt;/p&gt;

&lt;p&gt;IMHO would find those stats very useful.&lt;/p&gt;</comment>
                            <comment id="13593801" author="jesse_yates" created="Tue, 5 Mar 2013 19:29:41 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=whitingj&quot; class=&quot;user-hover&quot; rel=&quot;whitingj&quot;&gt;Jeff Whiting&lt;/a&gt; I&apos;m tentative about keeping too much history around for things like that - its really easy to end up building a stat&apos;s tracking thing like has already been built with OpenTSDB (opentsdb.net); in fact, that is essentially what would be built - it stores historical information about things like that in a table in HBase.&lt;/p&gt;

&lt;p&gt;what would be gain by putting that information into core rather than using OpenTSDB/Ganglia/etc?&lt;/p&gt;</comment>
                            <comment id="13594307" author="apurtell" created="Wed, 6 Mar 2013 03:39:03 +0000"  >&lt;p&gt;I&apos;d like to see a histogram of operations taken on the CF, for subsequent autotuning for read-mostly, mixed, or write-mostly workloads. &lt;/p&gt;</comment>
                            <comment id="13595132" author="jesse_yates" created="Wed, 6 Mar 2013 21:21:12 +0000"  >&lt;p&gt;So it looks like there is a desire for a pretty large range of possible statistics. I&apos;d rather we don&apos;t get bogged down in what specific statistics we want, but push more towards a design discussion around enabling people to capture these statistics. We know we want them, the question is how &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Once we have the mechanisms in place to read/write a stats table for an individual stat, we can much more easily expand that support stats at different tie-in places. The &apos;at compaction time histogram&apos; seemed like an easy enough starting place for &lt;em&gt;one type of stat&lt;/em&gt;, but that should not necessarily limit possible stats that can be collected; its an immediate use-case for a general statistics table.&lt;/p&gt;

&lt;p&gt;Stepping back, it seems to me that we can have a basic set of statistics that you can enable for a table at creation time (or even turn it on later too). We then also need a mechanism to let people add their own statistics easily (thinking a CP hook here). From there, we just need to have an mechanism to make it easy to access each statistic.&lt;/p&gt;

&lt;p&gt;I don&apos;t think any of the above proposals really changes my proposed outline-patch besides making it easy(easier?) to hook in custom stat implementations, a clean dynamic loading mechanism (from the various //TODOs for CP hooks), and a little more utility in the StatisticsTable class to make it easy to read a stat.&lt;/p&gt;

&lt;p&gt;Sound reasonable?&lt;/p&gt;</comment>
                            <comment id="13603863" author="jesse_yates" created="Fri, 15 Mar 2013 21:17:53 +0000"  >&lt;p&gt;Attaching first cut patch (and its parent patch, which is just an updated &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7999&quot; title=&quot;Add &amp;#39;system&amp;#39; tables&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7999&quot;&gt;&lt;del&gt;HBASE-7999&lt;/del&gt;&lt;/a&gt;), following the same direction as the rough-cut. This was also posted to RB here: &lt;a href=&quot;https://reviews.apache.org/r/9963/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/9963/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13603908" author="whitingj" created="Fri, 15 Mar 2013 22:05:22 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jesse_yates&quot; class=&quot;user-hover&quot; rel=&quot;jesse_yates&quot;&gt;Jesse Yates&lt;/a&gt; I understand the concern and agree that we don&apos;t want to reinvent the wheel.&lt;/p&gt;

&lt;p&gt;Although it seems like some basic stats would be extremely useful.  For example the region balancer could find the hottest regions (ones with the more requests per second) and automatically balance them across different region servers.  A region could be split because it is too hot to reduce the number of requests rather than only splitting on size.&lt;/p&gt;

&lt;p&gt;Systems like ganglia / opentsb typically do really well at giving high level stats at a server level.  However they would do poorly if they tried to have stats on every region (we have over 1000 regions and it would be a mess).&lt;/p&gt;

&lt;p&gt;Finally we could have some pretty graphs on the HMaster similar to Accumulo (see: &lt;a href=&quot;http://i1-scripts.softpedia-static.com/screenshots/Apache-Accumulo_1.png?1341920105&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://i1-scripts.softpedia-static.com/screenshots/Apache-Accumulo_1.png?1341920105&lt;/a&gt;)&lt;/p&gt;</comment>
                            <comment id="13603933" author="jesse_yates" created="Fri, 15 Mar 2013 22:31:37 +0000"  >&lt;p&gt;Here&apos;s the beauty of the recently posted approach - you could definitely write your own stats and then tag each table with it and your off to the races (rather than relying on things like JMX and tcollectors, in the case of otsdb).&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For example the region balancer could find the hottest regions (ones with the more requests per second) and automatically balance them across different region servers. A region could be split because it is too hot to reduce the number of requests rather than only splitting on size.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;that would be extremely cool (only a little pun intended).&lt;/p&gt;

&lt;p&gt;I&apos;d question how OTSDB performs on your scale though - it can collect a whole heck of a lot of stats and since it stores them in a very cleanly distributed way in HBase, I would be surprised if it wasn&apos;t scaling.&lt;/p&gt;

&lt;p&gt;My concern is that we don&apos;t fill up HDFS with logging stats that are 2-3x what the actual datasizes are, something that wouldn&apos;t be too far fetched. We just need to be careful to make sure we don&apos;t keep too much history&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Finally we could have some pretty graphs on the HMaster similar to Accumulo&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, they are certainly pretty, but IMO pretty useless for anyone but the most novice user.&lt;/p&gt;</comment>
                            <comment id="13624358" author="eclark" created="Sat, 6 Apr 2013 06:16:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;Yeah, they are certainly pretty, but IMO pretty useless for anyone but the most novice user.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think we&apos;ve been pretty remiss to ignore the novice user.  If those graphs could be the thing that gets users to use hbase then they did their job.&lt;/p&gt;</comment>
                            <comment id="13648842" author="jmhsieh" created="Fri, 3 May 2013 22:21:29 +0000"  >&lt;p&gt;bumping from 0.95.1, readd it if makes it in.&lt;/p&gt;</comment>
                            <comment id="13994412" author="apurtell" created="Sun, 11 May 2014 03:21:43 +0000"  >&lt;p&gt;Thinking about reviving this issue. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jesse_yates&quot; class=&quot;user-hover&quot; rel=&quot;jesse_yates&quot;&gt;Jesse Yates&lt;/a&gt;, could you comment on why this fizzled?&lt;/p&gt;</comment>
                            <comment id="13994463" author="mantonov" created="Sun, 11 May 2014 07:56:38 +0000"  >&lt;p&gt;One note about stats w.r.t. to zk-less assignment work &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11059&quot; title=&quot;ZK-less region assignment&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11059&quot;&gt;&lt;del&gt;HBASE-11059&lt;/del&gt;&lt;/a&gt;. Perhaps having stats on number of rows/size in bytes per region can be used for master-initiated splits/merges.&lt;/p&gt;</comment>
                            <comment id="13995304" author="jesse_yates" created="Mon, 12 May 2014 17:42:02 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; originally this was going to be done to support phoenix. so they could get a better idea of distribution of keys to do better region chunking. In phoenix we decided even sized chunks would work well enough, so the impetus to get this done fizzled a bit.&lt;/p&gt;

&lt;p&gt;Other reasons for fizzle:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;do we just expose the metric for things like otsdb? or just store it in HBase in our own format? both?&lt;/li&gt;
	&lt;li&gt;do we need to a UI components?&lt;/li&gt;
	&lt;li&gt;everyone wants all the metrics&lt;/li&gt;
	&lt;li&gt;should this even be part of core and instead just done via a scan-time coprocessor?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Those considerations aside, I think it still would still be great to do for core &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  We can always add more stats once we have a way to handle all the rest.&lt;/p&gt;

&lt;p&gt;How to expose them is an open question (especially considering phoenix will want to read these stats too) - maybe a pluggable sink/use a custom tag for metrics2 so people can use their own sinks?&lt;/p&gt;</comment>
                            <comment id="13997314" author="apurtell" created="Wed, 14 May 2014 06:05:00 +0000"  >&lt;p&gt;Thanks for the summary &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jesse_yates&quot; class=&quot;user-hover&quot; rel=&quot;jesse_yates&quot;&gt;Jesse Yates&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;The description for this issue is &apos;statistics per-column family per-region&apos;. In that scope maintaining a system table for statistics gathering is unnecessary, we can use region local storage. Perhaps during compactions we could calculate the basic things people seem to want: row count, row key cardinality, min/max/avg size per value, and total value size. Per CF, per region. Column qualifier cardinality also seems like it might be useful. Perhaps we could maintain a tree of statistic files, at the HFile level, at the CF level, at the table level, at the namespace level. Compactions would record into the resulting HFiles the statistics metadata calculated during processing. A process running in the master could aggregate while following the tree in the background, swapping updated results for older results at every level when ready. We should be able to handle point-in-time counts and simple statistical properties in this way? It could be possible to use a system statistics table instead of files, but why have regionservers exchange RPCs if not necessary (and updating a table inline with compaction or split handing brings back unfond memories of something we had once called the &apos;region historian&apos;).&lt;/p&gt;</comment>
                            <comment id="13997320" author="apurtell" created="Wed, 14 May 2014 06:10:25 +0000"  >&lt;p&gt;To make the statistics useful we could introduce CF level APIs for coprocessors, export to metrics2 handled by the regionserver, a cluster summary API handled by the master, and infrastructure for said API could be used to generate output or graphs on the master UI. &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12434687">HBASE-1811</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12573945" name="hbase-7958-v0-parent.patch" size="40639" author="jesse_yates" created="Fri, 15 Mar 2013 21:17:53 +0000"/>
                            <attachment id="12573944" name="hbase-7958-v0.patch" size="136527" author="jesse_yates" created="Fri, 15 Mar 2013 21:17:53 +0000"/>
                            <attachment id="12571498" name="hbase-7958_rough-cut-v0.patch" size="53356" author="jesse_yates" created="Thu, 28 Feb 2013 23:45:06 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12635273">HBASE-7999</subtask>
                            <subtask id="12635404">HBASE-8008</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 28 Feb 2013 02:41:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>315034</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 31 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1id2v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>315378</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>