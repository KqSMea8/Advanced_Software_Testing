<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:23:18 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-11447/HBASE-11447.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-11447] Proposal for a generic transaction API for HBase</title>
                <link>https://issues.apache.org/jira/browse/HBASE-11447</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;HBase transaction management today is provided by a number of products, each implementing a different API, each having different strengths.  The lack of a common API for transactional interfaces means that applications need to be coded to work with a specific Transaction Manager.  This proposal outlines an API which, if implemented by the different Transaction Manager vendors would provide stability and choice to HBase application developers.  &lt;/p&gt;</description>
                <environment>&lt;p&gt;Any.&lt;/p&gt;</environment>
        <key id="12724628">HBASE-11447</key>
            <summary>Proposal for a generic transaction API for HBase</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="john-deroo">John de Roo</reporter>
                        <labels>
                    </labels>
                <created>Tue, 1 Jul 2014 02:25:51 +0000</created>
                <updated>Thu, 14 May 2015 14:36:45 +0000</updated>
                                            <version>1.0.0</version>
                                                    <component>Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>40</watches>
                                                                <comments>
                            <comment id="14048456" author="yuzhihong@gmail.com" created="Tue, 1 Jul 2014 03:08:56 +0000"  >&lt;p&gt;@John:&lt;br/&gt;
Can you attach the pdf to this JIRA ?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="14048461" author="john-deroo" created="Tue, 1 Jul 2014 03:14:26 +0000"  >&lt;p&gt;Hi Ted,&lt;/p&gt;

&lt;p&gt;I was about to send out an email - I haven&apos;t worked out how to do this.  Do I need to make the document accessible from an external site or can I download it?&lt;/p&gt;

&lt;p&gt;Thanks, John.&lt;/p&gt;
</comment>
                            <comment id="14048463" author="adityakishore" created="Tue, 1 Jul 2014 03:22:30 +0000"  >&lt;p&gt;From the Menu, select &quot;More&quot; -&amp;gt; &quot;Attach Files&quot;&lt;/p&gt;</comment>
                            <comment id="14048464" author="john-deroo" created="Tue, 1 Jul 2014 03:26:33 +0000"  >&lt;p&gt;First draft.&lt;/p&gt;</comment>
                            <comment id="14048467" author="john-deroo" created="Tue, 1 Jul 2014 03:36:27 +0000"  >&lt;p&gt;Thanks, not sure how I missed it! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                            <comment id="14048749" author="lhofhansl" created="Tue, 1 Jul 2014 10:49:41 +0000"  >&lt;p&gt;Cool.&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I would like to discuss associating a TransactionHTable object with a Transaction upon construction and then use the normal put/delete/etc methods. HTables are lightweight now and hence can be created for each transaction. That way the API is the same (besides construction) and we won&apos;t have two implementations of each operation. The Transaction could even have a getter for HTableInterface instances.&lt;/li&gt;
	&lt;li&gt;PREPARED/PREPARING implies 2PC transactions only?&lt;/li&gt;
	&lt;li&gt;For optimistic concurrency control (OCC) and snapshot isolation (SI) a transaction would need to include: the write TS, the read TS, potentially uncommitted transactions newer than the read point, etc. I.e. Transaction maybe should just be a marker interface to be passed around, but details are left to the implementation.&lt;/li&gt;
	&lt;li&gt;We should allow distinguishing between read only and read write transactions. (important for OCC)&lt;/li&gt;
	&lt;li&gt;We should also be able to indicate isolation level. Full serializable transactions are very expensive in a distributed environment when many rows are read/updated.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14050899" author="apurtell" created="Thu, 3 Jul 2014 00:14:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;I would like to discuss associating a TransactionHTable object with a Transaction upon construction and then use the normal put/delete/etc methods.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, this was the first thought I had looking at the PDF&lt;/p&gt;</comment>
                            <comment id="14051081" author="ghelmling" created="Thu, 3 Jul 2014 05:29:46 +0000"  >&lt;p&gt;Thanks for posting this.&lt;/p&gt;

&lt;p&gt;TransactionManager:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The &lt;tt&gt;resume&lt;/tt&gt; methods seem implementation specific.  I&apos;m not sure the idea of suspend/resume of a transaction would be generally applicable.&lt;/li&gt;
	&lt;li&gt;Why are transaction states shown as constants on this class instead of an enum of states on the Transaction class?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Transaction:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I don&apos;t really understand why some transaction &quot;actions&quot; (commit, rollback, suspend) are represented here, while others are represented on TransactionManager.  This seems like a blurring of concerns between the two classes.  I would more expect all the &quot;actions&quot; to be present on TransactionManager and the Transaction class to just represent the transaction state.&lt;/li&gt;
	&lt;li&gt;setTransactionTimeout() - does it make sense to set the timeout on an individual transaction after it&apos;s started?  I think it would be better to be able to specify a timeout when calling TransactionManager.begin()&lt;/li&gt;
	&lt;li&gt;setRollbackOnly() - I don&apos;t understand why this is needed instead of simply rolling back the transaction.  Seems like an implementation detail?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;TransactionTable:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;I agree with previous comments that we should provide a way of setting a transaction on a table, then leaving the HTableInterface methods unchanged.  In the same way that HTable is not thread safe for writes, it doesn&apos;t make sense to me to mix operations from different transactions.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;HeuristicCommitException/HeuristicMixedException/HeuristicRollbackException:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;these all seem implementation specific&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="14051230" author="john-deroo" created="Thu, 3 Jul 2014 09:17:36 +0000"  >&lt;p&gt;Initial feedback by email before the JIRA was created.&lt;/p&gt;</comment>
                            <comment id="14051243" author="john-deroo" created="Thu, 3 Jul 2014 09:31:17 +0000"  >&lt;p&gt;I&apos;ve added an attachment with the initial feedback received via email before I created the JIRA.  Thanks for the excellent feedback so far.  I&apos;m working hard to incorporate it all into the proposal.&lt;/p&gt;</comment>
                            <comment id="14053437" author="john-deroo" created="Mon, 7 Jul 2014 08:25:32 +0000"  >&lt;p&gt;Update of the original proposal.  This includes all feedback so far, but does not yet include a factory class.&lt;/p&gt;</comment>
                            <comment id="14053440" author="john-deroo" created="Mon, 7 Jul 2014 08:27:51 +0000"  >&lt;p&gt;I&apos;ve deleted the original proposal to avoid confusion.  If anyone want&apos;s a copy for comparison, let me know.&lt;/p&gt;</comment>
                            <comment id="14053475" author="john-deroo" created="Mon, 7 Jul 2014 09:15:43 +0000"  >&lt;p&gt;Version 0.3 attempts to address the following issues identified in the original.  If you think I&apos;ve missed something or not addressed it in the best way, please let me know.&lt;/p&gt;

&lt;p&gt;Support for isolation level, read-only transactions and transaction timeout.&lt;br/&gt;
    Isolation levels are based on ANSI SQL, but does not address Snapshot isolation, MVCC and the distinction with Lock Management.  It is assumed that MVCC support (without read lists) equates to Read Committed and full Snapshot isolation (with read lists) equates to Repeatable Reads.  However, it may be better to provide the ability to distinguish between MVCC/Snapshot isolation and Lock Management - a concurrency control mode.  This would be provided in a similar syntax to isolation level.&lt;/p&gt;

&lt;p&gt;TransactionTable should match the signature of HTable and include all methods HTable supports.&lt;br/&gt;
    Added versions of all the HTable constructors with Transaction as a parameter.  Also provided a setTransaction method so that TransactionTable methods match HTable.  This has some implications for threading which are also described.&lt;/p&gt;

&lt;p&gt;Removed resume and suspend.  &lt;br/&gt;
    They are not needed with streamTo and constructFrom.  Provided more information usage including an example.&lt;/p&gt;

&lt;p&gt;Added an iterator function.  See getAll.&lt;/p&gt;

&lt;p&gt;Factory class.&lt;br/&gt;
    Several reviews identified the need for a factory class.  This is the one outstanding issue not covered by the updated proposal.  I&apos;m still working on the details.&lt;/p&gt;

&lt;p&gt;Pseudo code/examples.&lt;br/&gt;
    Added a number of examples.&lt;/p&gt;

&lt;p&gt;Added ability to override TM default values in hbase-site.xml file or equivalent.  Currently only specifies the isolation level and transaction timeout, but I&apos;m sure we need more here to allow configuration of the Transaction Manager.&lt;/p&gt;

&lt;p&gt;Rationalised exceptions including removing heuristics which really only apply to heterogeneous 2PC which is not supported by the proposal.&lt;/p&gt;

&lt;p&gt;Changed the name of TransactionManager interface to TransactionServiceClient.&lt;/p&gt;

&lt;p&gt;Kept the TransactionManager interface (now TransactionServiceClient) and the Transaction class rather than combining the functions.  For example it would be possible to include both begin and constructFrom methods as Transaction constructors, but we would still need a way to provide the global/static methods.  I&apos;m open to changing this if you have a better approach.&lt;/p&gt;

&lt;p&gt;2PC interface.&lt;br/&gt;
  No 2PC interface (prepare/commit) is provided because this is an application API supporting only a single TM.&lt;/p&gt;

&lt;p&gt;Provided the option for read-only transactions.&lt;/p&gt;

&lt;p&gt;Modified transaction timeout interface to be consistent with isolation level and transaction type.&lt;/p&gt;

&lt;p&gt;Anything I&apos;ve missed??&lt;/p&gt;
</comment>
                            <comment id="14053951" author="yuzhihong@gmail.com" created="Mon, 7 Jul 2014 18:15:35 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Transaction begin(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; TransactionIsolationLevel isolationLevel,
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; seconds);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Name the second parameter timeout or timeoutInSeconds ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Byte&lt;/span&gt;[] streamTo();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;How about naming the above method:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] toByteArray() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Would it be simpler if TransactionTable has setTransaction() only ?&lt;br/&gt;
What would happen if setTransaction() is called on a TransactionTable which has an active Transaction associated with it ?&lt;br/&gt;
Would it be better if TransactionTable is called TransactionTableInterface ?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also Transaction instances created by constructFrom can be used in parallel with the Transaction instance from the beginner and with any other calls to constructFrom in the same or different threads or processes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;By &apos;in parallel&apos;, do you mean &apos;interchangeably&apos; ?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If the Transaction Manager does not support the specified isolation level, a NotSupportedException is thrown.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Would it make sense to add another method which returns the supported isolation levels ?&lt;/p&gt;
</comment>
                            <comment id="14054045" author="yuzhihong@gmail.com" created="Mon, 7 Jul 2014 19:10:55 +0000"  >&lt;p&gt;w.r.t. exception classes, it would be nice if they have common base class which is not Exception.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class IllegalStateException &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Exception
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;IllegalStateException is defined by Java.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class RollbackException &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Exception
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Maybe name the above RolledBackException ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;name&amp;gt;hbase.transaction.isolationlevel&amp;lt;/name&amp;gt;
&amp;lt;value&amp;gt;2&amp;lt;/value&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Would it be better if symbolic names are used to specify isolation levels ? That way users doesn&apos;t need to look up the numeric value for the isolation level they want.&lt;br/&gt;
For 5.1:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
txSC = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TransactionServiceClient(conf);
Configuration config = HBaseConfiguration.create();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&apos;config&apos; should be used for constructing TransactionServiceClient.&lt;/p&gt;

&lt;p&gt;For 5.3,&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The concurrency control method (locking or MVCC) and isolation level will have no effect on this because both puts are performed within the same transaction.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What&apos;s the background for the use case described in 5.3 ? Such usage would result in indeterministic outcome when commit is called, right ?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Should the TransactionServiceClass contain the begin and constructFrom methods or should these be constructors for the Transaction class?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Looks like constructFrom method should belong to Transaction class.&lt;/p&gt;</comment>
                            <comment id="14054873" author="john-deroo" created="Tue, 8 Jul 2014 12:15:45 +0000"  >&lt;p&gt;Hi Ted, more great feedback!  &lt;/p&gt;

&lt;p&gt;seconds parameter is now timeout (still in seconds though of course).&lt;br/&gt;
I&apos;ve renamed streamTo to toByteArray.&lt;br/&gt;
I&apos;ve removed all the transaction related constructors from TransactionTable.&lt;br/&gt;
The intention was that calling setTransaction when a TransactionTable has an active transaction associated with it would change the active transaction associated with the TransactionTable.  This allows the TransactionTable object to be reused for subsequent transactions.  I&apos;ve added a comment to explain this in the text.&lt;br/&gt;
Changed TransactionTable to TransactionTableInterface.&lt;br/&gt;
I&apos;ve changed &quot;in parallel&quot; to &quot;at the same time&quot;.  I think it clarifies the relationship.&lt;br/&gt;
Added a TransactionServiceClient.getSupportedIsolationLevels to return supported isolation levels.&lt;br/&gt;
Added a TransactionException class and derived all the exceptions from it.  Also derived from RuntimeException to make all exceptions unchecked.&lt;br/&gt;
Changed IlegalStateException to IllegalTransactionStateException.&lt;br/&gt;
Changed RollbackException to RolledBackException.&lt;br/&gt;
Changed to symbolic names for the isolation level property.&lt;br/&gt;
Fixed the order of new TransactionServiceClient and HBaseConfiguration.create in the examples.&lt;br/&gt;
From 5.3 (concurrency control method): This is perhaps a bad example.  The point is that because both threads are performing work against the same transaction, concurrency control mechanisms don&apos;t apply.  At least, that&apos;s my experience.  If anyone&apos;s aware of TMs which provide protection/serialization in this circumstance, I&apos;ll happily change the text and adjust the specification to allow for it.&lt;br/&gt;
I&apos;ll move both begin and constructFrom to Transaction constructors.  This cleans up the concerns about transactional operations being in the wrong place.&lt;br/&gt;
It&apos;s 12am now, so I guess I won&apos;t get the updated spec out until morning now - I have a bit of cleanup to do flow the changes through the whole document.&lt;br/&gt;
I should also take some time to learn the text formatting notation for comments! 8^)&lt;/p&gt;</comment>
                            <comment id="14057090" author="john-deroo" created="Thu, 10 Jul 2014 03:24:21 +0000"  >&lt;p&gt;Updated the proposal with Ted&apos;s most recent input.&lt;/p&gt;</comment>
                            <comment id="14058002" author="ipodfans" created="Thu, 10 Jul 2014 21:42:28 +0000"  >&lt;p&gt;1. Could you please explain TransactionStatus in more details ? It might be super helpful if we can also draw some concrete examples how we gonna to use these status, this provide a guideline for transaction implementor to use correct status in the right way and avoid misinterpretation.&lt;/p&gt;

&lt;p&gt;2. As someone mentioned earlier, do we really need to provide TransactionStatus in the public API, could this be implementation specific ? &lt;/p&gt;

&lt;p&gt;3. TransactionServiceClient declares all methods as static, could we remove that keyword ? &lt;/p&gt;

&lt;p&gt;4. TransactionInterface contains several Transaction(...) methods, looks like all these are constructors. It is better to not include them in the interface, let implementation to decide the proper way to initialize the object. Even if we really want to control the existence of some properties, it is better to define setter&amp;amp;getter or provide a base abstract implementation. &lt;/p&gt;

&lt;p&gt;5. Should TransactionInterface.commit() and TransactionInterface.rollback() have return values ?&lt;/p&gt;

&lt;p&gt;6. TransactionInterface.setTransactionTimeout should be better to have extra TimeUnit parameter, so that user won&apos;t be confused by timeout resolution (the meaning of timeout could be milliseconds, seconds or even hours).&lt;/p&gt;

&lt;p&gt;7. TransactionInterface.toByteArray, instead of this, maybe we can add one more method that accepts an OutputStream, so that it might allow more efficient implementation of Transaction serialization.&lt;/p&gt;

&lt;p&gt;8. It might be better to replace TransactionTable.setTransaction by TransactionTable.addTransaction, because I think most of time there is not only a single transaction but multiple of them can happen.  &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt; recently announced a transaction implementation based on HBase, called Themis which is inspired by Google&apos;s percolator. I&apos;d like to hear if you (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt;) have comments for this transaction API.&lt;/p&gt;</comment>
                            <comment id="14058311" author="john-deroo" created="Fri, 11 Jul 2014 03:37:57 +0000"  >&lt;p&gt;Thanks Shengzhe, good feedback.&lt;/p&gt;

&lt;p&gt;1 &amp;amp; 2. I&apos;ll add more details to define the transaction states.  I took them from JTA.  They could be rationalized for our use - we don&apos;t need MARKED_ROLLBACK for example.  However, I expect TMs will only provide those states which it makes sense for them to report.  I&apos;ll add a comment to that effect.  I don&apos;t want to remove them completely though because we really want applications to be able to have some consistency regarding what is returned by getStatus.  It may be that transient states such as PREPARING are omitted by some TMs or have different timing windows, but the application needs to be able to tell the difference between the main states like ACTIVE, COMMITTING and ROLLING_BACK in an implementation independent manner.  The actual mapping between a particular TMs internal states and these TransactionStatus values is up to the TM to decide.&lt;br/&gt;
3. Did you want to remove the static keyword?  I made all the methods static after removing the begin transaction function from TransactionServiceClient and also removed the factory method as the remaining methods are all global - we don&apos;t need to instantiate a TransactionServiceClient for them.  Perhaps you see something here that I&apos;m missing?&lt;br/&gt;
4. I agree with you here, I didn&apos;t put enough thought into moving the begin methods out of the TransactionServiceClient interface into Transaction.  I&apos;ll change it to an abstract base class.  It would be nice to do without the parameters, but allowing a setter/getter approach would allow an application to change or set things like isolation level and transaction type part-way through a transaction which is very hard to implement at a TM level and could actually cause problems - for example changing a write-read transaction to read-only or moving to a higher isolation level.&lt;br/&gt;
5. I&apos;ve used exceptions exclusively.  Originally these where checked exceptions, but I just changed them to unchecked, so returning a status on rollback and commit might be a useful addition.&lt;br/&gt;
6. Good catch - I should have removed this method.  It comes originally from the JTA spec, but I decided it was unnecessary during a transaction - better to set it on the begin.  Originally I had the parameter defined as seconds, but changed it to timeout to make the parameters easier to read.  BTW seconds seems very short for transaction timeouts - minutes might be a better metric.  I&apos;ll compromise and define a TransactionTimeout type (probably just int) and change the parameter back to the unit - probably still seconds unless you think I should change it.&lt;br/&gt;
7. Could you expand on this idea?  I certainly agree that a byte array is a bit basic.&lt;br/&gt;
8. Hmm, interesting.  I&apos;m not sure here whether I&apos;ve confused you in the document or, perhaps, I am.  As I see it, a TransactionTable can only be associated with a single transaction at any point in time.  setTransaction seems appropriate because it if setTransaction is called when the TransactionTable is associated with a transaction, then the table becomes associated with the new transaction and is disassociated with the prior transaction.  We have no nesting either as I wanted to keep the API as simple as possible.&lt;br/&gt;
I know only a little about Themis.  I took a look at the API to ensure that it should be possible to map it to the proposal.  It&apos;s an interesting approach that I&apos;d love to know more about.  Are you based in the SF Bay Area?  I&apos;m there for the next 2 weeks, and, if you&apos;re local, it would be great to get in touch.&lt;/p&gt;

&lt;p&gt;I&apos;ll update the paper in the next few days, but there might be a little delay as I&apos;m travelling to the US on Sunday.&lt;/p&gt;</comment>
                            <comment id="14058330" author="yuzhihong@gmail.com" created="Fri, 11 Jul 2014 04:03:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;a TransactionTable can only be associated with a single transaction at any point in time.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&apos;s my understanding too.&lt;/p&gt;</comment>
                            <comment id="14058335" author="ipodfans" created="Fri, 11 Jul 2014 04:10:47 +0000"  >&lt;p&gt;Oh, I think I am more interested in doing multiple transactions in a single TransactionTable instance. Think about a user do multi-row transaction, if two transactions operate two different set of rows, we could execute them together without creating another TransactionTable instance.&lt;/p&gt;</comment>
                            <comment id="14058336" author="yuzhihong@gmail.com" created="Fri, 11 Jul 2014 04:10:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should TransactionInterface.commit() and TransactionInterface.rollback() have return values ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Alternatively, these methods can throw exception, indicating error condition.&lt;/p&gt;</comment>
                            <comment id="14058514" author="cuijianwei" created="Fri, 11 Jul 2014 07:36:16 +0000"  >&lt;p&gt;Thanks for this proposal, it&apos;s cool.&lt;br/&gt;
1. Is it necessary to provide init(final ClusterConnection connection, ExecutorService pool) and destroy() in TransactionServiceClient? Transaction API might be used together with HTable(some tables need transaction while others only need direct HTable access) in application program, it might be necessary to share global ClusterConnection or ExcecutorService between Transaction API and HTable. For destroy(), it could provide a change to clean up global resources. For example, if the TransactionServiceClient implementation needs to visit a remote server, users might expect to invoke TransactionServiceClient.destroy() to clean up Rpc resources when the program exiting.&lt;br/&gt;
2. How about pass Configuration to the constructor of Transaction and let Transaction provide a getter method as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; commented, such as getTable(String tableName), then the example code from 5.2 of v0.4_1 could be:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; TransactionTable txTable;
Configuration config = HBaseConfiguration.create();
Transaction tx1 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Transaction(config);
TransactionTable txTable = tx1.getTable(&lt;span class=&quot;code-quote&quot;&gt;&quot;table1&quot;&lt;/span&gt;);
Put p1 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;row1&quot;&lt;/span&gt;));
....
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;From the proposal, it seems that the Transaction need to hold the mutations, transaction state and do commit logic, while TransactionTable tends to only provide access methods. From this point, Transaction might need more configurable options which could be specified by Configuration in constructor.&lt;br/&gt;
3. In 3.4 of v0.4_1:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If no Transaction is associated with a TransasctionTable, it operates identically to HTable. That is non-transactionally.&lt;br/&gt;
For example, a put method call will be passed through to HTable.put.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What about throwing Exception in this situation? Users might forget to set Transaction for TransactionTable in their code, if they run the code, unexpected data might be written to HBase directly by HTable(The data format might be different between Transaction of HTable). It might be more safe to throw Exception in this context because users create TransactionTable explicitly to do the Transaction. &lt;br/&gt;
4. What about make TransactionException extends IOException? Then, the Transaction API will perform more similar as HTable.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ipodfans&quot; class=&quot;user-hover&quot; rel=&quot;ipodfans&quot;&gt;Shengzhe Yao&lt;/a&gt;, Thank you for mentioning Themis. I am thinking of changing themis to support API in the proposal. It seems that themis could implement the proposed APIs without modifying the core logic&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. One question is that TransactionTableInterface will extend HTableInterface, then users could methods defined in HTableInterface such as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  void put(Put put) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 
&lt;p&gt;However, users should not specify timestamp or version in put when using themis as transaction implementation because these attributes are used internally. It is feasible to throw Exception when user setting timestamp or version in put and issue to themis Transaction. I just wonder is there a better way to avoid users do such things? &lt;/p&gt;</comment>
                            <comment id="14059515" author="apurtell" created="Fri, 11 Jul 2014 23:49:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;Thank you for mentioning Themis. I am thinking of changing themis to support API in the proposal. It seems that themis could implement the proposed APIs without modifying the core logic&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would be really great if you could do that &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt;, then we have another user to test the expressiveness of the API along with John&apos;s stuff.&lt;/p&gt;</comment>
                            <comment id="14059797" author="cuijianwei" created="Sat, 12 Jul 2014 14:05:10 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;, thanks for your comment. I think this is also important for themis because the generic API could motivate themis to better implement transaction on HBase&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14063104" author="john-deroo" created="Wed, 16 Jul 2014 04:09:20 +0000"  >&lt;p&gt;Updated to improve syntax in API and to reflect many of the suggestions.&lt;/p&gt;</comment>
                            <comment id="14063114" author="john-deroo" created="Wed, 16 Jul 2014 04:17:33 +0000"  >&lt;p&gt;I&apos;ve added version 0.5 of the proposal to attempt to integrate a number of comments that required additional thought and research.  &lt;/p&gt;</comment>
                            <comment id="14069715" author="cuijianwei" created="Tue, 22 Jul 2014 02:27:55 +0000"  >&lt;p&gt;v0.5 is cool&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
1. In section 3.2 of v0.5:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;only one TransactionService object needs to be instantiated in order to run transactions&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Do we need a static TransactionService create/getter method to create a singleton TransactionService implementation&quot;? Then, different threads could use this singleton implementation more easily. such as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   &lt;span class=&quot;code-comment&quot;&gt;// create or get singleton TransactionService implementation
&lt;/span&gt;   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; TransactionService getTransactionService(Configuration config);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2.  In section 4.2:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Isolation levels are based on the ANSI SQL standard.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In the paper &quot;A Critique of ANSI SQL Isolation Levels&quot;(&lt;a href=&quot;http://research.microsoft.com/apps/pubs/default.aspx?id=69541&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://research.microsoft.com/apps/pubs/default.aspx?id=69541&lt;/a&gt;),  it proves that: &quot;the ANSI SQL definition fail to characterize several popular isolation levels,....&quot;, the authors provide more accurate descriptions to different isolation levels including Snapshot Isolation for multi-version system(the isolation levels are concluded in Table 4 in the paper), do we need to cite this paper to define the isolation levels?&lt;/p&gt;</comment>
                            <comment id="14072711" author="yuzhihong@gmail.com" created="Thu, 24 Jul 2014 02:32:18 +0000"  >&lt;p&gt;w.r.t. whether TransasctionTable allows operations without associating transaction, a boolean parameter, named nonTransactionalAllowed e.g., can be passed to TransasctionTable ctor.&lt;br/&gt;
If the value of nonTransactionalAllowed is true, user can call HTable methods without specifying transaction.&lt;/p&gt;</comment>
                            <comment id="14072767" author="jamestaylor" created="Thu, 24 Jul 2014 04:07:18 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt; - would this abstraction work for your transaction implementation? If not, what are the deltas? I think it&apos;s important to have a snapshot isolation txn implementation represented here too.&lt;/p&gt;</comment>
                            <comment id="14086006" author="john-deroo" created="Tue, 5 Aug 2014 08:42:07 +0000"  >&lt;p&gt;I like the idea of providing the option to allow non-transactional behavior for the TransactionTable.  I&apos;ll add it to the 0.6 version.&lt;/p&gt;</comment>
                            <comment id="14086015" author="john-deroo" created="Tue, 5 Aug 2014 08:49:39 +0000"  >&lt;p&gt;I agree, thanks James.  The proposal must work for Continuuity and not be too difficult to implement.  Gary, I&apos;m attending a meeting with Continuuity tomorrow.  Not sure whether you&apos;re involved.  Probably not the right forum to discuss the details, could we set up a time to discuss the differences as James suggests?  I will fit around your schedule, but would prefer your afternoons (NZ is 19 hours ahead).&lt;/p&gt;</comment>
                            <comment id="14086017" author="john-deroo" created="Tue, 5 Aug 2014 08:50:50 +0000"  >&lt;p&gt;Forgot to mention that I&apos;ll add in a snapshot isolation option.&lt;/p&gt;</comment>
                            <comment id="14086540" author="ghelmling" created="Tue, 5 Aug 2014 17:52:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jamestaylor&quot; class=&quot;user-hover&quot; rel=&quot;jamestaylor&quot;&gt;James Taylor&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=john-deroo&quot; class=&quot;user-hover&quot; rel=&quot;john-deroo&quot;&gt;John de Roo&lt;/a&gt; Sorry, I was away for the week with no connectivity when James commented.  I&apos;m putting together some comments based on the current proposal and the approach that we&apos;ve taken with Tephra (&lt;a href=&quot;https://github.com/continuuity/tephra&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/continuuity/tephra&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="14087056" author="ghelmling" created="Wed, 6 Aug 2014 01:03:52 +0000"  >&lt;p&gt;Reading through the latest proposal (v0.5) I had a couple high level questions about what our goals for this are:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;What are we aiming for with this: zero code change when switching between implementations or minimal code change (implementation specific classes are still referenced / instantiated)?  I think this is important in guiding how user code selects the transaction implementation that it wants to work with and how we expose any implementation-specific features.&lt;/li&gt;
	&lt;li&gt;How do you obtain an instance of: TransactionService, Transaction, TransactionTable?  The proposal needs to provide clarity on this.  The examples section currently just shows instantiating the abstract classes directly, which won&apos;t work as-is.  Are clients expected to instantiate the implementation specific classes directly or do we plan to provide some factories to abstract the specific class away?&lt;/li&gt;
	&lt;li&gt;I think all of the core constructs should opt more for interfaces than abstract classes.  I&apos;m not really seeing any commonality of implementations other than the contract that we&apos;re trying to enforce.&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;Some more specific comments on individual areas of the proposal:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;TransactionStatus&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;We make use of an additional INVALID status as well.  How do we make these status extensible for different implementations?  PREPARED and PREPARING don&apos;t apply to us also, since we don&apos;t use 2pc.&lt;/p&gt;


&lt;p&gt;&lt;b&gt;TransactionIsolationLevel&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I know that you are planning to add snapshot isolation as well, but I&apos;m actually wondering if this is needed yet?  Would this currently be used or are we future-proofing?  How many of the current transaction implementations actually support selectable isolation levels at the moment?&lt;/p&gt;


&lt;p&gt;&lt;b&gt;TransactionService&lt;/b&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;I mentioned this above in general questions, but is the intent that a subclass of this would be instantiated directly by the client?  This also seems more like it should be an interface to me as I don&apos;t think there&apos;s likely to be much commonality between implementations.&lt;/li&gt;
	&lt;li&gt;The ability to change the default settings at any time (setIsolationLevel, setTransactionType, setTransactionTimeout) seems messy if an instance is used in a multi-threaded context.  Maybe these belong in a Builder interface instead, so the defaults are then fixed for a given instance.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;b&gt;Transaction&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Is the transaction &quot;started&quot; when it&apos;s constructed?  For some implementations, &quot;starting&quot; might not even be a requirement, but for Tephra it&apos;s part of the transaction lifecycle.  This involves doing RPC to start a transaction, which I don&apos;t believe we should be doing in a constructor.  From my perspective at least, it might make more sense if, instead of being constructed directly, the &lt;tt&gt;Transaction&lt;/tt&gt; was obtained via a factory method on &lt;tt&gt;TransactionService&lt;/tt&gt; (say &lt;tt&gt;start()&lt;/tt&gt;).&lt;/p&gt;


&lt;p&gt;&lt;b&gt;TransactionTable&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The current recommended client API for obtaining &lt;tt&gt;HTableInterface&lt;/tt&gt; instances is, I believe, to use one of the &lt;tt&gt;HConnection.getTable()&lt;/tt&gt; variants.  How can we make this work with that approach?  For Tephra, we punted on this by providing a &lt;tt&gt;TransactionAwareHTable&lt;/tt&gt; that you construct with an underlying &lt;tt&gt;HTable&lt;/tt&gt; instance to use, but I recognize that other implementors might have different needs.&lt;/p&gt;


&lt;p&gt;&lt;b&gt;3.7 Configuration&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;hbase.transaction.transactionservice&lt;/tt&gt; is configurable but it is not clear how this is used in instantiation.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;5. Examples&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;It would be useful to illustrate some of the code for error handling here.&lt;/p&gt;


&lt;p&gt;Tephra makes use of similar abstractions for the client API, with one addition:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;tt&gt;TransactionServiceClient&lt;/tt&gt;, which handles interactions with the transaction manager, though for normal usage the client does not invoke it directly&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;TransactionContext&lt;/tt&gt;, which coordinates the transaction lifecycle operations with the transaction manager and the transaction participants.  This is the main class used by clients.&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;TransactionAware&lt;/tt&gt;, an interface that provides the contract for transaction participants.  The main implementation that would be used by HBase clients is &lt;tt&gt;TransactionAwareHTable&lt;/tt&gt;.  This allows some extensibility to plugin other systems as well.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;To better clarify the usage, I&apos;ll update the first example from section 5.1.1 with how it might use the current Tephra classes:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Configuration config = HBaseConfiguration.create();
HConnection conn = HConnectionManager.createConnection(config);

TransactionServiceClient client = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TransactionServiceClient(config, ...);
TransactionAwareHTable txTable = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TransactionAwareHTable(
    conn.getTable(TableName.valueOf(&lt;span class=&quot;code-quote&quot;&gt;&quot;table1&quot;&lt;/span&gt;)));

TransactionContext txContext = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TransactionContext(client, txTable);
&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
    &lt;span class=&quot;code-comment&quot;&gt;// begin &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; transaction
&lt;/span&gt;    txContext.start();

    Put p1 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;row1&quot;&lt;/span&gt;));
    p1.add(Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;cf&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;q&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;value1&quot;&lt;/span&gt;));
    txTable.put(p1);
 
    Put p2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;row2&quot;&lt;/span&gt;));
    p2.add(Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;cf&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;q&quot;&lt;/span&gt;), Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;value2&quot;&lt;/span&gt;));
    txTable.put(p2);

    txContext.finish();
} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (TransactionFailureException e) {
    txContext.abort();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;&lt;tt&gt;TransactionServiceClient&lt;/tt&gt; maps to &lt;tt&gt;TransactionService&lt;/tt&gt; in the proposal, though most operations would be implementation specific.  &lt;tt&gt;TransactionContext&lt;/tt&gt; is not too far off from what you have as &lt;tt&gt;Transaction&lt;/tt&gt; in the proposal, with the addition of a &lt;tt&gt;start()&lt;/tt&gt; method and the ability to use it multiple times.  And &lt;tt&gt;TransactionAware&lt;/tt&gt;, while not typically used directly by clients, allows the coordination of transaction manager and HBase operations to be abstracted away from the client code.&lt;/p&gt;

&lt;p&gt;So I don&apos;t think there is much of a gap for us in the core abstractions, but as you can see in the example there is a lot of implementation specific construction going on.  Is the idea to abstract this away as well?&lt;/p&gt;</comment>
                            <comment id="14189475" author="stack" created="Thu, 30 Oct 2014 01:51:39 +0000"  >&lt;p&gt;No progress. Moving out.&lt;/p&gt;</comment>
                            <comment id="14207987" author="cuijianwei" created="Wed, 12 Nov 2014 12:37:58 +0000"  >&lt;p&gt;I tried to make Themis(&lt;a href=&quot;https://github.com/XiaoMi/themis/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/XiaoMi/themis/&lt;/a&gt;) implement v5.0, the core abstraction is feasible for Themis implementation generally. There are some changes Themis needs to do, including add a TransactonService implement class to handle global HConnection and ThreadPool, etc. I thinks there are some issues need to be discussed as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt; mentioned, including is it possible to add a close() method into TransactonService to release global resource at the end? Will we continue to improve the proposal?  &lt;/p&gt;</comment>
                            <comment id="14208382" author="apurtell" created="Wed, 12 Nov 2014 18:17:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;Will we continue to improve the proposal?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think it&apos;s up to Themis &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt;, and Tephra, and Trafodion... any project that thinks it could benefit from this API, and whomever shows up with a patch. &lt;/p&gt;</comment>
                            <comment id="14209104" author="cuijianwei" created="Thu, 13 Nov 2014 02:12:55 +0000"  >&lt;p&gt;Thanks for your concern &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;. I thinks the API is valuable for transaction implementations. This will help Themis to improve its interface and make users apply hbase transaction in a standard way. Although there are some details need be discussed and polished, I think we can create a patch based on the proposal and above comments if the core abstraction is feasible, and this will help to make the details more clear and easy to discuss. The core abstraction is feasible for Themis, I can create a draft patch based on v5.0 and above comments if this will help, and then we can have more discussion and continue to polish the API. How do you think about this? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12654284" name="Proposal for a common transactional API for HBase v0.3_1.pdf" size="499020" author="john-deroo" created="Mon, 7 Jul 2014 08:25:32 +0000"/>
                            <attachment id="12654925" name="Proposal for a common transactional API for HBase v0.4_1.pdf" size="570006" author="john-deroo" created="Thu, 10 Jul 2014 03:24:21 +0000"/>
                            <attachment id="12655979" name="Proposal for a common transactional API for HBase v0.5.pdf" size="562613" author="john-deroo" created="Wed, 16 Jul 2014 04:09:20 +0000"/>
                            <attachment id="12653791" name="Re Proposal for a generic transaction API for HBase.htm" size="132884" author="john-deroo" created="Thu, 3 Jul 2014 09:17:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 1 Jul 2014 03:08:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>402811</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 5 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1xbxb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>402872</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>