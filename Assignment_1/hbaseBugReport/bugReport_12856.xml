<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:37:07 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-12856/HBASE-12856.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-12856] Revisit table coprocessor classloader caching</title>
                <link>https://issues.apache.org/jira/browse/HBASE-12856</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;For table coprocessors, we create coprocessor classloaders and cache them keyed on the path to the coprocessor jar. However, we cache weak refs so it&apos;s quite possible if the refs are not being retained due to heap pressure we might create a new classloader on the next region open, i.e. after a split or relocation. If under very heavy write load, perhaps ingest with all edits skipping the WAL for example, we&apos;d be both generating a ton of garbage and rapidly splitting at the same time. &lt;/p&gt;

&lt;p&gt;We should revisit the notion of keeping only weak refs.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12767516">HBASE-12856</key>
            <summary>Revisit table coprocessor classloader caching</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="apurtell">Andrew Purtell</reporter>
                        <labels>
                    </labels>
                <created>Wed, 14 Jan 2015 18:42:05 +0000</created>
                <updated>Thu, 15 Jan 2015 01:59:55 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="14277423" author="apurtell" created="Wed, 14 Jan 2015 18:45:08 +0000"  >&lt;p&gt;Setting fix versions to put it on the radar. &lt;/p&gt;

&lt;p&gt;I suppose a change we could make is to store normal references instead. We would retain one classloader instance for each path to a table coprocessor implementation jar. That doesn&apos;t seem unreasonable and can prevent the scenario described above.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;</comment>
                            <comment id="14277434" author="apurtell" created="Wed, 14 Jan 2015 18:52:52 +0000"  >&lt;p&gt;On further thought using weak refs actually seems incorrect. We create a classloader per implementation jar so a coprocessor implementation can have singletons across all regions in a regionserver. (This was before we had RegionServerObserver, but is still a valid impl technique.) So having separate and distinct classloaders for the same table coprocessor implementation would confound expectations and produce incorrect runtime behavior. &lt;/p&gt;

&lt;p&gt;So unless objection I am going to change the table coprocessor classloader cache to use normal references.&lt;/p&gt;</comment>
                            <comment id="14277454" author="lhofhansl" created="Wed, 14 Jan 2015 19:02:46 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Weak refs are wrong anyway, they are only useful to access something that is strongly referenced from somewhere else and never prevent an object from being claimed by themselves. If that&apos;s the only reference we&apos;re essentially not caching. In a micro test it might work as we might not run into any GC.&lt;/p&gt;

&lt;p&gt;At the very least we should use soft refs. Even there soft refs for caching are generally not a good idea (there are some exceptions). They get cleaned up under heap pressure and when the data is accessed again they need to be re-cached and add more heap pressure.&lt;/p&gt;

&lt;p&gt;If we do not want to rock the boat now let&apos;s change them to soft refs, at least then we have some caching. Otherwise let&apos;s use strong refs.&lt;/p&gt;</comment>
                            <comment id="14277467" author="lhofhansl" created="Wed, 14 Jan 2015 19:06:25 +0000"  >&lt;p&gt;+1 to strong refs.&lt;/p&gt;</comment>
                            <comment id="14277683" author="lhofhansl" created="Wed, 14 Jan 2015 21:07:46 +0000"  >&lt;p&gt;Thinking about this more... Are we using this map as a cache or as alternate route to the classloader object (like an index)? In the latter case weak references are what we want.&lt;br/&gt;
The classloader itself should still be strongly referenced by the objects loaded through it.&lt;/p&gt;

&lt;p&gt;So this is probably as it should be.&lt;/p&gt;</comment>
                            <comment id="14277713" author="apurtell" created="Wed, 14 Jan 2015 21:24:22 +0000"  >&lt;p&gt;Lars and I discussed this issue some more. Having a weak reference to the classloader in the map is fine, the values will point to CoprocessorClassLoader instances that should never be GCed because we don&apos;t unload coprocessor classes. The CoprocessorClassLoader instances will be strongly referenced by every java.lang.Class they instantiated, indefinitely.&lt;/p&gt;

&lt;p&gt;Even then, we really don&apos;t want the &quot;classLoadersCache&quot; map in CoprocessorClassLoader to be a cache, we want it to be an index. If/when we implement coprocessor class unloading we wouldn&apos;t want a strong reference in this map retaining the classloader. The comments around this field and even its name could be reconsidered, &apos;cache&apos; -&amp;gt; &apos;index&apos;.&lt;/p&gt;

&lt;p&gt;It seems fine to leave this as is. However I will leave this issue open for a bit in case we are mistaken in some way or there is additional comment or suggestion.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12617239">HBASE-7205</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 14 Jan 2015 19:02:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 48 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i24dhz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>