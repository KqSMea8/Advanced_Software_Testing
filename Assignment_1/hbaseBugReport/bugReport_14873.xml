<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:57:17 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14873/HBASE-14873.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14873] Problems around BoundedByteBufferPool providing direct buffers</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14873</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13819&quot; title=&quot;Make RPC layer CellBlock buffer a DirectByteBuffer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13819&quot;&gt;&lt;del&gt;HBASE-13819&lt;/del&gt;&lt;/a&gt; made BoundedByteBufferPool provide direct buffers.&lt;/p&gt;

&lt;p&gt;See RpcServer.java:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
...
class Call &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; RpcCallContext {
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; void setResponse(...) {
...
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.cellBlock = ipcUtil.buildCellBlock(..., reservoir);
...
    bc = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BufferChain(..., &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.cellBlock);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (connection.useWrap) {
      bc = wrapWithSasl(bc);
    }
...
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; BufferChain wrapWithSasl(BufferChain bc) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
...
    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] responseBytes = bc.getBytes();
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;tt&gt;cellBlock&lt;/tt&gt; is expected to be a direct buffer retrieved from &lt;tt&gt;reservoir&lt;/tt&gt; (but not always), and &lt;tt&gt;bc&lt;/tt&gt; may be composed of both direct and non-direct buffers.&lt;/p&gt;

&lt;p&gt;And then, see BufferChain.java:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] getBytes() {
...
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (ByteBuffer bb: &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.buffers) {
      &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy(bb.array(), ...);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A direct buffer doesn&apos;t give its array, and will throw UnsupportedOperationException.&lt;/p&gt;

&lt;p&gt;Another problem; &lt;tt&gt;cellBlock&lt;/tt&gt; is allowed to be a non-direct buffer, and after use it will be put to &lt;tt&gt;reservoir&lt;/tt&gt;, mixing direct and non-direct buffers in the pool.&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12915717">HBASE-14873</key>
            <summary>Problems around BoundedByteBufferPool providing direct buffers</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="ikeda">Hiroshi Ikeda</assignee>
                                    <reporter username="ikeda">Hiroshi Ikeda</reporter>
                        <labels>
                    </labels>
                <created>Tue, 24 Nov 2015 08:44:52 +0000</created>
                <updated>Fri, 4 Dec 2015 18:24:33 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="15024794" author="stack" created="Tue, 24 Nov 2015 16:35:14 +0000"  >&lt;p&gt;Nice digging &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;. A test to prove the breakage seems simple enough to do?&lt;/p&gt;</comment>
                            <comment id="15026268" author="ram_krish" created="Wed, 25 Nov 2015 06:09:52 +0000"  >&lt;p&gt;Ya. I can see this happen.  Are you going to work on this &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="15028865" author="ikeda" created="Thu, 26 Nov 2015 14:23:58 +0000"  >&lt;p&gt;Just creating a proper test for the bugs is not easy. The root of the problems is handling raw ByteByffer instances which should be returned to the pool, and we should create a more abstract class and make the codebase use it.&lt;/p&gt;

&lt;p&gt;I was not sure whether such class can be created, but after some trials and errors I think I did it...But that is not so trivial change.&lt;/p&gt;

&lt;p&gt;Added a patch.&lt;/p&gt;

&lt;p&gt;I created a new class GatheringBuffer, which automatically retrieves buffers from the pool if needed, and cooperates with GatheringByteChannel. I added more restriction to the size of data given IPCUtil.buildCellBlock because strictly handling overflows in RpcServer is quite stupid and annoying. For now the threshold size is Integer.MAX_VALUE / 16, and I hope it is enough small for data conversions.&lt;/p&gt;</comment>
                            <comment id="15028913" author="ikeda" created="Thu, 26 Nov 2015 14:43:20 +0000"  >&lt;p&gt;Sorry for my hesitation.&#12288;Do you have another solution? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15031246" author="ikeda" created="Mon, 30 Nov 2015 02:10:46 +0000"  >&lt;p&gt;This patch can be only applied to the master (2.0), because 1.3 can use non-direct buffer pool (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13819&quot; title=&quot;Make RPC layer CellBlock buffer a DirectByteBuffer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13819&quot;&gt;&lt;del&gt;HBASE-13819&lt;/del&gt;&lt;/a&gt;) and this patch is based on direct buffers. Direct buffers and non-direct buffers uses different resources and they should be managed in different ways.&lt;/p&gt;</comment>
                            <comment id="15031247" author="ikeda" created="Mon, 30 Nov 2015 02:12:02 +0000"  >&lt;p&gt;Re-attached for QA run.&lt;/p&gt;</comment>
                            <comment id="15031330" author="stack" created="Mon, 30 Nov 2015 05:32:25 +0000"  >&lt;p&gt;Should we have 1.3 just do direct buffers? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="15031393" author="hadoopqa" created="Mon, 30 Nov 2015 06:41:52 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12774763/HBASE-14873.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12774763/HBASE-14873.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 71d41e0c9c286b4bed9cc6d5560a14268f9b1de9.&lt;br/&gt;
  ATTACHMENT ID: 12774763&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 2 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 2 warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated new checkstyle errors. Check build console for list of new errors.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16692//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16692//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16692//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16692//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16692//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16692//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16692//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16692//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16692//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16692//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="15031407" author="stack" created="Mon, 30 Nov 2015 06:58:11 +0000"  >&lt;p&gt;Looks like this family of tests had trouble on this run and the hung test was TestMobSecureExportSnapshot. Retrying&lt;/p&gt;


&lt;p&gt;Hanging test : org.apache.hadoop.hbase.snapshot.TestMobSecureExportSnapshot&lt;br/&gt;
Printing Failing tests&lt;br/&gt;
Failing test : org.apache.hadoop.hbase.snapshot.TestMobExportSnapshot&lt;br/&gt;
Failing test : org.apache.hadoop.hbase.snapshot.TestSecureExportSnapshot&lt;br/&gt;
Failing test : org.apache.hadoop.hbase.snapshot.TestExportSnapshot&lt;/p&gt;</comment>
                            <comment id="15031423" author="ikeda" created="Mon, 30 Nov 2015 07:18:49 +0000"  >&lt;p&gt;The purpose of BoudnedByteBufferPool becomes vague. Is it better to prepare an independent pool for socket channels?&lt;/p&gt;</comment>
                            <comment id="15031613" author="hadoopqa" created="Mon, 30 Nov 2015 10:19:35 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12774780/HBASE-14873.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12774780/HBASE-14873.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 71d41e0c9c286b4bed9cc6d5560a14268f9b1de9.&lt;br/&gt;
  ATTACHMENT ID: 12774780&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 2 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 2 warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated new checkstyle errors. Check build console for list of new errors.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16697//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16697//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16697//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16697//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16697//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16697//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16697//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16697//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16697//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16697//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="15031639" author="anoop.hbase" created="Mon, 30 Nov 2015 10:44:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is it better to prepare an independent pool for socket channels?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We use BBBPool for other cases also? Sorry I might have missed those jiras.  But it was not before&lt;/p&gt;</comment>
                            <comment id="15031641" author="anoop.hbase" created="Mon, 30 Nov 2015 10:46:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;Another problem; cellBlock is allowed to be a non-direct buffer, and after use it will be put to reservoir, mixing direct and non-direct buffers in the pool.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We will put back BBs obtained from pool. This might have grown to bigger size but then also we will recreate DBB when the original one (got from pool) was DBB&lt;/p&gt;</comment>
                            <comment id="15031651" author="anoop.hbase" created="Mon, 30 Nov 2015 10:54:37 +0000"  >&lt;p&gt;The issue with BufferChain#getBytes () can fixed with simple fix no?  Why this much changes? Am I missing some thing?&lt;/p&gt;

&lt;p&gt;We have ByteBufferUtils#copyFromBufferToArray(byte[] out, ByteBuffer in, int sourceOffset,&lt;br/&gt;
      int destinationOffset, int length)&lt;/p&gt;</comment>
                            <comment id="15031657" author="anoop.hbase" created="Mon, 30 Nov 2015 11:01:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should we have 1.3 just do direct buffers?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes already by default we will be making DBBs. It can be configured to behave like old way in 1.3&lt;/p&gt;</comment>
                            <comment id="15032275" author="stack" created="Mon, 30 Nov 2015 19:10:46 +0000"  >&lt;blockquote&gt;&lt;p&gt;The purpose of BoudnedByteBufferPool becomes vague. Is it better to prepare an independent pool for socket channels?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How is it vague &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;? We need pool of bytebuffers. Having the pool offheap seems to make for savings at no slowdown (other than initial allocation being slower) especially when we are doing copy from BB to socket so why not just have BBP be always DBB?&lt;/p&gt;</comment>
                            <comment id="15032880" author="ikeda" created="Tue, 1 Dec 2015 01:51:13 +0000"  >&lt;blockquote&gt;
&lt;p&gt;This might have grown to bigger size but then also we will recreate DBB when the original one (got from pool) was DBB&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ops, my bad. I jumped a wrong conclusion. Now,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The issue with BufferChain#getBytes () can fixed with simple fix no?  Why this much changes? Am I missing some thing?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree. My patch involves improvement to reuse all direct buffers, which is not appropriate to just fix the bug. I was too nervous of throwing them away, and I&apos;ll create a new patch.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;The purpose of BoudnedByteBufferPool becomes vague. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;How is it vague &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I mean, we should manage direct buffers and non-direct buffers in different ways, which requires us to write codes in different ways, and I don&apos;t find a place to use BoundedByteBufferPool with switching direct/non-direct buffers later.&lt;/p&gt;</comment>
                            <comment id="15033073" author="ikeda" created="Tue, 1 Dec 2015 04:47:48 +0000"  >&lt;p&gt;Added a new patch, focusing on BufferChain.getBytes.&lt;/p&gt;

&lt;p&gt;I used the standard library&apos;s API instead of ByteBufferUtils.copyFromBufferToArray, because the former seems to contain more subtle (or sophisticated) logic in the Oracle implementation.&lt;/p&gt;</comment>
                            <comment id="15033137" author="stack" created="Tue, 1 Dec 2015 05:35:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;I mean, we should manage direct buffers and non-direct buffers in different ways, which requires us to write codes in different ways....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;At least when we are doing Cells, it does right thing when a DBB vs OnheapBB but yes, there could be places where we presume onheap BB still for sure.... &lt;/p&gt;</comment>
                            <comment id="15033138" author="stack" created="Tue, 1 Dec 2015 05:36:18 +0000"  >&lt;p&gt;... so BBBP may not be generally applicable. That is what you are thinking?&lt;/p&gt;</comment>
                            <comment id="15033231" author="anoop.hbase" created="Tue, 1 Dec 2015 07:10:51 +0000"  >&lt;p&gt;Looks good..  Still IMO we can use BBUtils API.  When Unsafe is available it will be much faster copy. &lt;/p&gt;</comment>
                            <comment id="15033316" author="hadoopqa" created="Tue, 1 Dec 2015 08:15:36 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12774951/HBASE-14873-V2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12774951/HBASE-14873-V2.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 7979ac46cce36f21033f8ed03c8d0dd5fddde005.&lt;br/&gt;
  ATTACHMENT ID: 12774951&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 2 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;. The applied patch does not generate new checkstyle errors.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16708//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16708//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16708//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16708//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16708//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16708//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16708//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16708//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16708//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16708//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="15034156" author="stack" created="Tue, 1 Dec 2015 17:38:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; Yeah, that makes sense. There is stuff in BBUtil to do this copy already?&lt;/p&gt;</comment>
                            <comment id="15034291" author="anoop.hbase" created="Tue, 1 Dec 2015 18:29:49 +0000"  >&lt;p&gt;Yep we have.&lt;/p&gt;</comment>
                            <comment id="15035127" author="ikeda" created="Wed, 2 Dec 2015 02:11:41 +0000"  >&lt;p&gt;To tell the truth I didn&apos;t expect to be agreed with the V2 path. I don&apos;t grasp the choice even though there is a way to waste no direct buffer.&lt;/p&gt;

&lt;p&gt;BTW, once again, the Oracle implementation does a little more things than ByteBufferUtils.copyFromBufferToArray. DirectBuffer&apos;s override method calls Unsafe&apos;s copyMemory under the limit Bits.UNSAFE_COPY_THRESHOLD, which has been introduced for scaling well, according to google. How copyFromBufferToArray can omit the logic? Another thing I should mention is that copyFromBufferToArray is forced to use one-by-one copy for the other VM implementations, which is an almost bug.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;... so BBBP may not be generally applicable. That is what you are thinking?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;From the viewpoint of managing, direct buffers use off-heap and it is said that creating their objects is heavy, and strongly keeping them in a pool is well reasonable. I guess reallocating direct buffers also might cause fragmentation in off-heap area. On the other hand, creating an instance of non-direct buffer seems much cheaper than retrieving it from the pool, and reusing them is only for reducing GC frequency. Once GC is occurred we should drop them in the pool, or GC&apos;s copying them between young generation causes a complete meaningless overhead, in addition to imposing memory usage.&lt;/p&gt;

&lt;p&gt;From the viewpoint of usage, in practice it is sometimes inevitable to use an byte array because of some API, and the possibility of using a direct buffer imposes labor and time to implement and overhead. On the other hand, using a non-direct buffer for socket channels potentially causes problems. In other words there are situations where we should intentionally use the right buffer in the right place.&lt;/p&gt;</comment>
                            <comment id="15036612" author="stack" created="Wed, 2 Dec 2015 21:00:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;To tell the truth I didn&apos;t expect to be agreed with the V2 path. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why sir? What is wrong with the approach especially if use BBUtil where we go to Unsafe if applicable.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;BTW, once again, the Oracle implementation does a little more things than ByteBufferUtils.copyFromBufferToArray.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You have a point. What you reckon &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;. In other words there are situations where we should intentionally use the right buffer in the right place.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Makes sense. I think the places where BBBP have been deployed so far make sense. The latest instance, using them pulling request off the socket, is still TODO.&lt;/p&gt;

&lt;p&gt;This issue that you filed is a dirty bug we need to fix regardless, right?&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="15037156" author="ikeda" created="Thu, 3 Dec 2015 02:57:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;Why sir?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry for my poor expression, I just complained that I prefer no waste.&lt;/p&gt;

&lt;p&gt;As for Unsafe, this is very subtle. I just found ByteBufferUtils uses Unsafe.getInt etc. with no restriction, but the Oracle implementation uses these methods only if the class variable &lt;tt&gt;unaligned&lt;/tt&gt; (commented as &quot;Cached unaligned-access capability&quot;) is true, which seems to be calculated whether the architecture is i386, x86, amd64, or x86_64. ByteBufferUtils also uses Unsafe for on-heap buffers, but Unsafe uses native methods and it consequently prevents VM optimization, and it might eventually wastes for on-heap buffers in long run. In addition, Oracle seems to plan to remove Unsafe in Java 9.&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In other words there are situations where we should intentionally use the right buffer in the right place.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Makes sense. I think the places where BBBP have been deployed so far make sense.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I mean, it doesn&apos;t make sense that users can switch direct/non-direct buffers to pool (in the 1.3 branch) and developers hesitate to improve code to take advantage of direct/non-direct buffers.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This issue that you filed is a dirty bug we need to fix regardless, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, this is an absolutely serious bug that is always occurred when wrapping a cell block, and that must be fixed in any way, regardless of my complaining &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15037212" author="ram_krish" created="Thu, 3 Dec 2015 04:07:39 +0000"  >&lt;p&gt;Interesting and useful information here.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;DirectBuffer&apos;s override method calls Unsafe&apos;s copyMemory under the limit Bits.UNSAFE_COPY_THRESHOLD, which has been bq.introduced for scaling well, according to google. How copyFromBufferToArray can omit the logic? Another thing I should bq.mention is that copyFromBufferToArray is forced to use one-by-one copy for the other VM implementations, which is an almost bq.bug.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes true.  But our intention was to mainly avoid all those boundary checks that Oracle&apos;s impl has. Some of the earlier tests suggested that the NIO buffer APIs were not allowing the JVM to do proper inlining because of the boundary checks in every API it has.  the same is true with the onheap BBs also. The aim of these Byte and BytebufferUtils was to avoid these and directly go with Unsafe.&lt;br/&gt;
One thing to see is that if all the  are all onheap we just treat them as Arrays&lt;br/&gt;
But the problems you seem to say needs to handled in the BBUtils impl?  If so, that seems to be an important thing. But our code handles the endian thing - then may be that is not enough.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In addition, Oracle seems to plan to remove Unsafe in Java 9.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This as we know they may remove but I think they are planning to provide some other way of using them? There was a study internally conducted and it was found that many of the projects (apache projects included) make use of these DBBs and Unsafe Utils quite extensively. &lt;/p&gt;</comment>
                            <comment id="15037243" author="stack" created="Thu, 3 Dec 2015 04:41:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;Sorry for my poor expression, I just complained that I prefer no waste.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Please continue. You are helping us out.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...  but the Oracle implementation uses these methods only if the class variable unaligned (commented as &quot;Cached unaligned-access capability&quot;) is true, which seems to be calculated whether the architecture is i386, x86, amd64, or x86_64.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Endianness was raised a few times during the offheap work. Alignment may not have been considered by architecture (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;/&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;?). The argument that we&apos;d Unsafe to avoid boundary checks is good by me having seen the difference in perf numbers when the checks are avoided. You raise a good point about possible costs doing Unsafe against onheap allocations (This combination not be rare in practice?)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In addition, Oracle seems to plan to remove Unsafe in Java 9.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sort of. In here, &lt;a href=&quot;https://www.youtube.com/watch?v=4HG0YQVy8UM&amp;amp;list=PLX8CzqL3ArzUo2dtMurvpUTAaujPMeuuU&amp;amp;index=1&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://www.youtube.com/watch?v=4HG0YQVy8UM&amp;amp;list=PLX8CzqL3ArzUo2dtMurvpUTAaujPMeuuU&amp;amp;index=1&lt;/a&gt;, it won&apos;t be REMOVED... but rather, it will fade away gradually replaced with flags to being back old behaviors at least for a while. We&apos;ll see.&lt;/p&gt;

&lt;p&gt;Thanks for the in put Hiroshi. Helps.&lt;/p&gt;</comment>
                            <comment id="15037272" author="anoop.hbase" created="Thu, 3 Dec 2015 05:14:26 +0000"  >&lt;p&gt;Endianness is considered.  We always write data in big endian way irrespective of the system. Read time also we take care to reverse bytes in case needed.&lt;/p&gt;

&lt;p&gt;&apos;Alignment &apos;  - Yes let us check this more..  The unsafe way of reading from on heap buffers/ byte arrays is there from long time. And we added it for off heap also recently.  We need to check it once.  &lt;/p&gt;

&lt;p&gt;So my suggestion, let us commit this fix which is fixing a critical issue.  Then we check more on making the Unsafe way of copying really &apos;safe&apos;&lt;/p&gt;</comment>
                            <comment id="15037274" author="anoop.hbase" created="Thu, 3 Dec 2015 05:17:56 +0000"  >&lt;p&gt;In case of on heap buffer and byte arrays , for reading int/long etc we have made it to Unsafe way for perf reasons. I think this was added an year back or so.  We can avoid java way of reading byte one after the other and calc the int/long , which we were doing before. The Unsafe way seems to be much much fast.&lt;br/&gt;
&apos;Alignment &apos; - Will do more checking on this.  This might be an issue from 0.94 onwards if it turns out to be. &lt;/p&gt;</comment>
                            <comment id="15041304" author="ikeda" created="Fri, 4 Dec 2015 09:05:02 +0000"  >&lt;p&gt;In practice the most problematic thing seems unlimited Unsafe.copyMemory if we worry about stop-the-world. Unsafe is mysteriously dangerous and I doubt the performance improvement is practically effective at the cost of uncertain risk.&lt;/p&gt;</comment>
                            <comment id="15041908" author="stack" created="Fri, 4 Dec 2015 18:24:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;In practice the most problematic thing seems unlimited Unsafe.copyMemory if we worry about stop-the-world.&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;How copyFromBufferToArray can omit the logic?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oversight. Thanks for turning it up. Lets fix.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Another thing I should mention is that copyFromBufferToArray is forced to use one-by-one copy for the other VM implementations, which is an almost bug.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Another issue. Again, lets fix. There is logic in Bytes#LexicographicalComparerHolder that marches through the buffer long-wise, then by int,... and finally by byte.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Unsafe is mysteriously dangerous and I doubt the performance improvement is practically effective at the cost of uncertain risk.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah. Going this route is risky. The alternative though is all our eggs in the G1GC basket which is also a risk. This route of offheaping is looking promising (Anoop and Ram have a nice blog that will be up soon). We could end up in a new world of unexplained stop-the-worlds because of these offheap machinations and if they were unfixable, we&apos;d have to call this (expensive) experiment a faillure but so far the results look good.&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;. Keep the feedback coming.&lt;/p&gt;

&lt;p&gt;On this patch, do we want to make it use utils before we commit?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12774951" name="HBASE-14873-V2.patch" size="1709" author="ikeda" created="Tue, 1 Dec 2015 04:47:48 +0000"/>
                            <attachment id="12774780" name="HBASE-14873.patch" size="33170" author="stack" created="Mon, 30 Nov 2015 06:59:10 +0000"/>
                            <attachment id="12774763" name="HBASE-14873.patch" size="33170" author="ikeda" created="Mon, 30 Nov 2015 02:12:02 +0000"/>
                            <attachment id="12774530" name="HBASE-14873.patch" size="33170" author="ikeda" created="Thu, 26 Nov 2015 14:23:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 24 Nov 2015 16:35:14 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 2 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2ouqf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>