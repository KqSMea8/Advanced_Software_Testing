<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:11:57 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10247/HBASE-10247.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10247] Client promises about timestamps</title>
                <link>https://issues.apache.org/jira/browse/HBASE-10247</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;This is to start a discussion about timestamp promises declared per table of CF.&lt;br/&gt;
For example if a client promises only monotonically increasing timestamps (or no custom set timestamps) and VERSIONS=1, we can aggressively and easily remove old versions of the same row/fam/col from the memstore before we flush, just by supplying a comparator that ignores the timestamp (i.e. two KV just differing by TS would be considered equal).&lt;br/&gt;
That would increase the performance of counters significantly.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12686507">HBASE-10247</key>
            <summary>Client promises about timestamps</summary>
                <type id="13" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/genericissue.png">Brainstorming</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="lhofhansl">Lars Hofhansl</reporter>
                        <labels>
                    </labels>
                <created>Fri, 27 Dec 2013 07:29:22 +0000</created>
                <updated>Thu, 30 Apr 2015 17:31:11 +0000</updated>
                            <resolved>Thu, 30 Apr 2015 16:26:37 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>19</watches>
                                                                <comments>
                            <comment id="13857591" author="sershe" created="Fri, 27 Dec 2013 17:45:22 +0000"  >&lt;p&gt;I think there was already a JIRA about that but I cannot find it.&lt;br/&gt;
The discussion was also about introducing modes - e.g. &quot;client cannot supply timestamp&quot; (so we can put seqId in timestamp and it will be increasing as expected), or &quot;client must supply all timestamps&quot;&lt;/p&gt;</comment>
                            <comment id="13857602" author="jmhsieh" created="Fri, 27 Dec 2013 18:05:55 +0000"  >&lt;p&gt;I started looking into this &amp;#8211; the part I&apos;m less familiar with the implementation about is how to discern the distributed log replays and replication replays (which legitimately will write timestamps) from fresh writes. &lt;/p&gt;

&lt;p&gt;I&apos;d think the different replay writes would be tagged or marked so that we can make a simple distinction in one place.&lt;/p&gt;

&lt;p&gt;Ideally this would be a table scoped parameter, that can work with alter table, something like MOD_TS_OK or INTRINSIC_TS_ONLY&lt;/p&gt;</comment>
                            <comment id="13857684" author="lhofhansl" created="Fri, 27 Dec 2013 19:57:24 +0000"  >&lt;p&gt;Yep. Log replay is another issue where this will help. W.r.t. cheap upserts into the memstore, would still need to be careful when to update in place, because or the SLAB storage (that is why upsert is not using the SLAB, for example).&lt;/p&gt;

&lt;p&gt;Maybe we could first agree upon how a user indicates these promises. Would it be per CF? Or per table? Per table makes more sense (IMHO - why would a user want to supply timestamps for some columns for not for others in the same row?), but per CF would fit better with how we handling other config options.&lt;/p&gt;

&lt;p&gt;Something like CLIENT_TIMESTAMPS, SERVER_TIMESTAMPS? These are easy to verify. Might also want CLIENT_MONOTONIC_TIMESTAMPS (thinking of something like Phoenix here, which does its own TS management, or transaction libraries that use the TS to implement SI), which would be hard/expensive to validate, so we&apos;d have to trust the client.&lt;/p&gt;</comment>
                            <comment id="13857685" author="lhofhansl" created="Fri, 27 Dec 2013 19:59:31 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmhsieh&quot; class=&quot;user-hover&quot; rel=&quot;jmhsieh&quot;&gt;Jonathan Hsieh&lt;/a&gt;, missed your earlier comment. So tables scoped... I agree. MOD_TS_OK would continue to be the default I assume. Might want MOD_TS_ONLY, and MOD_TS_MONOTONIC (or something).&lt;/p&gt;</comment>
                            <comment id="13859209" author="jmhsieh" created="Tue, 31 Dec 2013 00:35:10 +0000"  >&lt;p&gt;My hope actually would be to have MOD_TS_OK=false by default on all newly created tables, but on by default for any previously existing tables. This way we don&apos;t surprise any existing users unless they create new tables.  Systems like phoenix would create with MOD_TS_OK=true.&lt;/p&gt;

&lt;p&gt;If it was on, I think we could legitimately turn on distributed log replay on by default.  It also would effectively eliminate a class of problems users can encounter if they get fancy without knowing what really is going one.&lt;/p&gt;</comment>
                            <comment id="13916298" author="lhofhansl" created="Fri, 28 Feb 2014 20:08:32 +0000"  >&lt;p&gt;This would also help with:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;scanning: If we scan files in creation order (starting with the memstore) we can stop when we&apos;ve seen a key (we know there cannot be a newer one in a later file)&lt;/li&gt;
	&lt;li&gt;compactions: we can remove delete markers if we compact a tail (again in time order) of the HFiles.&lt;/li&gt;
	&lt;li&gt;probably many more optimization that will pop up&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13916397" author="enis" created="Fri, 28 Feb 2014 21:13:07 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9905&quot; title=&quot;Enable using seqId as timestamp &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9905&quot;&gt;HBASE-9905&lt;/a&gt; contains some discussions related to this. The modes proposed there is similar because they were borrowed from Lars&apos;s ideas in the first place. &lt;/p&gt;</comment>
                            <comment id="13968837" author="vrodionov" created="Mon, 14 Apr 2014 21:03:54 +0000"  >&lt;p&gt;I think, there is an easy quick patch / work around which will allow to speed up reads by going only to MemStore or block cache only:&lt;/p&gt;

&lt;p&gt;hint on Get/ Append: something like READ_FASTEST;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Get get = Get(row)
get.setAttribute(OperationWithAttributes.READ_FASTEST);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Append append = ..
append.setAttribute(OperationWithAttributes.READ_FASTEST)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, Increment does not implements OperationWithAttributes. Why? &lt;/p&gt;
</comment>
                            <comment id="13968844" author="apurtell" created="Mon, 14 Apr 2014 21:09:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;Unfortunately, Increment does not implements OperationWithAttributes&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Maybe in 0.94? In more recent versions of HBase, Increment extends Mutation which extends OperationWithAttributes.&lt;/p&gt;</comment>
                            <comment id="13968865" author="vrodionov" created="Mon, 14 Apr 2014 21:27:44 +0000"  >&lt;p&gt;You are right. I checked 0.94 version.&lt;/p&gt;
</comment>
                            <comment id="13968875" author="lhofhansl" created="Mon, 14 Apr 2014 21:34:55 +0000"  >&lt;p&gt;Also note that Increment already does this (and hence does not work when Puts and Increments are mixed).&lt;/p&gt;

&lt;p&gt;It&apos;s also bigger than just the memstore. When HFile history corresponds to the history of its contents, we can start scanning HFiles in order of age (not even seeking later HFiles unless we didn&apos;t find what we are looking for in newer HFiles).&lt;/p&gt;</comment>
                            <comment id="13969034" author="vrodionov" created="Tue, 15 Apr 2014 00:01:56 +0000"  >&lt;blockquote&gt;
&lt;p&gt;It&apos;s also bigger than just the memstore. When HFile history corresponds to the history of its contents, we can start scanning HFiles in order of age (not even seeking later HFiles unless we didn&apos;t find what we are looking for in newer HFiles).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; is referring to custom compaction into serious of non-overlapping by date range sorted (of course) HFile&apos;s. We have &lt;a href=&quot;https://issues.apache.org/jira/browse/PHOENIX-914&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/PHOENIX-914&lt;/a&gt; for that already.  &lt;/p&gt;</comment>
                            <comment id="13969063" author="lhofhansl" created="Tue, 15 Apr 2014 00:31:30 +0000"  >&lt;p&gt;That is one use case. I meant an even more general scenario. Currently for &lt;b&gt;any&lt;/b&gt; scan we need to seek into all involved HFiles and the memstore to find the next element.&lt;br/&gt;
For many scans (for example when the set of columns is known ahead of time, and we&apos;re looking for latest N versions only) we can seek on-demand in order of the newest to latest, as soon as we found what we&apos;re looking for we can stop and avoid seeking into the older HFiles.&lt;/p&gt;</comment>
                            <comment id="13999603" author="lhofhansl" created="Fri, 16 May 2014 05:00:17 +0000"  >&lt;p&gt;I&apos;d like to pick this up again. At least we start to allow to mark tables this way before 1.0 even if we don&apos;t do any optimizations based on this.&lt;/p&gt;

&lt;p&gt;I think something like TS_POLICY =&amp;gt; &apos;&amp;lt;state&amp;gt;&apos; would be best.&lt;/p&gt;

&lt;p&gt;We need at least two (ideally three) states:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;CLIENT_OK, this would allow a client to set timestamps freely&lt;/li&gt;
	&lt;li&gt;SERVER_ONLY - RegionServer sets timestamps, attempts to set TS from a client would result in an Exception&lt;/li&gt;
	&lt;li&gt;CLIENT_MONOTONIC (maybe) - client can set timestamp, but promises to do so monotonically. For experts, we basically have to trust the client would do the right thing.&lt;br/&gt;
The reason for the last state is to allow clients to control TSs (for things like transactions, etc), but still allow HBase to do optimizations based on monotonically increasing TSs. Maybe we could do that one later.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We can add other states as we need them.&lt;/p&gt;

&lt;p&gt;Let&apos;s first implement the table option and enforce the restrictions. Then we can add optimizations based on these settings.&lt;/p&gt;

&lt;p&gt;Questions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;can you switch states? From SERVER_ONLY to CLIENT_OK, or CLIENT_MONOTONIC is OK. From CLIENT_MONOTONIC to CLIENT_OK is also OK. All other transitions would be disallowed (or somehow only take effect after the whole table was major_compacted). We could order the states by how restrictive they are and allow from less restrictive to more.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="14000062" author="enis" created="Fri, 16 May 2014 17:57:06 +0000"  >&lt;p&gt;Great. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I think something like TS_POLICY =&amp;gt; &apos;&amp;lt;state&amp;gt;&apos; would be best.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;We need at least two (ideally three) states&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;See my comments at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9905?focusedCommentId=13815414&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13815414&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-9905?focusedCommentId=13815414&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13815414&lt;/a&gt;&lt;br/&gt;
We should think about &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9905&quot; title=&quot;Enable using seqId as timestamp &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9905&quot;&gt;HBASE-9905&lt;/a&gt; and this together as a single configuration. It seems that we need these capabilities: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Know whether or not all timestamps are monotonically increasing (this will allow a lot of nice perf improvements and semantic guarantees. This can be either server side seqIds, or client side based ts oracle kind of setups. Both should be allowed and differentiated. Maybe this is a different table property.&lt;/li&gt;
	&lt;li&gt;Server side ts setting.&lt;/li&gt;
	&lt;li&gt;Mixed mode, or something like that to support existing tables. This should be deprecated.&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="14000067" author="enis" created="Fri, 16 May 2014 17:58:54 +0000"  >&lt;p&gt;Linking to 1.0 parent issue. It would be great to have this and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9905&quot; title=&quot;Enable using seqId as timestamp &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9905&quot;&gt;HBASE-9905&lt;/a&gt; and related &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8763&quot; title=&quot;Combine MVCC and SeqId&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8763&quot;&gt;&lt;del&gt;HBASE-8763&lt;/del&gt;&lt;/a&gt; to have a clear story. &lt;/p&gt;</comment>
                            <comment id="14000228" author="vrodionov" created="Fri, 16 May 2014 20:00:54 +0000"  >&lt;p&gt;CLIENT_MONOTONIC? Should be &lt;b&gt;globally unique monotonically increasing sequence id&lt;/b&gt;. Local client guarantee on monotonic is not enough, I think?&lt;/p&gt;</comment>
                            <comment id="14001637" author="apurtell" created="Mon, 19 May 2014 12:27:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;* can you switch states? From SERVER_ONLY to CLIENT_OK, or CLIENT_MONOTONIC is OK. From CLIENT_MONOTONIC to CLIENT_OK is also OK.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like the idea of adding a table attribute that switches on assumptions about semantic guarantees. I also like the idea of well defined states and helpful rejection of invalid transitions. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Mixed mode, or something like that to support existing tables. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What does mixed mode mean in terms of allowing the server side to make assumptions about timestamps? Intuitively the answer is none. So this would be captured by the absence of a table attribute?&lt;/p&gt;

&lt;p&gt;The notion of &apos;states&apos; here and &apos;modes&apos; at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9905?focusedCommentId=13815414&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13815414&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-9905?focusedCommentId=13815414&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13815414&lt;/a&gt; seem really close. &lt;/p&gt;</comment>
                            <comment id="14006699" author="enis" created="Fri, 23 May 2014 01:45:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;CLIENT_MONOTONIC? Should be globally unique monotonically increasing sequence id. Local client guarantee on monotonic is not enough, I think?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, it would mean globally monotonically increasing. Not useful otherwise. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What does mixed mode mean in terms of allowing the server side to make assumptions about timestamps? Intuitively the answer is none. So this would be captured by the absence of a table attribute?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah, mixed mode will the same as not declaring anything. Having a state in HTD is more explicit I think. &lt;/p&gt;</comment>
                            <comment id="14008283" author="lhofhansl" created="Sun, 25 May 2014 05:41:38 +0000"  >&lt;p&gt;Cool... So how do we make progress here? Should I make a patch?&lt;/p&gt;

&lt;p&gt;Looking at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9905&quot; title=&quot;Enable using seqId as timestamp &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9905&quot;&gt;HBASE-9905&lt;/a&gt;, good policies might be:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;seqid&lt;/li&gt;
	&lt;li&gt;server_ts&lt;/li&gt;
	&lt;li&gt;client_monotonic&lt;/li&gt;
	&lt;li&gt;mixed&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Might also be good to indicate when the TS field is used for something that is not wall clock time (so that we do not attempt to use TTL, etc).&lt;/p&gt;

&lt;p&gt;I could start with the config framework (that is simple anyway), and adding &quot;server_ts&quot;, &quot;mixed&quot;, and &quot;client_monotonic&quot;. &quot;server_ts&quot; would the default for new tables. We can then add seqid as that gets ready.&lt;/p&gt;</comment>
                            <comment id="14092247" author="lhofhansl" created="Sun, 10 Aug 2014 22:36:16 +0000"  >&lt;p&gt;I think we should get least at the user facing changes in 1.0. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt;. Then throughout the 1.0 cycle (or for later versions) we can work in implementing the actual optimizations.&lt;br/&gt;
A world without major compactions might be possible for table where clients no longer define timestamps (or where client always produce monotonically increasing timestamps).&lt;/p&gt;</comment>
                            <comment id="14092505" author="lhofhansl" created="Mon, 11 Aug 2014 06:35:38 +0000"  >&lt;p&gt;&lt;b&gt;Partial&lt;/b&gt; patch. Completely untested, and not even 1/3 finished. Just want to park it here. Will probably finish it tomorrow or the day after.&lt;/p&gt;

&lt;p&gt;So far has:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;the new table attribute&lt;/li&gt;
	&lt;li&gt;old tables are &quot;grandfathered in&quot; as MIXED&lt;/li&gt;
	&lt;li&gt;new tables default to SERVER_TS&lt;/li&gt;
	&lt;li&gt;can be set/viewed via shell&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Missing:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;nothing is enforced, yet.&lt;/li&gt;
	&lt;li&gt;transitions are not yet restricted&lt;/li&gt;
	&lt;li&gt;no tests, yet.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14093578" author="lhofhansl" created="Tue, 12 Aug 2014 00:51:35 +0000"  >&lt;p&gt;Here&apos;s an interesting question: What should happen with TS specific deletes when the client does not set the ts? If we allow to data deletes into the future, we&apos;ll have won nothing.&lt;br/&gt;
If we disallow client set timestamps for deletes, then we can no longer target a specific version for delete (for deleteColumn), nor target only some versions for delete (deleteColumns and deleteFamily). So if the server sets the TS or SeqId, we can no longer delete specific version, not can we delete only some columns in the past.&lt;/p&gt;

&lt;p&gt;I suppose we could allow timestamp that are strictly older than the next timestamp the server would hand out...?&lt;/p&gt;</comment>
                            <comment id="14093587" author="lhofhansl" created="Tue, 12 Aug 2014 00:58:01 +0000"  >&lt;p&gt;Updated patch, again just parking. Disallows Put/Delete according to TSPOLICY, adds tests for all policies.&lt;/p&gt;

&lt;p&gt;Next:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Appends, Increments&lt;/li&gt;
	&lt;li&gt;Restrict alters&lt;/li&gt;
	&lt;li&gt;Disallow TTL with no wall clock type TSPOLICY&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14094352" author="apurtell" created="Tue, 12 Aug 2014 17:30:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;I suppose we could allow timestamp that are strictly older than the next timestamp the server would hand out...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, for deleting or replacing specific versions, if using SERVER_TS treat the timestamp as a logical value (as is it&apos;s nature). Allow the client to specify on mutation ops specific version(s) that might refer to existing data.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Disallow TTL with no wall clock type TSPOLICY&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Just a note: With something like HLC (&lt;a href=&quot;http://www.cse.buffalo.edu/tech-reports/2014-04.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.cse.buffalo.edu/tech-reports/2014-04.pdf&lt;/a&gt;) timestamps would be in a regime that allows continued use of wall-clock-like TTLs. &lt;/p&gt;
</comment>
                            <comment id="14094389" author="lhofhansl" created="Tue, 12 Aug 2014 17:49:36 +0000"  >&lt;p&gt;Turns out there are a bunch of other problems with this:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;I envised CLIENT_MONOTONIC for use cases where we have an external transaction id oracle. The idea is that each transaction gets a write TS and writes all changes with that TS. That won&apos;t work with multiple transactions in parallel, we&apos;d be back to getting timestamps out of order and can no longer guarantee that the ordering of the HFiles by time implies the ordering of any version of KVs inside (say T2 writes something, then a flush happens, and then T1 writes something). So I think there is no point in having this policy (unless there is another use case where this is valid), as there is no advantage over MIXED.&lt;/li&gt;
	&lt;li&gt;More importantly. Server-side-only TSs &lt;b&gt;cannot&lt;/b&gt; work with replication! When region servers fail in a source cluster edit may reach the slave cluster out of order. Now we can (a) assign TSs again by a slave server and we&apos;d have different ordering of the KVs and hence different data, or we can (b) allow using the TSs from KVs and we&apos;re back to where we were, edits can be back and future dated.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I do not see a way out of the dilemma in #2.&lt;/p&gt;</comment>
                            <comment id="14094472" author="apurtell" created="Tue, 12 Aug 2014 18:41:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;More importantly. Server-side-only TSs cannot work with replication! When region servers fail in a source cluster edit may reach the slave cluster out of order. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;At some point we might have synchronous replication cross cluster. Discussed elsewhere on other JIRAs. (Or if not actively we should file one.) In the meantime we will have this class of problem in many areas if replication is active &lt;b&gt;and&lt;/b&gt; both clusters are hosting active applications. I don&apos;t think that invalidates the single cluster use case for server-side-only TSes. It also doesn&apos;t invalidate, or at least it doesn&apos;t change current semantics, of use cases where a passive remote cluster collects update for disaster recovery.&lt;/p&gt;</comment>
                            <comment id="14094614" author="lhofhansl" created="Tue, 12 Aug 2014 20:29:42 +0000"  >&lt;p&gt;Yep, the current semantics are sound.&lt;/p&gt;

&lt;p&gt;Actually the issue is not that both cluster need to be active... We&apos;ll have the issue above even with a single writer cluster only: Either we accept out of order timestamps at the slave (when we use the timestamps of the primary) or we accept out of order edits at the slave (when we use the slave to assign local server TSs). The former goes against what I want to achieve the latter leads to incorrect data.&lt;/p&gt;

&lt;p&gt;A way around this would be to strictly order &lt;b&gt;all&lt;/b&gt; edit as they are replicated, which is very difficult as replication is decentralized (which is especially an issue when RSs die and other take over their replication work).  Synchronous replication would by definition do that.&lt;/p&gt;</comment>
                            <comment id="14094632" author="apurtell" created="Tue, 12 Aug 2014 20:45:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;Either we accept out of order timestamps at the slave (when we use the timestamps of the primary)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, but this can be acceptable for DR use cases. Also, if backups are handled through some other means, such as snapshots+copy and replication is not active, having an option to restrict timestamps to server generated stamps can still be useful. Until we&apos;re bridging clusters with Raft etc.&lt;/p&gt;</comment>
                            <comment id="14095152" author="lhofhansl" created="Wed, 13 Aug 2014 04:59:47 +0000"  >&lt;p&gt;I agree that unless replication is used server TS can work.&lt;br/&gt;
I don&apos;t see a way to make it work for replication (to rephrase above: either we have to allow client set timestamps for the local inserts into the slave defeating the purpose of this, or accept incorrect data at the slave - neither seem appealing).&lt;br/&gt;
This can only be solved, really, when replication never sends edits out of order.&lt;/p&gt;

&lt;p&gt;Could block this if any CF has REPLICATION_SCOPE=1.&lt;/p&gt;

&lt;p&gt;Needless to say I am much less enthused about this idea now... if we cannot generally use it.&lt;br/&gt;
And CLIENT_MONOTONIC makes no sense under scrutiny.&lt;/p&gt;</comment>
                            <comment id="14521762" author="lhofhansl" created="Thu, 30 Apr 2015 16:26:37 +0000"  >&lt;p&gt;See discussion further down. It is not possible to achieve this while still supporting asynchronous replication if we cannot guarantee strict ordering.&lt;/p&gt;</comment>
                            <comment id="14521902" author="stack" created="Thu, 30 Apr 2015 17:30:23 +0000"  >&lt;p&gt;bq, .... if we cannot guarantee strict ordering.&lt;/p&gt;

&lt;p&gt;But if mvcc is on always?  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;  And replication respects it.&lt;/p&gt;</comment>
                            <comment id="14521904" author="stack" created="Thu, 30 Apr 2015 17:31:11 +0000"  >&lt;p&gt;Ah, nvm. Has no bearing... Ignore.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12677877">HBASE-9905</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12704125">HBASE-10856</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12661103" name="10247-do-not-try-may-eat-your-first-born-v2.txt" size="19291" author="lhofhansl" created="Tue, 12 Aug 2014 00:58:01 +0000"/>
                            <attachment id="12660935" name="10247.txt" size="11520" author="lhofhansl" created="Mon, 11 Aug 2014 06:35:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 27 Dec 2013 17:45:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>365498</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 33 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1qzyf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>365799</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>