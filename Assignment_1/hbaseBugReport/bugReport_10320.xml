<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:12:38 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10320/HBASE-10320.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10320] Avoid ArrayList.iterator() ExplicitColumnTracker</title>
                <link>https://issues.apache.org/jira/browse/HBASE-10320</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I noticed that in a profiler (sampler) run ScanQueryMatcher.setRow(...) showed up at all.&lt;br/&gt;
In turns out that the expensive part is iterating over the columns in ExcplicitColumnTracker.reset(). I did some microbenchmarks and found that&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; ArrayList&amp;lt;X&amp;gt; l;
...
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;l.size(); i++) {
   X = l.get(i);
   ...
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Is twice as fast as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; ArrayList&amp;lt;X&amp;gt; l;
...
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (X : l) {
   ...
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The indexed version asymptotically approaches the iterator version, but even at 1m entries it is still faster.&lt;br/&gt;
In my tight loop scans this provides for a 5% performance improvement overall when the ExcplicitColumnTracker is used.&lt;/p&gt;

&lt;p&gt;Edit:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; X[] l;
...
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;l.length; i++) {
   X = l[i];
   ...
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Is even better. Apparently the JVM can even save the boundary check in each iteration.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12688420">HBASE-10320</key>
            <summary>Avoid ArrayList.iterator() ExplicitColumnTracker</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lhofhansl">Lars Hofhansl</assignee>
                                    <reporter username="lhofhansl">Lars Hofhansl</reporter>
                        <labels>
                    </labels>
                <created>Sun, 12 Jan 2014 00:42:41 +0000</created>
                <updated>Wed, 26 Feb 2014 04:45:43 +0000</updated>
                            <resolved>Tue, 14 Jan 2014 06:55:03 +0000</resolved>
                                                    <fixVersion>0.98.0</fixVersion>
                    <fixVersion>0.96.2</fixVersion>
                    <fixVersion>0.99.0</fixVersion>
                    <fixVersion>0.94.17</fixVersion>
                                    <component>Performance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13868912" author="lhofhansl" created="Sun, 12 Jan 2014 00:46:00 +0000"  >&lt;p&gt;Simple patch for 0.94.&lt;br/&gt;
The&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; List&amp;lt;ColumnCount&amp;gt; columns;
+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ArrayList&amp;lt;ColumnCount&amp;gt; columns;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;is not needed, but it makes it explicit that we&apos;re addressing this list via random access.&lt;/p&gt;</comment>
                            <comment id="13868954" author="anoop.hbase" created="Sun, 12 Jan 2014 06:14:37 +0000"  >&lt;p&gt;Interesting finding Lars.  +1 on the patch if it gives improvement..  &lt;/p&gt;</comment>
                            <comment id="13869208" author="jmspaggi" created="Mon, 13 Jan 2014 00:51:20 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.columns.size(); i++) {
+    	&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.columns.get(i).setCount(0);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; size = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.columns.size();
+    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i=0; i&amp;lt;size; i++) {
+    	&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.columns.get(i).setCount(0);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Will that make any difference? I guess compiler will optimize it, but not sure.&lt;/p&gt;</comment>
                            <comment id="13869212" author="lhofhansl" created="Mon, 13 Jan 2014 01:00:20 +0000"  >&lt;p&gt;Not on JDK7. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
In fact it makes it slightly &lt;b&gt;slower&lt;/b&gt;&amp;#40;?) Seems bizarre, but in the microbenchmark is does. In all cases I made sure the reference in the ArrayList are actually used, so that the compiler cannot simply optimize them away.&lt;/p&gt;

&lt;p&gt;I had also tried a local stack reference rather than a member, that makes no difference.&lt;/p&gt;

&lt;p&gt;Didn&apos;t try on JDK6 (don&apos;t have it on any of my machines at home anymore).&lt;/p&gt;</comment>
                            <comment id="13869230" author="lhofhansl" created="Mon, 13 Jan 2014 01:40:44 +0000"  >&lt;p&gt;Looks like the JDK is getting smart with multiple threads. In the case where l.size() is part of the loop condition I see more cores doing work.&lt;/p&gt;

&lt;p&gt;I need to do some more tests.&lt;/p&gt;</comment>
                            <comment id="13869232" author="lhofhansl" created="Mon, 13 Jan 2014 01:47:58 +0000"  >&lt;p&gt;At least this explains the strange behavior that precalculating the size is slightly slower. It was actually doing almost twice the amount of work, just on two cores.&lt;br/&gt;
I verified that now only one core is used. New patch coming up.&lt;/p&gt;</comment>
                            <comment id="13869247" author="lhofhansl" created="Mon, 13 Jan 2014 02:15:36 +0000"  >&lt;p&gt;New patch. Makes precalculates length. Insitu in HBase the improvement is even better. The scans appears to have better core locality.&lt;br/&gt;
(the microbenchmark confirm that, with the iterator() I see the thread bouncing between cores, doesn&apos;t do it with for(...) get(...) loop)&lt;/p&gt;</comment>
                            <comment id="13869253" author="jmspaggi" created="Mon, 13 Jan 2014 02:25:48 +0000"  >&lt;p&gt;Where should we see the improvement overall? Any way to test it with PE so I can compare with a previous version easily?&lt;/p&gt;</comment>
                            <comment id="13869259" author="lhofhansl" created="Mon, 13 Jan 2014 02:36:16 +0000"  >&lt;p&gt;Test with 1 scan and with 8 scans (this is a 4 core machine with 2 HTs each).&lt;br/&gt;
I see about 4-5% improvement in both cases now.&lt;/p&gt;

&lt;p&gt;Lemme do some more tests to make sure. The better core affinity from this patch is surprising.&lt;/p&gt;</comment>
                            <comment id="13869287" author="lhofhansl" created="Mon, 13 Jan 2014 05:05:12 +0000"  >&lt;p&gt;Spent way too much time on this. Did more tests directly with ExplicitColumnTracker. Going to commit v2. The main part is that it seems more cache line friendly.&lt;/p&gt;</comment>
                            <comment id="13869295" author="lhofhansl" created="Mon, 13 Jan 2014 05:21:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;Where should we see the improvement overall?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Scanning with ExplicitColumnTracker (i.e. a scan where some columns were added with addColumn) and where all/most data is filtered out at the server (by a filter or a coprocessor).&lt;br/&gt;
So in PE the FilteredScanTest might do it. If you run that, let me know what you find. Might be that in all but extreme cases this is just in the noise. I think PE has relatively large columns (1000 bytes), so it might not show.&lt;/p&gt;

&lt;p&gt;Will wait with commit until we&apos;ve had a PE test.&lt;/p&gt;</comment>
                            <comment id="13869306" author="stack" created="Mon, 13 Jan 2014 05:46:39 +0000"  >&lt;p&gt;I&apos;d go with what your benchmarks are telling you but came across this recently: &quot;The server compiler likes a loop with an int counter (int i = 0), a constant stride (i++), and loop-invariant limit (i &amp;lt;= n)&quot; and &quot;Loops over arrays work especially well when the compiler can relate the counter limit to the length of the array(s).&quot; from &lt;a href=&quot;https://wikis.oracle.com/display/HotSpotInternals/PerformanceTechniques&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://wikis.oracle.com/display/HotSpotInternals/PerformanceTechniques&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On commit, add comment on why you are doing the &apos;unusual&apos; pre-sizing before the loop else the next fellow through will think it an unnecessary extra line/task and put it back the way it as previous.&lt;/p&gt;

&lt;p&gt;Good one Lars.&lt;/p&gt;</comment>
                            <comment id="13869683" author="lhofhansl" created="Mon, 13 Jan 2014 16:54:16 +0000"  >&lt;p&gt;Thanks Stack. I wonder whether the same is true for ArrayLists.&lt;br/&gt;
That brings to another thought, the columns list is fixed size and never changed once created, so why have an ArrayList at all instead of an Array. Then we can use columns.length in the loop and get this optimization. Will try when I get some time next.&lt;/p&gt;</comment>
                            <comment id="13869768" author="apurtell" created="Mon, 13 Jan 2014 18:04:31 +0000"  >&lt;p&gt;Is this a 0.94 only change or applicable everywhere? (The latter, right?)&lt;/p&gt;</comment>
                            <comment id="13870050" author="lhofhansl" created="Mon, 13 Jan 2014 22:01:49 +0000"  >&lt;p&gt;v3 does everything array based. In microbenchmarks it&apos;s almost 50% faster than v2. Will quantify in situ in a bit.&lt;/p&gt;</comment>
                            <comment id="13870103" author="jmspaggi" created="Mon, 13 Jan 2014 23:12:26 +0000"  >&lt;p&gt;Nice! I love it!&lt;/p&gt;

&lt;p&gt;And to reply to Andrew: Yes, it&apos;s the same &quot;issue&quot; in 0.98.&lt;/p&gt;</comment>
                            <comment id="13870143" author="eclark" created="Mon, 13 Jan 2014 23:54:03 +0000"  >&lt;p&gt;Just ran some micro benchmarks using caliper and I got the following results: &lt;a href=&quot;https://microbenchmarks.appspot.com/runs/37ac8b21-da30-4694-a9fb-f58592b338f0&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://microbenchmarks.appspot.com/runs/37ac8b21-da30-4694-a9fb-f58592b338f0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Not quite as dramatic as &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; is seeing but still suggests that replacing for(x:y) with array based will be worth it.&lt;/p&gt;

&lt;p&gt;Code for benchmark: &lt;a href=&quot;https://github.com/elliottneilclark/iter-bench&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/elliottneilclark/iter-bench&lt;/a&gt;&lt;br/&gt;
JVM: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
eclark@eclark-MBPr ~/Code/&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt;/iter-bench (master)$ java -version
java version &lt;span class=&quot;code-quote&quot;&gt;&quot;1.7.0_25&quot;&lt;/span&gt;
Java(TM) SE &lt;span class=&quot;code-object&quot;&gt;Runtime&lt;/span&gt; Environment (build 1.7.0_25-b15)
Java HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13870178" author="lhofhansl" created="Tue, 14 Jan 2014 00:32:55 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt;! Looking the code you tested the equivalent of the first patch.&lt;br/&gt;
I found later (after JM pointed it out) that ArrayList.size() added more load across the cores did you see this too (and that precalculating the length was better after all)?&lt;/p&gt;

&lt;p&gt;Also any chance of trying the same with just arrays (i.e. what -v3 does)?&lt;/p&gt;</comment>
                            <comment id="13870265" author="eclark" created="Tue, 14 Jan 2014 01:28:47 +0000"  >&lt;p&gt;I pushed a new version of the benchmark code.  Here&apos;s the results:&lt;br/&gt;
&lt;a href=&quot;https://microbenchmarks.appspot.com/runs/55cd6335-b892-4d4f-83dc-97a4cd2a7e69&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://microbenchmarks.appspot.com/runs/55cd6335-b892-4d4f-83dc-97a4cd2a7e69&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13870268" author="lhofhansl" created="Tue, 14 Jan 2014 01:30:49 +0000"  >&lt;p&gt;Awesome. I&apos;ll make a v4 using foreach iteration on the array, that looks nicer and has the same performance it seems.&lt;/p&gt;</comment>
                            <comment id="13870346" author="ram_krish" created="Tue, 14 Jan 2014 03:07:51 +0000"  >&lt;p&gt;Nice one..+1.&lt;/p&gt;</comment>
                            <comment id="13870378" author="lhofhansl" created="Tue, 14 Jan 2014 04:32:46 +0000"  >&lt;p&gt;Final patch. This is the one I&apos;ll commit. I&apos;ll also make a trunk version.&lt;/p&gt;</comment>
                            <comment id="13870380" author="yuzhihong@gmail.com" created="Tue, 14 Jan 2014 04:38:29 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13870384" author="lhofhansl" created="Tue, 14 Jan 2014 04:45:22 +0000"  >&lt;p&gt;Unscientific benchmark: 50m rows, 8 byte key, one col (8 byte long value), everything in the cache, everything filtered at the server with a filter.&lt;br/&gt;
With patch: 14.2s&lt;br/&gt;
Without patch: 15.9s&lt;/p&gt;</comment>
                            <comment id="13870386" author="lhofhansl" created="Tue, 14 Jan 2014 04:55:56 +0000"  >&lt;p&gt;Same for tunk.&lt;/p&gt;

&lt;p&gt;Unless I hear objections I will commit this to all branches (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="13870399" author="eclark" created="Tue, 14 Jan 2014 05:16:40 +0000"  >&lt;p&gt;+1.  We have other places in the code base that we should do the same&lt;/p&gt;

&lt;p&gt;On trunk I found these that all are core enough to deserve at least a look:&lt;br/&gt;
RpcServer#doRunLoop Line 892&lt;br/&gt;
HRegion#internalFlushcache: Line 1601&lt;br/&gt;
HRegion#doMiniBatchMutation: 2203 (basically all the row lock stuff should be made into arrays.)&lt;br/&gt;
HRegionServer#addResult&lt;/p&gt;</comment>
                            <comment id="13870407" author="lhofhansl" created="Tue, 14 Jan 2014 05:31:00 +0000"  >&lt;p&gt;Thanks Elliott.&lt;br/&gt;
I dug around in the read path a bit, didn&apos;t see anything else on that side (that stuck out at least).&lt;/p&gt;

&lt;p&gt;On the other issues I think the improvement would be eclipsed by the work they&apos;re doing (like writing to HDFS or to the network to the client). We should fix those as well. Would prefer a separate issue, though.&lt;/p&gt;</comment>
                            <comment id="13870428" author="apurtell" created="Tue, 14 Jan 2014 06:12:05 +0000"  >&lt;p&gt;+ 1&lt;/p&gt;</comment>
                            <comment id="13870456" author="lhofhansl" created="Tue, 14 Jan 2014 06:55:03 +0000"  >&lt;p&gt;Committed to all branches. Thanks for the reviews, and especially to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; for the benchmarking.&lt;/p&gt;</comment>
                            <comment id="13870510" author="hudson" created="Tue, 14 Jan 2014 08:09:40 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.94-security #389 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security/389/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security/389/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10320&quot; title=&quot;Avoid ArrayList.iterator() ExplicitColumnTracker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10320&quot;&gt;&lt;del&gt;HBASE-10320&lt;/del&gt;&lt;/a&gt; Avoid ArrayList.iterator() ExplicitColumnTracker (larsh: rev 1557951)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13870546" author="hudson" created="Tue, 14 Jan 2014 09:06:04 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.94-JDK7 #29 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-JDK7/29/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-JDK7/29/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10320&quot; title=&quot;Avoid ArrayList.iterator() ExplicitColumnTracker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10320&quot;&gt;&lt;del&gt;HBASE-10320&lt;/del&gt;&lt;/a&gt; Avoid ArrayList.iterator() ExplicitColumnTracker (larsh: rev 1557951)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13870581" author="hudson" created="Tue, 14 Jan 2014 09:52:31 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.94 #1262 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/1262/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/1262/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10320&quot; title=&quot;Avoid ArrayList.iterator() ExplicitColumnTracker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10320&quot;&gt;&lt;del&gt;HBASE-10320&lt;/del&gt;&lt;/a&gt; Avoid ArrayList.iterator() ExplicitColumnTracker (larsh: rev 1557951)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13870592" author="hudson" created="Tue, 14 Jan 2014 10:04:39 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.96 #256 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.96/256/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.96/256/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10320&quot; title=&quot;Avoid ArrayList.iterator() ExplicitColumnTracker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10320&quot;&gt;&lt;del&gt;HBASE-10320&lt;/del&gt;&lt;/a&gt; Avoid ArrayList.iterator() ExplicitColumnTracker (larsh: rev 1557950)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13870617" author="hudson" created="Tue, 14 Jan 2014 10:49:52 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.98 #78 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98/78/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98/78/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10320&quot; title=&quot;Avoid ArrayList.iterator() ExplicitColumnTracker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10320&quot;&gt;&lt;del&gt;HBASE-10320&lt;/del&gt;&lt;/a&gt; Avoid ArrayList.iterator() ExplicitColumnTracker (larsh: rev 1557949)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13870654" author="hudson" created="Tue, 14 Jan 2014 11:54:09 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #4815 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/4815/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/4815/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10320&quot; title=&quot;Avoid ArrayList.iterator() ExplicitColumnTracker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10320&quot;&gt;&lt;del&gt;HBASE-10320&lt;/del&gt;&lt;/a&gt; Avoid ArrayList.iterator() ExplicitColumnTracker (larsh: rev 1557948)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13870659" author="hudson" created="Tue, 14 Jan 2014 11:58:12 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.98-on-Hadoop-1.1 #72 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/72/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/72/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10320&quot; title=&quot;Avoid ArrayList.iterator() ExplicitColumnTracker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10320&quot;&gt;&lt;del&gt;HBASE-10320&lt;/del&gt;&lt;/a&gt; Avoid ArrayList.iterator() ExplicitColumnTracker (larsh: rev 1557949)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13870678" author="hudson" created="Tue, 14 Jan 2014 12:38:11 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.96-hadoop2 #174 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.96-hadoop2/174/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.96-hadoop2/174/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10320&quot; title=&quot;Avoid ArrayList.iterator() ExplicitColumnTracker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10320&quot;&gt;&lt;del&gt;HBASE-10320&lt;/del&gt;&lt;/a&gt; Avoid ArrayList.iterator() ExplicitColumnTracker (larsh: rev 1557950)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13871457" author="hudson" created="Wed, 15 Jan 2014 01:02:59 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK-on-Hadoop-1.1 #53 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-1.1/53/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-1.1/53/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10320&quot; title=&quot;Avoid ArrayList.iterator() ExplicitColumnTracker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10320&quot;&gt;&lt;del&gt;HBASE-10320&lt;/del&gt;&lt;/a&gt; Avoid ArrayList.iterator() ExplicitColumnTracker (larsh: rev 1557948)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ExplicitColumnTracker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12622569" name="10320-0.94-v2.txt" size="1123" author="lhofhansl" created="Mon, 13 Jan 2014 02:15:36 +0000"/>
                            <attachment id="12622715" name="10320-0.94-v3.txt" size="2824" author="lhofhansl" created="Mon, 13 Jan 2014 22:01:49 +0000"/>
                            <attachment id="12622788" name="10320-0.94-v4.txt" size="2733" author="lhofhansl" created="Tue, 14 Jan 2014 04:32:46 +0000"/>
                            <attachment id="12622524" name="10320-0.94.txt" size="1073" author="lhofhansl" created="Sun, 12 Jan 2014 00:46:00 +0000"/>
                            <attachment id="12622789" name="10320-trunk-v4.txt" size="2812" author="lhofhansl" created="Tue, 14 Jan 2014 04:55:56 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 12 Jan 2014 06:14:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>367439</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 48 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1rc2v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>367748</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>