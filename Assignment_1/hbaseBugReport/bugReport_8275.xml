<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:53:40 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-8275/HBASE-8275.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-8275] Tool to test binary compatibility</title>
                <link>https://issues.apache.org/jira/browse/HBASE-8275</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Stack and I were discussing of ways to make binary compatibility easier to test than doing it completely by hand.&lt;/p&gt;

&lt;p&gt;One idea would be to have a tool that uses reflection to generate code that calls all the public methods from a list of classes. You would then compile this code against the current version you are on, then try it out with different HBase jars without recompiling.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12640894">HBASE-8275</key>
            <summary>Tool to test binary compatibility</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="3">Duplicate</resolution>
                                        <assignee username="dimaspivak">Dima Spivak</assignee>
                                    <reporter username="jdcryans">Jean-Daniel Cryans</reporter>
                        <labels>
                    </labels>
                <created>Thu, 4 Apr 2013 23:14:22 +0000</created>
                <updated>Thu, 28 Apr 2016 23:24:07 +0000</updated>
                            <resolved>Mon, 12 Jan 2015 00:13:27 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>14</watches>
                                                                <comments>
                            <comment id="13622968" author="lhofhansl" created="Thu, 4 Apr 2013 23:21:42 +0000"  >&lt;p&gt;Another option is to use reflection to find all public methods and dump a description into gold file that we check in together with the test.&lt;/p&gt;

&lt;p&gt;Running the test would involve regenerating that file and comparing it against the checked in version. That way this becomes a unit test that is constantly running and we would immediately identify any interface changes.&lt;/p&gt;</comment>
                            <comment id="13622975" author="jdcryans" created="Thu, 4 Apr 2013 23:27:01 +0000"  >&lt;p&gt;That sounds even better, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13622980" author="aleksshulman" created="Thu, 4 Apr 2013 23:31:47 +0000"  >&lt;p&gt;That&apos;s a great idea.&lt;/p&gt;</comment>
                            <comment id="13622981" author="giacomotaylor" created="Thu, 4 Apr 2013 23:32:08 +0000"  >&lt;p&gt;Another more pragmatic approach: pull the last stable release of Phoenix from Maven and run the unit tests. There are likely other client layers you could use to validate as well.&lt;/p&gt;</comment>
                            <comment id="13623132" author="jmspaggi" created="Fri, 5 Apr 2013 00:36:33 +0000"  >&lt;p&gt;I prefer Lars&apos; option. Not sure we should rely on an external application/client/framework to validate.&lt;/p&gt;

&lt;p&gt;What with the new added methods? Should we add than in the gold file too to make sure they are checked in the next release?&lt;/p&gt;

&lt;p&gt;At the end, we need to test that release n+1 is still provinding at least the same methods as release n.&lt;/p&gt;</comment>
                            <comment id="13623139" author="lhofhansl" created="Fri, 5 Apr 2013 00:59:38 +0000"  >&lt;p&gt;I suppose each time you add a new public method you have to add it to the gold file too. Same with newly added classes that we want to check this way.&lt;/p&gt;</comment>
                            <comment id="13623227" author="jmspaggi" created="Fri, 5 Apr 2013 01:11:20 +0000"  >&lt;p&gt;Hum. We might want to find a way to have that done automatically. Because if someone is missing one, we might miss one issue in a later release if it&apos;s removed. Maybe we can extract the list each time we are doing a release and submit it as a baseline for the next release compability tests?&lt;/p&gt;</comment>
                            <comment id="13623250" author="ndimiduk" created="Fri, 5 Apr 2013 01:55:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;I suppose each time you add a new public method you have to add it to the gold file too.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds identical to our strategy of keeping generated protobuf code checked-in. I dislike it equally, but at least it&apos;s consistent.&lt;/p&gt;</comment>
                            <comment id="13623303" author="lhofhansl" created="Fri, 5 Apr 2013 03:23:10 +0000"  >&lt;p&gt;I would envision the following.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Find all classes annotated with InterfaceAudience=Public.&lt;/li&gt;
	&lt;li&gt;In those classes find all public methods&lt;/li&gt;
	&lt;li&gt;Check those names against a gold file&lt;/li&gt;
	&lt;li&gt;If the new files does not match, overwrite the gold file (so that it can be easily checked in)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;So the file to be checked in is automatically generated and we won&apos;t forget to add new methods or classes (as long as the classes are annotated correctly)&lt;/p&gt;</comment>
                            <comment id="13834339" author="apurtell" created="Wed, 27 Nov 2013 23:29:12 +0000"  >&lt;p&gt;No patch, unscheduling from 0.98. Put back if you feel otherwise.&lt;/p&gt;</comment>
                            <comment id="14237502" author="dimaspivak" created="Mon, 8 Dec 2014 06:27:17 +0000"  >&lt;p&gt;I think we have a pretty decent solution to address this that we&apos;re using at Cloudera, and which I&apos;d love to push upstream. The workflow looks like this:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Store pre-created Docker images in a common registry containing the various releases of HBase servers we want to test against. This would just be an extension of the functionality we already have under /dev-support/hbase_docker. (Also, the gents at Apache Infra are working on the registry aspect at &lt;a href=&quot;https://issues.apache.org/jira/browse/INFRA-8441&quot; title=&quot;Create an internal Docker registry&quot; class=&quot;issue-link&quot; data-issue-key=&quot;INFRA-8441&quot;&gt;&lt;del&gt;INFRA-8441&lt;/del&gt;&lt;/a&gt;.)&lt;/li&gt;
	&lt;li&gt;Also store images of HBase clients (again, for each version we want to test). These images contain basic dependencies (e.g. Java, Maven) and some client code to exercise as much of the API as possible. At Cloudera, what I&apos;ve found has worked very well for this is TestFromClientSide, so I extend this into another class (TestJavaClient) and override the unit test-specific aspects of it in the derived class (e.g. prevent starting a minicluster, and skipping a few tests that touch HBase internals). &lt;tt&gt;mvn compile&lt;/tt&gt; is used to pre-compile the source code for the original version and then the whole deal is committed into a Docker image. The client image also has POM files for any other version of HBase for which we want to test binary compatibility.&lt;/li&gt;
	&lt;li&gt;With the images precreated, running a test of compatibility is done by standing up an HBase cluster (again, using the Docker images), and then using the HBase client image and a simple script to test either wire or binary compatibility. For wire compatibility, we use &lt;tt&gt;mvn verify&lt;/tt&gt;, which takes the already-compiled source code alongside the original version of JARs and points it at the HBase server. For binary compatibility, the script handles pointing Maven at the pom.xml referencing the JARs I care to validate against, and then a simple &lt;tt&gt;mvn failsafe:integration-test failsafe:verify&lt;/tt&gt; doesn&apos;t recompile the code, but puts the new binaries on the classpath and tries running against the server.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14237504" author="dimaspivak" created="Mon, 8 Dec 2014 06:29:02 +0000"  >&lt;p&gt;Oh, and one other thing I forgot to mention: the other advantage of using something like TestFromClientSide is that we also get semantic compatibility testing for free, which we wouldn&apos;t get if we just validated that compilation and running with different binaries works.&lt;/p&gt;</comment>
                            <comment id="14238240" author="stack" created="Mon, 8 Dec 2014 18:50:39 +0000"  >&lt;p&gt;Sounds amazing &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dimaspivak&quot; class=&quot;user-hover&quot; rel=&quot;dimaspivak&quot;&gt;Dima Spivak&lt;/a&gt; What do we need to do to move this project forward?  (Maybe write up your little outline above as a one-pager so can be more easily referred to &amp;#8211; easier than pointing at a few comments in a JIRA?)&lt;/p&gt;</comment>
                            <comment id="14238773" author="enis" created="Tue, 9 Dec 2014 00:59:18 +0000"  >&lt;p&gt;It seems that converting TestFromClientSide into a IT would be a good first step. &lt;/p&gt;</comment>
                            <comment id="14243634" author="dimaspivak" created="Fri, 12 Dec 2014 02:53:17 +0000"  >&lt;p&gt;I&apos;ll post up IntegrationTestFromClientSide (as per &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12221&quot; title=&quot;Port TestFromClientSide to hbase-it&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12221&quot;&gt;HBASE-12221&lt;/a&gt;), which works well for the short term. Moving forward, I think we may also want to look at implementing &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12556&quot; title=&quot;Create a golden file for testing client API source/binary compatibility&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12556&quot;&gt;HBASE-12556&lt;/a&gt; as an exhaustive integration test of all the public client APIs. Working on a design doc.&lt;/p&gt;</comment>
                            <comment id="14273103" author="dimaspivak" created="Mon, 12 Jan 2015 00:13:27 +0000"  >&lt;p&gt;This one can finally be closed because the work on an implementation that seems to do the right thing (and which found some binary incompatibilities via &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12836&quot; title=&quot;Tip of branch 0.98 has some binary incompatibilities with 0.98.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12836&quot;&gt;&lt;del&gt;HBASE-12836&lt;/del&gt;&lt;/a&gt;) is Patch Available over &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12808&quot; title=&quot;Use Java API Compliance Checker for binary/source compatibility&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12808&quot;&gt;&lt;del&gt;HBASE-12808&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310000">
                    <name>Duplicate</name>
                                                                <inwardlinks description="is duplicated by">
                                        <issuelink>
            <issuekey id="12640902">HBASE-8277</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12765001">HBASE-12808</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 4 Apr 2013 23:21:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>321353</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 48 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1jg2v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>321698</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>