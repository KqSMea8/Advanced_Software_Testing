<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:16:19 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-4147/HBASE-4147.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-4147] StoreFile query usage report</title>
                <link>https://issues.apache.org/jira/browse/HBASE-4147</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Detailed information on what HBase is doing in terms of reads is hard to come by.&lt;/p&gt;

&lt;p&gt;What would be useful is to have a periodic StoreFile query report.  Specifically, this could run on a configured interval (e.g., every 30 seconds, 60 seconds) and dump the output to the log files.&lt;/p&gt;

&lt;p&gt;This would have all StoreFiles accessed during the reporting period (and with the Path we would also know region, CF, and table), # of times the StoreFile was accessed, the size of the StoreFile, and the total time (ms) spent processing that StoreFile.&lt;/p&gt;

&lt;p&gt;Even this level of summary would be useful to detect a which tables &amp;amp; CFs are being accessed the most, and including the StoreFile would provide insight into relative &quot;uncompaction&quot; (i.e., lots of StoreFiles).&lt;/p&gt;

&lt;p&gt;I think the log-output, as opposed to UI, is an important facet with this.  I&apos;m assuming that users will slice and dice this data on their own so I think we should skip any kind of admin view for now (i.e., new JSPs, new APIs to expose this data).  Just getting this to log-file would be a big improvement.&lt;/p&gt;

&lt;p&gt;Will this have a non-zero performance impact?  Yes.  Hopefully small, but yes it will.  However, flying a plane without any instrumentation isn&apos;t fun.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  &lt;/p&gt;

</description>
                <environment></environment>
        <key id="12515764">HBASE-4147</key>
            <summary>StoreFile query usage report</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="dmeil">Doug Meil</reporter>
                        <labels>
                    </labels>
                <created>Fri, 29 Jul 2011 11:07:54 +0000</created>
                <updated>Tue, 19 Aug 2014 21:57:30 +0000</updated>
                                                                                <due></due>
                            <votes>1</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13072807" author="dmeil" created="Fri, 29 Jul 2011 13:22:06 +0000"  >&lt;p&gt;I think that instrumenting StoreFileScanner by gathering time spent for all the &apos;next&apos; and &apos;seek&apos; calls would do it.  And then on &apos;close&apos; it would publish the detailed record to some internal service that would gather up all the these detail records and then periodically dump the summary. &lt;/p&gt;

&lt;p&gt;I&apos;m doing some hand-waving here because we don&apos;t want to introduce concurrency issues in the publishing process (e.g., publishing to something that is synchronized will effectively single-thread StoreFileScanners which would be a non-starter), but based on my understanding of the code it seems like this would be a fairly targeted change.  &lt;/p&gt;

&lt;p&gt;Thoughts?  &lt;/p&gt;</comment>
                            <comment id="13073563" author="dmeil" created="Mon, 1 Aug 2011 14:56:53 +0000"  >&lt;p&gt;Adding document for requirements and 1st pass general design.&lt;/p&gt;</comment>
                            <comment id="13073606" author="tlipcon" created="Mon, 1 Aug 2011 16:50:37 +0000"  >&lt;p&gt;Maybe I&apos;m wandering out of scope, but I&apos;ve been thinking a bit about statistics and monitoring as well recently, and I think it might integrate well with this work.&lt;/p&gt;

&lt;p&gt;The idea is to define various probe points (to use the dtrace terminology) throughout the code. Each probe point would have a name and some predefined set of arguments. For example, in the HFile code you might have:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
HFile() {
  &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.readTrace = Tracer.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;hfile.read.complete&quot;&lt;/span&gt;);
}

read() {
...
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (readTrace != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; readTrace.isEnabled()) {
  readTrace.trace(millisSpent, thisHFilePath, blockIdx, ...);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then different things interested in this tracing data can subscribe to the trace point &amp;#8211; in this case in order to collect aggregate statistics for each 30 second period, though other applications would be useful as well. (eg dynamically attach a listener to sample some percentage of requests)&lt;/p&gt;

&lt;p&gt;Advantage of the above design is that it&apos;s flexible, and if off-by-default should have no performance impact since it will be basically jitted away&lt;/p&gt;</comment>
                            <comment id="13073627" author="dmeil" created="Mon, 1 Aug 2011 17:46:53 +0000"  >&lt;p&gt;Thanks Todd.  I don&apos;t think it&apos;s that is out of scope.  If something like this could serve as the general purpose framework to gather log details, then that sounds like a good idea.  I&apos;d like to see some examples that would satisfy the use cases in my writeup and any other common performance issues that anybody else has.&lt;/p&gt;

&lt;p&gt;One expectation I would have is that this would be on for development/production clusters - the next question is what level of summarization is done out of the box in HBase, and (here we go again) where the output goes.  &lt;/p&gt;
</comment>
                            <comment id="13081793" author="nspiegelberg" created="Tue, 9 Aug 2011 17:50:36 +0000"  >&lt;p&gt;@Doug: what is your goal for this JIRA?  Collecting stats on StoreFile usage is really good from a core developer perspective, but it sounds like you want better DBA tools.  For example:&lt;/p&gt;

&lt;p&gt;1) Get sampling. You just want a way to log every 1k database commands and have some collector that displays high level information on get vs put rate, with basic filtering capabilities.  &lt;br/&gt;
2) Note that we&apos;re developing a version of &quot;show processlist&quot; for HBase that might also provide the visibility you want (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4057&quot; title=&quot;Implement HBase version of &amp;quot;show processlist&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4057&quot;&gt;&lt;del&gt;HBASE-4057&lt;/del&gt;&lt;/a&gt;).  &lt;br/&gt;
3) Another option is exporting per-CF metrics in addition to our existing per-server metrics.  We have this sorta hacked up for 89 and could give you the diffs if you want to finish it off for 92.&lt;/p&gt;</comment>
                            <comment id="13082438" author="dmeil" created="Wed, 10 Aug 2011 16:19:54 +0000"  >&lt;p&gt;Hi Nicolas, I updated another version of this &quot;...storefilereport_2011_08_10.pdf&quot; with a &quot;Why&quot; section that has a little more background on scenarios.&lt;/p&gt;

&lt;p&gt;In a word:  Statspack.  Say what one might about Oracle, that report in was the intersection of DBA and developer reporting.  So the answer to the question &quot;developer&quot; vs. &quot;DBA&quot; is &quot;both.&quot;&lt;/p&gt;

&lt;p&gt;re:  &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4057&quot; title=&quot;Implement HBase version of &amp;quot;show processlist&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4057&quot;&gt;&lt;del&gt;HBASE-4057&lt;/del&gt;&lt;/a&gt;, is &quot;show processlist&quot; a point-in-time command?  It seems to be.  That&apos;s certainly useful, but it&apos;s a little different than the view that statspack provides, which does the summary for you.&lt;/p&gt;</comment>
                            <comment id="13082507" author="dmeil" created="Wed, 10 Aug 2011 17:53:19 +0000"  >&lt;p&gt;Just want to point this out again, &quot;StoreFile&quot; reporting implies that the full path is available (table, region, cf, storefile) not just the StoreFile itself.  That is pointed out in the doc, but I want to point that out again.&lt;/p&gt;

&lt;p&gt;With respect to per-CF metrics, that is better than the current situation of only RS level, but I still don&apos;t think that covers what I&apos;m proposing there isn&apos;t a sense of time-cost with the current metrics, nor does it split out system vs. app usage.  &lt;/p&gt;</comment>
                            <comment id="13082580" author="dmeil" created="Wed, 10 Aug 2011 19:15:58 +0000"  >&lt;p&gt;For those not familiar with Statspack, see this:  &lt;a href=&quot;http://www.akadia.com/services/ora_statspack_survival_guide.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.akadia.com/services/ora_statspack_survival_guide.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;re:  &quot;STATSPACK is a diagnosis tool for instance-wide performance problems; it also supports application tuning activities by providing data which identifies high-load SQL statements. STATSPACK can be used both proactively to monitor the changing load on a system, and also reactively to investigate a performance problem.&quot;&lt;br/&gt;
overview..&lt;/p&gt;

&lt;p&gt;re: &quot;The STATSPACK reports we like are from 1 5-minute intervals during a busy or peak time, when the performance is at its worst.&quot;&lt;br/&gt;
That&apos;s exactly what I&apos;m talking about...  small intervals.  Not too small, but but not too big.&lt;/p&gt;

&lt;p&gt;re: &quot;Another common mistake with STATSPACK is to gather snapshots only when there is a problem.&quot;&lt;br/&gt;
That&apos;s why this type of reporting should pretty much be &apos;always on&apos; - you need to be able to compare to other points in time.&lt;/p&gt;

&lt;p&gt;Again, some things don&apos;t translate 1:1 from the RDBMS world, but a lot does.  &lt;/p&gt;</comment>
                            <comment id="13082620" author="ghelmling" created="Wed, 10 Aug 2011 19:50:31 +0000"  >&lt;p&gt;I don&apos;t want to hijack this issue, but if we&apos;re talking about broader tracing and monitoring support, I think another inspiration worth looking at is Dapper:&lt;br/&gt;
&lt;a href=&quot;http://research.google.com/pubs/pub36356.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://research.google.com/pubs/pub36356.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Some of the situations we&apos;re currently trying to help application teams with are things like:  call #1 took 10msec to process, call #2 took 300000msec to process... Why?  We don&apos;t have a whole lot at the moment to help in answering this.  Better load stats help see what&apos;s going on in the cluster from one direction.  But it still requires a lot of inferring to see how it ties together from the client end.&lt;/p&gt;

&lt;p&gt;@Todd, I like the dtrace-like approach.  I think we could start simply with something like this and spread and evolve it as we go.  Possibly even growing it into distributed tracing.  It seems like that&apos;s a broader need so maybe we should move that discussion into another issue.&lt;/p&gt;

&lt;p&gt;In general, for additional stats that we export, I would like to gently encourage a hard-look at whether or not there&apos;s a way to incorporate them into the metrics framework.  Not everything will fit with this &amp;#8211; it&apos;s particularly not so great at dynamically named stats (like stats based on store filenames).  But it does give us an existing framework for collecting, aggregating and reporting those stats, with a variety of tools that integrate nicely.  Just writing stats to log files requires a whole lot more work to actually make the output useful.  Ackowledging sometimes it may be the best/only option though (I&apos;m currently patching up the RPC logging to make it a little more useful).  I really need to look at metricsv2 and see how much more flexibility it gives us.&lt;/p&gt;

&lt;p&gt;@Doug, thanks for the STATSPACK link.  I&apos;ll read up on that as well.&lt;/p&gt;</comment>
                            <comment id="13082631" author="stack" created="Wed, 10 Aug 2011 19:59:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;Some of the situations we&apos;re currently trying to help application teams with are things like: call #1 took 10msec to process, call #2 took 300000msec to process... Why?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Me and J-D need to be able to answer that question too.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In general, for additional stats that we export, I would like to gently encourage a hard-look at whether or not there&apos;s a way to incorporate them into the metrics framework.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agree, as much as we can.  We use tsdb here so if a metric, we already have ready means for viewing across time.&lt;/p&gt;</comment>
                            <comment id="13082656" author="dmeil" created="Wed, 10 Aug 2011 20:35:33 +0000"  >&lt;p&gt;With user example #1 of my updated writeup, an example of that happened on the dist-list recently.  He still had major compactions scheduled daily, and his cluster &quot;got really slow&quot; every day.  If he had summarized 5 min slices differentiating system and user activity, he could tell which table/reg/cf/storefile was getting system (compaction) activity, etc.&lt;/p&gt;

&lt;p&gt;I doubt this answers your particular case, but I think this is a fairly common occurrence on with users.&lt;/p&gt;

&lt;p&gt;Another example is #3 example of the &quot;degree of uncompaction&quot; stats (e.g., how much time is being spent reading each StoreFile.)  This kind of information would also help the &quot;HBase as queue&quot; issue that was on the dist-list recently.  They weren&apos;t doing major compactions and apparently had a lot of StoreFiles.&lt;/p&gt;

&lt;p&gt;#2 is the &quot;hybrid activity&quot; use-case.  e.g., MR job going on one table while there are also random reads on another table.  At least seeing the activity during the reporting slice would let you know that something else is happening on the cluster and what is getting accessed.&lt;/p&gt;</comment>
                            <comment id="13104623" author="otis" created="Wed, 14 Sep 2011 16:25:18 +0000"  >&lt;p&gt;+1 for Todd&apos;s tracing idea (is this already in a separate JIRA issue that I can&apos;t find?)&lt;br/&gt;
+1 for what Gary said about using existing mechanisms for publishing metrics, so that those of us who already have tools to gather and aggregate data from there can just keep using those tools instead of developing new things that scrape metrics from additional places.&lt;/p&gt;</comment>
                            <comment id="13237707" author="stack" created="Sat, 24 Mar 2012 21:53:13 +0000"  >&lt;p&gt;Upping priority and marking against 0.96.0 so it gets more consideration.&lt;/p&gt;</comment>
                            <comment id="13237708" author="lhofhansl" created="Sat, 24 Mar 2012 21:57:33 +0000"  >&lt;p&gt;Should we output the statistics via JMX as well?&lt;/p&gt;</comment>
                            <comment id="13238035" author="otis" created="Mon, 26 Mar 2012 01:27:07 +0000"  >&lt;p&gt;Yes, +1 for publishing in JMX.  We need that for our SPM for HBase monitoring service, for example.&lt;/p&gt;</comment>
                            <comment id="13535144" author="yuzhihong@gmail.com" created="Tue, 18 Dec 2012 18:43:17 +0000"  >&lt;p&gt;Looking at Gary&apos;s comment from 10/Aug/11 20:50, can priority of this JIRA be lowered now that we have htrace in trunk ?&lt;/p&gt;</comment>
                            <comment id="13549862" author="stack" created="Thu, 10 Jan 2013 18:17:29 +0000"  >&lt;p&gt;This turned into a (useful) discussion.  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; Can you take a look and note what in 0.96 metrics2 might help answering the questions Doug poses above?  We also have a trace mechanism committed but again it would take some work to get it to the level Doug is asking for in the above.&lt;/p&gt;

&lt;p&gt;It would seem that this issue should become two issues now: one to improve the trace so can go down to the per-storefile level and another to add to metrics so can do at the storefile emissions (if possible).&lt;/p&gt;

&lt;p&gt;Meantime, marking this as non-critical and moving out of 0.96 while it is w/o a sponsor.&lt;/p&gt;</comment>
                            <comment id="13549869" author="apurtell" created="Thu, 10 Jan 2013 18:25:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;Meantime, marking this as non-critical and moving out of 0.96 while it is w/o a sponsor.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I might be looking at this again in the future in the context of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6572&quot; title=&quot;Tiered HFile storage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6572&quot;&gt;HBASE-6572&lt;/a&gt;. Deciding what stores to migrate.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12488409" name="hbase_4147_storefilereport.pdf" size="133191" author="dmeil" created="Mon, 1 Aug 2011 14:56:53 +0000"/>
                            <attachment id="12489993" name="hbase_4147_storefilereport_2011_08_10.pdf" size="128326" author="dmeil" created="Wed, 10 Aug 2011 16:11:26 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 1 Aug 2011 16:50:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33394</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 49 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02g53:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12216</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>