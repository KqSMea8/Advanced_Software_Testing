<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:14:44 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3976/HBASE-3976.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3976] Disable Block Cache On Compactions</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3976</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Is there a good reason to believe that caching blocks during compactions is beneficial? Currently, if block cache is enabled on a certain family, then every time it&apos;s compacted, we load all of its blocks into the (LRU) cache, at the expense of the legitimately hot ones.&lt;/p&gt;

&lt;p&gt;As a matter of fact, this concern was raised earlier in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1597&quot; title=&quot;Prevent unnecessary caching of blocks during compactions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1597&quot;&gt;&lt;del&gt;HBASE-1597&lt;/del&gt;&lt;/a&gt;, which rightly points out that, &quot;we should not bog down the LRU with unneccessary blocks&quot; during compaction. Even though that issue has been marked as &quot;fixed&quot;, it looks like it ought to be reopened.&lt;/p&gt;

&lt;p&gt;Should we err on the side of caution and not cache blocks during compactions period (as illustrated in the attached patch)? Or, can we be selectively aggressive about what blocks do get cached during compaction (e.g., only cache those blocks from the recent files)?&lt;/p&gt;</description>
                <environment></environment>
        <key id="12509782">HBASE-3976</key>
            <summary>Disable Block Cache On Compactions</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mikhail">Mikhail Bautin</assignee>
                                    <reporter username="karthick">Karthick Sankarachary</reporter>
                        <labels>
                    </labels>
                <created>Fri, 10 Jun 2011 00:33:57 +0000</created>
                <updated>Wed, 5 Sep 2012 18:01:30 +0000</updated>
                            <resolved>Wed, 5 Sep 2012 17:52:31 +0000</resolved>
                                    <version>0.90.3</version>
                                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13046944" author="jasonrutherglen" created="Fri, 10 Jun 2011 00:53:19 +0000"  >&lt;p&gt;This makes sense!  I think for local data blocks this can further be solved by preventing the read side of the compacted blocks from entering the system IO cache, ala &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2500&quot; title=&quot;A Linux-specific Directory impl that bypasses the buffer cache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-2500&quot;&gt;&lt;del&gt;LUCENE-2500&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13047162" author="apurtell" created="Fri, 10 Jun 2011 12:51:30 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Except I don&apos;t think it needs be configurable, i.e. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is there a good reason to believe that caching blocks during compactions is beneficial? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I fail to think of one.&lt;/p&gt;

&lt;p&gt;Will commit unless I hear otherwise.&lt;/p&gt;</comment>
                            <comment id="13047304" author="jdcryans" created="Fri, 10 Jun 2011 17:20:37 +0000"  >&lt;p&gt;I can&apos;t believe we&apos;re block caching during compactions, huge +1 from me.&lt;/p&gt;</comment>
                            <comment id="13047423" author="apurtell" created="Fri, 10 Jun 2011 20:13:31 +0000"  >&lt;p&gt;Committed to trunk and 0.90 branch. Tests pass locally.&lt;/p&gt;

&lt;p&gt;Thanks a lot for bringing this to our attention Karthick!&lt;/p&gt;</comment>
                            <comment id="13047783" author="nspiegelberg" created="Fri, 10 Jun 2011 23:52:47 +0000"  >&lt;p&gt;I don&apos;t think this patch is doing what you&apos;re expecting.  Store.completeCompaction() is at the end of a compaction.  You give the new StoreFile a pointer to the BlockCache so it is possible for that file to cache blocks.  This StoreFile (with associated reader) is put in Store.storefiles, which is utilized for all gets/scans.  It seems like your patch will unconditionally disable the block cache for all StoreFiles that are the result of a compaction.&lt;/p&gt;

&lt;p&gt;The actual decision on whether you put scan requests for StoreFiles in the block cache during compaction is handled by StoreFileScanner.getScannersForStoreFiles() in Store.compactStores().  That is unconditionally set to false.&lt;/p&gt;</comment>
                            <comment id="13047794" author="stack" created="Sat, 11 Jun 2011 00:01:46 +0000"  >&lt;p&gt;Seems like we need to back out the patch?  Made it a blocker so it doesn&apos;t get forgotten.&lt;/p&gt;</comment>
                            <comment id="13047795" author="stack" created="Sat, 11 Jun 2011 00:02:18 +0000"  >&lt;p&gt;Back out of branch and trunk?&lt;/p&gt;</comment>
                            <comment id="13047823" author="karthick" created="Sat, 11 Jun 2011 02:20:45 +0000"  >&lt;p&gt;My bad. We do want to be able to cache blocks in the reader associated with the compacted file. Moreover, we do disable caching while reading from the files being compacted, as Nicolas pointed out. &lt;/p&gt;

&lt;p&gt;Having said that, it looks like we&apos;re still caching blocks while writing to the compacted file. In particular, when we create its writer in &lt;tt&gt;Store#compactStore&lt;/tt&gt;, we don&apos;t seem to be disabling the cache, as we should be doing. &lt;/p&gt;

&lt;p&gt;To see what I mean, please take a look at the V3 version of the patch. I apologize in advance if this turns out to be a false alarm.&lt;/p&gt;</comment>
                            <comment id="13047839" author="stack" created="Sat, 11 Jun 2011 04:55:34 +0000"  >&lt;p&gt;Assigning Nicolas for review.  Punt to me N if you don&apos;t have time (np).  Thanks.&lt;/p&gt;</comment>
                            <comment id="13047907" author="apurtell" created="Sat, 11 Jun 2011 14:23:14 +0000"  >&lt;p&gt;@Nicholas: You&apos;re correct, my bad.&lt;/p&gt;</comment>
                            <comment id="13047909" author="apurtell" created="Sat, 11 Jun 2011 14:26:27 +0000"  >&lt;p&gt;I have to catch a flight. My apologies again for putting something through rushed last time. Won&apos;t make the mistake again. Will pick up upon landing unless already backed out.&lt;/p&gt;</comment>
                            <comment id="13048317" author="apurtell" created="Sun, 12 Jun 2011 13:48:14 +0000"  >&lt;p&gt;Reverted&lt;/p&gt;</comment>
                            <comment id="13049527" author="stack" created="Tue, 14 Jun 2011 23:50:35 +0000"  >&lt;p&gt;I applied v3 after looking at it but then reverted it.  Its making it so we always skip cache writing out compacted file.  But by default we will skip the cache writing the compacted file.  There is also a config. for the rare case where we actually do not want to skip writing cache &amp;#8211; this patch was undoing that facility.&lt;/p&gt;</comment>
                            <comment id="13049528" author="stack" created="Tue, 14 Jun 2011 23:51:12 +0000"  >&lt;p&gt;Undid its blocker billing.&lt;/p&gt;</comment>
                            <comment id="13050990" author="hudson" created="Fri, 17 Jun 2011 11:00:07 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #1976 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/1976/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/1976/&lt;/a&gt;)&lt;/p&gt;
</comment>
                            <comment id="13051440" author="karthick" created="Sat, 18 Jun 2011 01:59:19 +0000"  >&lt;p&gt;If &quot;hbase.rs.cacheblocksonwrite&quot; is used sparingly, then I guess this a non-issue. It&apos;d be nice though to have different knobs to turn block caching on for the &quot;flush&quot; case as opposed to the &quot;compaction&quot; case, considering that the blocks in the snapshop being flushed are probably hotter than those in the files being compacted.&lt;/p&gt;</comment>
                            <comment id="13051603" author="stack" created="Sat, 18 Jun 2011 22:04:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;If &quot;hbase.rs.cacheblocksonwrite&quot; is used sparingly...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My guess is that its not used at all, not at least until we commit fix for hbase-3417&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&apos;d be nice though to have different knobs to turn block caching on for the &quot;flush&quot; case as opposed to the &quot;compaction&quot; case, considering that the blocks in the snapshop being flushed are probably hotter than those in the files being compacted.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.  Good idea (IIRC, this idea or a version of it has come up before but I don&apos;t recall the issue if any to implement &amp;#8211; we should make one).&lt;/p&gt;</comment>
                            <comment id="13182732" author="zhihyu@ebaysf.com" created="Mon, 9 Jan 2012 19:24:27 +0000"  >&lt;p&gt;This was integrated on 17/Jun/11 11:00 and the status is Open.&lt;br/&gt;
That&apos;s confusing.&lt;/p&gt;</comment>
                            <comment id="13188784" author="mikhail" created="Wed, 18 Jan 2012 22:55:09 +0000"  >&lt;p&gt;The last commit I can see for this JIRA is the following:&lt;/p&gt;

&lt;blockquote&gt;

&lt;p&gt;Author: stack &amp;lt;stack@13f79535-47bb-0310-9956-ffa450edef68&amp;gt;&lt;br/&gt;
Date:   Tue Jun 14 16:47:37 2011&lt;/p&gt;

&lt;p&gt;    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3976&quot; title=&quot;Disable Block Cache On Compactions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3976&quot;&gt;&lt;del&gt;HBASE-3976&lt;/del&gt;&lt;/a&gt; Disable Block Cache On Compactions &amp;#8211; REVERT&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This makes me think this path was actually reverted in trunk. Besides, when Jonathan&apos;s &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4422&quot; title=&quot;Move block cache parameters and references into single CacheConf class&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4422&quot;&gt;&lt;del&gt;HBASE-4422&lt;/del&gt;&lt;/a&gt; (CacheConfig) went in, it completely changed the way this feature would be implemented. This is why it is not possible to verify whether the patch has been applied or not anymore from looking at the current version of Store.java in trunk. I can&apos;t say off the top of my head whether we cache blocks on write during compactions in HBase trunk these days with the new logic implemented by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4422&quot; title=&quot;Move block cache parameters and references into single CacheConf class&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4422&quot;&gt;&lt;del&gt;HBASE-4422&lt;/del&gt;&lt;/a&gt; in effect. However, I am planning to write a new unit test for both trunk and 89-fb to verify that, and address this JIRA if necessary in a consistent way across the two branches.&lt;/p&gt;</comment>
                            <comment id="13189497" author="nspiegelberg" created="Thu, 19 Jan 2012 23:40:22 +0000"  >&lt;p&gt;its very hard to tell if this issue is corrected in trunk or not.  Talked offline with Mikhail about strategies for getting proper resolution here.  &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5230&quot; title=&quot;Ensure compactions do not cache-on-write data blocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5230&quot;&gt;&lt;del&gt;HBASE-5230&lt;/del&gt;&lt;/a&gt; has been made to verify that this issue is indeed fixed &amp;amp; will encompass a fix if other subtle bugs remain.&lt;/p&gt;</comment>
                            <comment id="13191304" author="mikhail" created="Mon, 23 Jan 2012 18:06:28 +0000"  >&lt;p&gt;Re-opening until we add a unit test and implement a proper fix.&lt;/p&gt;</comment>
                            <comment id="13444264" author="lhofhansl" created="Wed, 29 Aug 2012 18:03:34 +0000"  >&lt;p&gt;In a typical read/write type load you&apos;d want &quot;hbase.rs.cacheblocksonwrite&quot; on, no?&lt;br/&gt;
The data in the memstore is the newest, which will typically be the most interesting data in the future. Without &quot;hbase.rs.cacheblocksonwrite&quot; a memflush will make that data cold and it needs to be loaded into the cache upon the next set of reads.&lt;br/&gt;
The same is actually true (to a lesser extend) for compactions: We take the latest data and make it cold.&lt;/p&gt;

&lt;p&gt;&quot;hbase.rs.cacheblocksonwrite&quot; actually does not mean much, what writes are we talking about?&lt;br/&gt;
I can see see three different options here: (1) cache on flush, (2) cache on minor compaction, and &lt;b&gt;maybe&lt;/b&gt; (3) cache on major compaction... Maybe that&apos;s overkill (especially the last one)?&lt;/p&gt;</comment>
                            <comment id="13448131" author="lhofhansl" created="Tue, 4 Sep 2012 22:34:34 +0000"  >&lt;p&gt;Any comment on my comment &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ?&lt;br/&gt;
The use case we&apos;re the most interested in is transferring the &quot;hotness&quot; of the memstore to the blockcache (i.e. cache on flush).&lt;br/&gt;
If there&apos;s interest I&apos;ll look into implementing the flags I mentioned in my previous comment.&lt;/p&gt;</comment>
                            <comment id="13448521" author="mikhail" created="Wed, 5 Sep 2012 06:25:56 +0000"  >&lt;p&gt;Lars: I agree, cache-on-flush is definitely the most useful. This is what we are now using in production for some workloads.&lt;/p&gt;</comment>
                            <comment id="13448920" author="lhofhansl" created="Wed, 5 Sep 2012 17:47:04 +0000"  >&lt;p&gt;Hmm... Looking at the code in trunk, this is (mostly) what is currently happening anyway.&lt;br/&gt;
HStore.createWriterInTmp using the configured cacheOnWrite setting unless this is a compaction (in which case cacheOnWrite is set to false).&lt;br/&gt;
There is also a test for this in TestCacheOnWrite.&lt;/p&gt;

&lt;p&gt;I think we can close this issue. Agreed?&lt;/p&gt;</comment>
                            <comment id="13448927" author="lhofhansl" created="Wed, 5 Sep 2012 17:52:31 +0000"  >&lt;p&gt;Closing... Please reopen if this should be kept open.&lt;/p&gt;</comment>
                            <comment id="13448936" author="mikhail" created="Wed, 5 Sep 2012 18:01:30 +0000"  >&lt;p&gt;Lars: thanks for double-checking this!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12538908">HBASE-5230</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12429253">HBASE-1597</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12482127" name="HBASE-3976-V3.patch" size="1554" author="karthick" created="Sat, 11 Jun 2011 02:09:54 +0000"/>
                            <attachment id="12482089" name="HBASE-3976-unconditional.patch" size="803" author="apurtell" created="Fri, 10 Jun 2011 19:28:34 +0000"/>
                            <attachment id="12482006" name="HBASE-3976.patch" size="1402" author="karthick" created="Fri, 10 Jun 2011 00:34:32 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 10 Jun 2011 00:53:19 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33303</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 15 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hosn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>101279</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>