<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:44:01 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-13510/HBASE-13510.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-13510] Purge ByteBloomFilter</title>
                <link>https://issues.apache.org/jira/browse/HBASE-13510</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;In order to address the comments over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10800&quot; title=&quot;Use CellComparator instead of KVComparator&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10800&quot;&gt;&lt;del&gt;HBASE-10800&lt;/del&gt;&lt;/a&gt; related to comparing Cell with a serialized KV&apos;s key we had some need for that in Bloom filters.  After discussing with Anoop, we found that it may be possible to remove/modify some of the APIs in the BloomFilter interfaces and for doing that we can purge ByteBloomFilter.  &lt;/p&gt;

&lt;p&gt;I read the code and found that ByteBloomFilter was getting used in V1 version only.  Now as it is obsolete we can remove this code and move some of the static APIs in ByteBloomFilter to some other util class or bloom related classes which will help us in refactoring the code too.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12822385">HBASE-13510</key>
            <summary>Purge ByteBloomFilter</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12822298">HBASE-13500</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="ram_krish">ramkrishna.s.vasudevan</reporter>
                        <labels>
                    </labels>
                <created>Mon, 20 Apr 2015 17:12:48 +0000</created>
                <updated>Tue, 19 May 2015 07:59:12 +0000</updated>
                            <resolved>Tue, 19 May 2015 04:55:48 +0000</resolved>
                                                    <fixVersion>2.0.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="14528300" author="ram_krish" created="Tue, 5 May 2015 11:41:24 +0000"  >&lt;p&gt;This patch tries to refactor CompoundBloomFilter so that it could make use of CellComparator.compare(Cell, Cell).  &lt;br/&gt;
The ByteBloomfilter cannot be purged totally because the &apos;chunks&apos; inside the CompoundBloomFilter are still ByteBloomFilters.  &lt;br/&gt;
But ByteBloomFilter cannot be a type of bloom because they are all removed since V1.&lt;/p&gt;</comment>
                            <comment id="14528301" author="ram_krish" created="Tue, 5 May 2015 11:42:17 +0000"  >&lt;p&gt;To be noted that in case of ROW bloom still we have to use the byte[]. Anyway we don&apos;t have a Cell coming into picture there so we could use Bytes.RAW_BYTESCOMPARATOR.&lt;/p&gt;</comment>
                            <comment id="14528549" author="hadoopqa" created="Tue, 5 May 2015 14:46:12 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12730477/HBASE-13510_1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12730477/HBASE-13510_1.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 977f867439e960c668ee6311e47c904efc40f219.&lt;br/&gt;
  ATTACHMENT ID: 12730477&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 4 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13939//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13939//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13939//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13939//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13939//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13939//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13939//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13939//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14530140" author="ram_krish" created="Wed, 6 May 2015 08:25:15 +0000"  >&lt;p&gt;Ping for reviews here!!!&lt;/p&gt;</comment>
                            <comment id="14530265" author="anoop.hbase" created="Wed, 6 May 2015 09:49:01 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; KeyValue createBloomKeyValue(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] rowBuf, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rowOffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rowLen,
	&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] qualBuf, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; qualOffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; qualLen) {
	&lt;span class=&quot;code-comment&quot;&gt;// Ideally should not be called here
&lt;/span&gt;	&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Agree that we will never get a call to here. Still it looks a problematic statement.  My suggestion would be to get rid of ByteBloomFilter. The CompoundBloomFilterWriter uses ByteBloomFilter chunk and its state. Can we move these states to CompoundBloomFilter or so?   There are some static methods in ByteBloomFilter which is used from other places, that also we can move into other appropriate places. &lt;br/&gt;
In this patch still ByteBloomFilter is a BloomFilterWriter. My thinking is we can avoid that also.&lt;/p&gt;</comment>
                            <comment id="14530286" author="ram_krish" created="Wed, 6 May 2015 10:05:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;The CompoundBloomFilterWriter uses ByteBloomFilter chunk and its state. Can we move these states to CompoundBloomFilter or so? There are some static methods in ByteBloomFilter which is used from other places, that also we can move into other appropriate places. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In this patch still ByteBloomFilter is a BloomFilterWriter. My thinking is we can avoid that also.&lt;br/&gt;
I had a patch where all the static were moved to BloomfilterUtils.  But I think it was suggested that will make the patch bigger.  So the chunk that we create as a ByteBloomfilter should direclty be a BloomFilterWriter and we should call it BloomFilterWriterImpl&lt;/p&gt;</comment>
                            <comment id="14532443" author="ram_krish" created="Thu, 7 May 2015 10:46:17 +0000"  >&lt;p&gt;Updated patch.  Moved all the static methods to BloomFilterUtil.  Removed some APIs from the interfaces so that ByteBloomfilter will not be a BloomFilterWriter.&lt;/p&gt;</comment>
                            <comment id="14532515" author="hadoopqa" created="Thu, 7 May 2015 12:01:32 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12731139/HBASE-13510_2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12731139/HBASE-13510_2.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 11b76732c0ec80a2cccbe7937440bd107e577c8b.&lt;br/&gt;
  ATTACHMENT ID: 12731139&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 8 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13973//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13973//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13973//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13973//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13973//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13973//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13973//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13973//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14536221" author="ram_krish" created="Sat, 9 May 2015 05:17:06 +0000"  >&lt;p&gt;Ping!!!&lt;/p&gt;</comment>
                            <comment id="14536249" author="anoop.hbase" created="Sat, 9 May 2015 06:20:37 +0000"  >&lt;p&gt;Will complete review weekend Ram.&lt;/p&gt;</comment>
                            <comment id="14537545" author="stack" created="Mon, 11 May 2015 04:23:21 +0000"  >&lt;p&gt;I asked this already I&apos;m sure, but why not Cell in below from StoreFile:&lt;/p&gt;

&lt;p&gt;	          KeyValue bloomKeyKV = null;&lt;/p&gt;

&lt;p&gt;Why we have to do this:&lt;/p&gt;

&lt;p&gt;bloomKeyKV = BloomFilterUtil.createBloomKeyValue&lt;/p&gt;

&lt;p&gt;What is this doing:&lt;/p&gt;

&lt;p&gt;	            bloomKey = bloomKeyKV.getKey();&lt;/p&gt;

&lt;p&gt;Returning byte array of key-only portion?&lt;/p&gt;

&lt;p&gt;We have to do that?&lt;/p&gt;

&lt;p&gt;I asked this before too.. .how many itimes we creating new keys here?&lt;/p&gt;

&lt;p&gt;	          kvKey = BloomFilterUtil.createBloomKeyValue(row, rowOffset, rowLen, col,&lt;/p&gt;

&lt;p&gt;or here... 0	            KeyValue rowBloomKey = BloomFilterUtil.createBloomKeyValue(row, rowOffset, rowLen,&lt;br/&gt;
1319	                null, 0, 0);	1321	                null, 0, 0);&lt;/p&gt;

&lt;p&gt;We are just going to check for the row portion here, right?&lt;/p&gt;

&lt;p&gt;	  boolean contains(KeyValue kvKey, ByteBuffer bloom);&lt;/p&gt;

&lt;p&gt;The javadoc on this one is not clear. Its just the row we are comparing?&lt;/p&gt;


&lt;p&gt;We have to do this?&lt;/p&gt;

&lt;p&gt; public Writable getMetaWriter() {&lt;/p&gt;

&lt;p&gt;i.e. preserve Writable?&lt;/p&gt;

&lt;p&gt;We have to add this to Interface? 55	  boolean contains(KeyValue kvKey, ByteBuffer bloom);&lt;/p&gt;

&lt;p&gt;Can&apos;t add Cell version?&lt;/p&gt;

&lt;p&gt;What is benefit of this patch?&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;



</comment>
                            <comment id="14537550" author="ram_krish" created="Mon, 11 May 2015 04:34:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;What is benefit of this patch?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The first benefit of this patch is that we are getting rid of compare(Cell, byte[]) that comes with ROW_COL bloom so that removing such comparisons will help us remove this compare(Cell, byte[]) API in CellComparator.&lt;br/&gt;
The ByteBloomFilter is not getting as a bloomfilter type making us remove the dependency the bloom was having so that all the bloom types were operating on byte[] though the ROW_COL was operating on the key part of a KV formed from row and column.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;bloomKeyKV = BloomFilterUtil.createBloomKeyValue&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;ROW_COL will deal with a KeyValue(ie. a Cell) based on row and column part of a keyvalue.  So if we create a Cell any way to get the key byte[] we need to convert that into a Keyvalue, hence instead of going with Cell and doing a typecast to KV directly creating a KeyValue in this case is better.  This key byte[] is directly going to be used in the hash formation.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Returning byte array of key-only portion?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. We have to do that.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I asked this before too.. .how many itimes we creating new keys here?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This we are doing it every time to form the key part of the ROW_COL bloom key.  This is nothing new, just using a static method instead of an instance method previously.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;We have to add this to Interface? 55	boolean contains(KeyValue kvKey, ByteBuffer bloom);&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ya. Same as my above comment.  Going with Cell we anyway need to have the key byte[] so that the hash functions can use them. Having it as a Cell would make us to convert to a keyvalue anyway.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;.e. preserve Writable?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not doing any change there. The CompoundBloomFilterWriter needs these to add the bloom meta data as part of the store file. &lt;/p&gt;
</comment>
                            <comment id="14537566" author="anoop.hbase" created="Mon, 11 May 2015 05:00:41 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; KeyValue createBloomKeyValue(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] row, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; roffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rlength, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] qualifier,
	  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; qoffset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; qlength) {
	&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (qualifier == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)
	  qualifier = DUMMY;

	&lt;span class=&quot;code-comment&quot;&gt;// Make sure &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; does not specify a timestamp so that the &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; maximum
&lt;/span&gt;	&lt;span class=&quot;code-comment&quot;&gt;// (most recent) timestamp is used.
&lt;/span&gt;	&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; KeyValueUtil.createFirstOnRow(row, roffset, rlength, DUMMY, 0, 0, qualifier, qoffset,
		qlength);
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can we avoid this being a public util? I think just used in one place. Move this code piece directly where used?&lt;/p&gt;</comment>
                            <comment id="14537589" author="stack" created="Mon, 11 May 2015 05:29:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;The first benefit of this patch is that we are getting rid of compare(Cell, byte[]) that comes with ROW_COL bloom so that removing such comparisons will help us remove this compare(Cell, byte[]) API in CellComparator.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds good. What we going to use instead?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The ByteBloomFilter is not getting as a bloomfilter type making us remove the dependency the bloom was having so that all the bloom types were operating on byte[] though the ROW_COL was operating on the key part of a KV formed from row and column.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can you redo the above. I don&apos;t follow boss.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So if we create a Cell any way to get the key byte[] we need to convert that into a Keyvalue, hence instead of going with Cell and doing a typecast to KV directly creating a KeyValue in this case is better.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We can&apos;t have Blooms use Cells? There&apos;d be a copy of the row bytes if Cell or something?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Returning byte array of key-only portion?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Yes. We have to do that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why is that when bloom is for row/column? We put whole key in there?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This we are doing it every time to form the key part of the ROW_COL bloom key. This is nothing new, just using a static method instead of an instance method previously.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We have to do this? We only use the row and column portions? Or we hash whole key part in bloom?&lt;/p&gt;


</comment>
                            <comment id="14537649" author="anoop.hbase" created="Mon, 11 May 2015 06:39:51 +0000"  >&lt;p&gt;Yes Stack.&lt;br/&gt;
When the bloom is ROW_COL,  we make the bloom key (bytes) by creating a KeyValue, key kind of bytes representation and use that.     So every time we have to make this bloom key bytes, we  will create a KV object out of this row, col and take that key portion bytes.   So already the obj creation was there and the API used to return the key bytes.  Now this is changed to return KV type.  (We use that and pass to CellComparator)&lt;br/&gt;
As I asked above, can we just use this util way within the used area only?  Just avoid this API from interface/class?&lt;/p&gt;</comment>
                            <comment id="14537655" author="anoop.hbase" created="Mon, 11 May 2015 06:43:48 +0000"  >&lt;p&gt;We have 2 impls for BloomFilter interface. ie. CompoundBloomFilter and ByteBloomFilter.&lt;br/&gt;
We are not at all using ByteBloomFilter.(Which is having diff way of dealing with ROW_COL bloom key).   This was there in use for HFileV1 I believe.  So we can do those cleanup also.  We no loner need ByteBloomFilter as is a BloomFilter.  This class was having some util methods which now moved to a Util class (static methods)...   Still ByteBloomFilter is in use and used to store some state(in this patch)  .Can we avoid it fully ?&lt;/p&gt;</comment>
                            <comment id="14537704" author="ram_krish" created="Mon, 11 May 2015 08:16:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;As I asked above, can we just use this util way within the used area only? Just avoid this API from interface/class?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Okie we can move this to a local area.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;till ByteBloomFilter is in use and used to store some state(in this patch) .Can we avoid it fully ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;May be we can rename Bytebloomfilter to something else? The CompoundBloomFilter needs to have a bloom chunk to actually do this bloom filter related things.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Sounds good. What we going to use instead?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We are using in this patch compare(Cell, cell).&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;We can&apos;t have Blooms use Cells? There&apos;d be a copy of the row bytes if Cell or something?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes we will always have copy of byte[] for the ROW_COL case of blooms.  For the ROW bloom only the row part of the cell is enough.  So for such bloom we could use the Bytes.BYTES_RAWCOMPARATOR.  Only for ROW_COL we would need this Cell based comparison - the bloom being formed from the row and col of the Keyvalue.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;We have to do this? We only use the row and column portions? Or we hash whole key part in bloom?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Only row and col portion but we form that as a keyvalue and use the key part formed from such a keyvalue.  &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Why is that when bloom is for row/column? We put whole key in there?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;See the above reply.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Can you redo the above&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We were using BytebloomFilter in V1, since V2 everything is a CompoundBloom.  So we are removing the usage of ByteBloomfilter here (as a BloomFilter type).  Both the blooms were dealing with byte[] only.  Now this patch tries to deal only with CompoundBloomFilter with ROW and ROW_COL as the type and the ROW_COL depends on the CellComparator whereas the ROW depends on Bytes.Byte_RAWCOMPARATOR.&lt;/p&gt;</comment>
                            <comment id="14538173" author="stack" created="Mon, 11 May 2015 16:58:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;Just avoid this API from interface/class?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds good.&lt;/p&gt;

&lt;p&gt;I haven&apos;t dug in but it is a hash that goes into the bloom filter, not actual bytes, right? Could we not hash against the actual Cell rather than make copies (pardon if this is a dumb question)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can we avoid it fully ? (An &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;) comment&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like Anoops&apos;s review/comments. Can we do as he suggests?  In particular, fix this observation of his:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We have 2 impls for BloomFilter interface. ie. CompoundBloomFilter and ByteBloomFilter.&lt;/p&gt;&lt;/blockquote&gt;


&lt;blockquote&gt;&lt;p&gt;Now this patch tries to deal only with CompoundBloomFilter with ROW and ROW_COL as the type and the ROW_COL depends on the CellComparator whereas the ROW depends on Bytes.Byte_RAWCOMPARATOR. (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This sounds good. Suggest you reedit the subject and the original description once we have arrived at final patch because it seems like you are doing nicer work than the subject and description currently allow.&lt;/p&gt;</comment>
                            <comment id="14538188" author="ram_krish" created="Mon, 11 May 2015 17:12:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;We have 2 impls for BloomFilter interface. ie. CompoundBloomFilter and ByteBloomFilter.&lt;/p&gt;&lt;/blockquote&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class ByteBloomFilter &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; BloomFilter, BloomFilterWriter {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now this patch removes this and now it is&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class ByteBloomFilter &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; BloomFilterBase {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This bloomFilterBase now has getKeyCount, getMaxKeys and getByteSize().  May be shall we just change the name of the ByteBloomfilter so that we don&apos;t see it as a type of Bloomfilter?  Now it basically acts as the building block for CompoundbloomFilter.  &lt;/p&gt;</comment>
                            <comment id="14538195" author="stack" created="Mon, 11 May 2015 17:15:32 +0000"  >&lt;p&gt;Do we want to remove BBF?  Could we move methods that are in BFBase into CompoundBF?&lt;/p&gt;</comment>
                            <comment id="14538229" author="ram_krish" created="Mon, 11 May 2015 17:30:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;Could we move methods that are in BFBase into CompoundBF?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Already CompoundBF has BloomFilterBase. Let me see once again as what can be done.  &lt;/p&gt;</comment>
                            <comment id="14540438" author="ram_krish" created="Tue, 12 May 2015 18:40:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;Could we not hash against the actual Cell rather than make copies&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I like your suggestion.  But seeing the code once again I think the key byte[] is used to generate that hash.  I don&apos;t think the hash function really cares whether the byte[] is that of a KeyValue or some random byte[].  &lt;/p&gt;</comment>
                            <comment id="14540442" author="ram_krish" created="Tue, 12 May 2015 18:41:16 +0000"  >&lt;p&gt;Renamed BytebloomFilter to BloomFilterChunk so that we no longer have a type of BloomFilter called ByteBloomFilter. Also it makes sense because now the BloomFilterChunk is the building block for CompoundBloomFilter.&lt;br/&gt;
Move the createBloomKeyValue() to the local area ie. StoreFile.java.&lt;br/&gt;
Rest of the patch is similar to what was done previously.&lt;/p&gt;</comment>
                            <comment id="14540449" author="ram_krish" created="Tue, 12 May 2015 18:42:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;Suggest you reedit the subject and the original description once we have arrived at final patch because it seems like you are doing nicer work than the subject and description currently allow.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I had the title as &apos;Purge ByteBloomFilter&apos; but since in my patch that class was not fully removed I edited the title of the JIRA, now again made it ByteBloomFilter.&lt;/p&gt;</comment>
                            <comment id="14540504" author="anoop.hbase" created="Tue, 12 May 2015 19:06:44 +0000"  >&lt;p&gt;Put patch in RB &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="14540525" author="anoop.hbase" created="Tue, 12 May 2015 19:16:09 +0000"  >&lt;p&gt;StoreFile.java &lt;br/&gt;
private static final byte[] DUMMY = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;0&amp;#93;&lt;/span&gt;;&lt;br/&gt;
Just refer to HConstants.EMPTY_BYTE_ARRAY?&lt;/p&gt;

&lt;p&gt;private static KeyValue createBloomKeyValue(byte[] row, int roffset, int rlength,&lt;br/&gt;
	byte[] qualifier, int qoffset, int qlength)&lt;br/&gt;
Might be better just avoid this method itself. It will be just one liner code u will need (in 2 places)&lt;br/&gt;
ie.KeyValueUtil.createFirstOnRow()&lt;/p&gt;

&lt;p&gt;boolean contains(KeyValue kvKey, ByteBuffer bloom);&lt;br/&gt;
Why KeyValue and not Cell?&lt;/p&gt;

&lt;p&gt;BloomFilterChunk  - This is coming good now- Pls see whether the class level javadoc apply as is now also&lt;/p&gt;

</comment>
                            <comment id="14540813" author="hadoopqa" created="Tue, 12 May 2015 21:38:53 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12732321/HBASE-13510_3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12732321/HBASE-13510_3.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit befb46c4d5e7f2d5ce41199fbf9ca2fb7bf43cfc.&lt;br/&gt;
  ATTACHMENT ID: 12732321&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 10 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1899 checkstyle errors (more than the master&apos;s current 1896 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14029//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14029//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14029//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14029//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14029//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14029//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14029//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14029//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14541277" author="ram_krish" created="Wed, 13 May 2015 04:03:22 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
bq.+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; contains(KeyValue kvKey, ByteBuffer bloom) {
+    &lt;span class=&quot;code-comment&quot;&gt;// We &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; to store the result in &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; variable so we can update stats &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;
&lt;/span&gt;+    &lt;span class=&quot;code-comment&quot;&gt;// testing, but when an error happens, we log a message and &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;.
&lt;/span&gt;+    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; block = index.rootBlockContainingKey(kvKey);
+    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] key = kvKey.getKey();
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;  checkContains(key, 0, key.length, block);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here we need the key part to check hash if it is available. So if I do it as a Cell i need to extract the key byte[] from it.  &lt;br/&gt;
Hence better to have it as a KV.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Just refer to HConstants.EMPTY_BYTE_ARRAY?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ya, ok.  &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Might be better just avoid this method itself. It will be just one liner code u will need (in 2 places)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is fine I think. I would leave it as a method only for readability.&lt;/p&gt;</comment>
                            <comment id="14541281" author="anoop.hbase" created="Wed, 13 May 2015 04:08:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;This is fine I think. I would leave it as a method only for readability.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Why I say is, you dont need any null check on family and all...  IMO create directly at the used places (2) gives better readability.&lt;/p&gt;

&lt;p&gt;Later in the patch I got why u have KeyValue instead of Cell.  Can this interface method take byte[] only?  May be byte[] offset and length 3 params.?  Within a bloom interface byte[] based API will look cleaner IMO&lt;/p&gt;</comment>
                            <comment id="14541282" author="anoop.hbase" created="Wed, 13 May 2015 04:09:08 +0000"  >&lt;p&gt;Pls put in RB.  That is better to add comments.&lt;/p&gt;</comment>
                            <comment id="14543163" author="ram_krish" created="Thu, 14 May 2015 04:37:50 +0000"  >&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/34177&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/34177&lt;/a&gt;.  Added this to RB.&lt;br/&gt;
Regarding using byte[] API for contains, the indexBlockchecking code we are planning to unify so that we use Cells.  So if I again make byte[] for contains() then the indexBlock code cannot work with Cells. &lt;/p&gt;</comment>
                            <comment id="14544898" author="ram_krish" created="Fri, 15 May 2015 04:17:41 +0000"  >&lt;p&gt;Ping for reviews !!!&lt;/p&gt;</comment>
                            <comment id="14546317" author="stack" created="Fri, 15 May 2015 22:45:28 +0000"  >&lt;p&gt;Fix this formatting... &lt;/p&gt;

&lt;p&gt;501	    if (qualifier == null)&lt;br/&gt;
502	      qualifier = DUMMY;&lt;/p&gt;

&lt;p&gt;and what is DUMMY?  You mean empty?  (Anoop said use EMPTY_BYTES from HConstants)&lt;/p&gt;

&lt;p&gt;Yeah, I don&apos;t get why we can&apos;t go to Cell since blooms are hashes... but Anoop does above so that is enough for me (for now &amp;#8211; smile)&lt;/p&gt;

&lt;p&gt;The javadoc on BloomFilterChunk is about BloomFilters. Is BFC a BF or utility a BF could use to make chunks? In javadoc, we don&apos;t say what a BFC is. If it is a BF, then why not call it so? We have a BF in our code base already and it has javadoc on the class that is similar to what is here. How does a BFC relate to a BF. &lt;/p&gt;

&lt;p&gt;Man, BloomFilterBase is and Interface? That&apos;ll throw folks off.&lt;/p&gt;

&lt;p&gt;Having a bit of a hard time navigating the hierarchy here with BloomFilter and BloomFilterBase and BloomFilterChunk. ByteBloomFilter seems like a better name than BFC yet we are removing it and putting in place a new class named BFC that has a good bit of BBF. You don&apos;t want to just purge the unused bits from BBF?&lt;/p&gt;




</comment>
                            <comment id="14546613" author="ram_krish" created="Sat, 16 May 2015 07:19:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;(Anoop said use EMPTY_BYTES from HConstants)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sorry I have not updated the diff here.  See RB for the latest diff.  It has that change.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;but Anoop does above so that is enough for me (for now &#8211; smile)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not getting this point. You mean you want to create the hash keys based on Cells.  Ya we could try that may be rewrite the hash function to pick the individual bytes from the Cell&apos;s components like row, fam etc.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The javadoc on BloomFilterChunk is about BloomFilters. Is BFC a BF or utility a BF could use to make chunks? In javadoc, we don&apos;t say what a BFC is. If it is a BF, then why not call it so? We have a BF in our code base already and it has javadoc on the class that is similar to what is here. How does a BFC relate to a BF.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I have thought on all possibilities.  ByteBloomFilter is actually a building block for the CompoundBloomFilter.  But in another comment it was decided not to continue ByteBF as a type of BF.  So decided to remove it.  But once we remove then there is no need for a type call ByteBF.  Hence thought will rename it.&lt;br/&gt;
I can change the javadoc.  In fact I thought about it but later decided not to because it describes basically how the bloom works.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Man, BloomFilterBase is and Interface? That&apos;ll throw folks off.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think it was already there, but we just removed some API from that.  Since the ByteBF (now BloomChunk) is the building block for the compoundBF we need to have some common APIs to getKeys, getHashCount etc.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Having a bit of a hard time navigating the hierarchy here with BloomFilter and BloomFilterBase and BloomFilterChunk. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When we started this offheap and came to this BLOOM I am finding it difficult to make this hierarchy more easier.  Lot of dependencies are there between them.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;ByteBloomFilter seems like a better name than BFC yet we are removing it and putting in place a new class named BFC that has a good bit of BBF. You don&apos;t want to just purge the unused bits from BBF?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As I said in my earlier comment I can leave it as is - see my older patch I did not want to rename it. &lt;br/&gt;
I would say what this patch mainly does is it allows the Blooms to work with Cells and in course of it we did not want to have two bloom types.  As currently CompoundBloomFilter is the only thing we use.  ByteBloomFilter is only a building block.  &lt;/p&gt;


</comment>
                            <comment id="14546686" author="anoop.hbase" created="Sat, 16 May 2015 10:58:34 +0000"  >&lt;p&gt;ByteBloomChunk (or simple BloomChunk) is the correct name now as that is been used in that sense.  The javadoc need modification. Have to move the doc regarding the general blooms can be moved to BloomFilter Interface itself?&lt;/p&gt;</comment>
                            <comment id="14546776" author="ram_krish" created="Sat, 16 May 2015 14:27:04 +0000"  >&lt;p&gt;Modified patch.  I have just used getBuffer() now.  So if we do this then we have to open a JIRA to remove the deprecated tag in KeyValue.&lt;/p&gt;</comment>
                            <comment id="14546859" author="hadoopqa" created="Sat, 16 May 2015 17:06:33 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12733328/HBASE-13510_5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12733328/HBASE-13510_5.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit a93353e83ce514b48700b3f5ba16f8a41204e1fa.&lt;br/&gt;
  ATTACHMENT ID: 12733328&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 10 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14065//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14065//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14065//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14065//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14065//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14065//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14065//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14065//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14546872" author="stack" created="Sat, 16 May 2015 17:42:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;Ya we could try that may be rewrite the hash function to pick the individual bytes from the Cell&apos;s components like row, fam etc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes. We need to do this as part of the move to Cell effort, right? Could be in a follow-on issue.&lt;/p&gt;

&lt;p&gt;BloomChunk is a better name.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When we started this offheap and came to this BLOOM I am finding it difficult to make this hierarchy more easier.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Understood.&lt;/p&gt;

&lt;p&gt;Let me look at the latest patch.&lt;/p&gt;


</comment>
                            <comment id="14546876" author="stack" created="Sat, 16 May 2015 18:13:11 +0000"  >&lt;p&gt;This last patch looks much better. Below are some nits..  One question too... If answer to all below is just cleanup, I&apos;d say go ahead and fix on commit.&lt;/p&gt;

&lt;p&gt;Can&apos;t this Interface addition be Cell instead of KeyValue?&lt;/p&gt;

&lt;p&gt;86	  boolean contains(KeyValue kvKey, ByteBuffer bloom);&lt;/p&gt;

&lt;p&gt;What is this about:&lt;/p&gt;

&lt;p&gt;  public static final int VERSION = 1;&lt;/p&gt;

&lt;p&gt;It does not look like it is used?&lt;/p&gt;

&lt;p&gt;Or this...&lt;/p&gt;

&lt;p&gt;204	      // In a version 1 HFile Bloom filter data is stored in a separate meta&lt;br/&gt;
205	      // block which is loaded on demand, but in version 2 it is pre-loaded.&lt;br/&gt;
206	      // We want to use the same API in both cases.&lt;/p&gt;

&lt;p&gt;Can be removed?&lt;/p&gt;

&lt;p&gt;Will we be moving off the below?&lt;/p&gt;

&lt;p&gt;	202	  public boolean contains(byte[] buf, int offset, int length, ByteBuffer theBloom) {&lt;/p&gt;

&lt;p&gt;... and on to a Cell version.. then inside in the method we figure if kv, onheap/offheap?  Can do later.&lt;/p&gt;

&lt;p&gt;Minor, in util says:&lt;/p&gt;

&lt;p&gt;162	   * Creates a Bloom filter of the given size.&lt;/p&gt;

&lt;p&gt;but it is returning a chunk.  Instead of createBySize should it be createByteBloomChunkBySize&lt;/p&gt;

&lt;p&gt;Nit... add @visiblefortests annotation along w/ this:&lt;/p&gt;

&lt;p&gt;	  /** Should only be used in tests */&lt;/p&gt;
</comment>
                            <comment id="14547532" author="ram_krish" created="Mon, 18 May 2015 04:59:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;86	boolean contains(KeyValue kvKey, ByteBuffer bloom);&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is mainly for using getKey or getBuffer.  If it is Cell again, as an API we don&apos;t know whether the Cell is of type KeyValue (though in this current code path we explicity create a KeyValue only).&lt;br/&gt;
Note that for offheap case we end up in a Hash implementation which would work on the bytes in offheap.  &lt;/p&gt;</comment>
                            <comment id="14547533" author="ram_krish" created="Mon, 18 May 2015 05:07:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;public boolean contains(byte[] buf, int offset, int length, ByteBuffer theBloom) {&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We need this API.  This will work only with ROW blooms.  Add a line in the javadoc about this&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Used in ROW bloom where the blooms are just plain &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14547535" author="ram_krish" created="Mon, 18 May 2015 05:08:05 +0000"  >&lt;p&gt;Updated patch, address the comments regarding the nits.&lt;br/&gt;
Add a TODO: after changing the KeyValue to Cell so that we could do that when we handle offheap.&lt;/p&gt;</comment>
                            <comment id="14547547" author="ram_krish" created="Mon, 18 May 2015 05:27:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;Nit... add @visiblefortests annotation along w/ this:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I missed this. Will add while commit if this patch is fine.&lt;/p&gt;</comment>
                            <comment id="14547663" author="hadoopqa" created="Mon, 18 May 2015 07:48:15 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12733444/HBASE-13510_6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12733444/HBASE-13510_6.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit f49111e5f8a2db8f3065188f03c7ad6d4411bd10.&lt;br/&gt;
  ATTACHMENT ID: 12733444&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 10 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.activemq.transport.mqtt.MQTTTest.testPacketIdGeneratorCleanSession(MQTTTest.java:913)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14073//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14073//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14073//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14073//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14073//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14073//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14073//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14073//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14549759" author="ram_krish" created="Tue, 19 May 2015 04:19:48 +0000"  >&lt;p&gt;Any chance of +1s?&lt;/p&gt;</comment>
                            <comment id="14549764" author="stack" created="Tue, 19 May 2015 04:30:30 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;nit: In CellUtil, you add an unused import: 36	import org.apache.hadoop.hbase.util.Pair; .. fix on commit.&lt;/p&gt;

&lt;p&gt;Ditto for @VisibleForTesting additions.&lt;/p&gt;
</comment>
                            <comment id="14549768" author="ram_krish" created="Tue, 19 May 2015 04:35:26 +0000"  >&lt;p&gt;Sure. Thank you Stack&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Ditto for @VisibleForTesting additions.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This got missed out in the patch that I uploaded.&lt;/p&gt;</comment>
                            <comment id="14549785" author="ram_krish" created="Tue, 19 May 2015 04:54:28 +0000"  >&lt;p&gt;Patch that was pushed to master. Thanks for the reviews &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14550000" author="hudson" created="Tue, 19 May 2015 07:59:12 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #6492 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6492/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6492/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13510&quot; title=&quot;Purge ByteBloomFilter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13510&quot;&gt;&lt;del&gt;HBASE-13510&lt;/del&gt;&lt;/a&gt; - Purge ByteBloomFilter (Ram) (ramkrishna: rev 5e7e626ef54ada9e75b18b31bb49e23b22ae9fe9)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestBloomFilterChunk.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BloomFilterFactory.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BloomFilterUtil.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/CompoundBloomFilter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFilePrettyPrinter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompoundBloomFilter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/CompoundBloomFilterWriter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BloomFilterWriter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestByteBloomFilter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/ByteBloomFilter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BloomFilterChunk.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BloomFilterBase.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BloomFilter.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/CompoundBloomFilterBase.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12730477" name="HBASE-13510_1.patch" size="17157" author="ram_krish" created="Tue, 5 May 2015 11:41:24 +0000"/>
                            <attachment id="12731139" name="HBASE-13510_2.patch" size="56679" author="ram_krish" created="Thu, 7 May 2015 10:46:17 +0000"/>
                            <attachment id="12732321" name="HBASE-13510_3.patch" size="87481" author="ram_krish" created="Tue, 12 May 2015 18:41:16 +0000"/>
                            <attachment id="12733328" name="HBASE-13510_5.patch" size="87969" author="ram_krish" created="Sat, 16 May 2015 14:27:04 +0000"/>
                            <attachment id="12733444" name="HBASE-13510_6.patch" size="88365" author="ram_krish" created="Mon, 18 May 2015 05:08:05 +0000"/>
                            <attachment id="12733708" name="HBASE-13510_7.patch" size="86361" author="ram_krish" created="Tue, 19 May 2015 04:54:28 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 5 May 2015 14:46:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 30 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2dhmf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>