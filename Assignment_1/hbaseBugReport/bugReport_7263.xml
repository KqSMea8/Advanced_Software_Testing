<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:44:07 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7263/HBASE-7263.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7263] Investigate more fine grained locking for checkAndPut/append/increment</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7263</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7051&quot; title=&quot;CheckAndPut should properly read MVCC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7051&quot;&gt;&lt;del&gt;HBASE-7051&lt;/del&gt;&lt;/a&gt; lists 3 options for fixing an ACID-violation wrt checkAndPut:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1) Waiting for the MVCC to advance for read/updates: the downside is that you have to wait for updates on other rows.&lt;br/&gt;
2) Have an MVCC per-row (table configuration): this avoids the unnecessary contention of 1)&lt;br/&gt;
3) Transform the read/updates to write-only with rollup on read.. E.g. an increment would just have the number of values to increment.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7051&quot; title=&quot;CheckAndPut should properly read MVCC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7051&quot;&gt;&lt;del&gt;HBASE-7051&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4583&quot; title=&quot;Integrate RWCC with Append and Increment operations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4583&quot;&gt;&lt;del&gt;HBASE-4583&lt;/del&gt;&lt;/a&gt; implement option #1.  The downside, as mentioned, is that you have to wait for updates on other rows, since MVCC is per-row.&lt;/p&gt;

&lt;p&gt;Another option occurred to me that I think is worth investigating: rely on a row-level read/write lock rather than MVCC.&lt;/p&gt;

&lt;p&gt;Here is pseudo-code for what exists today for read/updates like checkAndPut&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
(1)  Acquire RowLock
(1a) BeginMVCC + Finish MVCC
(2)  Begin MVCC
(3)  Do work
(4)  Release RowLock
(5)  Append to WAL
(6)  Finish MVCC
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Write-only operations (e.g. puts) are the same, just without step 1a.&lt;/p&gt;

&lt;p&gt;Now, consider the following instead:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
(1)  Acquire RowLock
(1a) Grab+Release RowWriteLock (instead of BeginMVCC + Finish MVCC)
(1b) Grab RowReadLock (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; step!)
(2)  Begin MVCC
(3)  Do work
(4)  Release RowLock
(5)  Append to WAL
(6)  Finish MVCC
(7)  Release RowReadLock (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; step!)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As before, write-only operations are the same, just without step 1a.&lt;/p&gt;

&lt;p&gt;The difference here is that writes grab a row-level read lock and hold it until the MVCC is completed.  The nice property that this gives you is that read/updates can tell when the MVCC is done on a per-row basis, because they can just try to acquire the write-lock which will block until the MVCC is competed for that row in step 7.&lt;/p&gt;

&lt;p&gt;There is overhead for acquiring the read lock that I need to measure, but it should be small, since there will never be any blocking on acquiring the row-level read lock.  This is because the read lock can only block if someone else holds the write lock, but both the write and read lock are only acquired under the row lock.&lt;/p&gt;

&lt;p&gt;I ran a quick test of this approach over a region (this directly interacts with HRegion, so no client effects):&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;30 threads&lt;/li&gt;
	&lt;li&gt;5000 increments per thread&lt;/li&gt;
	&lt;li&gt;30 columns per increment&lt;/li&gt;
	&lt;li&gt;Each increment uniformly distributed over 500,000 rows&lt;/li&gt;
	&lt;li&gt;5 trials&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Better-Than-Theoretical-Max: (No locking or MVCC on step 1a): 10362.2 ms&lt;br/&gt;
Today: 13950 ms&lt;br/&gt;
The locking approach: 10877 ms&lt;/p&gt;

&lt;p&gt;So it looks like an improvement, at least wrt increment.  As mentioned, I need to measure the overhead of acquiring the read lock for puts.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12618620">HBASE-7263</key>
            <summary>Investigate more fine grained locking for checkAndPut/append/increment</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="gchanan">Gregory Chanan</assignee>
                                    <reporter username="gchanan">Gregory Chanan</reporter>
                        <labels>
                    </labels>
                <created>Mon, 3 Dec 2012 19:33:41 +0000</created>
                <updated>Thu, 27 Dec 2012 17:59:36 +0000</updated>
                                                                            <component>Transactions/MVCC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>13</watches>
                                                                                                            <comments>
                            <comment id="13509299" author="gchanan" created="Mon, 3 Dec 2012 23:03:00 +0000"  >&lt;p&gt;Did a test of puts.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;30 threads&lt;/li&gt;
	&lt;li&gt;5000 increments per thread&lt;/li&gt;
	&lt;li&gt;30 columns per increment&lt;/li&gt;
	&lt;li&gt;Each increment uniformly distributed over 500,000 rows&lt;/li&gt;
	&lt;li&gt;5 trials&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With new locks:&lt;br/&gt;
9901&lt;/p&gt;

&lt;p&gt;Without new locks:&lt;br/&gt;
9790&lt;/p&gt;

&lt;p&gt;so about a 1% difference.  I haven&apos;t tried to optimize this code at all; I suspect I could do better.&lt;/p&gt;

&lt;p&gt;But right now it&apos;s taking a 1% performance hit on puts for 22% performance benefit on append/increment/checkAndPut on cases that are very contended at the region, but not row level.&lt;/p&gt;</comment>
                            <comment id="13509301" author="gchanan" created="Mon, 3 Dec 2012 23:03:59 +0000"  >&lt;p&gt;Numbers in last comment are in ms.&lt;/p&gt;</comment>
                            <comment id="13509308" author="yuzhihong@gmail.com" created="Mon, 3 Dec 2012 23:08:35 +0000"  >&lt;p&gt;I think this approach is worth pursuit.&lt;/p&gt;</comment>
                            <comment id="13509422" author="lhofhansl" created="Tue, 4 Dec 2012 01:41:49 +0000"  >&lt;p&gt;Interesting!&lt;/p&gt;

&lt;p&gt;This looks right to me:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;multiple Puts can be in the section guarded by the row read lock&lt;/li&gt;
	&lt;li&gt;the readlock covers the MVCC section&lt;/li&gt;
	&lt;li&gt;an increment will wait out all concurrent Puts for the same row by attempting to take the row write lock&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Do these new locks time out like original RowLock?&lt;br/&gt;
This has the potential that Puts starve out Increments, right? (not a big deal, though)&lt;/p&gt;

&lt;p&gt;Also, I&apos;d be a bit skeptical about another mechanism for change visibility.&lt;/p&gt;

&lt;p&gt;Do the result even get better if you spread the increments out over fewer rows?&lt;/p&gt;</comment>
                            <comment id="13509440" author="gchanan" created="Tue, 4 Dec 2012 02:25:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do these new locks time out like original RowLock?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not yet, the write-lock should though.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This has the potential that Puts starve out Increments, right? (not a big deal, though)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t think so.  Consider some set of puts that are holding the readlock, but not the rowlock.  The next operation to go will be whoever grabs the rowlock next (since it is grabbed before the read or write lock), which is exactly the same as today.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also, I&apos;d be a bit skeptical about another mechanism for change visibility.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Well, I also investigated making MVCC more aware (either making it totally per row or having it track the rows being modified and providing a &quot;waitForRowComplete&quot; method, but those were way too complicated &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.  That&apos;s not an argument for adding another mechanism, though.  I agree we should only do this if the performance is worth it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do the result even get better if you spread the increments out over fewer rows?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;m not sure.  My thinking was to spread the increments over a large number of rows so that the contention is on MVCC, not on the row lock.  I thought the &quot;Today&quot; number for the increment test would be way worse, actually, because you&apos;d essentially get only one increment at a time actually doing work.  I need to investigate further.  It&apos;s possible that multiple increments are doing work at the same time, though; any number can technically finish completeMemstoreInsert(beginMemstoreInsert) before another starts a new transaction with beginMemstoreInsert.&lt;/p&gt;</comment>
                            <comment id="13509963" author="gchanan" created="Tue, 4 Dec 2012 19:50:30 +0000"  >&lt;p&gt;I should also mention in the above numbers, I&apos;m not doing real memory management.  I create the ReadWriteRowLock when needed and never delete.  Need to do something smarter there which may have performance impact.&lt;/p&gt;</comment>
                            <comment id="13525981" author="gchanan" created="Thu, 6 Dec 2012 22:57:55 +0000"  >&lt;p&gt;Arg, looks like JIRA ate my previous comment.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; I wanted to run one more thing by you before I write more code for this.&lt;/p&gt;

&lt;p&gt;Why do we need the row locks (at least in the case the user never explictly grabs a rowlock).  On the read side,&lt;br/&gt;
the scanner just ignores KVs with a memstoreTS higher than its readPoint, so doesn&apos;t seem to be a problem there.&lt;br/&gt;
On the write side, we update the memstore and prepare the WALEdit under the row lock, both of which seem like&lt;br/&gt;
they can be done concurrently.&lt;/p&gt;

&lt;p&gt;Now, given that we allow the user to grab row locks, we need some concurrency control.  Could we use the read-locks&lt;br/&gt;
I describe above for the common case (no lock passed in) and grant the user a write lock if they explicitly ask for it&lt;br/&gt;
via HTable.lockRow?  I guess frequent updates could stall the call to lockRow, but I think those calls are rare.&lt;/p&gt;

&lt;p&gt;Am I missing something?&lt;/p&gt;</comment>
                            <comment id="13525987" author="stack" created="Thu, 6 Dec 2012 23:09:18 +0000"  >&lt;p&gt;We&apos;ve talked often enough in the past on dropping user ordained row locking and have been suggesting they not be used w/ a while now.  We could just drop them from 0.96 though they have not been deprecated?&lt;/p&gt;</comment>
                            <comment id="13526009" author="lhofhansl" created="Thu, 6 Dec 2012 23:37:57 +0000"  >&lt;p&gt;You&apos;re talking heresy now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I have never questioned the need to rowlock, but since you ask directly... If we have MVCC and your read-write locks, it seems we won&apos;t need the rowlocks any longer. They were only really needed for the &quot;atomic operation&quot; such as increment/append and checkAndXXX.&lt;/p&gt;</comment>
                            <comment id="13526100" author="apurtell" created="Fri, 7 Dec 2012 02:58:16 +0000"  >&lt;p&gt;I like this thinking.&#160;&lt;/p&gt;

&lt;p&gt;Now is the time (0.96 &quot;singularity&quot;) to make changes like dropping user row locks.&#160;&lt;/p&gt;

&lt;p&gt;We need to manage against having too many major changes destabilizing code at once. That said, I would vote for this one because removing or mitigating contention points will be increasingly important as some storage shifts away from spinning media.&#160;&lt;/p&gt;</comment>
                            <comment id="13526127" author="yuzhihong@gmail.com" created="Fri, 7 Dec 2012 04:01:22 +0000"  >&lt;p&gt;Is it possible to introduce a system wide switch with default value allowing user row locks to be taken ?&lt;br/&gt;
This way, users consciously manage concurrency if they utilize user row locks. Otherwise we manage locking and achieve better (intrinsic) performance.&lt;/p&gt;</comment>
                            <comment id="13526619" author="stack" created="Fri, 7 Dec 2012 18:35:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is it possible to introduce a system wide switch with default value allowing user row locks to be taken ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It maybe be possible but -1 on our ever doing it.  Why expend effort to add a config so exotic, something no one would ever use?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gchanan&quot; class=&quot;user-hover&quot; rel=&quot;gchanan&quot;&gt;Gregory Chanan&lt;/a&gt; How much work would it take to get to your running the TestAcid unit test?&lt;/p&gt;</comment>
                            <comment id="13526675" author="gchanan" created="Fri, 7 Dec 2012 19:21:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;It maybe be possible but -1 on our ever doing it. Why expend effort to add a config so exotic, something no one would ever use?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed.  If users want row locks, they can implement it at the app level.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Gregory Chanan How much work would it take to get to your running the TestAcid unit test?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Good question &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.  Ideally we would spend some effort refactoring the write-path code, i.e. merge the code that does &quot;almost&quot; the same thing (doMiniBatchMutation and mutateWithRowLocks is one example, possibly append/increment/mutateWithPut as well).  I don&apos;t think I have time for that right now.&lt;br/&gt;
Instead, I&apos;ll do the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Remove user-visible row locks (I&apos;ll file a linked JIRA).  Doing this first will make the next step easier, and I don&apos;t think it will be too difficult.&lt;/li&gt;
	&lt;li&gt;Remove RowLocks altogether and replace with read/write locks as described.  I already have code for doMiniBatchMutation and increment that seems to work, except it doesn&apos;t do memory management.  I think adding to the other write-path functions will be straightforward; memory management may take some thinking.&lt;br/&gt;
If you are asking for a timeframe, I don&apos;t think it will gate 0.96 &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13539865" author="sgp2004" created="Thu, 27 Dec 2012 08:30:05 +0000"  >&lt;p&gt;hi Gregory Chanan &lt;br/&gt;
Does your test just operate one rowkey?&lt;br/&gt;
How much will it be slower when you put different rowkey? as you mentioned ,you have to wait for MVCC on other rows.&lt;/p&gt;</comment>
                            <comment id="13539873" author="sgp2004" created="Thu, 27 Dec 2012 08:57:00 +0000"  >&lt;p&gt;&quot;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7051&quot; title=&quot;CheckAndPut should properly read MVCC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7051&quot;&gt;&lt;del&gt;HBASE-7051&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4583&quot; title=&quot;Integrate RWCC with Append and Increment operations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4583&quot;&gt;&lt;del&gt;HBASE-4583&lt;/del&gt;&lt;/a&gt; implement option #1. The downside, as mentioned, is that you have to wait for updates on other rows, since MVCC is per-row.&quot;&lt;/p&gt;

&lt;p&gt;Do you mean it is not per-row for option 2( Have an MVCC per-row (table configuration): this avoids the unnecessary contention of 1))&lt;/p&gt;</comment>
                            <comment id="13540080" author="gchanan" created="Thu, 27 Dec 2012 17:59:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;Does your test just operate one rowkey?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The full test description is given above.  The relevant part to your question:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Each increment uniformly distributed over 500,000 rows&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;Do you mean it is not per-row for option 2( Have an MVCC per-row (table configuration): this avoids the unnecessary contention of 1))&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Option 2 is per-row but that is not what is implemented today and this JIRA takes a different approach.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                            <subtask id="12623302">HBASE-7315</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 3 Dec 2012 23:08:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>295779</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 51 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i13xx3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>231125</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>