<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:14:40 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-16489/HBASE-16489.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-16489] Configuration parsing</title>
                <link>https://issues.apache.org/jira/browse/HBASE-16489</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Reading hbase-site.xml is required to read various properties viz. zookeeper-quorum, client retires etc.  We can either use Apache Xerces or Boost libraries.&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12999489">HBASE-16489</key>
            <summary>Configuration parsing</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12914633">HBASE-14850</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sudeeps">Sudeep Sunthankar</assignee>
                                    <reporter username="sudeeps">Sudeep Sunthankar</reporter>
                        <labels>
                    </labels>
                <created>Wed, 24 Aug 2016 03:38:36 +0000</created>
                <updated>Wed, 30 Nov 2016 23:01:12 +0000</updated>
                            <resolved>Wed, 30 Nov 2016 23:00:09 +0000</resolved>
                                                    <fixVersion>HBASE-14850</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="15459954" author="sudeeps" created="Sat, 3 Sep 2016 00:07:03 +0000"  >&lt;p&gt;As we are already linking Boost libraries, Imo we should use the same. Any thoughts&lt;/p&gt;</comment>
                            <comment id="15508611" author="sudeeps" created="Wed, 21 Sep 2016 03:33:29 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;This patch loads configuration from hbase-default.xml and hbase-site.xml  and stores in a map. It requires a file-path where the above mentioned configuration files are checked for existence. If none of the files are present an exception is thrown. We have used Boost libraries for parsing the xml files.&lt;br/&gt;
Tests have been hooked up in BUCK as well.&lt;/p&gt;</comment>
                            <comment id="15567351" author="enis" created="Wed, 12 Oct 2016 02:46:36 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;tt&gt;hbase-native-client/core/configuration-test.cc&lt;/tt&gt; does not assert anything, just prints out values, so it is not a unit test. Please make sure that there are at least some tests.&lt;/li&gt;
	&lt;li&gt;Please use a better name for this map. It is not a single property. Why are we typedefing this anyway?&lt;br/&gt;
 +using HBASE_CONF_PROPERTY = std::map&amp;lt;std::string, std::string&amp;gt;;&lt;/li&gt;
	&lt;li&gt;This for loop is not how we do substitute variables in the java code:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; MAX_SUBSTS; i++) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Instead of blindly iterating over the values 20 times, we do substitute matching at the get() time. There is a subtle difference in the case that Configuration is a dynamic object in Java, so the substituted variables can change on runtime. &lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;we need a version of Get without deprecated key handling:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+&lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt; std::string HBaseConfiguration::Get(&lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt; std::string &amp;amp;name,
+                                          &lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt; std::string &amp;amp;default_value) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15570768" author="xiaobingo" created="Thu, 13 Oct 2016 04:10:16 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sudeeps&quot; class=&quot;user-hover&quot; rel=&quot;sudeeps&quot;&gt;Sudeep Sunthankar&lt;/a&gt; thanks for work. &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-9537&quot; title=&quot;libhdfs++: implement HDFSConfiguration class&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-9537&quot;&gt;&lt;del&gt;HDFS-9537&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-9538&quot; title=&quot;libhdfs++: load configuration from files&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-9538&quot;&gt;&lt;del&gt;HDFS-9538&lt;/del&gt;&lt;/a&gt; have done the work of loading configuration, you might want to refer to them, and reuse the work if possible. &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-9632&quot; title=&quot;libhdfs++: Add additional type-safe getters to the Configuration class&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-9632&quot;&gt;&lt;del&gt;HDFS-9632&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-9791&quot; title=&quot;libhfds++: ConfigurationLoader throws parse_exception on invalid input&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-9791&quot;&gt;&lt;del&gt;HDFS-9791&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-10787&quot; title=&quot;libhdfs++: hdfs_configuration and configuration_loader should be accessible from our public API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-10787&quot;&gt;HDFS-10787&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-10611&quot; title=&quot;libhdfs++: Add support for HA configurations with more than 2 namenodes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-10611&quot;&gt;HDFS-10611&lt;/a&gt; are the follow up work or fix.&lt;/p&gt;</comment>
                            <comment id="15617141" author="sudeeps" created="Sat, 29 Oct 2016 01:16:27 +0000"  >&lt;p&gt;Hi, this patch does the foll:-&lt;br/&gt;
1) Creates a map of HBase configuration prporty based on the xml file present int path defined as an environment variable HBASE_CONF or /etc/hbase/conf&lt;br/&gt;
2) A custom search path can be provided.&lt;br/&gt;
3) hbase-default.xml and hbase-site.xml are loaded by default. &lt;br/&gt;
4) Custom xml files can be loaded as well.&lt;br/&gt;
5) Values will be overwritten if not marked as final&lt;br/&gt;
6) Unit tests added by to verify loading of default valuse, custom values, final values, self referencing variables, environment variables, expansion variables. Temporary hbase-default.xml and hbase-site.xml are created in build/ path for validating unit tests.&lt;br/&gt;
7) Variable substitution is addressed at the time of Get. We check for presence of variables in the ENV. If variables are not present in the ENV, property map (1) lookup is performed.&lt;br/&gt;
8) Removed deprecated key handling in Get from the last patch&lt;br/&gt;
Some of the API&apos;s have been taken from &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-8707&quot; title=&quot;Implement an async pure c++ HDFS client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-8707&quot;&gt;HDFS-8707&lt;/a&gt; which addresses configuration loading&lt;br/&gt;
9) Tests hooked up in BUCK&lt;/p&gt;</comment>
                            <comment id="15631139" author="enis" created="Thu, 3 Nov 2016 01:23:13 +0000"  >&lt;p&gt;Thanks Sudeep for the patch. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Some of the API&apos;s have been taken from &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-8707&quot; title=&quot;Implement an async pure c++ HDFS client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-8707&quot;&gt;HDFS-8707&lt;/a&gt; which addresses configuration loading&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think it is fine to have a forked version from &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-8707&quot; title=&quot;Implement an async pure c++ HDFS client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-8707&quot;&gt;HDFS-8707&lt;/a&gt;. We cannot depend on a not-yet-merged Hadoop native library for now. Later we can decide to see whether we can make use of these from libhadoop. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;We won&apos;t support windows. We can remove the ifdefs
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; defined(WIN32)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why DLOG rather than LOG as used elsewhere?&lt;/li&gt;
	&lt;li&gt;I think we should still do the Configuration / ConfigurationLoader divide, and maybe have Configuration as a light-weight thing which does not know about search paths, XML and any other stuff, and have HBaseConfigurationLoader know about those. We can use the Configuration object in the Client to pass around, etc. However, if anybody wants to implement a non-XML based configuration later, then the Configuration object should be shared.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;You cannot catch exceptions from unit tests, otherwise if a failure happens the test will not fail. The whole idea for unit testing is that the test will fail if there is an exception or unexpected condition. For this patch and others, we should always make it so that &lt;tt&gt;make check&lt;/tt&gt; will succeed or not based on whether all unit tests succeed, or any unit test fails. We never rely on reading logs in each and every unit test run manually.
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt; std::runtime_error &amp;amp;rex) {
+    LOG(ERROR) &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot;Exception caught in HBase Configuration creation:- &quot;&lt;/span&gt;
+        &amp;lt;&amp;lt; rex.what();
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Empty value for a config property is different than config property non-existing. Should we use optionals as in the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-8707&quot; title=&quot;Implement an async pure c++ HDFS client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-8707&quot;&gt;HDFS-8707&lt;/a&gt;?
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+    DLOG(WARNING) &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot;Returning empty string as no value &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;[&quot;&lt;/span&gt; &amp;lt;&amp;lt; key &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot;]&quot;&lt;/span&gt;;
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;For client usage, we should need &lt;tt&gt;GetInt&lt;/tt&gt;, &lt;tt&gt;GetLong&lt;/tt&gt; and maybe &lt;tt&gt;GetBool&lt;/tt&gt; methods at least. Others can be added later if we need those.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15643822" author="sudeeps" created="Mon, 7 Nov 2016 10:46:47 +0000"  >&lt;p&gt;This patch consists of the foll changes:-&lt;br/&gt;
1) Addressed separation of Configuration and ConfigurationLoader.&lt;br/&gt;
2) Removed file separator constant for Windows.&lt;br/&gt;
3) Added optionals while fetching values from configuration files&lt;br/&gt;
 and environment.&lt;br/&gt;
4)  Added the foll methods GetInt, GetLong, GetDouble, GetBool.&lt;br/&gt;
5) Unit tests hooked up to the client.&lt;/p&gt;</comment>
                            <comment id="15646003" author="enis" created="Tue, 8 Nov 2016 00:48:41 +0000"  >&lt;p&gt;Thanks for making these changes. &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;std::optional is coming in C++17, but we are using 14. Is that the reason we are using boost::optional? What about std::experimental::optional. Seems like a safer bet. HDFS patch is using that instead. I tried to google which one is better, but did not find many references.
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
using optional = std::experimental::optional&amp;lt;T&amp;gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;This should also return an optional value, instead of returning empty value:&lt;br/&gt;
+std::string HBaseConfiguration::Get(const std::string &amp;amp;key) const {&lt;/li&gt;
	&lt;li&gt;Same thing like these kind of comments:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// raw.size() &amp;gt; 0 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the property is present.&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 
&lt;p&gt;Please make it so that internally we never depend on empty strings indicating NULL / Not Found. In modern code, we should opt for optionals in all applicable places. &lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;Let&apos;s rename configuration loader to hbase configuration loader, and rename hbase configuration to configuration.&lt;/li&gt;
	&lt;li&gt;For Configuration / ConfigurationLoader, we want to follow the interface of &lt;a href=&quot;https://github.com/apache/hadoop/tree/HDFS-8707/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/libhdfspp/lib/common&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/hadoop/tree/HDFS-8707/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/libhdfspp/lib/common&lt;/a&gt;. That means unlike the current patch, the configuration should not know anything about the Search paths, etc. The client API should be something like this:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
ConfigurationLoader loader;
loader.SetSearchPath(&lt;span class=&quot;code-quote&quot;&gt;&quot;/foo/bar&quot;&lt;/span&gt;);
Configuration conf = loader.Load();
&lt;span class=&quot;code-comment&quot;&gt;// create HBase connection from &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; configuration. &lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="15646144" author="sudeeps" created="Tue, 8 Nov 2016 01:51:56 +0000"  >&lt;p&gt;Thanks for the feedback &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&amp;#8212; You are correct. std::optional is an upcoming feature in C++17, so we are using boost::optional. We can use std::experimental::optional, but I thought boost::optional would be a tried and tested API so used it instead. I will change it&lt;br/&gt;
&amp;#8212; Get(const std::string &amp;amp;key) method is clearly defined to return an empty string only if the property is not found. The idea was to  perform variable expansion only If the value returned has a size &amp;gt; 0, else we can return the default value. This method is also the basis of GetInt(), GetLong(), GetDouble() and GetBool(). I will change it to use optionals instead.&lt;br/&gt;
&amp;#8212; HBaseConfiguration is not aware of any SeachPaths, Resources etc. It just passes the arguments to ConfigurationLoader. I wanted to hide the internals of ConfigurationLoader from the user, so made ConfigurationLoader a friend of HBaseConfiguration and not exposed it to the user. &lt;/p&gt;

&lt;p&gt;&amp;#8211; Thanks&lt;/p&gt;</comment>
                            <comment id="15646232" author="enis" created="Tue, 8 Nov 2016 02:39:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;HBaseConfiguration is not aware of any SeachPaths, Resources etc. It just passes the arguments to ConfigurationLoader. I wanted to hide the internals of ConfigurationLoader from the user, so made ConfigurationLoader a friend of HBaseConfiguration and not exposed it to the user.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I can see that the implementation just delegates, but we want the path-related APIs to be in the CL instead of the Configuration object as well. The thinking is that, if we want to write another non-XML based way to pass configuration options, then another ConfigurationLoader (like for example PropertiesConfigurationLoader) class can be written to construct the same Configuration object.  &lt;/p&gt;</comment>
                            <comment id="15650853" author="sudeeps" created="Wed, 9 Nov 2016 12:54:00 +0000"  >&lt;p&gt;This patch consists of the foll changes:-&lt;br/&gt;
1) Changed hbase_configuration.cc/.h to configuration.cc/.h&lt;br/&gt;
2) Made ConfigData struct, member of Configuration class, which will be populated by ConfigurationLoader&lt;br/&gt;
3) boost::optional changed to std::experimental::optional&lt;br/&gt;
Separated ConfigurationLoader and Configuration. We can now load xml property files with either default or custom paths as follows:-&lt;/p&gt;

&lt;p&gt;ConfigurationLoader loader;&lt;br/&gt;
// Use loader to set/add default/custom search paths and resources resp.&lt;br/&gt;
loader.SetDefaultSearchPath();&lt;br/&gt;
loader.AddDefaultResources();&lt;br/&gt;
loader.SetSearchPath();&lt;br/&gt;
loader.AddResources();&lt;br/&gt;
// Use loader to load the conf with xml file as follows:-&lt;br/&gt;
Configuration conf;&lt;br/&gt;
loader.Load(conf);&lt;/p&gt;
</comment>
                            <comment id="15672127" author="enis" created="Wed, 16 Nov 2016 23:55:44 +0000"  >
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why do you wrap everything in  &lt;tt&gt;ASSERT_NO_THROW()&lt;/tt&gt; statements? Usage of ASSERT_THROW() is for the case where the wrapped code will throw expected exceptions. However, in the case that the expectation is that the code should not throw exceptions, there is no need to use ASSERT_NO_THROW. If the code indeed throws an exception, the test method will fail anyway since it will not be caught and the test suite execution will fail. Please remove all such statements.&lt;/li&gt;
	&lt;li&gt;Why are we aliasing two times below? Just pick one. Let&apos;s use the camel case (like &lt;tt&gt;ConfigMap&lt;/tt&gt;) for similar stuff in the future as well. All caps is not readable.
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  typedef std::map&amp;lt;std::string, ConfigData&amp;gt; ConfigMap;
+  using CONFIG_MAP = Configuration::ConfigMap;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I think we have previously talked about using the Google&apos;c C++ conventions. Let&apos;s use those recommendations as a guide from now on. For example &lt;a href=&quot;https://google.github.io/styleguide/cppguide.html#Aliases&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://google.github.io/styleguide/cppguide.html#Aliases&lt;/a&gt; talks about:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Don&apos;t put an alias in your &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; API just to save typing in the implementation; &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; so only &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; you intend it to be used by your clients.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Configuration is public API, but I think we are not exposing the typedefs to the client, so we are good there. &lt;br/&gt;
Also for naming, check: &lt;a href=&quot;https://google.github.io/styleguide/cppguide.html#Type_Names&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://google.github.io/styleguide/cppguide.html#Type_Names&lt;/a&gt;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;We should not write/delete anything from unit tests for directories outside of the project directory. Normally all java unit tests are writing under &lt;tt&gt;target/&lt;/tt&gt;. We can write to temporary directories under &lt;tt&gt;build/test-data/&lt;/tt&gt; for this module., but cannot ever delete / access files from outside (especially not under /etc/hbase/conf). For unit testing default search path, you can create a tmp directory, move/write the files and set the search path there.&lt;br/&gt;
Also you can look into moving the XMLs for the test code to be distributed / kept outside of the code. In maven / Java land, these kind of test resources will be under src/test/resources for each module. We can have test-resources or something and keep files there. It is not a big deal if we cannot do this though. &lt;/li&gt;
	&lt;li&gt;Let&apos;s rename &lt;tt&gt;ConfigurationLoader&lt;/tt&gt; to &lt;tt&gt;HBaseConfigurationLoader&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;Can you please follow the API that I was referring above, and also similar to &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-8707&quot; title=&quot;Implement an async pure c++ HDFS client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-8707&quot;&gt;HDFS-8707&lt;/a&gt;. The API that you have is:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Configuration conf;
ConfigurationLoader loader;
loader.SetDefaultSearchPath();
loader.AddDefaultResources();
loader.Load(conf);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;HDFS usage is something like this (&lt;a href=&quot;https://github.com/apache/hadoop/blob/HDFS-8707/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/libhdfspp/examples/cpp/cat/cat.cpp):&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/hadoop/blob/HDFS-8707/hadoop-hdfs-project/hadoop-hdfs-native-client/src/main/native/libhdfspp/examples/cpp/cat/cat.cpp):&lt;/a&gt; &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  hdfs::ConfigurationLoader loader;
  &lt;span class=&quot;code-comment&quot;&gt;//Loading &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; config files core-site.xml and hdfs-site.xml from the config path
&lt;/span&gt;  hdfs::optional&amp;lt;hdfs::HdfsConfiguration&amp;gt; config = loader.LoadDefaultResources&amp;lt;hdfs::HdfsConfiguration&amp;gt;();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In case of HDFS, the actual configuration object knows about default and site files and adds those to the file names. I think it is fine for us to hard code hbase-default and hbase-site for now in the HBaseConfigurationLoader. The only thing is from user API point of view, usage should be like: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  hbase::HBaseConfigurationLoader loader;
  &lt;span class=&quot;code-comment&quot;&gt;//Loading &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; config files core-site.xml and hdfs-site.xml from the config path
&lt;/span&gt;  hbase::optional&amp;lt;hbase::Configuration&amp;gt; config = loader.LoadDefaultResources&amp;lt;hbase::Configuration&amp;gt;();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So, please change the Load signature to return a newly constructed Configuration, and also add LoadDefaultResources method. &lt;/p&gt;</comment>
                            <comment id="15672136" author="enis" created="Wed, 16 Nov 2016 23:59:48 +0000"  >&lt;p&gt;Also for constant names, in Java we sometimes use all caps, sometimes not. I personally do not like all caps at all since I think it reduces readability. Googles style guide recommends to name all constants with a prefix of &lt;tt&gt;k&lt;/tt&gt; and camel-case: &lt;br/&gt;
&lt;a href=&quot;https://google.github.io/styleguide/cppguide.html#Constant_Names&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://google.github.io/styleguide/cppguide.html#Constant_Names&lt;/a&gt;. HDFS also uses this convention it seems. Let&apos;s use that going forward. We can fix the existing code retroactively in another issue.  &lt;/p&gt;</comment>
                            <comment id="15673771" author="sudeeps" created="Thu, 17 Nov 2016 13:45:38 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt;,&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;With the help of ASSERT_NO_THROW, if there is a change in the code and exceptions are added for those methods or statements, tests can be added for those exceptions. I will remove it. If required we can add it later.&lt;/li&gt;
	&lt;li&gt;typedef was copied from &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-8707&quot; title=&quot;Implement an async pure c++ HDFS client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-8707&quot;&gt;HDFS-8707&lt;/a&gt;, I had planned on keeping the  &apos;using&apos; directive and remove the typedef, but forgot to do the same and ended having both. Sorry for that.&lt;/li&gt;
	&lt;li&gt;The build/ directory is a temporary directory where we store object files, shared libs and other binaries on compilation. I can change the unit tests to create temporary xml configuration files under build/test-data/. Also, We never delete from or write to /etc/hbase/conf.  It is used only for reading. Some of the unit tests reset the environment variable HBASE_CONF to load properties from the build/ directory.&lt;/li&gt;
	&lt;li&gt;The idea behind using loader.Load(conf); was that we can use loader to load files from different search paths and use the same configuration object with the updated properties instead of using conf = loader.Load(); where a new object will be returned every time. For instance, we can use loader as follows:-
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
	Configuration conf;
	HBaseConfigurationLoader loader;

	&lt;span class=&quot;code-comment&quot;&gt;// Load defaults
&lt;/span&gt;	loader.SetDefaultSearchPath();
	loader.AddDefaultResources();
	&lt;span class=&quot;code-comment&quot;&gt;// load properties
&lt;/span&gt;	loader.Load(conf);

	&lt;span class=&quot;code-comment&quot;&gt;// load custom
&lt;/span&gt;	loader.AddToSearchPath(CUSTOM_HBASE_CONF_PATH);
	loader.AddResources(HBASE_DEFAULT_XML);
	loader.AddResources(HBASE_SITE_XML);
	&lt;span class=&quot;code-comment&quot;&gt;// use the same conf object to update properties
&lt;/span&gt;	loader.Load(conf);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="15674857" author="enis" created="Thu, 17 Nov 2016 21:29:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;The build/ directory is a temporary directory where we store object files, shared libs and other binaries on compilation. I can change the unit tests to create temporary xml configuration files under build/test-data&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sounds good. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Also, We never delete from or write to /etc/hbase/conf. It is used only for reading.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ok, but we cannot even assume that the machine running the unit test will have /etc/hbase/conf directory created. Better to confine everything under temp directories in build/test-data. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The idea behind using loader.Load(conf); was that we can use loader to load files from different search paths and use the same configuration object with the updated properties instead of using conf = loader.Load(); where a new object will be returned every time&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It is fine to return a new object. In almost all of the usage, the user will be loding default file names from default search path. We do not need to complicate stuff for reloading using the same config object. Lets make it so that default usage is only 2 lines instead of 5 lines, similar to the HDFS Configuration case. &lt;/p&gt;</comment>
                            <comment id="15679167" author="sudeeps" created="Sat, 19 Nov 2016 12:21:15 +0000"  >&lt;p&gt;This patch addresses the issues raised in the last feedback. &lt;/p&gt;</comment>
                            <comment id="15679187" author="sudeeps" created="Sat, 19 Nov 2016 12:34:38 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Ok, but we cannot even assume that the machine running the unit test will have /etc/hbase/conf directory created. Better to confine everything under temp directories in build/test-data. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Our unit tests don&apos;t refer /etc/hbase/conf anywhere. It is only used as a default search path by the library to load hbase-default.xml or hbase-site.xml.&lt;/p&gt;</comment>
                            <comment id="15682964" author="sudeeps" created="Mon, 21 Nov 2016 09:17:27 +0000"  >&lt;p&gt;The last patch had an issue with one of the unit tests i.e Configuration.LoadConfFromMultipleLocatons failing intermittently, which has been fixed in this patch.&lt;/p&gt;</comment>
                            <comment id="15692036" author="enis" created="Thu, 24 Nov 2016 03:09:15 +0000"  >&lt;p&gt;Thanks for the latest version of the patch. A couple of comments: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This still assumes that the hbase source code is at &lt;tt&gt;/usr/src/hbase&lt;/tt&gt;. Instead you should use relative directories or find PWD and use &lt;tt&gt;$PWD/build&lt;/tt&gt; or something.
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+&lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt; std::string kHBaseConfPath(&lt;span class=&quot;code-quote&quot;&gt;&quot;/usr/src/hbase/hbase-&lt;span class=&quot;code-keyword&quot;&gt;native&lt;/span&gt;-client/build/&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Same thing with kDefHBaseConfPath as well. You can manually create a conf dir under build if you want to set a search path there.  &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Lets rename the files as well &lt;tt&gt;configuration_loader.h&lt;/tt&gt; -&amp;gt; &lt;tt&gt;hbase_configuration_loader.h&lt;/tt&gt; and same for &lt;tt&gt;.cc&lt;/tt&gt;.&lt;/li&gt;
	&lt;li&gt;You should not do these kind of conditionals in unit tests:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (conf) {
+    EXPECT_STREQ((*conf).Get(&lt;span class=&quot;code-quote&quot;&gt;&quot;custom-prop&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;).c_str(), &quot;&lt;/span&gt;custom-value&quot;);
+    EXPECT_STRNE((*conf).Get(&lt;span class=&quot;code-quote&quot;&gt;&quot;custom-prop&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;).c_str(), &quot;&lt;/span&gt;some-value&quot;);
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 
&lt;p&gt;The goal of the unit test is to fail with an exception if there is something wrong, and do assertions in the success code paths. In case configuration will not be parsed above (let&apos;s say a later patch breaks this path), we actually want to fail the test so that we can catch the issue. The above code instead will silently succeed, thus defeating the purpose of having a unit test. The best way would be to add an assertion after the config parsing which checks the conf optional is set. Something like this: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  HBaseConfigurationLoader loader;
+  std::vector&amp;lt;std::string&amp;gt; resources { kHBaseSiteXml };
+  hbase::optional&amp;lt;Configuration&amp;gt; conf = loader.LoadResources(kHBaseConfPath,
+                                                             resources);
+    ASSERT_TRUE(conf.has_value()) &amp;lt;&amp;lt; &lt;span class=&quot;code-quote&quot;&gt;&quot;Configuration parsing failed!&quot;&lt;/span&gt;;
+    EXPECT_STREQ((*conf).Get(&lt;span class=&quot;code-quote&quot;&gt;&quot;custom-prop&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;).c_str(), &quot;&lt;/span&gt;custom-value&quot;);
+    EXPECT_STRNE((*conf).Get(&lt;span class=&quot;code-quote&quot;&gt;&quot;custom-prop&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&quot;).c_str(), &quot;&lt;/span&gt;some-value&quot;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Also forgot to mention earlier that in java code base, we have a strict line wrapping of 100 columns. Let&apos;s follow that in the C++ code base as well. Our precommit script (hadoopqa) checks for that for regular patches, but it is not hooked up for this branch and C++ code yet. So we can do the manual check for now.&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="15694576" author="sudeeps" created="Fri, 25 Nov 2016 01:43:06 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt;,&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;
&lt;p&gt;This still assumes that the hbase source code is at /usr/src/hbase. Instead you should use relative directories or find PWD and use $PWD/build or something.&lt;/p&gt;&lt;/blockquote&gt;.&lt;br/&gt;
I will use relative paths instead. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; The best way would be to add an assertion after the config parsing which checks the conf optional is set.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will add the asserts in the subsequent patch and remove the &apos;if&apos; conditions.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Our precommit script (hadoopqa) checks for that for regular patches, but it is not hooked up for this branch and C++ code yet.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Is there a standalone script which I can use to check ?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Also forgot to mention earlier that in java code base, we have a strict line wrapping of 100 columns. Let&apos;s follow that in the C++ code base as well.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will change the line wrapping for all subsequent patches.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="15695784" author="sudeeps" created="Fri, 25 Nov 2016 12:47:00 +0000"  >&lt;p&gt;This patch consists of the below changes.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Chaged filename of configuration_loader.* to hbase_configuration_loader.*&lt;/li&gt;
	&lt;li&gt;Changed the paths to search for hbase configuration files in unit tests to relative ones.&lt;/li&gt;
	&lt;li&gt;Changed line wrapping to 100.&lt;/li&gt;
	&lt;li&gt;Changed conditions in unit tests to ASSERT_TRUE() checks.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="15710126" author="enis" created="Wed, 30 Nov 2016 23:00:09 +0000"  >&lt;p&gt;Thanks Sudeep for the patch. I&apos;ve pushed the v8 version of the patch with running clang-format with the Google style guides and fixed a couple of minor issues with the docs. The test build outputs also go to build/test-data/&amp;lt;test-name&amp;gt; now. &lt;/p&gt;

&lt;p&gt;One thing that I have missed is the fact that hbase-default.xml is not deployed in the conf directory, but it is bundled with the source code in the jar. Let me open another issue to address that. &lt;/p&gt;</comment>
                            <comment id="15710130" author="enis" created="Wed, 30 Nov 2016 23:01:11 +0000"  >&lt;p&gt;Attaching what is committed. &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12829494" name="HBASE-16489.HBASE-14850.v1.patch" size="12676" author="sudeeps" created="Wed, 21 Sep 2016 03:33:29 +0000"/>
                            <attachment id="12835932" name="HBASE-16489.HBASE-14850.v2.patch" size="32049" author="sudeeps" created="Sat, 29 Oct 2016 01:16:27 +0000"/>
                            <attachment id="12837739" name="HBASE-16489.HBASE-14850.v3.patch" size="42902" author="sudeeps" created="Mon, 7 Nov 2016 10:46:47 +0000"/>
                            <attachment id="12838166" name="HBASE-16489.HBASE-14850.v4.patch" size="44548" author="sudeeps" created="Wed, 9 Nov 2016 12:54:00 +0000"/>
                            <attachment id="12839684" name="HBASE-16489.HBASE-14850.v5.patch" size="44067" author="sudeeps" created="Sat, 19 Nov 2016 12:21:15 +0000"/>
                            <attachment id="12839765" name="HBASE-16489.HBASE-14850.v6.patch" size="44076" author="sudeeps" created="Mon, 21 Nov 2016 09:17:27 +0000"/>
                            <attachment id="12840507" name="HBASE-16489.HBASE-14850.v7.patch" size="44392" author="sudeeps" created="Fri, 25 Nov 2016 12:47:00 +0000"/>
                            <attachment id="12841156" name="HBASE-16489_v8.patch" size="45163" author="enis" created="Wed, 30 Nov 2016 23:01:11 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 12 Oct 2016 02:46:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32p1j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>