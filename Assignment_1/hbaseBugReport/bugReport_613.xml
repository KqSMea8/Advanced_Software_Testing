<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:45:54 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-613/HBASE-613.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-613] Timestamp-anchored scanning fails to find all records</title>
                <link>https://issues.apache.org/jira/browse/HBASE-613</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;If I add 3 versions of a cell and then scan across the first set of added cells using a timestamp that should only get values from the first upload, a bunch are missing (I added 100k on each of the three uploads).  I thought it the fact that we set the number of cells found back to 1 in HStore when we move off current row/column but that doesn&apos;t seem to be it.  I also tried upping the MAX_VERSIONs on my table and that seemed to have no effect.  Need to look closer.&lt;/p&gt;

&lt;p&gt;Build a unit test because replicating on cluster takes too much time.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12395234">HBASE-613</key>
            <summary>Timestamp-anchored scanning fails to find all records</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jimk">Jim Kellerman</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 May 2008 23:47:42 +0000</created>
                <updated>Fri, 22 Aug 2008 21:13:15 +0000</updated>
                            <resolved>Thu, 26 Jun 2008 04:54:27 +0000</resolved>
                                    <version>0.1.0</version>
                    <version>0.1.1</version>
                    <version>0.1.2</version>
                                    <fixVersion>0.1.3</fixVersion>
                    <fixVersion>0.2.0</fixVersion>
                                    <component>Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12594278" author="stack" created="Mon, 5 May 2008 17:30:56 +0000"  >&lt;p&gt;Fixed up subject and description.  Moved this out of 0.1.2.  Its bad but not critically bad.&lt;/p&gt;</comment>
                            <comment id="12598684" author="jimk" created="Wed, 21 May 2008 15:23:09 +0000"  >&lt;p&gt;I have been unable to reproduce this by writing a test case. The one I wrote is attached. Maybe it needs lots more rows or random writes or multiple regions.&lt;/p&gt;</comment>
                            <comment id="12598702" author="stack" created="Wed, 21 May 2008 16:21:52 +0000"  >&lt;p&gt;Thanks for writing a unit test.  Have you tried the original prescription above, using PE sequentialWrite three times in a row?  After each upload, run a scan to find the latest timestamp for the upload... then confirm that a scanner against the latest timestamp returns all cells?  Doing this procedure three times, I found that the first upload was missing about half of its records after 3rd upload (I had a bit of jython for doing the scans but seem to have mislaid it).&lt;/p&gt;
</comment>
                            <comment id="12599261" author="jimk" created="Fri, 23 May 2008 01:26:20 +0000"  >&lt;p&gt;This is ugly.&lt;/p&gt;

&lt;p&gt;Because InternalScanner specifies next as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; next(HStoreKey key, SortedMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[]&amp;gt; results)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;it is only possible to return one timestamp for all the results of a row. Consequently, Cells on the client side are meaningless with respect to timestamp. MemcacheScanner.next sets the timestamp in the HStoreKey to the timestamp requested when the scanner was created. So if the timestamp requested when the scanner was created was HConstants.LATEST_TIMESTAMP, that is what gets set. Similarly, if a specific timestamp was set when the scanner was created, older entries in the cache may not be found.&lt;/p&gt;

&lt;p&gt;So what I propose is to change InternalScanner.next to be:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] next(SortedMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], Cell&amp;gt; results)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where the return value is the row key or null if there are not results and the results map key is the column name and value is the Cell (value, timestamp) pair. This should make it easier to determine what results should be returned.&lt;/p&gt;</comment>
                            <comment id="12599270" author="stack" created="Fri, 23 May 2008 04:19:53 +0000"  >&lt;p&gt;+1 on your suggestion.  What we had previously where we were dropping cell timestamp was just plain broke.&lt;/p&gt;</comment>
                            <comment id="12599924" author="jimk" created="Mon, 26 May 2008 22:04:06 +0000"  >&lt;p&gt;This is a program that can be used to demonstrate the bug. See comments for how.&lt;/p&gt;</comment>
                            <comment id="12599925" author="jimk" created="Mon, 26 May 2008 22:46:17 +0000"  >&lt;p&gt;Demonstrating the bug:&lt;/p&gt;

&lt;p&gt;On an unpatched trunk, run Performance evaluation:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ hadoop-0.17.0/bin/hadoop org.apache.hadoop.hbase.PerformanceEvaluation sequentialWrite 1
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Apply Timestamp.patch (to get the test program), ant compile-test and run it:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ hbase/bin/hbase org.apache.hadoop.hbase.Timestamp time
latest timestamp: 9223372036854775807
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the timestamp returned is the value of HConstants.LATEST_TIMESTAMP&lt;/p&gt;

&lt;p&gt;Counting the number of rows with the returned value returns the correct result:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ hbase/bin/hbase org.apache.hadoop.hbase.Timestamp count 9223372036854775807
number of rows: 1048576
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;of course that is not really the timestamp of the most recent row inserted. So shut down hbase and restart it (and allow it to settle down wrt region balancing), this flushes the caches and may cause compactions on the restart.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ hbase/bin/stop-hbase.sh 
stopping master.......................
$ hbase/bin/start-hbase.sh 
starting master, logging to /bfd/jim/hbase/logs/hbase-jim-master-xx.foo.com.out
xx.foo.com: starting regionserver, logging to /bfd/jim/hbase/logs/hbase-jim-regionserver-xx.foo.com.out
yy.foo.com: starting regionserver, logging to /bfd/jim/hbase/logs/hbase-jim-regionserver-yy.foo.com.out
zz.foo.com: starting regionserver, logging to /bfd/jim/hbase/logs/hbase-jim-regionserver-zz.foo.com.out
vv.foo.com: starting regionserver, logging to /bfd/jim/hbase/logs/hbase-jim-regionserver-vv.foo.com.out
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running the program to get the timestamp of the latest cell inserted we get:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ hbase/bin/hbase org.apache.hadoop.hbase.Timestamp time
latest timestamp: 1211839273332
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;a much more reasonable value. Even counting the number of rows with this timestamp works properly:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ hbase/bin/hbase org.apache.hadoop.hbase.Timestamp count 1211839273332
number of rows: 1048576
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If we run the PerformanceEvaluation test again (without shutting down or re-initializing the table), we get the wrong number of rows for the original timestamp:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ hbase/bin/hbase org.apache.hadoop.hbase.Timestamp count 1211839273332
number of rows: 224384
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and the value of the latest timestamp is:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ hbase/bin/hbase org.apache.hadoop.hbase.Timestamp time
latest timestamp: 9223372036854775807
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="12599926" author="jimk" created="Mon, 26 May 2008 22:53:42 +0000"  >&lt;p&gt;Clearly there are (at least) two problems here:&lt;/p&gt;

&lt;p&gt;1. A client should never receive a Cell whose timestamp == HConstants.LATEST_TIMESTAMP&lt;br/&gt;
2. Scanning with a specified timestamp appears to be broken.&lt;/p&gt;</comment>
                            <comment id="12599928" author="jimk" created="Mon, 26 May 2008 23:01:26 +0000"  >&lt;p&gt;I started looking at what would change if I changed the API of InternalScanner.next to be&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] next(SortedMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], Cell&amp;gt; results)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and found that changes to (at a minium) source files: HAbstractScanner, HRegion, HRegionServer, HStore, HStoreScanner, Memcache, StoreFileScanner, MetaUtils, HMerge and to tests: TestGet2, TestHMemcache, TestHRegion, TestScanner, TestSplit, HBaseTestCase. If these files are changed, changes could cascade outward to modules that depend on them or other modules they depend on.&lt;/p&gt;

&lt;p&gt;This seemed far to large a scope, so instead I tried this more minimal patch. While it got the latest timestamp right, it still got the wrong row count.&lt;/p&gt;</comment>
                            <comment id="12599931" author="jimk" created="Mon, 26 May 2008 23:11:40 +0000"  >&lt;p&gt;Given the complicated nature of this bug, I would agree with Stack that we not plan to fix it in 0.1.x&lt;/p&gt;</comment>
                            <comment id="12600854" author="stack" created="Thu, 29 May 2008 17:48:50 +0000"  >&lt;p&gt;Would it be possible changing memcache scanner so it didn&apos;t set timestamp to LATEST but instead to the actual cell value?  Would this be a simple fix for at least the case where users ask explicitly for a single cell?&lt;/p&gt;</comment>
                            <comment id="12605814" author="jimk" created="Wed, 18 Jun 2008 02:38:40 +0000"  >&lt;p&gt;I finally found the problem (I think)... not only does the supplied timestamp apply to rows within the regions being scanned, it also applies to the regions being found in META. Thus if you specify a timestamp that is older than some of the regions in the META, you will only scan those regions and not all the regions in the table.This is really nasty, because you want to use HConstants.TIMESTAMP_LATEST to scan the META, and then use the user supplied timestamp for filtering results from scanners over those regions. Yuk!&lt;/p&gt;</comment>
                            <comment id="12606012" author="stack" created="Wed, 18 Jun 2008 17:11:31 +0000"  >&lt;p&gt;How does the requested timestamp effect the lookup of region in .META.?  I&apos;d think there should be no timestamping in the mix when you are trying to figure which region holds wanted row?&lt;/p&gt;</comment>
                            <comment id="12606070" author="jimk" created="Wed, 18 Jun 2008 20:08:52 +0000"  >&lt;p&gt;What is happening:&lt;/p&gt;

&lt;p&gt;The first region scans just fine (latest, timestamp &amp;gt; last insert, timestamp = previous version). There are 98016 rows in the first region and that is the number reported when timestamp = previous version.&lt;/p&gt;

&lt;p&gt;Other regions scan ok when timestamp = latest or timestamp &amp;gt; last insert, but return no results when timestamp = previous version.&lt;/p&gt;

&lt;p&gt;So the question is why does the first region scan just fine in all cases and all the other regions return no results when timestamp = previous version?&lt;/p&gt;
</comment>
                            <comment id="12606076" author="stack" created="Wed, 18 Jun 2008 20:25:10 +0000"  >&lt;p&gt;Hey, I thought you&apos;d figured it out (smile)?&lt;/p&gt;

&lt;p&gt;Do the non-first regions have cells with entries that are timestamp &amp;lt;= previous?&lt;/p&gt;</comment>
                            <comment id="12606080" author="jimk" created="Wed, 18 Jun 2008 20:31:41 +0000"  >&lt;p&gt;&amp;gt; stack - 18/Jun/08 01:25 PM&lt;/p&gt;

&lt;p&gt;&amp;gt; Do the non-first regions have cells with entries that are timestamp &amp;lt;= previous?&lt;/p&gt;

&lt;p&gt;No. The way I calculate previous is after the first run of PerformanceEvaluation. I scan the whole table (using latest) and take the maximum timestamp found as previous.&lt;/p&gt;

&lt;p&gt;Then I wait for a bit before the second run of PerformanceEvaluation (just to be sure all the timestamps will be &amp;gt; previous) and that&apos;s when I run the test.&lt;/p&gt;

&lt;p&gt;Am still trying to figure why the first region works fine but none of the others do.&lt;/p&gt;</comment>
                            <comment id="12606082" author="jimk" created="Wed, 18 Jun 2008 20:35:24 +0000"  >&lt;p&gt;&amp;gt; Do the non-first regions have cells with entries that are timestamp &amp;lt;= previous?&lt;/p&gt;

&lt;p&gt;er, rather yes they do. As the value I use for previous is the largest over the whole table, all the regions have entries with timestamp &amp;lt;= previous.&lt;/p&gt;</comment>
                            <comment id="12606083" author="stack" created="Wed, 18 Jun 2008 20:43:29 +0000"  >&lt;p&gt;The second scan actually visits the non-first regions?  (DEBUG emissions from client will log region transition?)&lt;/p&gt;</comment>
                            <comment id="12606088" author="jimk" created="Wed, 18 Jun 2008 20:48:49 +0000"  >&lt;p&gt;Yes, all the regions are visited. I instrumented ScannerCallable to show me.&lt;/p&gt;

&lt;p&gt;timestamp = previous scan output:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
TestTable,,99999999999999
.META.,TestTable,,99999999999999,99999999999999
instantiateServer
openScanner: regionName=TestTable,,1213741686408, columns[info:], row=, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213741622230
instantiateServer
TestTable,0000098016,99999999999999
openScanner: regionName=TestTable,0000098016,1213747903044, columns[info:], row=0000098016, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
instantiateServer
TestTable,0000167456,99999999999999
openScanner: regionName=TestTable,0000167456,1213747903045, columns[info:], row=0000167456, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
instantiateServer
TestTable,0000245120,99999999999999
openScanner: regionName=TestTable,0000245120,1213747962641, columns[info:], row=0000245120, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
instantiateServer
TestTable,0000316544,99999999999999
openScanner: regionName=TestTable,0000316544,1213747962642, columns[info:], row=0000316544, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
instantiateServer
TestTable,0000400128,99999999999999
openScanner: regionName=TestTable,0000400128,1213748040922, columns[info:], row=0000400128, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
instantiateServer
TestTable,0000471056,99999999999999
openScanner: regionName=TestTable,0000471056,1213748040923, columns[info:], row=0000471056, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
instantiateServer
TestTable,0000553152,99999999999999
openScanner: regionName=TestTable,0000553152,1213748105169, columns[info:], row=0000553152, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
instantiateServer
TestTable,0000623792,99999999999999
openScanner: regionName=TestTable,0000623792,1213748105169, columns[info:], row=0000623792, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
instantiateServer
TestTable,0000705024,99999999999999
openScanner: regionName=TestTable,0000705024,1213748171658, columns[info:], row=0000705024, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
instantiateServer
TestTable,0000776528,99999999999999
openScanner: regionName=TestTable,0000776528,1213748171659, columns[info:], row=0000776528, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
instantiateServer
TestTable,0000860384,99999999999999
openScanner: regionName=TestTable,0000860384,1213748251702, columns[info:], row=0000860384, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
instantiateServer
TestTable,0000923760,99999999999999
openScanner: regionName=TestTable,0000923760,1213748251704, columns[info:], row=0000923760, timestamp=1213742072014, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=0
number of rows: 98016
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;timestamp &amp;gt; last insert scan:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
TestTable,,99999999999999
.META.,TestTable,,99999999999999,99999999999999
instantiateServer
openScanner: regionName=TestTable,,1213741686408, columns[info:], row=, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213747836722
instantiateServer
TestTable,0000098016,99999999999999
openScanner: regionName=TestTable,0000098016,1213747903044, columns[info:], row=0000098016, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213747864149
instantiateServer
TestTable,0000167456,99999999999999
openScanner: regionName=TestTable,0000167456,1213747903045, columns[info:], row=0000167456, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213747895166
instantiateServer
TestTable,0000245120,99999999999999
openScanner: regionName=TestTable,0000245120,1213747962641, columns[info:], row=0000245120, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213747928813
instantiateServer
TestTable,0000316544,99999999999999
openScanner: regionName=TestTable,0000316544,1213747962642, columns[info:], row=0000316544, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213747976497
instantiateServer
TestTable,0000400128,99999999999999
openScanner: regionName=TestTable,0000400128,1213748040922, columns[info:], row=0000400128, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213748004632
instantiateServer
TestTable,0000471056,99999999999999
openScanner: regionName=TestTable,0000471056,1213748040923, columns[info:], row=0000471056, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213748039792
instantiateServer
TestTable,0000553152,99999999999999
openScanner: regionName=TestTable,0000553152,1213748105169, columns[info:], row=0000553152, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213748070983
instantiateServer
TestTable,0000623792,99999999999999
openScanner: regionName=TestTable,0000623792,1213748105169, columns[info:], row=0000623792, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213748103050
instantiateServer
TestTable,0000705024,99999999999999
openScanner: regionName=TestTable,0000705024,1213748171658, columns[info:], row=0000705024, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213748137599
instantiateServer
TestTable,0000776528,99999999999999
openScanner: regionName=TestTable,0000776528,1213748171659, columns[info:], row=0000776528, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213748194858
instantiateServer
TestTable,0000860384,99999999999999
openScanner: regionName=TestTable,0000860384,1213748251702, columns[info:], row=0000860384, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213748220745
instantiateServer
TestTable,0000923760,99999999999999
openScanner: regionName=TestTable,0000923760,1213748251704, columns[info:], row=0000923760, timestamp=1213748311328, filter &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
closing scanner. largest timestamp=1213748311328
number of rows: 1048576
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12606111" author="stack" created="Wed, 18 Jun 2008 22:08:17 +0000"  >&lt;p&gt;I have no suggestion under than what you are probably already doing, adding dumbass logging of everything then trying to sort through the mess of emissions.&lt;/p&gt;

&lt;p&gt;FYI, enabling DEBUG on client shows the region transitions.  Shouldn&apos;t have to add instrumentation.&lt;/p&gt;</comment>
                            <comment id="12606138" author="jimk" created="Wed, 18 Jun 2008 23:20:11 +0000"  >&lt;p&gt;Thought &lt;a href=&quot;https://issues.apache.org/jira/browse/HADOOP-3472&quot; title=&quot;MapFile.Reader getClosest() function returns incorrect results when before is true&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HADOOP-3472&quot;&gt;&lt;del&gt;HADOOP-3472&lt;/del&gt;&lt;/a&gt; might be the cause so build a 0.17 latest Hadoop. No difference. Must be something we&apos;re doing.&lt;/p&gt;</comment>
                            <comment id="12606616" author="jimk" created="Fri, 20 Jun 2008 01:58:45 +0000"  >&lt;p&gt;HAbstractScanner&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;remove HAbstactScanner.iterator() - iterator is not a method on InternalScanner&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;HRegion&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;make getScanner more efficient by iterating only once to find the stores we need to scan&lt;/li&gt;
	&lt;li&gt;only pass columns relevant to a store to a HStoreScanner&lt;/li&gt;
	&lt;li&gt;remove HScanner.iterator() - iterator is not a method on InternalScanner&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;MemcacheScanner&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;never return HConstants.LATEST_TIMESTAMP as the timestamp value for a row. Instead use the largest timestamp from the cells being returned. This allows a scanner to determine a timestamp that can be used to fetch the same data again should new versions be inserted later.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;StoreFileScanner&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;getNextViableRow would find a row that matched the row key, but did not consider the requested timestamp. Now if the row it finds has a timestamp greater than the one desired it advances to determine if a row with a timestamp less than or equal to the requested one exists since timestamps are sorted descending.&lt;/li&gt;
	&lt;li&gt;removed an unnecessary else&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Timestamp&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The program that was used to find the problem and test the fix.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;TestScanMultipleVersions&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Test program that fails on current trunk but passes when this patch is applied.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;NOTE: TestHRegionServerExit failed on both Windows and Linux, but TestRegionRebalancing passed on Linux and failed on Windows.&lt;/p&gt;

&lt;p&gt;All other tests passed, and when I ran TestScanMultipleVersions against unpatched trunk, it failed.&lt;/p&gt;

&lt;p&gt;Please review.&lt;/p&gt;</comment>
                            <comment id="12606617" author="jimk" created="Fri, 20 Jun 2008 01:59:14 +0000"  >&lt;p&gt;Please review.&lt;/p&gt;</comment>
                            <comment id="12606826" author="stack" created="Fri, 20 Jun 2008 17:00:02 +0000"  >&lt;p&gt;Add pointer to this issue as class comment on TestScanMultipleVersions?&lt;/p&gt;

&lt;p&gt;The setup of your test creating root and meta duplicates code; this code is duplicated alot in tests if you search.  Would suggest making a method either in base test class or in MetaUtils (Otherwise, nice test).&lt;/p&gt;

&lt;p&gt;Timestamp class needs class comment describing what its for.  But is this class needed in TRUNK now we have a working shell?  You can pass timestamps to scanner and shell does count for you: &quot;scan &apos;TABLENAME&apos;, &lt;/p&gt;
{TIMESTAMP =&amp;gt; xxxxxx}
&lt;p&gt;&quot;&lt;/p&gt;

&lt;p&gt;Regards the Memcache edits, where you ensure we not return LATEST_TIMESTAMP, what if we returned an empty ts so there was no danger of ts being misread?    Force examination of Cell payload if timestamp is what is wanted?&lt;/p&gt;

&lt;p&gt;Otherwise patch looks good. +1 after above changes.&lt;/p&gt;

&lt;p&gt;Do you think this issue came about because refactorings?  Do we have this issue in branch?&lt;/p&gt;




</comment>
                            <comment id="12606889" author="jimk" created="Fri, 20 Jun 2008 20:48:51 +0000"  >&lt;p&gt;&amp;gt; stack - 20/Jun/08 10:00 AM&lt;br/&gt;
&amp;gt; Add pointer to this issue as class comment on TestScanMultipleVersions?&lt;/p&gt;

&lt;p&gt;Will do.&lt;/p&gt;

&lt;p&gt;&amp;gt; The setup of your test creating root and meta duplicates code; this code is duplicated alot in tests if you search. Would suggest&lt;br/&gt;
&amp;gt; making a method either in base test class or in MetaUtils (Otherwise, nice test).&lt;/p&gt;

&lt;p&gt;Will do for trunk, but not branch.&lt;/p&gt;

&lt;p&gt;&amp;gt; Timestamp class needs class comment describing what its for. But is this class needed in TRUNK now we have a working&lt;br/&gt;
&amp;gt; shell? You can pass timestamps to scanner and shell does count for you: &quot;scan &apos;TABLENAME&apos;, &lt;/p&gt;
{TIMESTAMP =&amp;gt; xxxxxx}
&lt;p&gt;&quot;&lt;/p&gt;

&lt;p&gt;No, it is not needed. I will remove Timestamp&lt;/p&gt;

&lt;p&gt;&amp;gt; Regards the Memcache edits, where you ensure we not return LATEST_TIMESTAMP, what if we returned an empty ts so&lt;br/&gt;
&amp;gt; there was no danger of ts being misread? Force examination of Cell payload if timestamp is what is wanted?&lt;/p&gt;

&lt;p&gt;I did try this, but unfortunately HStoreScanner and HRegion.HScanner need some timestamp to determine what they are going to include in the results. Tried to work around it, but scanners are so complicated now, I decided to take a more pragmatic approach and just make them work, rather than spend a couple more weeks trying to figure out how to make the upstream scanners less timestamp dependent. &lt;/p&gt;

&lt;p&gt;&amp;gt; Do you think this issue came about because refactorings? Do we have this issue in branch?&lt;/p&gt;

&lt;p&gt;As we now know. This was not caused by refactorings. It is present in 0.1 branch so has been an issue for some time.&lt;/p&gt;
</comment>
                            <comment id="12606966" author="jimk" created="Sat, 21 Jun 2008 02:56:14 +0000"  >&lt;p&gt;Committed to branch and trunk.&lt;/p&gt;</comment>
                            <comment id="12608104" author="jimk" created="Wed, 25 Jun 2008 16:34:19 +0000"  >&lt;p&gt;It turns out that HRegionServer.next (in both trunk and 0.1 branch) will return an empty result instead of null if there are no results.&lt;/p&gt;</comment>
                            <comment id="12608273" author="jimk" created="Thu, 26 Jun 2008 04:54:27 +0000"  >&lt;p&gt;Fixed branch and trunk.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12398195">HBASE-681</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12384339" name="613.patch" size="20247" author="jimk" created="Fri, 20 Jun 2008 01:58:45 +0000"/>
                            <attachment id="12382482" name="TestTimestampScanning.java" size="2967" author="jimk" created="Wed, 21 May 2008 15:23:09 +0000"/>
                            <attachment id="12382806" name="Timestamp.patch" size="3908" author="jimk" created="Mon, 26 May 2008 22:04:06 +0000"/>
                            <attachment id="12382807" name="nogood.patch" size="7992" author="jimk" created="Mon, 26 May 2008 23:01:26 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 21 May 2008 15:23:09 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>25292</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 26 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0h8dr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98620</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>