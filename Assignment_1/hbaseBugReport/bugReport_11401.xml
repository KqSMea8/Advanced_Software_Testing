<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:22:51 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-11401/HBASE-11401.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-11401] Late-binding sequenceid presumes a particular KeyValue mvcc format hampering experiment</title>
                <link>https://issues.apache.org/jira/browse/HBASE-11401</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;After &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8763&quot; title=&quot;Combine MVCC and SeqId&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8763&quot;&gt;&lt;del&gt;HBASE-8763&lt;/del&gt;&lt;/a&gt;, we have combined KV mvcc and HLog seqNo. This is implemented in a tricky way now.&lt;br/&gt;
In HRegion on write path, we first write to memstore and then write to HLog finally sync log. So at the time of write to memstore we dont know the WAL seqNo.  To overcome this, we hold the ref to the KV objects just added to memstore and pass those also to write to wal call. Once the seqNo is obtained, we will reset the mvcc is those KVs with this seqNo.  (While write to memstore we wrote kvs with a very high temp value for mvcc so that concurrent readers wont see them)&lt;br/&gt;
This model works well with the DefaultMemstore.  During the write there wont be any concurrent call to snapshot(). &lt;br/&gt;
But now we have memstore as a pluggable interface. The above model of late binding assumes that the memstore internal datastructure continue to refer to same java objects. This might not be true always.  Like in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10713&quot; title=&quot;A MemStore implementation with in memory flushes to CellBlocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10713&quot;&gt;&lt;del&gt;HBASE-10713&lt;/del&gt;&lt;/a&gt;, in btw the kvs can be converted into a CellBlock. If we discontinue to refer to same KV java objects, we will fail in getting the seqNo assigned as kv mvcc.&lt;/p&gt;

&lt;p&gt;If we were doing write and sync to wal and then write to memstore, this would have get solved. But this model we changed (in 94 I believe) for better perf. Under HRegion level lock, we write to memstore and then to wal. Finally out of lock we do the the log sync.  So we can not change it now&lt;/p&gt;

&lt;p&gt;I tried changing the order of ops within the lock (ie. write to log and then to memstore) so that we can get the seqNo when write to memstore. But because of the new HLog write model, we are not guarenteed to get the write to done immediately. &lt;/p&gt;

&lt;p&gt;One possible way can be add a new API in Log level, to get a next seqNo alone. Call this first and then using which write to memstore and then to wal (using this seqNo).  Just a random thought. Not tried.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12723060">HBASE-11401</key>
            <summary>Late-binding sequenceid presumes a particular KeyValue mvcc format hampering experiment</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="anoop.hbase">Anoop Sam John</reporter>
                        <labels>
                    </labels>
                <created>Mon, 23 Jun 2014 04:16:22 +0000</created>
                <updated>Sat, 21 Feb 2015 23:41:18 +0000</updated>
                            <resolved>Wed, 1 Oct 2014 03:22:49 +0000</resolved>
                                    <version>0.99.0</version>
                                    <fixVersion>0.99.1</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="14041377" author="stack" created="Mon, 23 Jun 2014 21:52:07 +0000"  >&lt;p&gt;I wonder if we could do away w/ the row lock.  It has been speculated before.  Could we do isolation on the back of MVCC alone?&lt;/p&gt;

&lt;p&gt;Let me do a perf run of what it would be like if the add-to-memstore came after the sync wait.  My guess is overall throughput in a PE-type setup would not change much but if a hot row, could make a big difference.&lt;/p&gt;</comment>
                            <comment id="14041577" author="enis" created="Tue, 24 Jun 2014 01:34:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;If we were doing write and sync to wal and then write to memstore, this would have get solved&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My initial poc patch at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8763&quot; title=&quot;Combine MVCC and SeqId&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8763&quot;&gt;&lt;del&gt;HBASE-8763&lt;/del&gt;&lt;/a&gt; actually reordered the write path so that it was appendNoSync + write to memstore + sync(). But this was before the late binding from the disruptor which actually does the ordering and seqNum assignment. So it should be appendNoSync() + sync() + memstore order I guess. &lt;/p&gt;</comment>
                            <comment id="14041659" author="anoop.hbase" created="Tue, 24 Jun 2014 03:56:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;reordered the write path so that it was appendNoSync + write to memstore + sync(). &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes I also tried the same last week but failed because of the new disruptor WAL sync.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Let me do a perf run of what it would be like if the add-to-memstore came after the sync wait.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Thanks. Waiting for your result.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;My guess is overall throughput in a PE-type setup would not change much but if a hot row, could make a big difference.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ya I also think so. Let us see..&lt;/p&gt;</comment>
                            <comment id="14041660" author="anoop.hbase" created="Tue, 24 Jun 2014 04:01:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;So it should be appendNoSync() + sync() + memstore order &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes.  If we can make this (with out a perf impact) we can get rid of rollback in Memstore.&lt;/p&gt;</comment>
                            <comment id="14042520" author="jeffreyz" created="Tue, 24 Jun 2014 18:54:29 +0000"  >&lt;p&gt;The order below may work:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
row lock acquire + appendNoSync() + waitForSeqAssigned + memstore.add + row lock release + sync()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14045055" author="stack" created="Thu, 26 Jun 2014 19:31:28 +0000"  >&lt;p&gt;Doing &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt; suggestion, there is little loss changing the order:&lt;/p&gt;

&lt;p&gt;Without patch:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
threads=3, iterations=1000000, syncInterval=0 took 1276.339s 2350.473ops/s
threads=10, iterations=1000000, syncInterval=0 took 1317.274s 7591.435ops/s
threads=25, iterations=1000000, syncInterval=0 took 1422.012s 17580.725ops/s
threads=100, iterations=1000000, syncInterval=0 took 1525.249s 65563.063ops/s
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With patch:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
threads=3, iterations=1000000, syncInterval=0 took 1231.335s 2436.380ops/s
threads=10, iterations=1000000, syncInterval=0 took 1306.012s 7656.897ops/s
threads=25, iterations=1000000, syncInterval=0 took 1421.756s 17583.889ops/s
threads=100, iterations=1000000, syncInterval=0 took 1577.127s 63406.438ops/s
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As concurrency goes up, the patch slows us slightly.&lt;/p&gt;

&lt;p&gt;Unfortunately, because we add the memstore before we sync, we cannot remove the rollback.  Let me get some numbers on sync&apos;ing before adding to memstore.&lt;/p&gt;</comment>
                            <comment id="14045061" author="stack" created="Thu, 26 Jun 2014 19:35:53 +0000"  >&lt;p&gt;Here is what I ran:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in 3 10 25 100; &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; j in 1; &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; perf stat ./bin/hbase --config /home/stack/conf_hbase org.apache.hadoop.hbase.regionserver.wal.HLogPerformanceEvaluation -threads $i   -iterations 1000000 -keySize 50 -valueSize 100  &amp;amp;&amp;gt; &lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/nopatch2${i}.${j}.txt&quot;&lt;/span&gt;; done; done
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14045175" author="jeffreyz" created="Thu, 26 Jun 2014 21:05:51 +0000"  >&lt;p&gt;Very good! &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; because we add the memstore before we sync, we cannot remove the rollback&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;After appendNoSync call, we have to move forward and no rollback anymore. We need abort RS if there is any error after appendNoSync so far I don&apos;t see where we could throw errors besides syncOrDefer which we should abort RS even today if syncOrDefer throws IOException.&lt;/p&gt;

&lt;p&gt;There is an issue on coprocessorHost.postBatchMutate. We should not allow it to throw exception because we have to move forward during post batch call as WALEdits has already been made into the WAL.&lt;/p&gt;</comment>
                            <comment id="14045195" author="stack" created="Thu, 26 Jun 2014 21:17:38 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt; That makes sense.  Good point.  Clients can&apos;t see memstore content because we have not rolled forward the sequence id yet.  Will let this sync inside the row lock perf test finish then will put together a patch to remove the rollback too.....  and look at the cp throws.&lt;/p&gt;

&lt;p&gt;While I have your attention Jeffrey, what you think of this in RegionScannerImpl:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt;(scannerReadPoints) {
        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.readPt = getReadpoint(isolationLevel);
        scannerReadPoints.put(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.readPt);
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I saw a bunch of it in random read out of memory test.  The getReadPoint is ugly iterating over all current scanners.  I wonder if we need to hold here at all.&lt;/p&gt;
</comment>
                            <comment id="14045286" author="jeffreyz" created="Thu, 26 Jun 2014 22:42:20 +0000"  >&lt;blockquote&gt;
&lt;p&gt;      synchronized(scannerReadPoints) &lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {
        this.readPt = getReadpoint(isolationLevel);
        scannerReadPoints.put(this, this.readPt);
      }&lt;/span&gt; &lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Do you mean &quot;getSmallestReadPoint()&quot; &amp;amp; scannerReadPoints? So far it seems we can&apos;t remove them totally but we may able to just use a simple linked list because our memstore read point will always monotonically increase so the smallest read point will be the head of the linked list. &lt;/p&gt;</comment>
                            <comment id="14045316" author="stack" created="Thu, 26 Jun 2014 23:20:02 +0000"  >&lt;p&gt;Testing doing sync before adding to memstore but all under row lock shows no degradation.&lt;/p&gt;

&lt;p&gt;I see pile ups on &apos;synchronized(scannerReadPoints)&apos;  A linked list is better than what I was thinking, a set sorted by id &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14045336" author="jeffreyz" created="Thu, 26 Jun 2014 23:44:43 +0000"  >&lt;p&gt;I think that the sync you mention is to only get sequence number not the WAL syncOrDefer which may take a while. Thanks.&lt;/p&gt;</comment>
                            <comment id="14045347" author="stack" created="Thu, 26 Jun 2014 23:54:55 +0000"  >&lt;p&gt;Looking at removing rollback of memstore, once I start tugging, a bunch of stuff is starting to come out.  Am removing notion of rollback from Store too.  Also, looking at mvcc, it can be made simpler if we are not upping memstore till after we&apos;ve obtained a seqid.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We need abort RS if there is any error after appendNoSync so far I don&apos;t see where we could throw errors besides syncOrDefer which we should abort RS even today if syncOrDefer throws IOException.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt; When syncOrDefer fails currently, we try to roll the log.  We don&apos;t abort.  At least not currently.&lt;/p&gt;</comment>
                            <comment id="14045359" author="stack" created="Fri, 27 Jun 2014 00:11:48 +0000"  >&lt;p&gt;Hmm.  Have to throw out my numbers.  The HLogPE tool is not exercising the HRegion#append code path.  Let me fix and redo my tests.&lt;/p&gt;</comment>
                            <comment id="14049126" author="stack" created="Tue, 1 Jul 2014 18:02:35 +0000"  >&lt;p&gt;Changing order makes things way slower:&lt;/p&gt;

&lt;p&gt;No patch going via region api instead of calling appendnosync on HLog directly:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
nopatch3.3.1.txt:2014-07-01 10:26:26,700 INFO  [main] wal.HLogPerformanceEvaluation: Summary: threads=3, iterations=1000000, syncInterval=0 took 747.846s 4011.521ops/s
nopatch3.10.1.txt:2014-07-01 10:30:55,546 INFO  [main] wal.HLogPerformanceEvaluation: Summary: threads=10, iterations=1000000, syncInterval=0 took 260.533s 38382.855ops/s
nopatch3.25.1.txt:2014-07-01 10:37:23,266 INFO  [main] wal.HLogPerformanceEvaluation: Summary: threads=25, iterations=1000000, syncInterval=0 took 379.455s 65883.969ops/s
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With patch applied&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
wpatch3.3.1.txt:2014-07-01 07:08:52,169 INFO  [main] wal.HLogPerformanceEvaluation: Summary: threads=3, iterations=1000000, syncInterval=0 took 1283.630s 2337.122ops/s
wpatch3.10.1.txt:2014-07-01 07:36:36,312 INFO  [main] wal.HLogPerformanceEvaluation: Summary: threads=10, iterations=1000000, syncInterval=0 took 1660.901s 6020.829ops/s
wpatch3.25.1.txt:2014-07-01 09:06:33,298 INFO  [main] wal.HLogPerformanceEvaluation: Summary: threads=25, iterations=1000000, syncInterval=0 took 5393.763s 4634.983ops/s
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14049132" author="stack" created="Tue, 1 Jul 2014 18:04:53 +0000"  >&lt;p&gt;Here is my patch.  Changes order applying to memory after appending. Waits on seqid to be set into HLogKey before adding to memory.  Also adds a flag to HLogPE which designates using hregion api to append rather than call HLog append and sync directly.&lt;/p&gt;</comment>
                            <comment id="14049185" author="jeffreyz" created="Tue, 1 Jul 2014 18:54:28 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; I checked your patch which seems do right thing. I guess the time is spent in wait for SeqId part. Not sure how easy for you to try two ring buffer strategy to decrease seqId assignment wait time.  &lt;/p&gt;

&lt;p&gt;If we can&apos;t re-order the AppendNoSync and write to memstore, would it be possible &lt;/p&gt;

&lt;p&gt;1) for plug-able memstore to only deal with KVs within memstore read point&lt;br/&gt;
2) add a listener inside KV updateMVCC call in order to give plugable Memstore a chance to change related MVCC as well.&lt;/p&gt;</comment>
                            <comment id="14049262" author="stack" created="Tue, 1 Jul 2014 20:11:03 +0000"  >&lt;p&gt;Here are flame graphs running ten threads with and without patch.  If you dig you can see 7% CPU or so doing get of sequence number.  We seem to be doing more waitFor inside in disruptor too when patch is in place.  On other hand, I don&apos;t see add-to-memstore in the patched version (There is no mention in the svg of DefaultMemStore nor in the collected traces &amp;#8211; it is &apos;fast&apos; in patched version?)&lt;/p&gt;</comment>
                            <comment id="14049269" author="stack" created="Tue, 1 Jul 2014 20:21:59 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt; Seems like its the wait on seqid and less disruptor batching (flame graphs raise a couple of new questions though....).&lt;/p&gt;

&lt;p&gt;Was thinking like yourself whether pluggable memstore could work around Cells that have not yet gotten a sequenceid (Compressing memstore or encoding as a cellblock I&apos;d suppose you&apos;d compress a snapshot; if a Cell does not yet have a sequenceid, wait on the Cell sequenceid?)&lt;/p&gt;

&lt;p&gt;Otherwise, we&apos;ll be back here to do some gymnastics (double ringbuffer, etc.).&lt;/p&gt;</comment>
                            <comment id="14049283" author="stack" created="Tue, 1 Jul 2014 20:35:09 +0000"  >&lt;p&gt;Absence of memstore adds in the patched version must mean we are not applying edits to memstore in the patch.  Would need to dig in when we come back here on why not.&lt;/p&gt;</comment>
                            <comment id="14127029" author="anoop.hbase" created="Tue, 9 Sep 2014 14:22:40 +0000"  >&lt;p&gt;I just came back to this last week.  Trying to work out some other options so that &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10713&quot; title=&quot;A MemStore implementation with in memory flushes to CellBlocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10713&quot;&gt;&lt;del&gt;HBASE-10713&lt;/del&gt;&lt;/a&gt; I can continue. Will update back in 2 days. JFYI &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14154270" author="anoop.hbase" created="Wed, 1 Oct 2014 03:22:24 +0000"  >&lt;p&gt;I tried different ways to solve this. But only at this point we are sure abt the seqNo being assigned to Cells&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// ------------------------------------------------------------------
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// STEP 8. Advance mvcc. This will make &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; put visible to scanners and getters.
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// ------------------------------------------------------------------
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (w != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        mvcc.completeMemstoreInsertWithSeqNum(w, walKey);
        w = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What I tried to make sure to add the Cell only after the seq number is assigned. But the above makes it not possible. Also just making the seqNo from HLog first and then doing the insert and mvcc complete steps seems affecting the performance.&lt;br/&gt;
Because of all these I would like to close this issue as &apos;Won&apos;t fix&apos; as of now.&lt;/p&gt;

&lt;p&gt;Over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10713&quot; title=&quot;A MemStore implementation with in memory flushes to CellBlocks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10713&quot;&gt;&lt;del&gt;HBASE-10713&lt;/del&gt;&lt;/a&gt;, I can solve the problem with a simple way. I do the cell block flush (in - memory) in a thread and there I can wait for the previous mvcc transactions to complete. This might delay the flush op a bit as it might wait for Cells which are not part of this flush. But that is okey IMO.&lt;/p&gt;</comment>
                            <comment id="14331485" author="enis" created="Sat, 21 Feb 2015 23:41:18 +0000"  >&lt;p&gt;Closing this issue after 0.99.1 release.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12699803">HBASE-10713</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12653430" name="11401.changing.order.txt" size="18306" author="stack" created="Tue, 1 Jul 2014 18:04:53 +0000"/>
                            <attachment id="12652666" name="memstore.txt" size="4416" author="stack" created="Thu, 26 Jun 2014 19:32:22 +0000"/>
                            <attachment id="12653452" name="nopatch.traces.svg" size="364046" author="stack" created="Tue, 1 Jul 2014 20:11:03 +0000"/>
                            <attachment id="12653453" name="wpatch.traces.svg" size="279263" author="stack" created="Tue, 1 Jul 2014 20:11:03 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 23 Jun 2014 21:52:07 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>401247</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 42 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1x2f3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>401325</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>