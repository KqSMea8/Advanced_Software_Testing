<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:08:44 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3260/HBASE-3260.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3260] Coprocessors: Lifecycle management</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3260</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Considering extending CPs to the master, we have no equivalent to pre/postOpen and pre/postClose as on the regionserver. We also should consider how to resolve dependencies and initialization ordering if loading coprocessors that depend on others. &lt;/p&gt;

&lt;p&gt;OSGi (&lt;a href=&quot;http://en.wikipedia.org/wiki/OSGi&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://en.wikipedia.org/wiki/OSGi&lt;/a&gt;) has a lifecycle API and is familiar to many Java programmers, so we propose to borrow its terminology and state machine.&lt;/p&gt;

&lt;p&gt;A lifecycle layer manages coprocessors as they are dynamically installed, started, stopped, updated and uninstalled. Coprocessors rely on the framework for dependency resolution and class loading. In turn, the framework calls up to lifecycle management methods in the coprocessor as needed.&lt;/p&gt;

&lt;p&gt;A coprocessor transitions between the below states over its lifetime:&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;State&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;UNINSTALLED&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;The coprocessor implementation is not installed. This is the default implicit state.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;INSTALLED&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;The coprocessor implementation has been successfully installed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;STARTING&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;A coprocessor instance is being started.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;ACTIVE&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;The coprocessor instance has been successfully activated and is running.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;STOPPING&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;A coprocessor instance is being stopped.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;See attached state diagram. Transitions to STOPPING will only happen as the region is being closed. If a coprocessor throws an unhandled exception, this will cause the RegionServer to close the region, stopping all coprocessor instances on it. &lt;/p&gt;

&lt;p&gt;Transitions from INSTALLED-&amp;gt;STARTING and ACTIVE-&amp;gt;STOPPING would go through upcall methods into the coprocessor via the CoprocessorLifecycle interface:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; CoprocessorLifecycle {
  void start(CoprocessorEnvironment env) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException; 
  void stop(CoprocessorEnvironment env) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12480609">HBASE-3260</key>
            <summary>Coprocessors: Lifecycle management</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12441373">HBASE-2000</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ghelmling">Gary Helmling</assignee>
                                    <reporter username="apurtell">Andrew Purtell</reporter>
                        <labels>
                    </labels>
                <created>Mon, 22 Nov 2010 20:53:43 +0000</created>
                <updated>Fri, 20 Nov 2015 12:40:47 +0000</updated>
                            <resolved>Fri, 17 Dec 2010 20:58:10 +0000</resolved>
                                                    <fixVersion>0.92.0</fixVersion>
                                    <component>Coprocessors</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12935031" author="stack" created="Tue, 23 Nov 2010 20:27:13 +0000"  >&lt;p&gt;I&apos;m good with borrowing the nomenclature.  Can we borrow libraries that will manage the lifecycle for us?  Would it make sense implementing CPs atop some lifecycle supporting framework?  Would it make sense using, say, any of the DI containers wiring up CPs?&lt;/p&gt;

&lt;p&gt;The regionserver and master have similar need of a lifecycle as has been discussed elsewhere.  Would be grand if same lifecycle nomenclature was used throughout &amp;#8211; for hbase daemons and CP.&lt;/p&gt;</comment>
                            <comment id="12935096" author="ghelmling" created="Tue, 23 Nov 2010 22:44:55 +0000"  >&lt;p&gt;I agree we should standardize the terminology between here and server lifecycle management.&lt;/p&gt;

&lt;p&gt;I remember in the RS and master lifecycle discussion seeing a mention of the Google guava Service interface:&lt;br/&gt;
&lt;a href=&quot;http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/base/Service.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/base/Service.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It uses similar start() and stop() methods, with a very similar set of states, should RS and master go that route.&lt;/p&gt;

&lt;p&gt;I&apos;m hesitant to bring in anything too heavy weight (really more than feather weight) to assist with this.  I&apos;m not super familiar with the OSGi landscape but a lot of what I&apos;m seeing seems to be big &quot;component framework servers&quot; that load and run everything, so I&apos;m not optimistic we&apos;ll find an easy lib that fits our bill.  But I&apos;m open to any suggestions from others more knowledgeable.&lt;/p&gt;

&lt;p&gt;The DI thought is interesting, but I&apos;m not sure coprocessors would be a great fit for those tools.  We currently provide access to needed services through the CoprocessorEnvironment interface, which DI could certainly replace.  But each coprocessor is currently a separate island the relationship between them seems more akin to chained servlet filters on a request than independent components.  For the moment we&apos;re trying to avoid direct class references between coprocessors so that we can better isolate the class loading, allowing us to do code weaving on class loading to enforce resource utilization throttling.&lt;/p&gt;

&lt;p&gt;Are there other aspects you can see DI providing?  Maybe I&apos;m seeing things the wrong way?  And any suggestions on very light weight libs for assisting?&lt;/p&gt;</comment>
                            <comment id="12935111" author="apurtell" created="Tue, 23 Nov 2010 23:01:27 +0000"  >&lt;p&gt;We could use something like Guice as a lightweight DI framework within HBase code in general, but I think this is orthogonal to what coprocessors tries to achieve. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But each coprocessor is currently a separate island the relationship between them seems more akin to chained servlet filters on a request than independent components.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Chained servlet filters is a good analogy. Need to add client-transparent compression support to your webapp? Register a compression filter on the chain. Need to add client-transparent value compression to your table? Register a value compression coprocessor on the region.&lt;/p&gt;</comment>
                            <comment id="12935183" author="stack" created="Wed, 24 Nov 2010 03:37:02 +0000"  >&lt;p&gt;Thanks for entertaining my random ramble Gary and Andrew.  Your reasoning seems good to me.&lt;/p&gt;</comment>
                            <comment id="12965845" author="njbartlett" created="Wed, 1 Dec 2010 21:06:11 +0000"  >&lt;p&gt;I was directed to this JIRA by a Twitter conversation between Gary and @asynchronaut (Holger Hofst&#228;tte)&lt;/p&gt;

&lt;p&gt;If you are looking for a lightweight library that can help to provide OSGi-like lifecycle management, there is an obvious answer: OSGi itself. Apache Felix is a fully certified OSGi implementation and it is just a 300k JAR file. It can be embedded in a Java application with literally five lines of code.&lt;/p&gt;

&lt;p&gt;You seem to be concerned that OSGi is heavyweight. While it&apos;s true that it is used in many heavyweight servers including e.g. IBM WebSphere, the core of OSGi is very tight indeed, consisting of only 15 interfaces and 16 classes (of which 9 are &quot;Permission&quot; classes for Java 2 security).&lt;/p&gt;

&lt;p&gt;By embedding OSGi you will benefit from existing tools and skills, in addition to opening up the possibility for users to use many higher level frameworks that build on top of OSGi. Also you will be using lifecycle management code that is very well tested and proven.&lt;/p&gt;</comment>
                            <comment id="12965848" author="ryanobjc" created="Wed, 1 Dec 2010 21:12:33 +0000"  >&lt;p&gt;Perhaps you could explain the advantages more, the 15 interfaces, 16 class argument sounds kind of opposite from &quot;lightweight&quot;.&lt;/p&gt;</comment>
                            <comment id="12965914" author="njbartlett" created="Wed, 1 Dec 2010 23:03:28 +0000"  >&lt;p&gt;Really? Wow. I suppose I should clarify that only about 3 of those classes are actual surface area API that you might interact with, and most of the interfaces are listeners with one or two methods that you might want to implement if you want to hook into specific parts of the lifecycle.&lt;/p&gt;

&lt;p&gt;To go any further with this heavyweight vs lightweight argument though, I&apos;d need to understand what this community defines as heavyweight. Note though that OSGi&apos;s roots are in embedded software. It can run on very small devices indeed.&lt;/p&gt;

&lt;p&gt;The advantages as I see them would be:&lt;/p&gt;

&lt;p&gt;1) Not reinventing the wheel, but instead inheriting a very robust and production-tested solution that appears to be close to your requirements already.&lt;br/&gt;
2) Ability to use existing tools for OSGi bundle creation: e.g. Bnd, Maven&apos;s bundle plugin, extensive tooling in both Eclipse and IntelliJ.&lt;br/&gt;
3) Familiarity for a large number of developers, particularly within the Apache community since many other Apache projects are using OSGi&lt;br/&gt;
4) Modularity. Users can structure their extensions as fine-grained modules and even allow their extensions to be further extended by others.&lt;br/&gt;
5) Dynamic deployment and &quot;hotswappability&quot;&lt;br/&gt;
6) It&apos;s cool &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12965919" author="ryanobjc" created="Wed, 1 Dec 2010 23:14:04 +0000"  >&lt;p&gt;We are fairly thrifty on classes, for example the HBase read path touches 10-20 classes or so.&lt;/p&gt;

&lt;p&gt;Reading the OSGi wikipedia page wasn&apos;t very encouraging, &quot;industry standard&quot; generally implies &quot;sucky&quot;.  You should come to the coprocessor hackathon in a week or so in palo alto and advocate for OSGi.&lt;/p&gt;</comment>
                            <comment id="12965921" author="ghelmling" created="Wed, 1 Dec 2010 23:23:00 +0000"  >&lt;p&gt;@Neil&lt;/p&gt;

&lt;p&gt;The coprocessor framework code here is involved in the critical read and write paths for HBase and also in a sense becomes part of the user facing client API.  Any overhead in either direction is a big concern.&lt;/p&gt;

&lt;p&gt;If you&apos;re in the area and free, would be great if you can come to the hackathon:&lt;br/&gt;
&lt;a href=&quot;http://www.meetup.com/hackathon/calendar/15597555/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.meetup.com/hackathon/calendar/15597555/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and explain other benefits in more detail.  Particularly what OSGi might bring in classloading advantages, security/sandboxing and resource throttling of user code.  &lt;/p&gt;</comment>
                            <comment id="12965924" author="njbartlett" created="Wed, 1 Dec 2010 23:29:13 +0000"  >&lt;p&gt;If industry standard implies sucky then I guess Java REALLY sucks &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Don&apos;t get me wrong, I understand where you&apos;re coming from. But not all standards suck merely because they are standard.&lt;/p&gt;

&lt;p&gt;Thanks for the invitation to the Hackathon, unfortunately I&apos;m not in the area (I&apos;m in London, UK). I will ping some folks who may be able to attend.&lt;/p&gt;</comment>
                            <comment id="12966007" author="apurtell" created="Thu, 2 Dec 2010 07:35:52 +0000"  >&lt;p&gt;I would like to take a step back and consider a key motivation of the coprocessor design, or, at least present here an analogy: We have treated HBase like an operating system kernel (a highly concurrent performance critical thing) and coprocessors as the addition of an extension surface in the manner usually employed with respect to OS kernels &amp;#8211; callouts &amp;#8211; the lightest weight possible in terms of performance impact.  As stated earlier on this issue, chained servlet filters is another good analogy. &lt;/p&gt;

&lt;p&gt;We are not considering something like generic DI, nor perhaps OSGi, though honestly I&apos;m not convinced either way on the latter point if it is useful for coprocessor lifecycle management or not. (I thought... why not just a couple of additional upcalls? That would be enough for my needs.) We want to provide a flexible extension surface with well defined semantics. We do not want to force refactorings for the sake of producing the necessary layering/abstraction for a DI point, or to separate some function into the OSGi notion of service. So then DI and perhaps most of what benefit OSGi might bring to an application engineering context is not applicable here. &lt;/p&gt;

&lt;p&gt;This approach can of course change if refactoring of HBase code to be more amenable to generic DI and component model is the consensus way forward. Or if the core devs feel amenable to satisfying requests for code refactoring when someone might want to extend something via the DI approach. &lt;/p&gt;

&lt;p&gt;Personally I think the coprocessors approach as is has compelling benefits:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Simplicity&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Well defined interface and semantics &amp;#8211; a fixed framework of extension points&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;No need to involve core devs or trigger code refactoring&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12969744" author="toelen" created="Thu, 9 Dec 2010 14:18:37 +0000"  >&lt;p&gt;Nuxeo uses a custom version of an OSGi container. This might be interesting as well. They are also adding OSGi metadata on their bundles, which makes sense even if not using OSGi at runtime.&lt;/p&gt;

&lt;p&gt;(Slide 41)&lt;br/&gt;
&lt;a href=&quot;http://blogs.nuxeo.com/fermigier/2010/12/lessons-learned-building-nuxeo-ep-the-slides-are-now-available.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blogs.nuxeo.com/fermigier/2010/12/lessons-learned-building-nuxeo-ep-the-slides-are-now-available.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12972312" author="hbasereviewboard" created="Fri, 17 Dec 2010 00:27:03 +0000"  >&lt;p&gt;Message from: &quot;Gary Helmling&quot; &amp;lt;ghelmling@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1306/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for hbase, stack and Andrew Purtell.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This patch adds explicit start() and stop() methods for lifecycle management to the Coprocessor interface and refactors some of the Coprocessor/RegionObserver distinction, moving the region-related pre/post hooks that were previously in Coprocessor to RegionObserver.&lt;/p&gt;

&lt;p&gt;Coprocessor is now the base interface, containing only:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;start()&lt;/li&gt;
	&lt;li&gt;stop()&lt;/li&gt;
	&lt;li&gt;Priority enum&lt;/li&gt;
	&lt;li&gt;State enum&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;RegionObserver extends Coprocessor, and now contains the additional pre/post hooks, moved from Coprocessor:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;pre/postOpen&lt;/li&gt;
	&lt;li&gt;pre/postClose&lt;/li&gt;
	&lt;li&gt;pre/postFlush&lt;/li&gt;
	&lt;li&gt;pre/postCompact&lt;/li&gt;
	&lt;li&gt;pre/postSplit&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This will allow cleaner extension in the future, to allow addition of a MasterObserver interface, for example.&lt;/p&gt;

&lt;p&gt;As shown above, I&apos;ve also added a new Coprocessor.State enum consisting of the states:&lt;br/&gt;
UNINSTALLED -&amp;gt; INSTALLED -&amp;gt; STARTING -&amp;gt; ACTIVE -&amp;gt; STOPPING -&amp;gt; STOPPED&lt;/p&gt;

&lt;p&gt;However, the UNINSTALLED/INSTALLED distinction is not particularly useful at the moment.  I&apos;d appreciate other feedback on what&apos;s necessary here.  The current handling could make do with:&lt;br/&gt;
UNINSTALLED -&amp;gt; STARTING -&amp;gt; ACTIVE -&amp;gt; STOPPING -&amp;gt; UNINSTALLED (4 total states)&lt;/p&gt;

&lt;p&gt;However, the UNINSTALLED/INSTALLED distinction may be useful if we want to add class level initialization in the future...&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3260&quot; title=&quot;Coprocessors: Lifecycle management&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3260&quot;&gt;&lt;del&gt;HBASE-3260&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-3260&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-3260&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/coprocessor/BaseEndpointCoprocessor.java b81a465 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserverCoprocessor.java f022598 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/coprocessor/Coprocessor.java 7ea1c5e &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java 1792290 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/CoprocessorHost.java f028525 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java 3db4c36 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java 81cb75d &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.cloudera.org/r/1306/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Added tests for start() and stop() method invocation in org.apache.hadoop.hbase.coprocessor.TestCoprocessorInterface&lt;/p&gt;

&lt;p&gt;The existing TestCoprocessorEndpoint, TestCoprocessorInterface, TestRegionObserverInterface, TestRegionObserverStacking tests continue to work.  I&apos;m not seeing any new failures in the rest of the tests, but TestReplication is timing out for me, preventing all tests from executing.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Gary&lt;/p&gt;

</comment>
                            <comment id="12972328" author="hbasereviewboard" created="Fri, 17 Dec 2010 01:11:01 +0000"  >&lt;p&gt;Message from: &quot;Andrew Purtell&quot; &amp;lt;apurtell@apache.org&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1306/#review2102&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/#review2102&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/BaseEndpointCoprocessor.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1306/#comment6557&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/#comment6557&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    What are these arguments about?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/CoprocessorHost.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1306/#comment6558&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/#comment6558&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Should be a WARN?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/CoprocessorHost.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1306/#comment6559&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/#comment6559&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Should be a WARN?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/CoprocessorHost.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1306/#comment6560&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/#comment6560&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Since you are committing a change set in this area, Ryan suggested no need for AtomicBoolean here, could just be plain volatile boolean. I think that&apos;s right.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Andrew&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12972336" author="hbasereviewboard" created="Fri, 17 Dec 2010 01:41:01 +0000"  >&lt;p&gt;Message from: &quot;Gary Helmling&quot; &amp;lt;ghelmling@gmail.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-12-16 17:09:44, Andrew Purtell wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/coprocessor/BaseEndpointCoprocessor.java, line 66&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1306/diff/1/?file=18379#file18379line66&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/diff/1/?file=18379#file18379line66&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     What are these arguments about?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Those are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;String protocol&lt;/li&gt;
	&lt;li&gt;long clientVersion&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;from org.apache.hadoop.ipc.VersionedProtocol.&lt;/p&gt;

&lt;p&gt;Will fix these up.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-12-16 17:09:44, Andrew Purtell wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/regionserver/CoprocessorHost.java, line 289&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1306/diff/1/?file=18383#file18383line289&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/diff/1/?file=18383#file18383line289&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Should be a WARN?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, agree.  Will fix.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-12-16 17:09:44, Andrew Purtell wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/regionserver/CoprocessorHost.java, line 305&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1306/diff/1/?file=18383#file18383line305&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/diff/1/?file=18383#file18383line305&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Should be a WARN?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, will fix.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-12-16 17:09:44, Andrew Purtell wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/main/java/org/apache/hadoop/hbase/regionserver/CoprocessorHost.java, line 385&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1306/diff/1/?file=18383#file18383line385&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/diff/1/?file=18383#file18383line385&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Since you are committing a change set in this area, Ryan suggested no need for AtomicBoolean here, could just be plain volatile boolean. I think that&apos;s right.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok will change this to a volatile boolean and repost.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Gary&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1306/#review2102&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1306/#review2102&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12972639" author="ghelmling" created="Fri, 17 Dec 2010 20:38:33 +0000"  >&lt;p&gt;As part of this change, I&apos;m also converting the CoprocessorHost &lt;tt&gt;bypass&lt;/tt&gt; and &lt;tt&gt;complete&lt;/tt&gt; variables that were added in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3348&quot; title=&quot;Allow Observers to completely override base function&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3348&quot;&gt;&lt;del&gt;HBASE-3348&lt;/del&gt;&lt;/a&gt; from &lt;tt&gt;AtomicBoolean&lt;/tt&gt; to &lt;tt&gt;ThreadLocal&amp;lt;Boolean&amp;gt;&lt;/tt&gt;.  Without being thread local, it&apos;s up to the coprocessor implementor to setting of these values between multiple invoking threads, which is non-obvious.  With this change the framework handles synchronization, which seems more as expected.&lt;/p&gt;</comment>
                            <comment id="12972642" author="ghelmling" created="Fri, 17 Dec 2010 20:53:11 +0000"  >&lt;p&gt;Final patch that was committed.&lt;/p&gt;</comment>
                            <comment id="12972646" author="ghelmling" created="Fri, 17 Dec 2010 20:58:10 +0000"  >&lt;p&gt;Committed to trunk after review by Andy.&lt;/p&gt;

&lt;p&gt;As noted in this issue, I also tweaked the bypass and complete vars from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3348&quot; title=&quot;Allow Observers to completely override base function&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3348&quot;&gt;&lt;del&gt;HBASE-3348&lt;/del&gt;&lt;/a&gt; to be thread local.&lt;/p&gt;</comment>
                            <comment id="12974488" author="hudson" created="Thu, 23 Dec 2010 04:31:40 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #1697 (See &lt;a href=&quot;https://hudson.apache.org/hudson/job/HBase-TRUNK/1697/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/HBase-TRUNK/1697/&lt;/a&gt;)&lt;/p&gt;
</comment>
                            <comment id="15016800" author="lars_francke" created="Fri, 20 Nov 2015 12:40:47 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12480541">HBASE-3256</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12474026">HBASE-2993</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12466498" name="HBASE-3260_final.patch" size="26271" author="ghelmling" created="Fri, 17 Dec 2010 20:53:11 +0000"/>
                            <attachment id="12460212" name="statechart.png" size="34208" author="apurtell" created="Mon, 22 Nov 2010 23:36:20 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 23 Nov 2010 20:27:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32966</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hlgn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100739</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>