<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:38:20 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-12975/HBASE-12975.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-12975] Supportable SplitTransaction and RegionMergeTransaction interfaces</title>
                <link>https://issues.apache.org/jira/browse/HBASE-12975</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Making SplitTransaction, RegionMergeTransaction limited private is required to support local indexing feature in Phoenix to ensure regions colocation. &lt;/p&gt;

&lt;p&gt;We can ensure region split, regions merge in the coprocessors in few method calls without touching internals like creating zk&apos;s, file layout changes or assignments.&lt;br/&gt;
1) stepsBeforePONR, stepsAfterPONR we can ensure split.&lt;br/&gt;
2) meta entries can pass through coprocessors to atomically update with the normal split/merge.&lt;br/&gt;
3) rollback on failure.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12772592">HBASE-12975</key>
            <summary>Supportable SplitTransaction and RegionMergeTransaction interfaces</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="apurtell">Andrew Purtell</assignee>
                                    <reporter username="rajeshbabu">Rajeshbabu Chintaguntla</reporter>
                        <labels>
                    </labels>
                <created>Thu, 5 Feb 2015 05:29:12 +0000</created>
                <updated>Wed, 3 Jun 2015 15:29:35 +0000</updated>
                            <resolved>Wed, 1 Apr 2015 01:04:37 +0000</resolved>
                                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>1.1.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>14</watches>
                                                                <comments>
                            <comment id="14307501" author="rajeshbabu" created="Thu, 5 Feb 2015 16:28:03 +0000"  >&lt;p&gt;Here is the simple patch.&lt;/p&gt;</comment>
                            <comment id="14307541" author="apurtell" created="Thu, 5 Feb 2015 16:59:30 +0000"  >&lt;p&gt;-1&lt;/p&gt;

&lt;p&gt;SplitTransaction involves too many low level details. This is what SplitTransaction does internally (in 0.98):&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Maintains the rollback journal&lt;/li&gt;
	&lt;li&gt;Directly accesses and edits META table entries&lt;/li&gt;
	&lt;li&gt;Directly accesses and modifies splitting state znodes and assignment state&lt;/li&gt;
	&lt;li&gt;Responsible for calling coprocessor hooks&lt;/li&gt;
	&lt;li&gt;Directly opens regions in worker threads&lt;/li&gt;
	&lt;li&gt;Directly splits files in worker threads&lt;/li&gt;
	&lt;li&gt;Responsible for cleaning up failed splits&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The preponderance of these things cannot be said to be stable in any LimitedPrivate interface sense. We would have to stop making changes in all of those areas lest we break assumptions in code that overrides this stuff. Get the details wrong and regions are permanently unavailable until operator intervention and maybe surgery with custom tools. Some parts of HBase have to remain private. This is the same rationale as was applied to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12566&quot; title=&quot;HRegion should have an InterfaceAudience of LimitedPrivate(PHOENIX)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12566&quot;&gt;&lt;del&gt;HBASE-12566&lt;/del&gt;&lt;/a&gt; and is consistent with that decision.&lt;/p&gt;</comment>
                            <comment id="14307661" author="lhofhansl" created="Thu, 5 Feb 2015 18:01:24 +0000"  >&lt;p&gt;I agree. We need to pull out hooks in such a way that:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;we allow for the Phoenix use case&lt;/li&gt;
	&lt;li&gt;avoid locking us into the current implementation&lt;/li&gt;
	&lt;li&gt;avoid external code making assumption about internals (znodes, filesystem manipulations, etc)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajeshbabu&quot; class=&quot;user-hover&quot; rel=&quot;rajeshbabu&quot;&gt;Rajeshbabu Chintaguntla&lt;/a&gt;, would you call SplitTransaction 100% unchanged?&lt;br/&gt;
If so, I see no harm in pulling just an execute method into an interface and pass all needed information to that method (HRegion, split row). Or create a SplitTransactionFactory.&lt;/p&gt;</comment>
                            <comment id="14307672" author="apurtell" created="Thu, 5 Feb 2015 18:08:45 +0000"  >&lt;p&gt;Agreed, we can make this work but that should happen on another issue. The proposal here is a LimitedPrivate annotation that has been vetoed. Let&apos;s close this issue (after discussion... no problem...) and work on something supportable in another one. &lt;/p&gt;</comment>
                            <comment id="14307682" author="lhofhansl" created="Thu, 5 Feb 2015 18:13:33 +0000"  >&lt;p&gt;Lemme make a sample patch. Should be simple. That you and Rajesh can have a look and see whether it fulfills our requirements.&lt;br/&gt;
Then we can repurpose/rename this jira or open a new one, that&apos;s mechanics &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14307705" author="hadoopqa" created="Thu, 5 Feb 2015 18:27:38 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12696785/HBASE-12975.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12696785/HBASE-12975.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 96cdc7987e8894b304a3201f67cb0b9595c68cc3.&lt;br/&gt;
  ATTACHMENT ID: 12696785&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.mapreduce.TestLoadIncrementalHFiles&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-rest.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-annotations.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/12707//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14307728" author="rajeshbabu" created="Thu, 5 Feb 2015 18:40:15 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; Split works fine if we just run execute on that. We cannot ensure atomicity of both data and index region split. If failure in any case during split should not leave one in split and other without split. Until unless we update meta mutations along with data region split mutations at somepoint of time we end up in problems. Also rollback on one of the failed split should rollback others. Currently it&apos;s happening properly and ensuring atomicity even on regionserver crash kind of scenarios as well.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="14307757" author="lhofhansl" created="Thu, 5 Feb 2015 18:51:28 +0000"  >&lt;p&gt;Hmm... I see. So you actually would want to implement a &quot;joined split&quot;, where either both region succeed or both fail, atomically.&lt;/p&gt;

&lt;p&gt;Can you think of an interface for that, which we could pull out, along with an implementation that does that?&lt;br/&gt;
I.e. a SplitTransaction that takes multiple region and splitkeys and only succeed when all are done. That might actually be tricky.&lt;/p&gt;

&lt;p&gt;Or maybe an interface that has execute, commit, and rollback? Then you can execute on both, and commit when both executes are successful. That may be easier. Need to think carefully what commit/rollback mean and what happens when a region server dies before it commits.&lt;/p&gt;</comment>
                            <comment id="14307761" author="apurtell" created="Thu, 5 Feb 2015 18:53:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;So you actually would want to implement a &quot;joined split&quot;, where either both region succeed or both fail, atomically.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That might be made to work, but it goes against the grain where HBase regions are (if you squint) self contained little key-value stores responsible for their own independent management. &lt;/p&gt;</comment>
                            <comment id="14307763" author="lhofhansl" created="Thu, 5 Feb 2015 18:54:31 +0000"  >&lt;p&gt;The previous means that execute would be the &quot;prepare&quot; phase of a two phase commit.&lt;/p&gt;</comment>
                            <comment id="14307767" author="lhofhansl" created="Thu, 5 Feb 2015 18:56:55 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;, agreed. A 2PC between regions might be better. With SplitTransaction we&apos;re almost there (but the rest will be tricky, I&apos;m afraid). We would need to be able to get all the way to the PONR, and be able to guarantee that we will be able to finish to the PONR when asked to commit.&lt;/p&gt;</comment>
                            <comment id="14307768" author="lhofhansl" created="Thu, 5 Feb 2015 18:58:00 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajeshbabu&quot; class=&quot;user-hover&quot; rel=&quot;rajeshbabu&quot;&gt;Rajeshbabu Chintaguntla&lt;/a&gt;, you solved this in Phoenix with your own implementation, right? How does it work when the index split fails?&lt;/p&gt;</comment>
                            <comment id="14308035" author="rajeshbabu" created="Thu, 5 Feb 2015 21:34:04 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; Most of the failed split clean up will be taken care by HBase only.&lt;br/&gt;
If split fails for data or index region before PONR rollback will be called for data region, internally in the coprocessors calling rollback on index region so for both region split clean up happen properly. If RS down here master takes care of cleaning up the failed splits.&lt;br/&gt;
After PONR updating meta with both data and index region split mutations together if any failure from onwards the RS will be aborted so while recovering master sees split regions of both data and index regions from meta and assign them. &lt;/p&gt;</comment>
                            <comment id="14308048" author="lhofhansl" created="Thu, 5 Feb 2015 21:44:44 +0000"  >&lt;p&gt;So if you had an interface with beforePONR and afterPONR methods, you&apos;d be good? You&apos;d call beforePONR on both transactions and if successful call afterPONR on both?&lt;/p&gt;</comment>
                            <comment id="14308064" author="rajeshbabu" created="Thu, 5 Feb 2015 21:53:35 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; Yes that will be helpful but just thinking how we can make a split on a region into joint split in case of auto split? for this do we need to have some hooks again?&lt;/p&gt;</comment>
                            <comment id="14308188" author="lhofhansl" created="Thu, 5 Feb 2015 22:58:31 +0000"  >&lt;p&gt;That&apos;ll be the tricky part &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Working out what we need to pull into an interface - and in a way that still allows us to change the actual implementation.&lt;/p&gt;</comment>
                            <comment id="14339607" author="apurtell" created="Fri, 27 Feb 2015 02:15:41 +0000"  >&lt;p&gt;Near the current tail of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12972&quot; title=&quot;Region, a supportable public/evolving subset of HRegion&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12972&quot;&gt;&lt;del&gt;HBASE-12972&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajeshbabu&quot; class=&quot;user-hover&quot; rel=&quot;rajeshbabu&quot;&gt;Rajeshbabu Chintaguntla&lt;/a&gt; and I had this exchange:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajeshbabu&quot; class=&quot;user-hover&quot; rel=&quot;rajeshbabu&quot;&gt;Rajeshbabu Chintaguntla&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The new interfaces for SplitTransaction, RegionMergeTransaction in the patch may not fully helpful for reimplementing the local indexes split/merge without diving into the details. I think we can handle the SplitTransaction,RegionMergeTransaction changes in separate JIRA(may be &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12975&quot; title=&quot;Supportable SplitTransaction and RegionMergeTransaction interfaces&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12975&quot;&gt;&lt;del&gt;HBASE-12975&lt;/del&gt;&lt;/a&gt; here).&lt;/p&gt;

&lt;p&gt;To support local index regions split/merge I think splittransaction should be changed so that it should also split more than one region atomically and the steps should be changed like this.&lt;br/&gt;
1) We should be able pass/add one or more regions to SplitTransaction.&lt;br/&gt;
2) run steps before PONR(or commit) for all the regions.&lt;br/&gt;
3) commit split mutations of all the regions&lt;br/&gt;
4) run steps after PONR(or commit) for all the regions&lt;br/&gt;
5) Any failures before PONR rollback the regions completed steps before PONR.&lt;/p&gt;

&lt;p&gt;This way in case of one region it should work as usual how it works currently.&lt;br/&gt;
Apart from this before actual split execution starts we should give provision to add more regions to split through coprocessors. So this way we need not touch any internals.&lt;/p&gt;

&lt;p&gt;Similar way we can change for regions merge as well.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We can definitely split out the SplitTransaction and RegionMergeTransaction changes, my only concern there is then the Region interface changes aren&apos;t sufficient to remove HRegion reference/use in Phoenix.&lt;/p&gt;

&lt;p&gt;I don&apos;t think we should allow users of the transactions to reach inside and direct what happens when. On the other hand we could provide APIs for registering callbacks for when different phases happen, and can take that a step further and allow callbacks to trigger an abort by throwing an exception.&lt;/p&gt;

&lt;p&gt;As for specifying what region(s) to run a transaction on, can you use the new factories? Create a factory, call its create() method with the desired regions(s) to get a transaction instance), and then run it?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We could develop this further here? Hopefully we can all get on the same page that the only way SplitTransaction and RegionMergeTransaction should have an interface audience of LimitedPrivate is if they become &lt;em&gt;interfaces&lt;/em&gt; that don&apos;t leak internal details, are not types that can be directly extended. &lt;/p&gt;</comment>
                            <comment id="14339619" author="apurtell" created="Fri, 27 Feb 2015 02:27:59 +0000"  >&lt;p&gt;I&apos;m going to split out the SplitTransaction and RegionMergeTransaction changes I made in an earlier patch on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12972&quot; title=&quot;Region, a supportable public/evolving subset of HRegion&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12972&quot;&gt;&lt;del&gt;HBASE-12972&lt;/del&gt;&lt;/a&gt; tomorrow and put up a patch here for master. This should go all the way back to branch-1.0 once we have something that can be workable though, so Phoenix doesn&apos;t have to extend private externals. Could then work on APIs for registering callbacks for when different transactions phases happen as mentioned above.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt;&apos;s point on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12972&quot; title=&quot;Region, a supportable public/evolving subset of HRegion&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12972&quot;&gt;&lt;del&gt;HBASE-12972&lt;/del&gt;&lt;/a&gt; is relevant here too though: If we introduce a LimitedPrivate interface into a 1.0.x where x &amp;gt; 0, then is it a compatibility violation since x = 0 wouldn&apos;t have the supported/supportable interfaces? I&apos;d hope not, if perhaps only for this case. Otherwise we cannot extract ourselves from this unfortunate situation until 1.1.0. &lt;/p&gt;

&lt;p&gt;/cc &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14339746" author="busbey" created="Fri, 27 Feb 2015 05:27:22 +0000"  >&lt;p&gt;If we make the LimitedPrivate Unstable for 1.0.z and then Evolving for 1.1.z+, then we&apos;d be fine. Quote from when this came up on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12972&quot; title=&quot;Region, a supportable public/evolving subset of HRegion&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12972&quot;&gt;&lt;del&gt;HBASE-12972&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;What if we marked Region LimitedPrivate / Unstable in 1.0.z?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Then why would someone use it? Region is supposed to be the supportable version of HRegion. Unstable provides only effectively the same guarantees as inappropriate use of Private interfaces.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The reason to use it is that we&apos;d label it Evolving or Stable in the next minor release. We could even add a note in the javadoc explaining that it&apos;s Unstable just to flag that folks have to keep in mind that it wasn&apos;t around at the start of the API cut off for 1.0. Like the compat guide says, just because we have the option to break things at a particular version (in this case at patches sine it&apos;s Unstable) doesn&apos;t mean we will.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&apos;d hope not, if perhaps only for this case. Otherwise we cannot extract ourselves from this unfortunate situation until 1.1.0.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why don&apos;t we just plan to get 1.1.0 out the door in time for Phoenix 1.0? How aggressive is the timeline?&lt;/p&gt;</comment>
                            <comment id="14340432" author="apurtell" created="Fri, 27 Feb 2015 17:37:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;The reason to use it is that we&apos;d label it Evolving or Stable in the next minor release. We could even add a note in the javadoc explaining that it&apos;s Unstable just to flag that folks have to keep in mind that it wasn&apos;t around at the start of the API cut off for 1.0. Like the compat guide says, just because we have the option to break things at a particular version (in this case at patches sine it&apos;s Unstable) doesn&apos;t mean we will.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, will do that and add the suggested javadoc&lt;/p&gt;</comment>
                            <comment id="14340451" author="apurtell" created="Fri, 27 Feb 2015 17:54:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;Why don&apos;t we just plan to get 1.1.0 out the door in time for Phoenix 1.0? How aggressive is the timeline?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not sure. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jamestaylor&quot; class=&quot;user-hover&quot; rel=&quot;jamestaylor&quot;&gt;James Taylor&lt;/a&gt; ?&lt;/p&gt;</comment>
                            <comment id="14340462" author="jamestaylor" created="Fri, 27 Feb 2015 17:59:51 +0000"  >&lt;p&gt;You mean start HBase 1.+ support for Phoenix 5.0, right? Depends on the timing, but that might be good. We have a number of big-ish things we&apos;d like to get into our major release, so we&apos;ll have to see how this all lines up.&lt;/p&gt;</comment>
                            <comment id="14340495" author="apurtell" created="Fri, 27 Feb 2015 18:15:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;You mean start HBase 1.+ support for Phoenix 5.0, right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Just to be precise, the suggestion is to support HBase 1.1 and higher with Phoenix 5.0, but not HBase 1.0 or lower. Phoenix 4.x would continue to support 0.98. There&apos;d be a gap, nothing for HBase 1.0.x. We&apos;d work on the timing so HBase 1.1 is released before Phoenix 5.0. &lt;/p&gt;

&lt;p&gt;Alternatively, Phoenix could begin mapping major -dot-minor to HBase starting at 5, so:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Phoenix 5.0.x -&amp;gt; HBase 1.0.x&lt;/li&gt;
	&lt;li&gt;Phoenix 5.1.x -&amp;gt; HBase 1.1.x&lt;/li&gt;
	&lt;li&gt;Phoenix 6.x.x -&amp;gt; HBase 2.x.x&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For Phoenix 5.0.x you could continue the implementation strategies used for 0.98 since there wouldn&apos;t be alternatives yet. For Phoenix x.y.z where ( x = 5 and y &amp;gt; 0 || x &amp;gt; 5 ) there would be supportable interfaces for SplitTransaction, RegionMergeTransaction (and a supported &apos;Region&apos; substitute for HRegion (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12972&quot; title=&quot;Region, a supportable public/evolving subset of HRegion&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12972&quot;&gt;&lt;del&gt;HBASE-12972&lt;/del&gt;&lt;/a&gt;))&lt;/p&gt;</comment>
                            <comment id="14340522" author="jamestaylor" created="Fri, 27 Feb 2015 18:34:06 +0000"  >&lt;p&gt;Another alternative would be to have an HBase 1.0 compliant Phoenix release still with 4.x version (i.e. we&apos;d likely need a separate branch, but it wouldn&apos;t necessarily need to be a major release from the Phoenix POV). &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt; assures me that we can meet our b/w compat contract (i.e. mix of Phoenix 4.x clients would be ok against Phoenix 4.x server on HBase 1.0 with &lt;a href=&quot;https://issues.apache.org/jira/browse/PHOENIX-1642&quot; title=&quot;Make Phoenix Master Branch pointing to HBase1.0.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PHOENIX-1642&quot;&gt;&lt;del&gt;PHOENIX-1642&lt;/del&gt;&lt;/a&gt;).The reason not to go with a major release for Phoenix is because it&apos;d be good to reserve this for changes that cannot be made b/w compatible.&lt;/p&gt;

&lt;p&gt;Maybe move this Phoenix-specific version discussion over to the Phoenix mailing list?&lt;/p&gt;</comment>
                            <comment id="14340525" author="busbey" created="Fri, 27 Feb 2015 18:34:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;Phoenix 4.x would continue to support 0.98. There&apos;d be a gap, nothing for HBase 1.0.x. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do we know that Phoenix 4.x won&apos;t work with HBase 1.0.z?&lt;/p&gt;</comment>
                            <comment id="14340530" author="jamestaylor" created="Fri, 27 Feb 2015 18:36:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do we know that Phoenix 4.x won&apos;t work with HBase 1.0.z?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, see &lt;a href=&quot;https://issues.apache.org/jira/browse/PHOENIX-1642&quot; title=&quot;Make Phoenix Master Branch pointing to HBase1.0.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PHOENIX-1642&quot;&gt;&lt;del&gt;PHOENIX-1642&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14340542" author="apurtell" created="Fri, 27 Feb 2015 18:41:58 +0000"  >&lt;p&gt;Sure James we don&apos;t need to talk about Phoenix release numbering further here. My take away is targeting the fix versions for this issue and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12972&quot; title=&quot;Region, a supportable public/evolving subset of HRegion&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12972&quot;&gt;&lt;del&gt;HBASE-12972&lt;/del&gt;&lt;/a&gt; to 1.1 and 2.0 (and not 1.0.1) is fine, thanks.&lt;/p&gt;</comment>
                            <comment id="14341151" author="apurtell" created="Sat, 28 Feb 2015 01:22:24 +0000"  >&lt;p&gt;Since I&apos;m working on a patch I&apos;m going to take this &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajeshbabu&quot; class=&quot;user-hover&quot; rel=&quot;rajeshbabu&quot;&gt;Rajeshbabu Chintaguntla&lt;/a&gt;, but please let me know if you plan on actively working on it right away, we can figure something out.&lt;/p&gt;</comment>
                            <comment id="14341164" author="apurtell" created="Sat, 28 Feb 2015 01:39:15 +0000"  >&lt;p&gt;Here&apos;s what I have for SplitTransaction. RegionMergeTransaction will be similar, differing in ways you can infer. &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/**
 * Executes region split as a &lt;span class=&quot;code-quote&quot;&gt;&quot;transaction&quot;&lt;/span&gt;.  Call {@link #prepare()} to setup
 * the transaction, {@link #execute(Server, RegionServerServices)} to run the
 * transaction and {@link #rollback(Server, RegionServerServices)} to cleanup &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; execute fails.
 *
 * &amp;lt;p&amp;gt;Here is an example of how you would use &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt;:
 * &amp;lt;pre&amp;gt;
 *  SplitTransactionFactory factory = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; SplitTransactionFactory(conf);
 *  SplitTransaction st = factory.create(parent, midKey)
 *    .registerTransactionListener(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TransactionListener() {
 *       &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void transition(SplitTransaction transaction, SplitTransactionPhase from,
 *           SplitTransactionPhase to) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
 *         &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt; *       }
 *       &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void rollback(SplitTransaction transaction, SplitTransactionPhase from,
 *           SplitTransactionPhase to) {
 *         &lt;span class=&quot;code-comment&quot;&gt;// ...
&lt;/span&gt; *       }
 *    });
 *  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!st.prepare()) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
 *  &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
 *    st.execute(server, services);
 *  } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
 *    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
 *      st.rollback(server, services);
 *      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
 *    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (RuntimeException e) {
 *      &lt;span class=&quot;code-comment&quot;&gt;// abort the server
&lt;/span&gt; *    }
 *  }
 * &amp;lt;/Pre&amp;gt;
 * &amp;lt;p&amp;gt;A split transaction is not thread safe.  Callers must ensure a split is run by
 * one thread only.
 */
@InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.COPROC)
@InterfaceStability.Evolving
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; SplitTransaction {

  /**
   * Each &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; is a step in the split transaction.
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; SplitTransactionPhase {
    /**
     * Started
     */
    STARTED,
    /**
     * Prepared (after table lock)
     */
    PREPARED,
    /**
     * Before preSplit coprocessor hook
     */
    BEFORE_PRE_SPLIT_HOOK,
    /**
     * After preSplit coprocessor hook
     */
    AFTER_PRE_SPLIT_HOOK,
    /**
     * Set region as in transition, set it into SPLITTING state.
     */
    SET_SPLITTING,
    /**
     * We created the temporary split data directory.
     */
    CREATE_SPLIT_DIR,
    /**
     * Closed the parent region.
     */
    CLOSED_PARENT_REGION,
    /**
     * The parent has been taken out of the server&apos;s online regions list.
     */
    OFFLINED_PARENT,
    /**
     * Started in on creation of the first daughter region.
     */
    STARTED_REGION_A_CREATION,
    /**
     * Started in on the creation of the second daughter region.
     */
    STARTED_REGION_B_CREATION,
    /**
     * Opened the first daughter region
     */
    OPENED_REGION_A,
    /**
     * Opened the second daughter region
     */
    OPENED_REGION_B,
    /**
     * Point of no &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;.
     * If we got here, then transaction is not recoverable other than by
     * crashing out the regionserver.
     */
    PONR,
    /**
     * Before postSplit coprocessor hook
     */
    BEFORE_POST_SPLIT_HOOK,
    /**
     * After postSplit coprocessor hook
     */
    AFTER_POST_SPLIT_HOOK,
    /**
     * Completed
     */
    COMPLETED
  }

  /**
   * Split transaction journal entry
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; JournalEntry {

    /** @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the completed phase marked by &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; journal entry */
    SplitTransactionPhase getPhase();

    /** @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the time of phase completion */
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; getTimeStamp();
  }

  /**
   * Split transaction listener
   */
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; TransactionListener {

    /**
     * Invoked when transitioning forward from one transaction phase to another
     * @param transaction the transaction
     * @param from the current phase
     * @param to the next phase
     * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException listener can &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; to abort
     */
    void transition(SplitTransaction transaction, SplitTransactionPhase from,
        SplitTransactionPhase to) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;

    /**
     * Invoked when rolling back a transaction from one transaction phase to the
     * previous
     * @param transaction the transaction
     * @param from the current phase
     * @param to the previous phase
     */
    void rollback(SplitTransaction transaction, SplitTransactionPhase from,
        SplitTransactionPhase to);
  }

  /**
   * Check split inputs and prepare the transaction.
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &amp;lt;code&amp;gt;&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;&amp;lt;/code&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the region is splittable &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt;
   * &amp;lt;code&amp;gt;&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;&amp;lt;/code&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; it is not (e.g. its already closed, etc.).
   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException 
   */
  &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; prepare() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;

  /**
   * Run the transaction.
   * @param server Hosting server instance.  Can be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; when testing.
   * @param services Used to online/offline regions.
   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException If thrown, transaction failed.
   *          Call {@link #rollback(Server, RegionServerServices)}
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Regions created
   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
   * @see #rollback(Server, RegionServerServices)
   */
  PairOfSameType&amp;lt;HRegion&amp;gt; execute(Server server, RegionServerServices services) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;

  /**
   * Roll back a failed transaction
   * @param server Hosting server instance (May be &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; when testing).
   * @param services
   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException If thrown, rollback failed.  Take drastic action.
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; True &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; we successfully rolled back, &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; we got to the point
   * of no &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; and so now need to abort the server to minimize damage.
   */
  &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; rollback(Server server, RegionServerServices services) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;

  /**
   * Register a listener &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; transaction preparation, execution, and possibly
   * rollback phases.
   * &amp;lt;p&amp;gt;A listener can abort a transaction by throwing an exception. 
   * @param listener the listener
   * @returns &apos;&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;&apos; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; chaining
   */
  SplitTransaction registerTransactionListener(TransactionListener listener);

  /**
   * Get the journal &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the transaction.
   * &amp;lt;p&amp;gt;Journal entries are an opaque type represented as JournalEntry. They can
   * also provide useful debugging information via their toString method.
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the transaction journal
   */
  List&amp;lt;JournalEntry&amp;gt; getJournal();

  /**
   * Get the Server running the transaction or rollback
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; server instance
   */
  Server getServer();

  /**
   * Get the RegonServerServices of the server running the transaction or rollback
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; region server services
   */
  RegionServerServices getRegionServerServices();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Working on RegionMergeTransaction now, then there are a bunch of tests I need to clean up.&lt;/p&gt;</comment>
                            <comment id="14341239" author="apurtell" created="Sat, 28 Feb 2015 02:34:03 +0000"  >&lt;p&gt;Dropping WIP patch. Not tested yet. Needs new tests for the transaction listeners too&lt;/p&gt;</comment>
                            <comment id="14341253" author="rajeshbabu" created="Sat, 28 Feb 2015 02:47:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;Since I&apos;m working on a patch I&apos;m going to take this Rajeshbabu Chintaguntla, but please let me know if you plan on actively working on it right away, we can figure something out.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You can continue &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;. I can help you by parallely testing and let you know any pain points to make use for local indexes case in Phoenix.&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="14341372" author="lhofhansl" created="Sat, 28 Feb 2015 06:12:06 +0000"  >&lt;p&gt;Sorry a bit late here. Why can&apos;t we add a &lt;b&gt;new&lt;/b&gt; stable interface in a 1.0.x release? Where&apos;s the compatibility issue?&lt;/p&gt;</comment>
                            <comment id="14341387" author="busbey" created="Sat, 28 Feb 2015 06:52:19 +0000"  >&lt;p&gt;semver says we only add features in minor releases.&lt;/p&gt;</comment>
                            <comment id="14358397" author="rajeshbabu" created="Thu, 12 Mar 2015 09:51:26 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;As for specifying what region(s) to run a transaction on, can you use the new factories? Create a factory, call its create() method with the desired regions(s) to get a transaction instance), and then run it?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This approach is good but confused with the patch. As for the current patch SplitTransactionImpl supports splitting only one region at a time. If we want to split multiple regions do we need to have custom implementation? Or just if we register new transaction listener for other regions? Or still we need to make the changes in SplitTransactionImpl?&lt;/p&gt;

&lt;p&gt;Can you explain bit more how we can add more regions to split transactionally?&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="14363615" author="apurtell" created="Mon, 16 Mar 2015 18:03:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;As for the current patch SplitTransactionImpl supports splitting only one region at a time. If we want to split multiple regions do we need to have custom implementation?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;A custom implementation is possible. What factory to use for instantiating transactions can be changed in configuration. I don&apos;t think this would be &quot;supportable&quot; though. You couldn&apos;t do this in a downstream project, for example and expect any level of source, binary, or semantic compatibility, because any implementation would require use of any number of private interfaces to make a split happen.  &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can you explain bit more how we can add more regions to split transactionally?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Currently, regions are managed independently &lt;b&gt;except&lt;/b&gt; when running a region merge transaction, for obvious reasons. I would hesitate to extend the scope of this issue to also make major changes to how split transactions work, so I don&apos;t think we should change SplitTransaction to handle coordination of splits of multiple regions, but if you have a specific proposal of course we should look at it.&lt;/p&gt;

&lt;p&gt;What about allowing coprocessors or other internal users to create multiple SplitTransactions and coordinate them? The interfaces here would need some more work, but the procedure might go something like:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Instantiate N SplitTransactions&lt;/li&gt;
	&lt;li&gt;Run each SplitTransaction up to PONR. Can be done in parallel. If there&apos;s a failure, invoke the rollback method on all and try again and/or do some other remediation.&lt;/li&gt;
	&lt;li&gt;Run each SplitTransaction past PONR. Can be done in parallel. If there&apos;s a failure, the server must abort.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The major difference between the above and current proposal is we allow an interface user to drive transaction execution in coordinated pre- and post-PONR phases to allow clean up without abort if there&apos;s a pre-PONR failure. We could actually continue to hide the pre- and post-PONR distinction from the API by adding a helper class that you create with an array of SplitTransaction, then call an &lt;tt&gt;execute&lt;/tt&gt; method. It would do the above coordination. We could call it &lt;tt&gt;SplitTransactions&lt;/tt&gt; ? &lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                            <comment id="14364492" author="jamestaylor" created="Tue, 17 Mar 2015 03:30:52 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; - have you seen the discussion over at &lt;a href=&quot;https://issues.apache.org/jira/browse/PHOENIX-1734&quot; title=&quot;Local index improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PHOENIX-1734&quot;&gt;&lt;del&gt;PHOENIX-1734&lt;/del&gt;&lt;/a&gt;? The approach there sounds like it won&apos;t need any of the co-location code, so this may not be necessary.&lt;/p&gt;</comment>
                            <comment id="14365530" author="apurtell" created="Tue, 17 Mar 2015 17:03:24 +0000"  >&lt;p&gt;Thanks for the pointer &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jamestaylor&quot; class=&quot;user-hover&quot; rel=&quot;jamestaylor&quot;&gt;James Taylor&lt;/a&gt;, I had not seen that issue yet.&lt;/p&gt;

&lt;p&gt;So &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajeshbabu&quot; class=&quot;user-hover&quot; rel=&quot;rajeshbabu&quot;&gt;Rajeshbabu Chintaguntla&lt;/a&gt;, it looks ok to proceed with this patch as-is. We could even drop the listener interface, but I suppose that could be independently useful, even though there would be no user for it today. Should we need to group more than one SplitTransaction into an uber-transaction, we can enhance the API with something like the &quot;SplitTransactions&quot; suggestion I made above.&lt;/p&gt;

&lt;p&gt;Unless I hear otherwise I will refresh the current patch and get it ready for review for commit.&lt;/p&gt;</comment>
                            <comment id="14367480" author="rajeshbabu" created="Wed, 18 Mar 2015 17:10:06 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;&lt;br/&gt;
I am ok to proceed with the current patch. It&apos;s very clean now. &lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;1. Instantiate N SplitTransactions
2. Run each SplitTransaction up to PONR. Can be done in parallel. If there&apos;s a failure, invoke the rollback method on all and try again and/or do some other remediation.
3. Run each SplitTransaction past PONR. Can be done in parallel. If there&apos;s a failure, the server must abort.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is the way I am also suggesting earlier to split multiple regions in a transaction.  &lt;/p&gt;</comment>
                            <comment id="14367729" author="stack" created="Wed, 18 Mar 2015 19:28:58 +0000"  >&lt;p&gt;Can this be Interface rather than impl?&lt;/p&gt;

&lt;p&gt; RegionMergeTransactionImpl rmt = new RegionMergeTransactionImpl(a, b, true);&lt;/p&gt;

&lt;p&gt;ditto&lt;/p&gt;

&lt;p&gt;   SplitTransactionImpl st = new SplitTransactionImpl(parent, midKey);&lt;/p&gt;

&lt;p&gt;Skimmed the rest. Looks good.&lt;/p&gt;</comment>
                            <comment id="14370234" author="apurtell" created="Thu, 19 Mar 2015 22:15:33 +0000"  >&lt;p&gt;I think the same concerns that &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; posted to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12972?focusedCommentId=14370058&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14370058&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-12972?focusedCommentId=14370058&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14370058&lt;/a&gt; are relevant here. My (frustrated) reaction is here: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12972?focusedCommentId=14370086&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14370086&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-12972?focusedCommentId=14370086&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14370086&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I&apos;ll also hold off here pending feedback on what we should do wrt branch-1&lt;/p&gt;</comment>
                            <comment id="14380773" author="apurtell" created="Wed, 25 Mar 2015 21:07:34 +0000"  >&lt;p&gt;Rebased patch on latest trunk&lt;/p&gt;</comment>
                            <comment id="14380868" author="apurtell" created="Wed, 25 Mar 2015 22:01:33 +0000"  >&lt;p&gt;If you&apos;re curious what &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12972&quot; title=&quot;Region, a supportable public/evolving subset of HRegion&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12972&quot;&gt;&lt;del&gt;HBASE-12972&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12975&quot; title=&quot;Supportable SplitTransaction and RegionMergeTransaction interfaces&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12975&quot;&gt;&lt;del&gt;HBASE-12975&lt;/del&gt;&lt;/a&gt; look like together, see &lt;a href=&quot;https://github.com/apurtell/hbase/tree/HBASE-12972+12975&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apurtell/hbase/tree/HBASE-12972+12975&lt;/a&gt; &lt;/p&gt;</comment>
                            <comment id="14383198" author="apurtell" created="Fri, 27 Mar 2015 01:54:01 +0000"  >&lt;p&gt;Any concerns if I commit this tomorrow to branch-1 and master (not branch-1.0 or 0.98)?&lt;/p&gt;</comment>
                            <comment id="14383338" author="rajeshbabu" created="Fri, 27 Mar 2015 05:04:51 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;&lt;br/&gt;
I am thinking more about split for APPROACH #3 at &lt;a href=&quot;https://issues.apache.org/jira/browse/PHOENIX-1734&quot; title=&quot;Local index improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PHOENIX-1734&quot;&gt;&lt;del&gt;PHOENIX-1734&lt;/del&gt;&lt;/a&gt;. For index column family store files we need to create both top and bottom reference files irrespective of split key in the store file key range.&lt;br/&gt;
To support this we need to add splitStoreFile to SplitTransaction interface and provide APIs to 1)create both top and bottom references irrespective of split key in the store file key range 2) create top and/or bottom references based on split key in the store file key range or not. &lt;br/&gt;
What do you say? &lt;/p&gt;

&lt;p&gt;And also as stack mentioned here &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12975?focusedCommentId=14367729&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14367729&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-12975?focusedCommentId=14367729&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14367729&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of using SplitTransactionImpl directly It&apos;s better to use split transaction implementation created from factory based on configuration.&lt;/p&gt;</comment>
                            <comment id="14384320" author="apurtell" created="Fri, 27 Mar 2015 18:33:27 +0000"  >&lt;blockquote&gt;
&lt;p&gt;And also as stack mentioned here&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12975?focusedCommentId=14367729&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14367729&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-12975?focusedCommentId=14367729&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14367729&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead of using SplitTransactionImpl directly It&apos;s better to use split transaction implementation created from factory based on configuration.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The latest patch does this, except for in some unit tests. But I will double check that some hunk wasn&apos;t missed.&lt;/p&gt;</comment>
                            <comment id="14384327" author="apurtell" created="Fri, 27 Mar 2015 18:35:26 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I am thinking more about split for APPROACH #3 at &lt;a href=&quot;https://issues.apache.org/jira/browse/PHOENIX-1734&quot; title=&quot;Local index improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PHOENIX-1734&quot;&gt;&lt;del&gt;PHOENIX-1734&lt;/del&gt;&lt;/a&gt;. For index column family store files we need to create both top and bottom reference files irrespective of split key in the store file key range.&lt;br/&gt;
To support this we need to add splitStoreFile to SplitTransaction interface and provide APIs to 1)create both top and bottom references irrespective of split key in the store file key range 2) create top and/or bottom references based on split key in the store file key range or not.&lt;br/&gt;
What do you say?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let&apos;s do this as follow on work. This issue splits out today&apos;s SplitTransaction and RegionMergeTransaction as interfaces and adds factories for them. What you propose sounds like additional new API and development work. Deserves its own issue.&lt;/p&gt;</comment>
                            <comment id="14384328" author="apurtell" created="Fri, 27 Mar 2015 18:36:07 +0000"  >&lt;p&gt;I&apos;m going to commit this tonight unless objection.&lt;/p&gt;</comment>
                            <comment id="14384337" author="rajeshbabu" created="Fri, 27 Mar 2015 18:38:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;Deserves its own issue.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Fine.&lt;br/&gt;
+1 to commit.&lt;/p&gt;</comment>
                            <comment id="14384396" author="apurtell" created="Fri, 27 Mar 2015 19:03:18 +0000"  >&lt;p&gt;Would you mind filing the new issue with thoughts about what you need? I can look at it next.&lt;/p&gt;</comment>
                            <comment id="14387170" author="apurtell" created="Mon, 30 Mar 2015 18:37:38 +0000"  >&lt;p&gt;This is held up by test failures in the branch-1 backport. I will put up new master and branch-1 patches here for Jenkins runs when ready. &lt;/p&gt;</comment>
                            <comment id="14387796" author="apurtell" created="Tue, 31 Mar 2015 01:42:50 +0000"  >&lt;p&gt;Patches for branch-1 and master, rebased after commit of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12972&quot; title=&quot;Region, a supportable public/evolving subset of HRegion&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12972&quot;&gt;&lt;del&gt;HBASE-12972&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14387925" author="hadoopqa" created="Tue, 31 Mar 2015 03:59:18 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12708286/HBASE-12975-branch-1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12708286/HBASE-12975-branch-1.patch&lt;/a&gt;&lt;br/&gt;
  against branch-1 branch at commit f1f4b6618334767d0da0f47965309b21676e7e9f.&lt;br/&gt;
  ATTACHMENT ID: 12708286&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 40 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 3813 checkstyle errors (more than the master&apos;s current 3811 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +  public static final String MERGE_TRANSACTION_IMPL_KEY = &quot;hbase.regionserver.merge.transaction.impl&quot;;&lt;br/&gt;
+          server != null &amp;amp;&amp;amp; server.getCoordinatedStateManager() != null ? ((BaseCoordinatedStateManager) server&lt;br/&gt;
+    p.addImmutable(HConstants.CATALOG_FAMILY, MetaTableAccessor.getStartCodeColumn(replicaId), null);&lt;br/&gt;
+          server != null &amp;amp;&amp;amp; server.getCoordinatedStateManager() != null ? ((BaseCoordinatedStateManager) server&lt;br/&gt;
+  public static final String SPLIT_TRANSACTION_IMPL_KEY = &quot;hbase.regionserver.split.transaction.impl&quot;;&lt;br/&gt;
+        expectedReferenceFileCount != FSUtils.getRegionReferenceFileCount(this.parent.getFilesystem(), dir)) {&lt;br/&gt;
+    p.addImmutable(HConstants.CATALOG_FAMILY, MetaTableAccessor.getStartCodeColumn(replicaId), null);&lt;br/&gt;
+  private Pair&amp;lt;Path, Path&amp;gt; splitStoreFile(final byte[] family, final StoreFile sf) throws IOException {&lt;br/&gt;
+  private SplitTransactionImpl prepareGOOD_SPLIT_ROW(final HRegion parentRegion) throws IOException {&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13499//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13499//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13499//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13499//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13499//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13499//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13499//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13499//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13499//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13499//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14388783" author="apurtell" created="Tue, 31 Mar 2015 16:22:10 +0000"  >&lt;p&gt;I will fix the long lines on commit. Going to commit shortly unless objection.&lt;/p&gt;</comment>
                            <comment id="14389806" author="apurtell" created="Wed, 1 Apr 2015 01:04:27 +0000"  >&lt;p&gt;What I committed. Fixes line lengths, checkstyle warns, javadoc nits, and local test failures.&lt;/p&gt;</comment>
                            <comment id="14389910" author="hudson" created="Wed, 1 Apr 2015 02:48:43 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.1 #342 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1/342/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1/342/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12975&quot; title=&quot;Supportable SplitTransaction and RegionMergeTransaction interfaces&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12975&quot;&gt;&lt;del&gt;HBASE-12975&lt;/del&gt;&lt;/a&gt; Supportable SplitTransaction and RegionMergeTransaction interfaces (apurtell: rev bf76082f5faf448d8491573acbb3b412c400ac31)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionServerObserver.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsck.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionMergeTransactionOnCluster.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransactionImpl.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeTransaction.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeTransactionImpl.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SplitRequest.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionMergeTransaction.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeTransactionFactory.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Region.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestEndToEndSplitTransaction.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterFailover.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransaction.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransaction.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransactionFactory.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeRequest.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14389926" author="hudson" created="Wed, 1 Apr 2015 03:16:36 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6326 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6326/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6326/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12975&quot; title=&quot;Supportable SplitTransaction and RegionMergeTransaction interfaces&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12975&quot;&gt;&lt;del&gt;HBASE-12975&lt;/del&gt;&lt;/a&gt; Supportable SplitTransaction and RegionMergeTransaction interfaces (apurtell: rev e156ed619c1e79055f9832456e6523ec6a2ae085)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SplitRequest.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionMergeTransactionOnCluster.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeRequest.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeTransactionFactory.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeTransactionImpl.java.rej&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestHBaseFsck.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransactionFactory.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/Region.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransaction.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeTransactionImpl.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionMergeTransaction.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestEndToEndSplitTransaction.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransaction.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeTransaction.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionServerObserver.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransactionImpl.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14391034" author="apurtell" created="Wed, 1 Apr 2015 17:27:02 +0000"  >&lt;p&gt;I checked the failures reported on &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6326/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6326/&lt;/a&gt; locally and all of them passed. &lt;/p&gt;</comment>
                            <comment id="14392281" author="srikanth235" created="Thu, 2 Apr 2015 07:20:20 +0000"  >&lt;p&gt;Looks like this commit introduced RAT warnings. Checked the stat on the commit and looks like .rej file got pushed accidentally..&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeTransactionImpl.java.rej |  10 +
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14392319" author="hudson" created="Thu, 2 Apr 2015 07:49:31 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6334 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6334/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6334/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13383&quot; title=&quot;TestRegionServerObserver.testCoprocessorHooksInRegionsMerge zombie after HBASE-12975&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13383&quot;&gt;&lt;del&gt;HBASE-13383&lt;/del&gt;&lt;/a&gt; TestRegionServerObserver.testCoprocessorHooksInRegionsMerge zombie after &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12975&quot; title=&quot;Supportable SplitTransaction and RegionMergeTransaction interfaces&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12975&quot;&gt;&lt;del&gt;HBASE-12975&lt;/del&gt;&lt;/a&gt; (apurtell: rev 2688e831e5ece1961752aed10240e4ab2506fda5)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeTransactionImpl.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14392922" author="apurtell" created="Thu, 2 Apr 2015 16:36:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;Checked the stat on the commit and looks like .rej file got pushed &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Thanks for the heads up. I have an addendum which deletes this file staged and will push it as soon as the Apache git front end is back up.&lt;/p&gt;</comment>
                            <comment id="14393140" author="apurtell" created="Thu, 2 Apr 2015 18:41:44 +0000"  >&lt;p&gt;Pushed the delete&lt;/p&gt;</comment>
                            <comment id="14393300" author="hudson" created="Thu, 2 Apr 2015 20:15:25 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #6337 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6337/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6337/&lt;/a&gt;)&lt;br/&gt;
Amend &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12975&quot; title=&quot;Supportable SplitTransaction and RegionMergeTransaction interfaces&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12975&quot;&gt;&lt;del&gt;HBASE-12975&lt;/del&gt;&lt;/a&gt; Supportable SplitTransaction and RegionMergeTransaction interfaces (apurtell: rev 1e6ea5aab7b0b93536ed11ac527e6f2504745a19)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionMergeTransactionImpl.java.rej&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14485744" author="rajeshbabu" created="Wed, 8 Apr 2015 18:30:07 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; Here &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13431&quot; title=&quot;Allow to skip store file range check based on column family while creating reference files in HRegionFileSystem#splitStoreFile&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13431&quot;&gt;&lt;del&gt;HBASE-13431&lt;/del&gt;&lt;/a&gt; I have raised the issue for local index change. It&apos;s ok for me to work on the JIRA if you don&apos;t have time.&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="14485752" author="rajeshbabu" created="Wed, 8 Apr 2015 18:33:41 +0000"  >&lt;p&gt;I am thinking about backporting this to 1.0.x because any way split transaction in internal and not exposed outside and only the compatibility changes are in coprocessors. If we leave the coprocessors without changing then this should be back ported. What do you say &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="14485927" author="apurtell" created="Wed, 8 Apr 2015 20:11:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;I am thinking about backporting this to 1.0.x because any way split transaction in internal and not exposed outside and only the compatibility changes are in coprocessors. If we leave the coprocessors without changing then this should be back ported. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds good, if we leave the coprocessor APIs as is and only make the private changes (and introduction of new LP interfaces) we should be good. &lt;/p&gt;</comment>
                            <comment id="14485928" author="apurtell" created="Wed, 8 Apr 2015 20:12:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;Here &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13431&quot; title=&quot;Allow to skip store file range check based on column family while creating reference files in HRegionFileSystem#splitStoreFile&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13431&quot;&gt;&lt;del&gt;HBASE-13431&lt;/del&gt;&lt;/a&gt; I have raised the issue for local index change. It&apos;s ok for me to work on the JIRA if you don&apos;t have time.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I can take it, happy to accommodate you.&lt;/p&gt;</comment>
                            <comment id="14571192" author="ndimiduk" created="Wed, 3 Jun 2015 15:29:35 +0000"  >&lt;p&gt;Closing issues released in 1.1.0.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12787526">HBASE-13383</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12787860">HBASE-13391</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12772493">HBASE-12972</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12819408">HBASE-13431</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12829035">HBASE-13667</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12759488">PHOENIX-1501</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12708578" name="HBASE-12975-branch-1.patch" size="185151" author="apurtell" created="Wed, 1 Apr 2015 01:04:27 +0000"/>
                            <attachment id="12708286" name="HBASE-12975-branch-1.patch" size="184249" author="apurtell" created="Tue, 31 Mar 2015 01:42:50 +0000"/>
                            <attachment id="12708577" name="HBASE-12975.patch" size="162449" author="apurtell" created="Wed, 1 Apr 2015 01:04:27 +0000"/>
                            <attachment id="12708285" name="HBASE-12975.patch" size="161554" author="apurtell" created="Tue, 31 Mar 2015 01:42:50 +0000"/>
                            <attachment id="12707328" name="HBASE-12975.patch" size="157171" author="apurtell" created="Wed, 25 Mar 2015 21:07:34 +0000"/>
                            <attachment id="12701528" name="HBASE-12975.patch" size="157494" author="apurtell" created="Sat, 28 Feb 2015 02:34:03 +0000"/>
                            <attachment id="12696785" name="HBASE-12975.patch" size="2453" author="rajeshbabu" created="Thu, 5 Feb 2015 16:28:03 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 5 Feb 2015 16:59:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 28 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i257x3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>