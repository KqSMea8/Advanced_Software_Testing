<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:21:28 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-17128/HBASE-17128.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-17128] Find Cause of a Write Perf Regression in branch-1.2</title>
                <link>https://issues.apache.org/jira/browse/HBASE-17128</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;As reported by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gbaecher&quot; class=&quot;user-hover&quot; rel=&quot;gbaecher&quot;&gt;Graham Baecher&lt;/a&gt; up on the mailing list, there is a regression in 1.2. The regression is in a CDH version of 1.2 actually but the CDH hbase is a near pure 1.2. This is a working issue to figure which of the below changes brought on slower writes (The list comes from doing the following...git log --oneline  remotes/origin/cdh5-1.2.0_5.8.0_dev..remotes/origin/cdh5-1.2.0_5.9.0_dev ... I stripped the few CDH specific changes, packaging and tagging only, and then made two groupings; candidates and the unlikelies):&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  1 bbc6762 HBASE-16023 Fastpath &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the FIFO rpcscheduler Adds an executor that does balanced queue and fast path handing off requests directly to waiting handlers &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; any present. Idea taken from Apace Kudu (incubating). See https:&lt;span class=&quot;code-comment&quot;&gt;//gerr#
&lt;/span&gt;  2 a260917 HBASE-16288 HFile intermediate block level indexes might recurse forever creating multi TB files
  3 5633281 HBASE-15811 Batch Get after batch Put does not fetch all Cells We were not waiting on all executors in a batch to complete. The test &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; no-more-executors was damaged by the 0.99/0.98.4 fix &quot;HBASE-11403 Fix race conditions aro#
  4 780f720 HBASE-11625 - Verifies data before building HFileBlock. - Adds HFileBlock.Header class which contains information about location of fields. Testing: Adds CorruptedFSReaderImpl to TestChecksum. (Apekshit)
  5 d735680 HBASE-12133 Add FastLongHistogram &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; metric computation (Yi Deng)
  6 c4ee832 HBASE-15222 Use less contended classes &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; metrics
  7
  8 17320a4 HBASE-15683 Min latency in latency histograms are emitted as &lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;.MAX_VALUE
  9 283b39f HBASE-15396 Enhance mapreduce.TableSplit to add encoded region name
 10 39db592 HBASE-16195 Should not add chunk into chunkQueue &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; not using chunk pool in HeapMemStoreLAB
 11 5ff28b7 HBASE-16194 Should count in MSLAB chunk allocation into heap size change when adding duplicate cells
 12 5e3e0d2 HBASE-16318 fail build &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; rendering velocity template &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; dependency license isn&apos;t in whitelist.
 13 3ed66e3 HBASE-16318 consistently use the correct name &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &apos;Apache License, Version 2.0&apos;
 14 351832d HBASE-16340 exclude Xerces iplementation jars from coming in transitively.
 15 b6aa4be HBASE-16321 ensure no findbugs-jsr305
 16 4f9dde7 HBASE-16317 revert all ESAPI changes
 17 71b6a8a HBASE-16284 Unauthorized client can shutdown the cluster (Deokwoo Han)
 18 523753f HBASE-16450 Shell tool to dump replication queues
 19 ca5f2ee HBASE-16379 [replication] Minor improvement to replication/copy_tables_desc.rb
 20 effd105 HBASE-16135 PeerClusterZnode under rs of removed peer may never be deleted
 21 a5c6610 HBASE-16319 Fix TestCacheOnWrite after HBASE-16288
 22 1956bb0 HBASE-15808 Reduce potential bulk load intermediate space usage and waste
 23 031c54e HBASE-16096 Backport. Cleanly remove replication peers from ZooKeeper.
 24 60a3b12 HBASE-14963 Remove use of Guava Stopwatch from HBase client code (Devaraj Das)
 25 c7724fc HBASE-16207 can&apos;t restore snapshot without &lt;span class=&quot;code-quote&quot;&gt;&quot;Admin&quot;&lt;/span&gt; permission
 26 8322a0b HBASE-16227 [Shell] Column value formatter not working in scans. Tested : manually using shell.
 27 8f86658 HBASE-14818 user_permission does not list namespace permissions (li xiang)
 28 775cd21 HBASE-15465 userPermission returned by getUserPermission() &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the selected namespace does not have namespace set (li xiang)
 29 8d85aff HBASE-16093 Fix splits failed before creating daughter regions leave meta inconsistent
 30 bc41317 HBASE-16140 bump owasp.esapi from 2.1.0 to 2.1.0.1
 31 6fc70cd HBASE-16035 Nested AutoCloseables might not all get closed (Sean Mackrory)
 32 fe28fe84 HBASE-15891. Closeable resources potentially not getting closed &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; exception is thrown.
 33 1d2bf3c HBASE-14644 Region in transition metric is broken -- addendum (Huaxiang Sun)
 34 fd5f56c HBASE-16056 Procedure v2 - fix master crash &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; FileNotFound
 35 10cd038 HBASE-16034 Fix ProcedureTestingUtility#LoadCounter.setMaxProcId()
 36 dae4db4 HBASE-15872 Split TestWALProcedureStore
 37 e638d86 HBASE-14644 Region in transition metric is broken (Huaxiang Sun)
 38 f01b01d HBASE-15496 Throw RowTooBigException only &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; user scan/get (Guanghao Zhang)
 39 cc0ce66 HBASE-15746 Remove extra RegionCoprocessor preClose() in RSRpcServices#closeRegion (Stephen Yuan Jiang)
 40 923f6d7 HBASE-15873 ACL &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; snapshot restore / clone is not enforced
 41 62df392 HBASE-15946. Eliminate possible security concerns in Store File metrics.
 42 293db90 HBASE-15925 provide &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; values &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; hadoop compat module related properties that match &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; hadoop profile.
 43 b1b5b66 HBASE-15889. &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; conversions are locale-sensitive, used without locale
 44 4a8c4e7 HBASE-15698 Increment TimeRange not serialized to server (Ted Yu)
 45 81c7620 HBASE-15663 Hook up JvmPauseMonitor to ThriftServer
 46 0d75f5b HBASE-15662 Hook up JvmPauseMonitor to REST server
 47 c099b61 HBASE-15614 Report metrics from JvmPauseMonitor
 48 46b1efe HBASE-15621 Suppress Hbase SnapshotHFile cleaner error messages when a snaphot is going on (Huaxiang Sun)
 49 26cfccf HBASE-15236 Addendum to fix test failures.
 50 b786db3 HBASE-15622 Superusers does not consider the keytab credentials
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="13021811">HBASE-17128</key>
            <summary>Find Cause of a Write Perf Regression in branch-1.2</summary>
                <type id="3" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/task.png">Task</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Fri, 18 Nov 2016 18:19:58 +0000</created>
                <updated>Sat, 10 Dec 2016 06:23:08 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>17</watches>
                                                                <comments>
                            <comment id="15678456" author="gbaecher" created="Sat, 19 Nov 2016 02:58:35 +0000"  >&lt;p&gt;Thanks, stack.&lt;/p&gt;

&lt;p&gt;The YCSB workload that&apos;s regressed for us is workload A. We&apos;ve been setting up the YCSB test table with 40 regions, loading the workload once, then running 10 times with the following configuration and averaging the results:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;recordcount=1000000&lt;br/&gt;
operationcount=1000000&lt;br/&gt;
workload=com.yahoo.ycsb.workloads.CoreWorkload&lt;/p&gt;

&lt;p&gt;readallfields=true&lt;/p&gt;

&lt;p&gt;readproportion=0.5&lt;br/&gt;
updateproportion=0.5&lt;br/&gt;
scanproportion=0&lt;br/&gt;
insertproportion=0&lt;/p&gt;

&lt;p&gt;requestdistribution=zipfian&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We&apos;ve tested against a couple different HDFS versions, CDH 5.7 and 5.9, and gotten similar results. Will next try isolating the performance change to those candidate commits you mentioned.&lt;/p&gt;

&lt;p&gt;I&apos;m away next week for Thanksgiving so won&apos;t be updating with any progress during that time.&lt;/p&gt;</comment>
                            <comment id="15680091" author="stack" created="Sun, 20 Nov 2016 00:06:42 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gbaecher&quot; class=&quot;user-hover&quot; rel=&quot;gbaecher&quot;&gt;Graham Baecher&lt;/a&gt;. Hopefully by the time you are back I will have reproduced your finding and found cause.&lt;/p&gt;</comment>
                            <comment id="15702601" author="stack" created="Mon, 28 Nov 2016 17:38:29 +0000"  >&lt;p&gt;Our &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=appy&quot; class=&quot;user-hover&quot; rel=&quot;appy&quot;&gt;Appy&lt;/a&gt; has been rereunning compares with workload A and is finding that throughput is improved by a  good bit. He finds that read is slower but writes are faster&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. What is your config like &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gbaecher&quot; class=&quot;user-hover&quot; rel=&quot;gbaecher&quot;&gt;Graham Baecher&lt;/a&gt; ? RAM?&lt;/p&gt;</comment>
                            <comment id="15703483" author="gbaecher" created="Mon, 28 Nov 2016 23:25:20 +0000"  >&lt;p&gt;Our test cluster is set up in AWS. As far as hardware specs, we&apos;re running 4 RegionServers on &lt;a href=&quot;http://www.ec2instances.info/?selected=d2.xlarge#d2.xlarge&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;d2.xlarge&lt;/a&gt; instances. Our YCSB workload is running on a &lt;a href=&quot;http://www.ec2instances.info/?selected=c3.4xlarge#c3.4xlarge&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;c3.4xlarge&lt;/a&gt;, with 500 threads for the workload runs.&lt;/p&gt;

&lt;p&gt;As far as configs, the RegionServers run on 25GB heaps, pretty standard configs, though I as I mentioned on the user list, we tested both CDH 5.7 and 5.9 with deadline callqueue instead of FIFO. We also have &lt;tt&gt;hbase.regionserver.wal.enablecompression&lt;/tt&gt; set to true.&lt;br/&gt;
For handler threads, we have:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;&lt;tt&gt;hbase.regionserver.handler.count&lt;/tt&gt; = 50&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;hbase.ipc.server.callqueue.handler.factor&lt;/tt&gt; = 0.3&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;hbase.ipc.server.callqueue.read.ratio&lt;/tt&gt; = 0.5&lt;/li&gt;
	&lt;li&gt;&lt;tt&gt;hbase.ipc.server.callqueue.scan.ratio&lt;/tt&gt; = 0.5&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We tested against the CDH 5.9 server code, with both CDH 5.4.5 and CDH 5.9 client code. With the CDH 5.9 client, workload A was actually slightly slower than with CDH 5.4.5. I did notice that CDH 5.9&apos;s reads were slower than CDH 5.4.5&apos;s while CDH 5.4.5&apos;s writes were slower than CDH 5.9&apos;s, which seems to match Appy&apos;s findings.&lt;/p&gt;

&lt;p&gt;For reference, on the setup above, here&apos;s what we&apos;re seeing for workload A:&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;(CDH 5.9 servers) &lt;/td&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;CDH 5.4.5 client&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;CDH 5.9 client&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Read mean latency&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;~4ms&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;~8ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Write mean latency&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;~28ms&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;~26ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;With a 50/50 read/write ratio, both of these are net regressions from CDH 5.8 server code:&lt;br/&gt;
running this workload with the CDH 5.4.5 client against CDH 5.8 RegionServers had averages slightly over 5 ms for reads and around 22 ms for writes, so running workload A against CDH 5.8 was much faster for us overall.&lt;/p&gt;</comment>
                            <comment id="15703606" author="stack" created="Mon, 28 Nov 2016 23:51:30 +0000"  >&lt;p&gt;Thanks for the detail. Will help.&lt;/p&gt;</comment>
                            <comment id="15703646" author="gbaecher" created="Tue, 29 Nov 2016 00:12:00 +0000"  >&lt;p&gt;Thanks stack.&lt;br/&gt;
We noticed these today: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16616&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-16616&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16146&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-16146&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Both seem potentially relevant. &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16616&quot; title=&quot;Rpc handlers stuck on ThreadLocalMap.expungeStaleEntry&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16616&quot;&gt;&lt;del&gt;HBASE-16616&lt;/del&gt;&lt;/a&gt; specifically mentions that G1GC isn&apos;t properly cleaning up some counters if they survive into Tenured space. We are using G1GC for these servers--can try some tests on our end to see if the regression goes away with a different garbage collector or with some metrics-related commits removed.&lt;/p&gt;</comment>
                            <comment id="15703777" author="appy" created="Tue, 29 Nov 2016 01:12:45 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gbaecher&quot; class=&quot;user-hover&quot; rel=&quot;gbaecher&quot;&gt;Graham Baecher&lt;/a&gt;, thanks for sharing the details.&lt;br/&gt;
&lt;a href=&quot;https://docs.google.com/a/cloudera.com/document/d/e/2PACX-1vSA9iZ9rtBvQgxm02vkaA1dL6P-cz6DVxOtq1U8VweyEjR5mfYfTvdEwUohJV1992mrxGzgZXgamBbX/pub&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Here&apos;s&lt;/a&gt; the rough doc i was keeping when running tests.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;we tested both CDH 5.7 and 5.9&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Those versions refer to version of the cluster or the client? Also, it&apos;d be great to have numbers for this too.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We tested against the CDH 5.9 server code, with both CDH 5.4.5 and CDH 5.9 client code.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;How exactly are you running with different clients? Afaik, ycsb has its own bindings (hbase10, hbase098, etc). By cdh5.4.5 client, do you mean you are using hbase098 binding and correspondingly, does cdh5.9 client means hbase10 binding? Maybe the exact commands will clear up things.&lt;/p&gt;</comment>
                            <comment id="15704202" author="stack" created="Tue, 29 Nov 2016 05:00:45 +0000"  >&lt;p&gt;There is also &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-17072&quot; title=&quot;CPU usage starts to climb up to 90-100% when using G1GC; purge ThreadLocal usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-17072&quot;&gt;&lt;del&gt;HBASE-17072&lt;/del&gt;&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gbaecher&quot; class=&quot;user-hover&quot; rel=&quot;gbaecher&quot;&gt;Graham Baecher&lt;/a&gt; You able to patch your hbase?&lt;/p&gt;</comment>
                            <comment id="15706106" author="gbaecher" created="Tue, 29 Nov 2016 18:25:53 +0000"  >&lt;p&gt;Thanks Appy. Looks like I don&apos;t have permission to view the doc though?&lt;/p&gt;

&lt;p&gt;Clarifications/specifics:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;We tested against &lt;a href=&quot;https://github.com/cloudera/hbase/tree/cdh5.7.0-release&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;CDH 5.7.0&lt;/a&gt;, &lt;a href=&quot;https://github.com/cloudera/hbase/tree/cdh5.8.0-release&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;CDH 5.8.0&lt;/a&gt;, and &lt;a href=&quot;https://github.com/cloudera/hbase/tree/cdh5.9.0-release&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;CDH 5.9.0&lt;/a&gt; RegionServers. We used YCSB with the &lt;a href=&quot;https://github.com/cloudera/hbase/tree/cdh5.4.5-release&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;CDH 5.4.5&lt;/a&gt; client to test all three; we also tested against the CDH 5.9.0 cluster with the 5.9.0 client.&lt;/li&gt;
	&lt;li&gt;We&apos;re running with different client versions by building the hbase10 YCSB module separately several times, changing the &lt;tt&gt;hbase-client&lt;/tt&gt; version dependency for each build. Then we unpack the tarball with the version we want to test on our test host and run a script which drops and re-creates the test table, then does the following:
	&lt;ul&gt;
		&lt;li&gt;&lt;tt&gt;bin/ycsb load hbase10 -jvm-arg &apos;-Xmx20480m&apos; -P workloads/$WORKLOAD -cp /etc/hbase/conf:/etc/hadoop/conf -threads 100 -p table=usertable -p columnfamily=family&lt;/tt&gt;&lt;/li&gt;
		&lt;li&gt;&lt;tt&gt;bin/ycsb run hbase10 -jvm-arg &apos;-Xmx20480m&apos; -P workloads/$WORKLOAD -cp /etc/hbase/conf:/etc/hadoop/conf -threads 500 -p table=usertable -p columnfamily=family&lt;/tt&gt; x 10&lt;/li&gt;
		&lt;li&gt;We then aggregate the results of 10 test runs (10M ops total) to try to remove some of the variability of YCSB results.&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Here are our numbers from testing with the CDH 5.4.5 client against 5.7, 5.8 and 5.9 clusters:&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;(CDH 5.4.5 client)&lt;/td&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;CDH 5.7.0 cluster&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;CDH 5.8.0 cluster&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;CDH 5.9.0 cluster&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Read mean latency&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.8 ms&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.25 ms&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.2 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Write mean latency&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;22.3 ms&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;21.6 ms&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;27.9 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</comment>
                            <comment id="15706682" author="gbaecher" created="Tue, 29 Nov 2016 22:04:36 +0000"  >&lt;p&gt;I re-ran workload A today against clusters that were running CDH 5.8 and CDH 5.9 with the default garbage collector instead of G1GC. The regression disappeared and CDH 5.9 performed significantly better than 5.8 overall, matching what Appy found above.&lt;/p&gt;

&lt;p&gt;I can indeed patch our HBase, stack. I&apos;ll try applying the patches from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16616&quot; title=&quot;Rpc handlers stuck on ThreadLocalMap.expungeStaleEntry&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16616&quot;&gt;&lt;del&gt;HBASE-16616&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16146&quot; title=&quot;Counters are expensive...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16146&quot;&gt;&lt;del&gt;HBASE-16146&lt;/del&gt;&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-17072&quot; title=&quot;CPU usage starts to climb up to 90-100% when using G1GC; purge ThreadLocal usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-17072&quot;&gt;&lt;del&gt;HBASE-17072&lt;/del&gt;&lt;/a&gt;, re-enabling G1GC on the RegionServers, and seeing if performance is still good.&lt;/p&gt;</comment>
                            <comment id="15706747" author="appy" created="Tue, 29 Nov 2016 22:28:21 +0000"  >&lt;p&gt;Nice, that looks good  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gbaecher&quot; class=&quot;user-hover&quot; rel=&quot;gbaecher&quot;&gt;Graham Baecher&lt;/a&gt;, keep us posted.&lt;br/&gt;
Btw, here&apos;s a copy of doc mentioned above from my personal account so that it&apos;s publicly visible (&lt;a href=&quot;https://docs.google.com/document/d/1DDWiA0ZVYRpvLk-uImDajXbG1d_XUN-xhC1CKBOcd8g/edit?usp=sharing&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/document/d/1DDWiA0ZVYRpvLk-uImDajXbG1d_XUN-xhC1CKBOcd8g/edit?usp=sharing&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="15713475" author="gbaecher" created="Fri, 2 Dec 2016 00:00:15 +0000"  >&lt;p&gt;Testing with G1GC enabled and the patches from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16616&quot; title=&quot;Rpc handlers stuck on ThreadLocalMap.expungeStaleEntry&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16616&quot;&gt;&lt;del&gt;HBASE-16616&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16146&quot; title=&quot;Counters are expensive...&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16146&quot;&gt;&lt;del&gt;HBASE-16146&lt;/del&gt;&lt;/a&gt;, it looks like there&apos;s still a regression, though there&apos;s some improvement with those two patches. I wasn&apos;t able to trivially apply the patch from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-17072&quot; title=&quot;CPU usage starts to climb up to 90-100% when using G1GC; purge ThreadLocal usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-17072&quot;&gt;&lt;del&gt;HBASE-17072&lt;/del&gt;&lt;/a&gt; so haven&apos;t included those changes yet.&lt;/p&gt;

&lt;p&gt;It looks like there might be more than just these few patches affecting G1GC performance, but if possible, a backport of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-17072&quot; title=&quot;CPU usage starts to climb up to 90-100% when using G1GC; purge ThreadLocal usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-17072&quot;&gt;&lt;del&gt;HBASE-17072&lt;/del&gt;&lt;/a&gt; would be helpful.&lt;/p&gt;

&lt;p&gt;My next step will be working on trying to isolate the performance difference in 1.2.0-cdh5.9.0 between G1GC and default GC. Hopefully can narrow it down to to one or more of the likely commits you mentioned at the top.&lt;/p&gt;</comment>
                            <comment id="15717532" author="stack" created="Sat, 3 Dec 2016 06:24:44 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gbaecher&quot; class=&quot;user-hover&quot; rel=&quot;gbaecher&quot;&gt;Graham Baecher&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-17072&quot; title=&quot;CPU usage starts to climb up to 90-100% when using G1GC; purge ThreadLocal usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-17072&quot;&gt;&lt;del&gt;HBASE-17072&lt;/del&gt;&lt;/a&gt; is pretty small change. This is on top of a 5.8/5.9? Let me know and I&apos;ll have a go at it...&lt;/p&gt;</comment>
                            <comment id="15718324" author="bbeaudreault" created="Sat, 3 Dec 2016 16:12:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; yep, this is on top of cdh5.9. That would be great, thanks!&lt;/p&gt;</comment>
                            <comment id="15736444" author="stack" created="Fri, 9 Dec 2016 21:51:48 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=bbeaudreault&quot; class=&quot;user-hover&quot; rel=&quot;bbeaudreault&quot;&gt;Bryan Beaudreault&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gbaecher&quot; class=&quot;user-hover&quot; rel=&quot;gbaecher&quot;&gt;Graham Baecher&lt;/a&gt; FYI&lt;/p&gt;</comment>
                            <comment id="15737336" author="bbeaudreault" created="Sat, 10 Dec 2016 06:23:08 +0000"  >&lt;p&gt;Thank you &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;. Much appreciated. We&apos;re gonna run the perf test again with this patch included, and will update with our results.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12842615" name="17072.5.9.txt" size="13682" author="stack" created="Fri, 9 Dec 2016 21:51:48 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 19 Nov 2016 02:58:35 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i36ijb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>