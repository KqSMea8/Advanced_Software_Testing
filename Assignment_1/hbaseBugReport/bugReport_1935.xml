<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:57:35 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-1935/HBASE-1935.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-1935] Scan in parallel</title>
                <link>https://issues.apache.org/jira/browse/HBASE-1935</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;A scanner that rather than scan in series, instead scanned multiple regions in parallell would be more involved but could complete much faster partiularly if results are sparse.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12439048">HBASE-1935</key>
            <summary>Scan in parallel</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Mon, 26 Oct 2009 06:00:44 +0000</created>
                <updated>Fri, 9 Dec 2016 07:52:38 +0000</updated>
                                                                            <component>Coprocessors</component>
                        <due></due>
                            <votes>9</votes>
                                    <watches>37</watches>
                                                                <comments>
                            <comment id="12769904" author="stack" created="Mon, 26 Oct 2009 06:02:41 +0000"  >&lt;p&gt;Here is a first attempt.  Maybe someone would like to take it on?  It runs scanners against multiple regions concurrently and then aggregates the results. Includes a unit test but needs convertion to new style client-side test (Only two of the tests in the unit test are for parallel scanning).&lt;/p&gt;</comment>
                            <comment id="12770087" author="streamy" created="Mon, 26 Oct 2009 16:52:08 +0000"  >&lt;p&gt;Went over the patch twice.  Looks pretty good.&lt;/p&gt;

&lt;p&gt;There is some cross-over with work done in Multi operations (MultiGet, MultiDelete, etc..).  I think the first thing to decide is if we want to create some unified threading system or take passed-in ExecutorServices as is done with the patch.  And do we need a special ParallelHTable, or should the normal HTable support threading?  I believe the latter.&lt;/p&gt;

&lt;p&gt;At either the HCM or HTable level, I think we should have a local, bounded ExecutorService pool.  You would be able to modify its size through the constructor, but default settings would come from something in the conf like hbase.client.threads.&lt;/p&gt;

&lt;p&gt;One thing I do like (at least for early versions of threaded clients) is just failing immediately when encountering a problem like a split.  Properly handling this is one of the hardest parts about this (and other things like stateful filters), and retries are tricky and imperfect.  With batched/parallel reads (get or scan) we should just fail-fast and throw exceptions to let the client deal.  With batched/parallel writes (put or delete) we should process what we can and return back to the client what was not completed.&lt;/p&gt;

&lt;p&gt;Another thing I&apos;m a little confused about... this seems to be designed for completely out-of-order receipt of results.  Rather than aggregating up a list of Futures, and then waiting for them to complete in order, this uses a ExecutorCompletionService which returns things as they finish.  I can see in certain use cases this would make sense, but is a bit more limited.  However, I don&apos;t see why we can&apos;t support both using two different task completion-waiting paths and with very small changes to the constructor APIs.&lt;/p&gt;</comment>
                            <comment id="12770304" author="stack" created="Tue, 27 Oct 2009 00:11:31 +0000"  >&lt;p&gt;Would be sweet if we could get parallel into stock HTable.  Also if cross-over with multiget, multidelete, lets make single system.&lt;/p&gt;

&lt;p&gt;Agree on how to handle errors during batch puts/gets.&lt;/p&gt;

&lt;p&gt;I like the idea of supporting both in-order and out-of-order.&lt;/p&gt;</comment>
                            <comment id="12771103" author="dan.washusen" created="Wed, 28 Oct 2009 20:46:37 +0000"  >&lt;p&gt;re. out-of-order receipt of results&lt;/p&gt;

&lt;p&gt;What do you see as the benefits in parallel scanning with results in order?&lt;/p&gt;

&lt;p&gt;The &apos;RegionCallable&apos; defined at line 3109 of the patch opens a scanner on a specific region server.  The same scanner is then used for all results returned from that region.  If you wanted to receive results in-order the time saved would be;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The time taken to switch from one region to the next.  For example, while iterating over results from region 1 you could start fetching results from region 2.&lt;/li&gt;
	&lt;li&gt;The time spent by the client iterating over the results returned in that batch before asking the server side scanner for the next batch.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;re. startRow and endRow restrictions&lt;/p&gt;

&lt;p&gt;The ParallelHTable in this patch (line 3608) falls back to a sequential scan if the scan has a startRow or endRow defined.  It should be possible to use the parallel scanner with out-of-order receipt of results if either of these values are specified.  The scanner could list all regions and for each region see if it&apos;s startKey and endKey fall within the scan&apos;s startRow and endRow.  If it does scan it.&lt;/p&gt;

&lt;p&gt;I&apos;m probably stating the obvious with both those points but I&apos;m new to HBase so you&apos;ll have to forgive me. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br/&gt;
Dan&lt;/p&gt;</comment>
                            <comment id="12774107" author="stack" created="Thu, 5 Nov 2009 22:10:16 +0000"  >&lt;p&gt;Here&apos;s a v2 that adds the ability to parallel scan when either/both the startRow and stopRow are specified.  There are also more tests included...&lt;/p&gt;</comment>
                            <comment id="12783985" author="dan.washusen" created="Tue, 1 Dec 2009 01:28:17 +0000"  >&lt;p&gt;There is a minor bug in v2 of the patch.  The logic in the ParallelScannerManager to determine if a scan is interested in a region doesn&apos;t handle the case when there is only one region.  &lt;/p&gt;

&lt;p&gt;The following fixes it:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Set&amp;lt;HRegionInfo&amp;gt; regions = table.getRegionsInfo().keySet();
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (HRegionInfo region : regions) {
  ...
  &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; isScanInterestedInRegion = (scan.getStartRow().length == 0 &amp;amp;&amp;amp; scan.getStopRow().length == 0) || regions.size() == 1;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

</comment>
                            <comment id="12790306" author="stack" created="Mon, 14 Dec 2009 19:33:41 +0000"  >&lt;p&gt;v3 of parallel scanner.  Includes Dan&apos;s fix suggested above.  Also It fixes issues with the logic that determines if a scan is interested in a region.&lt;/p&gt;</comment>
                            <comment id="12792024" author="stack" created="Thu, 17 Dec 2009 17:39:02 +0000"  >&lt;p&gt;More fixes and more tests.&lt;/p&gt;</comment>
                            <comment id="12792025" author="stack" created="Thu, 17 Dec 2009 17:48:14 +0000"  >&lt;p&gt;I&apos;ll commit this soon unless objection.&lt;/p&gt;</comment>
                            <comment id="12796050" author="stack" created="Mon, 4 Jan 2010 00:07:10 +0000"  >&lt;p&gt;Moving to 0.21.  Lets look at merging this functionality back up into HTable rather than have it in a class of its own.  Also, consider doing this functionality in coprocessors if it makes sense.&lt;/p&gt;</comment>
                            <comment id="12867035" author="stack" created="Thu, 13 May 2010 04:42:13 +0000"  >&lt;p&gt;Moved from 0.21 to 0.22 just after merge of old 0.20 branch into TRUNK.&lt;/p&gt;</comment>
                            <comment id="12999497" author="otis" created="Fri, 25 Feb 2011 19:35:18 +0000"  >&lt;p&gt;I&apos;m wondering what sort of a speed improvement one can expect from parallel scans?  I know there is no universal answer, but if anyone has used this, I&apos;d love to get the feeling for this.  Thanks.&lt;/p&gt;</comment>
                            <comment id="12999886" author="stack" created="Sun, 27 Feb 2011 05:31:57 +0000"  >&lt;p&gt;@Otis I&apos;d imagine parallel scanning would make for some very nice speed improvement especially in case where you have a pretty severe filter running serverside that skips most rows returning a few only.  The patch attached has a bit of a wonky history.  I&apos;ll spare you the details.  Its way stale too I&apos;d say, I haven&apos;t tried it, and may depend on behavior on server side since squashed (again, haven&apos;t verified).  Also, the support for parallel scanning should be moved into HTable I&apos;d say (as someone above says) rather than have it out in a new ParallelHTable class.  The patch has very nice tests though.&lt;/p&gt;</comment>
                            <comment id="13047524" author="stack" created="Fri, 10 Jun 2011 22:45:38 +0000"  >&lt;p&gt;Moving out of 0.92.0. Pull it back in if you think different.&lt;/p&gt;</comment>
                            <comment id="13107340" author="lhofhansl" created="Sun, 18 Sep 2011 04:26:36 +0000"  >&lt;p&gt;I wonder if a better building block would to be able to submit a scan to a region via HTable.&lt;/p&gt;

&lt;p&gt;For example we have a need not necessarily for a parallel &quot;serial&quot; scan, but rather for a bunch of parallel scans that (via coprocessors) perform some aggregation and then perform a merge sort of the results at the client.&lt;br/&gt;
And of course this can also be used for parallel serial scans in the case of highly selective filters.&lt;/p&gt;

&lt;p&gt;That would make for very small simple patch (management of threads, merging results, etc, would be application specific and not part of HBase).&lt;/p&gt;

&lt;p&gt;The user visible API could be something as simple as (on HTable&lt;span class=&quot;error&quot;&gt;&amp;#91;Interface&amp;#93;&lt;/span&gt;):&lt;br/&gt;
ResultScanner getScanner(Scan, HRegionInfo)&lt;/p&gt;

&lt;p&gt;And maybe something like the ParallelScannerManager could be added as an example&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13107545" author="lhofhansl" created="Sun, 18 Sep 2011 21:56:18 +0000"  >&lt;p&gt;Here&apos;s what I was thinking. Very simple, non-intrusive. Just an idea for much simpler patch that does not presume exact behavioral requirements.&lt;/p&gt;

&lt;p&gt;Actually I do not even see a strong reason why client scanners need to &quot;live&quot; inside HTable.&lt;br/&gt;
The only HTable method used is getConnection() (which interestingly seems to be scheduled to be changed from public to protected or package scope).&lt;/p&gt;

&lt;p&gt;If getConnection remains public, together with ServerCallable, one can write parallel (or any kind of) scanners without changing HBase code.&lt;/p&gt;</comment>
                            <comment id="13107554" author="apurtell" created="Sun, 18 Sep 2011 22:33:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;Actually I do not even see a strong reason why client scanners need to &quot;live&quot; inside HTable.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 Perhaps we can deprecate those methods and move scanners out to their own package and/or class.&lt;/p&gt;</comment>
                            <comment id="13108045" author="stack" created="Mon, 19 Sep 2011 18:33:24 +0000"  >&lt;p&gt;The change of getConnection visibility was just house-cleaning tightening of public API.  Seems like you are making case that it stay public.  If so, lets fix that before we go to much further w/ 0.92 branch.&lt;/p&gt;

&lt;p&gt;I&apos;m grand w/ this patch.  Small change that would facilitate exotic behaviors.&lt;/p&gt;</comment>
                            <comment id="13108047" author="lhofhansl" created="Mon, 19 Sep 2011 18:40:02 +0000"  >&lt;p&gt;I&apos;ve since realized that HConnectionManager.getConnection(Configuration) can be used outside of HTable as well, so HTable.getConnection does not have to be public.&lt;/p&gt;</comment>
                            <comment id="13108237" author="lhofhansl" created="Mon, 19 Sep 2011 23:37:22 +0000"  >&lt;p&gt;Created &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4439&quot; title=&quot;Move ClientScanner out of HTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4439&quot;&gt;&lt;del&gt;HBASE-4439&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Thinking about this issue a bit more. The patch-idea I provided is actually superfluous.&lt;/p&gt;

&lt;p&gt;The same can be achieved, by just passing a Scan with start/endRow set to a Regions start/endRow to HTable.getScanner(Scan), this also has the added benefit of dealing with concurrent splits.&lt;/p&gt;

&lt;p&gt;That is also how one could implement a parallel scanner with much less effort.&lt;/p&gt;</comment>
                            <comment id="13630711" author="giacomotaylor" created="Fri, 12 Apr 2013 22:46:10 +0000"  >&lt;p&gt;Would it be possible to revive this JIRA? It&apos;d be nice to have a ParallelClientScanner that you can hand a list of Scans to execute in parallel.&lt;/p&gt;</comment>
                            <comment id="13630817" author="stack" created="Sat, 13 Apr 2013 00:26:28 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=giacomotaylor&quot; class=&quot;user-hover&quot; rel=&quot;giacomotaylor&quot;&gt;James Taylor&lt;/a&gt; it is a little silly we don&apos;t do this currently. I&apos;d say the original patch is well stale and we should probably start over.  Anyone you know willing to work on this?&lt;/p&gt;</comment>
                            <comment id="13632454" author="colorant" created="Tue, 16 Apr 2013 01:00:42 +0000"  >&lt;p&gt;Interesting topic, which part of the issue is most difficult? I am sort of interesting on this issue but not sure I have the adequate knowledge.&lt;/p&gt;</comment>
                            <comment id="15734614" author="water" created="Fri, 9 Dec 2016 07:52:38 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, I am quite interested on this, and would like to follow the work based on yours and Lars(in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9272&quot; title=&quot;A parallel, unordered scanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9272&quot;&gt;HBASE-9272&lt;/a&gt;) to see if I can do something. I am reading code and comment history of both JIRAs, and there might be a long list of questions to bother you, thanks you in advance! I am also reading &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16833&quot; title=&quot;Implement asynchronous hbase client based on HBASE-15921&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16833&quot;&gt;HBASE-16833&lt;/a&gt; (about async client by Duo Zhang) as I feel I can learn some ideas of it. &lt;br/&gt;
1 quick question: Could you please share the reason why you stopped at that time?&lt;br/&gt;
Please feel free to comment if you have any!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12469467">HBASE-2839</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12441379">HBASE-2002</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12441373">HBASE-2000</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12664651">HBASE-9272</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12494987" name="1935-idea.txt" size="12090" author="lhofhansl" created="Sun, 18 Sep 2011 21:56:18 +0000"/>
                            <attachment id="12424160" name="pscanner-v2.patch" size="137103" author="stack" created="Thu, 5 Nov 2009 22:10:16 +0000"/>
                            <attachment id="12427947" name="pscanner-v3.patch" size="140845" author="stack" created="Mon, 14 Dec 2009 19:33:41 +0000"/>
                            <attachment id="12428311" name="pscanner-v4.patch" size="140462" author="stack" created="Thu, 17 Dec 2009 17:39:02 +0000"/>
                            <attachment id="12423165" name="pscanner.patch" size="133488" author="stack" created="Mon, 26 Oct 2009 06:02:41 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 26 Oct 2009 16:52:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32317</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 week ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hfx3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>99841</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>