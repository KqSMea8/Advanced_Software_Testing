<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:52:00 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14331/HBASE-14331.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14331] a single callQueue related improvements</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14331</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;&lt;tt&gt;LinkedBlockingQueue&lt;/tt&gt; well separates locks between the &lt;tt&gt;take&lt;/tt&gt; method and the &lt;tt&gt;put&lt;/tt&gt; method, but not between takers, and not between putters. These methods are implemented to take locks at the almost beginning of their logic. &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11355&quot; title=&quot;a couple of callQueue related improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11355&quot;&gt;&lt;del&gt;HBASE-11355&lt;/del&gt;&lt;/a&gt; introduces multiple call-queues to reduce such possible congestion, but I doubt that it is required to stick to &lt;tt&gt;BlockingQueue&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;There are the other shortcomings of using &lt;tt&gt;BlockingQueue&lt;/tt&gt;. When using multiple queues, since &lt;tt&gt;BlockingQueue&lt;/tt&gt; blocks threads it is required to prepare enough threads for each queue. It is possible that there is a queue starving for threads while there is another queue where threads are idle. Even if you can tune parameters to avoid such situations, the tuning is not so trivial.&lt;/p&gt;

&lt;p&gt;I suggest using a single &lt;tt&gt;ConcurrentLinkedQueue&lt;/tt&gt; with &lt;tt&gt;Semaphore&lt;/tt&gt;.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12859840">HBASE-14331</key>
            <summary>a single callQueue related improvements</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="10002" iconUrl="https://issues.apache.org/jira/images/icons/statuses/document.png" description="A patch for this issue has been uploaded to JIRA by a contributor.">Patch Available</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="ikeda">Hiroshi Ikeda</assignee>
                                    <reporter username="ikeda">Hiroshi Ikeda</reporter>
                        <labels>
                    </labels>
                <created>Fri, 28 Aug 2015 08:03:57 +0000</created>
                <updated>Wed, 15 Jun 2016 22:49:13 +0000</updated>
                                                                            <component>IPC/RPC</component>
                    <component>Performance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="14718198" author="ikeda" created="Fri, 28 Aug 2015 08:22:34 +0000"  >&lt;p&gt;Added a simple application to check performance between &lt;tt&gt;LinkedBlockingQueue&lt;/tt&gt; and &lt;tt&gt;ConcurrentLinkedQueue&lt;/tt&gt; with &lt;tt&gt;Semaphore&lt;/tt&gt;. The callQueue here is not one in HBase but is defined inside as a mere simple interface. This application also show how many threads to read from the queue were simultaneously waken.&lt;/p&gt;

&lt;p&gt;In my environment using &lt;tt&gt;ConcurrentLinkedQueue&lt;/tt&gt; is about 1.5-2 times faster, aside from whether the performance test practically makes sense.&lt;/p&gt;</comment>
                            <comment id="14720048" author="yuzhihong@gmail.com" created="Fri, 28 Aug 2015 15:57:28 +0000"  >&lt;p&gt;In HBase, there is BoundedConcurrentLinkedQueue&lt;br/&gt;
Can you expand your program by including BoundedConcurrentLinkedQueue ?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="14722832" author="ikeda" created="Mon, 31 Aug 2015 05:17:14 +0000"  >&lt;p&gt;&lt;tt&gt;BoundedConcurrentLinkedQueue&lt;/tt&gt; is a class which just extends &lt;tt&gt;ConcurrentLinkedQueue&lt;/tt&gt; and adds the boundary (but it seems to have bugs about &lt;tt&gt;Iterator.remove&lt;/tt&gt; and methods internally using the &lt;tt&gt;Iterator.remove]}), and doesn&apos;t implement BlockingQueue. That means {{Semaphore&lt;/tt&gt; or something is required for exclusive control after all.&lt;/p&gt;</comment>
                            <comment id="14722947" author="ikeda" created="Mon, 31 Aug 2015 05:41:08 +0000"  >&lt;p&gt;Added trial semaphore based blocking classes, and a performance test application.&lt;/p&gt;

&lt;p&gt;Despite I said I doubted sticking to &lt;tt&gt;BlockingQueue&lt;/tt&gt;, I tried to implement &lt;tt&gt;BlockingQueue&lt;/tt&gt;. That is because the main logic around the call queue is just executing tasks with threads, and it seems preferable to replace it with &lt;tt&gt;ThreadPoolExecutor&lt;/tt&gt;, which also accept only &lt;tt&gt;BlockingQueue&lt;/tt&gt; as its task queue.&lt;/p&gt;

&lt;p&gt;But some methods can be just unsupported (around the &lt;tt&gt;Iterator.remove&lt;/tt&gt; method) though the contract of the implemented interfaces allows it, and the implemented classes cannot be used with &lt;tt&gt;ThreadPoolExecutor&lt;/tt&gt;. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14723069" author="ikeda" created="Mon, 31 Aug 2015 07:20:04 +0000"  >&lt;p&gt;Added a result of the performance test in my environment, which has 8 cpu cores.&lt;/p&gt;

&lt;p&gt;It compares (1)&lt;tt&gt;LinkedBlockingQueue&lt;/tt&gt; in the standard Java library, (2)&lt;tt&gt;BoundedPriorityBlockingQueue&lt;/tt&gt; in HBase, and the newly implemented classes, (3)&lt;tt&gt;SemaphoreBasedLinkedBlockingQueue&lt;/tt&gt; and (4)&lt;tt&gt;SemaphoreBasedPriorityBlockingQueue&lt;/tt&gt;. I just changed the code of the test application to add (2)&lt;tt&gt;BoundedPriorityBlockingQueue&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The tasks are just executing &lt;tt&gt;Thread.yield&lt;/tt&gt; and there should be excessively context switches, but the result says, the reading threads in the existing queues, (1)&lt;tt&gt;LinkedBlockingQueue&lt;/tt&gt; and (2)&lt;tt&gt;BoundPriorityBlockingQueue&lt;/tt&gt;, are rarely waken up. That means many reading threads are blocked in the queues.&lt;/p&gt;</comment>
                            <comment id="14724142" author="yuzhihong@gmail.com" created="Mon, 31 Aug 2015 22:22:16 +0000"  >&lt;p&gt;Can you put the three new Java classes in a single patch with proper Apache License header ?&lt;/p&gt;

&lt;p&gt;Looks like SemaphoreBasedLinkedBlockingQueue is better than SemaphoreBasedPriorityBlockingQueue when waked read threads - tasks are high.&lt;br/&gt;
What&apos;s your interpretation ?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="14724156" author="yuzhihong@gmail.com" created="Mon, 31 Aug 2015 22:30:42 +0000"  >&lt;p&gt;For the two BlockingQueue implementations, please add unit tests.&lt;/p&gt;</comment>
                            <comment id="14724631" author="ikeda" created="Tue, 1 Sep 2015 02:40:13 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Can you put the three new Java classes in a single patch with proper Apache License header ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;For the two BlockingQueue implementations, please add unit tests.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The added classes are yet trial and they even have no package declaration. I&apos;ll make them into a single patch with tests when I find how I should inject these classes into the call-queue logic. It is the easiest to just replace existing classes with the new classes, but it may be too rough.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Looks like SemaphoreBasedLinkedBlockingQueue is better than SemaphoreBasedPriorityBlockingQueue when waked read threads - tasks are high.&lt;br/&gt;
What&apos;s your interpretation ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The priority queue is not FIFO. Added elements in the queue are sorted with a comparator, and the least element are given by polling. This process is apparently heavier than just adding a element to the tail of the queue, and comparing such queues is not fair.&lt;/p&gt;</comment>
                            <comment id="14734507" author="ikeda" created="Tue, 8 Sep 2015 09:28:09 +0000"  >&lt;p&gt;Sorry, it has just struck me that my implementation of the &lt;tt&gt;remove(Object)&lt;/tt&gt; method is inconsistent with the other methods.&lt;br/&gt;
The method cannot throw &lt;tt&gt;UnsupportedOperationException&lt;/tt&gt; in the contract of &lt;tt&gt;BlockingQueue&lt;/tt&gt;, and it would be better to define a new interface which has just &lt;tt&gt;take&lt;/tt&gt; and &lt;tt&gt;put&lt;/tt&gt;, but &lt;tt&gt;BalancedQueueRpcExecutor&lt;/tt&gt; and &lt;tt&gt;RWQueueRpcExecutor&lt;/tt&gt; are published to &quot;Coprocesssor&quot; and &quot;Phoenix&quot; with unbelievably messy constructors so that it is quite difficult.&lt;/p&gt;

&lt;p&gt;For now, I&apos;ll append the broken classes in package private.&lt;/p&gt;</comment>
                            <comment id="14735306" author="ikeda" created="Tue, 8 Sep 2015 18:11:12 +0000"  >&lt;p&gt;Added a patch.&lt;/p&gt;

&lt;p&gt;I did create a new interface &lt;tt&gt;CallQueue&lt;/tt&gt; instead of adding broken &lt;tt&gt;BlockingQueue&lt;/tt&gt; implementation classes.&lt;/p&gt;</comment>
                            <comment id="14735504" author="hadoopqa" created="Tue, 8 Sep 2015 20:02:31 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12754687/HBASE-14331.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12754687/HBASE-14331.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit e95358a7fc3f554dcbb351c8b7295cafc01e8c23.&lt;br/&gt;
  ATTACHMENT ID: 12754687&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1837 checkstyle errors (more than the master&apos;s current 1834 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15468//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15468//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15468//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15468//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15468//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15468//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15468//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15468//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14736169" author="stack" created="Wed, 9 Sep 2015 04:58:36 +0000"  >&lt;p&gt;These are the tests that went zombie&lt;/p&gt;

&lt;p&gt;kalashnikov:hbase.git stack$ python dev-support/findHangingTests.py &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15468//consoleText&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15468//consoleText&lt;/a&gt;&lt;br/&gt;
Fetching the console output from the URL&lt;br/&gt;
Printing hanging tests&lt;br/&gt;
Hanging test : org.apache.hadoop.hbase.snapshot.TestMobSecureExportSnapshot&lt;br/&gt;
Hanging test : org.apache.hadoop.hbase.snapshot.TestMobExportSnapshot&lt;br/&gt;
Hanging test : org.apache.hadoop.hbase.mob.compactions.TestMobCompactor&lt;br/&gt;
Hanging test : org.apache.hadoop.hbase.mob.mapreduce.TestMobSweepJob&lt;br/&gt;
Hanging test : org.apache.hadoop.hbase.util.TestMiniClusterLoadParallel&lt;br/&gt;
Hanging test : org.apache.hadoop.hbase.util.TestHBaseFsck&lt;br/&gt;
Hanging test : org.apache.hadoop.hbase.util.TestMiniClusterLoadEncoded&lt;br/&gt;
Hanging test : org.apache.hadoop.hbase.snapshot.TestExportSnapshot&lt;br/&gt;
Printing Failing tests&lt;br/&gt;
Failing test : org.apache.hadoop.hbase.util.TestMiniClusterLoadSequential&lt;/p&gt;

&lt;p&gt;Let me retry patch.&lt;/p&gt;</comment>
                            <comment id="14736238" author="ikeda" created="Wed, 9 Sep 2015 06:04:09 +0000"  >&lt;p&gt;Added a revised patch.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Fixed a bug of using a wrong variable when starting handlers in RW-queue, and a bug of not adjusting the count of scan handlers.&lt;/li&gt;
	&lt;li&gt;Fixed a bug of the existing class for RW-queue.&lt;/li&gt;
	&lt;li&gt;Refactored.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14736363" author="hadoopqa" created="Wed, 9 Sep 2015 07:25:28 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12754820/HBASE-14331.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12754820/HBASE-14331.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit e95358a7fc3f554dcbb351c8b7295cafc01e8c23.&lt;br/&gt;
  ATTACHMENT ID: 12754820&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1837 checkstyle errors (more than the master&apos;s current 1834 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.util.TestMiniClusterLoadEncoded&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestMiniClusterLoadParallel&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 7 zombie test(s): 	at org.apache.hadoop.hbase.mapreduce.TestHFileOutputFormat2.testMRIncrementalLoadWithLocality(TestHFileOutputFormat2.java:400)&lt;br/&gt;
	at org.apache.hadoop.hbase.mapred.TestTableSnapshotInputFormat.testWithMapReduceImpl(TestTableSnapshotInputFormat.java:225)&lt;br/&gt;
	at org.apache.hadoop.hbase.mapreduce.TableSnapshotInputFormatTestBase.testWithMapReduce(TableSnapshotInputFormatTestBase.java:161)&lt;br/&gt;
	at org.apache.hadoop.hbase.mapred.TestTableSnapshotInputFormat.testWithMapReduceAndOfflineHBaseMultiRegion(TestTableSnapshotInputFormat.java:148)&lt;br/&gt;
	at org.apache.hadoop.hbase.regionserver.wal.TestWALReplay.testReplayEditsAfterRegionMovedWithMultiCF(TestWALReplay.java:218)&lt;br/&gt;
	at org.apache.hadoop.hbase.TestZooKeeper.testLogSplittingAfterMasterRecoveryDueToZKExpiry(TestZooKeeper.java:626)&lt;br/&gt;
	at org.apache.hadoop.hbase.mapreduce.MultiTableInputFormatTestBase.testScan(MultiTableInputFormatTestBase.java:255)&lt;br/&gt;
	at org.apache.hadoop.hbase.mapreduce.MultiTableInputFormatTestBase.testScanEmptyToEmpty(MultiTableInputFormatTestBase.java:196)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15490//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15490//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15490//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15490//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15490//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15490//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15490//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15490//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14736406" author="ikeda" created="Wed, 9 Sep 2015 08:00:28 +0000"  >&lt;p&gt;About this patch.&lt;/p&gt;

&lt;p&gt;This patch uses &lt;tt&gt;Semaphore&lt;/tt&gt; based queue instead of &lt;tt&gt;BlockingQueue&lt;/tt&gt;, unless &lt;tt&gt;org.apache.hadoop.hbase.ipc.CallQueueFactories.useBlockingQueue=true&lt;/tt&gt; in the configuration, which uses adapters from &lt;tt&gt;BlockingQueue&lt;/tt&gt;, and the property is just intended for tests.&lt;/p&gt;

&lt;p&gt;Also, this patch extends the behavior when a single queue is used:&lt;br/&gt;
(1) Even if you uses a single queue, additional single queues for read and scan also can be used by &lt;tt&gt;hbase.ipc.server.callqueue.read.ratio&lt;/tt&gt; (default 0, indicating non-use) and &lt;tt&gt;hbase.ipc.server.callqueue.scan.ratio&lt;/tt&gt; (default 0), with distributing handlers by the ratios.&lt;/p&gt;

&lt;p&gt;(2) When using a single queue, high priority handlers to deal with admin requests, etc. also uses a just single queue. (You are using a single queue because you think it is enough, don&apos;t you ?)&lt;/p&gt;

&lt;p&gt;How many queues you uses is multiplied &lt;tt&gt;hbase.ipc.server.callqueue.handler.factor=&amp;lt;float&amp;gt;&lt;/tt&gt; (default 0) by &lt;tt&gt;hbase.regionserver.handler.count=&amp;lt;number&amp;gt;&lt;/tt&gt; (default 30) and if the result is less than 2, a single queue is used for ordinary requests.&lt;/p&gt;

&lt;p&gt;Calculating the distributed counts of queues and handlers for write/read/scan is a little changed and it may a bit increase the sum of them as necessary (instead of adjusting between write/read/scan. An existing class actually contained bugs and unexpected logic).&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;org.apache.hadoop.hbase.util.Counter&lt;/tt&gt; is used for counting the handlers to simultaneously executing tasks. That is because incrementing and decrementing the counter for each task may cause overhead (while I have been trying to reduce such overhead by this issue !)&lt;/p&gt;

&lt;p&gt;In order to shut out &lt;tt&gt;BlockingQueue&lt;/tt&gt; from &lt;tt&gt;RpcExecutor&lt;/tt&gt; I added a new abstract package private class &lt;tt&gt;BlockingQueueRpcExecutor&lt;/tt&gt;. One cannot easily remove the protected methods because they are exposed to Coprocessor and Phoenix via &lt;tt&gt;RWQueueRpcExecutor&lt;/tt&gt; and &lt;tt&gt;BalancedQueueRpcExecutor&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="14736678" author="ram_krish" created="Wed, 9 Sep 2015 11:16:04 +0000"  >&lt;p&gt;Great work. Going thro the Semaphore based code still.&lt;br/&gt;
Currently there is a RpcSchedulerFactory which creates a SimpleRpcScheduler using the SimpleRpcSchedulerFactory.  Now if i need to have a different type of RpcScheduler which implements a new round robin way of scheduling then also I need to support both FIFO and DEADLINe mode of the CallQueue.  So will this SempahoreBasedQueue allow me to extend its implementation to have a round robin mode?&lt;/p&gt;</comment>
                            <comment id="14738022" author="ikeda" created="Thu, 10 Sep 2015 02:22:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;So will this SempahoreBasedQueue allow me to extend its implementation to have a round robin mode?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do you mean SemaphoreBasedQueue should be public?&lt;/p&gt;

&lt;p&gt;The interface &lt;tt&gt;CallQueue&lt;/tt&gt; is extracted from the current implementation classes in order to replace the internal queue, and the methods of the interface are just prepared for it. I think this interface is not enough for other uses and its naming is a bit rough and vague, and I created it as package-private as you can change it as necessary.&lt;/p&gt;

&lt;p&gt;It would be better to create CAS based bounded FIFO/priority &lt;tt&gt;BlockingQueue&lt;/tt&gt;, but it is difficult for me. Actually Java7 introduces the class &lt;tt&gt;LinkedTransferQueue&lt;/tt&gt;, which is CAS based &lt;b&gt;unbounded&lt;/b&gt; FIFO &lt;tt&gt;BlockingQueue&lt;/tt&gt;, and it might be possible to create other ones by imitating its logic, or in future Java might introduce them.&lt;/p&gt;

&lt;p&gt;With respect to RpcScheduler, do you mean it would be useful to use round robin for multiplexed queues instead of random selection? I believe that it is the best to use a single CAS queue (unless you change the logic of handling requests by their priority). &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11355&quot; title=&quot;a couple of callQueue related improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11355&quot;&gt;&lt;del&gt;HBASE-11355&lt;/del&gt;&lt;/a&gt; introduced multiplexed queue and improved performance, but I think it is just sort of lock striping for lock based queues, and it went the wrong way.&lt;/p&gt;</comment>
                            <comment id="14738040" author="ikeda" created="Thu, 10 Sep 2015 02:37:51 +0000"  >&lt;p&gt;Added a revised patch.&lt;br/&gt;
Fixed a bug of reducing visibility of an existing protected method.&lt;/p&gt;

&lt;p&gt;BTW I&apos;m not yet sure why zombie processes exist.&lt;/p&gt;</comment>
                            <comment id="14738203" author="hadoopqa" created="Thu, 10 Sep 2015 05:40:30 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12755055/HBASE-14331-V3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12755055/HBASE-14331-V3.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit a11bb2a933ad799546e7179fdf6ce75e3e22d44b.&lt;br/&gt;
  ATTACHMENT ID: 12755055&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1837 checkstyle errors (more than the master&apos;s current 1834 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.replication.TestReplicationSmallTests&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 13 zombie test(s): 	at org.apache.hadoop.hbase.regionserver.TestPerColumnFamilyFlush.testCompareStoreFileCount(TestPerColumnFamilyFlush.java:600)&lt;br/&gt;
	at org.apache.hadoop.hbase.regionserver.TestSplitTransactionOnCluster.testSSHCleanupDaugtherRegionsOfAbortedSplit(TestSplitTransactionOnCluster.java:1372)&lt;br/&gt;
	at org.apache.hadoop.hbase.client.TestReplicasClient.testSmallScanWithReplicas(TestReplicasClient.java:606)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15518//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15518//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15518//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15518//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15518//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15518//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15518//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15518//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14738244" author="ram_krish" created="Thu, 10 Sep 2015 06:15:01 +0000"  >&lt;p&gt;Went thro the patch. The CallQueueFactories are really nice and the way they work seemlessly with the existing mode. &lt;br/&gt;
Few questions,&lt;br/&gt;
In SemaphoreBasedPriorityCallQueue&amp;lt;E&amp;gt;, do you really need the private static abstract class Container&amp;lt;E&amp;gt;?  Can the comparator directly work on the Element and the ConcurrentkSkipListMap use that comparator which operates on the element E directly?&lt;/p&gt;

&lt;p&gt;If the value part of ConcurrentkSkipListMap is not used can we use ConcurrentSkipListSet. I think even its constructor uses a Comparator. &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; compareAddition(Container&amp;lt;?&amp;gt; c1, Container&amp;lt;?&amp;gt; c2) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Is this really needed?  Can we just allow the natural ordering to happen here? &lt;/p&gt;</comment>
                            <comment id="14738350" author="ikeda" created="Thu, 10 Sep 2015 07:44:12 +0000"  >&lt;blockquote&gt;
&lt;p&gt;In SemaphoreBasedPriorityCallQueue&amp;lt;E&amp;gt;, do you really need the private static abstract class Container&amp;lt;E&amp;gt;? Can the comparator directly work on the Element and the ConcurrentkSkipListMap use that comparator which operates on the element E directly?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;tt&gt;Container&lt;/tt&gt; is needed, and you can add the same object twice or more, which is expected for a queue.&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;Container&lt;/tt&gt; is not needed to be abstract. That is a relic of trying to implement the &lt;tt&gt;BlockingQueue&lt;/tt&gt;, and another concrete class was used to extract a sub map to implement the method &lt;tt&gt;contains&lt;/tt&gt; etc.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the value part of ConcurrentkSkipListMap is not used can we use ConcurrentSkipListSet.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Using &lt;tt&gt;ConcurrentSkipListSet&lt;/tt&gt; would be better if it had a method &lt;tt&gt;addIfAbsent&lt;/tt&gt; or something. It is possible that two containers for the same element have the same hash code and adding a new container is failed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;private static int compareAddition(Container&amp;lt;?&amp;gt; c1, Container&amp;lt;?&amp;gt; c2) {&lt;br/&gt;
Is this really needed? Can we just allow the natural ordering to happen here? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Comparison on &lt;tt&gt;Container&lt;/tt&gt; depends on the given comparator on contained elements. It is possible to change &lt;tt&gt;Container&lt;/tt&gt; to be a non-static class and implement &lt;tt&gt;Comparable&lt;/tt&gt; which refers the outside instance variable of the given comparator, but I think that is more confusing.&lt;/p&gt;</comment>
                            <comment id="14738372" author="ikeda" created="Thu, 10 Sep 2015 08:12:57 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Container is needed, and you can add the same object twice or more, which is expected for a queue.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That is not only for the same object, but also for the objects which have the same priority on the given comparator.&lt;/p&gt;</comment>
                            <comment id="14738634" author="ikeda" created="Thu, 10 Sep 2015 12:07:35 +0000"  >&lt;p&gt;I don&apos;t know how to interpret the QA test result.&lt;br/&gt;
Its &quot;zombies jstack extract&quot; shows process which are not applied by my patch.&lt;br/&gt;
Does that not extract but show all of the simultaneously java process testing other patches? I give up &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14740080" author="ikeda" created="Fri, 11 Sep 2015 03:08:49 +0000"  >&lt;p&gt;One never expects that the ordering of a comparator is dynamically changed, which causes inconsistent for collections based on a comparator. &lt;tt&gt;SimpleRpcScheduler&lt;/tt&gt; seems to use such a bad comparator.&lt;/p&gt;</comment>
                            <comment id="14740280" author="ikeda" created="Fri, 11 Sep 2015 06:24:11 +0000"  >&lt;p&gt;That seems a mere bug.&lt;/p&gt;

&lt;p&gt;AnnotationReadingPriorityFunction.getDeadline&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; getDeadline(RequestHeader header, Message param) {
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; methodName = header.getMethodName();
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (methodName.equalsIgnoreCase(&lt;span class=&quot;code-quote&quot;&gt;&quot;scan&quot;&lt;/span&gt;)) {
      ScanRequest request = (ScanRequest)param;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!request.hasScannerId()) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 0;
      }

      &lt;span class=&quot;code-comment&quot;&gt;// get the &apos;virtual time&apos; of the scanner, and applies sqrt() to get a
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// nice curve &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the delay. More a scanner is used the less priority it gets.
&lt;/span&gt;      &lt;span class=&quot;code-comment&quot;&gt;// The weight is used to have more control on the delay.
&lt;/span&gt;      &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; vtime = rpcServices.getScannerVirtualTime(request.getScannerId());
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.round(&lt;span class=&quot;code-object&quot;&gt;Math&lt;/span&gt;.sqrt(vtime * scanVirtualTimeWeight));
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 0;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;gt; long vtime = rpcServices.getScannerVirtualTime(request.getScannerId());&lt;/p&gt;

&lt;p&gt;doesn&apos;t give the &apos;virtual time&apos; for the request. That should be:&lt;/p&gt;

&lt;p&gt;long vtime = request.getNextCallSeq();&lt;/p&gt;

&lt;p&gt;And It is subtle but seems not to be changed. (But I also feel that method is not so trivial to be frequently used in a comparator...)&lt;/p&gt;
</comment>
                            <comment id="14740304" author="ikeda" created="Fri, 11 Sep 2015 06:58:36 +0000"  >&lt;p&gt;Sorry I referred a old blanch, and string comparison has been replaced to type check.&lt;/p&gt;</comment>
                            <comment id="14740547" author="ram_krish" created="Fri, 11 Sep 2015 10:37:47 +0000"  >&lt;p&gt;Have you run some performance numbers?  Just to see if there is any improvements with the Semaphore based queue?  I can see the stand alone reports but I am asking in terms of cluster set up and incoming requests? Lets wait for some more additional comments. &lt;/p&gt;</comment>
                            <comment id="14742781" author="ikeda" created="Mon, 14 Sep 2015 01:24:14 +0000"  >&lt;p&gt;No I don&apos;t have a cluster I can freely use for tests, but &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11355&quot; title=&quot;a couple of callQueue related improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11355&quot;&gt;&lt;del&gt;HBASE-11355&lt;/del&gt;&lt;/a&gt; showed a problem of practical overhead around a call queue with accessing multiple threads, achieving centain improvement with striping a lock. One should have noticed that the call queue used a single lock for each put/take in &lt;tt&gt;LinkingBlockingQueue&lt;/tt&gt;.&lt;/p&gt;
</comment>
                            <comment id="14742911" author="lhofhansl" created="Mon, 14 Sep 2015 04:38:19 +0000"  >&lt;p&gt;Thanks for looking into this &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;. I usually test these things on just a single machine (I set up a single node HDFS, and a single node HBase on top of that). Especially for region server optimization such as this one, that would be sufficient.&lt;/p&gt;

&lt;p&gt;Personally I would prefer a series of smaller patches. I.e. can&apos;t we just optionally replace the LinkedBlockingQueues used with with the SemaphoreBased* based ones, and then add the nice factories in a 2nd patch? But I see &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; seems to like the other code you added. That&apos;s good enough &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Questions:&lt;br/&gt;
Do you think that with this patch we can get rid of the multi call queue logic? I.e. go back have a single queue (or one for reader and one for writers).&lt;br/&gt;
I also really like your suggestion about not waiting when we reached the queue limit, but return a failure code to the client. We can easily do that with your semaphore approach.&lt;/p&gt;</comment>
                            <comment id="14743314" author="ikeda" created="Mon, 14 Sep 2015 10:07:09 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Personally I would prefer a series of smaller patches. I.e. can&apos;t we just optionally replace the LinkedBlockingQueues used with with the SemaphoreBased* based ones, and then add the nice factories in a 2nd patch? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;tt&gt;BlockingQueue&lt;/tt&gt; has too many methods and its contracts. I found I just created broken implementations. Fortunately, a few methods were required in the logic, and I extracted them into a small interface &lt;tt&gt;CallQueue&lt;/tt&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Do you think that with this patch we can get rid of the multi call queue logic? I.e. go back have a single queue (or one for reader and one for writers).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think there is no reason to use multi queues. One should use a single queue until there is truly no choice to use multi queues.&lt;/p&gt;</comment>
                            <comment id="14743349" author="ikeda" created="Mon, 14 Sep 2015 10:45:25 +0000"  >&lt;p&gt;Added a revised patch.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added a new container class for an element with its deadline time. A comparator in a priority queue is repeatedly used for two elements until it finds a right insertion position,  while I found the implementation of comparator for deadline queues was not so trivial (and it also has a little possibility to block threads via &lt;tt&gt;ConcurrentHashMap&lt;/tt&gt;). I didn&apos;t change &lt;tt&gt;AnnotationReadingPriorityFunction.getDeadline&lt;/tt&gt; because its intention is subtle (but I still think that is a bug...that even accesses a non-volatile field without synchronization).&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Added some javadoc to introduced interfaces and classes around contracts of exceptions.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14743369" author="hadoopqa" created="Mon, 14 Sep 2015 11:01:25 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12755703/HBASE-14331-V4.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12755703/HBASE-14331-V4.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit ceff3e242bc71130a7c0dea9828e6763fc0c9fec.&lt;br/&gt;
  ATTACHMENT ID: 12755703&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javac&lt;/font&gt;.  The patch appears to cause mvn compile goal to fail with Hadoop version 2.4.0.&lt;/p&gt;

&lt;p&gt;    Compilation errors resume:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; COMPILATION ERROR : &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/SimpleRpcScheduler.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;58,64&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;25,53&amp;#93;&lt;/span&gt; package org.apache.hadoop.hbase.ipc.DeadlineCallQueue does not exist&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;33,21&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/SimpleRpcScheduler.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;69,5&amp;#93;&lt;/span&gt; method does not override or implement a method from a supertype&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;48,35&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;52,22&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;53,51&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;73,35&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;77,22&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;78,36&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;79,52&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;80,33&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.2:compile (default-compile) on project hbase-server: Compilation failure: Compilation failure:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/SimpleRpcScheduler.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;58,64&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; symbol:   class DeadlineCalculator&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; location: class org.apache.hadoop.hbase.ipc.SimpleRpcScheduler&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;25,53&amp;#93;&lt;/span&gt; package org.apache.hadoop.hbase.ipc.DeadlineCallQueue does not exist&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;33,21&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; symbol:   class DeadlineCalculator&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; location: class org.apache.hadoop.hbase.ipc.CallQueueFactories&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/SimpleRpcScheduler.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;69,5&amp;#93;&lt;/span&gt; method does not override or implement a method from a supertype&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;48,35&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; symbol: class DeadlineCalculator&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;52,22&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; symbol: class DeadlineCallQueue&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;53,51&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; symbol: class DeadlineContainer&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;73,35&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; symbol: class DeadlineCalculator&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;77,22&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; symbol: class DeadlineCallQueue&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;78,36&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; symbol: class DeadlineContainer&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;79,52&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; symbol: class DeadlineContainer&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/CallQueueFactories.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;80,33&amp;#93;&lt;/span&gt; cannot find symbol&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; symbol: variable DeadlineContainer&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; To see the full stack trace of the errors, re-run Maven with the -e switch.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Re-run Maven using the -X switch to enable full debug logging.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; For more information about the errors and possible solutions, please read the following articles:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; After correcting the problems, you can resume the build with the command&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt;   mvn &amp;lt;goals&amp;gt; -rf :hbase-server&lt;/p&gt;


&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15580//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15580//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14744598" author="ikeda" created="Tue, 15 Sep 2015 00:52:11 +0000"  >&lt;p&gt;Sorry, I missed some file.&lt;/p&gt;</comment>
                            <comment id="14744805" author="hadoopqa" created="Tue, 15 Sep 2015 04:32:30 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12755879/HBASE-14331-V5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12755879/HBASE-14331-V5.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 63a2fb5143ab41d84b6b44001b63806534b26bdd.&lt;br/&gt;
  ATTACHMENT ID: 12755879&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1838 checkstyle errors (more than the master&apos;s current 1834 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to cause Findbugs (version 2.0.3) to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 4 zombie test(s): 	at org.apache.hadoop.hbase.replication.regionserver.TestReplicationWALReaderManager.test(TestReplicationWALReaderManager.java:184)&lt;br/&gt;
	at org.apache.hadoop.hdfs.TestBlockReaderLocalLegacy.testBlockReaderLocalLegacyWithAppend(TestBlockReaderLocalLegacy.java:218)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15591//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15591//testReport/&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15591//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15591//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15591//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15591//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14902311" author="ram_krish" created="Tue, 22 Sep 2015 09:51:28 +0000"  >&lt;p&gt;Any updates on the single node testing or the server side testing.  I think if this has good improvement it would be a good add on.&lt;/p&gt;</comment>
                            <comment id="14964576" author="ikeda" created="Tue, 20 Oct 2015 05:52:43 +0000"  >&lt;p&gt;Attached a patch to trigger QA run, fixing a trivial typo of javadoc.&lt;br/&gt;
My local environment is severe for building or testing.&lt;/p&gt;</comment>
                            <comment id="14964791" author="hadoopqa" created="Tue, 20 Oct 2015 08:35:00 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12767545/HBASE-14331-V6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12767545/HBASE-14331-V6.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit c1f0442045f44fcbb3935f9244794929a5d0caea.&lt;br/&gt;
  ATTACHMENT ID: 12767545&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1751 checkstyle errors (more than the master&apos;s current 1747 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16113//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16113//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16113//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16113//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16113//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16113//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16113//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16113//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14966513" author="ikeda" created="Wed, 21 Oct 2015 09:15:29 +0000"  >&lt;p&gt;Re-attached a patch to trigger QA run.&lt;/p&gt;</comment>
                            <comment id="14966569" author="ikeda" created="Wed, 21 Oct 2015 09:54:08 +0000"  >&lt;p&gt;I have realized I can create a series of small patches:&lt;/p&gt;

&lt;p&gt;1. Fix bugs about RWQueueRpcExecutor.&lt;br/&gt;
2. Use a high-scale counter for a frequently accessed counter in RpcExecutor.&lt;br/&gt;
3. Introduce CallQueue and make RpcExecutor use it.&lt;br/&gt;
4. Introduce CallQueueFacotry and introduce alternative RPC executors.&lt;br/&gt;
5. Avoid calculating the deadline value each time.&lt;br/&gt;
6. Introduce semaphore based implementation classes of CallQueue.&lt;/p&gt;

&lt;p&gt;But some patches are still not so trivial despite the separation...&lt;br/&gt;
Is that meaningful to create sub tasks?&lt;/p&gt;</comment>
                            <comment id="14966732" author="hadoopqa" created="Wed, 21 Oct 2015 12:26:42 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12767759/HBASE-14331-V6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12767759/HBASE-14331-V6.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 6e3b7af0efced7351163a5011a44bfc18851fce0.&lt;br/&gt;
  ATTACHMENT ID: 12767759&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1751 checkstyle errors (more than the master&apos;s current 1747 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16138//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16138//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16138//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16138//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16138//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16138//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16138//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16138//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14973705" author="ram_krish" created="Mon, 26 Oct 2015 04:33:14 +0000"  >&lt;p&gt;+1 on creating sub tasks where ever possible.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Avoid calculating the deadline value each time.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 on this. I noticed this and hence tried to create a wrapper and pre calculate the deadline and priority and just use that in the comparison instead of doing it every time. &lt;/p&gt;</comment>
                            <comment id="14989030" author="ikeda" created="Wed, 4 Nov 2015 06:57:07 +0000"  >&lt;p&gt;I&apos;m now thinking about directly executing tasks when the Leader/Followers pattern is applied to RpcServer (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14479&quot; title=&quot;Apply the Leader/Followers pattern to RpcServer&amp;#39;s Reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14479&quot;&gt;HBASE-14479&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;By removing threads in RpcExecutor with increasing the reader threads in RpcServer, we expect the non-trivial overhead of park/unpark will be reduced. Also bypassing the call-queues in a low load will remove the overhead of the call-queues themselves.&lt;/p&gt;

&lt;p&gt;In this case, the call-queue would be required to have methods offer and poll, instead of put and take, which might be not compatible with the way I have done in this issue.&lt;/p&gt;

&lt;p&gt;Pseudo code I&apos;m thinking:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; AtomicLong stateRef = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ...

void dispatch (task) {
	&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; taskQueued = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
	&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;) {
		&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; state = stateRef.get();
		&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; taskThreads = toTaskThreads(state);
		&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; queuedTasks = toQueuedTasks(state);
		&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (! taskQueued &amp;amp;&amp;amp; (taskThreads &amp;gt; 20 || queuedTasks &amp;gt; 0)) {
			callQueue.offer(task);
			taskQueued = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
		}
		&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; join = taskThreads &amp;lt;= 20 ||
			(taskQueued ? queuedTasks + 1 : queuedTasks) &amp;gt; 1000;
		&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (join) {
			&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (stateRef.compareAndSet(toState(taskThreads + 1, queuedTasks)) {
				&lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
			}
		} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
			&lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt; taskQueued;
			&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (stateRef.compareAndSet(toState(taskThreads, queuedTasks + 1)) {
				&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
			}
		}
	}

	execute(taskQueued ? callQueue.poll() : task);

	&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;) {
		&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; state = stateRef.get();
		&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; taskThreads = toTaskThreads(state);
		&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; queuedTasks = toQueuedTasks(state);
		&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (queuedTasks &amp;gt; 1000 || queuedTasks &amp;gt; 0 &amp;amp;&amp;amp; taskThreads &amp;lt;= 20) {
			&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (stateRef.compareAndSet(toState(taskThreads, queuedTasks - 1))) {
				execute(callQueue.poll());
			}
		} &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
			&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (stateRef.compareAndSet(toState(taskThreads - 1, queuedTasks))) {
				&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
			}
		}
	}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15331015" author="stack" created="Wed, 15 Jun 2016 02:36:33 +0000"  >&lt;p&gt;I&apos;d commit these &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15331034" author="stack" created="Wed, 15 Jun 2016 03:06:52 +0000"  >&lt;p&gt;Do you want to close this issue then in favor of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14479&quot; title=&quot;Apply the Leader/Followers pattern to RpcServer&amp;#39;s Reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14479&quot;&gt;HBASE-14479&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;The handoff from Reader to Handler is a perf killer. Running more threads than there are CPUs, at least in the read case where all is from cache, only makes us slower.&lt;/p&gt;

&lt;p&gt;But the handoff of Reader to Handler is where we do request scheduling. Currently we have a scheduling that will try to background requests that come from long-running Scans in favor of other request types (&apos;deadline&apos;). It could be made do more sophisticated scheduling but we should probably put this aside and just take on the recent FB addition of AdaptiveLifoCoDelCallQueue as  our default policy (See &lt;a href=&quot;http://queue.acm.org/detail.cfm?id=2839461&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://queue.acm.org/detail.cfm?id=2839461&lt;/a&gt;). It is a general heuristic that works well for a broad set of loadings.&lt;/p&gt;

&lt;p&gt;So, where would we do scheduling if the Reader threads ran the request &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;? Thanks.&lt;/p&gt;</comment>
                            <comment id="15331253" author="ikeda" created="Wed, 15 Jun 2016 06:51:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do you want to close this issue then in favor of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14479&quot; title=&quot;Apply the Leader/Followers pattern to RpcServer&amp;#39;s Reader&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14479&quot;&gt;HBASE-14479&lt;/a&gt;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think these issues focus on different concerns (even though they would be related). A big issue is hard to tackle.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;So, where would we do scheduling if the Reader threads ran the request Hiroshi Ikeda?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Even if we adopt the strategy of making reader threads tend to directly execute tasks, we can use queues to store excessive tasks waiting for their turn (putting it aside whether we should do so).&lt;/p&gt;

&lt;p&gt;Passing tasks between different threads will actually reduce latency (and that would be justified in heavy congestion), but throughput will be harmed by context switches and using CAS based queues might be not so harmful.&lt;/p&gt;

&lt;p&gt;Rather, I worry how compatibility issues around callQueue in the way to make reader directly execute tasks.&lt;/p&gt;
</comment>
                            <comment id="15331507" author="hadoopqa" created="Wed, 15 Jun 2016 10:29:21 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/error.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;b&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;&lt;/b&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Vote &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Runtime &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Comment &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt;-1&lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; patch &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; 0m 4s &lt;/font&gt; &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;font color=&quot;red&quot;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14331&quot; title=&quot;a single callQueue related improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14331&quot;&gt;HBASE-14331&lt;/a&gt; does not apply to master. Rebase required? Wrong Branch? See &lt;a href=&quot;https://yetus.apache.org/documentation/0.2.1/precommit-patchnames&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://yetus.apache.org/documentation/0.2.1/precommit-patchnames&lt;/a&gt; for help. &lt;/font&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;&lt;br class=&quot;atl-forced-newline&quot; /&gt;
&lt;br class=&quot;atl-forced-newline&quot; /&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Subsystem &lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; Report/Notes &lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Patch URL &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12767759/HBASE-14331-V6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12767759/HBASE-14331-V6.patch&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; JIRA Issue &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14331&quot; title=&quot;a single callQueue related improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14331&quot;&gt;HBASE-14331&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Console output &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2224/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2224/console&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Powered by &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Apache Yetus 0.2.1   &lt;a href=&quot;http://yetus.apache.org&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://yetus.apache.org&lt;/a&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;This message was automatically generated.&lt;/p&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12956205">HBASE-15594</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12753238" name="BlockingQueuesPerformanceTestApp-output.pdf" size="260478" author="ikeda" created="Mon, 31 Aug 2015 07:20:04 +0000"/>
                            <attachment id="12753237" name="BlockingQueuesPerformanceTestApp-output.txt" size="3218" author="ikeda" created="Mon, 31 Aug 2015 07:20:04 +0000"/>
                            <attachment id="12753225" name="BlockingQueuesPerformanceTestApp.java" size="4773" author="ikeda" created="Mon, 31 Aug 2015 05:41:08 +0000"/>
                            <attachment id="12752955" name="CallQueuePerformanceTestApp.java" size="4673" author="ikeda" created="Fri, 28 Aug 2015 08:22:34 +0000"/>
                            <attachment id="12754828" name="HBASE-14331-V2.patch" size="60459" author="ikeda" created="Wed, 9 Sep 2015 06:04:09 +0000"/>
                            <attachment id="12755055" name="HBASE-14331-V3.patch" size="60469" author="ikeda" created="Thu, 10 Sep 2015 02:37:51 +0000"/>
                            <attachment id="12755703" name="HBASE-14331-V4.patch" size="63795" author="ikeda" created="Mon, 14 Sep 2015 10:45:25 +0000"/>
                            <attachment id="12755879" name="HBASE-14331-V5.patch" size="68518" author="ikeda" created="Tue, 15 Sep 2015 00:52:11 +0000"/>
                            <attachment id="12767759" name="HBASE-14331-V6.patch" size="68517" author="ikeda" created="Wed, 21 Oct 2015 09:15:29 +0000"/>
                            <attachment id="12767545" name="HBASE-14331-V6.patch" size="68517" author="ikeda" created="Tue, 20 Oct 2015 05:52:43 +0000"/>
                            <attachment id="12754820" name="HBASE-14331.patch" size="55993" author="stack" created="Wed, 9 Sep 2015 04:59:10 +0000"/>
                            <attachment id="12754687" name="HBASE-14331.patch" size="55993" author="ikeda" created="Tue, 8 Sep 2015 18:11:12 +0000"/>
                            <attachment id="12753228" name="SemaphoreBasedBlockingQueue.java" size="8840" author="ikeda" created="Mon, 31 Aug 2015 05:41:08 +0000"/>
                            <attachment id="12753227" name="SemaphoreBasedLinkedBlockingQueue.java" size="1459" author="ikeda" created="Mon, 31 Aug 2015 05:41:08 +0000"/>
                            <attachment id="12753226" name="SemaphoreBasedPriorityBlockingQueue.java" size="7527" author="ikeda" created="Mon, 31 Aug 2015 05:41:08 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 28 Aug 2015 15:57:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            26 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2jhj3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>