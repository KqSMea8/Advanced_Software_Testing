<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:40:00 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-6805/HBASE-6805.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-6805] Extend co-processor framework to provide observers for filter operations</title>
                <link>https://issues.apache.org/jira/browse/HBASE-6805</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;There are several filter operations (e.g., filterKeyValue, filterRow, transform, etc.) at the region server side that either exclude KVs from the returned results, or transform the returned KV. We need to provide observers (e.g., preFilterKeyValue and postFilterKeyValue) for these operations in the same way as the observers for other data access operations (e.g., preGet and postGet). This extension is needed to support DOT (e.g., extracting individual fields from the document in the observers before passing them to the related filter operations) &lt;/p&gt;</description>
                <environment></environment>
        <key id="12608050">HBASE-6805</key>
            <summary>Extend co-processor framework to provide observers for filter operations</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12607876">HBASE-6800</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jason.dai">Jason Dai</reporter>
                        <labels>
                    </labels>
                <created>Tue, 18 Sep 2012 12:13:01 +0000</created>
                <updated>Wed, 19 Dec 2012 06:36:43 +0000</updated>
                                            <version>0.95.2</version>
                                                    <component>Coprocessors</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13457764" author="jason.dai" created="Tue, 18 Sep 2012 12:15:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6429&quot; title=&quot;Filter with filterRow() returning true is incompatible with scan with limit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6429&quot;&gt;&lt;del&gt;HBASE-6429&lt;/del&gt;&lt;/a&gt; introduced a FilterWrap that wraps the filter operations at the region server side, and we can use that to call related observers around the filter operations. Specifically, we need to&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Add related observer functions (e.g., preFilterKeyValue) in RegionCoprocessorHost&lt;/li&gt;
	&lt;li&gt;In the prepareScanner method, wrap the filter (in the Scan) to FilterWrap  (so that the region server always calls the related methods in FilterWrap)&lt;/li&gt;
	&lt;li&gt;In the related methods of FilterWrap (e.g., FilterWrap.filterKeyvalue), call the observers (e.g., preFilterKeyValue and postFilterKeyValue) before and after the actual method call to Filter.filterKeyValue()&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I&apos;ll upload a patch for review shortly.&lt;/p&gt;</comment>
                            <comment id="13459810" author="apurtell" created="Thu, 20 Sep 2012 18:04:53 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jason.dai&quot; class=&quot;user-hover&quot; rel=&quot;jason.dai&quot;&gt;Jason Dai&lt;/a&gt; Regarding your point 1, that sounds reasonable. &lt;/p&gt;

&lt;p&gt;For point 2, filter wrapping from scanner creation is something the current API supports, so you should be good there.&lt;/p&gt;

&lt;p&gt;For point 3, I&apos;m not sure I understand, if you have wrapped a scanner, why you then need to call out to (or receive upcalls on) filter observer hooks, but perhaps your patch will make it clear. To assist with this understanding, please consider providing a small example of filter+scan wrapping? See (on trunk) hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/example/ for other such examples.&lt;/p&gt;</comment>
                            <comment id="13464553" author="chenghao" created="Thu, 27 Sep 2012 08:33:09 +0000"  >&lt;p&gt;Please check the patch attached. Hope it make more sense.&lt;/p&gt;</comment>
                            <comment id="13465471" author="apurtell" created="Fri, 28 Sep 2012 08:07:49 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=chenghao&quot; class=&quot;user-hover&quot; rel=&quot;chenghao&quot;&gt;Cheng Hao&lt;/a&gt; Thank you for the patch. &lt;/p&gt;

&lt;p&gt;However, the attached patch is missing unit tests and any example of filter+scan wrapping. We can evaluate the API changes in isolation, but without a good understanding of your motivation, why the changes are necessary is not clear. Why not use custom filters? &lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6577&quot; title=&quot;RegionScannerImpl.nextRow() should seek to next row&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6577&quot;&gt;&lt;del&gt;HBASE-6577&lt;/del&gt;&lt;/a&gt; see &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;&apos;s comment&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6577?focusedCommentId=13433898&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13433898&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-6577?focusedCommentId=13433898&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13433898&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If extending the CP hook model to internal filter methods, we must be deeply concerned about the costs of iterating CP hook lists during filtering/scanning. CPs extend the code path, first of all. Then, if hooks are registered, there will be method invocation and object allocation costs for &lt;em&gt;every&lt;/em&gt; filter operation, twice.&lt;/p&gt;

&lt;p&gt;Have you tried benchmarking filter performance with and without the proposed changes? What is the difference in a realistic scan performance example between stock HBase and a HBase with this patch applied? With one &quot;filter coprocessor&quot; installed? With two?&lt;/p&gt;

&lt;p&gt;Edit: Improved comment clarity.&lt;/p&gt;</comment>
                            <comment id="13467428" author="chenghao" created="Tue, 2 Oct 2012 03:18:45 +0000"  >&lt;p&gt;Thank you Andrew for the clarity.&lt;br/&gt;
I added unit test (examples) in the new patch file. Hope it could help to understand the motive of adding the interface, and I will provide the performance test report later.&lt;/p&gt;</comment>
                            <comment id="13467461" author="yuzhihong@gmail.com" created="Tue, 2 Oct 2012 04:02:07 +0000"  >&lt;p&gt;Surely a lot of hooks are being added &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; generateRandomWords(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numberOfWords, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; maxLengthOfWords) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above method can be private, right ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+   * @param result the previous preFilterRowKey, modify as necessary
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Syntax for the above comment is off.&lt;/p&gt;</comment>
                            <comment id="13467577" author="jason.dai" created="Tue, 2 Oct 2012 08:12:06 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; The example in the updated patch file shows a possible example: the value of each cell stored in the table is automatically encrypted by the CP, which then needs to decrypt the cell before applying filter operations (filterKeyValue, transform, etc.). By implementing the filter CP, the encryption can be transparent to the user code. Similarly, for DOT, multiple fields are encoded in a single cell by the CP, and each field needs to be extracted before applying filter operations so that it can be transparent to the user.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If extending the CP hook model to internal filter methods, we must be deeply concerned about the costs of iterating CP hook lists during filtering/scanning. CPs extend the code path, first of all. Then, if hooks are registered, there will be method invocation and object allocation costs for &lt;em&gt;every&lt;/em&gt; filter operation, twice.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;While there are two method invocations for each filter operation, these method invocations are actually only called for the topmost filter (which FilterWrapper wraps), not for each filter contained in the chained FilterList or other composite filters. In our DOT benchmarking, these CP operations are never the hotspot in scanning.&lt;/p&gt;

&lt;p&gt;Having said that, CP operations could become a potential performance issue if we have a long list of CPs loaded. For instance, database trigger like CPs only execute upon data mutation (i.e., Put), but are still invoked for Get/Scan/Filter. One way to address this issue is that, instead of iterating the global &lt;em&gt;coprocessor&lt;/em&gt; set in these pre* &amp;amp; post* operations, the RegionCoprocessorHost can maintain several CP set, and iterate a different set in each different CP operation: one for region operations (preOpen/postOpen/preClose/...), one for update (prePut &amp;amp; postPut), one for read (preGet/postGet/preScannerOpen/...), and one for filter (preFilterKeyvalue/postFilterKeyvalue/....); when loading each CP, it can be registered in appropriate sets (just as endpoints are registered in &lt;em&gt;Region.protocolHandlers&lt;/em&gt;).&lt;/p&gt;</comment>
                            <comment id="13468086" author="ghelmling" created="Tue, 2 Oct 2012 21:24:01 +0000"  >&lt;p&gt;Looking at the encryption example here, it seems like you could provide that with the existing coprocessor hooks:&lt;/p&gt;

&lt;p&gt;Option A:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;In &lt;tt&gt;EncryptingRegionObserver.preScannerOpen()&lt;/tt&gt;, if any Filter is set on the Scan object, wrap it in a custom &lt;tt&gt;DecryptingFilterWrapper&lt;/tt&gt;.  This would just decrypt the KVs before passing them on to the client provided Filter, essentially doing the same work your example preFilterXXX methods are doing.&lt;/li&gt;
	&lt;li&gt;In &lt;tt&gt;EncryptingRegionObserver.postScannerNext()&lt;/tt&gt;, again decrypt the final KVs being returned to the client, same as your example.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The duplicate decryption here seems unnecessary, but it should give you the same results as your provided example, without the need to add a batch of pre/postFilterXXX hooks to RegionObservers.&lt;/p&gt;

&lt;p&gt;Option B:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;In &lt;tt&gt;EncryptingRegionObserver.preStoreScannerOpen()&lt;/tt&gt; return a custom KeyValueScanner implementation that extends or wraps the default StoreScanner implementation.  Note that this would still be a little tricky since filters are applied down in ScanQueryMatcher.  For decryption what you would really want is to hook in above the StoreFileScanners and MemStoreScanners used internally by StoreScanner, but below the ScanQueryMatcher operations, so that you can decrypt each KV once as it&apos;s read.  Seems like that would currently require duplicating a fair amount of StoreScanner functionality.  Maybe something needs to be added to better hook in to this data reading layer?&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;The main issue I see is that the added hooks fuzz the line between Filters and RegionObservers and their areas of responsibility.  It doesn&apos;t seem like we should really need pre/postFilterXXX hooks, because that&apos;s what filters are supposed to provide.  And of course adding more Observer hooks does have a cost in increasing complexity of the coprocessor interfaces and added overhead (especially in hot code paths).&lt;/p&gt;

&lt;p&gt;Are there really cases that require the pre/postFilter hooks that can&apos;t be accomplished by having a RegionObserver wrap gets/scans with it&apos;s own Filter implementation that coordinates with the RegionObserver instance?&lt;/p&gt;</comment>
                            <comment id="13468276" author="apurtell" created="Wed, 3 Oct 2012 02:49:21 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jason.dai&quot; class=&quot;user-hover&quot; rel=&quot;jason.dai&quot;&gt;Jason Dai&lt;/a&gt; How would coprocessors register themselves onto the separate lists? Would this be done with e.g. @annotations? In my opinion, I think we need a compelling use case to add this kind of complexity to an API, even the CP API. If there is no way to accomplish what you might want to do, then it&apos;s clear we have to consider CP API modifications, and then consider the performance implications, etc. However Gary&apos;s suggestions above seem reasonable alternative approaches. &lt;/p&gt;

&lt;p&gt;We should prefer the simplest approach possible in API and integration design (but no simpler). If there&apos;s a compelling reason to do this, then we can for sure consider it, but please consider Gary&apos;s thoughts above. So far it would appear the case for filter CP hooks isn&apos;t compelling because there is a design alternative that seems reasonable. Would his suggestions work for you? If not, why not? That would be a great way forward with this discussion.&lt;/p&gt;</comment>
                            <comment id="13471441" author="jason.dai" created="Mon, 8 Oct 2012 08:00:46 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; Thanks for the feedback. Wrapping a custom filter in preScannerOpen() and preGet(), as Gary suggested, seems to be a viable alternative. We&apos;ll investigate if we can implement DOT support using this approach.&lt;/p&gt;</comment>
                            <comment id="13497735" author="colorant" created="Thu, 15 Nov 2012 03:23:29 +0000"  >&lt;p&gt;Gary Helmling and Andrew Purtell : I have try to redesign the code with the approaching of both Option A and Option B, It turn out that with Option B, to replace the standard StoreScanner is much more efficient then Option A to replace the filter. Since in the scanner version, I can decrypt the kv before send to matcher. thus save the effort needed in pre/postFilterxxx to do raw kv and real kvs mapping etc. While, just like Gary mentioned, to replace StoreScanner with say DocStoreScanner, I need to duplicate most part of the code in it. And actually, I only add a few extra members and modify the next() method. Also it seems pretty hard to add common enough hooks to perform the task I need in DocStoreScanner. However, if some of the private member of StoreScanner could be changed to protected, then I think can subclass StoreScanner and only override the method I need to tweak into. What&apos;s your opinion on this, do you think to change the private member to protected member is a feasible approaching? I think if anyone who want to replace the standard StoreScanner, they will probably encounter the same problem here.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12624579">HBASE-7387</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12607876">HBASE-6800</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12547332" name="extend_coprocessor.patch" size="51824" author="chenghao" created="Tue, 2 Oct 2012 03:15:38 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 20 Sep 2012 18:04:53 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>242478</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 5 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02v5z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14650</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>