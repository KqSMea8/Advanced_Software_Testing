<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:03:22 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-15417/HBASE-15417.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-15417] Calls to ObserverContext#bypass in a region observer&apos;s prePut method are inconsistent</title>
                <link>https://issues.apache.org/jira/browse/HBASE-15417</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Calling ctx.bypass(), where ctx is the ObserverContext object passed in to the region observer&apos;s prePut method, results in some inconsistent behavior.&lt;/p&gt;

&lt;p&gt;If every other put in the batch is also bypassed, the region observer sees none of these in its postPut method.  If there is at least one other put which is not bypassed, the region observer sees all of the puts in the batch &lt;em&gt;including those which were bypassed&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The end result is that, after bypassing a put, that put may or may not end up in the region observer&apos;s postPut method.  This behavior is dependent solely on which other puts the bypassed put is batched together with.&lt;/p&gt;

&lt;p&gt;I tried to find existing tickets for this issue, but was unable to.  Apologies if I missed something.  The closest issues I could find were &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4331&quot; title=&quot;Bypassing default actions in prePut fails sometimes with HTable client&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4331&quot;&gt;&lt;del&gt;HBASE-4331&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11503&quot; title=&quot;Inconsistency in CP between HRegion#batchMutate() and MultiRowMutation()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11503&quot;&gt;HBASE-11503&lt;/a&gt;, but those didn&apos;t seem to quite hit it.&lt;/p&gt;

&lt;p&gt;Additionally, I threw together a quick demonstration of this issue: &lt;a href=&quot;https://github.com/hwh33/bypass-inconsistency-demo&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/hwh33/bypass-inconsistency-demo&lt;/a&gt;.  You can run that demo in memory using the testing utility or against a running cluster.  I actually haven&apos;t had time to test it against a cluster though, so you may encounter bugs if running in that mode (but hopefully not!).&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12947846">HBASE-15417</key>
            <summary>Calls to ObserverContext#bypass in a region observer&apos;s prePut method are inconsistent</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="hwh33">Harry Harpham</reporter>
                        <labels>
                    </labels>
                <created>Tue, 8 Mar 2016 00:03:10 +0000</created>
                <updated>Mon, 24 Oct 2016 08:22:53 +0000</updated>
                                                                            <component>Coprocessors</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="15184691" author="anoop.hbase" created="Tue, 8 Mar 2016 09:08:19 +0000"  >&lt;p&gt;To be consistent with what other mutations doing (increment, append) and hooks around get, we should not call post hook on a mutation when the pre hook done a bypass for that mutation.&lt;br/&gt;
Also checked behavior of some other pre, post hooks which allows bypass. Like pre/post ScannerOpen.  Here the post hook is called in any case (either pre bypassed or not)&lt;/p&gt;</comment>
                            <comment id="15184692" author="anoop.hbase" created="Tue, 8 Mar 2016 09:09:06 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hwh33&quot; class=&quot;user-hover&quot; rel=&quot;hwh33&quot;&gt;Harry Harpham&lt;/a&gt;  You plan to give a patch?&lt;/p&gt;</comment>
                            <comment id="15185725" author="apurtell" created="Tue, 8 Mar 2016 20:27:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;If every other put in the batch is also bypassed, the region observer sees none of these in its postPut method. If there is at least one other put which is not bypassed, the region observer sees all of the puts in the batch including those which were bypassed.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think - if I understand correctly - this is because bypass isn&apos;t a per-mutation setting, it&apos;s an action taken per operation. If you call bypass() during the pre hook for an operation, further processing for the entire operation by core code will not happen, including post hooks. It wouldn&apos;t be valid, if for example iterating over a batch of puts, to make a bypass decision on one put expecting it to apply to just that one put, it will apply to the entire operation, the whole batch.&lt;/p&gt;

&lt;p&gt;As Anoop mentioned our internals are always undergoing a fair amount of churn and refactor so we may have lost the above invariant and should double check bypass behavior is consistent. And, where we may have exceptions, the exceptions to the rule are clearly documented.&lt;/p&gt;</comment>
                            <comment id="15185768" author="hwh33" created="Tue, 8 Mar 2016 20:53:07 +0000"  >&lt;p&gt;I see. However, I don&apos;t believe that is the behavior I saw. In a batch with 4 puts, I called bypass on 3 of them, including the very first put in the batch.  All 4 puts made it to the postPut hook.  If I understood your description correctly, none of them should have resulted in a postPut call.  Is that correct?&lt;/p&gt;

&lt;p&gt;Also would you mind pointing me to documentation on bypass being a per-operation setting.  I&apos;m only asking because when I first noticed this behavior, I tried to dig around and see what the correct behavior was, but I had trouble finding anything definitive.  It would be nice to know where to look for stuff like this in the future.&lt;/p&gt;

&lt;p&gt;Lastly, I just want to say again that I haven&apos;t had a chance to test this against a cluster, so it is possible that this is a bug in the HBaseTestingUtility (if there is any difference in how the testing utility would handle this scenario).&lt;/p&gt;</comment>
                            <comment id="15185776" author="hwh33" created="Tue, 8 Mar 2016 20:57:29 +0000"  >&lt;p&gt;Also, I would be happy to work on a patch!  I just need to investigate it a little and make sure it&apos;s something I have time for before I can commit.&lt;/p&gt;</comment>
                            <comment id="15185788" author="apurtell" created="Tue, 8 Mar 2016 21:00:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;I called bypass on 3 of them, including the very first put in the batch. All 4 puts made it to the postPut hook. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed this looks wrong. It might be wrong in the larger sense in that the bypass didn&apos;t take effect. It might be wrong in appearance only in that the post hook is called even though other core code actions were bypassed. We need to look into it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Also would you mind pointing me to documentation on bypass being a per-operation setting. I&apos;m only asking because when I first noticed this behavior, I tried to dig around and see what the correct behavior was, but I had trouble finding anything definitive.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The definitive information is supposed to be in the per-hook javadoc. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;it is possible that this is a bug in the HBaseTestingUtility &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The problem is most likely not there. &lt;/p&gt;</comment>
                            <comment id="15186067" author="hwh33" created="Tue, 8 Mar 2016 23:32:53 +0000"  >&lt;p&gt;Thank you for the response!&lt;/p&gt;</comment>
                            <comment id="15186396" author="anoop.hbase" created="Wed, 9 Mar 2016 03:06:03 +0000"  >&lt;p&gt;This is not a test issue.. This is a bug only IMO.&lt;br/&gt;
We call batchMutate with some puts.  1st we will call prePut() on all of them one after the other. When for any put, the CP calls bypass, we will mark that Mutation status as success. Then we will call doMiniBatchMutate().. The actual mutation happens in 1 or more mini batches as we obtain rowlocks.&lt;br/&gt;
Then we try to obtain rowlocks in doMiniBatchMutate() iff the status of that mutation is not done. But the pre hook made it to success. So no need to obtain row lock and there is 0 puts to write. Then we have this code in doMiniBatchMutate&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (numReadyToWrite &amp;lt;= 0) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 0L;
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The post hook is after the actual write on memstore and WAL in doMiniBatchMutate.&lt;br/&gt;
So when all puts handled by pre hook and bypassed, there is no call to post hook.&lt;br/&gt;
But when at least one of the put is not done by pre hook and actual write on memstore happens in doMiniBatchMutate, we will call post hook on ALL puts which appeared in THAT mini batch.  So it is not even all the puts..  If all puts can happen in one mini batch, yes on all we will call post hook.&lt;br/&gt;
The problem in when we call post hook, we know the status of the op and success or not and dont know whether it is set by pre hook call and bypass or by the actual put on memstore.  If we can distinguish that and decide to call post hook based on that, we can solve this&lt;/p&gt;

&lt;p&gt;Even the pre and post hook for batch mutate (pre/postBatchMutate) also to be consistent with pre/postPut.  Ie. when prePut bypass one mutation, that mutation should not be part of mutations that we pass to pre/postBatchMutate hooks.&lt;/p&gt;

&lt;p&gt;If u can work on a patch based on the above we will review..  If u are busy , let me know, I can give a patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Thanks for the find..&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="13014654">HBASE-16933</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 8 Mar 2016 09:08:19 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            40 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2ub13:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>