<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:14:06 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-16436/HBASE-16436.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-16436] Add the CellChunkMap variant</title>
                <link>https://issues.apache.org/jira/browse/HBASE-16436</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;This sub-task is specifically to add the CellChunkMap created by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eshcar&quot; class=&quot;user-hover&quot; rel=&quot;eshcar&quot;&gt;Eshcar Hillel&lt;/a&gt; with specific tests and integrate it with the in memory flush/compaction flow. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12997864">HBASE-16436</key>
            <summary>Add the CellChunkMap variant</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12997549">HBASE-16421</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ram_krish">ramkrishna.s.vasudevan</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Aug 2016 10:10:30 +0000</created>
                <updated>Mon, 31 Oct 2016 14:59:43 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="15607391" author="stack" created="Wed, 26 Oct 2016 04:35:31 +0000"  >&lt;p&gt;Hard question by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; ported from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16421&quot; title=&quot;Introducing the CellChunkMap as a new additional index variant in the MemStore&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16421&quot;&gt;HBASE-16421&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The CellChunkMap variant needs cell data to be available in MSLAB chunks. So when MSLAB is OFF, we will not be using this. What abt the size restriction? In MSLAB there is a max size for Cells and above which cells will not be cloned. We might nor be able to handle such a case. Thoughts?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;MSLAB is on always in master branch, right? If not, lets make it so by fiat in 2.0.&lt;/p&gt;

&lt;p&gt;On size restrtiction, current default for mslab is 2MB. Seems small. For smallest possible Cell (32bytes?), thats 1M Cells. Not that much, especially when we are not looking them up via CSLS but via a nice flat index.  Go to 8MB slabs?  16M?&lt;/p&gt;

&lt;p&gt;If someone wants to write a 64M Cell into HBase, should we even let them? It is going to mess us (GC, etc.) up. We have a bound on max size currently. Reexamine?&lt;/p&gt;

&lt;p&gt;What is the lifecycle of a SLAB? Can we set aside negative chunkids to mean onheap and these chunks would have one object in them only? (Might have to have a globally accessible means of mapping negative chunkid to an object).&lt;/p&gt;</comment>
                            <comment id="15607503" author="anoop.hbase" created="Wed, 26 Oct 2016 05:37:11 +0000"  >&lt;p&gt;You mean to say when the cell size does not allow it to be copied to an MSLAB chunk (from pool) let us have the cell be there as such (we will copy the data then as till it reaches memstore level, the cells data is backed by the same byte[] where the RPCServer copied the req bytes into) and that cell&apos;s backing buffer we will make as a fake chunk?  We will keep it temp with a temp chunk id and once the life of the cell is over, flushed, we will throw away that chunk?  Hmm seems some thing we can try out.&lt;br/&gt;
MSLAB pool default ON am not sure whether that jira got committed already. Ya we can do.&lt;br/&gt;
There is one more issue.  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; reminded me some days back. When a cell is upserted (append/increment op), we will not copy that cell to MSLAB.  So in such a case also we may need to go with this way of temp chunks with temp ids.&lt;/p&gt;

&lt;p&gt;Another idea I can think of is as follows&lt;br/&gt;
Let us keep the info that whether a Segment contains a cell which is not copied to MSLAB.  A boolean like &apos;tagsPresent&apos;.  When we do in memory flush we will do CellArrayMap if any of the  cell is NOT in MSLAB.  If all in MSLAB, we will do chunk map.  Also when an in memory merge or data compaction happens, then also similar way.  When any of the segment undergoing merge is having a cell not in MSLAB, lets go with cell array map instead of cell chunkmap. May be we need some logic there where we can avoid segments with cells not in MSLAB from getting merged with segmnets whose all cells in MSALB only.  Chance is that when a segment is having cells not in MSLAB, other segments also will follow same pattern (99% I can say)..  Need evaluation of both ways anyway.  Just some thoughts&lt;/p&gt;</comment>
                            <comment id="15607562" author="stack" created="Wed, 26 Oct 2016 06:11:04 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; Thanks for the better explanation. Will the too-big Cell be occupying a BB from the RPC Pool preventing our releasing it? Or will it have already have been allocated on the heap? If the latter good. We just need a hash of fake chunkid to this Cell on-heap. &lt;/p&gt;

&lt;p&gt;Ok if the fake chunk id solves two problems.&lt;/p&gt;

&lt;p&gt;Yes to both ways. On latter, would be a shame if we couldn&apos;t go offheap because 1 in 10M Cells is bigger than a SLAB.&lt;/p&gt;</comment>
                            <comment id="15607579" author="anoop.hbase" created="Wed, 26 Oct 2016 06:18:18 +0000"  >&lt;p&gt;Till it reaches the memstore add point, the big cell data is in the BB from the Rpc pool. But when we add it to memstore, we will do an on heap copy if we can not copy to MSLAB. So we are good here.&lt;/p&gt;

&lt;p&gt;Ya because of 1 big cell in 1M cells not allowing us go off heap fully is not so good &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  My feeling is that the latter will be much more simple than 1st way.  Ya let us try out boths. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;  U are ok to do this poc?  No hurry.&lt;/p&gt;</comment>
                            <comment id="15607608" author="ram_krish" created="Wed, 26 Oct 2016 06:35:06 +0000"  >&lt;p&gt;That second way of doing things will be much simpler I believe. We can have control on the whole segment with one boolean and decide. &lt;br/&gt;
So suppose we have 3 segments and one of it has a bigger cell then I think it still makes sense to index the other two segments in the chunk way and leave the one with bigger cell to cellArray map way of indexing and things should work for scans? I need to verify this part first.&lt;/p&gt;</comment>
                            <comment id="15607671" author="anoop.hbase" created="Wed, 26 Oct 2016 07:06:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;So suppose we have 3 segments and one of it has a bigger cell then I think it still makes sense to index the other two segments in the chunk way &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;ya. I tried to say that here &quot;May be we need some logic there where we can avoid segments with cells not in MSLAB from getting merged with segmnets whose all cells in MSALB only. Chance is that when a segment is having cells not in MSLAB, other segments also will follow same pattern (99% I can say)&quot;&lt;br/&gt;
The first way of dummy chunks with ids also some thing to PoC. Will be harder for sure.&lt;/p&gt;</comment>
                            <comment id="15607678" author="anoop.hbase" created="Wed, 26 Oct 2016 07:09:55 +0000"  >&lt;p&gt;I think option#1 only we should try.  Even in MSLAB pool, we will keep chunks part of the pool.  I mean at some point there can be no chunk left in pool and we will end up creating on demand chunk. This chunk we wont be pool back.  Also we will not keep this chunk in MSLAB pool or so.  So that is also like a dummy chunk only.   We should be having a way to do id on these chunks and keep them also within some place. So that later when we need a chunk ref from index, we can retrieve.&lt;/p&gt;</comment>
                            <comment id="15607705" author="ram_krish" created="Wed, 26 Oct 2016 07:20:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;We should be having a way to do id on these chunks and keep them also within some place. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So there are two things right&lt;br/&gt;
-&amp;gt; One where we will not use MSLAB itself &lt;br/&gt;
-&amp;gt; Other is where we use MSLAB but we are not creating a chunk from the pool. Even here we need index and this should be fine.&lt;br/&gt;
The 2nd part that you are saying is already done in our internal branch. But the #1 point of deciding if a cell is larger and if so go with array index is something I need to try. I can do that POC later next week and come back here.&lt;/p&gt;</comment>
                            <comment id="15609361" author="stack" created="Wed, 26 Oct 2016 19:05:58 +0000"  >&lt;p&gt; How we going to do the CellChunkMap implementation. Is there a writeup/patch anywhere yet? (I&apos;m digging through the issues and don&apos;t see one &amp;#8211; I may have missed a patch). Per Cell entry in the Index, we will have a reference to the Cell, then its chunkid, offset and length? If a Cell&apos;s backing array moves from one chunk to another, do we reinstantiate the Cell at this time or just do it lazily on first read? (Or could we Scan Cells in their flat form w/o having to instantiate instances?).&lt;/p&gt;

&lt;p&gt;Would be cool if CellChunkMap could be done out of hbase-common only easily testable standalone (Should make CellArrayMap do this too).&lt;/p&gt;</comment>
                            <comment id="15609420" author="stack" created="Wed, 26 Oct 2016 19:29:03 +0000"  >&lt;p&gt;Forgot that Anoop points out length is not needed since can use offsets for that.&lt;/p&gt;

&lt;p&gt;Found a CellChunkMap implementation here in the SECOND! patch only as CellBlockSerialized: &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12794742/HBASE-14921-V02.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12794742/HBASE-14921-V02.patch&lt;/a&gt; Is there a reference to the actual Cell instance missing from the CellBlockSerialized implementation? The index item seems to only point at the serialized form of the Cell but for for reading/sorting/scanning the Cell, we&apos;ll need an instance (or a smarter scanner, one that can work w/ the serialized form).&lt;/p&gt;</comment>
                            <comment id="15610648" author="ram_krish" created="Thu, 27 Oct 2016 04:41:52 +0000"  >&lt;p&gt;For scan what you say is true. We need to create instances of cells every time we recreate the cell from the index. You think this would be costly?  In our tests we were focussing more on writes and not on reads. Plan is to do some benchmark with reads. Thanks Stack.&lt;/p&gt;</comment>
                            <comment id="15610674" author="anoop.hbase" created="Thu, 27 Oct 2016 04:59:29 +0000"  >&lt;p&gt;I feel like for scan (user scan) recreating it is ok. We can not avoid that any way. We have all SQM logic and CPs in the scan path which will expect Cells. So Cell object is a must create then.&lt;br/&gt;
But in memory merge and even flush to disk paths expect Cells now. This we must solve. Every merge and flush bring back the Cell object to heap is some thing really bad.  We need some new ways of merge/flush which can work on raw bytes.&lt;/p&gt;</comment>
                            <comment id="15610733" author="stack" created="Thu, 27 Oct 2016 05:30:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;You think this would be costly? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think it will kill throughput but lets test.&lt;/p&gt;</comment>
                            <comment id="15622392" author="anastas" created="Mon, 31 Oct 2016 14:59:43 +0000"  >&lt;p&gt;Hi Guys,&lt;/p&gt;

&lt;p&gt;It looks like I missed all this CellChunkMap discussion here. It looks to me that we have already seen those question about CellChunkMap and we had some solution for the Big-Cells issues (those bigger then a MSLAB chunk) only on paper however, no code. We suggested to allocate big cells on the special variable-size chunks that are allocated and freed upon request (not going thorough the pool). All the discussion was at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt;. Only CellChunkMap implementation was coded, then we decided to split and continue with CellArrayMap only. It was a wise decision because we had a lot of work anyway. Let discuss all those design issues on our meeting related to CellChunkMap.&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Anastasia&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 26 Oct 2016 04:35:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32f0n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>