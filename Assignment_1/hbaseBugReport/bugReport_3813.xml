<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:13:22 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3813/HBASE-3813.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3813] Change RPC callQueue size from &quot;handlerCount * MAX_QUEUE_SIZE_PER_HANDLER;&quot;</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3813</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Yesterday debugging w/ Jack we noticed that with few handlers on a big box, he was seeing stats like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2011-04-21 11:54:49,451 DEBUG org.apache.hadoop.ipc.HBaseServer: Server connection from X.X.X.X:60931; # active connections: 11; # queued calls: 2500
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We had 2500 items in the rpc queue waiting to be processed.&lt;/p&gt;

&lt;p&gt;Turns out he had too few handlers for number of clients (but also, it seems like he figured hw issues in that his RAM bus was running at 1/4 the rate that it should have been running at).&lt;/p&gt;

&lt;p&gt;Chatting w/ J-D this morning, he asked if the queues hold &apos;data&apos;.  The queues hold &apos;Calls&apos;.  Calls are the client request.  They contain data.&lt;/p&gt;

&lt;p&gt;Jack had 2500 items queued.  If each item to insert was 1MB, thats 2.5k * 1MB of memory that is outside of our generally accounting.&lt;/p&gt;

&lt;p&gt;Currently the queue size is handlers * MAX_QUEUE_SIZE_PER_HANDLER where MAX_QUEUE_SIZE_PER_HANDLER is hardcoded to be 100.&lt;/p&gt;

&lt;p&gt;If the queue is full we block (LinkedBlockingQueue).&lt;/p&gt;

&lt;p&gt;Going to change the queue size from 100 to 10 by default &amp;#8211; but also will make it configurable and will doc. this as possible cause of OOME.  Will try it on production here before committing patch.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12504988">HBASE-3813</key>
            <summary>Change RPC callQueue size from &quot;handlerCount * MAX_QUEUE_SIZE_PER_HANDLER;&quot;</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stack">stack</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Fri, 22 Apr 2011 16:59:41 +0000</created>
                <updated>Tue, 16 Feb 2016 16:54:41 +0000</updated>
                            <resolved>Tue, 31 Jan 2012 21:42:36 +0000</resolved>
                                    <version>0.92.0</version>
                                    <fixVersion>0.92.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13023296" author="tlipcon" created="Fri, 22 Apr 2011 17:44:52 +0000"  >&lt;p&gt;Can we write our own blocking behavior based on queue memory usage rather than queue count? Not sure how difficult that would be to make Call implement HeapSize&lt;/p&gt;</comment>
                            <comment id="13023302" author="stack" created="Fri, 22 Apr 2011 17:56:46 +0000"  >&lt;p&gt;Todd, you can do anything! (J/K).  Yes, that sounds good.  We have &apos;blocking&apos; going on in app already when memstores fill.  I&apos;m thinking though that we&apos;d want to just do crass smaller queues for a 0.90.3 and then a sizing fix for 0.92.0 (We were going to run some tests here on our frontend to make sure no side effects taking the queue size down).&lt;/p&gt;</comment>
                            <comment id="13023303" author="ghelmling" created="Fri, 22 Apr 2011 17:57:25 +0000"  >&lt;p&gt;Implementing HeapSize might be kinda tough since the Call -&amp;gt; Invocation -&amp;gt; parameters can be more or less arbitrary objects.  &lt;/p&gt;

&lt;p&gt;I wonder if we could do some estimation, though, by wrapping the input stream during de-serialization and counting the number of bytes read?&lt;/p&gt;</comment>
                            <comment id="13023306" author="tlipcon" created="Fri, 22 Apr 2011 18:06:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;I wonder if we could do some estimation, though, by wrapping the input stream during de-serialization and counting the number of bytes read?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Or push the actual deserialization into the handler thread - ie queue the calls as just the byte buffers, and deserialize once they hit the handler?&lt;/p&gt;</comment>
                            <comment id="13023322" author="ghelmling" created="Fri, 22 Apr 2011 18:28:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;Or push the actual deserialization into the handler thread - ie queue the calls as just the byte buffers, and deserialize once they hit the handler?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure, looking through the code, we&apos;re already allocating and reading in to a ByteBuffer in HBaseServer.Connection.readAndProcess().  It&apos;s just that we immediately convert to a byte[] when passing to processData() where it does the deserialization.  Seems like a good gain to move any deserialization overhead out of the listener thread and into the handlers, with some easy memory accounting for the queue to boot.&lt;/p&gt;</comment>
                            <comment id="13029137" author="stack" created="Thu, 5 May 2011 05:39:39 +0000"  >&lt;p&gt;Patch for 0.90 branch.&lt;/p&gt;

&lt;p&gt;My thinking is this needs a fix for 0.90.3.  100 times the handler count can turn ugly real fast if cells are of any significant size and the RS stalls for a moment and queues backup.  This patch makes it configurable at least w/ the default tuned down from 100 to be more like 10 or so.&lt;/p&gt;

&lt;p&gt;Todd and Gary, you fellas are talking about a more correct fix. This unaccounted memory usage is going to mess us up over and over again so I think it a critical issue in need of a proper fix but I&apos;m thinking proper fix is over in 0.92.0?&lt;/p&gt;

&lt;p&gt;I&apos;m fine w/ this workaround not going into 0.90.3.  Just putting it up here in case folks are amenable.&lt;/p&gt;</comment>
                            <comment id="13029140" author="tlipcon" created="Thu, 5 May 2011 05:43:20 +0000"  >&lt;p&gt;+1 on this fix for now.&lt;/p&gt;</comment>
                            <comment id="13029151" author="stack" created="Thu, 5 May 2011 06:08:25 +0000"  >&lt;p&gt;I applied the workaround attached patch for now.  Moving this issue to 0.92.0 for better fix.&lt;/p&gt;</comment>
                            <comment id="13030206" author="hudson" created="Sat, 7 May 2011 00:08:29 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #1909 (See &lt;a href=&quot;https://builds.apache.org/hudson/job/HBase-TRUNK/1909/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/hudson/job/HBase-TRUNK/1909/&lt;/a&gt;)&lt;/p&gt;
</comment>
                            <comment id="13030485" author="yuzhihong@gmail.com" created="Sun, 8 May 2011 13:48:55 +0000"  >&lt;p&gt;BlockingQueue has remainingCapacity() that returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking.&lt;br/&gt;
Maybe we should write an implementation of BlockingQueue that is aware of the sizes of the objects it holds. Meaning it would block if the next element to be queued would cause total estimated heap consumed to exceed pre-determined threshold.&lt;/p&gt;

&lt;p&gt;I wonder if we should add variant of HbaseObjectWritable.readObject() that records the size of the Object returned.&lt;/p&gt;</comment>
                            <comment id="13030601" author="yuzhihong@gmail.com" created="Mon, 9 May 2011 04:26:56 +0000"  >&lt;p&gt;We need to consider the fact that after Call object is removed from callQueue, it is enqueued to Connection.responseQueue&lt;br/&gt;
This means in order to limit the heap consumption of Call objects, callQueue and Connection.responseQueue should be managed jointly.&lt;/p&gt;</comment>
                            <comment id="13036386" author="stack" created="Thu, 19 May 2011 19:19:26 +0000"  >&lt;p&gt;@Ted Sounds good if you can figure the size of a Call object in a non-intrusive way (as per Gary&apos;s comment above).&lt;/p&gt;</comment>
                            <comment id="13036463" author="yuzhihong@gmail.com" created="Thu, 19 May 2011 21:09:06 +0000"  >&lt;p&gt;My proposal doesn&apos;t involve moving deserialization overhead into the handlers.&lt;br/&gt;
Primary reason is that we should determine the actual size of the parameter object for the Call.&lt;/p&gt;

&lt;p&gt;So in processData(), we would have:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    HbaseObjectWritable objectWritable = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HbaseObjectWritable();
    Writable param = HbaseObjectWritable.readObject(dis, objectWritable, conf);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I have cloned LinkedBlockingQueueBySize off of LinkedBlockingQueue. Its declaration is:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class LinkedBlockingQueueBySize&amp;lt;E &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; WritableWithSize&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; AbstractQueue&amp;lt;E&amp;gt;
        &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; BlockingQueue&amp;lt;E&amp;gt;, java.io.Serializable {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then we can utilize this method in HbaseObjectWritable:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; getWritableSize(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; instance, &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; declaredClass,
                                     Configuration conf) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13036508" author="yuzhihong@gmail.com" created="Thu, 19 May 2011 21:42:04 +0000"  >&lt;p&gt;w.r.t. moving deserialization overhead into the handlers, it implies we replace the current call queues with (serialized) parameter queue(s).&lt;br/&gt;
Currently we have:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (priorityCallQueue != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; getQosLevel(param) &amp;gt; highPriorityLevel) {
        priorityCallQueue.put(call);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;getQosLevel() requires deserialized Writable. This means there would be only one parameter queue after this change.&lt;/p&gt;

&lt;p&gt;I assume there would be no call queue because we don&apos;t want to keep serialized and unserialized forms of the same parameter at the same time.&lt;/p&gt;</comment>
                            <comment id="13197298" author="stack" created="Tue, 31 Jan 2012 21:42:36 +0000"  >&lt;p&gt;This was committed a while back.  Resolving.&lt;/p&gt;</comment>
                            <comment id="15016820" author="lars_francke" created="Fri, 20 Nov 2015 12:40:52 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12478247" name="3813.txt" size="1060" author="stack" created="Thu, 5 May 2011 05:39:39 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 22 Apr 2011 17:44:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27036</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0ho0n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>101153</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>