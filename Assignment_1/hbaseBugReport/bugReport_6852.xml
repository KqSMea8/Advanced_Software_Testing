<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:40:26 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-6852/HBASE-6852.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-6852] SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields</title>
                <link>https://issues.apache.org/jira/browse/HBASE-6852</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The SchemaMetrics.updateOnCacheHit costs too much while I am doing the full table scanning.&lt;br/&gt;
Here is the top 5 hotspots within regionserver while full scanning a table: (Sorry for the less-well-format)&lt;/p&gt;

&lt;p&gt;CPU: Intel Westmere microarchitecture, speed 2.262e+06 MHz (estimated)&lt;br/&gt;
Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a unit mask of 0x00 (No unit mask) count 5000000&lt;br/&gt;
samples  %        image name               symbol name&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
98447    13.4324  14033.jo                 void org.apache.hadoop.hbase.regionserver.metrics.SchemaMetrics.updateOnCacheHit(org.apache.hadoop.hbase.io.hfile.BlockType$BlockCategory, boolean)&lt;br/&gt;
  98447    100.000  14033.jo                 void org.apache.hadoop.hbase.regionserver.metrics.SchemaMetrics.updateOnCacheHit(org.apache.hadoop.hbase.io.hfile.BlockType$BlockCategory, boolean) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
45814     6.2510  14033.jo                 int org.apache.hadoop.hbase.KeyValue$KeyComparator.compareRows(byte[], int, int, byte[], int, int)&lt;br/&gt;
  45814    100.000  14033.jo                 int org.apache.hadoop.hbase.KeyValue$KeyComparator.compareRows(byte[], int, int, byte[], int, int) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
43523     5.9384  14033.jo                 boolean org.apache.hadoop.hbase.regionserver.StoreFileScanner.reseek(org.apache.hadoop.hbase.KeyValue)&lt;br/&gt;
  43523    100.000  14033.jo                 boolean org.apache.hadoop.hbase.regionserver.StoreFileScanner.reseek(org.apache.hadoop.hbase.KeyValue) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
42548     5.8054  14033.jo                 int org.apache.hadoop.hbase.KeyValue$KeyComparator.compare(byte[], int, int, byte[], int, int)&lt;br/&gt;
  42548    100.000  14033.jo                 int org.apache.hadoop.hbase.KeyValue$KeyComparator.compare(byte[], int, int, byte[], int, int) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
40572     5.5358  14033.jo                 int org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.binarySearchNonRootIndex(byte[], int, int, java.nio.ByteBuffer, org.apache.hadoop.io.RawComparator)~1&lt;br/&gt;
  40572    100.000  14033.jo                 int org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.binarySearchNonRootIndex(byte[], int, int, java.nio.ByteBuffer, org.apache.hadoop.io.RawComparator)~1 &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12608564">HBASE-6852</key>
            <summary>SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="hcheng">Cheng Hao</assignee>
                                    <reporter username="hcheng">Cheng Hao</reporter>
                        <labels>
                            <label>performance</label>
                    </labels>
                <created>Fri, 21 Sep 2012 03:08:49 +0000</created>
                <updated>Mon, 3 Dec 2012 21:47:32 +0000</updated>
                            <resolved>Fri, 2 Nov 2012 18:13:35 +0000</resolved>
                                    <version>0.94.0</version>
                                    <fixVersion>0.94.3</fixVersion>
                                    <component>metrics</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>15</watches>
                                                                <comments>
                            <comment id="13460157" author="hcheng" created="Fri, 21 Sep 2012 03:15:03 +0000"  >&lt;p&gt;The fix will cache the metrics and flush every 2000 calls, or the HFileReader closed.&lt;/p&gt;</comment>
                            <comment id="13460159" author="hcheng" created="Fri, 21 Sep 2012 03:19:36 +0000"  >&lt;p&gt;After patch the fix, the oprofile shows the top 8 hotspots as:&lt;/p&gt;

&lt;p&gt;samples  %        image name               app name                 symbol name&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
59829     7.9422  17779.jo                 java                     int org.apache.hadoop.hbase.KeyValue$KeyComparator.compare(byte[], int, i&lt;br/&gt;
nt, byte[], int, int)&lt;br/&gt;
  59829    100.000  17779.jo                 java                     int org.apache.hadoop.hbase.KeyValue$KeyComparator.compare(byte[], int,&lt;br/&gt;
 int, byte[], int, int) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
28571     3.7927  17779.jo                 java                     int org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.bin&lt;br/&gt;
arySearchNonRootIndex(byte[], int, int, java.nio.ByteBuffer, org.apache.hadoop.io.RawComparator)&lt;br/&gt;
  28571    100.000  17779.jo                 java                     int org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.b&lt;br/&gt;
inarySearchNonRootIndex(byte[], int, int, java.nio.ByteBuffer, org.apache.hadoop.io.RawComparator) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
19331     2.5662  17779.jo                 java                     org.apache.hadoop.hbase.regionserver.ScanQueryMatcher$MatchCode org.apach&lt;br/&gt;
e.hadoop.hbase.regionserver.ScanQueryMatcher.match(org.apache.hadoop.hbase.KeyValue)&lt;br/&gt;
  19331    100.000  17779.jo                 java                     org.apache.hadoop.hbase.regionserver.ScanQueryMatcher$MatchCode org.apa&lt;br/&gt;
che.hadoop.hbase.regionserver.ScanQueryMatcher.match(org.apache.hadoop.hbase.KeyValue) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
19063     2.5306  17779.jo                 java                     void org.apache.hadoop.hbase.regionserver.StoreFileScanner.enforceSeek()&lt;br/&gt;
  19063    100.000  17779.jo                 java                     void org.apache.hadoop.hbase.regionserver.StoreFileScanner.enforceSeek(&lt;br/&gt;
) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
  1         0.0054  libjvm.so                java                     Monitor::ILock(Thread*)&lt;br/&gt;
  1         0.0054  libjvm.so                java                     ObjectMonitor::enter(Thread*)&lt;br/&gt;
  2         0.0107  libjvm.so                java                     VMThread::loop()&lt;br/&gt;
  18642    99.9785  libjvm.so                java                     StealTask::do_it(GCTaskManager*, unsigned int)&lt;br/&gt;
18646     2.4752  libjvm.so                java                     SpinPause&lt;br/&gt;
  18646    100.000  libjvm.so                java                     SpinPause &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
15860     2.1054  17779.jo                 java                     byte[] org.apache.hadoop.hbase.KeyValue.createByteArray(byte[], int, int,&lt;br/&gt;
 byte[], int, int, byte[], int, int, long, org.apache.hadoop.hbase.KeyValue$Type, byte[], int, int)&lt;br/&gt;
  15860    100.000  17779.jo                 java                     byte[] org.apache.hadoop.hbase.KeyValue.createByteArray(byte[], int, in&lt;br/&gt;
t, byte[], int, int, byte[], int, int, long, org.apache.hadoop.hbase.KeyValue$Type, byte[], int, int) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
14754     1.9586  17779.jo                 java                     org.apache.hadoop.hbase.io.hfile.Cacheable org.apache.hadoop.hbase.io.hfi&lt;br/&gt;
le.LruBlockCache.getBlock(org.apache.hadoop.hbase.io.hfile.BlockCacheKey, boolean)&lt;br/&gt;
  14754    100.000  17779.jo                 java                     org.apache.hadoop.hbase.io.hfile.Cacheable org.apache.hadoop.hbase.io.h&lt;br/&gt;
file.LruBlockCache.getBlock(org.apache.hadoop.hbase.io.hfile.BlockCacheKey, boolean) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
13068     1.7348  17779.jo                 java                     org.apache.hadoop.hbase.io.hfile.HFileBlock org.apache.hadoop.hbase.io.hf&lt;br/&gt;
ile.HFileBlockIndex$BlockIndexReader.seekToDataBlock(byte[], int, int, org.apache.hadoop.hbase.io.hfile.HFileBlock, boolean, boolean, boolean&lt;br/&gt;
)~2&lt;br/&gt;
  13068    100.000  17779.jo                 java                     org.apache.hadoop.hbase.io.hfile.HFileBlock org.apache.hadoop.hbase.io.&lt;br/&gt;
hfile.HFileBlockIndex$BlockIndexReader.seekToDataBlock(byte[], int, int, org.apache.hadoop.hbase.io.hfile.HFileBlock, boolean, boolean, boole&lt;br/&gt;
an)~2 &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;/p&gt;</comment>
                            <comment id="13460161" author="hadoopqa" created="Fri, 21 Sep 2012 03:22:13 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12545995/onhitcache-trunk.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12545995/onhitcache-trunk.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2911//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2911//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13460169" author="stack" created="Fri, 21 Sep 2012 03:38:18 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;~chenghao_sh&amp;#93;&lt;/span&gt; Is it 0.94.0 that you are running?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; Did we fix these in later 0.94s?&lt;/p&gt;</comment>
                            <comment id="13460171" author="stack" created="Fri, 21 Sep 2012 03:42:04 +0000"  >&lt;p&gt;It doesn&apos;t look like it (after taking a look).&lt;/p&gt;</comment>
                            <comment id="13460172" author="hcheng" created="Fri, 21 Sep 2012 03:42:42 +0000"  >&lt;p&gt;yes, I ran the profiling in 0.94.0, but the patch is based on the trunk. it should also works for the later 0.94s.&lt;/p&gt;</comment>
                            <comment id="13460174" author="hcheng" created="Fri, 21 Sep 2012 03:47:21 +0000"  >&lt;p&gt;It&apos;s quite similar with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6603&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-6603&lt;/a&gt;, but per my testing, the 6603 doesn&apos;t improve that much in my case (full scan a table), but this fix did improve the performance a lot (it&apos;s 10% time shorter totally).&lt;/p&gt;</comment>
                            <comment id="13460176" author="hcheng" created="Fri, 21 Sep 2012 03:49:00 +0000"  >&lt;p&gt;stack, do you mean I should submit the patch for 0.94 as well?&lt;/p&gt;</comment>
                            <comment id="13460182" author="stack" created="Fri, 21 Sep 2012 03:56:44 +0000"  >&lt;p&gt;Patch looks good as does the change in the character of the pasted oprofile output.&lt;/p&gt;

&lt;p&gt;Did you look at adding a close to AbstractHFileReader that hfile v1 and v2 reader close could share?  Would that make sense here?&lt;/p&gt;

&lt;p&gt;The THRESHOLD_METRICS_FLUSH = 2k seems arbitrary.  Any reason why this number in particular?&lt;/p&gt;

&lt;p&gt;Nit is that the param name isCompaction is the name of a method that returns a boolean result.&lt;/p&gt;

&lt;p&gt;+1 on patch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; Mr. Metrics, want to take a look see at this one?&lt;/p&gt;



</comment>
                            <comment id="13460189" author="lhofhansl" created="Fri, 21 Sep 2012 04:12:53 +0000"  >&lt;p&gt;@Stack: No, this is a different issue. Didn&apos;t come up in my profiling since I only did cache path (so far).&lt;/p&gt;

&lt;p&gt;Good one Cheng.&lt;/p&gt;</comment>
                            <comment id="13460191" author="lhofhansl" created="Fri, 21 Sep 2012 04:13:28 +0000"  >&lt;p&gt;Since 0.94.2. got delayed, pulling this in.&lt;/p&gt;</comment>
                            <comment id="13460193" author="lhofhansl" created="Fri, 21 Sep 2012 04:17:52 +0000"  >&lt;p&gt;Wait. This is the cache hit path we&apos;re talking about. Didn&apos;t come up in my profiling at all.&lt;/p&gt;</comment>
                            <comment id="13460198" author="lhofhansl" created="Fri, 21 Sep 2012 04:27:12 +0000"  >&lt;p&gt;This is third time that metrics come up as a performance issue.&lt;br/&gt;
Do we have to think about this generally? How perfect do these metrics have to be?&lt;/p&gt;

&lt;p&gt;(Assuming a 64 bit architecture) we &lt;b&gt;could&lt;/b&gt; just use plain (not even volatile) longs and accept the fact that we&apos;ll miss some updates or overwrite others; the values would still be the right ballpark.&lt;/p&gt;</comment>
                            <comment id="13460199" author="lhofhansl" created="Fri, 21 Sep 2012 04:31:15 +0000"  >&lt;p&gt;@Cheng: Even with this patch we&apos;re still updating an AtomicLong each time we get a cache hit, right? I had assumed that that was the slow part. Is it not?&lt;/p&gt;</comment>
                            <comment id="13460224" author="hcheng" created="Fri, 21 Sep 2012 05:27:52 +0000"  >&lt;p&gt;@stack: it should make more sense if we put the close() into the AbastractHFileReader, but not sure if there any other concern, since the AbstractHFileReader doesn&apos;t have it.&lt;/p&gt;

&lt;p&gt;And for the THRESHOLD_METRICS_FLUSH = 2k, which I used during my testing, hope it&apos;s big enough for reducing the overhead, and less impact for getting the metrics snapshot timely. sorry, I may not able to give a good experiential number for it.&lt;/p&gt;

&lt;p&gt;@Lars: Yes, that&apos;s right, we&apos;re still updating an AtomicLong each time, but from profiling result, I didn&apos;t see the AtomicLong became the new hotspots, and the testing also did &amp;gt;10% saved in running time, which may means the overhead of AtomicLong could be ignored.&lt;/p&gt;</comment>
                            <comment id="13460244" author="stack" created="Fri, 21 Sep 2012 05:50:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do we have to think about this generally? How perfect do these metrics have to be?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In 0.94 we started recording way more than previous.&lt;/p&gt;

&lt;p&gt;I like your question on how perfect do they need to be.  For metrics updated by 1 frequently, my quess is we could miss a few.&lt;/p&gt;

&lt;p&gt;Why we using atomic longs anyway and not cliffclick&apos;s high scale lib... its in our CLASSPATH...&lt;/p&gt;</comment>
                            <comment id="13460253" author="lhofhansl" created="Fri, 21 Sep 2012 06:05:21 +0000"  >&lt;p&gt;Interesting. Thanks Cheng. I wonder what causes the performance problem then. Is it the get/putIfAbsent of the ConcurrentMap we store the metrics in?&lt;/p&gt;

&lt;p&gt;I&apos;d probably feel better if you set the threshold to 100 (instead of 2000) - you&apos;d still reduce the time used there by 99%.&lt;/p&gt;

&lt;p&gt;Also looking at the places where updateOnCacheHit is called... We also increment an AtomicLong (cacheHits), which is never read (WTF). We should remove that counter while we&apos;re at it (even when AtomicLongs are not the problem).&lt;/p&gt;</comment>
                            <comment id="13460275" author="xieliang007" created="Fri, 21 Sep 2012 06:36:08 +0000"  >&lt;p&gt;Hi Cheng, for running time, could you exclude the system resouce factor &#65311;  e.g. you ran the original version with many physical IOs, but reran the patched version without similar physical IO requests due to hitting OS page cache.  &lt;br/&gt;
In other words, could the reduced running time symptom be reproduced always, even you run patched version first, then rerun the original version ?  It&apos;d better if you can issue &quot;echo 1 &amp;gt; /proc/sys/vm/drop_caches&quot; to free pagecache between each test.&lt;/p&gt;</comment>
                            <comment id="13460280" author="hcheng" created="Fri, 21 Sep 2012 06:43:39 +0000"  >&lt;p&gt;Lars, the only place to use the ConcurentMap in SchemaMetrics is tableAndFamilyToMetrics. in this patch, I pre-create an array of AtomicLong for all of the possible oncachehit metrics items, which will avoids the concurrent issue and easy to be indexed while accessing.&lt;/p&gt;

&lt;p&gt;Thanks stack and Lars for the suggestions, I will create another patch file instead.&lt;/p&gt;</comment>
                            <comment id="13460297" author="hcheng" created="Fri, 21 Sep 2012 07:01:51 +0000"  >&lt;p&gt;Hi Liang, it&apos;s really good suggestion. Actually I didn&apos;t free the pagecache of OS before each launch. But I can try that later.&lt;/p&gt;

&lt;p&gt;In my tests, the table data was about 600GB within 4 machines, I guess the system cache may not impact the entire performance so much for a full table scanning.&lt;/p&gt;</comment>
                            <comment id="13460311" author="hcheng" created="Fri, 21 Sep 2012 07:24:44 +0000"  >&lt;p&gt;change the THRESHOLD_METRICS_FLUSH from 2000 to 100, per Lars&apos; suggestion&lt;/p&gt;</comment>
                            <comment id="13460316" author="hcheng" created="Fri, 21 Sep 2012 07:30:54 +0000"  >&lt;p&gt;I didn&apos;t remove the &quot;cacheHits&quot; in the HFileReaderV1 &amp;amp; V2, hope it&apos;s a good start to design a less overhead metrics framework.&lt;/p&gt;</comment>
                            <comment id="13460318" author="hadoopqa" created="Fri, 21 Sep 2012 07:32:10 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12546009/onhitcache-trunk.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12546009/onhitcache-trunk.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2913//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2913//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13460615" author="lhofhansl" created="Fri, 21 Sep 2012 16:54:25 +0000"  >&lt;p&gt;Patch looks good. I&apos;ll remain sceptical about the real life impact, though. The expensive is taking out the memory barriers. As long as we use AtomicLong (or volatiles, or synchronized, or use ConcurrentMap) this is still going to happen.&lt;/p&gt;

&lt;p&gt;Lemme move this out to 0.94.3, so that we can performance test this a bit more.&lt;/p&gt;</comment>
                            <comment id="13460683" author="mikhail" created="Fri, 21 Sep 2012 18:35:45 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;: what are the other cases when metrics came up as performance issues?&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;~chenghao_sh&amp;#93;&lt;/span&gt;: you said that your dataset size was 600GB, and the total amount of block cache was presumably much smaller than that, which makes me think the workload should have been I/O-bound. What was the CPU utilization on your test? What was the disk throughput?&lt;/p&gt;</comment>
                            <comment id="13460689" author="tlipcon" created="Fri, 21 Sep 2012 18:42:31 +0000"  >&lt;p&gt;I have a &quot;full table scan in isolation&quot; benchmark I&apos;ve been working on. My benchmark currently disables metrics, so I haven&apos;t seen this, but I&apos;ll add a flag to it to enable metrics and see if I can reproduce. Since it runs in isolation it&apos;s easy to run under &quot;perf stat&quot; and get cycle counts, etc, out of it. Will report back next week.&lt;/p&gt;</comment>
                            <comment id="13460695" author="lhofhansl" created="Fri, 21 Sep 2012 18:46:14 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6603&quot; title=&quot;RegionMetricsStorage.incrNumericMetric is called too often&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6603&quot;&gt;&lt;del&gt;HBASE-6603&lt;/del&gt;&lt;/a&gt; was the other one. Turns out this is the 2nd time (not the 3rd). The other issue I found through profiling were not metric related.&lt;/p&gt;

&lt;p&gt;So I was thinking what we should generally do about this. The idea in this patch (using an array indexed by metric) is a good one. Can we generally do that? I.e.:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;we know the metric we wish to collect ahead of time&lt;/li&gt;
	&lt;li&gt;Assign an index to each of them, and collect the value in an array&lt;/li&gt;
	&lt;li&gt;Simply use long (not volatile, atomiclong, just long)&lt;/li&gt;
	&lt;li&gt;Upon update or read we access the metric array by index&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;That would eliminate the cost of the ConcurrentMap and of the AtomicXYZ, with the caveat that the metric are only an approximation, which at the very least will make testing much harder.&lt;br/&gt;
Maybe we have exact and fuzzy metric and only use the fuzzy one on the hot code-paths.&lt;/p&gt;</comment>
                            <comment id="13460698" author="tlipcon" created="Fri, 21 Sep 2012 18:49:34 +0000"  >&lt;p&gt;If using an array of longs, we&apos;d get a ton of cache contention effects. Whatever we do should be cache-line padded to avoid this perf hole.&lt;/p&gt;

&lt;p&gt;Having a per-thread (ThreadLocal) metrics array isn&apos;t a bad way to go: no contention, can use non-volatile types, and can be stale-read during metrics snapshots by just iterating over all the threads.&lt;/p&gt;</comment>
                            <comment id="13460699" author="stack" created="Fri, 21 Sep 2012 18:50:31 +0000"  >&lt;p&gt;Perhaps use the cliffclick counter (if cost &amp;lt; volatile) and not have to do fuzzy?&lt;/p&gt;</comment>
                            <comment id="13460702" author="lhofhansl" created="Fri, 21 Sep 2012 18:53:09 +0000"  >&lt;p&gt;Oh yeah, you mentioned cliffclick... Need to look at that.&lt;/p&gt;</comment>
                            <comment id="13460717" author="stack" created="Fri, 21 Sep 2012 19:03:46 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; ....I made my comment before I saw Todd&apos;s suggestion&lt;/p&gt;</comment>
                            <comment id="13460725" author="eclark" created="Fri, 21 Sep 2012 19:09:30 +0000"  >&lt;p&gt;I think we should start doing more of what this patch does. Collect the values locally and then use a single call into the metrics sources to push the collected metrics.  In addition I think that we should remove some of the lesser used dynamic metrics, and for other stop using the time varying rate.&lt;/p&gt;

&lt;p&gt;For the most part I think that will remove the cost of metrics getting too out of control.  However I don&apos;t think that we should stop using AtomicLong/AtomicInt. From my understanding on most architectures the JVM will turn getAndIncrement into just one cpu instruction, rather than using compare and swap.  So there&apos;s very little gained by sacrificing correctness.&lt;/p&gt;</comment>
                            <comment id="13460736" author="tlipcon" created="Fri, 21 Sep 2012 19:19:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;getAndIncrement into just one cpu instruction&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, but it&apos;s a pretty expensive instruction, since it has to steal that cache line from whichever other core used it previously, and I believe acts as a full memory barrier as well (eg flushing write-combining buffers)&lt;/p&gt;


&lt;p&gt;The cliff click counter is effective but has more memory usage. Aggregating stuff locally and pushing to metrics seems ideal, but if we can&apos;t do that easily, then having the metrics per-thread and then occasionally grabbing them would work too. Memcached metrics work like that.&lt;/p&gt;</comment>
                            <comment id="13460786" author="eclark" created="Fri, 21 Sep 2012 20:02:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;Aggregating stuff locally and pushing to metrics seems ideal&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;With that comes a lot of book keeping and potential places to leak memory(if we use strong references) or to lose metrics data (if we use weak references). I&apos;m not sure that the perf gain will be high enough to justify that. &lt;/p&gt;

&lt;p&gt;Since we already shim a lot to the metrics2 classes it seems like using the high-scale-lib counters to create conurrent versions of the MetricMutableCounter&lt;/p&gt;
{Long|Int}
&lt;p&gt; would stop most cache contention pretty easily.  For me these seem like the order of cost vs benefit:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Aggregating metrics locally before pushing to the metrics system whenever possible&lt;/li&gt;
	&lt;li&gt;Using the hashmap less (This is already happening in the metrics2 move over. See &lt;a href=&quot;https://github.com/apache/hbase/blob/trunk/hbase-hadoop1-compat/src/main/java/org/apache/hadoop/hbase/master/metrics/MasterMetricsSourceImpl.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;MasterMetricsSourceImpl&lt;/a&gt; for how known metrics are staying away from the hashmap)&lt;/li&gt;
	&lt;li&gt;Changing  metrics to use counters rather than time varying rate wherever possible (Lots less locking if we don&apos;t need to keep min/max)&lt;/li&gt;
	&lt;li&gt;Create CliffClick versions of Counters and use them whenever there&apos;s concurrent access&lt;/li&gt;
	&lt;li&gt;Look at ThreadLocal caches versions of metrics.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13461559" author="hcheng" created="Mon, 24 Sep 2012 01:33:04 +0000"  >&lt;blockquote&gt;&lt;p&gt; Cheng Hao: you said that your dataset size was 600GB, and the total amount of block cache was presumably much smaller than that, which makes me think the workload should have been I/O-bound. What was the CPU utilization on your test? What was the disk throughput?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Actually it&apos;s the CPU-bound. and the utilization is more than 80%.&lt;/p&gt;

&lt;p&gt;I have 4 machines and each machine has 12 disks and 24 CPU cores.&lt;br/&gt;
Besides, in order to make it more effective, I have splitted the regions twice, and then did the major compact, to be sure the data locality. After that, I ran the data scanning tests base on Hive query like &quot;select count() from xxx&quot;;&lt;/p&gt;

&lt;p&gt;I am also curious if there any overheads of threads/syscalls switching (like during the IPC). PS: I did set the &quot;hbase.client.scanner.caching&quot; as 1000;&lt;/p&gt;</comment>
                            <comment id="13465319" author="stack" created="Fri, 28 Sep 2012 03:52:43 +0000"  >&lt;p&gt;So what is the feeling here?  This is an improvement.  Its a sketch of what we&apos;d like to do longterm.  It improves your performance &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=chenghao&quot; class=&quot;user-hover&quot; rel=&quot;chenghao&quot;&gt;Cheng Hao&lt;/a&gt;?  I&apos;m inclined to commit it.&lt;/p&gt;</comment>
                            <comment id="13465357" author="hcheng" created="Fri, 28 Sep 2012 05:00:43 +0000"  >&lt;p&gt;Hi, stack, the patch does improve the performance in my case, and for the AtomicLong stuff, maybe we could wait for the next generation of Metrics framework.&lt;/p&gt;</comment>
                            <comment id="13465393" author="lhofhansl" created="Fri, 28 Sep 2012 06:01:44 +0000"  >&lt;p&gt;I still find it strange that still using AtomicLongs gives an improvement (because all that&apos;s different then is an access into a concurrent map) and that your test in fact was CPU bound. 10% improvement seems almost unbelievable, it makes me think there is something else at play.&lt;br/&gt;
There&apos;s probably no harm in committing it (it&apos;s only slightly more complicated).&lt;/p&gt;</comment>
                            <comment id="13465399" author="stack" created="Fri, 28 Sep 2012 06:10:20 +0000"  >&lt;p&gt;OK. Will leave it for now.  Will commit it if Elliott doesn&apos;t subsume this w/ his cliffclick counter.&lt;/p&gt;</comment>
                            <comment id="13471147" author="chenghao" created="Sun, 7 Oct 2012 05:24:42 +0000"  >&lt;p&gt;I tested the AtomicLong, Counter, and normal function call, and the result as:&lt;br/&gt;
with my laptop (Windows 7, 64 bit jdk 1.7,Core i5-2540M CPU @ 2.60GHz):&lt;br/&gt;
AtomicTest: 1429ms,100000000&lt;br/&gt;
AtomicTest: 1433ms,100000000&lt;br/&gt;
AtomicTest: 1445ms,100000000&lt;br/&gt;
CounterTest: 6659ms,100000000&lt;br/&gt;
CounterTest: 6609ms,100000000&lt;br/&gt;
CounterTest: 6486ms,100000000&lt;br/&gt;
NormalTest(Function): 238ms,100000000&lt;br/&gt;
NormalTest(Function): 237ms,100000000&lt;br/&gt;
NormalTest(Function): 230ms,100000000&lt;/p&gt;

&lt;p&gt;With my server (Linux, 64 bit jdk 1.7, Intel(R) Xeon(R) CPU           L5640  @ 2.27GHz)&lt;br/&gt;
AtomicTest: 1344ms,100000000&lt;br/&gt;
AtomicTest: 1220ms,100000000&lt;br/&gt;
AtomicTest: 1085ms,100000000&lt;br/&gt;
CounterTest: 1518ms,100000000&lt;br/&gt;
CounterTest: 1438ms,100000000&lt;br/&gt;
CounterTest: 1815ms,100000000&lt;br/&gt;
NormalTest(Function): 94ms,100000000&lt;br/&gt;
NormalTest(Function): 89ms,100000000&lt;br/&gt;
NormalTest(Function): 89ms,100000000&lt;/p&gt;

&lt;p&gt;In both env, the Counter seems slower than the AtomicLong.&lt;/p&gt;</comment>
                            <comment id="13471149" author="hadoopqa" created="Sun, 7 Oct 2012 05:32:37 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12548145/AtomicTest.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12548145/AtomicTest.java&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3018//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3018//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13471150" author="chenghao" created="Sun, 7 Oct 2012 05:41:23 +0000"  >&lt;p&gt;I re-ran the scanning tests, with or without the patch attached, still, the patched version got 10% shorter in entire running time.&lt;br/&gt;
The oprofile result of the un-patched version as (top 4):&lt;br/&gt;
samples  %        image name               symbol name&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
54182    14.6977  23960.jo                 void org.apache.hadoop.hbase.regionserver.metrics.SchemaMetrics.incrNumericMetric(org.apache.hadoop.hbase.io.hfile.BlockType$BlockCategory, boolean, org.a&lt;br/&gt;
pache.hadoop.hbase.regionserver.metrics.SchemaMetrics$BlockMetricType)&lt;br/&gt;
  54182    100.000  23960.jo                 void org.apache.hadoop.hbase.regionserver.metrics.SchemaMetrics.incrNumericMetric(org.apache.hadoop.hbase.io.hfile.BlockType$BlockCategory, boolean, org&lt;br/&gt;
.apache.hadoop.hbase.regionserver.metrics.SchemaMetrics$BlockMetricType) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
43949    11.9219  23960.jo                 int org.apache.hadoop.hbase.KeyValue$KeyComparator.compare(byte[], int, int, byte[], int, int)&lt;br/&gt;
  43949    100.000  23960.jo                 int org.apache.hadoop.hbase.KeyValue$KeyComparator.compare(byte[], int, int, byte[], int, int) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
20725     5.6220  23960.jo                 int org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.binarySearchNonRootIndex(byte[], int, int, java.nio.ByteBuffer, org.apache.hadoop.io&lt;br/&gt;
.RawComparator)&lt;br/&gt;
  20725    100.000  23960.jo                 int org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.binarySearchNonRootIndex(byte[], int, int, java.nio.ByteBuffer, org.apache.hadoop.io.RawComparator) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
17554     4.7618  23960.jo                 org.apache.hadoop.hbase.io.hfile.HFileBlock org.apache.hadoop.hbase.io.hfile.HFileReaderV2.readBlock(long, long, boolean, boolean, boolean, org.apache.hadoop.hbase.io.hfile.BlockType)&lt;br/&gt;
  17554    100.000  23960.jo                 org.apache.hadoop.hbase.io.hfile.HFileBlock org.apache.hadoop.hbase.io.hfile.HFileReaderV2.readBlock(long, long, boolean, boolean, boolean, org.apache.hadoop.hbase.io.hfile.BlockType) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;And the oprofile result for patched version as (Top 4):&lt;br/&gt;
samples  %        image name               symbol name&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
53716    11.9679  3683.jo                  int org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.binarySearchNonRootIndex(byte[], int, int, java.nio.ByteBuffer, org.apache.hadoop.io.RawComparator)&lt;br/&gt;
  53716    100.000  3683.jo                  int org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.binarySearchNonRootIndex(byte[], int, int, java.nio.ByteBuffer, org.apache.hadoop.io.RawComparator) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
34921     7.7804  3683.jo                  int org.apache.hadoop.hbase.KeyValue$KeyComparator.compare(byte[], int, int, byte[], int, int)&lt;br/&gt;
  34921    100.000  3683.jo                  int org.apache.hadoop.hbase.KeyValue$KeyComparator.compare(byte[], int, int, byte[], int, int) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
31446     7.0061  3683.jo                  org.apache.hadoop.hbase.io.hfile.HFileBlock org.apache.hadoop.hbase.io.hfile.HFileReaderV2.readBlock(long, long, boolean, boolean, boolean, org.apache.hadoop.hbase.io.hfile.BlockType)&lt;br/&gt;
  31446    100.000  3683.jo                  org.apache.hadoop.hbase.io.hfile.HFileBlock org.apache.hadoop.hbase.io.hfile.HFileReaderV2.readBlock(long, long, boolean, boolean, boolean, org.apache.hadoop.hbase.io.hfile.BlockType) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;br/&gt;
-------------------------------------------------------------------------------&lt;br/&gt;
20126     4.4841  3683.jo                  org.apache.hadoop.hbase.regionserver.ScanQueryMatcher$MatchCode org.apache.hadoop.hbase.regionserver.ScanQueryMatcher.match(org.apache.hadoop.hbase.KeyValue)&lt;br/&gt;
  20126    100.000  3683.jo                  org.apache.hadoop.hbase.regionserver.ScanQueryMatcher$MatchCode org.apache.hadoop.hbase.regionserver.ScanQueryMatcher.match(org.apache.hadoop.hbase.KeyValue) &lt;span class=&quot;error&quot;&gt;&amp;#91;self&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Perhaps, the function call itself may costs too much, like the stacks poping / pushing etc. and the patch just reduces the un-necessary function calls.&lt;/p&gt;</comment>
                            <comment id="13471151" author="chenghao" created="Sun, 7 Oct 2012 05:45:21 +0000"  >&lt;p&gt;Sorry, please check the AtomicTest.java attached, to compare the performance of AtomicLong / Counter / Normal function call.&lt;/p&gt;</comment>
                            <comment id="13471390" author="lhofhansl" created="Mon, 8 Oct 2012 03:37:00 +0000"  >&lt;p&gt;Thanks Cheng. That microbenchmark might not cover the actual cost of a memory barriers when many different threads are running on different cores.&lt;/p&gt;

&lt;p&gt;It looks like the patch will be an improvement.&lt;/p&gt;

&lt;p&gt;It would still be great to know why updateOnCacheHit causes such a performance hit. If it is the ConcurrentMap access we should fix it there (with the lock-free array theme I mentioned above - maybe with the padding as Todd suggests, if needed). That would be a more general fix.&lt;br/&gt;
What do you think, Cheng?&lt;/p&gt;

&lt;p&gt;@Todd: Re: ThreadLocal. We had a bunch of incidents a few years back at Salesforce where it turned out that accessing threadlocals is not free.&lt;/p&gt;</comment>
                            <comment id="13471764" author="tlipcon" created="Mon, 8 Oct 2012 18:58:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;@Todd: Re: ThreadLocal. We had a bunch of incidents a few years back at Salesforce where it turned out that accessing threadlocals is not free.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed, it involves a lookup in a hashmap. But we could do that lookup once, and pass it through the whole scanner stack, etc, in some kind of &quot;ScanContext&quot; parameter. That would be helpful for a bunch of places where we currently use threadlocals (metrics, rpc call &quot;cancellation&quot; checks, tracing, etc)&lt;/p&gt;</comment>
                            <comment id="13476679" author="chenghao" created="Tue, 16 Oct 2012 02:43:03 +0000"  >&lt;p&gt;Sample callgraph via visualvm, seems the bottleneck was the SechemaMetrics.incrNumericMetric() itself; and the Map is does another hotspot; does recursive calls take that high overhead? Interesting.&lt;/p&gt;</comment>
                            <comment id="13476686" author="hadoopqa" created="Tue, 16 Oct 2012 02:58:42 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12549247/metrics_hotspots.png&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12549247/metrics_hotspots.png&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3055//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3055//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13476695" author="chenghao" created="Tue, 16 Oct 2012 03:36:59 +0000"  >&lt;p&gt;Sorry, just read an article, the self time may not accurate in sampling result, as the modern JVM will optimize the function call as inlined.&lt;/p&gt;

&lt;p&gt;But from the sampling call graph, it may tells the ConcurrentHashMap.get() is one of the hotspots, and that may also explains why the patch reduced the overhead.&lt;/p&gt;</comment>
                            <comment id="13482954" author="lhofhansl" created="Wed, 24 Oct 2012 04:42:00 +0000"  >&lt;p&gt;Thanks for all your work here Cheng.&lt;/p&gt;</comment>
                            <comment id="13484399" author="lhofhansl" created="Thu, 25 Oct 2012 19:24:07 +0000"  >&lt;p&gt;Did a microbenchmark too.&lt;br/&gt;
ConcurrentHashMap.get/putIfAbsent plus updating an atomiclong takes about twice as long as just updating an atomiclong (testing with 1 thread and 100 threads on a dual core machine).&lt;/p&gt;</comment>
                            <comment id="13484491" author="eclark" created="Thu, 25 Oct 2012 21:15:21 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6410&quot; title=&quot;Move RegionServer Metrics to metrics2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6410&quot;&gt;&lt;del&gt;HBASE-6410&lt;/del&gt;&lt;/a&gt; removes most of the calls to concurrent hash maps.  And it starts using the high scalability counter class.&lt;/p&gt;</comment>
                            <comment id="13484543" author="lhofhansl" created="Thu, 25 Oct 2012 22:31:09 +0000"  >&lt;p&gt;So we should probably not consider this for 0.94 then. And for 0.96 this is a non-issue, right?&lt;/p&gt;</comment>
                            <comment id="13484551" author="eclark" created="Thu, 25 Oct 2012 22:49:35 +0000"  >&lt;p&gt;For 0.96 it&apos;s (hopefully) a non-issue.&lt;br/&gt;
For 0.94 I think the perf gain might be worth applying this patch.&lt;/p&gt;</comment>
                            <comment id="13484630" author="lhofhansl" created="Fri, 26 Oct 2012 01:06:50 +0000"  >&lt;p&gt;0.94 patch. Also uses AtomicLongArray instead of AtomicLong[].&lt;/p&gt;</comment>
                            <comment id="13484705" author="stack" created="Fri, 26 Oct 2012 04:48:29 +0000"  >&lt;p&gt;Patch looks good to me for 0.94&lt;/p&gt;</comment>
                            <comment id="13484721" author="lhofhansl" created="Fri, 26 Oct 2012 05:14:22 +0000"  >&lt;p&gt;Added you as a contributor, Cheng, and assigned to you.&lt;br/&gt;
Going to commit this.&lt;/p&gt;

&lt;p&gt;Thanks for your perseverance Cheng &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                            <comment id="13484723" author="lhofhansl" created="Fri, 26 Oct 2012 05:18:18 +0000"  >&lt;p&gt;Committed to 0.94. Thanks for the profiling work and the patch, Cheng!&lt;/p&gt;</comment>
                            <comment id="13484742" author="hudson" created="Fri, 26 Oct 2012 06:31:23 +0000"  >&lt;p&gt;Integrated in HBase-0.94 #556 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/556/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/556/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields (Cheng Hao and LarsH) (Revision 1402392)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/SchemaMetrics.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/metrics/TestSchemaMetrics.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13484919" author="yuzhihong@gmail.com" created="Fri, 26 Oct 2012 13:43:49 +0000"  >&lt;p&gt;There were 10 test failures in build 556 which might be related to this JIRA.&lt;/p&gt;</comment>
                            <comment id="13484976" author="lhofhansl" created="Fri, 26 Oct 2012 15:03:11 +0000"  >&lt;p&gt;will check it out&lt;/p&gt;

</comment>
                            <comment id="13485059" author="lhofhansl" created="Fri, 26 Oct 2012 17:20:23 +0000"  >&lt;p&gt;Yes, these test failures are definitely related. I am going to revert the patch, until we can fix all the tests.&lt;/p&gt;</comment>
                            <comment id="13485062" author="lhofhansl" created="Fri, 26 Oct 2012 17:22:07 +0000"  >&lt;p&gt;These are the failing tests (in case we do not get to this before jenkins removes the old run):&lt;br/&gt;
    org.apache.hadoop.hbase.io.hfile.TestScannerSelectionUsingTTL.testScannerSelection&lt;span class=&quot;error&quot;&gt;&amp;#91;2&amp;#93;&lt;/span&gt;&lt;br/&gt;
    org.apache.hadoop.hbase.io.hfile.TestScannerSelectionUsingTTL.testScannerSelection&lt;span class=&quot;error&quot;&gt;&amp;#91;3&amp;#93;&lt;/span&gt;&lt;br/&gt;
    org.apache.hadoop.hbase.io.hfile.TestScannerSelectionUsingTTL.testScannerSelection&lt;span class=&quot;error&quot;&gt;&amp;#91;4&amp;#93;&lt;/span&gt;&lt;br/&gt;
    org.apache.hadoop.hbase.io.hfile.TestScannerSelectionUsingTTL.testScannerSelection&lt;span class=&quot;error&quot;&gt;&amp;#91;5&amp;#93;&lt;/span&gt;&lt;br/&gt;
    org.apache.hadoop.hbase.regionserver.TestBlocksScanned.testBlocksScanned&lt;br/&gt;
    org.apache.hadoop.hbase.regionserver.TestStoreFile.testCacheOnWriteEvictOnClose&lt;br/&gt;
    org.apache.hadoop.hbase.regionserver.TestStoreFile.testBloomFilter&lt;br/&gt;
    org.apache.hadoop.hbase.regionserver.TestStoreFile.testDeleteFamilyBloomFilter&lt;br/&gt;
    org.apache.hadoop.hbase.regionserver.TestStoreFile.testBloomTypes&lt;br/&gt;
    org.apache.hadoop.hbase.regionserver.TestStoreFile.testBloomEdgeCases&lt;/p&gt;</comment>
                            <comment id="13485064" author="lhofhansl" created="Fri, 26 Oct 2012 17:30:26 +0000"  >&lt;p&gt;Reverted for now. I think I know what is happening (the metrics are just not flushed right away), but I have no time to look into this.&lt;/p&gt;</comment>
                            <comment id="13485127" author="hudson" created="Fri, 26 Oct 2012 19:14:02 +0000"  >&lt;p&gt;Integrated in HBase-0.94 #557 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/557/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/557/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; REVERT due to test failures. (Revision 1402588)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/SchemaMetrics.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/metrics/TestSchemaMetrics.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13485345" author="lhofhansl" created="Sat, 27 Oct 2012 04:07:48 +0000"  >&lt;p&gt;There&apos;s a bug about the ALL_SCHEMA_METRIC is updated/flushed, which causes this.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=hcheng&quot; class=&quot;user-hover&quot; rel=&quot;hcheng&quot;&gt;Cheng Hao&lt;/a&gt; If you could have a look that&apos;d be cool &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13486068" author="chenghao" created="Mon, 29 Oct 2012 15:01:14 +0000"  >&lt;p&gt;oh, sorry for that, I will resolve it asap.&lt;/p&gt;</comment>
                            <comment id="13486086" author="lhofhansl" created="Mon, 29 Oct 2012 15:38:33 +0000"  >&lt;p&gt;No problem. Thanks for providing a patch. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The problem seems to be the ALL_SCHEMA_METRIC not always updated.&lt;br/&gt;
(The flushing is definitely not correct... A call to flush won&apos;t flush the ALL_SCHEMA_METRIC, but even when I fixed that, the tests still failed).&lt;/p&gt;</comment>
                            <comment id="13488457" author="chenghao" created="Thu, 1 Nov 2012 04:43:39 +0000"  >&lt;p&gt;Please take the 6852-0.94_2.patch&lt;/p&gt;

&lt;p&gt;Found a small bug while updating the &quot;ALL_CATEGORY metrics&quot; in the function &lt;br/&gt;
&quot;SchemaMetrics.incrNumericMetric(BlockCategory blockCategory,&lt;br/&gt;
      boolean isCompaction, BlockMetricType metricType, long amount)&quot;&lt;/p&gt;

&lt;p&gt;And I also add the &quot;flushMetrics()&quot; in the function &quot;SchemaMetrics.getMetricsSnapshot()&quot;&lt;/p&gt;

&lt;p&gt;Now it passed the unit test in my local.&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;</comment>
                            <comment id="13488464" author="lhofhansl" created="Thu, 1 Nov 2012 05:00:01 +0000"  >&lt;p&gt;I ran all the tests locally as well. All pass now. Committed to 0.94.&lt;br/&gt;
Thanks for the patch and the fix Cheng!&lt;/p&gt;</comment>
                            <comment id="13488516" author="hudson" created="Thu, 1 Nov 2012 06:53:24 +0000"  >&lt;p&gt;Integrated in HBase-0.94 #562 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/562/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/562/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields (Cheng Hao and LarsH) - REAPPLY (Revision 1404464)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/SchemaMetrics.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/metrics/TestSchemaMetrics.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13488549" author="chenghao" created="Thu, 1 Nov 2012 08:31:09 +0000"  >&lt;p&gt;Still failed,&lt;/p&gt;

&lt;p&gt;And I can not open the URL &quot;https://builds.apache.org/job/HBase-0.94/562/&quot;, not sure if there any problem for the build server.&lt;/p&gt;
</comment>
                            <comment id="13488653" author="yuzhihong@gmail.com" created="Thu, 1 Nov 2012 12:40:34 +0000"  >&lt;p&gt;Test failure in hadoop.hbase.io.hfile.TestScannerSelectionUsingTTL is reproducible. &lt;/p&gt;</comment>
                            <comment id="13488739" author="lhofhansl" created="Thu, 1 Nov 2012 15:03:36 +0000"  >&lt;p&gt;Not on my machine... Weird.&lt;/p&gt;</comment>
                            <comment id="13488740" author="lhofhansl" created="Thu, 1 Nov 2012 15:07:10 +0000"  >&lt;p&gt;-------------------------------------------------------&lt;br/&gt;
 T E S T S&lt;br/&gt;
-------------------------------------------------------&lt;br/&gt;
Running org.apache.hadoop.hbase.io.hfile.TestScannerSelectionUsingTTL&lt;br/&gt;
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 14.642 sec&lt;/p&gt;

&lt;p&gt;Results :&lt;/p&gt;

&lt;p&gt;Tests run: 6, Failures: 0, Errors: 0, Skipped: 0&lt;/p&gt;</comment>
                            <comment id="13488746" author="zhihyu@ebaysf.com" created="Thu, 1 Nov 2012 15:13:16 +0000"  >&lt;p&gt;Here is the environment where the test failed:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ uname -a
Linux s0 2.6.38-11-&lt;span class=&quot;code-keyword&quot;&gt;generic&lt;/span&gt; #48-Ubuntu SMP Fri Jul 29 19:02:55 UTC 2011 x86_64 x86_64 x86_64 GNU/Linux

$ java -version
java version &lt;span class=&quot;code-quote&quot;&gt;&quot;1.6.0_26&quot;&lt;/span&gt;
Java(TM) SE &lt;span class=&quot;code-object&quot;&gt;Runtime&lt;/span&gt; Environment (build 1.6.0_26-b03)
Java HotSpot(TM) 64-Bit Server VM (build 20.1-b02, mixed mode)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13488763" author="lhofhansl" created="Thu, 1 Nov 2012 15:31:56 +0000"  >&lt;p&gt;I triggered a new build. If that fails again, I am not sure what to do.&lt;br/&gt;
I ran the test a lot of times locally and it always passes.&lt;/p&gt;</comment>
                            <comment id="13488791" author="zhihyu@ebaysf.com" created="Thu, 1 Nov 2012 16:01:24 +0000"  >&lt;p&gt;The new build failed again.&lt;br/&gt;
After reverting patch v2, TestScannerSelectionUsingTTL passed on the above mentioned platform.&lt;/p&gt;</comment>
                            <comment id="13488794" author="lhofhansl" created="Thu, 1 Nov 2012 16:10:11 +0000"  >&lt;p&gt;Does it fail locally on your machine Ted?&lt;br/&gt;
I&apos;m going to run the test on a different machine so that I can debug.&lt;br/&gt;
If that is not fruitful, I&apos;ll revert the change again... Sigh &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13488795" author="zhihyu@ebaysf.com" created="Thu, 1 Nov 2012 16:15:43 +0000"  >&lt;p&gt;I wasn&apos;t able to produce the test failure on MacBook.&lt;/p&gt;</comment>
                            <comment id="13488808" author="lhofhansl" created="Thu, 1 Nov 2012 16:35:50 +0000"  >&lt;p&gt;Also tried on some other machines (JDK7 and JDK6) it passes all the time.&lt;br/&gt;
This is extremely disconcerting.&lt;/p&gt;</comment>
                            <comment id="13488824" author="lhofhansl" created="Thu, 1 Nov 2012 16:52:41 +0000"  >&lt;p&gt;Sorry, Cheng, I am probably going to have to roll this back again.&lt;/p&gt;</comment>
                            <comment id="13488875" author="lhofhansl" created="Thu, 1 Nov 2012 17:45:36 +0000"  >&lt;p&gt;Reverted a 2nd time.&lt;/p&gt;</comment>
                            <comment id="13488878" author="lhofhansl" created="Thu, 1 Nov 2012 17:46:28 +0000"  >&lt;p&gt;Moving to 0.94.4.&lt;/p&gt;

&lt;p&gt;Cheng, looking at the patch, do you think it&apos;s possible due to the way we flush the metrics for the all schema metrics?&lt;/p&gt;</comment>
                            <comment id="13489033" author="hudson" created="Thu, 1 Nov 2012 21:05:58 +0000"  >&lt;p&gt;Integrated in HBase-0.94 #564 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/564/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/564/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt;, REVERT again, due to unexplained test failures that only occur on the jenkins machines (Revision 1404691)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/SchemaMetrics.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/metrics/TestSchemaMetrics.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13489176" author="chenghao" created="Fri, 2 Nov 2012 00:37:31 +0000"  >&lt;p&gt;Thanks Lars and Ted, I will try to reproduce the failure locally first, and then to see if any logical bug of the schema metrics flushing.&lt;/p&gt;</comment>
                            <comment id="13489518" author="chenghao" created="Fri, 2 Nov 2012 16:19:37 +0000"  >&lt;p&gt;Lars, Ted, &lt;/p&gt;

&lt;p&gt;It did have a bug in the v2 patch, please take the 6852-0.94_3.patch; and it passed all of the metrics unit tests locally. Hopefully the weird failure won&apos;t happen again.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="13489521" author="yuzhihong@gmail.com" created="Fri, 2 Nov 2012 16:30:46 +0000"  >&lt;p&gt;@Cheng:&lt;br/&gt;
Thanks for your persistence.&lt;br/&gt;
I will run patch v3 on Linux.&lt;/p&gt;

&lt;p&gt;Can you tell us more about the bug you found ?&lt;/p&gt;</comment>
                            <comment id="13489532" author="yuzhihong@gmail.com" created="Fri, 2 Nov 2012 16:44:54 +0000"  >&lt;p&gt;I looped TestScannerSelectionUsingTTL 14 times on Linux and they passed.&lt;/p&gt;

&lt;p&gt;Looking at patch v3, updateOnCacheHit() and flushOnCacheHitMetrics() are checking this SchemaMetrics against ALL_SCHEMA_METRICS.&lt;br/&gt;
I think patch v3 should be good to go.&lt;/p&gt;

&lt;p&gt;I am running patch v3 through test suite. Will report back if I see anomaly.&lt;/p&gt;</comment>
                            <comment id="13489584" author="lhofhansl" created="Fri, 2 Nov 2012 17:45:35 +0000"  >&lt;p&gt;Thanks Cheng and thanks Ted!&lt;/p&gt;</comment>
                            <comment id="13489596" author="zhihyu@ebaysf.com" created="Fri, 2 Nov 2012 17:56:16 +0000"  >&lt;p&gt;0.94 test suite passed with patch v3:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Tests run: 1071, Failures: 0, Errors: 0, Skipped: 12

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 45:45.503s
[INFO] Finished at: Fri Nov 02 10:30:09 PDT 2012
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;@Lars:&lt;br/&gt;
Are you going to commit ?&lt;/p&gt;</comment>
                            <comment id="13489607" author="lhofhansl" created="Fri, 2 Nov 2012 18:05:15 +0000"  >&lt;p&gt;Awesome... 3rd time&apos;s a charm &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13489614" author="lhofhansl" created="Fri, 2 Nov 2012 18:13:35 +0000"  >&lt;p&gt;Re-committed.&lt;br/&gt;
Thanks again Cheng and Ted.&lt;/p&gt;</comment>
                            <comment id="13489773" author="hudson" created="Fri, 2 Nov 2012 21:46:31 +0000"  >&lt;p&gt;Integrated in HBase-0.94 #567 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/567/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/567/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; RE-REAPPLY, Cheng worked tirelessly to fix the issues. (Revision 1405083)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/SchemaMetrics.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13489861" author="chenghao" created="Sat, 3 Nov 2012 00:09:41 +0000"  >&lt;p&gt;Ouch&#65281;Still failed&#65292;and I still couldn&apos;t access the build server.&lt;br/&gt;
Any problem of the build server?&lt;/p&gt;</comment>
                            <comment id="13489865" author="zhihyu@ebaysf.com" created="Sat, 3 Nov 2012 00:18:41 +0000"  >&lt;p&gt;@Cheng:&lt;br/&gt;
The build failure might be due to other reasons.&lt;br/&gt;
Check back in a day or two.&lt;/p&gt;</comment>
                            <comment id="13489922" author="zhihyu@ebaysf.com" created="Sat, 3 Nov 2012 04:07:47 +0000"  >&lt;p&gt;There was no related test failure in &lt;a href=&quot;https://builds.apache.org/view/G-L/view/HBase/job/HBase-0.94/567/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/view/G-L/view/HBase/job/HBase-0.94/567/&lt;/a&gt; where patch v3 went in.&lt;/p&gt;</comment>
                            <comment id="13490347" author="lhofhansl" created="Mon, 5 Nov 2012 00:52:15 +0000"  >&lt;p&gt;Yeah... Looks good! Thanks again Cheng.&lt;/p&gt;

&lt;p&gt;Hey, I was also wondering whether there a chance to do your profiling one more time with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6032&quot; title=&quot;Port HFileBlockIndex improvement from HBASE-5987&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6032&quot;&gt;&lt;del&gt;HBASE-6032&lt;/del&gt;&lt;/a&gt; applied. In your last profiling run here (Oct 7th) HFileBlockIndex$BlockIndexReader.binarySearchNonRootIndex takes the top spot (after this patch). &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6032&quot; title=&quot;Port HFileBlockIndex improvement from HBASE-5987&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6032&quot;&gt;&lt;del&gt;HBASE-6032&lt;/del&gt;&lt;/a&gt; was applied on Oct 17th, I&apos;m wondering whether that helped.&lt;/p&gt;

&lt;p&gt;If you&apos;re busy, that&apos;s fine too... You already spent a lot of time on this issue.&lt;/p&gt;</comment>
                            <comment id="13490392" author="hudson" created="Mon, 5 Nov 2012 01:35:36 +0000"  >&lt;p&gt;Integrated in HBase-0.94-security-on-Hadoop-23 #9 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security-on-Hadoop-23/9/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security-on-Hadoop-23/9/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; RE-REAPPLY, Cheng worked tirelessly to fix the issues. (Revision 1405083)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt;, REVERT again, due to unexplained test failures that only occur on the jenkins machines (Revision 1404691)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields (Cheng Hao and LarsH) - REAPPLY (Revision 1404464)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; REVERT due to test failures. (Revision 1402588)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields (Cheng Hao and LarsH) (Revision 1402392)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/SchemaMetrics.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/SchemaMetrics.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/metrics/TestSchemaMetrics.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/SchemaMetrics.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/metrics/TestSchemaMetrics.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/SchemaMetrics.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/metrics/TestSchemaMetrics.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/metrics/SchemaMetrics.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/test/java/org/apache/hadoop/hbase/regionserver/metrics/TestSchemaMetrics.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13490649" author="chenghao" created="Mon, 5 Nov 2012 14:14:42 +0000"  >&lt;p&gt;@Lars, thank you for the committing;&lt;br/&gt;
The snapshot of 0.94 branch code improves about 17.7% for scanning in my case, and it&apos;s sure the &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6032&quot; title=&quot;Port HFileBlockIndex improvement from HBASE-5987&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6032&quot;&gt;&lt;del&gt;HBASE-6032&lt;/del&gt;&lt;/a&gt; helps a lot; &lt;br/&gt;
Here is the new hotspots for RegionServer via OProfile:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeHeader panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: solid;&quot;&gt;&lt;b&gt;Hotspots&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
CPU: Intel Westmere microarchitecture, speed 2.262e+06 MHz (estimated)
Counted CPU_CLK_UNHALTED events (Clock cycles when not halted) with a unit mask of 0x00 (No unit mask) count 5000000
samples  %        image name               symbol name
183371   17.1144  4465.jo                  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; org.apache.hadoop.hbase.KeyValue$KeyComparator.compare(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)
63267     5.9049  4465.jo                  org.apache.hadoop.hbase.regionserver.ScanQueryMatcher$MatchCode org.apache.hadoop.hbase.regionserver.ScanQueryMatcher.match(org.apache.hadoop.hbase.KeyValue)
59762     5.5777  4465.jo                  &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] org.apache.hadoop.hbase.KeyValue.createByteArray(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;, org.apache.hadoop.hbase.KeyValue$Type, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)
50975     4.7576  4465.jo                  &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; org.apache.hadoop.hbase.io.hfile.HFileReaderV2$ScannerV2.blockSeek(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;)
50891     4.7498  4465.jo                  void org.apache.hadoop.hbase.regionserver.StoreFileScanner.enforceSeek()
38257     3.5706  4465.jo                  jbyte_disjoint_arraycopy
37973     3.5441  4465.jo                  &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; org.apache.hadoop.hbase.regionserver.KeyValueHeap.generalizedSeek(&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;, org.apache.hadoop.hbase.KeyValue, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;)~1
33978     3.1712  4465.jo                  void org.apache.hadoop.util.PureJavaCrc32C.update(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13490780" author="lhofhansl" created="Mon, 5 Nov 2012 18:07:23 +0000"  >&lt;p&gt;Thanks Cheng, this is very helpful!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12550904" name="6852-0.94.txt" size="7659" author="lhofhansl" created="Fri, 26 Oct 2012 01:06:50 +0000"/>
                            <attachment id="12551669" name="6852-0.94_2.patch" size="8399" author="chenghao" created="Thu, 1 Nov 2012 04:43:39 +0000"/>
                            <attachment id="12551881" name="6852-0.94_3.patch" size="7349" author="chenghao" created="Fri, 2 Nov 2012 16:19:37 +0000"/>
                            <attachment id="12549247" name="metrics_hotspots.png" size="58103" author="chenghao" created="Tue, 16 Oct 2012 02:43:03 +0000"/>
                            <attachment id="12546009" name="onhitcache-trunk.patch" size="7444" author="hcheng" created="Fri, 21 Sep 2012 07:24:44 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 21 Sep 2012 03:22:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>239586</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 6 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00rg7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2379</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>