<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:09:59 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10047/HBASE-10047.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10047] postScannerFilterRow consumes a lot of CPU in tall table scans</title>
                <link>https://issues.apache.org/jira/browse/HBASE-10047</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Continuing my profiling quest, I find that in scanning tall table (and filtering everything on the server) a quarter of the time is now spent in the postScannerFilterRow coprocessor hook.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12681469">HBASE-10047</key>
            <summary>postScannerFilterRow consumes a lot of CPU in tall table scans</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="7">Later</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="lhofhansl">Lars Hofhansl</reporter>
                        <labels>
                    </labels>
                <created>Wed, 27 Nov 2013 01:17:40 +0000</created>
                <updated>Mon, 23 Dec 2013 03:35:36 +0000</updated>
                            <resolved>Mon, 23 Dec 2013 03:35:36 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13833306" author="lhofhansl" created="Wed, 27 Nov 2013 01:20:44 +0000"  >&lt;p&gt;Imagine of the profiling session.&lt;br/&gt;
postScannerFilterRow uses more CPU than the ScanQueryMatcher.&lt;/p&gt;

&lt;p&gt;This is from a sampler, so I do not suspect any profiling anomalies.&lt;br/&gt;
Removing that part of the code as a test does indeed yield a 25% improvement in the scan time.&lt;/p&gt;

&lt;p&gt;Now, this is an extreme case: Tall table, one small column, 1 version. So maybe it&apos;s not worth spending a lot of time on this.&lt;/p&gt;</comment>
                            <comment id="13833311" author="lhofhansl" created="Wed, 27 Nov 2013 01:26:21 +0000"  >&lt;p&gt;Better image&lt;/p&gt;</comment>
                            <comment id="13833314" author="lhofhansl" created="Wed, 27 Nov 2013 01:27:08 +0000"  >&lt;p&gt;I would not see this if I did not actually have any coprocessors. (in this case this is the Phoenix coprocessor loaded)&lt;/p&gt;</comment>
                            <comment id="13833341" author="azuryy" created="Wed, 27 Nov 2013 01:57:13 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;&lt;br/&gt;
Can you share which tool you used for your profiling? I am also has an REMOTE Application consumed a lot of CPU, I want to profile this App remotely.&lt;/p&gt;</comment>
                            <comment id="13833533" author="lhofhansl" created="Wed, 27 Nov 2013 07:00:11 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=azuryy&quot; class=&quot;user-hover&quot; rel=&quot;azuryy&quot;&gt;Fengdong Yu&lt;/a&gt; the simplest option is to use jvisualvm (ships with JDK), using the sampler.&lt;/p&gt;</comment>
                            <comment id="13833538" author="lhofhansl" created="Wed, 27 Nov 2013 07:05:47 +0000"  >&lt;p&gt;For all but extreme scenarios the improvement from this is within the noise. I might just close this, especially because I do not see a good way to fix this without loss of functionality.&lt;/p&gt;</comment>
                            <comment id="13833594" author="nkeywal" created="Wed, 27 Nov 2013 09:09:46 +0000"  >&lt;p&gt;I was thinking about&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;allowing the coprocessor to explicitly states the functions it overloaded&lt;/li&gt;
	&lt;li&gt;and/or: by reflexivity, check if the method is implemented in the client coprocessor class or comes from the BaseRegionObserver.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In both cases, we would construct a list of coprocessorWithPostScannerFilterRow when we load the coprocessor, and we would use this list in the host.&lt;/p&gt;</comment>
                            <comment id="13834013" author="lhofhansl" created="Wed, 27 Nov 2013 18:28:03 +0000"  >&lt;p&gt;I think the costly part is the instanceof. So if a coprocessor could make its type and the methods it overloads (as you said) explicit that could save some cycles.&lt;br/&gt;
However, coprocessors are not on the superhot code paths. The one mentioned here being an exception as it could called a lot when we filter a lot of rows at the server. So I am not sure it is actually worth it.&lt;/p&gt;</comment>
                            <comment id="13852600" author="lhofhansl" created="Thu, 19 Dec 2013 04:39:39 +0000"  >&lt;p&gt;Sample patch. Checks whether any coprocessor actually has its own postScannerFilterRow method. If not the loop can just be short circuited.&lt;/p&gt;

&lt;p&gt;As I said above, not sure it&apos;s even worth it. Just parking the patch here for now.&lt;/p&gt;</comment>
                            <comment id="13852663" author="lhofhansl" created="Thu, 19 Dec 2013 06:31:32 +0000"  >&lt;p&gt;Trying with Phoenix I do see a 5-10% improvement when doing a count(1) on a tall table (1 col).&lt;br/&gt;
Scanning the same (1 col) table with the HBase client using a Filter to filter all data at the server I see 25% scan improvement with patch.&lt;/p&gt;

&lt;p&gt;The question is whether the extra complexity in the code is worth it. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;, any opinion?&lt;/p&gt;</comment>
                            <comment id="13853542" author="apurtell" created="Fri, 20 Dec 2013 00:58:15 +0000"  >&lt;p&gt;I think this is a reasonable strategy, if the CP framework itself is getting in the way, skip the upcalls if there are no users. We can do it case by case.&lt;/p&gt;

&lt;p&gt;We only get the additional reflection overhead at load time. You can break out of this loop if you find one for a tiny bit of savings:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; hasCustomPostScannerFilterRow = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
+    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (RegionEnvironment env: coprocessors) {
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (env.getInstance() &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; RegionObserver) {
+        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+          env.getInstance().getClass().getDeclaredMethod(&lt;span class=&quot;code-quote&quot;&gt;&quot;postScannerFilterRow&quot;&lt;/span&gt;, ObserverContext.class,
+              InternalScanner.class, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[].class, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt;.class);
+          hasCustomPostScannerFilterRow = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
+        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (NoSuchMethodException ignore) {
+        }
+      }
+    }
+    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.hasCustomPostScannerFilterRow = hasCustomPostScannerFilterRow;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13853750" author="lhofhansl" created="Fri, 20 Dec 2013 07:12:55 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;. Oops, yes, missed the break there.&lt;br/&gt;
I&apos;ll do a few more tests with more columns. If there still is measurable gain, we can consider this.&lt;/p&gt;

&lt;p&gt;Maybe even better - we test all coprocessors at load time and only keep implementors of RegionObserver. That we all casting at &quot;runtime&quot; could be removed.&lt;/p&gt;</comment>
                            <comment id="13853756" author="lhofhansl" created="Fri, 20 Dec 2013 07:38:23 +0000"  >&lt;p&gt;Something like this. Moves all instances of instanceof into the constructor, at runtime no reflection is necessary.&lt;/p&gt;

&lt;p&gt;Left whitespace untouched so that it is easier to see the diff.&lt;/p&gt;</comment>
                            <comment id="13854211" author="apurtell" created="Fri, 20 Dec 2013 17:25:38 +0000"  >&lt;p&gt;The set of installed coprocessors can change at runtime concurrent with iteration of the list.&lt;/p&gt;</comment>
                            <comment id="13854409" author="lhofhansl" created="Fri, 20 Dec 2013 18:46:12 +0000"  >&lt;p&gt;Interesting, didn&apos;t realize that can happen. After the region is loaded? Ohh, when we detect an error we remove the coprocessor.&lt;br/&gt;
SortedCopyOnWriteSet should have been a hint too &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The first patch is still valid, since we&apos;re only removing after the region was loaded.&lt;br/&gt;
I didn&apos;t measure any perf improvement with v2 anyway, it seems instanceof is not the issue.&lt;/p&gt;</comment>
                            <comment id="13855097" author="lhofhansl" created="Sun, 22 Dec 2013 04:33:50 +0000"  >&lt;p&gt;Just occurred to me, even the first patch is not accurate if somebody has Coprocessor derived from a custom base class, where the base class implements the hook.&lt;/p&gt;</comment>
                            <comment id="13855099" author="lhofhansl" created="Sun, 22 Dec 2013 05:03:59 +0000"  >&lt;p&gt;New patch. 100% untested. Checks:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;the interface was implemented directly&lt;/li&gt;
	&lt;li&gt;the any class up the chain either has the hook directly, or BaseRegionCoprocessor is reached.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This is getting a bit out of hand.&lt;br/&gt;
Also not sure whether I can do the == comparison between the classes, they might come from the different class loaders&lt;br/&gt;
(I think... It might also be the case that BaseRegionObserver is always loaded via the system class loader).&lt;br/&gt;
Then it would need tests to make sure it does the right thing in all situations, etc, etc.&lt;/p&gt;

&lt;p&gt;I think I&apos;m just going to close this.&lt;/p&gt;</comment>
                            <comment id="13855100" author="apurtell" created="Sun, 22 Dec 2013 05:25:11 +0000"  >&lt;p&gt;What if we only care about our (as framework) worst case here? I think that is we might encounter a cast exception and error out without limiting the damage to the bad actor and unloading it. So handle that. But, sure, this is getting pretty far from where this issue started. &lt;/p&gt;</comment>
                            <comment id="13855327" author="lhofhansl" created="Mon, 23 Dec 2013 01:35:55 +0000"  >&lt;p&gt;You&apos;re saying we catch ClassCastException and then remove the coprocessor?&lt;br/&gt;
Looking at the code a bit more; in the RegionCoprocessorHost case we add Endpoint to the list of coprocessors, which does not seem to be necessary. Unfortunately only the tableCoprocessors are loaded in RegionCoprocessorHost, the systemCoprocessors are loaded in CoprocessorHost. Could refactor that, or simply just remove the Endpoint from the set of coprocessors, it seems they need (and should?) not to in there.&lt;/p&gt;</comment>
                            <comment id="13855343" author="lhofhansl" created="Mon, 23 Dec 2013 02:33:43 +0000"  >&lt;p&gt;Based on your hint &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;. Simply removes the endpoints (everything that does not implement RegionObserver).&lt;br/&gt;
Looked into refactoring loadSystemCoprocessors into RegionCoprocessorHost, but would have led to a lot of cut&apos;n&apos;paste.&lt;/p&gt;

&lt;p&gt;What do you think. Will also performance test this, but this is generally cleaner I think.&lt;/p&gt;</comment>
                            <comment id="13855358" author="lhofhansl" created="Mon, 23 Dec 2013 03:35:36 +0000"  >&lt;p&gt;Can&apos;t measure any meaningful perf enhancement in a real world setup. I might to come back to this one later.&lt;br/&gt;
Might need to look at calling nextRow in RegionScannerImpl anyway.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12620065" name="10047-0.94-poc-v3.txt" size="2741" author="lhofhansl" created="Sun, 22 Dec 2013 05:03:59 +0000"/>
                            <attachment id="12620113" name="10047-0.94-poc-v4.txt" size="27251" author="lhofhansl" created="Mon, 23 Dec 2013 02:33:43 +0000"/>
                            <attachment id="12619766" name="10047-0.94-sample-v2.txt" size="32466" author="lhofhansl" created="Fri, 20 Dec 2013 07:38:23 +0000"/>
                            <attachment id="12619488" name="10047-0.94-sample.txt" size="1766" author="lhofhansl" created="Thu, 19 Dec 2013 04:39:39 +0000"/>
                            <attachment id="12615965" name="postScannerFilterRow.png" size="81362" author="lhofhansl" created="Wed, 27 Nov 2013 01:26:21 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 27 Nov 2013 01:57:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>360734</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 51 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1q6nr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>361033</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>