<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:10:27 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-16115/HBASE-16115.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-16115] Missing security context in RegionObserver coprocessor when a compaction/split is triggered manually</title>
                <link>https://issues.apache.org/jira/browse/HBASE-16115</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;We ran into an interesting phenomenon which can easily render a cluster unusable.&lt;/p&gt;

&lt;p&gt;We loaded some tests data into a test table and forced a manual compaction through the UI. We have some compaction hooks implemented in a region observer, which writes back to another HBase table when the compaction finishes. We noticed that this coprocessor is not setup correctly, it seems the security context is missing.&lt;/p&gt;

&lt;p&gt;The interesting part is that this &lt;em&gt;only&lt;/em&gt; happens when the compaction is triggere through the UI. Automatic compactions (major or minor) or when triggered via the HBase shell (folling a kinit) work fine. Only the UI-triggered compactions cause this issues and lead to essentially neverending compactions, immovable regions, etc.&lt;/p&gt;

&lt;p&gt;Not sure what exactly the issue is, but I wanted to make sure I capture this.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt;, FYI.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12983200">HBASE-16115</key>
            <summary>Missing security context in RegionObserver coprocessor when a compaction/split is triggered manually</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="lhofhansl">Lars Hofhansl</reporter>
                        <labels>
                    </labels>
                <created>Sun, 26 Jun 2016 04:52:22 +0000</created>
                <updated>Mon, 12 Dec 2016 18:45:26 +0000</updated>
                            <resolved>Mon, 12 Dec 2016 18:45:25 +0000</resolved>
                                    <version>0.98.20</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="15349953" author="lhofhansl" created="Sun, 26 Jun 2016 05:12:37 +0000"  >&lt;p&gt;Note, in this we managed to trigger the compaction, but the coprocessor hook triggered by the compaction has no credentials to access other HBase table (when triggered through the UI)&lt;/p&gt;</comment>
                            <comment id="15349988" author="apurtell" created="Sun, 26 Jun 2016 06:07:12 +0000"  >&lt;p&gt;I&apos;m glad you guys figured out the interesting detail was use of the UI, because I was still at a loss after staring at the code for a while yesterday afternoon. &lt;/p&gt;

&lt;p&gt;It&apos;s plausable the contexts set up by Jetty when serving UI requests might not be logged in (we&apos;re not using authentication filters which would do that, albeit with the client credentials), and if so this was bound to cause problems sooner or later. We see it here because for the first time something is trying to issue a remote RPC when servicing the compaction request. &lt;/p&gt;</comment>
                            <comment id="15351446" author="devaraj" created="Mon, 27 Jun 2016 17:31:04 +0000"  >&lt;p&gt;We saw a similar issue with Phoenix in the picture - what we observed was that for user-triggered compactions, the compaction in the regionserver would run as the user, and after the compaction, the regionserver would try to update a system table in Phoenix. That&apos;d fail with an authentication failure because of the reason that there are no credentials to reach out to a remote server from within the user&apos;s context. &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14655&quot; title=&quot;Narrow the scope of doAs() calls to region observer notifications for compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14655&quot;&gt;&lt;del&gt;HBASE-14655&lt;/del&gt;&lt;/a&gt; should handle that case.&lt;/p&gt;</comment>
                            <comment id="15351471" author="apurtell" created="Mon, 27 Jun 2016 17:48:44 +0000"  >&lt;p&gt;We may have to log in the UI &lt;/p&gt;</comment>
                            <comment id="15351621" author="ghelmling" created="Mon, 27 Jun 2016 19:04:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;It&apos;s plausable the contexts set up by Jetty when serving UI requests might not be logged in&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Based on the descriptions, that sounds likely.  A relatively easy way to test would be to modify the UI code to log (or display) the current user.&lt;/p&gt;</comment>
                            <comment id="15352185" author="lhofhansl" created="Tue, 28 Jun 2016 01:40:07 +0000"  >&lt;p&gt;We&apos;ve seen this with Phoenix indeed, but it&apos;s not specific to Phoenix.&lt;/p&gt;</comment>
                            <comment id="15352186" author="lhofhansl" created="Tue, 28 Jun 2016 01:41:11 +0000"  >&lt;p&gt;Oh, and we&apos;ve seen this on 0.98.18+, so it&apos;s apparently not fixed with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14655&quot; title=&quot;Narrow the scope of doAs() calls to region observer notifications for compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14655&quot;&gt;&lt;del&gt;HBASE-14655&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="15352192" author="apurtell" created="Tue, 28 Jun 2016 01:46:25 +0000"  >&lt;p&gt;If the UI isn&apos;t getting logged in that&apos;s a different problem than &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14655&quot; title=&quot;Narrow the scope of doAs() calls to region observer notifications for compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14655&quot;&gt;&lt;del&gt;HBASE-14655&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15353688" author="lhofhansl" created="Tue, 28 Jun 2016 20:48:19 +0000"  >&lt;p&gt;We&apos;ve now also seen the same with a compactions triggered from the HBase shell, so the UI was likely dud. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
What was reported now is that this appears to work when the cluster/server was recently rebooted.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mujtabachohan&quot; class=&quot;user-hover&quot; rel=&quot;mujtabachohan&quot;&gt;Mujtaba Chohan&lt;/a&gt;, can you attach the stack trace you have?&lt;/p&gt;</comment>
                            <comment id="15353700" author="lhofhansl" created="Tue, 28 Jun 2016 20:51:36 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15353705" author="apurtell" created="Tue, 28 Jun 2016 20:54:17 +0000"  >&lt;p&gt;Let&apos;s turn on JRE level kerberos debug logging and see what&apos;s going on when the compaction request fails.&lt;/p&gt;</comment>
                            <comment id="15353754" author="mujtabachohan" created="Tue, 28 Jun 2016 21:38:35 +0000"  >&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Stack:
FATAL [ctions-1466815775283] ipc.RpcClient - SASL authentication failed. The most likely cause is missing or invalid credentials. Consider &apos;kinit&apos;.
javax.security.sasl.SaslException: GSS initiate failed [Caused by GSSException: No valid credentials provided (Mechanism level: Failed to find any Kerberos tgt)]
	at com.sun.security.sasl.gsskerb.GssKrb5Client.evaluateChallenge(GssKrb5Client.java:211)
	at org.apache.hadoop.hbase.security.HBaseSaslRpcClient.saslConnect(HBaseSaslRpcClient.java:179)
	at org.apache.hadoop.hbase.ipc.RpcClient$Connection.setupSaslConnection(RpcClient.java:774)
	at org.apache.hadoop.hbase.ipc.RpcClient$Connection.access$600(RpcClient.java:360)
	at org.apache.hadoop.hbase.ipc.RpcClient$Connection$2.run(RpcClient.java:895)
	at org.apache.hadoop.hbase.ipc.RpcClient$Connection$2.run(RpcClient.java:892)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:422)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1706)
	at org.apache.hadoop.hbase.ipc.RpcClient$Connection.setupIOstreams(RpcClient.java:892)
	at org.apache.hadoop.hbase.ipc.RpcClient.getConnection(RpcClient.java:1577)
	at org.apache.hadoop.hbase.ipc.RpcClient.call(RpcClient.java:1476)
	at org.apache.hadoop.hbase.ipc.RpcClient.callBlockingMethod(RpcClient.java:1693)
	at org.apache.hadoop.hbase.ipc.RpcClient$BlockingRpcChannelImplementation.callBlockingMethod(RpcClient.java:1760)
	at org.apache.hadoop.hbase.protobuf.generated.ClientProtos$ClientService$BlockingStub.get(ClientProtos.java:32914)
	at org.apache.hadoop.hbase.protobuf.ProtobufUtil.getRowOrBefore(ProtobufUtil.java:1559)
	at org.apache.hadoop.hbase.client.HTable$2.call(HTable.java:747)
	at org.apache.hadoop.hbase.client.HTable$2.call(HTable.java:745)
	at org.apache.hadoop.hbase.client.RpcRetryingCaller.callWithRetries(RpcRetryingCaller.java:115)
	at org.apache.hadoop.hbase.client.HTable.getRowOrBefore(HTable.java:751)
	at org.apache.hadoop.hbase.client.MetaScanner.metaScan(MetaScanner.java:144)
	at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.prefetchRegionCache(HConnectionManager.java:1261)
	at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.locateRegionInMeta(HConnectionManager.java:1323)
	at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.locateRegion(HConnectionManager.java:1179)
	at org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation.locateRegion(HConnectionManager.java:1136)
	at org.apache.hadoop.hbase.client.AsyncProcess.findDestLocation(AsyncProcess.java:390)
	at org.apache.hadoop.hbase.client.AsyncProcess.submit(AsyncProcess.java:335)
	at org.apache.hadoop.hbase.client.AsyncProcess.submit(AsyncProcess.java:287)
	at org.apache.hadoop.hbase.client.HTable.backgroundFlushCommits(HTable.java:1019)
	at org.apache.hadoop.hbase.client.HTable.flushCommits(HTable.java:1395)
	at org.apache.hadoop.hbase.client.HTable.put(HTable.java:965)
	at org.apache.hadoop.hbase.coprocessor.CoprocessorHost$Environment$HTableWrapper.put(CoprocessorHost.java:478)
	at org.apache.phoenix.schema.stats.StatisticsWriter.commitLastStatsUpdatedTime(StatisticsWriter.java:227)
	at org.apache.phoenix.schema.stats.StatisticsWriter.newWriter(StatisticsWriter.java:83)
	at org.apache.phoenix.schema.stats.DefaultStatisticsCollector.&amp;lt;init&amp;gt;(DefaultStatisticsCollector.java:85)
	at org.apache.phoenix.schema.stats.StatisticsCollectorFactory.createStatisticsCollector(StatisticsCollectorFactory.java:51)
	at org.apache.phoenix.coprocessor.UngroupedAggregateRegionObserver.preCompact(UngroupedAggregateRegionObserver.java:614)
	at org.apache.hadoop.hbase.coprocessor.BaseRegionObserver.preCompact(BaseRegionObserver.java:197)
	at org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost$9.call(RegionCoprocessorHost.java:584)
	at org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost$RegionOperation.call(RegionCoprocessorHost.java:1621)
	at org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost.execOperation(RegionCoprocessorHost.java:1697)
	at org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost.execOperationWithResult(RegionCoprocessorHost.java:1670)
	at org.apache.hadoop.hbase.regionserver.RegionCoprocessorHost.preCompact(RegionCoprocessorHost.java:579)
	at org.apache.hadoop.hbase.regionserver.compactions.Compactor$3.run(Compactor.java:363)
	at org.apache.hadoop.hbase.regionserver.compactions.Compactor$3.run(Compactor.java:360)
	at java.security.AccessController.doPrivileged(Native Method)
	at javax.security.auth.Subject.doAs(Subject.java:422)
	at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1706)
	at org.apache.hadoop.hbase.regionserver.compactions.Compactor.postCreateCoprocScanner(Compactor.java:360)
	at org.apache.hadoop.hbase.regionserver.compactions.Compactor.compact(Compactor.java:270)
	at org.apache.hadoop.hbase.regionserver.compactions.DefaultCompactor.compact(DefaultCompactor.java:64)
	at org.apache.hadoop.hbase.regionserver.DefaultStoreEngine$DefaultCompactionContext.compact(DefaultStoreEngine.java:121)
	at org.apache.hadoop.hbase.regionserver.HStore.compact(HStore.java:1135)
	at org.apache.hadoop.hbase.regionserver.HRegion.compact(HRegion.java:1550)
	at org.apache.hadoop.hbase.regionserver.CompactSplitThread$CompactionRunner.doCompaction(CompactSplitThread.java:502)
	at org.apache.hadoop.hbase.regionserver.CompactSplitThread$CompactionRunner.run(CompactSplitThread.java:538)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15353942" author="apurtell" created="Tue, 28 Jun 2016 23:51:03 +0000"  >&lt;p&gt;We&apos;ve traced occurrences of this back to at least 0.98.16, which may implicate &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14655&quot; title=&quot;Narrow the scope of doAs() calls to region observer notifications for compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14655&quot;&gt;&lt;del&gt;HBASE-14655&lt;/del&gt;&lt;/a&gt; but not later changes. We didn&apos;t recognize the problem at the time. We don&apos;t normally force major compaction from either UI or shell. Timed major compactions work normally. &lt;/p&gt;</comment>
                            <comment id="15353948" author="lhofhansl" created="Tue, 28 Jun 2016 23:58:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;at org.apache.hadoop.hbase.regionserver.compactions.Compactor$3.run(Compactor.java:360)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;At least we know the passed user is not null (we&apos;d see line 357 instead)&lt;/p&gt;</comment>
                            <comment id="15353994" author="devaraj" created="Wed, 29 Jun 2016 00:36:01 +0000"  >&lt;p&gt;Yeah, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14655&quot; title=&quot;Narrow the scope of doAs() calls to region observer notifications for compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14655&quot;&gt;&lt;del&gt;HBASE-14655&lt;/del&gt;&lt;/a&gt; might be the cause of the issue at hand. Thinking about it, one regionserver wouldn&apos;t be able to communicate with another without valid credentials. &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14655&quot; title=&quot;Narrow the scope of doAs() calls to region observer notifications for compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14655&quot;&gt;&lt;del&gt;HBASE-14655&lt;/del&gt;&lt;/a&gt; makes it so that the preCompact hook would run as the end user submitting the compaction request. That wouldn&apos;t work for authentication purposes. When I talked about the issue we earlier faced, the way we fixed was to simply run everything in the compaction as the login user (which is hbase regionserver user), but we somehow thought that &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14655&quot; title=&quot;Narrow the scope of doAs() calls to region observer notifications for compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14655&quot;&gt;&lt;del&gt;HBASE-14655&lt;/del&gt;&lt;/a&gt; would fix it in the long run, but let me check that hypothesis...&lt;/p&gt;</comment>
                            <comment id="15354005" author="enis" created="Wed, 29 Jun 2016 00:51:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;When I talked about the issue we earlier faced, the way we fixed was to simply run everything in the compaction as the login user (which is hbase regionserver user), but we somehow thought that &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14655&quot; title=&quot;Narrow the scope of doAs() calls to region observer notifications for compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14655&quot;&gt;&lt;del&gt;HBASE-14655&lt;/del&gt;&lt;/a&gt; would fix it in the long run, but let me check that hypothesis...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Good catch. I think &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14655&quot; title=&quot;Narrow the scope of doAs() calls to region observer notifications for compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14655&quot;&gt;&lt;del&gt;HBASE-14655&lt;/del&gt;&lt;/a&gt; is the right fix in HBase because the coprocessor should run with the user context (for security). In Phoenix (or any other coprocessor) that wants to do RPC to another region server though, that has to be performed as the login user context. So we need a fix in Phoenix to switch back to the login context? &lt;/p&gt;</comment>
                            <comment id="15354015" author="lhofhansl" created="Wed, 29 Jun 2016 01:02:05 +0000"  >&lt;p&gt;What we&apos;ve seen is that with a manual compaction the request comes in from the master, so as a user on the master machine. With this patch it then passes that user through to any action performed inside the compaction, which is - I think - not correct.&lt;/p&gt;

&lt;p&gt;The Phoenix coprocessor is not doing anything special, it uses the HBase tooling to write some data to another table when the compaction is finished. It shouldn&apos;t have to do anything specific, it should authenticated as the proper user on the local machine, no?&lt;/p&gt;</comment>
                            <comment id="15354186" author="apurtell" created="Wed, 29 Jun 2016 01:40:58 +0000"  >&lt;p&gt;Funny, I was just writing up commentary for our internal issue tracker.&lt;/p&gt;

&lt;p&gt;No &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;, I think &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=devaraj&quot; class=&quot;user-hover&quot; rel=&quot;devaraj&quot;&gt;Devaraj Das&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; are correct. I added debug logging around the coprocessor upcalls just to be sure. The upcalls are invoked with the credential of the requesting user, which is different from the locally logged in user. That&apos;s what we want for security when the AccessController is installed; and we don&apos;t want any other coprocessor naively attempting RPC with this security context. The semantics of the upcall seem correct. Phoenix isn&apos;t taking this into account. I think the fix is for Phoenix to save off the result of User.getCurrent() at init time and do a doAs() with that UGI whenever attempting RPC. At the same time this is very poorly documented, so that&apos;s an action item for HBase too: All coprocessor upcall javadoc should be annotated with the expected security context.&lt;/p&gt;

&lt;p&gt;This obviously doesn&apos;t impact compactions normally. Core code is executed in the context of the logged in user. We switch contexts only for the upcalls. When scheduled compactions take place there is no request user, so the logged in user context is used, so you won&apos;t see this unless and until requests are made from another host.&lt;/p&gt;</comment>
                            <comment id="15354410" author="devaraj" created="Wed, 29 Jun 2016 02:33:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think the fix is for Phoenix to save off the result of User.getCurrent() at init time and do a doAs() with that UGI whenever attempting RPC.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Either that, or do the Phoenix RPC within a User.runAsLoginUser() context... The latter should be simpler.&lt;/p&gt;</comment>
                            <comment id="15354413" author="ghelmling" created="Wed, 29 Jun 2016 02:36:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;This obviously doesn&apos;t impact compactions normally. Core code is executed in the context of the logged in user. We switch contexts only for the upcalls. When scheduled compactions take place there is no request user, so the logged in user context is used, so you won&apos;t see this unless and until requests are made from another host.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm, why do we wrap the compaction upcalls in a User.doAs() in the first place?  I understand that we want to authorize the compaction request as the user who initiated it, but is User.doAs() the right mechanism?  It seems like we want something more akin to RpcCallContext to stash the authenticated user making the request, instead of using User.doAs() just so that User.getCurrent() can be hacked to return the requesting user&apos;s identity.  This seems like a very confusing semantic to handle for anyone writing a coprocessor.  For contrast, we don&apos;t use User.doAs() to authorize normal RPC requests for most of the other pre/post upcalls.  Since coprocessors are a system extension mechanism, I don&apos;t see why they should be executing as anything other than the system user.&lt;/p&gt;

&lt;p&gt;I would also suggest that the reliance on doAs() for the procedure code authorization checks may not be what we want there either.  Since carrying through the requesting user is a requirement of the security code, it seems like the security code should handle it, rather than muddying the behavior for all coprocessors.  Or maybe it is time to finally pull AccessController up out of the coprocessor APIs and more tightly integrate it, so that we can avoid this kind of conflict over requirements.&lt;/p&gt;

&lt;p&gt;In any case, it seems like an alternate approach to passing the user credentials would avoid the confusing semantics entirely, while perhaps bleeding through the abstraction a bit for the security code.&lt;/p&gt;</comment>
                            <comment id="15354423" author="apurtell" created="Wed, 29 Jun 2016 02:48:15 +0000"  >&lt;p&gt;The suggestion to undo use of doAs for upcalls and authorization checks in general sounds good for 2.0 &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt; , maybe 1.4. &lt;/p&gt;

&lt;p&gt;We don&apos;t have anyone actively working on integrating the AccessController with core. Would be great if someone steps up to do it. &lt;/p&gt;</comment>
                            <comment id="15354516" author="lhofhansl" created="Wed, 29 Jun 2016 04:30:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;Since coprocessors are a system extension mechanism, I don&apos;t see why they should be executing as anything other than the system user.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That&apos;s my thinking too.&lt;/p&gt;

&lt;p&gt;When a coprocess hook is executed as result of a compaction that is a system extension. As such why would such a hook care whether the compaction was triggered by the region server itself or via the master on behalf of a user? Putting this on the coprocessor implementer seems onerous.&lt;/p&gt;

&lt;p&gt;Now there are other hooks (&lt;/p&gt;
{pre|post}
{Get|Scan}
&lt;p&gt; etc) that are clearly on behalf of a user... Or are they?&lt;/p&gt;

&lt;p&gt;We introduced the extra doAs in patch releases (1.0.3, 1.1.3, and 0.98.16). 1.0 and 1.1 are or will be retired, right? So maybe we fix it only on 0.98, 1.4, and 2.0.&lt;/p&gt;</comment>
                            <comment id="15354519" author="apurtell" created="Wed, 29 Jun 2016 04:32:24 +0000"  >&lt;p&gt;My concern here is we don&apos;t ask Phoenix or other implementations to change back and forth for this twice in 0.98. &lt;/p&gt;</comment>
                            <comment id="15354522" author="apurtell" created="Wed, 29 Jun 2016 04:42:46 +0000"  >&lt;p&gt;Also, the doAs, while certainly reasonable to discuss changing now, were added to solve a problem. It started with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14475&quot; title=&quot;Region split requests are always audited with &amp;quot;hbase&amp;quot; user rather than request user&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14475&quot;&gt;&lt;del&gt;HBASE-14475&lt;/del&gt;&lt;/a&gt;. See also &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14686&quot; title=&quot;Ensure authoritative security coprocessors execute in the correct context&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14686&quot;&gt;HBASE-14686&lt;/a&gt;. I don&apos;t really remember the context of these decisions now but believe it was done to preserve expectations about the request environment (effective user) after refactor of code since Coprocessors and security were introduced in 0.92. &lt;/p&gt;</comment>
                            <comment id="15354527" author="lhofhansl" created="Wed, 29 Jun 2016 04:44:51 +0000"  >&lt;p&gt;Fair enough.&lt;/p&gt;

&lt;p&gt;Phoenix fixed one instance of this by taking the stats-update process asynchronous (so it&apos;s a thread spawned at startup, which is running as the system user). There&apos;s a remaining problem with splits and the local index updater, for that we should do the saving-the-current-user-and-do-doAs fix as you said. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=samarthjain&quot; class=&quot;user-hover&quot; rel=&quot;samarthjain&quot;&gt;Samarth Jain&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=giacomotaylor&quot; class=&quot;user-hover&quot; rel=&quot;giacomotaylor&quot;&gt;James Taylor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand this is broken since 0.98.16 (Nov &apos;15) and nobody noticed&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/warning.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Might be OK to just &quot;fix&quot; it now (if we agree that that is the fix).&lt;/p&gt;</comment>
                            <comment id="15354533" author="lhofhansl" created="Wed, 29 Jun 2016 04:54:34 +0000"  >&lt;p&gt;Created &lt;a href=&quot;https://issues.apache.org/jira/browse/PHOENIX-3037&quot; title=&quot;Setup proper security context in compaction/split coprocessor hooks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PHOENIX-3037&quot;&gt;&lt;del&gt;PHOENIX-3037&lt;/del&gt;&lt;/a&gt;. Maybe we can suggest an implementation there.&lt;/p&gt;</comment>
                            <comment id="15354543" author="apurtell" created="Wed, 29 Jun 2016 05:00:14 +0000"  >&lt;p&gt;What we are discussing as a problem on this JIRA was a bug fix refining an earlier behavioral change to match legacy expectations on another bug report. Calling a change here a fix isn&apos;t the whole story. From another point of view it would be a revert of a fix for a regression. &lt;/p&gt;</comment>
                            <comment id="15354548" author="apurtell" created="Wed, 29 Jun 2016 05:05:05 +0000"  >&lt;p&gt;I think we should take up &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt; &apos;s suggestion above for 1.4 and 2.0. I&apos;m not sure about 0.98. If the consensus is to patch there too I won&apos;t veto of course. &lt;/p&gt;</comment>
                            <comment id="15354549" author="ghelmling" created="Wed, 29 Jun 2016 05:05:07 +0000"  >&lt;p&gt;Yes, I was looking at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14475&quot; title=&quot;Region split requests are always audited with &amp;quot;hbase&amp;quot; user rather than request user&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14475&quot;&gt;&lt;del&gt;HBASE-14475&lt;/del&gt;&lt;/a&gt; as well while tracing back the origin of this.  The context of that seems specific to security auditing of the compaction request, which was a valid issue, but I don&apos;t think implies any expectations of the executing user context for other coprocessors.  I agree with the sentiment of it and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14686&quot; title=&quot;Ensure authoritative security coprocessors execute in the correct context&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14686&quot;&gt;HBASE-14686&lt;/a&gt;, I&apos;m just not sure in hindsight that we reached the best implementation.&lt;/p&gt;

&lt;p&gt;I think that using an alternate mechanism for conveying that caller context would avoid conflicting with the current user and possibly be more consistent with the RpcCallContext.  Maybe it would be better to pass through the requester as part of the ObserverContext.  That is present for each coprocessor hook and already prepared for each upcall.  If anything, this seems like it belongs there.  We could even shim in a call to RpcCallContext where appropriate so this would consistently provide the requester identity for all upcalls.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;My concern here is we don&apos;t ask Phoenix or other implementations to change back and forth for this twice in 0.98.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I generally agree with this as well, but it&apos;s your call.&lt;/p&gt;</comment>
                            <comment id="15354556" author="ghelmling" created="Wed, 29 Jun 2016 05:09:48 +0000"  >&lt;p&gt;Alright, I&apos;ll open up a separate JIRA for that effort.  Though triggered here, it seems to be a separate issue.  If the consensus is to resolve this by pulling that in to 0.98, then we can always mark this as a dupe.&lt;/p&gt;</comment>
                            <comment id="15357673" author="enis" created="Thu, 30 Jun 2016 19:13:30 +0000"  >&lt;p&gt;So the plan is to have &lt;a href=&quot;https://issues.apache.org/jira/browse/PHOENIX-3037&quot; title=&quot;Setup proper security context in compaction/split coprocessor hooks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;PHOENIX-3037&quot;&gt;&lt;del&gt;PHOENIX-3037&lt;/del&gt;&lt;/a&gt; as a short term solution, and do &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16141&quot; title=&quot;Unwind use of UserGroupInformation.doAs() to convey requester identity in coprocessor upcalls&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16141&quot;&gt;HBASE-16141&lt;/a&gt; for long term? Sounds logical. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think that using an alternate mechanism for conveying that caller context would avoid conflicting with the current user and possibly be more consistent with the RpcCallContext.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The problem of RpcCallContext based user passing and authorization is that, as can be seen from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14475&quot; title=&quot;Region split requests are always audited with &amp;quot;hbase&amp;quot; user rather than request user&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14475&quot;&gt;&lt;del&gt;HBASE-14475&lt;/del&gt;&lt;/a&gt;, we get the compaction / split request from RPC threads, add the request to the queue, and only call preCompact() from the background thread which executes the compaction. There is no more RpcCallContext there. As of now, since AC is a coprocessor and not a core concept, the only way to enforce proper authorization and pass the information about the User context is doAs(). &lt;/p&gt;</comment>
                            <comment id="15357689" author="apurtell" created="Thu, 30 Jun 2016 19:19:06 +0000"  >&lt;p&gt;We can maintain request user information in another context besides the RpcCallContext. On &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16141&quot; title=&quot;Unwind use of UserGroupInformation.doAs() to convey requester identity in coprocessor upcalls&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16141&quot;&gt;HBASE-16141&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ghelmling&quot; class=&quot;user-hover&quot; rel=&quot;ghelmling&quot;&gt;Gary Helmling&lt;/a&gt; proposes we set up information in the ObserverContext instead of modifying the environment with doAs at the time of upcall chain invocation.&lt;/p&gt;</comment>
                            <comment id="15358112" author="ghelmling" created="Fri, 1 Jul 2016 00:37:45 +0000"  >&lt;p&gt;Yes, exactly.  In many of the places where we are using doAs(), we already pass the User instance down the call stack in order to wrap only the coprocessor upcall in the doAs() execution.  So from there it should be straightforward to pass the User along to the CoprocessorHost for injection in the ObserverContext.&lt;/p&gt;</comment>
                            <comment id="15381968" author="lhofhansl" created="Mon, 18 Jul 2016 09:24:40 +0000"  >&lt;p&gt;What do we do here? Close and document?&lt;/p&gt;</comment>
                            <comment id="15383316" author="apurtell" created="Mon, 18 Jul 2016 23:52:11 +0000"  >&lt;p&gt;Yes, close and document&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12984752">PHOENIX-3037</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12984773">HBASE-16141</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 26 Jun 2016 06:07:12 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            21 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i303pr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>