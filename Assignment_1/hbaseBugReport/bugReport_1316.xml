<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:52:31 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-1316/HBASE-1316.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-1316] ZooKeeper: use native threads to avoid GC stalls (JNI integration)</title>
                <link>https://issues.apache.org/jira/browse/HBASE-1316</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;From Joey Echeverria up on hbase-users@:&lt;/p&gt;

&lt;p&gt;We&apos;ve used zookeeper in a write-heavy project we&apos;ve been working on and experienced issues similar to what you described. After several days of debugging, we discovered that our issue was garbage collection. There was no way to guarantee we wouldn&apos;t have long pauses especially since our environment was the worst case for garbage collection, millions of tiny, short lived objects. I suspect HBase sees similar work loads frequently, if it&apos;s not constantly. With anything shorter than a 30 second session time out, we got session expiration events extremely frequently. We needed to use 60 seconds for any real confidence that an ephemeral node disappearing meant something was unavailable.&lt;/p&gt;

&lt;p&gt;We really wanted quick recovery so we ended up writing a light-weight wrapper around the C API and used swig to auto-generate a JNI interface. It&apos;s not perfect, but since we switched to this method we&apos;ve never seen a session expiration event and ephemeral nodes only disappear when there are network issues or a machine/process goes down.&lt;/p&gt;

&lt;p&gt;I don&apos;t know if it&apos;s worth doing the same kind of thing for HBase as it adds some &quot;unnecessary&quot; native code, but it&apos;s a solution that I found works.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12422389">HBASE-1316</key>
            <summary>ZooKeeper: use native threads to avoid GC stalls (JNI integration)</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="7">Later</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="apurtell">Andrew Purtell</reporter>
                        <labels>
                    </labels>
                <created>Wed, 8 Apr 2009 18:09:25 +0000</created>
                <updated>Mon, 12 May 2014 00:31:00 +0000</updated>
                            <resolved>Mon, 12 May 2014 00:31:00 +0000</resolved>
                                    <version>0.20.0</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="12697129" author="apurtell" created="Wed, 8 Apr 2009 18:09:56 +0000"  >&lt;p&gt;Subsequent discussion on the list includes affirmative votes from several individuals. &lt;/p&gt;</comment>
                            <comment id="12699391" author="fwiffo" created="Wed, 15 Apr 2009 21:14:37 +0000"  >&lt;p&gt;I&apos;m uploading a tarball with the basic wrapper we used to get around GC pauses. The C code maintains it&apos;s own session with zk which is independent of any java sessions. If you want to do anything other than create ephemeral nodes, more functions need to be wrapped or a combination of C and Java is needed.&lt;/p&gt;

&lt;p&gt;I could try and build something more comprehensive, potentially even a full implementation of the Java API which completely wraps the C, but I wanted to show you guys what I had at this stage. Let me know if you have any questions.&lt;/p&gt;</comment>
                            <comment id="12726758" author="nitay" created="Fri, 3 Jul 2009 01:00:38 +0000"  >&lt;p&gt;I&apos;ve started looking into this. I have a minimal JNI binding to ZooKeeper based off of Joey&apos;s work. It doesn&apos;t use swig, as I think that adds an unnecessary dependency.&lt;/p&gt;

&lt;p&gt;The question, as Joey mentions, is where do we want to put the gap between JNI ZooKeeper and Java ZooKeeper?&lt;br/&gt;
On one hand, we can just have the JNI binding handle ephemeral nodes to reduce session expired events from Java GC starving hearbeats. On the other hand we can try making the JNI binding handle and not have a Java ZooKeeper handle at all, but that might be ugly with the watcher events going back and forth between C &amp;lt;=&amp;gt; Java.&lt;/p&gt;

&lt;p&gt;What do you guys think?&lt;/p&gt;</comment>
                            <comment id="12726759" author="apurtell" created="Fri, 3 Jul 2009 01:10:08 +0000"  >&lt;p&gt;The trouble here is ephemeral nodes expiring due to dropped heartbeats. I think this issue should be about solving that problem only. The rest almost does not matter &amp;#8211; java land is blocked anyway, watcher events will queue up. Also, is calling up into java land from JNI while the VM is in a GC cycle safe? It must be. Then I presume if you tried to create an object in the C thread the create would block somehow on an os level mutex until it is safe to create objects again. Would that not defeat the purpose of the C thread in the first place?  &lt;/p&gt;</comment>
                            <comment id="12726763" author="nitay" created="Fri, 3 Jul 2009 01:32:28 +0000"  >&lt;p&gt;Good points Andrew. I&apos;ll look into this further (still learning JNI), but I suspect your intuitions are correct.&lt;br/&gt;
I&apos;ll stick to just handling ephemeral nodes in the JNI.&lt;/p&gt;

&lt;p&gt;We also need to decide how we want to bundle the JNI library, as we will now have platform specific things in our code base. I&apos;ll look into how Hadoop does this with things like libhdfs. If anyone has pointers, please let me know.&lt;/p&gt;</comment>
                            <comment id="12726764" author="apurtell" created="Fri, 3 Jul 2009 01:44:35 +0000"  >&lt;p&gt;How native compression bits are hooked up is a better example than libhdfs. IIRC, building libhdfs is a manual extra step. &lt;/p&gt;</comment>
                            <comment id="12726832" author="fwiffo" created="Fri, 3 Jul 2009 08:45:59 +0000"  >&lt;p&gt;We specifically avoided having any callbacks cross the C/Java boundary This was simple in our use case where the only thing we needed to monitor after creating an ephemeral node was whether or ZK session had expired. We also had a very simple recovery mechanism, we immediately kill the process that got disconnected and the shell script that launched us will relaunch. This proved far easier than trying to re-establish a connection to ZK in the running process.&lt;/p&gt;</comment>
                            <comment id="12727184" author="stack" created="Sat, 4 Jul 2009 03:54:01 +0000"  >&lt;p&gt;Can we fall back to pure-java implementation if c binary can&apos;t be found?&lt;/p&gt;</comment>
                            <comment id="12727185" author="apurtell" created="Sat, 4 Jul 2009 04:13:07 +0000"  >&lt;p&gt;@stack: That is what Hadoop does if native compression bits do not exist for the platform or were not installed. If Nitay follows that example, this stuff should work the same way. &lt;/p&gt;</comment>
                            <comment id="12727198" author="nitay" created="Sat, 4 Jul 2009 07:33:54 +0000"  >&lt;p&gt;Sounds good, I&apos;ll look at the compression bits and work off that. Thanks boys.&lt;/p&gt;</comment>
                            <comment id="12893714" author="tlipcon" created="Thu, 29 Jul 2010 17:20:08 +0000"  >&lt;p&gt;phunt, jgray, and I talked about this on IRC this morning for a little while. We sketched out a design that looks something like this:&lt;/p&gt;

&lt;p&gt;1) We tune up the ZK session timeout for region servers to be higher than longest expected GC pause (eg 5 minutes)&lt;br/&gt;
2) We add a &lt;b&gt;second&lt;/b&gt; ZK session on the same machine - either this is a second JVM running next to the first, or it&apos;s a JNI thread. Either way, it&apos;s its own session with its own ephemeral node - eg /rs-watchdogs/&amp;lt;regionserver name&amp;gt;. This second session has a tuned &lt;b&gt;down&lt;/b&gt; session timeout (eg 5 seconds)&lt;br/&gt;
3) In the HMaster, we watch /rs-watchdogs/*, and if we notice one of the ephemeral nodes disappears, then we have to forcibly expire the matching regionserver ZK session. We will need some ZK support here to add the ability to expire someone else&apos;s session in a reliable manner.&lt;/p&gt;

&lt;p&gt;This has the following effects:&lt;br/&gt;
A) If there&apos;s a long garbage collection pause in the JVM, the &quot;fast&quot; ZK session stays up, and so long as the GC pause is under the &quot;long&quot; timeout, nothing will expire. This is good.&lt;br/&gt;
B) If there&apos;s a network or machine outage, the &quot;fast&quot; ZK session goes down, in which case we detect the outage quickly. This is also good.&lt;br/&gt;
C) By adding the forcible expiration of the RS ZK session when the &quot;fast&quot; session expires, we keep the same fencing guarantees as we&apos;ve got now.&lt;/p&gt;

&lt;p&gt;The other nice thing about this design is that it doesn&apos;t change the current RS or master at all - the master still watches the normal RS znodes, it&apos;s just that we have a second system that&apos;s doing a fast-path expiration on them when a machine goes down. We could also choose to implement this second system based on other kinds of machine health checks, etc.&lt;/p&gt;</comment>
                            <comment id="13034293" author="fwiffo" created="Mon, 16 May 2011 20:43:39 +0000"  >&lt;p&gt;+1 on Todd et. al.&apos;s design. I think it would be useful to use the JNI thread for (2) for the following reasons:&lt;/p&gt;

&lt;p&gt;1) If the region server process goes down hard, but the machine is still up you won&apos;t see that failure for the long timeout (5 minutes) if the other session is in a separate JVM.&lt;br/&gt;
2) It&apos;s probably easier to manage a single JVM during startup and shutdown of a regionserver.&lt;/p&gt;

&lt;p&gt;If nobody minds, I&apos;d like to take a stab it generating a patch for this.&lt;/p&gt;</comment>
                            <comment id="13034298" author="stack" created="Mon, 16 May 2011 20:49:20 +0000"  >&lt;p&gt;Be our guest.  Thanks Joey.&lt;/p&gt;</comment>
                            <comment id="13037194" author="fwiffo" created="Sat, 21 May 2011 00:26:18 +0000"  >&lt;p&gt;I&apos;ve got a partial patch ready. The build relies on native-maven-plugin to build the native code. This plugin pulls native dependencies as maven artifacts. To make this work, I packaged up the zookeeper header files and the static library compiled for x86-64 Linux.&lt;/p&gt;

&lt;p&gt;In order to test the patch you need to install the artifacts into your local maven repository. I&apos;ve included a simple install.sh to do this for you. We&apos;ll need to upload these artifacts somewhere, along with other supported OSes/architectures in the future.&lt;/p&gt;

&lt;p&gt;I did attempt to make both the build and runtime code work if you&apos;re not on a supported platform, but I haven&apos;t extensively tested it.&lt;/p&gt;

&lt;p&gt;At this point, the patch just adds support for interacting with zookeeper via the native code. The interaction is very limited, currently only creating ephemeral nodes is supported. One thing I did do was add a callback for the native code to notify Java when it&apos;s session gets expired.&lt;/p&gt;

&lt;p&gt;Right now, I&apos;m generating my own session expiration event to send to the Java zookeeper connection. I think this will allow the region server to shutdown if the native session expires. It should look just like an expiration of the Java session.&lt;/p&gt;

&lt;p&gt;Things that are not yet implemented:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;The region server hasn&apos;t been modified to use the native code at all.&lt;/li&gt;
	&lt;li&gt;I haven&apos;t modified the packaging part of the build. I&apos;m not sure how we&apos;ll want the build to generate versions of the native library for multiple platforms.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Let me know if you think this is on the right track or if anything needs a big rethink.&lt;/p&gt;</comment>
                            <comment id="13038208" author="stack" created="Mon, 23 May 2011 20:39:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;We&apos;ll need to upload these artifacts somewhere, along with other supported OSes/architectures in the future.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This should be fine.  We&apos;ve been doing this for various libs up to this point.  Can add this np.&lt;/p&gt;

&lt;p&gt;Do you think this patch will be generally useful Joey?  If so, maybe once its up working in hbase, it can be contrib&apos;d back to zk?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I haven&apos;t modified the packaging part of the build. I&apos;m not sure how we&apos;ll want the build to generate versions of the native library for multiple platforms.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Tell me more about this?  Are you thinking we need to build the native libs in-line with a build each time?&lt;/p&gt;

&lt;p&gt;Do you think this feature can be optionally enabled?  If we fail to load the required native lib, do we default to old-school session handling?  Or, its on always but we only use new-style if we find the native libs?&lt;/p&gt;

&lt;p&gt;How does this timeout relate to the zk session timeout?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; DEFAULT_HBASE_ZOOKEEPER_NATIVE_SESSION_TIMEOUT = 5000;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thats cool that you have unit tests in place for your new methods already.&lt;/p&gt;

&lt;p&gt;Patch so far looks great to me.&lt;/p&gt;
</comment>
                            <comment id="13038858" author="fwiffo" created="Tue, 24 May 2011 22:17:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do you think this patch will be generally useful Joey? If so, maybe once its up working in hbase, it can be contrib&apos;d back to zk?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Which part of the patch? I think it might be useful to get zk to publish native artifacts, but I&apos;m not sure if a full Java API that uses the native libraries makes sense in general. It might make sense as a kind of general purpose watchdog facility, probably in zk contrib.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Tell me more about this? Are you thinking we need to build the native libs in-line with a build each time?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right now that&apos;s how my patch works. We could also build the native libraries as a separate maven module that HBase could depend on, that way the assembly could include all versions that we&apos;ve built.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do you think this feature can be optionally enabled? If we fail to load the required native lib, do we default to old-school session handling? Or, its on always but we only use new-style if we find the native libs?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s sort-of optionally available as is. I put my changes in the pom which builds the native library into a profile which is activated base don the OS and CPU (currently only activated for x86-64 Linux). We could turn off the automatic activation entirely and require that you turn on the profile using mvn -Pnative.&lt;/p&gt;

&lt;p&gt;At runtime, it&apos;s completely optional. If you can&apos;t load the native library, it falls back to using pure Java methods. It means that you wouldn&apos;t get the fast path recovery that the native code is supposed to enable, but it prints a warning to that effect in the logs.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How does this timeout relate to the zk session timeout?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This configures the session timeout for the native zk session. Since you&apos;ll want to tune the two separately, I put it in as a separate config. From the previous project that I worked on, we found that 5-10 seconds was reasonable. You would notice failures quickly but you&apos;re unlikely to get triggered by temporary network glitches.&lt;/p&gt;

&lt;p&gt;One thing I&apos;m undecided about is how the region server would want to deal with getting a session expiration notice for the native session. In my last project, we had the native code call exit() to fail as fast as possible. We didn&apos;t want our master process assigning a shard to a new server while the old one still thought they had control of it. In the current patch, I&apos;m sending an expired session event to the Java zk handle. It would probably be better to expire the Java session entirely. This can be done pretty easily by just connecting to zk with the same session id and password and then closing the session. This way anyone watching ephemeral nodes created by the Java session would get equally fast failure notifications.&lt;/p&gt;

&lt;p&gt;I&apos;m busy this week, so I probably won&apos;t get back to this until next weekend.&lt;/p&gt;</comment>
                            <comment id="13038959" author="stack" created="Wed, 25 May 2011 05:00:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;We could also build the native libraries as a separate maven module that HBase could depend on, that way the assembly could include all versions that we&apos;ve built.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We can work this out later, np.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We could turn off the automatic activation entirely and require that you turn on the profile using mvn -Pnative&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We could but I think the way you have it is the way to go, at least on first version (We can add &apos;off&apos; button later).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...ce you&apos;ll want to tune the two separately, I put it in as a separate config....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok.  Makes sense.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;. This can be done pretty easily by just connecting to zk with the same session id and password and then closing the session.  This way anyone watching ephemeral nodes created by the Java session would get equally fast failure notifications.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.  This seems right.  There are issues around RS death, making it &apos;clean&apos;-er than it is but thats out of scope for this issue (at same time a call to &apos;exit&apos; the RS, to make it do a sudden death, might be a nice-to-have).&lt;/p&gt;

&lt;p&gt;Good stuff Joey.&lt;/p&gt;


</comment>
                            <comment id="13051308" author="fwiffo" created="Fri, 17 Jun 2011 20:25:45 +0000"  >&lt;p&gt;Fixed some threading issues with the native code. Modified HRegionServer to use the native session to create it&apos;s ephemeral node.&lt;/p&gt;</comment>
                            <comment id="13051309" author="fwiffo" created="Fri, 17 Jun 2011 20:26:55 +0000"  >&lt;p&gt;Also, the patch was re-based to the latest trunk. It won&apos;t build without putting the native ZK library it depends on in a Maven repo. Is there one I can upload it to that would be used by the Jenkins builds?&lt;/p&gt;</comment>
                            <comment id="13051609" author="stack" created="Sat, 18 Jun 2011 22:14:35 +0000"  >&lt;p&gt;If the native lib is not available in a mvn repo, we could put it up in a personal repo for the moment (I could put it in mine up on apache?)  Will zk project be making it available to mvn do you know Joey?&lt;/p&gt;</comment>
                            <comment id="13051613" author="fwiffo" created="Sat, 18 Jun 2011 22:39:52 +0000"  >&lt;p&gt;I think I filed a zookeeper JIRA for native maven artifacts. Let me see if I can find it again. &lt;/p&gt;</comment>
                            <comment id="13051972" author="fwiffo" created="Mon, 20 Jun 2011 13:35:46 +0000"  >&lt;p&gt;I was mistaken, I hadn&apos;t filed a JIRA, but now I have. See &lt;a href=&quot;https://issues.apache.org/jira/browse/ZOOKEEPER-1098&quot; title=&quot;Upload native libraries as Maven artifacts&quot; class=&quot;issue-link&quot; data-issue-key=&quot;ZOOKEEPER-1098&quot;&gt;&lt;del&gt;ZOOKEEPER-1098&lt;/del&gt;&lt;/a&gt;. We should probably upload it to a personal repo while we&apos;re waiting on movement on that ticket.&lt;/p&gt;</comment>
                            <comment id="13994717" author="apurtell" created="Mon, 12 May 2014 00:31:00 +0000"  >&lt;p&gt;Not going to happen&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12551766">HBASE-5843</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12470458">ZOOKEEPER-829</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12479974" name="HBASE-1316-1.patch" size="25929" author="fwiffo" created="Sat, 21 May 2011 00:26:18 +0000"/>
                            <attachment id="12482984" name="HBASE-1316-2.patch" size="37729" author="fwiffo" created="Fri, 17 Jun 2011 20:25:45 +0000"/>
                            <attachment id="12405580" name="zk_wrapper.tar.gz" size="1076" author="fwiffo" created="Wed, 15 Apr 2009 21:14:37 +0000"/>
                            <attachment id="12479973" name="zookeeper-native-Linux-amd64-64.tgz" size="270412" author="fwiffo" created="Sat, 21 May 2011 00:26:18 +0000"/>
                            <attachment id="12479972" name="zookeeper-native-headers.tgz" size="15499" author="fwiffo" created="Sat, 21 May 2011 00:26:18 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 15 Apr 2009 21:14:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32088</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 31 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02gcf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12249</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>