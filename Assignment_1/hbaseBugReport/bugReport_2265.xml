<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:00:25 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2265/HBASE-2265.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2265] HFile and Memstore should maintain minimum and maximum timestamps</title>
                <link>https://issues.apache.org/jira/browse/HBASE-2265</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;In order to fix &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1485&quot; title=&quot;Wrong or indeterminate behavior when there are duplicate versions of a column&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1485&quot;&gt;&lt;del&gt;HBASE-1485&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-29&quot; title=&quot;HStore#get and HStore#getFull may not return expected values by timestamp when there is more than one MapFile&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-29&quot;&gt;&lt;del&gt;HBASE-29&lt;/del&gt;&lt;/a&gt;, it would be very helpful to have HFile and Memstore track their maximum and minimum timestamps. This has the following nice properties:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;for a straight Get, if an entry has been already been found with timestamp X, and X &amp;gt;= HFile.maxTimestamp, the HFile doesn&apos;t need to be checked. Thus, the current fast behavior of get can be maintained for those who use strictly increasing timestamps, but &quot;correct&quot; behavior for those who sometimes write out-of-order.&lt;/li&gt;
	&lt;li&gt;for a scan, the &quot;latest timestamp&quot; of the storage can be used to decide which cell wins, even if the timestamp of the cells is equal. In essence, rather than comparing timestamps, instead you are able to compare tuples of (row timestamp, storage.max_timestamp)&lt;/li&gt;
	&lt;li&gt;in general, min_timestamp(storage A) &amp;gt;= max_timestamp(storage B) if storage A was flushed after storage B.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12457384">HBASE-2265</key>
            <summary>HFile and Memstore should maintain minimum and maximum timestamps</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="pranavkhaitan">Pranav Khaitan</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Thu, 25 Feb 2010 06:46:34 +0000</created>
                <updated>Fri, 20 Nov 2015 12:43:23 +0000</updated>
                            <resolved>Wed, 14 Jul 2010 03:37:57 +0000</resolved>
                                                    <fixVersion>0.90.0</fixVersion>
                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12838210" author="tlipcon" created="Thu, 25 Feb 2010 06:50:54 +0000"  >&lt;p&gt;It may actually be sufficient to just store the max timestamp and not the min. I haven&apos;t really thought of a great use for min.&lt;/p&gt;</comment>
                            <comment id="12838251" author="ryanobjc" created="Thu, 25 Feb 2010 08:43:58 +0000"  >&lt;p&gt;I&apos;m not sure this will help make gets better, there are 2 get cases:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;get a single column for a row.  In this case, if timestamps are written out of order, we dont know which hfile to start with.  Lets say we start with the &apos;newest&apos; one, and it has TS&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt;, well is the fact that an older file start &amp;lt; TS&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; &amp;lt; end mean we should consult this file?  I suppose if end &amp;lt; TS&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; (thus the timestamp gotten is newer than the keyvalue we already got), we&apos;d know there is nothing newer and we could conclusively rule that file out.  If TS&lt;span class=&quot;error&quot;&gt;&amp;#91;1&amp;#93;&lt;/span&gt; was &amp;lt; beginning of a file, we&apos;d have to consider the file.  With a big spread of timestamps and keys, we wouldnt get much of an optimization.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;for a complete column family get, we&apos;ll have to touch every file, every time. This is because you are never sure if the next file contains another key/value for the result.  A bloom filter would help here.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As for the scan, we already know which files are &apos;newer&apos;.  However, during a compaction, this information is collapsed, and we end up with the duplicate key/values sitting next to each other.  We might be able to cause/create an invariant that during compaction the &apos;newer&apos; one comes first. The compaction might be able to help straighten this out, since i think we do minor compactions &apos;in order&apos;, with older files first. Seems like a tricky bit. &lt;/p&gt;

&lt;p&gt;Generally the ideal solution would involve no change to the KeyValue serialization format (and hence possibly requiring a store-file rewrite).&lt;/p&gt;</comment>
                            <comment id="12838382" author="tlipcon" created="Thu, 25 Feb 2010 15:43:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;With a big spread of timestamps and keys, we wouldnt get much of an optimization&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Exactly. If users are writing out of order, they cannot take advantage of the optimization of culling older storage. As you mentioned, bloom filters help here. For users who are writing in order, the performance should be identical today. I think this is exactly what we want.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;for a complete column family get, we&apos;ll have to touch every file, every time. This is because you are never sure if the next file contains another key/value for the result. A bloom filter would help here&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yep, and this is exactly what I would expect. Why should a column family get &lt;em&gt;not&lt;/em&gt; touch all of the files?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;However, during a compaction, this information is collapsed, and we end up with the duplicate key/values sitting next to each other. We might be able to cause/create an invariant that during compaction the &apos;newer&apos; one comes first&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s probably worth getting consensus, but I think it would be acceptable behavior to only retain the keyval from the newest storage when the timestamps are equal. That is, if I write A:ts=1, B:ts=2, C:ts=3, D:ts=3, E:ts=3, and want to retain &quot;latest 3&quot;, I&apos;d end up getting writes A, B, and E.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Generally the ideal solution would involve no change to the KeyValue serialization format&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree, and I think this can be done using only the existing metadata fields without any change per-keyvalue.&lt;/p&gt;</comment>
                            <comment id="12881618" author="streamy" created="Wed, 23 Jun 2010 08:51:25 +0000"  >&lt;p&gt;Any query that specifies a TimeRange can potentially take advantage of this by only opening files which overlap with this min/max.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure if we&apos;re all talking about the same thing or not but I don&apos;t think it makes sense to use these (min/max versions) stamps for breaking the dupe-version tie.  I think the stamp of the flush should be used (most recently flushed file is latest).  Otherwise if people do wonky things with stamps, a random KV in a completely different row could impact which shows up as latest.&lt;/p&gt;</comment>
                            <comment id="12881620" author="kannanm" created="Wed, 23 Jun 2010 08:54:08 +0000"  >&lt;p&gt;Todd:  Jonathan and I discussed essentially the same scheme offline. Basically, the extra meta data per HFile serves as a hint to optimize the common case of timestamps arriving in order, without sacrificing correctness if they did come out of order.&lt;/p&gt;

&lt;p&gt;You wrote &amp;lt;&amp;lt;&amp;lt; It may actually be sufficient to just store the max timestamp and not the min. I haven&apos;t really thought of a great use for min. &amp;gt;&amp;gt;&amp;gt;. For queries of the form &quot;get all versions &amp;gt;T&quot; max timestamp would suffice. But for queries that look up a specific timestamp, or columns in a time range T1..T2, having both the min and max timestamps would be better.&lt;/p&gt;</comment>
                            <comment id="12881624" author="streamy" created="Wed, 23 Jun 2010 09:15:49 +0000"  >&lt;p&gt;Assigning to Pranav who is going to look into this.&lt;/p&gt;</comment>
                            <comment id="12885304" author="pranavkhaitan" created="Mon, 5 Jul 2010 19:08:38 +0000"  >&lt;p&gt;Resolved! &lt;/p&gt;

&lt;p&gt;Diff submitted for review at &lt;a href=&quot;http://review.hbase.org/r/257/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12885306" author="hbasereviewboard" created="Mon, 5 Jul 2010 19:15:25 +0000"  >&lt;p&gt;Message from: &quot;Pranav Khaitan&quot; &amp;lt;pranavkhaitan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-07-05 12:04:54.536554)&lt;/p&gt;


&lt;p&gt;Review request for hbase, Jonathan Gray, Karthik Ranganathan, and Kannan Muthukkaruppan.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Every memstore and store file will have a minimum and maximum timestamp associated with it. If the range of timestamps we are searching for doesn&apos;t overlap with the range for a particular file, we can skip searching it and save time.&lt;/p&gt;

&lt;p&gt;Would significantly improve the performance for timestamp range queries. Particularly useful when most of the reads are for recent entries and the older files can be safely skipped. &lt;/p&gt;

&lt;p&gt;Addresses &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt; JIRA. &lt;/p&gt;

&lt;p&gt;This diff includes fixing some minor bugs like KeyValueHeap used to throw an uncaught exception when size of scanner set was zero. &lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2265&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2265&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueSkipListSet.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/TimeRangeTracker.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestMemStore.java 960082 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java 959782 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java 959782 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/257/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;All existing JUnit tests run successfully. More JUnit tests for Memstore, StoreFile and Store added to test correctness with multiple timestamps.&lt;/p&gt;

&lt;p&gt;Conducted a test to measure the extra time required to keep track of min and max timestamps while writing KeyValues.  The comparison was done by entering 1 Million KeyValues into memstore ten times with and without timestamp tracking and then taking the average time for each of them.  WAL was disabled and no flushing was done during this test to minimize overheads. The average time taken for entering 1M KeyValues into memstore without keeping track of timestamp was 13.44 seconds while the average time when keeping track of timestamps was 13.45 seconds. This shows that no significant overhead has been added while keeping track of timestamps.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Pranav&lt;/p&gt;

</comment>
                            <comment id="12885353" author="hbasereviewboard" created="Mon, 5 Jul 2010 22:13:25 +0000"  >&lt;p&gt;Message from: &quot;Kannan Muthukkaruppan&quot; &amp;lt;kannan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/#review302&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#review302&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/#comment1351&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#comment1351&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I am not clear on this scan.getStartRow() stuff. Note: This is not new with your change. You have only moved the getStartRow() call to instead shouldSeek().&lt;/p&gt;

&lt;p&gt;    Question applies more to the bloom filter logic I think. It doesn&apos;t seem safe to make a decision to seek into a file or not based just on the startRow(). This only seems safe for a Get (which is implemented as a scan with the same row being the start &amp;amp; stop row).&lt;/p&gt;



&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Kannan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12885370" author="hbasereviewboard" created="Mon, 5 Jul 2010 23:51:42 +0000"  >&lt;p&gt;Message from: &quot;Pranav Khaitan&quot; &amp;lt;pranavkhaitan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/#review305&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#review305&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/#comment1356&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#comment1356&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Yes, you are right that it is safe only for a Get. If you see line 159 (just one line above) there was a condition isGet before i.e. we skip a file if and only of the scan if of type Get. I have now moved this condition to shouldSeek() (line 916 of StoreFile.java)&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Pranav&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12885684" author="hbasereviewboard" created="Tue, 6 Jul 2010 21:02:43 +0000"  >&lt;p&gt;Message from: &quot;Pranav Khaitan&quot; &amp;lt;pranavkhaitan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-07-06 13:57:07.200883)&lt;/p&gt;


&lt;p&gt;Review request for hbase, Nicolas, Jonathan Gray, Karthik Ranganathan, and Kannan Muthukkaruppan.&lt;/p&gt;


&lt;p&gt;Summary (updated)&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Every memstore and store file will have a minimum and maximum timestamp associated with it. If the range of timestamps we are searching for doesn&apos;t overlap with the range for a particular file, we can skip searching it and save time.&lt;/p&gt;

&lt;p&gt;Would significantly improve the performance for timestamp range queries. Particularly useful when most of the reads are for recent entries and the older files can be safely skipped. &lt;/p&gt;

&lt;p&gt;Addresses &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt; JIRA. &lt;/p&gt;

&lt;p&gt;This diff includes fixing some minor bugs like KeyValueHeap used to throw an uncaught exception when size of scanner set was zero. &lt;/p&gt;

&lt;p&gt;Internal review done by Jonathan and Kannan.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2265&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2265&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueSkipListSet.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/TimeRangeTracker.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestMemStore.java 960082 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java 959782 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java 959782 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/257/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;All existing JUnit tests run successfully. More JUnit tests for Memstore, StoreFile and Store added to test correctness with multiple timestamps.&lt;/p&gt;

&lt;p&gt;Conducted a test to measure the extra time required to keep track of min and max timestamps while writing KeyValues.  The comparison was done by entering 1 Million KeyValues into memstore ten times with and without timestamp tracking and then taking the average time for each of them.  WAL was disabled and no flushing was done during this test to minimize overheads. The average time taken for entering 1M KeyValues into memstore without keeping track of timestamp was 13.44 seconds while the average time when keeping track of timestamps was 13.45 seconds. This shows that no significant overhead has been added while keeping track of timestamps.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Pranav&lt;/p&gt;

</comment>
                            <comment id="12886041" author="hbasereviewboard" created="Wed, 7 Jul 2010 19:27:59 +0000"  >&lt;p&gt;Message from: &quot;Kannan Muthukkaruppan&quot; &amp;lt;kannan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/#review312&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#review312&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/#comment1375&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#comment1375&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Could we hoist the cheaper check first?&lt;/p&gt;

&lt;p&gt;    Since isGetScan() has to do a byte comparison of start/endRow it would be better to do this only if bloom filters are actually in use.&lt;/p&gt;

&lt;p&gt;    So change the second part of the expression to something like:&lt;/p&gt;

&lt;p&gt;    (   (this.bloomFilter == null)&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; (!scan.isGetScan())&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt; passesBloomFilter(...))&lt;/th&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;    Or, you could just pass the Scan to passesBloomFilter() instead of scan.getStartRow().&lt;/p&gt;

&lt;p&gt;    And there we already check for this.bloomFilter == null first.&lt;/p&gt;

&lt;p&gt;    Then you could add the check for &quot;scan.isGetScan&quot;.&lt;/p&gt;

&lt;p&gt;    And then the rest of the function.&lt;/p&gt;




&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Kannan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12886078" author="hbasereviewboard" created="Wed, 7 Jul 2010 20:57:08 +0000"  >&lt;p&gt;Message from: &quot;Pranav Khaitan&quot; &amp;lt;pranavkhaitan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-07-07 13:53:44.275551)&lt;/p&gt;


&lt;p&gt;Review request for hbase, Nicolas, Jonathan Gray, Karthik Ranganathan, and Kannan Muthukkaruppan.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Kannan&apos;s suggestion sounds good that we should do the inexpensive comparison before. Modified the code to include that. Now, we are simply passing the scan object to each filter and leaving it upto the filter to extract whatever information it needs. &lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Every memstore and store file will have a minimum and maximum timestamp associated with it. If the range of timestamps we are searching for doesn&apos;t overlap with the range for a particular file, we can skip searching it and save time.&lt;/p&gt;

&lt;p&gt;Would significantly improve the performance for timestamp range queries. Particularly useful when most of the reads are for recent entries and the older files can be safely skipped. &lt;/p&gt;

&lt;p&gt;Addresses &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt; JIRA. &lt;/p&gt;

&lt;p&gt;This diff includes fixing some minor bugs like KeyValueHeap used to throw an uncaught exception when size of scanner set was zero. &lt;/p&gt;

&lt;p&gt;Internal review done by Jonathan and Kannan.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2265&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2265&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueSkipListSet.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/TimeRangeTracker.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestMemStore.java 960082 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java 959782 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java 959782 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/257/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;All existing JUnit tests run successfully. More JUnit tests for Memstore, StoreFile and Store added to test correctness with multiple timestamps.&lt;/p&gt;

&lt;p&gt;Conducted a test to measure the extra time required to keep track of min and max timestamps while writing KeyValues.  The comparison was done by entering 1 Million KeyValues into memstore ten times with and without timestamp tracking and then taking the average time for each of them.  WAL was disabled and no flushing was done during this test to minimize overheads. The average time taken for entering 1M KeyValues into memstore without keeping track of timestamp was 13.44 seconds while the average time when keeping track of timestamps was 13.45 seconds. This shows that no significant overhead has been added while keeping track of timestamps.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Pranav&lt;/p&gt;

</comment>
                            <comment id="12886082" author="hbasereviewboard" created="Wed, 7 Jul 2010 21:03:27 +0000"  >&lt;p&gt;Message from: &quot;Ryan Rawson&quot; &amp;lt;ryanobjc@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/#review314&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#review314&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/#comment1377&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#comment1377&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    we use 1 true brace style, please move this and all others up 1 line &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/#comment1378&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#comment1378&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    spacing is like so:&lt;br/&gt;
    &quot;if (this.heap != null) {&quot;&lt;/p&gt;

&lt;p&gt;    thanks!&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueSkipListSet.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/#comment1379&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#comment1379&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I think this information should be maintained in MemStore not inside this data structure. We might get rid of this data structure type and change to another one day. This makes it too hard to do that.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ryan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12886092" author="hbasereviewboard" created="Wed, 7 Jul 2010 21:27:42 +0000"  >&lt;p&gt;Message from: &quot;Pranav Khaitan&quot; &amp;lt;pranavkhaitan@facebook.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-07 13:58:43, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueSkipListSet.java, line 55&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/diff/2/?file=2159#file2159line55&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff/2/?file=2159#file2159line55&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I think this information should be maintained in MemStore not inside this data structure. We might get rid of this data structure type and change to another one day. This makes it too hard to do that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;When we are flushing the memstore to a storefile, we are passing an object of KeyValueSkipListSet. This variable goes through several functions before reaching Store. If we don&apos;t have TimeRangeTracker inside KeyValueSkipListSet, we will have to change all flush related functions to take an extra argument as input. This way, in future, if we decide to send another piece of information, we will have to add more arguments. Having TimeRangeTracker inside KeyValueSkipListSet lets us pass the information without changing all flush related functions. Would it still be better to pass TimeRangeTracker as an additional argument?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Pranav&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/#review314&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#review314&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12886093" author="hbasereviewboard" created="Wed, 7 Jul 2010 21:27:43 +0000"  >&lt;p&gt;Message from: &quot;Pranav Khaitan&quot; &amp;lt;pranavkhaitan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-07-07 14:22:41.249992)&lt;/p&gt;


&lt;p&gt;Review request for hbase, Nicolas, Jonathan Gray, Karthik Ranganathan, and Kannan Muthukkaruppan.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Incorporated Ryan&apos;s feedback regarding formatting. &lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Every memstore and store file will have a minimum and maximum timestamp associated with it. If the range of timestamps we are searching for doesn&apos;t overlap with the range for a particular file, we can skip searching it and save time.&lt;/p&gt;

&lt;p&gt;Would significantly improve the performance for timestamp range queries. Particularly useful when most of the reads are for recent entries and the older files can be safely skipped. &lt;/p&gt;

&lt;p&gt;Addresses &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt; JIRA. &lt;/p&gt;

&lt;p&gt;This diff includes fixing some minor bugs like KeyValueHeap used to throw an uncaught exception when size of scanner set was zero. &lt;/p&gt;

&lt;p&gt;Internal review done by Jonathan and Kannan.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2265&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2265&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueSkipListSet.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/TimeRangeTracker.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestMemStore.java 960082 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java 959782 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java 959782 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/257/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;All existing JUnit tests run successfully. More JUnit tests for Memstore, StoreFile and Store added to test correctness with multiple timestamps.&lt;/p&gt;

&lt;p&gt;Conducted a test to measure the extra time required to keep track of min and max timestamps while writing KeyValues.  The comparison was done by entering 1 Million KeyValues into memstore ten times with and without timestamp tracking and then taking the average time for each of them.  WAL was disabled and no flushing was done during this test to minimize overheads. The average time taken for entering 1M KeyValues into memstore without keeping track of timestamp was 13.44 seconds while the average time when keeping track of timestamps was 13.45 seconds. This shows that no significant overhead has been added while keeping track of timestamps.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Pranav&lt;/p&gt;

</comment>
                            <comment id="12886096" author="hbasereviewboard" created="Wed, 7 Jul 2010 21:35:17 +0000"  >&lt;p&gt;Message from: &quot;Ryan Rawson&quot; &amp;lt;ryanobjc@gmail.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-07 13:58:43, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueSkipListSet.java, line 55&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/diff/2/?file=2159#file2159line55&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff/2/?file=2159#file2159line55&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     I think this information should be maintained in MemStore not inside this data structure. We might get rid of this data structure type and change to another one day. This makes it too hard to do that.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Pranav Khaitan wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;When we are flushing the memstore to a storefile, we are passing an object of KeyValueSkipListSet. This variable goes through several functions before reaching Store. If we don&apos;t have TimeRangeTracker inside KeyValueSkipListSet, we will have to change all flush related functions to take an extra argument as input. This way, in future, if we decide to send another piece of information, we will have to add more arguments. Having TimeRangeTracker inside KeyValueSkipListSet lets us pass the information without changing all flush related functions. Would it still be better to pass TimeRangeTracker as an additional argument?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;this totally makes sense, the only issue is that historically we have KeyValueSkipListSet because we couldnt use SkipListSet with the particular implementation of incrementColumnValue we had.  Now that the implementation of ICV is changing (in an unrelated JIRA), we no longer need a specialized SkipListSet and we could use the standard one instead.  &lt;/p&gt;

&lt;p&gt;We have the StoreFlusherImpl inside Store which exists to capture this kind of metadata and carry it along, so doing the other thing might not be too painful or bogus, what do you think?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ryan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/#review314&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#review314&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12886925" author="hbasereviewboard" created="Fri, 9 Jul 2010 22:33:53 +0000"  >&lt;p&gt;Message from: &quot;Pranav Khaitan&quot; &amp;lt;pranavkhaitan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-07-09 15:28:53.720013)&lt;/p&gt;


&lt;p&gt;Review request for hbase, Nicolas, Jonathan Gray, Karthik Ranganathan, and Kannan Muthukkaruppan.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Every memstore and store file will have a minimum and maximum timestamp associated with it. If the range of timestamps we are searching for doesn&apos;t overlap with the range for a particular file, we can skip searching it and save time.&lt;/p&gt;

&lt;p&gt;Would significantly improve the performance for timestamp range queries. Particularly useful when most of the reads are for recent entries and the older files can be safely skipped. &lt;/p&gt;

&lt;p&gt;Addresses &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt; JIRA. &lt;/p&gt;

&lt;p&gt;This diff includes fixing some minor bugs like KeyValueHeap used to throw an uncaught exception when size of scanner set was zero. &lt;/p&gt;

&lt;p&gt;Internal review done by Jonathan and Kannan.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2265&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2265&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/TimeRangeTracker.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/client/TestMultipleTimestamps.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestMemStore.java 960082 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java 959782 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java 959782 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/257/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;All existing JUnit tests run successfully. More JUnit tests for Memstore, StoreFile and Store added to test correctness with multiple timestamps.&lt;/p&gt;

&lt;p&gt;Conducted a test to measure the extra time required to keep track of min and max timestamps while writing KeyValues.  The comparison was done by entering 1 Million KeyValues into memstore ten times with and without timestamp tracking and then taking the average time for each of them.  WAL was disabled and no flushing was done during this test to minimize overheads. The average time taken for entering 1M KeyValues into memstore without keeping track of timestamp was 13.44 seconds while the average time when keeping track of timestamps was 13.45 seconds. This shows that no significant overhead has been added while keeping track of timestamps.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Pranav&lt;/p&gt;

</comment>
                            <comment id="12887497" author="hbasereviewboard" created="Mon, 12 Jul 2010 20:16:09 +0000"  >&lt;p&gt;Message from: &quot;Ryan Rawson&quot; &amp;lt;ryanobjc@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/#review357&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#review357&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;there are a number of intenting issues, HBase uses a 2 space base and a 4 space hanging indent standard.  Also we space separate the outside of our braces, so it is &quot;if (&quot; not &quot;if(&quot;.  The interior of the braces are not to be spaced, eg: &quot;(foo)&quot; not &quot;( foo )&quot;.  I am also seeing a large number of trailing whitespace, you should be able to set your editor to automatically remove that for you. They show up as red blocks on the code review.  &lt;/p&gt;

&lt;p&gt;It also appears that this patch includes pieces from other bloom related patches... those code snippets should be removed from this patch.&lt;/p&gt;


&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/#comment1483&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#comment1483&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    This doesnt appear to be germane to the issue at hand.  It shouldn&apos;t appear in this patch.&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/#comment1489&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#comment1489&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    indentation, looks like there might be a tab here&lt;/p&gt;




&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/#comment1492&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#comment1492&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    is this idiomatic? I dont think I&apos;ve seen this particular pattern before?&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/#comment1496&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#comment1496&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    This doesnt seem germane to the issue at hand... Can we not do this here?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ryan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12887520" author="hbasereviewboard" created="Mon, 12 Jul 2010 20:55:06 +0000"  >&lt;p&gt;Message from: &quot;Pranav Khaitan&quot; &amp;lt;pranavkhaitan@facebook.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 13:09:10, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; there are a number of intenting issues, HBase uses a 2 space base and a 4 space hanging indent standard.  Also we space separate the outside of our braces, so it is &quot;if (&quot; not &quot;if(&quot;.  The interior of the braces are not to be spaced, eg: &quot;(foo)&quot; not &quot;( foo )&quot;.  I am also seeing a large number of trailing whitespace, you should be able to set your editor to automatically remove that for you. They show up as red blocks on the code review.  &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; It also appears that this patch includes pieces from other bloom related patches... those code snippets should be removed from this patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks Ryan, for pointing out the formatting suggestions. I will fix those and upload the code. Meanwhile, I wanted to get your views on the following points.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 13:09:10, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java, line 733&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/diff/4/?file=2330#file2330line733&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff/4/?file=2330#file2330line733&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     indentation, looks like there might be a tab here&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Fixed&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 13:09:10, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java, line 933&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/diff/4/?file=2328#file2328line933&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff/4/?file=2328#file2328line933&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     This doesnt appear to be germane to the issue at hand.  It shouldn&apos;t appear in this patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This method is required for this issue to check if a delete is a Column of Family delete. It is used in TimeRangeTracker. If you suggest not adding this method, I can write this code at the place I am using it at?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 13:09:10, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java, line 425&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/diff/4/?file=2332#file2332line425&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff/4/?file=2332#file2332line425&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     is this idiomatic? I dont think I&apos;ve seen this particular pattern before?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a utility method in Writables and it does exactly the task we want to get done here. There is an alternate method getWritable which also returns an object of type Writable. Do you think it would be better to use that?&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 13:09:10, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java, line 136&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/diff/4/?file=2333#file2333line136&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff/4/?file=2333#file2333line136&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     This doesnt seem germane to the issue at hand... Can we not do this here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I did this to pass Timerange information to ShouldSeek(). An alternative possibility is to pass TimeRange as an additional parameter. We had a discussion about this in our team here and we thought that since Scan contains all information, it is a neater way of passing than adding more arguments. That way, in future if we add any more filtering techniques at this level, we wont have to change the interface.&lt;/p&gt;

&lt;p&gt;Do you suggest making it two different functions: shouldSeek(row, columns) and shouldSeek(timeRange) ?&lt;/p&gt;

&lt;p&gt;Alternately, it can be combined into one function like shouldSeek(isGet, row, columns, timeRange)&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Pranav&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/#review357&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#review357&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12887542" author="hbasereviewboard" created="Mon, 12 Jul 2010 21:23:06 +0000"  >&lt;p&gt;Message from: &quot;Ryan Rawson&quot; &amp;lt;ryanobjc@gmail.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 13:09:10, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java, line 425&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/diff/4/?file=2332#file2332line425&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff/4/?file=2332#file2332line425&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     is this idiomatic? I dont think I&apos;ve seen this particular pattern before?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Pranav Khaitan wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is a utility method in Writables and it does exactly the task we want to get done here. There is an alternate method getWritable which also returns an object of type Writable. Do you think it would be better to use that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ok i see, then this should be ok&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 13:09:10, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java, line 933&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/diff/4/?file=2328#file2328line933&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff/4/?file=2328#file2328line933&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     This doesnt appear to be germane to the issue at hand.  It shouldn&apos;t appear in this patch.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Pranav Khaitan wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This method is required for this issue to check if a delete is a Column of Family delete. It is used in TimeRangeTracker. If you suggest not adding this method, I can write this code at the place I am using it at?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ok my bad. this is fine then.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 13:09:10, Ryan Rawson wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java, line 136&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/257/diff/4/?file=2333#file2333line136&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff/4/?file=2333#file2333line136&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     This doesnt seem germane to the issue at hand... Can we not do this here?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Pranav Khaitan wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I did this to pass Timerange information to ShouldSeek(). An alternative possibility is to pass TimeRange as an additional parameter. We had a discussion about this in our team here and we thought that since Scan contains all information, it is a neater way of passing than adding more arguments. That way, in future if we add any more filtering techniques at this level, we wont have to change the interface.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Do you suggest making it two different functions: shouldSeek(row, columns) and shouldSeek(timeRange) ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Alternately, it can be combined into one function like shouldSeek(isGet, row, columns, timeRange)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;ok, lets keep it as then.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ryan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/#review357&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#review357&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12887558" author="hbasereviewboard" created="Mon, 12 Jul 2010 21:54:53 +0000"  >&lt;p&gt;Message from: &quot;Pranav Khaitan&quot; &amp;lt;pranavkhaitan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-07-12 14:48:59.626469)&lt;/p&gt;


&lt;p&gt;Review request for hbase, Nicolas, Jonathan Gray, Ryan Rawson, Karthik Ranganathan, and Kannan Muthukkaruppan.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Every memstore and store file will have a minimum and maximum timestamp associated with it. If the range of timestamps we are searching for doesn&apos;t overlap with the range for a particular file, we can skip searching it and save time.&lt;/p&gt;

&lt;p&gt;Would significantly improve the performance for timestamp range queries. Particularly useful when most of the reads are for recent entries and the older files can be safely skipped. &lt;/p&gt;

&lt;p&gt;Addresses &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt; JIRA. &lt;/p&gt;

&lt;p&gt;This diff includes fixing some minor bugs like KeyValueHeap used to throw an uncaught exception when size of scanner set was zero. &lt;/p&gt;

&lt;p&gt;Internal review done by Jonathan and Kannan.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2265&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2265&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/TimeRangeTracker.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/client/TestMultipleTimestamps.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestMemStore.java 960082 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java 959782 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java 959782 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/257/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;All existing JUnit tests run successfully. More JUnit tests for Memstore, StoreFile and Store added to test correctness with multiple timestamps.&lt;/p&gt;

&lt;p&gt;Conducted a test to measure the extra time required to keep track of min and max timestamps while writing KeyValues.  The comparison was done by entering 1 Million KeyValues into memstore ten times with and without timestamp tracking and then taking the average time for each of them.  WAL was disabled and no flushing was done during this test to minimize overheads. The average time taken for entering 1M KeyValues into memstore without keeping track of timestamp was 13.44 seconds while the average time when keeping track of timestamps was 13.45 seconds. This shows that no significant overhead has been added while keeping track of timestamps.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Pranav&lt;/p&gt;

</comment>
                            <comment id="12887560" author="hbasereviewboard" created="Mon, 12 Jul 2010 21:57:40 +0000"  >&lt;p&gt;Message from: &quot;Pranav Khaitan&quot; &amp;lt;pranavkhaitan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-07-12 14:48:32.979270)&lt;/p&gt;


&lt;p&gt;Review request for hbase, Nicolas, Jonathan Gray, Karthik Ranganathan, and Kannan Muthukkaruppan.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Formatting..&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Every memstore and store file will have a minimum and maximum timestamp associated with it. If the range of timestamps we are searching for doesn&apos;t overlap with the range for a particular file, we can skip searching it and save time.&lt;/p&gt;

&lt;p&gt;Would significantly improve the performance for timestamp range queries. Particularly useful when most of the reads are for recent entries and the older files can be safely skipped. &lt;/p&gt;

&lt;p&gt;Addresses &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt; JIRA. &lt;/p&gt;

&lt;p&gt;This diff includes fixing some minor bugs like KeyValueHeap used to throw an uncaught exception when size of scanner set was zero. &lt;/p&gt;

&lt;p&gt;Internal review done by Jonathan and Kannan.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2265&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2265&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/TimeRangeTracker.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/client/TestMultipleTimestamps.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestMemStore.java 960082 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java 959782 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java 959782 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/257/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;All existing JUnit tests run successfully. More JUnit tests for Memstore, StoreFile and Store added to test correctness with multiple timestamps.&lt;/p&gt;

&lt;p&gt;Conducted a test to measure the extra time required to keep track of min and max timestamps while writing KeyValues.  The comparison was done by entering 1 Million KeyValues into memstore ten times with and without timestamp tracking and then taking the average time for each of them.  WAL was disabled and no flushing was done during this test to minimize overheads. The average time taken for entering 1M KeyValues into memstore without keeping track of timestamp was 13.44 seconds while the average time when keeping track of timestamps was 13.45 seconds. This shows that no significant overhead has been added while keeping track of timestamps.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Pranav&lt;/p&gt;

</comment>
                            <comment id="12887990" author="hbasereviewboard" created="Tue, 13 Jul 2010 20:34:04 +0000"  >&lt;p&gt;Message from: &quot;Ryan Rawson&quot; &amp;lt;ryanobjc@gmail.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/#review395&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/#review395&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;


&lt;p&gt;lgtm&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ryan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12888005" author="ryanobjc" created="Tue, 13 Jul 2010 21:02:15 +0000"  >&lt;p&gt;i committed this with some white space formatting cleanups (along with removing unused imports)&lt;/p&gt;</comment>
                            <comment id="12888046" author="pranavkhaitan" created="Tue, 13 Jul 2010 22:08:50 +0000"  >
&lt;p&gt;Hi Ryan, Jonathan,&lt;/p&gt;

&lt;p&gt;There is a major correction to this JIRA. I just did some more testing and&lt;br/&gt;
realized that we forgot one thing in the last set of refactoring and&lt;br/&gt;
reformatting.&lt;/p&gt;

&lt;p&gt;In line 422, we had changed the variable from b to timerangeBytes but did&lt;br/&gt;
not change the if statement in next sentence (which is a big deal).&lt;/p&gt;

&lt;p&gt;      byte[] timerangeBytes = metadataMap.get(TIMERANGE_KEY);&lt;br/&gt;
      if (b!=null) &lt;/p&gt;

&lt;p&gt;Should be changed to:&lt;/p&gt;

&lt;p&gt;      byte[] timerangeBytes = metadataMap.get(TIMERANGE_KEY);&lt;br/&gt;
      if (timerangeBytes != null)&lt;/p&gt;


&lt;p&gt;I am also attaching the patch with this mail. Please update this asap and&lt;br/&gt;
let me know if you have any questions.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
Pranav&lt;/p&gt;


</comment>
                            <comment id="12888085" author="stack" created="Tue, 13 Jul 2010 23:02:46 +0000"  >&lt;p&gt;Reopening till Pranav&apos;s fix is applied.&lt;/p&gt;</comment>
                            <comment id="12888095" author="ryanobjc" created="Tue, 13 Jul 2010 23:19:23 +0000"  >&lt;p&gt;commited the fixup, thanks!&lt;/p&gt;</comment>
                            <comment id="12888102" author="ryanobjc" created="Tue, 13 Jul 2010 23:26:57 +0000"  >&lt;p&gt;done&lt;/p&gt;

&lt;p&gt;On Tue, Jul 13, 2010 at 3:06 PM, Pranav Khaitan&lt;/p&gt;
</comment>
                            <comment id="12888172" author="stack" created="Wed, 14 Jul 2010 03:37:57 +0000"  >&lt;p&gt;Resolving because Ryan applied Pranav late edition&lt;/p&gt;</comment>
                            <comment id="12888735" author="hbasereviewboard" created="Thu, 15 Jul 2010 07:43:40 +0000"  >&lt;p&gt;Message from: &quot;Pranav Khaitan&quot; &amp;lt;pranavkhaitan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/257/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-07-15 00:33:16.570757)&lt;/p&gt;


&lt;p&gt;Review request for hbase, Nicolas, Jonathan Gray, Ryan Rawson, Karthik Ranganathan, and Kannan Muthukkaruppan.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Just for completeness, making the change which has been committed to public branch.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Every memstore and store file will have a minimum and maximum timestamp associated with it. If the range of timestamps we are searching for doesn&apos;t overlap with the range for a particular file, we can skip searching it and save time.&lt;/p&gt;

&lt;p&gt;Would significantly improve the performance for timestamp range queries. Particularly useful when most of the reads are for recent entries and the older files can be safely skipped. &lt;/p&gt;

&lt;p&gt;Addresses &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt; JIRA. &lt;/p&gt;

&lt;p&gt;This diff includes fixing some minor bugs like KeyValueHeap used to throw an uncaught exception when size of scanner set was zero. &lt;/p&gt;

&lt;p&gt;Internal review done by Jonathan and Kannan.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2265&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2265&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java 959782 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/TimeRangeTracker.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/client/TestMultipleTimestamps.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestMemStore.java 960082 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStore.java 959782 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java 959782 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/257/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/257/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;All existing JUnit tests run successfully. More JUnit tests for Memstore, StoreFile and Store added to test correctness with multiple timestamps.&lt;/p&gt;

&lt;p&gt;Conducted a test to measure the extra time required to keep track of min and max timestamps while writing KeyValues.  The comparison was done by entering 1 Million KeyValues into memstore ten times with and without timestamp tracking and then taking the average time for each of them.  WAL was disabled and no flushing was done during this test to minimize overheads. The average time taken for entering 1M KeyValues into memstore without keeping track of timestamp was 13.44 seconds while the average time when keeping track of timestamps was 13.45 seconds. This shows that no significant overhead has been added while keeping track of timestamps.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Pranav&lt;/p&gt;

</comment>
                            <comment id="15017508" author="lars_francke" created="Fri, 20 Nov 2015 12:43:23 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12385472">HBASE-29</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12427237">HBASE-1485</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12457095">HBASE-2248</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12449393" name="ASF.LICENSE.NOT.GRANTED--TimestampOptimizationV6.patch" size="624" author="pranavkhaitan" created="Tue, 13 Jul 2010 22:08:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 25 Feb 2010 08:43:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32489</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hgyv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100011</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>