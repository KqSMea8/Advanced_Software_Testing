<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:23:52 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-5001/HBASE-5001.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-5001] Improve the performance of block cache keys</title>
                <link>https://issues.apache.org/jira/browse/HBASE-5001</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Doing a pure random read test on data that&apos;s 100% block cache, I see that we are spending quite some time in getBlockCacheKey:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;IPC Server handler 19 on 62023&quot; daemon prio=10 tid=0x00007fe0501ff800 nid=0x6c87 runnable &lt;span class=&quot;error&quot;&gt;&amp;#91;0x00007fe0577f6000&amp;#93;&lt;/span&gt;&lt;br/&gt;
   java.lang.Thread.State: RUNNABLE&lt;br/&gt;
	at java.util.Arrays.copyOf(Arrays.java:2882)&lt;br/&gt;
	at java.lang.AbstractStringBuilder.expandCapacity(AbstractStringBuilder.java:100)&lt;br/&gt;
	at java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:390)&lt;br/&gt;
	at java.lang.StringBuilder.append(StringBuilder.java:119)&lt;br/&gt;
	at org.apache.hadoop.hbase.io.hfile.HFile.getBlockCacheKey(HFile.java:457)&lt;br/&gt;
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2.readBlock(HFileReaderV2.java:249)&lt;br/&gt;
	at org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.seekToDataBlock(HFileBlockIndex.java:209)&lt;br/&gt;
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2$ScannerV2.seekTo(HFileReaderV2.java:521)&lt;br/&gt;
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2$ScannerV2.seekTo(HFileReaderV2.java:536)&lt;br/&gt;
	at org.apache.hadoop.hbase.regionserver.StoreFileScanner.seekAtOrAfter(StoreFileScanner.java:178)&lt;br/&gt;
	at org.apache.hadoop.hbase.regionserver.StoreFileScanner.seek(StoreFileScanner.java:111)&lt;br/&gt;
	at org.apache.hadoop.hbase.regionserver.StoreFileScanner.seekExactly(StoreFileScanner.java:219)&lt;br/&gt;
	at org.apache.hadoop.hbase.regionserver.StoreScanner.&amp;lt;init&amp;gt;(StoreScanner.java:80)&lt;br/&gt;
	at org.apache.hadoop.hbase.regionserver.Store.getScanner(Store.java:1689)&lt;br/&gt;
	at org.apache.hadoop.hbase.regionserver.HRegion$RegionScannerImpl.&amp;lt;init&amp;gt;(HRegion.java:2857)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Since the HFile name size is known and the offset is a long, it should be possible to allocate exactly what we need. Maybe use byte[] as the key and drop the separator too.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12534560">HBASE-5001</key>
            <summary>Improve the performance of block cache keys</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lhofhansl">Lars Hofhansl</assignee>
                                    <reporter username="jdcryans">Jean-Daniel Cryans</reporter>
                        <labels>
                    </labels>
                <created>Fri, 9 Dec 2011 23:51:37 +0000</created>
                <updated>Fri, 20 Nov 2015 11:53:26 +0000</updated>
                            <resolved>Wed, 14 Dec 2011 00:05:51 +0000</resolved>
                                    <version>0.90.4</version>
                                    <fixVersion>0.92.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13167025" author="lhofhansl" created="Sun, 11 Dec 2011 02:33:53 +0000"  >&lt;p&gt;Did a quick micro-benchmark:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;hfileName + CACHE_KEY_SEPARATOR + offset -&amp;gt; 0.34us&lt;/li&gt;
	&lt;li&gt;new StringBuilder(hfileName).append(CACHE_KEY_SEPARATOR).append(offset).toString() -&amp;gt; 0.19us&lt;/li&gt;
	&lt;li&gt;new StringBuilder(hfileName).append(offset).toString() -&amp;gt; 0.183us&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;StringBuilder(String) reserves an extra 16 characters, so as long as HFiles are &amp;lt; 1PB, this works without extra allocations, and we can save a lot.&lt;/p&gt;

&lt;p&gt;One the other hand I have a hard time believing that fractions of microseconds per cache block access would make a difference.&lt;/p&gt;</comment>
                            <comment id="13167237" author="stack" created="Sun, 11 Dec 2011 23:09:21 +0000"  >&lt;p&gt;What happens if you hfile name is bytes only and we make key by doing Bytes.add, adding the hfilename as bytes + offset as bytes (Would have to include the Bytes.toBytes(long).&lt;/p&gt;

&lt;p&gt;We&apos;d have to be doing a lot of key making for the above to show, agreed.&lt;/p&gt;</comment>
                            <comment id="13167284" author="lhofhansl" created="Sun, 11 Dec 2011 23:53:09 +0000"  >&lt;ul&gt;
	&lt;li&gt;Bytes.add(hfileNameInBytes, Bytes.toBytes(offset)) -&amp;gt; 0.07us&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;But byte[] cannot be directly use as key in a map, no? Would need to wrap in HashBytes, so:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;new HashedBytes(Bytes.add(x, Bytes.toBytes(offser))); -&amp;gt; 0.08us&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Which brought me to a new idea, what if we have a CacheKey Object that takes a String and a long:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;new CacheKey(hfileName, offset) -&amp;gt; 0.01us&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That would be the cleanest design anyway. Cachkey would implement the proper equals and hashCode methods.&lt;br/&gt;
The LruCache could just take CacheKey (or even just java.lang.Object) as cache key, that way we can pass whatever.&lt;/p&gt;</comment>
                            <comment id="13167343" author="stack" created="Mon, 12 Dec 2011 04:17:36 +0000"  >&lt;p&gt;I like 0.01us.  Better than 0.34us.  +1 on your idea Lars.  Could compare offsets first.  That should be fast.  Then filename.&lt;/p&gt;</comment>
                            <comment id="13167344" author="stack" created="Mon, 12 Dec 2011 04:18:18 +0000"  >&lt;p&gt;Hmm... maybe filename compare first....  where filename is byte array, not String?&lt;/p&gt;</comment>
                            <comment id="13167358" author="lhofhansl" created="Mon, 12 Dec 2011 05:31:33 +0000"  >&lt;p&gt;Was thinking something as simple as this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class Key {
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; file;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; offset;

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Key(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; file, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; offset) {
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.file = file;
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.offset = offset;
  }

  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; hashCode() {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; file.hashCode()*127+(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;)(offset ^ (offset &amp;gt;&amp;gt;&amp;gt; 32));
  }

  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; equals(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; o) {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (o &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; Key) {
      Key k = (Key)o;
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; offset == k.offset &amp;amp;&amp;amp; (file == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ? k.file == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; : file.equals(k.file));
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
    }
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13167658" author="stack" created="Mon, 12 Dec 2011 18:37:53 +0000"  >&lt;p&gt;LGTM&lt;/p&gt;</comment>
                            <comment id="13167669" author="jdcryans" created="Mon, 12 Dec 2011 18:50:00 +0000"  >&lt;p&gt;I agree that the speedup is small, but my test was really done on a purely in-BC dataset &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/tongue.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Something else that I&apos;ve just witnessed that&apos;s minor is that we&apos;re doing a lot of auto-boxing while we could just keep the Long (instead of long) around in IdLock.Entry:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;   java.lang.Thread.State: RUNNABLE&lt;br/&gt;
	at java.lang.Long.valueOf(Long.java:557)&lt;br/&gt;
	at org.apache.hadoop.hbase.util.IdLock.getLockEntry(IdLock.java:71)&lt;br/&gt;
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2.readBlock(HFileReaderV2.java:250)&lt;br/&gt;
	at org.apache.hadoop.hbase.io.hfile.HFileBlockIndex$BlockIndexReader.seekToDataBlock(HFileBlockIndex.java:209)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;   java.lang.Thread.State: RUNNABLE&lt;br/&gt;
	at java.lang.Long.valueOf(Long.java:557)&lt;br/&gt;
	at org.apache.hadoop.hbase.util.IdLock.releaseLockEntry(IdLock.java:110)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;locked &amp;lt;0x000000047ba48ba8&amp;gt; (a org.apache.hadoop.hbase.util.IdLock$Entry)&lt;br/&gt;
	at org.apache.hadoop.hbase.io.hfile.HFileReaderV2.readBlock(HFileReaderV2.java:283)&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</comment>
                            <comment id="13167690" author="jdcryans" created="Mon, 12 Dec 2011 19:19:03 +0000"  >&lt;p&gt;FWIW, on my unscientific test using the 0.183us solution first described by Lars I&apos;m able to juice out a few thousand more reads per second, usually I&apos;m doing a sustained 255-265k/sec and with it I do 260-270k/sec.&lt;/p&gt;</comment>
                            <comment id="13167716" author="lhofhansl" created="Mon, 12 Dec 2011 19:49:50 +0000"  >&lt;p&gt;Whoa... Would not have expected that. Cool. Maybe with this change we&apos;re getting into the realm where shrinking the KeyValues would have a measurable effect too.&lt;/p&gt;

&lt;p&gt;I&apos;ll do the CacheKey thing then.&lt;br/&gt;
In fact I would do that even if there was no performance improvement, because it is cleaner.&lt;/p&gt;</comment>
                            <comment id="13167739" author="lhofhansl" created="Mon, 12 Dec 2011 20:02:00 +0000"  >&lt;p&gt;Actually the CacheKey part would be a bigger change. There&apos;s a bunch of code evicting by prefix, grouping by column family, etc.&lt;br/&gt;
I think JGray mentioned once that the LruCache is also used outside of HBase at FB.&lt;/p&gt;

&lt;p&gt;Should I still make the change, or are we good with the &quot;new StringBuilder(hfileName).append(CACHE_KEY_SEPARATOR).append(offset).toString()&quot; option? (it needs the separator unless we also refactor the caching code)&lt;/p&gt;</comment>
                            <comment id="13167748" author="jdcryans" created="Mon, 12 Dec 2011 20:06:38 +0000"  >&lt;p&gt;I&apos;d be in favor of the bigger refactor, what I think he said about the LRU code is that it&apos;s copied from another apache project (solr IIRC). &lt;/p&gt;</comment>
                            <comment id="13167933" author="lhofhansl" created="Mon, 12 Dec 2011 23:13:35 +0000"  >&lt;p&gt;Here&apos;s a patch against trunk.&lt;/p&gt;

&lt;p&gt;Wasn&apos;t as bad as I thought. Made a bunch of things nicer (all the evict by prefix huh-hah is gone, was just used to evict by hfileName)&lt;/p&gt;

&lt;p&gt;I ran all the tests that I needed to modify. Will now get a full run.&lt;/p&gt;</comment>
                            <comment id="13167934" author="lhofhansl" created="Mon, 12 Dec 2011 23:14:23 +0000"  >&lt;p&gt;Getting a test run&lt;/p&gt;</comment>
                            <comment id="13167947" author="yuzhihong@gmail.com" created="Mon, 12 Dec 2011 23:46:22 +0000"  >&lt;p&gt;In LruBlockCache, please change the javadoc for cacheKey parameter. &lt;/p&gt;</comment>
                            <comment id="13167969" author="stack" created="Tue, 13 Dec 2011 00:12:14 +0000"  >&lt;p&gt;Looks great.  BlockCacheKey is missing license and class javadoc.  &lt;/p&gt;</comment>
                            <comment id="13168011" author="lhofhansl" created="Tue, 13 Dec 2011 01:01:17 +0000"  >&lt;p&gt;Fixed comments and license.&lt;/p&gt;</comment>
                            <comment id="13168017" author="jdcryans" created="Tue, 13 Dec 2011 01:05:41 +0000"  >&lt;p&gt;Would you be so kind as to provide a 0.92 patch? My current testing setup is on that version. We could also backport it to 0.92 in a minor release if we see it&apos;s stable enough (or even 0.92.0, but I wouldn&apos;t go so far).&lt;/p&gt;</comment>
                            <comment id="13168128" author="hadoopqa" created="Tue, 13 Dec 2011 04:33:00 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12507106/5001-v2.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12507106/5001-v2.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 15 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 javadoc.  The javadoc tool appears to have generated -152 warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 75 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestAdmin&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestDistributedLogSplitting&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/494//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/494//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/494//artifact/trunk/patchprocess/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/494//artifact/trunk/patchprocess/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/494//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/494//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13168137" author="lhofhansl" created="Tue, 13 Dec 2011 05:27:30 +0000"  >&lt;p&gt;Sure. Would be great if we get a comparison in your cluster. &lt;/p&gt;

</comment>
                            <comment id="13168164" author="lhofhansl" created="Tue, 13 Dec 2011 06:35:31 +0000"  >&lt;p&gt;Here&apos;s an 0.92 patch.&lt;/p&gt;</comment>
                            <comment id="13168636" author="jdcryans" created="Tue, 13 Dec 2011 19:27:00 +0000"  >&lt;p&gt;+1, I did a few BC-only tests and it seems to get us a few extra rows per second.&lt;/p&gt;</comment>
                            <comment id="13168644" author="lhofhansl" created="Tue, 13 Dec 2011 19:31:50 +0000"  >&lt;p&gt;So it&apos;s only marginally faster than the first test you did (with new StringBuilder(hfileName).append(offset).toString())?&lt;/p&gt;

&lt;p&gt;Do you have any numbers comparing to the 255-265k/sec and 260-270k/sec above?&lt;/p&gt;</comment>
                            <comment id="13168651" author="jdcryans" created="Tue, 13 Dec 2011 19:45:27 +0000"  >&lt;p&gt;Stack is pegging one of my test machines (with a constant load fortunately), so I had to first retest the old patch and then did the new one. The difference I saw was it went from 215-225k to 220-230k. I&apos;ll do the test with only the other 14 machines to make sure.&lt;/p&gt;</comment>
                            <comment id="13168718" author="jdcryans" created="Tue, 13 Dec 2011 21:08:39 +0000"  >&lt;p&gt;Alright a proper test now that I removed that machine (also I forgot that I was playing with block sizes, setting them to 16k instead of 4k like I did in the first test gave me a big performance hit).&lt;/p&gt;

&lt;p&gt;Without any patch from this jira I can sustain 235-245k/sec.&lt;/p&gt;

&lt;p&gt;With the 0.92 patch I can do 245-255k.&lt;/p&gt;</comment>
                            <comment id="13168738" author="lhofhansl" created="Tue, 13 Dec 2011 21:22:43 +0000"  >&lt;p&gt;Cool... I can commit this to trunk. It&apos;s a nice cleanup and a moderate performance improvement (~4%).&lt;br/&gt;
I don&apos;t see a strong reason for putting this into 0.92.&lt;/p&gt;</comment>
                            <comment id="13168742" author="jdcryans" created="Tue, 13 Dec 2011 21:26:33 +0000"  >&lt;p&gt;Yeah let&apos;s keep the changes to 0.92 to a minimum if Stack is going to do the RC today, +1 on commit to trunk. Thanks for the nice work Lars!&lt;/p&gt;</comment>
                            <comment id="13168906" author="lhofhansl" created="Wed, 14 Dec 2011 00:05:51 +0000"  >&lt;p&gt;Committed to trunk.&lt;br/&gt;
Thanks for finding, reviewing, and testing J-D!&lt;/p&gt;</comment>
                            <comment id="13168914" author="lhofhansl" created="Wed, 14 Dec 2011 00:16:47 +0000"  >&lt;p&gt;As for the other problem you found... There will be at least one autoboxing from long to Long needed in getLockEntry(...).&lt;br/&gt;
Could safe the unboxing in releaseLockEntry(...).&lt;/p&gt;</comment>
                            <comment id="13169096" author="hudson" created="Wed, 14 Dec 2011 05:58:31 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #2544 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/2544/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/2544/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5001&quot; title=&quot;Improve the performance of block cache keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5001&quot;&gt;&lt;del&gt;HBASE-5001&lt;/del&gt;&lt;/a&gt; Improve the performance of block cache keys (Lars H and J-D)&lt;/p&gt;

&lt;p&gt;larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCacheKey.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/CachedBlock.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/DoubleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/LruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/SimpleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabItemActionWatcher.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCachedBlockQueue.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileBlockIndex.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruBlockCache.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13169120" author="hudson" created="Wed, 14 Dec 2011 07:01:36 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-security #31 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-security/31/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-security/31/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5001&quot; title=&quot;Improve the performance of block cache keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5001&quot;&gt;&lt;del&gt;HBASE-5001&lt;/del&gt;&lt;/a&gt; Improve the performance of block cache keys (Lars H and J-D)&lt;/p&gt;

&lt;p&gt;larsh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCacheKey.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/CachedBlock.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/DoubleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/LruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/SimpleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabItemActionWatcher.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCachedBlockQueue.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileBlockIndex.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruBlockCache.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13171084" author="stack" created="Fri, 16 Dec 2011 17:21:30 +0000"  >&lt;p&gt;I&apos;ve been profiling to try and figure the slow down scanning in 0.92 that J-D reported up on list and its crazy how much cpu this key making is responsible for in the admittedly warped view the profiler gives you.  Let me try this patch on 0.92.&lt;/p&gt;</comment>
                            <comment id="13171089" author="lhofhansl" created="Fri, 16 Dec 2011 17:34:28 +0000"  >&lt;p&gt;The 0.92 patch is good go if we decide to use that.&lt;/p&gt;

&lt;p&gt;We do almost the same in 0.90, though (minus the _ part), so that would not explain the 0.92 slowdown.&lt;/p&gt;</comment>
                            <comment id="13171209" author="stack" created="Fri, 16 Dec 2011 21:29:38 +0000"  >&lt;p&gt;Committed to 0.92 too.. .makes big difference in profiler view.&lt;/p&gt;</comment>
                            <comment id="13171229" author="lhofhansl" created="Fri, 16 Dec 2011 21:51:14 +0000"  >&lt;p&gt;Cool &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13171234" author="hudson" created="Fri, 16 Dec 2011 21:57:49 +0000"  >&lt;p&gt;Integrated in HBase-0.92 #192 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.92/192/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.92/192/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5001&quot; title=&quot;Improve the performance of block cache keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5001&quot;&gt;&lt;del&gt;HBASE-5001&lt;/del&gt;&lt;/a&gt; Improve the performance of block cache keys&lt;/p&gt;

&lt;p&gt;stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.92/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/CachedBlock.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/DoubleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/LruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/SimpleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabItemActionWatcher.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCachedBlockQueue.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileBlockIndex.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruBlockCache.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13171427" author="hudson" created="Sat, 17 Dec 2011 03:00:06 +0000"  >&lt;p&gt;Integrated in HBase-0.92 #193 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.92/193/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.92/193/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5001&quot; title=&quot;Improve the performance of block cache keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5001&quot;&gt;&lt;del&gt;HBASE-5001&lt;/del&gt;&lt;/a&gt; Improve the performance of block cache keys&lt;/p&gt;

&lt;p&gt;stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCacheKey.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13171476" author="hudson" created="Sat, 17 Dec 2011 06:50:08 +0000"  >&lt;p&gt;Integrated in HBase-0.92-security #40 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.92-security/40/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.92-security/40/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5001&quot; title=&quot;Improve the performance of block cache keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5001&quot;&gt;&lt;del&gt;HBASE-5001&lt;/del&gt;&lt;/a&gt; Improve the performance of block cache keys&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5001&quot; title=&quot;Improve the performance of block cache keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5001&quot;&gt;&lt;del&gt;HBASE-5001&lt;/del&gt;&lt;/a&gt; Improve the performance of block cache keys&lt;/p&gt;

&lt;p&gt;stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCacheKey.java&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.92/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/BlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/CachedBlock.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/DoubleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV1.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/LruBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/SimpleBlockCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SingleSizeCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabCache.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/slab/SlabItemActionWatcher.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/io/hfile/CacheTestUtils.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCachedBlockQueue.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileBlockIndex.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/io/hfile/TestLruBlockCache.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13171987" author="lhofhansl" created="Mon, 19 Dec 2011 01:04:27 +0000"  >&lt;p&gt;Did the profiler show any other low-hanging fruit?&lt;br/&gt;
Do you have 0.90 comparisons? (Maybe we can figure out what causes the difference)&lt;/p&gt;</comment>
                            <comment id="13172546" author="stack" created="Mon, 19 Dec 2011 19:47:28 +0000"  >&lt;p&gt;It does caveat (saving Todd having to intercede), &apos;Profilers give you distorted view&apos;)&lt;/p&gt;

&lt;p&gt;Here&apos;s a few:&lt;/p&gt;

&lt;p&gt;+ util.IdLock releaseLockEntry and getLockEntry take a long and then autobox to check Map.  The autoboxing shows as 8% (could keep the Long around down inside IdLock and save &apos;4%&apos;):&lt;/p&gt;

&lt;p&gt;3.9% - 3,255 kB - 2,322 alloc. org.apache.hadoop.hbase.util.IdLock.releaseLockEntry&lt;/p&gt;

&lt;p&gt;3.7% - 3,035 kB - 2,208 alloc. org.apache.hadoop.hbase.util.IdLock.getLockEntry&lt;/p&gt;

&lt;p&gt;+ The put and remove from HBaseServer call queue looks expensive in profiler as does keeping up our MVCC read/write points.  Would be sweet to redo these w/ some kinda lockless datastructure (lmax disruptor?).  The call queue shows as 20% if you add put and take.&lt;/p&gt;

&lt;p&gt;HBaseServer     this.callQueue  = new LinkedBlockingQueue&amp;lt;Call&amp;gt;(maxQueueSize);&lt;/p&gt;

&lt;p&gt;There are some allocation savings we could do too... a bit of sizing of results could save some resizings.  E.g.:&lt;/p&gt;

&lt;p&gt;2.2% - 13,042 ms org.apache.hadoop.hbase.util.ByteBufferOutputStream.checkSizeAndGrow &lt;/p&gt;


&lt;p&gt;If you want access to jprofiler, key just say.  jprofiler donated us a license for committers.&lt;/p&gt;</comment>
                            <comment id="13172556" author="zhihyu@ebaysf.com" created="Mon, 19 Dec 2011 20:00:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;a bit of sizing of results could save some resizings&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I clearly remembered Todd not favoring mini-optimization &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13172592" author="tlipcon" created="Mon, 19 Dec 2011 20:37:24 +0000"  >&lt;p&gt;haha &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; My feeling is mostly that profilers point you in the right direction, but it&apos;s still worth doing a more macro-benchmark to know that you&apos;re really making a difference with the &quot;fixes&quot;. But I&apos;m all for shaving off percents here and there - they do add up over time!&lt;/p&gt;

&lt;p&gt;Regarding IdLock, we could probably replace it with something like TIntHashSet from trove4j to avoid boxing costs... though that is LGPL so we&apos;d need to do a cleanroom implementation or find a different implementation of similar.&lt;/p&gt;</comment>
                            <comment id="13172676" author="stack" created="Mon, 19 Dec 2011 22:13:51 +0000"  >&lt;p&gt;Or, look, Sebastiano and crew made fastutils apache licensed: &lt;a href=&quot;http://fastutil.dsi.unimi.it/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://fastutil.dsi.unimi.it/&lt;/a&gt;  Has stuff like &lt;a href=&quot;http://fastutil.dsi.unimi.it/docs/it/unimi/dsi/fastutil/longs/Long2ObjectMap.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://fastutil.dsi.unimi.it/docs/it/unimi/dsi/fastutil/longs/Long2ObjectMap.html&lt;/a&gt; (though this not concurrent... would have to sync it)&lt;/p&gt;</comment>
                            <comment id="13209159" author="phabricator@reviews.facebook.net" created="Thu, 16 Feb 2012 06:53:00 +0000"  >&lt;p&gt;mbautin has committed the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5001&quot; title=&quot;Improve the performance of block cache keys&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5001&quot;&gt;&lt;del&gt;HBASE-5001&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Improve the performance of block cache keys (J-D, Lars H; pulling from trunk) &quot;.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D1587&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D1587&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;COMMIT&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/rHBASEEIGHTNINEFBBRANCH1241679&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/rHBASEEIGHTNINEFBBRANCH1241679&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15015982" author="lars_francke" created="Fri, 20 Nov 2015 11:53:26 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12507137" name="5001-0.92.txt" size="51513" author="lhofhansl" created="Tue, 13 Dec 2011 06:35:31 +0000"/>
                            <attachment id="12507091" name="5001-v1.txt" size="50045" author="lhofhansl" created="Mon, 12 Dec 2011 23:13:35 +0000"/>
                            <attachment id="12507106" name="5001-v2.txt" size="51772" author="lhofhansl" created="Tue, 13 Dec 2011 01:01:17 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 11 Dec 2011 02:33:53 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>220282</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i015wv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4727</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>