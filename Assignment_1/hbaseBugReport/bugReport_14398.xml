<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:52:38 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14398/HBASE-14398.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14398] Create the fake keys required in the scan path to avoid copy to byte[]</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14398</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Already we have created some fake keys for the ByteBufferedCells so that we can avoid the copy requried to create fake keys. This JIRA aims to fill up all such places so that the Offheap BBs are not copied to onheap byte[].&lt;/p&gt;</description>
                <environment></environment>
        <key id="12863051">HBASE-14398</key>
            <summary>Create the fake keys required in the scan path to avoid copy to byte[]</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12724166">HBASE-11425</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="ram_krish">ramkrishna.s.vasudevan</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Sep 2015 13:37:03 +0000</created>
                <updated>Mon, 12 Oct 2015 19:40:32 +0000</updated>
                            <resolved>Tue, 29 Sep 2015 11:11:05 +0000</resolved>
                                                    <fixVersion>2.0.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="14740266" author="ram_krish" created="Fri, 11 Sep 2015 06:10:46 +0000"  >&lt;p&gt;This patch tries to avoid copies while creating fake keys particularly when we have more cols and we try to explicitly add columns. &lt;/p&gt;</comment>
                            <comment id="14740289" author="anoop.hbase" created="Fri, 11 Sep 2015 06:39:37 +0000"  >&lt;p&gt;Why we need FirstOnRowColHintByteBufferedCell?  How it is different from FirstOnRowColByteBufferedCell?&lt;/p&gt;</comment>
                            <comment id="14740498" author="hadoopqa" created="Fri, 11 Sep 2015 09:49:32 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12755332/HBASE-14398.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12755332/HBASE-14398.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit fda317cebb5d306cabf1899e05cedb0225b2b62b.&lt;br/&gt;
  ATTACHMENT ID: 12755332&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): &lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15555//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15555//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15555//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15555//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15555//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15555//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15555//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15555//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14740599" author="ram_krish" created="Fri, 11 Sep 2015 11:23:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;Why we need FirstOnRowColHintByteBufferedCell? How it is different from FirstOnRowColByteBufferedCell?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I thought we will have two so that the qArray is byte[]. May be we will wrap qArray in a BB only?&lt;/p&gt;</comment>
                            <comment id="14740660" author="ram_krish" created="Fri, 11 Sep 2015 12:04:55 +0000"  >&lt;p&gt;Removes FirstOnRowColHintByteBufferedcell and allows wrapping the qArray into a BB. Earlier the FirstOnRowColHintByteBufferedcell .getQualByteBuffer was doing that.&lt;/p&gt;</comment>
                            <comment id="14740900" author="hadoopqa" created="Fri, 11 Sep 2015 14:28:47 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12755389/HBASE-14398_1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12755389/HBASE-14398_1.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit c438052cc2280121727d4ae0883f0b76cad5816a.&lt;br/&gt;
  ATTACHMENT ID: 12755389&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 5 zombie test(s): 	at org.apache.hadoop.hbase.client.TestAdmin2.testWALRollWriting(TestAdmin2.java:545)&lt;br/&gt;
	at org.apache.hadoop.hbase.client.TestReplicasClient.testSmallScanWithReplicas(TestReplicasClient.java:606)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15559//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15559//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15559//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15559//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15559//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15559//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15559//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15559//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14741087" author="stack" created="Fri, 11 Sep 2015 16:29:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;Why we need FirstOnRowColHintByteBufferedCell? How it is different from FirstOnRowColByteBufferedCell?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;lol&lt;/p&gt;</comment>
                            <comment id="14741090" author="stack" created="Fri, 11 Sep 2015 16:33:11 +0000"  >&lt;p&gt;Are we doing something wrong that we need all these specialized types?&lt;/p&gt;</comment>
                            <comment id="14741184" author="ram_krish" created="Fri, 11 Sep 2015 17:23:56 +0000"  >&lt;p&gt;We need these special types.  The reason for creating two different ones was that in the FirstOnRowColHintByteBufferedCell we were having the qual passed as an array explicitly for the hint purpose.  We can work around that by wrapping it in a BB and using it as FirstOnRowColByteBufferedCell .&lt;/p&gt;</comment>
                            <comment id="14902532" author="ram_krish" created="Tue, 22 Sep 2015 12:50:53 +0000"  >&lt;p&gt;Ping for reviews.!!!&lt;/p&gt;</comment>
                            <comment id="14902952" author="stack" created="Tue, 22 Sep 2015 16:49:22 +0000"  >&lt;p&gt;Can you say more why these fake keys are saving copies? Don&apos;t we copy pieces of the keys into the &apos;fake&apos; key?&lt;/p&gt;</comment>
                            <comment id="14903007" author="ram_krish" created="Tue, 22 Sep 2015 17:11:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can you say more why these fake keys are saving copies? Don&apos;t we copy pieces of the keys into the &apos;fake&apos; key?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Previoulsy we were copying the pieces of the key to a new byte[] and then forming a KV but with the ts and type faked like MIN or MAX.&lt;br/&gt;
Here we don&apos;t do that, we just create a new object from the actual cell&apos;s key components and create a new Cell object but the ts and type alone are different.  Previously it was a copy and then object creation now only object creation.  &lt;/p&gt;</comment>
                            <comment id="14934570" author="ram_krish" created="Tue, 29 Sep 2015 03:36:52 +0000"  >&lt;p&gt;Ping for reviews!!&lt;/p&gt;</comment>
                            <comment id="14934813" author="anoop.hbase" created="Tue, 29 Sep 2015 07:58:09 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="14935003" author="ram_krish" created="Tue, 29 Sep 2015 11:11:05 +0000"  >&lt;p&gt;Pushed to master. Thanks for the reviews.&lt;/p&gt;</comment>
                            <comment id="14935276" author="hudson" created="Tue, 29 Sep 2015 14:51:40 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6852 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6852/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6852/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14398&quot; title=&quot;Create the fake keys required in the scan path to avoid copy to byte[]&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14398&quot;&gt;&lt;del&gt;HBASE-14398&lt;/del&gt;&lt;/a&gt; - Create the fake keys required in the scan path to avoid copy (ramkrishna: rev d5768d4a50d276cc56a069793e3ba9da2a3277e6)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14936020" author="stack" created="Tue, 29 Sep 2015 22:18:16 +0000"  >&lt;p&gt;+1 too. This is a crazy amount of types. Hopefully we can simplify later.&lt;/p&gt;

&lt;p&gt;One thought I had looking at this ByteBufferedCell Interface is how unwieldy the method names are. getTagsPositionInByteBuffer is a bit of a mouth full. What was the reason that we could not just use the Cell#getTagsOffset method and use its offset as &apos;index&apos; into the backing BB?&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14936457" author="ram_krish" created="Wed, 30 Sep 2015 06:56:08 +0000"  >&lt;p&gt;Thanks Stack.  &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;One thought I had looking at this ByteBufferedCell Interface is how unwieldy the method names are. getTagsPositionInByteBuffer is a bit of a mouth full.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Can this be getXXXBufferOffset()?&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What was the reason that we could not just use the Cell#getTagsOffset method and use its offset as &apos;index&apos; into the backing BB?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This was a long discussion that we had before finalising.  &lt;br/&gt;
The BytebufferedCell, an extension of Cell used in the Server side introduces these new APIs for accessing the offset info on the BBs. Though we can have onheap and offheap backed BB cells, when &lt;br/&gt;
we see that a Cell is backed by onheap Bb we still create a normal Keyvalue only using the BB.array() and BB.arrayOffset() API. So for now there is only one thing to be taken care of - OffheapBB backed Cells.&lt;/p&gt;

&lt;p&gt;Here first of all we don&apos;t have the arrayOffset information and only have the BB&apos;s offset information on from where the Cell would start. Now when we don have specific APIs for BB offsets,&lt;br/&gt;
then if we try to use getXXXArray and getXXXOffset and getXXXBuffer and getXXXOffset what should be returned?&lt;/p&gt;

&lt;p&gt;Then in that case calling getXXXArray() on an offheap cell should always be throwing an exception.  But we don&apos;t want that to happen. Assume if we start throwing exception if getXXXArray() is called on an offheap Cell then we need to change &lt;br/&gt;
its usage throughout the code. You may remeber the hasArray API in Cell and that was spread through out the code in our initial versions.&lt;br/&gt;
So inorder to clearly distinguish the offset information, having specific APIs for array offset and BB offset would be needed. &lt;br/&gt;
Now these changes are confined to CellUtil and CellComparator and there we decide what offset APIs needs to be used based on the cell type.&lt;br/&gt;
Even now on an offheap Cell if getXXXArray() and getXXXOffset() is used we copy the cell&apos;s component and return the offset as 0.  This clear difference we will not be able to make if we don&apos;t have seperate APIs for offset.&lt;br/&gt;
Let us know if you have further queries.&lt;/p&gt;</comment>
                            <comment id="14945962" author="stack" created="Tue, 6 Oct 2015 23:02:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;This was a long discussion that we had before finalising. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah. I remember that one. Seems to be about a topic that is a little different to the question here.&lt;/p&gt;

&lt;p&gt;Why does ByteBufferedCell have to have getFamilyPositionInByteBuffer at all? Why can&apos;t I just call getFamilyOffset on the ByteBufferedCell implementation and it returns me an offset that makes sense on the ByteBuffer returned out of getFamilyByteBuffer? (A Cell can&apos;t be simultaneously onheap and offheap at same time, right)&lt;/p&gt;</comment>
                            <comment id="14946149" author="anoop.hbase" created="Wed, 7 Oct 2015 02:29:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;Why does ByteBufferedCell have to have getFamilyPositionInByteBuffer at all? Why can&apos;t I just call getFamilyOffset on the ByteBufferedCell implementation and it returns me an offset that makes sense on the ByteBuffer returned out of getFamilyByteBuffer?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When the cell is backed by DBB or byte[], we have to support the getFamilyArray() API. So when it is DBB, we have to do copy to a temp byte[]. So when getFamilyOffset() is used along with getFamilyArray(), we have to return 0 as the offset. Whereas the offset to family in get BB, will be a non 0 value.&lt;br/&gt;
We have to support getFamilyArray API on BBCell also. Else we will have to have the hasArray() API.  We had these discussion long back.&lt;/p&gt;</comment>
                            <comment id="14946337" author="stack" created="Wed, 7 Oct 2015 06:17:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;When the cell is backed by DBB or byte[], we have to support the getFamilyArray() API. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We  have to support both? That is the bit I don&apos;t get. Where are there instances of this? I was thinking we&apos;d go one path or the other (byte [] or BB).&lt;/p&gt;</comment>
                            <comment id="14946665" author="anoop.hbase" created="Wed, 7 Oct 2015 10:56:14 +0000"  >&lt;p&gt;For the DBB backed cells, if we throw Exception on getXXXArray() API calls, we will have to do the instance of check every where.  Even when we log an exception.. Else the call will throw exception.. THis will make the entire code base to have the instance checks..    &lt;br/&gt;
For CPs and Filters, if user calls the getXXXArray methods it will be an issue.  Else they have to do instance of check. If Cell had a hasArray() it would have been better.&lt;br/&gt;
SO IMHO it is not good to throw Exception on getXXXArray() APIs..  Yes for perf reasons one should use getXXXByteBuffer() API for BBCell. But not at all supporting that getXXXArray() API wont be good I think&lt;/p&gt;</comment>
                            <comment id="14947221" author="stack" created="Wed, 7 Oct 2015 17:06:00 +0000"  >&lt;p&gt;Thanks Anoop.&lt;/p&gt;

&lt;p&gt;So, BBC will behind the scenes  just copy from offheap to onheap if you use the array methods from Cell. I remember us agreeing that this is how this should work.&lt;/p&gt;

&lt;p&gt;So, Cells &apos;length&apos; methods &amp;#8211; getXXXLength &amp;#8211; works for BBC and for Cell.&lt;/p&gt;

&lt;p&gt;The discussion here is about the offset argument. The getXXXOffset will return one value if backed by an array and another if by an offheap BB.&lt;/p&gt;

&lt;p&gt;I reread the BBC class comment. It is good on how the Interface should be used. Let me add a patch  with some more given the discussion above so you don&apos;t have to re-explain it all to me again (you and Ram).&lt;/p&gt;

&lt;p&gt;So, now, what to call the &apos;offset&apos; method when a BBC? getXXXPosition?  The BB doc talks about position (though it returns it in a method called arrayOffset).?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can this be getXXXBufferOffset()?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Other methods in BBC talk of ByteBuffer. The above shortens it to Buffer only.&lt;/p&gt;

&lt;p&gt;Let me make a patch that folds this helpful feedback from you fellows into javadoc on BBC. Thanks.&lt;/p&gt;</comment>
                            <comment id="14947264" author="anoop.hbase" created="Wed, 7 Oct 2015 17:52:46 +0000"  >&lt;p&gt;getXXXOffset() returns the offset in byte[] returned by getXXXArray() method.  So it should be used with array method only.  &lt;br/&gt;
When getXXXByteBuffer() is used one must use getXXXPositionInBB() method.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Other methods in BBC talk of ByteBuffer. The above shortens it to Buffer only.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What we were thinking is even the other method also we can shorten to getXXXBuffer()&lt;br/&gt;
getTagsBuffer() and getTagsBufferOffset.&lt;/p&gt;</comment>
                            <comment id="14947273" author="stack" created="Wed, 7 Oct 2015 17:58:44 +0000"  >&lt;p&gt;I made &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14573&quot; title=&quot;Edit on the ByteBufferedCell javadoc&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14573&quot;&gt;&lt;del&gt;HBASE-14573&lt;/del&gt;&lt;/a&gt;. See what you fellows think &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; Thanks.&lt;/p&gt;</comment>
                            <comment id="14947347" author="stack" created="Wed, 7 Oct 2015 18:41:48 +0000"  >&lt;p&gt;I think &apos;Buffer&apos; too generic. &apos;ByteBuffer&apos; makes sense since that is what this class is all about. Would getRow, getFamily without the BB be too radical? The fact that we are doing these invocations on a class called BBC provides enough &apos;context&apos; &amp;#8211; its a getRow against a BBC?&lt;/p&gt;

&lt;p&gt;Man... back to getXXXOffset again. Sorry @anoop and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; &amp;#8211; but looking at these offset methods in BBC is doing my head in.&lt;/p&gt;

&lt;p&gt;OK on not doing an instance check when they call getXXXArray &amp;#8211; just do the allocation and copy if its on offheap Cell.&lt;/p&gt;

&lt;p&gt;But, if they call getXXXOffset and it is a BBC, why not give back the BB offset always? If they use it against an array returned from getXXXArray, then let it mess up... break.... IllegalArrayAccessException or whatever. getXXXOffset if BBC should be for the BB... Let it break in CP and Filters, etc.. What you think?&lt;/p&gt;</comment>
                            <comment id="14948092" author="ram_krish" created="Thu, 8 Oct 2015 05:21:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;Would getRow, getFamily without the BB be too radical? The fact that we are doing these invocations on a class called BBC provides enough &apos;context&apos; &#8211; its a getRow against a BBC?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I would still feel having BB in the API is more convincing.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;If they use it against an array returned from getXXXArray, then let it mess up... break.... IllegalArrayAccessException or whatever. getXXXOffset if BBC should be for the BB... Let it break in CP and Filters, etc.. What you think?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So once we start doing it we will break in the write path of compaction itself because the compaction and flushes both follow same write path. So currenlty it is using getXXXArray() with getXXXOffset() and for a BB cell we are copying in case of compactions.  So CPs and filters have to be broken then. After a big discussion internally here when we defined APIs we thought copying is better than breaking and clear javadoc on BBCell should suffice. Because our earlier patches were trying to throw Exceptions and it made the patch much bigger. So still feel copying is better. &lt;/p&gt;</comment>
                            <comment id="14948190" author="anoop.hbase" created="Thu, 8 Oct 2015 07:13:01 +0000"  >&lt;p&gt;IMO also getRowByteBuffer is better than getRow. &lt;br/&gt;
We had getRow() returning byte[] in Cell. In trunk we removed it very recently.&lt;/p&gt;

&lt;p&gt;So Stack, you agree to the idea of not throwing Exception when we call getXXXArray() on a DBB backed cell. So here we will copy and return the byte[].&lt;br/&gt;
Regarding getXXXOffset comment, u mean when the Cell is DBB backed, the user has to assume the offset to be 0 always?  That means again every where we have to have instance of BBCell check.&lt;/p&gt;

&lt;p&gt;One more thing.  We will have to make a BBCell impl with backing on heap BB as well as off heap BB. This is the case of DBE.  So there we will compute the new Key by algo and it will be in a byte[].  The value part will be in an off heap BB.  We dont want to copy the value part.  So what we will do is  make a new Cell impl with key abd value backed by 2 diff data structure.  And so it has to be extending BBCell.   Our read path and comparators have check like if the incoming cell is BBCell, we will use getXXXByteBuffer APIs instead of getXXXArray.   So for the key parts on this cell also, we will use getXXXByteBuffer API.   If we are keeping the ref to key as byte[] type, every call to BB API has to wrap it and so make an Object.  So what we do is keep the ref to key part as BB only by wrapping the key byte[].    So we have a cell with on heap BB backed.    Here the cell is BBCell and when one use getFamilyArray(), he can not assume the offset to be 0.  This will be a non zero value.&lt;/p&gt;

&lt;p&gt;Said all these to explain why we need 2 APIs for offset in byte[] and position in BB.  It can be different in many a cases and no assumptions also possible.&lt;/p&gt;

&lt;p&gt;Regarding reduce the method name length, I think getXXXPosition() is just fine.  This class deals with BB APIs and so when we say position, it is in BB is understood.   Also the name offset suits with array and with BB the term &apos;position&apos; better fits. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14951509" author="stack" created="Sat, 10 Oct 2015 02:20:26 +0000"  >&lt;p&gt;Thank you for entertaining my commentary.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;IMO also getRowByteBuffer is better than getRow. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You have a point. It would match getRowArray up in Cell.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So Stack, you agree to the idea of not throwing Exception when we call getXXXArray() on a DBB backed cell. So here we will copy and return the byte[].&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Regarding getXXXOffset comment, u mean when the Cell is DBB backed, the user has to assume the offset to be 0 always?  That means again every where we have to have instance of BBCell check.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was thinking they would do getXXXOffset and if they&apos;d used getXXXArray and a copy had been made, then it would break horribly. I suppose your point is that we need to smooth the transition so filters and CPs just keep working over offheap (or Cells that are split over more than one BB) if they use the old APIs even if it costs loads. Ok.&lt;/p&gt;

&lt;p&gt;You two have made this argument with me a few times. We should integrate the why into the Interface doc? I can write it up if that&apos;d help.&lt;/p&gt;

&lt;p&gt;Ok on the getXXXPosition. &lt;/p&gt;




</comment>
                            <comment id="14952631" author="anoop.hbase" created="Mon, 12 Oct 2015 04:52:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;You two have made this argument with me a few times. We should integrate the why into the Interface doc? I can write it up if that&apos;d help&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Pls..  that will be great.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Ok on the getXXXPosition.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Can raise a sub task and get it committed. &lt;/p&gt;

&lt;p&gt;Thanks boss.&lt;/p&gt;</comment>
                            <comment id="14953619" author="stack" created="Mon, 12 Oct 2015 19:40:32 +0000"  >&lt;blockquote&gt;&lt;p&gt;We should integrate the why into the Interface doc? I can write it up if that&apos;d help&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I did the below a few days ago. I think its enough to satisfy the above. Hopefully I&apos;ll remember to read it next time I wonder why getFamilyPosition and getFamilyOffset in a Cell backed by ByteBufferedCell (smile)&lt;/p&gt;

&lt;p&gt;&quot;It also has getters of the &lt;b&gt;position&lt;/b&gt; within a ByteBuffer where these&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;field bytes begin. These are needed because a single ByteBuffer may back one or many Cell&lt;/li&gt;
	&lt;li&gt;instances &amp;#8211; it depends on the implementation &amp;#8211; so the ByteBuffer position as returned by&lt;/li&gt;
	&lt;li&gt;{@link ByteBuffer#arrayOffset()}
&lt;p&gt; cannot be relied upon. Also, do not confuse these position&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;methods with the getXXXOffset methods from the super Interface, 
{@link Cell}
&lt;p&gt;; dependent up on&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;implementation, the Cell getXXXOffset methods can return the same value as a call to its&lt;/li&gt;
	&lt;li&gt;equivalent position method from below BUT they can also stray; if a ByteBufferedCell, use the&lt;/li&gt;
	&lt;li&gt;below position methods to find where a field begins.&quot;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12755332" name="HBASE-14398.patch" size="11399" author="ram_krish" created="Fri, 11 Sep 2015 06:10:46 +0000"/>
                            <attachment id="12755389" name="HBASE-14398_1.patch" size="9675" author="ram_krish" created="Fri, 11 Sep 2015 12:04:55 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 11 Sep 2015 06:39:37 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 9 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2jzvz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>