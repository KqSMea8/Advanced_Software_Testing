<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:55:17 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-1655/HBASE-1655.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-1655] Usability improvements to HTablePool</title>
                <link>https://issues.apache.org/jira/browse/HBASE-1655</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;A discussion on the HBase user mailing list (&lt;a href=&quot;http://markmail.org/thread/7leeha56ny5mwecg&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://markmail.org/thread/7leeha56ny5mwecg&lt;/a&gt;) led to some suggested improvements for the org.apache.hadoop.hbase.client.HTablePool class.&lt;/p&gt;

&lt;p&gt;I will be submitting a patch that contains the following changes to HTablePool:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Remove constructors that were not used.&lt;/li&gt;
	&lt;li&gt;Change access to remaining contstructor from public to private to enforce use of the static factory method getPool.&lt;/li&gt;
	&lt;li&gt;Change internal map from TreeMap to HashMap because I couldn&apos;t see any reason it needed to be sorted.&lt;/li&gt;
	&lt;li&gt;Remove HBaseConfiguration and tableName member variables since they aren&apos;t really properties of the pool itself. They are associated with the HTable that should get instantiated when one is requested from the pool, but not already there.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12430415">HBASE-1655</key>
            <summary>Usability improvements to HTablePool</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="kweiner">Ken Weiner</assignee>
                                    <reporter username="kweiner">Ken Weiner</reporter>
                        <labels>
                    </labels>
                <created>Tue, 14 Jul 2009 19:52:59 +0000</created>
                <updated>Sun, 13 Sep 2009 22:24:50 +0000</updated>
                            <resolved>Fri, 17 Jul 2009 19:26:30 +0000</resolved>
                                                    <fixVersion>0.20.0</fixVersion>
                                    <component>Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12731228" author="kweiner" created="Wed, 15 Jul 2009 00:25:11 +0000"  >&lt;p&gt;A patch with modified HTablePool is now attached.&lt;br/&gt;
I also modified code in the stargate package that was using HTablePool.&lt;/p&gt;</comment>
                            <comment id="12731235" author="streamy" created="Wed, 15 Jul 2009 01:01:50 +0000"  >&lt;p&gt;Patch looks pretty good.  Small nitpicky issues with some needless reorderings of stuff and also some tabbing oddities.  Can be fixed on commit.&lt;/p&gt;

&lt;p&gt;I remember why we&apos;re using TreeMap now instead of HashMap.  HashMap with byte[] as a key does not work with default comparator, and you cannot pass one in.  There is no real downside to using TreeMap unless you have hundreds or thousands of tables, and even then logarithmic on the client-side on the order of 100-1000 is negligible.  More efficient in memory but a little dirtier on the GC... however this is almost exclusively client-side (and there&apos;s ever only one) so really makes no difference IMO.  So, back to TreeMap.&lt;/p&gt;

&lt;p&gt;The API seems to have grown quite a bit.  Do we need all these permutations of getTable() ?  Could we drop the String taking ones besides the simplest one?  (This is why we don&apos;t support String in most of the HBase API now, leads to very long and ugly APIs)&lt;/p&gt;

&lt;p&gt;The default getTable(byte [] tableName) also requires instantiating a new HBaseConfiguration() each time internally, even if we are reusing an existing HTable... Whether there is a significant overhead or not to that, we should avoid it when unnecessary.&lt;/p&gt;

&lt;p&gt;Typical usage is probably to not supply your own HBC, so if someone wants that level of control, give them the ability to build the Pool themselves rather than expose the friendlier, higher-level methods with all the different ways to instantiate the pool.&lt;/p&gt;

&lt;p&gt;Blah, this is better said in a new patch....&lt;/p&gt;</comment>
                            <comment id="12731236" author="streamy" created="Wed, 15 Jul 2009 01:14:59 +0000"  >&lt;p&gt;This doesn&apos;t include any stargate stuff, only issues there are the tab issues, reordering, and whether to expose the pools or not.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure we want to remove the ability to work with HTablePool directly or not.&lt;/p&gt;

&lt;p&gt;This patch re-publics a bunch of stuff, cuts down on the API quite a bit, and reduces re-instantiation of HBC when getting pools that already exist and will always reuse the original when getting tables.  We should definitely keep that.&lt;/p&gt;

&lt;p&gt;Otherwise the changes are open to discussion, I&apos;m not particularly sold on my own patch, just providing it so we have a point of reference for discussion.&lt;/p&gt;

&lt;p&gt;The biggest thing to figure out is whether we even expose HTablePool non-statically to the user.  If not, we go down the path of a much longer easy-to-use API...&lt;/p&gt;

&lt;p&gt;/me sleeping on it&lt;/p&gt;</comment>
                            <comment id="12731238" author="streamy" created="Wed, 15 Jul 2009 01:16:55 +0000"  >&lt;p&gt;Ken, added you as a contributor so you can now assign yourself issues and such.&lt;/p&gt;</comment>
                            <comment id="12731271" author="kweiner" created="Wed, 15 Jul 2009 05:03:47 +0000"  >&lt;p&gt;A few questions/comments on the comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why does the key to a HashMap need a comparator?&lt;/li&gt;
	&lt;li&gt;I much prefer the type of String vs byte[] for the tableName throughout all the method signatures and as a key to the internal map, but I tried to keep it as-is because it seemed to fit more with other HBase code. Can we just change it to String throughout and go back to the HashMap?&lt;/li&gt;
	&lt;li&gt;I am not a fan of the current API either.  I&apos;d much prefer that the HTablePool be instantiated by a client and we get rid of the static methods and static Map altogether.  This fits in much more nicely for people like me who are using IoC containers like Spring.  It also allows the ability to have multiple HTablePool instances, maybe each with their own configuration (which is currently just the max size).&lt;/li&gt;
	&lt;li&gt;Sorry about the tab/spaces issue.  I didn&apos;t clean it up carefully enough.&lt;/li&gt;
	&lt;li&gt;Sorry about the reordering of imports.   I use Eclipse which does this automatically and I was too lazy to try to restore the order back to the way it was.  I&apos;ll try harder next time.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;So what is the next step?  Should I make a new patch with an HTablePool that is meant to be instantiated and w/o the static methods?&lt;/p&gt;</comment>
                            <comment id="12731505" author="streamy" created="Wed, 15 Jul 2009 15:18:55 +0000"  >&lt;p&gt;I agree on most of your points... We have an internal HTable pooler (we call it HBaseRef) that works more like you describe.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;When using byte[] in a HashMap it will actually end up acting on the address of the byte[] rather than the bytes contained within.  You have to use a wrapping class that would yield hashCode() and equals() methods if you want byte[] as the key in a HashMap.&lt;/li&gt;
	&lt;li&gt;We can switch it all to String, but underneath these are byte[]s so it&apos;s just more consistent to actually use byte[].  If we can keep the API as small as possible, let&apos;s just include both.&lt;/li&gt;
	&lt;li&gt;There&apos;s no reason we can&apos;t do both of these things.  Make the constructor public and you can instantiate them manually.  I guess in your framework you might end up re-instantiating the static map multiple times?  The reason I like it is because you don&apos;t have to pass the pool around your code, you can always just reference the static instance of everything.  My vote would be to try to do both.  If we end up&lt;/li&gt;
	&lt;li&gt;No worries on the little stuff... all part of the initiation process &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Do you think there is a way we could retain the static stuff and still allow HTablePool to be instantiable?  We should just write a nice long class comment once we settle on the design with the different ways to use it, etc...&lt;/p&gt;

&lt;p&gt;I would vote to keep the static stuff as short as possible, maybe just 2 static methods to get an HTable (w/ and w/o the size param). No statics to get the HTablePools.  You have to instantiate then and that&apos;s where you would be able to set manual HBC and such.&lt;/p&gt;

&lt;p&gt;The other thing is to make sure we aren&apos;t constructing HBCs constantly.&lt;/p&gt;

&lt;p&gt;Good stuff, Ken.  Thanks for figuring this.&lt;/p&gt;</comment>
                            <comment id="12731574" author="kweiner" created="Wed, 15 Jul 2009 17:29:36 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Even though TreeMap uses the comparator rather than the equals method to compare keys, using a byte[] as the key seems to break the contract of a java.util.Map.  The last paragraph of the &lt;a href=&quot;http://java.sun.com/javase/6/docs/api/java/util/Map.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Map API&lt;/a&gt; says that impls are free to avoid calling equals() but the containsKey(Object key) method should &quot;return true if and only if this map contains a mapping for a key k such that (key==null ? k==null : key.equals(k))&quot;.  As you mentioned, you&apos;d need a byte[] wrapper in order to be compliant.  So a byte[] key will work in a TreeMap (and not in a HashMap), but we&apos;d break the Map contract.  Seems better to just use String and HashMap which works well and satisfies the Map contract.&lt;/li&gt;
	&lt;li&gt;Allowing both the static methods and the public construction would bring me back to the complaint I had originally with this class. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  It becomes confusing for a user trying to quickly understand how he/she is supposed to interact with this class.  I guess this can all be explained away with documentation, but, it doesn&apos;t feel &quot;good&quot;.&lt;/li&gt;
	&lt;li&gt;Also, yes, there would be a problem with re-instantiating the static map multiple times, but this could be prevented by implementing a Singleton pattern so that the static access operates on an internal singleton instance with a member Map rather than a static Map.&lt;/li&gt;
	&lt;li&gt;I agree that there is no reason to construct HBC&apos;s for each invocation. An internal HBC instance can be constructed and reused.&lt;/li&gt;
	&lt;li&gt;Is there a checkstyle.xml file for HBase?  That would make it easy to check my code for formatting problems before submitting patches.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12731596" author="stack" created="Wed, 15 Jul 2009 18:02:47 +0000"  >&lt;p&gt;.bq So a byte[] key will work in a TreeMap (and not in a HashMap), but we&apos;d break the Map contract. Seems better to just use String and HashMap which works well and satisfies the Map contract.&lt;/p&gt;

&lt;p&gt;Looking at the TreeMap equals implementation, yes, it breaks the above contract for Map.&lt;/p&gt;

&lt;p&gt;We&apos;re impure (insert lots of sack cloth and ashes, self-flagellation, etc., here &amp;#8211; smile).&lt;/p&gt;

&lt;p&gt;We are zealous about using byte [] everywhere.  As Jon allows above, client-side, we can relax some.&lt;/p&gt;

&lt;p&gt;IMO, we should not be allowing public construction and static methods.&lt;/p&gt;

&lt;p&gt;+1 on Singleton to prevent multiple instantiations.&lt;/p&gt;

&lt;p&gt;There is no checkstyle (maybe there is one up in hadoop).  In general 80 characters per line and two spaces for tab.  Anything else we&apos;ll take.  Don&apos;t worry about it too much.&lt;/p&gt;</comment>
                            <comment id="12732147" author="streamy" created="Thu, 16 Jul 2009 20:50:56 +0000"  >&lt;p&gt;Moved into 0.20.0, we need to have a concise/consistent story for this client-facing class.&lt;/p&gt;</comment>
                            <comment id="12732191" author="streamy" created="Thu, 16 Jul 2009 21:46:27 +0000"  >&lt;p&gt;Rewrite of, and commented version of HTablePool, worked on by Ken and I yesterday.  Discussion to follow from Ken &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12732198" author="kweiner" created="Thu, 16 Jul 2009 22:04:55 +0000"  >&lt;p&gt;Attaching patch file reflecting several discussions about the best design for the HTablePool.&lt;/p&gt;</comment>
                            <comment id="12732204" author="kweiner" created="Thu, 16 Jul 2009 22:13:39 +0000"  >&lt;p&gt;I&apos;ve submitted another patch, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1655&quot; title=&quot;Usability improvements to HTablePool&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1655&quot;&gt;&lt;del&gt;HBASE-1655&lt;/del&gt;&lt;/a&gt;-v3.patch, that reflects a different approach taken to improve HTablePool.  In the new approach, there will be no static methods at all.  Instead, the normal usage of the class will be to instantiate an HTablePool directly and use the getTable and putTable methods to get an HTable and return an HTable to the pool.  The pool class will automatically instantiate a new HTable in the case that no HTable for the given table name is in the pool OR if the internal pool for that table name is full (has more elements than its configured max size).  The default max size is Integer.MAX_VALUE.&lt;/p&gt;

&lt;p&gt;While we lose the convenience of calling static methods, we gain a design with less code that is easy to understand, easy to use in an IoC container, and easy to unit test.&lt;/p&gt;

&lt;p&gt;This patch also includes a small modification to HTable that allows an instantiation to HTable with a null HBaseConfiguration object.  This makes it possible to unit test classes such as HTablePool that internally use an HTable without requiring an environment in which the HTable can get and use a connection.&lt;/p&gt;

&lt;p&gt;Finally, this patch includes modifications to the stargate package reflecting the new HTablePool API.&lt;/p&gt;

&lt;p&gt;Let me know if this is suitable for inclusion in the project.  Thanks to Jon Gray and Stack for their help and input.&lt;/p&gt;</comment>
                            <comment id="12732217" author="streamy" created="Thu, 16 Jul 2009 22:46:15 +0000"  >&lt;p&gt;I&apos;m +1 on the changes described.  I&apos;m not a big fan of putting a big comment in the HTable constructor javadoc about being able to pass it a null.&lt;/p&gt;

&lt;p&gt;IMO Something like that belongs in a // comment in the code, not exposed in the javadoc of the most client-facing class we have.  It&apos;s for developers, not users.  Users who pass a null HBC will soon learn that this will not work, why do they care about unit testing?&lt;/p&gt;</comment>
                            <comment id="12732219" author="apurtell" created="Thu, 16 Jul 2009 22:48:16 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Also, I agree with jgray about leaving out mention of allowing nulls in the HTable constructor.&lt;/p&gt;</comment>
                            <comment id="12732679" author="kweiner" created="Fri, 17 Jul 2009 19:04:19 +0000"  >&lt;p&gt;+1 on removing the comment about allowing nulls.  Your rational makes sense to me.&lt;/p&gt;

&lt;p&gt;Do I need to make a new patch, or can the commiter just remove the comments from HTable after applying the current patch?&lt;/p&gt;</comment>
                            <comment id="12732688" author="streamy" created="Fri, 17 Jul 2009 19:15:13 +0000"  >&lt;p&gt;Will take care of it on commit.&lt;/p&gt;</comment>
                            <comment id="12732692" author="streamy" created="Fri, 17 Jul 2009 19:26:30 +0000"  >&lt;p&gt;Committed after receiving +1s from apurtell (original author) and ken.  New test added passes.&lt;/p&gt;

&lt;p&gt;Removed HTable comments during commit.&lt;/p&gt;

&lt;p&gt;Thanks, Ken!&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12413740" name="HBASE-1655-HTablePool-commented.patch" size="6899" author="streamy" created="Thu, 16 Jul 2009 21:46:27 +0000"/>
                            <attachment id="12413507" name="HBASE-1655-v2-partial.patch" size="7575" author="streamy" created="Wed, 15 Jul 2009 01:14:59 +0000"/>
                            <attachment id="12413748" name="HBASE-1655-v3.patch" size="24121" author="kweiner" created="Thu, 16 Jul 2009 22:04:54 +0000"/>
                            <attachment id="12413504" name="HBASE-1655.patch" size="19882" author="kweiner" created="Wed, 15 Jul 2009 00:25:11 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 15 Jul 2009 01:01:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32218</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 22 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hein:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>99614</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>