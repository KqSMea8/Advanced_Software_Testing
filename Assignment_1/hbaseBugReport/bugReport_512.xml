<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:44:56 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-512/HBASE-512.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-512] Add configuration for global aggregate memcache size</title>
                <link>https://issues.apache.org/jira/browse/HBASE-512</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Currently, we have a configuration parameter for the size a Memcache must reach before it is flushed. This leads to pretty even sized mapfiles when flushes run, which is nice. However, as noted in the parent issue, we can often get to a point where we run out of memory because too much data is hanging around in Memcaches.&lt;/p&gt;

&lt;p&gt;I think that we should add a new configuration parameter that governs the total amount of memory that the region server should spend on Memcaches. This would have to be some number less than the heap size - we&apos;ll have to discover the proper values through experimentation. Then, when a put comes in, if the global aggregate size of all the Memcaches for all the stores is at the threshold, then we should block the current and any subsequent put operations from completing until forced flushes cause the memory usage to go back down to a safe level. The existing strategy for triggering flushes will still be in play, just augmented with this blocking behavior.&lt;/p&gt;

&lt;p&gt;This approach has the advantage of helping us avoid OOME situations by warning us well in advance of overflow. Additionally, it becomes something of a performance tuning knob, allowing you to allocate more memory to improve write performance. This is superior to the previously suggested PhantomReference approach because that would possibly causes us to bump into further OOMEs while we&apos;re trying to flush to avoid them. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12390975">HBASE-512</key>
            <summary>Add configuration for global aggregate memcache size</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12386395">HBASE-70</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bryanduxbury">Bryan Duxbury</assignee>
                                    <reporter username="bryanduxbury">Bryan Duxbury</reporter>
                        <labels>
                    </labels>
                <created>Thu, 13 Mar 2008 16:46:51 +0000</created>
                <updated>Fri, 22 Aug 2008 21:13:11 +0000</updated>
                            <resolved>Tue, 8 Apr 2008 00:07:16 +0000</resolved>
                                                    <fixVersion>0.2.0</fixVersion>
                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12581406" author="jimk" created="Sun, 23 Mar 2008 17:39:41 +0000"  >&lt;p&gt;Is this a blocker for 0.1.0?&lt;br/&gt;
Can it be incorporated in 0.1.1?&lt;/p&gt;</comment>
                            <comment id="12581414" author="bryanduxbury" created="Sun, 23 Mar 2008 18:35:42 +0000"  >&lt;p&gt;Was meant to be fixed in 0.2 not 0.1.&lt;/p&gt;</comment>
                            <comment id="12586484" author="bryanduxbury" created="Mon, 7 Apr 2008 18:00:23 +0000"  >&lt;p&gt;First draft. There&apos;s a new test, TestGlobalMemcacheLimit, that checks this behavior. This test passes, and I&apos;m running the rest of the suite right now.&lt;/p&gt;</comment>
                            <comment id="12586485" author="bryanduxbury" created="Mon, 7 Apr 2008 18:00:40 +0000"  >&lt;p&gt;Please review.&lt;/p&gt;</comment>
                            <comment id="12586497" author="jimk" created="Mon, 7 Apr 2008 19:00:53 +0000"  >&lt;p&gt;LocalHBaseCluster: missing javadoc for public method getRegionServer.&lt;/p&gt;

&lt;p&gt;HRegionServer: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;concurrency. Change
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      biggestMemcacheRegion.flushcache();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      getCacheFlushListener().flushRequested(biggestMemcacheRegion);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;type safety. Change
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    SortedMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;, HRegion&amp;gt; sortedRegions = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TreeMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;, HRegion&amp;gt;(
      &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Comparator() {
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; compare(&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; a, &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; b) {
          &lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt; a_l = (&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;)a;
          &lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt; b_l = (&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;)b;
          &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1 * a_l.compareTo(b_l);
        }
      }
    );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    SortedMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;, HRegion&amp;gt; sortedRegions = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TreeMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;, HRegion&amp;gt;(
      &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Comparator&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;&amp;gt;() {
        &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; compare(&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt; a, &lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt; b) {
          &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1 * a.compareTo(b);
        }
      }
    );
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;HStore, HMemcache: only whitespace differences. Need to be included in patch?&lt;/p&gt;

&lt;p&gt;TestGlobalMemcacheLimit:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;unused:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Log LOG =
    LogFactory.getLog(TestGlobalMemcacheLimit.class.getName());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;unused imports:&lt;br/&gt;
  import org.apache.commons.logging.Log;&lt;br/&gt;
  import org.apache.commons.logging.LogFactory;&lt;br/&gt;
  import org.apache.hadoop.hbase.HConstants;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12586517" author="bryanduxbury" created="Mon, 7 Apr 2008 20:09:41 +0000"  >&lt;p&gt;Fixed the &quot;type safety&quot; and unused imports issue.&lt;/p&gt;

&lt;p&gt;As to the concurrency point raised, there was indeed a concurrency problem, but the suggested solution won&apos;t work because it would only queue regions to be flushed eventually. That&apos;s not a strong enough guarantee in terms of reducing memcache usage immediately. So, I added the flushImmediately method to Flusher that allows you to immediately and safely cause a region to flush. &lt;/p&gt;

&lt;p&gt;All unit tests still pass.&lt;/p&gt;</comment>
                            <comment id="12586535" author="jimk" created="Mon, 7 Apr 2008 21:04:08 +0000"  >&lt;p&gt;LocalHBaseCluster: no javadoc for public method getRegionServer&lt;/p&gt;

&lt;p&gt;-1 on flushImmediately. &lt;/p&gt;

&lt;p&gt;When called from HRegionServer.flushSomeRegions, you are tying up a Server thread processing a batchUpdate for the duration of one or more cache flushes.&lt;/p&gt;

&lt;p&gt;The whole point of queuing requests is so the cacheFlusher can do its thing while other threads continue. What would happen if HRegionServer called flushImmediately while the Flusher was already flushing the same region?&lt;/p&gt;

&lt;p&gt;How about adding a &quot;high priority&quot; queue, that the flusher checks before the normal flush queue?&lt;/p&gt;</comment>
                            <comment id="12586544" author="bryanduxbury" created="Mon, 7 Apr 2008 21:15:08 +0000"  >&lt;p&gt;The whole point of this issue is to tie up a server thread - in fact all of them - while we wait for memory usage to go down. The objective is to make it so that in situations like the sequential performance evaluation, region servers will not take on so many puts that they&apos;ll explode. &lt;/p&gt;

&lt;p&gt;If flushImmediately was called on a region that was already being flushed, then the flush lock would be locked, and flushImmediately would block until it acquired the lock. It would then find that the region didn&apos;t need to be flushed (assuming HRegion.flushcache() has the smarts to do that). &lt;/p&gt;

&lt;p&gt;Adding a &quot;high priority queue&quot; would make some flushes happen faster, but not immediately, and not in a fashion that blocks the region server from taking on more puts. &lt;/p&gt;</comment>
                            <comment id="12586578" author="bryanduxbury" created="Mon, 7 Apr 2008 22:50:48 +0000"  >&lt;p&gt;Changes discussed with Jim.&lt;/p&gt;</comment>
                            <comment id="12586591" author="jimk" created="Mon, 7 Apr 2008 23:22:48 +0000"  >&lt;p&gt;Much better overall.&lt;/p&gt;

&lt;p&gt;Minor things:&lt;br/&gt;
Flusher.java&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;flushSomeRegions does not throw IOException.&lt;/li&gt;
	&lt;li&gt;consequently reclaimMemcacheMemory does not throw IOException&lt;br/&gt;
remove both throws clauses.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;HRegionServer&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;unused imports: java.util.
{SortedMap, Comparator}&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Otherwise +!&lt;/p&gt;

&lt;p&gt;Good Job!&lt;/p&gt;</comment>
                            <comment id="12586602" author="bryanduxbury" created="Tue, 8 Apr 2008 00:07:16 +0000"  >&lt;p&gt;Committed to trunk.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12379593" name="512-v2.patch" size="15632" author="bryanduxbury" created="Mon, 7 Apr 2008 20:09:41 +0000"/>
                            <attachment id="12379611" name="512-v3.patch" size="16715" author="bryanduxbury" created="Mon, 7 Apr 2008 22:50:48 +0000"/>
                            <attachment id="12379584" name="512.patch" size="11926" author="bryanduxbury" created="Mon, 7 Apr 2008 18:00:22 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 23 Mar 2008 17:39:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31734</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 37 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0h7r3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98518</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>