<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:12:39 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10322/HBASE-10322.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10322] Strip tags from KV while sending back to client on reads</title>
                <link>https://issues.apache.org/jira/browse/HBASE-10322</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Right now we have some inconsistency wrt sending back tags on read. We do this in scan when using Java client(Codec based cell block encoding). But during a Get operation or when a pure PB based Scan comes we are not sending back the tags.  So any of the below fix we have to do&lt;br/&gt;
1. Send back tags in missing cases also. But sending back visibility expression/ cell ACL is not correct.&lt;br/&gt;
2. Don&apos;t send back tags in any case. This will a problem when a tool like ExportTool use the scan to export the table data. We will miss exporting the cell visibility/ACL.&lt;br/&gt;
3. Send back tags based on some condition. It has to be per scan basis. Simplest way is pass some kind of attribute in Scan which says whether to send back tags or not. But believing some thing what scan specifies might not be correct IMO. Then comes the way of checking the user who is doing the scan. When a HBase super user doing the scan then only send back tags. So when a case comes like Export Tool&apos;s the execution should happen from a super user.&lt;/p&gt;

&lt;p&gt;So IMO we should go with #3.&lt;br/&gt;
Patch coming soon.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12688432">HBASE-10322</key>
            <summary>Strip tags from KV while sending back to client on reads</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="anoop.hbase">Anoop Sam John</assignee>
                                    <reporter username="anoop.hbase">Anoop Sam John</reporter>
                        <labels>
                    </labels>
                <created>Sun, 12 Jan 2014 06:59:20 +0000</created>
                <updated>Sat, 21 Feb 2015 23:33:40 +0000</updated>
                            <resolved>Wed, 22 Jan 2014 07:32:55 +0000</resolved>
                                    <version>0.98.0</version>
                                    <fixVersion>0.98.0</fixVersion>
                    <fixVersion>0.99.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13868973" author="anoop.hbase" created="Sun, 12 Jan 2014 09:00:56 +0000"  >&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/16810/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/16810/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13868995" author="hadoopqa" created="Sun, 12 Jan 2014 10:25:24 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12622534/HBASE-10322.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12622534/HBASE-10322.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12622534&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 24 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +          assertEquals(3L, Bytes.toLong(kv.getValueArray(), kv.getValueOffset(), kv.getValueLength()));&lt;br/&gt;
+          increment.add(new KeyValue(row1, f, q, 1234L, v, new Tag[] &lt;/p&gt;
{ new Tag((byte) 1, &quot;tag2&quot;) }));&lt;br/&gt;
+          assertEquals(5L, Bytes.toLong(kv.getValueArray(), kv.getValueOffset(), kv.getValueLength()));&lt;br/&gt;
+          increment.add(new KeyValue(row2, f, q, 1234L, v, new Tag[] { new Tag((byte) 1, &quot;tag2&quot;) }
&lt;p&gt;));&lt;br/&gt;
+          assertEquals(4L, Bytes.toLong(kv.getValueArray(), kv.getValueOffset(), kv.getValueLength()));&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8392//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13869026" author="hadoopqa" created="Sun, 12 Jan 2014 12:21:20 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12622539/HBASE-10322.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12622539/HBASE-10322.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12622539&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 24 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8393//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13869356" author="apurtell" created="Mon, 13 Jan 2014 08:19:48 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13870126" author="stack" created="Mon, 13 Jan 2014 23:40:07 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;final CellScanner cellScanner)&lt;/li&gt;
	&lt;li&gt;throws IOException {&lt;br/&gt;
+      final CellScanner cellScanner, final boolean isClientContext) throws IOException {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The above is from a class named IPCUtil and the method is buildCellBlock.   Passing a flag named isClientContext seems odd to me.  Why does IPCUtil or buildCellBlock care whether client or server context?  Or rather, it should not have to care.  Why not pass in an encoder that does client encoding rather than do this passing of a flag.&lt;/p&gt;

&lt;p&gt;isClientContext is the wrong name for such a flag.  It should be clientContext.  isClientContext is the name of the method that would check the clientContext data member setting.&lt;/p&gt;

&lt;p&gt;bbias&lt;/p&gt;</comment>
                            <comment id="13870330" author="anoop.hbase" created="Tue, 14 Jan 2014 02:42:48 +0000"  >&lt;p&gt;Thanks Stack.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Or rather, it should not have to care. Why not pass in an encoder that does client encoding rather than do this passing of a flag.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That seems very much valid for me too..  Why not done is we need OutputStream to be passed for the creation of the Encoder. (Compressed or uncompressed). All these common logic is moved inside the IPCUtil now..  Passing in Encoder will make us to do this stuff out in RpcClient and RpcServer. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  So we can pass in boolean only?  Will change the variable name (and in other places also)&lt;/p&gt;</comment>
                            <comment id="13870441" author="stack" created="Tue, 14 Jan 2014 06:34:23 +0000"  >&lt;p&gt;Let me continue the review Anoop (sorry took a while to get back here):&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-        ByteBuffer cellBlock = ipcUtil.buildCellBlock(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.codec, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.compressor, call.cells);
+        ByteBuffer cellBlock = ipcUtil
+            .buildCellBlock(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.codec, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.compressor, call.cells, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above is in RpcClient.  Can the Codec be a client codec rather than pass a &apos;true&apos; for client context?  (Just asking....)&lt;/p&gt;

&lt;p&gt;This looks good:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (RequestContext.isSuperUserRequest()) {
+      kvbuilder.setTags(ZeroCopyLiteralByteString.wrap(kv.getTagsArray(), kv.getTagsOffset(),
+          kv.getTagsLength()));
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;.... as long as that call to isSuperUserRequest is cheap!!!!&lt;/p&gt;

&lt;p&gt;Is this call inexpensive?&lt;/p&gt;

&lt;p&gt;+    if (cell.hasTags()) {&lt;/p&gt;


&lt;p&gt;What is this?&lt;/p&gt;

&lt;p&gt;+  public static long oswrite(final KeyValue kv, final OutputStream out, final boolean withTags)&lt;/p&gt;

&lt;p&gt;You pass a flag if you want tags written?  This saves a KV copy I&apos;d imagine? If so, that is good.&lt;/p&gt;

&lt;p&gt;Now we never write tags in CellCodec?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;// Write tags&lt;/li&gt;
	&lt;li&gt;write(cell.getTagsArray(), cell.getTagsOffset(), cell.getTagsLength());&lt;br/&gt;
+      // TODO writing tags can be implemented once we do connection negotiation work&lt;br/&gt;
       // MvccVersion&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;How are we going to do the following in a backward compatible way?&lt;/p&gt;

&lt;p&gt;+      // TODO writing tags can be implemented once we do connection negotiation work&lt;/p&gt;

&lt;p&gt;Are we going to up the rpc version number?&lt;/p&gt;

&lt;p&gt;It is odd that CellCodec Interface knows about &apos;client&apos;:&lt;/p&gt;

&lt;p&gt;+  public Decoder getClientDecoder(InputStream is) {&lt;/p&gt;

&lt;p&gt;It shouldn&apos;t have to.&lt;/p&gt;

&lt;p&gt;Ditto for getServerDecoder.&lt;/p&gt;

&lt;p&gt;Codec should know nothing about client and server.&lt;/p&gt;

&lt;p&gt;The below seems wrong to me:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Decoder getDecoder(InputStream is);&lt;/li&gt;
	&lt;li&gt;Encoder getEncoder(OutputStream os);&lt;br/&gt;
+  Decoder getClientDecoder(InputStream is);&lt;br/&gt;
+  Encoder getClientEncoder(OutputStream os);&lt;br/&gt;
+  Decoder getServerDecoder(InputStream is);&lt;br/&gt;
+  Encoder getServerEncoder(OutputStream os);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This also seems &apos;off&apos;:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;public KeyValueEncoder(final OutputStream out) {&lt;br/&gt;
+    private final boolean isClientContext;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Fix the below text:&lt;/p&gt;

&lt;p&gt;+ * will be &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt;. The CallRunner class before it a call and then on&lt;/p&gt;

&lt;p&gt;It is unorthodox in the hbase codebase having data members midway down the class:&lt;/p&gt;

&lt;p&gt;+  private User user;&lt;br/&gt;
+  private boolean isSuperUser = false;&lt;br/&gt;
+  private InetAddress remoteAddress;&lt;br/&gt;
+  // indicates we&apos;re within a RPC request invocation&lt;br/&gt;
+  private boolean inRequest;&lt;/p&gt;

&lt;p&gt;On the below:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;CallRunner(final RpcServerInterface rpcServer, final Call call, UserProvider userProvider) {&lt;br/&gt;
+  CallRunner(final RpcServerInterface rpcServer, final Call call, User user, boolean isSuperUser) {&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;...can we not pass in some object that contains User info and whether or not it is super user rather than pass User and super user separately?  (It should be called superUser, not isSuperUser).&lt;/p&gt;

&lt;p&gt;RequestContext no longer takes service (see below)?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;RequestContext.set(userProvider.create(call.connection.user), RpcServer.getRemoteIp(),&lt;/li&gt;
	&lt;li&gt;call.connection.service);&lt;br/&gt;
+        InetAddress remoteAddress = RpcServer.getRemoteIp();&lt;br/&gt;
+        RequestContext.set(user, isSuperUser, remoteAddress);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Should this stuff below be in a finally?&lt;/p&gt;

&lt;p&gt;+      RequestContext.clear();&lt;/p&gt;

&lt;p&gt;Yeah, this seems wrong Anoop:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ipcUtil.buildCellBlock(this.connection.codec, this.connection.compressionCodec, cells);&lt;br/&gt;
+        ByteBuffer cellBlock = ipcUtil.buildCellBlock(this.connection.codec,&lt;br/&gt;
+            this.connection.compressionCodec, cells, false);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The bit where it is passing flag if server or client.  Can this not be encapsulated inside in the codec?&lt;/p&gt;

&lt;p&gt;Pardon me Anoop but I don&apos;t like the way this is done.  This may the only way to implement it but I&apos;d like to hear argument why so and why we can&apos;t encapsulate the encode/decode in the codec implementation rather than leak client/server context beyond codec&apos;ing.&lt;/p&gt;

&lt;p&gt;Good stuff Anoop.&lt;/p&gt;</comment>
                            <comment id="13870491" author="apurtell" created="Tue, 14 Jan 2014 07:46:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;Pardon me Anoop but I don&apos;t like the way this is done.  This may the only way to implement it but I&apos;d like to hear argument why so and why we can&apos;t encapsulate the encode/decode in the codec implementation rather than leak client/server context beyond codec&apos;ing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m fine with holding off the RC until you guys are both good here. Edit: Just in case the tone doesn&apos;t come through the text, I mean there&apos;s enough time as needed to work this into shape as far as I am concerned.&lt;/p&gt;</comment>
                            <comment id="13871455" author="stack" created="Wed, 15 Jan 2014 01:02:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;1. Send back tags in missing cases also. But sending back visibility expression/ cell ACL is not correct.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is tough.  The Visibility tags are managed by CPs.  When they are not present, you&apos;d like to not return them?  Are tags grouped?  Don&apos;t send back system tags?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;2. Don&apos;t send back tags in any case. This will a problem when a tool like ExportTool use the scan to export the table data. We will miss exporting the cell visibility/ACL.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can we check perms of the client doing the export?  If they have access to &apos;system&apos; tags, export them?  We&apos;d have a ACLCheckingCodec?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;3. Send back tags based on some condition. It has to be per scan basis. Simplest way is pass some kind of attribute in Scan which says whether to send back tags or not. But believing some thing what scan specifies might not be correct IMO. Then comes the way of checking the user who is doing the scan. When a HBase super user doing the scan then only send back tags. So when a case comes like Export Tool&apos;s the execution should happen from a super user.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Should be super user or some super user-like group if they want tags; else they don&apos;t get them?&lt;/p&gt;</comment>
                            <comment id="13871492" author="apurtell" created="Wed, 15 Jan 2014 01:32:55 +0000"  >&lt;p&gt;Our bottom line, in my opinion, is that tags don&apos;t end up in the hands of those who shouldn&apos;t see them.&lt;/p&gt;

&lt;p&gt;The rock bottom simplest way to do this is to just not support tags in RPC codecs. Maybe we can have a separate class that keeps them for the Export tool specifically? Import is no problem if the user, presumably privileged, is building HFiles and therefore the cells within them directly. Accumulo has the same approach to whole file imports - no checking done, YMMV.&lt;/p&gt;
</comment>
                            <comment id="13871598" author="ram_krish" created="Wed, 15 Jan 2014 03:36:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;The rock bottom simplest way to do this is to just not support tags in RPC codecs&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;But from client to server it should be supported and in the WAL part it should be supported both ways.  for export tool alone how to identify that the client is doing an export?  We ended up discussing all this and came up with a patch. &lt;br/&gt;
Another suggestion atleast to avoid changes to the codec part is to have an init() in the Codec.java.  So once the codec is instantiated we could set this flag as true or false based on client or server.  &lt;br/&gt;
So for server if the flag says false then the tags are not sent back but for client it is always written.  This involves changes to the Codec.java, introduces an init() method and decision is taken based on what is set on this init method.  We have a patch for this, but again it does not do completely what Stack wants.  Only a part of what Stack wants is solved by that. &lt;br/&gt;
Anyway the User related things are just same as in the exisitng patch.  This whole stripping of tags is really tricky.&lt;/p&gt;</comment>
                            <comment id="13871622" author="anoop.hbase" created="Wed, 15 Jan 2014 04:15:28 +0000"  >&lt;p&gt;Selectively sending back tags is one problem..  But that is second...&lt;br/&gt;
The 1st problem is making codec to send tags when its Encoder encodes data from client to server.  The same Codec Encoder, when working in server side should not send back the tags.  This is where we were needing the context information.  Also pls note one more thing. We use a WALCellCodec whose Encoder uses the KVCodec for writing to the WAL. When writing to the WAL, even if it is inside a server, it must write tags..   We have to solve this problem.. Selective sending based on user is second and it might be simpler that 1st IMO.&lt;/p&gt;</comment>
                            <comment id="13871644" author="anoop.hbase" created="Wed, 15 Jan 2014 04:52:08 +0000"  >&lt;p&gt;BTW, the stripping of tags can be achieved by removing the tag from KV by the CP/Filter that it handles.  This will allow system tags being blocked from sending back and other user tags getting back to the client. (The decision can be taken by the CP/Filter which handles the tags)   This was from the begin of our discussions internally here.  Just saying.   The major concern with that was we will have to recreate KVs (In filter/cp) and byte array copying.  The perf penalty is a major concern  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13871672" author="ram_krish" created="Wed, 15 Jan 2014 05:38:02 +0000"  >&lt;p&gt;As Anoop says, even in Codec negotiation &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9681&quot; title=&quot;Basic codec negotiation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9681&quot;&gt;HBASE-9681&lt;/a&gt;, the problem is same.. in the sense any codec we write should behave differently when it works from client side and from the server side.  Atleast in terms of tags.  So we should have a mechanism to decide whether the codec is instantiated is on the client or on the server to induce this behaviour.&lt;br/&gt;
Stripping tags is the simplest of the options, but performance was a major concern.  Infact in the tags patch there was a proposal to attach tags as in memory object in KV rather than byte array.  That would mean stripping tags would have been easier.&lt;/p&gt;</comment>
                            <comment id="13871683" author="stack" created="Wed, 15 Jan 2014 05:51:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;Another suggestion atleast to avoid changes to the codec part is to have an init() in the Codec.java. So once the codec is instantiated we could set this flag as true or false based on client or server. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Anoop fed me the above off line.  It just seems wrong that codec need know if &apos;server&apos; or &apos;client&apos;.  Why can&apos;t it be TagsCodec and StripTagsCodec and then at the various junctions (client sending, server receiving, WAL writing, etc.) they read configuration what Codec to use or what code to use Decoding a particular Encoder; e.g. on server, we&apos;d write back to the client using NoTagsKVCodec.&lt;/p&gt;

&lt;p&gt;Pardon me if I am making suggestion you fellas have already said won&apos;t work.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The major concern with that was we will have to recreate KVs (In filter/cp) and byte array copying. The perf penalty is a major concern&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Are we writing new KVs or creating a cell block?  If the latter, then it&apos;ll be no more expensive copying a KV with or without the Tags?&lt;/p&gt;

&lt;p&gt;To get Andrew his RC the sooner, will life be easier if no tags from server to client?  In a later HBase we can add codec negotiation, etc?&lt;/p&gt;

&lt;p&gt;Good stuff lads.&lt;/p&gt;
</comment>
                            <comment id="13871694" author="ram_krish" created="Wed, 15 Jan 2014 05:59:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;Anoop fed me the above off line.  It just seems wrong that codec need know if &apos;server&apos; or &apos;client&apos;.  Why can&apos;t it be TagsCodec and StripTagsCodec and then at the various junctions (client sending, server receiving, WAL writing, etc.) they read configuration what Codec to use or what code to use Decoding a particular Encoder; e.g. on server, we&apos;d write back to the client using NoTagsKVCodec.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;True.. But this I think has to happen with codec negotiation.  Only then the server and the client will know about each other what the other is using.  TagsCodec and StripTagsCodec has to be specified in a configuration (which I call it as a mapping - Anoop does not like that &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;) and use that on either side. &lt;br/&gt;
May be we can see how costly is stripping out the tags from every kv in the CPs.. we can benchmark it once?&lt;/p&gt;</comment>
                            <comment id="13871696" author="stack" created="Wed, 15 Jan 2014 06:03:24 +0000"  >&lt;p&gt;Well, for 0.98, we could even  hardcode it given we have one Codec only at this time?&lt;/p&gt;</comment>
                            <comment id="13871704" author="ram_krish" created="Wed, 15 Jan 2014 06:13:30 +0000"  >&lt;p&gt;Ok.. So considering KVCodec as the default - we will create StripTagKVCodec and on the server side we would instantiate the StripTagKVCodec and keep using it and on client it would be KVCodec.  So export tool will not be working with this. Correct?&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;,&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;&lt;br/&gt;
Thoughts?&lt;/p&gt;</comment>
                            <comment id="13871745" author="apurtell" created="Wed, 15 Jan 2014 07:08:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;So export tool will not be working with this. Correct?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, that is not what I said.&lt;/p&gt;

&lt;p&gt;I said: The rock bottom simplest way to do this is to just not support tags in RPC codecs. Maybe we can have a separate class that keeps them for the Export tool specifically? Import is no problem if the user, presumably privileged, is building HFiles and therefore the cells within them directly. Accumulo has the same approach to whole file imports - no checking done, YMMV.&lt;/p&gt;
</comment>
                            <comment id="13871750" author="apurtell" created="Wed, 15 Jan 2014 07:13:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;Are we writing new KVs or creating a cell block? If the latter, then it&apos;ll be no more expensive copying a KV with or without the Tags?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is my assumption too. Why is this wrong.&lt;/p&gt;</comment>
                            <comment id="13871753" author="apurtell" created="Wed, 15 Jan 2014 07:18:06 +0000"  >&lt;p&gt;Finally, the reason I say &quot;rock bottom simplest way&quot; is there is too much discussion on this issue and it is holding up the RC essentially. Talk of negotiation is totally out of scope at this point. Let&apos;s move this over to reviewboard so we have code to get us all on the same page.&lt;/p&gt;</comment>
                            <comment id="13871830" author="anoop.hbase" created="Wed, 15 Jan 2014 09:10:50 +0000"  >&lt;p&gt;Let us try doing it by removing tags in cp/filter way.  Patch coming soon.&lt;/p&gt;</comment>
                            <comment id="13872394" author="anoop.hbase" created="Wed, 15 Jan 2014 18:34:58 +0000"  >&lt;p&gt;V2 version is doing the visibility tag strip at VisibilityFilter level. &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;  If this looks fine same to be done for AccessController case also. Will be you able to help me with that pls?&lt;/p&gt;</comment>
                            <comment id="13872415" author="apurtell" created="Wed, 15 Jan 2014 18:50:00 +0000"  >&lt;p&gt;So for every cell we have to make a decision and at least copy everything once? I see a lot of added .toByteArray()s in the patch. Is that a copy on each invocation? This feels like it will be too expensive. Have you benchmarked how much throughput this takes off a LoadTestTool run? &lt;/p&gt;

&lt;p&gt;How about: Make the decision once, with no additional copies. Subclass the codec class. Unconditionally strip tags for RPC. Don&apos;t for WAL and HFile. I guess we don&apos;t support tags with the Export tool until we can handle this better. &lt;/p&gt;</comment>
                            <comment id="13872531" author="hadoopqa" created="Wed, 15 Jan 2014 20:07:25 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12623185/HBASE-10322_V2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12623185/HBASE-10322_V2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12623185&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 9 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8437//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13872535" author="apurtell" created="Wed, 15 Jan 2014 20:11:34 +0000"  >&lt;p&gt;Sorry, I need to -1 the current patch out of concerns about the doubling (at least) of data copies. We need to go the route of different codecs, codecs which do not make context specific decisions, codecs which don&apos;t do additional copying. Then choose one codec for RPC which strips tags. Choose another codec for WAL and HFile which does not strip tags. I guess it&apos;s ok to not support the Export tool for now since we need to reach a conclusion here.&lt;/p&gt;</comment>
                            <comment id="13873066" author="anoop.hbase" created="Thu, 16 Jan 2014 05:52:39 +0000"  >&lt;p&gt;Because of the perf penalty I am also not so in favor of this way..  &lt;/p&gt;</comment>
                            <comment id="13873673" author="apurtell" created="Thu, 16 Jan 2014 17:58:41 +0000"  >&lt;p&gt;There are three contexts where we serialize cells: RPC, WAL, and HFile. Support tags in serialization for WAL and HFile. Don&apos;t for RPC. RPC is &lt;b&gt;both&lt;/b&gt; client and server side, that&apos;s why that distinction is meaningless (to me).&lt;/p&gt;</comment>
                            <comment id="13874497" author="anoop.hbase" created="Fri, 17 Jan 2014 06:30:07 +0000"  >&lt;p&gt;After lot of discussions here btw me, Andy and Ram and trying diff approaches, here is what we think is a possible solution. (Considering we have to have the RC soon and this is a blocker for that)&lt;br/&gt;
We will not write tags over RPC. * ie. in both client -&amp;gt; Server and server -&amp;gt; client.*&lt;br/&gt;
So KVCodec will not write tags at all&lt;br/&gt;
CelCodec and MessageCodec already not handling tags.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10321&quot; title=&quot;CellCodec has broken the 96 client to 98 server compatibility&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10321&quot;&gt;&lt;del&gt;HBASE-10321&lt;/del&gt;&lt;/a&gt; added a new CellCodecV2 which is a CellCodec with Tags support. We will remove it&lt;br/&gt;
Make sure WALCodec can write tags.&lt;/p&gt;

&lt;p&gt;So tags are becoming a server only thing as of now.  Because of this we will remove the new APIs added to Put as part of Tags jira&lt;br/&gt;
Put#add(byte[] family, byte [] qualifier, byte [] value, Tag[] tag) &lt;br/&gt;
And some more related which handles tags.  User can not pass tags directly from client.  As of now the only way is like what Visibility labels or ACL do. Pass the tags or related info via op attr and make a CP to handle it and add as Tags at server side only.&lt;/p&gt;

&lt;p&gt;Later we can add support for passing tags directly via Put from client&lt;/p&gt;

&lt;p&gt;Thanks a lot &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; ,&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; ..&lt;br/&gt;
Concerns, suggestions pls.&lt;/p&gt;</comment>
                            <comment id="13875068" author="apurtell" created="Fri, 17 Jan 2014 18:39:06 +0000"  >&lt;p&gt;Agree.&lt;/p&gt;

&lt;p&gt;The goal is to prevent sensitive tags from going to clients who are not supposed to see them. This is blocking the 0.98 RC.&lt;/p&gt;

&lt;p&gt;Checking on a per cell basis is going to hurt performance. Massaging cell data on a per cell basis e.g. copying, will kill performance. We need some global decision per connection.&lt;/p&gt;

&lt;p&gt;Earlier we explored per-connection negotiation ideas on another JIRA but didn&apos;t come to a satisfactory resolution. &lt;/p&gt;

&lt;p&gt;Now we want to do the simplest thing possible. There is no need to handle tags in cell serialization for RPC. (Except! Replication! - Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;.) Cell ACLs and visibility expressions are shipped server side in operation attributes. Tag persistence with HFile v3 is all set. Tag persistence in the WAL uses &quot;WAL codecs&quot; which are only applied server side. &lt;/p&gt;

&lt;p&gt;We need an answer for replication though. My thinking is since we set up RPC for replication specially in the sink and source code, and replication is a server to server thing - or at least we can say replication is &quot;privileged&quot; - it should be ok to add a tag capable codec for replication, but have it not be the default. We can tell users that replication will be compatible between 0.96 and 0.98 as long as you don&apos;t use cell tags. If you do start using the 0.98 features which require cell tags, then your replication endpoints must all be upgrade to 0.98 first, and you must change a configuration setting. &lt;/p&gt;</comment>
                            <comment id="13875069" author="apurtell" created="Fri, 17 Jan 2014 18:39:46 +0000"  >&lt;p&gt;Ping &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jdcryans&quot; class=&quot;user-hover&quot; rel=&quot;jdcryans&quot;&gt;Jean-Daniel Cryans&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, see ^^^&lt;/p&gt;</comment>
                            <comment id="13875139" author="stack" created="Fri, 17 Jan 2014 19:20:24 +0000"  >&lt;p&gt;Sounds reasonable Andrew, what you say about replication (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jdcryans&quot; class=&quot;user-hover&quot; rel=&quot;jdcryans&quot;&gt;Jean-Daniel Cryans&lt;/a&gt; is not around &amp;#8211; he is off in exotic locations.... again!).&lt;/p&gt;

&lt;p&gt;Is there a patch to review yet?&lt;/p&gt;</comment>
                            <comment id="13875141" author="apurtell" created="Fri, 17 Jan 2014 19:22:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is there a patch to review yet?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;There will be something shortly after we agree this is the way to go. Sounds like it. Soon, then.&lt;/p&gt;</comment>
                            <comment id="13875571" author="anoop.hbase" created="Sat, 18 Jan 2014 07:19:17 +0000"  >&lt;p&gt;My patch is like almost ready except Replication!&lt;br/&gt;
ReplicationSource uses AdminService#ReplicateWALEntry() and call HRS#replicateWALEntry()  via the same path of client to HRS communication.. ie via RpcClient.. So if we have to introduce 2 configs some sort of if checks etc will come which tells abt the context etc..&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Another simple way with out any code change I am thinking now is as follows:&lt;/p&gt;

&lt;p&gt;RpcClient looks at &quot;hbase.client.rpc.codec&quot; for getting the Codec class name.&lt;br/&gt;
Well HBase client side looks at this config at client end and uses that Codec to write to server and also writes the codec class name in connection header. Server looks at the connection header to see the class name of the Codec which is used by the client and it instantiate that and uses the same to communicate with that client.&lt;br/&gt;
Here we can do one thing. We can ask the user to configure two class names (When some one uses tags) at client and server. &lt;br/&gt;
Say at client use KVCodec and at server configure it as KVCodecWithTags.  Let KVCodecWithTags serialize tags also.At the peer cluster HRS also this codec class  should be there and there, in connection header, the class name will be KVCodecWithTags and will use that  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;This will work well.   So for existing users there is no need to do any changes.  When users use the tags (or visibility labels or cell level acl) they must make this change and make sure the 98 upgrade is done in all the clusters.&lt;/p&gt;

&lt;p&gt;Opinions pls. &lt;/p&gt;

&lt;p&gt;Edit : ReplicationSource already refers to this config &quot;hbase.client.rpc.codec&quot; as it uses RpcClient to talk with peer.&lt;/p&gt;</comment>
                            <comment id="13875583" author="ram_krish" created="Sat, 18 Jan 2014 08:06:01 +0000"  >&lt;p&gt;Just attaching a patch where after we support only server side tags, with the above change for the replication side things would work.  May be some one more familiar with replication can take a look. Replication testcases passes with this.&lt;/p&gt;</comment>
                            <comment id="13875584" author="ram_krish" created="Sat, 18 Jan 2014 08:06:24 +0000"  >&lt;p&gt;&amp;gt;&amp;gt;If you do start using the 0.98 features which require cell tags, then your replication endpoints must all be upgrade to 0.98 first, and you must change a configuration setting.&lt;br/&gt;
This would apply there.&lt;/p&gt;</comment>
                            <comment id="13875600" author="anoop.hbase" created="Sat, 18 Jan 2014 09:35:15 +0000"  >&lt;p&gt;How about adding new config hbase.replication.rpc.codec  or going with existing config only but asking to configure xxxWithTags codec to be used?  Ping &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; , &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;..    I am fine with any of this.&lt;br/&gt;
1st one needs some code change as Ram attached while the other don&apos;t need any code changes.&lt;/p&gt;</comment>
                            <comment id="13875602" author="hadoopqa" created="Sat, 18 Jan 2014 09:37:25 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12623779/HBASE-10322_codec.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12623779/HBASE-10322_codec.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12623779&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +    this.conf.set(&quot;hbase.client.rpc.codec&quot;, this.conf.get(&quot;hbase.replication.rpc.codec&quot;,&quot;org.apache.hadoop.hbase.codec.CellCodecV2&quot;));&lt;br/&gt;
+    this.conf.set(&quot;hbase.client.rpc.codec&quot;, this.conf.get(&quot;hbase.replication.rpc.codec&quot;,&quot;org.apache.hadoop.hbase.codec.CellCodecV2&quot;));&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.TestAcidGuarantees&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8468//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13875757" author="stack" created="Sat, 18 Jan 2014 22:11:22 +0000"  >&lt;p&gt;It is wrong that replication is in the admin Service and that is in the server Service.  Can we make a Replication Service?  Would that help?&lt;/p&gt;
</comment>
                            <comment id="13875919" author="anoop.hbase" created="Sun, 19 Jan 2014 16:52:35 +0000"  >&lt;p&gt;That changes can be in another Jira &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;?&lt;br/&gt;
We need any way an RpcClient to talk with peer right?&lt;br/&gt;
So we have 2 options. &lt;br/&gt;
1.Go with current way without any code changes.  The RpcClient used by ReplicationSource looks at the config &quot;hbase.client.rpc.codec&quot;  to know the codec name and uses that. This defaults to KVCodec.  As long as user don&apos;t deal with tags directly or indirectly (via usage of cell level ACL/ visibility labels) the current way works good. If tag case comes, user must&lt;br/&gt;
   a. Change this config value at HRS side to any of the codec with tags class. (We plan to give a KVCodecWithTag)&lt;br/&gt;
   b. Make sure upgrade the RSs in peer clusters also so that the new class added in 98 is available there also.&lt;br/&gt;
2. Introduce a new config name as in latest patch and do change is ReplicationSource to decorate the conf. In the attached patch a new Codec ie. CellCodecV2 is used as default. But I think there should not be any default value for this codec because of the below reason. (Default value should be value of the old config with thats default as KVCodec)&lt;br/&gt;
Suppose the src cluster user is upgrading to 98 (or later versions in future) But the peer is still in 96 .&lt;br/&gt;
When the replication src write using new Codec class, the destination will need the codec class to be present in it also. So this make it necessary for the peer also should be upgraded. What abt rolling upgrade then?&lt;br/&gt;
So even if the new config is there or not, the def codec should not change.  &lt;/p&gt;

&lt;p&gt;Out of these 2 options which one you guys prefer?   Can give a patch accordingly.&lt;/p&gt;</comment>
                            <comment id="13875990" author="lhofhansl" created="Sun, 19 Jan 2014 19:26:43 +0000"  >&lt;p&gt;I am a bit late to this party. The visibility tags control what a &lt;b&gt;client&lt;/b&gt; can see, right?&lt;/p&gt;

&lt;p&gt;Then what&apos;s a &quot;client&quot;? A client is outside of the HBase cluster outside of HBase&apos;s control. So HFile, HLog are not a client. Replication is also not a client. Export is a client, just like any other Java/Thrift/MR/etc client.&lt;br/&gt;
As Andy points out the interesting part here are these real clients.&lt;/p&gt;

&lt;p&gt;Are the tags themselves (i.e. who sees what) more sensitive than the data that can be accessed.&lt;br/&gt;
I.e. if I can see a certain KV, should I be able to see its visibility tags?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If the answer is &quot;yes&quot;, this is an easy problem in principle and squarely in the hands of an HBase admin to setup access correctly. You just run Export/etc as a user with sufficient access and all problems just go away.&lt;/li&gt;
	&lt;li&gt;If the answer is &quot;no&quot; it gets murky quickly. Now all tools and access paths need to be considered individually.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Maybe we can even have a tag that controls the visibility of the tags? Generally anything that we hardware assumes something about desired behavior that might not be the same at every institution.&lt;/p&gt;</comment>
                            <comment id="13876141" author="ram_krish" created="Mon, 20 Jan 2014 04:54:08 +0000"  >&lt;p&gt;&amp;gt;&amp;gt;bq.CellCodecV2 is used as default. But I think there should not be any default value for this codec because of the below reason. (Default value should be value of the old config with thats default as KVCodec)&lt;br/&gt;
Suppose the src cluster user is upgrading to 98 (or later versions in future) But the peer is still in 96 .&lt;br/&gt;
I agree. the patch&apos;s intention was to show how we could do that config settings. +1&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;if I can see a certain KV, should I be able to see its visibility tags?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What you say is right in the sense admin sets up proper access control say for User A and User A would be seeing only those KVs which has visibility labels that A is associated with.  But sometimes the labels can be combination of visibility labels seperted by &amp;amp;,|,!.  In that case the User A on reading the visibility labels would come to know about the existence of other labels.  And added to that, the whole idea of associating the labels and users are done by admin with super user privileges.  So allowing all users to view the labels in the KV would break it because reading the kv the User A would come to know what combination of labels he can pass to access the kvs to which he would not be authorised to.&lt;/p&gt;</comment>
                            <comment id="13876146" author="stack" created="Mon, 20 Jan 2014 05:05:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;We need any way an RpcClient to talk with peer right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, but I thought that if the Service is the explicit Replication Service, then you could identify the context as &quot;replication&quot; and slot in replication suited codecs that preserve tags on setup of the replication connection &amp;#8211; if asked for (A codec for replication that is other than what we use for &apos;normal&apos; client/server seems like something we&apos;d want to have anyways).&lt;/p&gt;

&lt;p&gt;If we break out a replication Service, it will break being able to replicate from a 0.98 to a 0.96 whether or not you are forwarding tags or not.  That ain&apos;t good.  If we leave the service as is, It sounds like we can have a 0.98 replicate to a 0.96 when no tags in the mix.  It is only when you enable tags will you have to update the  sink cluster so it recognizes the tag-bearing codec.&lt;/p&gt;

&lt;p&gt;Of your 1., and 2., 1. is preferable.  Pity it has to be a config. in the hbase-*xml.  Can it be a replication config (I suppose this is what your 2. does in part)?  Can ship 0.98.0RC as soon as we dump in a codec that can do tags (what happens when you pass a KV with tags to default KVCodec?  It just dumps them?)&lt;/p&gt;

&lt;p&gt;I like how &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; is telling it.  Does that help lads?&lt;/p&gt;


</comment>
                            <comment id="13876147" author="stack" created="Mon, 20 Jan 2014 05:06:24 +0000"  >&lt;p&gt;Just to say that the &apos;codec &apos; problem would be true of any sink cluster no matter what the version; you couldn&apos;t do some fancy compression codec unless you first updated the sink cluster so it recognized it when the source cluster set up the connection.&lt;/p&gt;</comment>
                            <comment id="13876159" author="ram_krish" created="Mon, 20 Jan 2014 05:24:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;what happens when you pass a KV with tags to default KVCodec? It just dumps them&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No KVCodec by default will not dump tags but when it works with the WALCellCodec it would dump.  so we  would control it with a flag.&lt;br/&gt;
The reason being kvcodec writes the entire length of the byte array.&lt;/p&gt;</comment>
                            <comment id="13876186" author="anoop.hbase" created="Mon, 20 Jan 2014 06:41:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;I.e. if I can see a certain KV, should I be able to see its visibility tags?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The answer to this is No. Ram explain the reason. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Maybe we can even have a tag that controls the visibility of the tags?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Who can see the tags also along with KVs, we thought let it be decided by the user. Only HBase super user will be able to get tags also along with KVs.&lt;/p&gt;

&lt;p&gt;So this is the overall idea. Yes tags control what a client can see.. But we would like to control normal clients from seeing the tags.&lt;/p&gt;

&lt;p&gt;The impl of this becomes very tricky as we use same Codec to write from client to server and back. We were giving options for user to add tags in Mutation KVs. As of now we are thinking of removing this APIs.  Over RPC tags will not go (ie. client -&amp;gt; server or reverse)&lt;br/&gt;
To write to WAL we use WALCellCodec and that will be able to write and read tags.&lt;br/&gt;
Then the last problem came out was replication for which we propose 2 possible solutions.  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; with out big changes like ReplicationServer can we do?  I think those we can try addressing in another issue..  &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Of your 1., and 2., 1. is preferable. Pity it has to be a config. in the hbase-*xml. Can it be a replication config (I suppose this is what your 2. does in part)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This config (&quot;hbase.client.rpc.codec&quot;) is used by the RpcClient. RpcClient used by the ReplicationSource. Yes already it refers to the config. As long as user dont deal with tags (existing migrated to 98) no changes required at all.. When they have tags usage have to change this config at HRSs side to some codec with tags..  We will ship some new codecs which can handle tags also along with this issue.   Yes option 2 adds a new config and as shown in the patch it just write the value of this new config as old config&apos;s value. (Decorating the conf object used by ReplicationSource)&lt;br/&gt;
If you feel option 1 is fine, no extra code will be needed in Replication side.&lt;/p&gt;</comment>
                            <comment id="13876212" author="lhofhansl" created="Mon, 20 Jan 2014 07:34:26 +0000"  >&lt;p&gt;Thanks for explaining, Ram and Anoop.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So tags are becoming a server only thing as of now&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agree. Can tackle Export/Copytable/etc later, although I figure eventually these would have to be addressed if folks use them for backup.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Only HBase super user will be able to get tags also along with KVs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This seems to contradict the earlier point.&lt;/p&gt;</comment>
                            <comment id="13876241" author="anoop.hbase" created="Mon, 20 Jan 2014 08:17:44 +0000"  >&lt;p&gt;Sorry for the confusion Lars&lt;br/&gt;
The final idea is that only super user can view tags.  But the impl raised some issues and we decided that we will not handle at this time.  As of now for 0.98.0 we will make tags as serevr only thing.  No user, even super user, will be able to retrieve tags to client side.  Am I making it clear now?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can tackle Export/Copytable/etc later&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes for use cases of Export/Copytable we thought tags should be accessible for clients also. Then thougt might be this can be controlled via user and we can ask Export to be executed by a super user. Then only tags will get exported. Even all the KVs can be surely scanned back only when the super user is executing it. For some other users, some KVs for which he is not authorized with related labels, wont get read.&lt;/p&gt;</comment>
                            <comment id="13876680" author="apurtell" created="Mon, 20 Jan 2014 18:43:05 +0000"  >&lt;p&gt;Let&apos;s condense the dense walls of text above to a one line answer to the below question if it is possible:&lt;/p&gt;

&lt;p&gt;Can we have a tag-aware codec that can be configured by &lt;b&gt;only&lt;/b&gt; ReplicationSource and ReplicationSink for the RPC they do server-to-server cross site? &lt;/p&gt;</comment>
                            <comment id="13876697" author="apurtell" created="Mon, 20 Jan 2014 18:50:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;: Quick recap as I see it. Security tags can be more sensitive than the cell itself. Users will share the cells among each other. However, we don&apos;t want that sharing to also leak access rules for the cell. That would be at best a violation of &quot;need to know&quot;. Also, 0.96 clients can&apos;t handle serializations that include tags. The easiest answer is: RPC does not handle cell tags. We can thus avoid: negotiation, per-cell access checks, per-cell rewrites (copies). However, that fails to address replication, which uses the RPC code but must be able to replicate tags from a 0.98 source to another 0.98 sink. For replication, we need to hand RPC a codec that is tag aware. Because 0.98 may be talking to 0.96, we can&apos;t do that by default, we need a configuration setting for replication that tells it what RPC codec to select when talking to the peer. &lt;/p&gt;</comment>
                            <comment id="13876701" author="apurtell" created="Mon, 20 Jan 2014 18:53:08 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;: Instead of Export, make a snapshot and DistCp the HFiles. Instead of Import, use the bulk import facility.&lt;/p&gt;</comment>
                            <comment id="13876734" author="lhofhansl" created="Mon, 20 Jan 2014 19:13:06 +0000"  >&lt;p&gt;Good summary. (And I&apos;m really just a bystander here.)&lt;br/&gt;
It&apos;s simplest to keep tag server-only unless there is a compelling argument to do differently.&lt;br/&gt;
A compelling argument might eventually be that code outside of HBase needs to check/manipulate tags.&lt;/p&gt;</comment>
                            <comment id="13876758" author="stack" created="Mon, 20 Jan 2014 19:27:32 +0000"  >&lt;p&gt;Nice distillation.  So, to &apos;solve&apos; this issue for 0.98.0RC, we just need to figure a means of allowing a user insert a particular codec when the client is replicating.  It does not even have to be &apos;on&apos; in 0.98.0..... in fact it is better if is not &apos;on&apos;.  It just needs to be possible.  Right?&lt;/p&gt;</comment>
                            <comment id="13876828" author="apurtell" created="Mon, 20 Jan 2014 20:19:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;So, to &apos;solve&apos; this issue for 0.98.0RC, we just need to figure a means of allowing a user insert a particular codec when the client is replicating. It does not even have to be &apos;on&apos; in 0.98.0..... in fact it is better if is not &apos;on&apos;. It just needs to be possible. Right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes. &lt;/p&gt;

&lt;p&gt;One more configuration variable (yeah...) named &quot;hbase.replication.rpc.codec&quot; or some such, so the tag-aware codec can be separately set up by the source and sink. Defaulting to the same codec we are using for RPC to be compatible with 0.96 clients.&lt;/p&gt;</comment>
                            <comment id="13876835" author="apurtell" created="Mon, 20 Jan 2014 20:32:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;A compelling argument might eventually be that code outside of HBase needs to check/manipulate tags.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This will be possible after my proposed change on this issue. Such code can directly build HFiles (v3) containing tags, and submit them through the bulk import facility. Likewise, if you copy out HFiles (v3) from a snapshot, they will come over with tags included, which can be read by accessing the HFile directly using the low level scanners. The security story is acceptable. Accumulo has a similar hands-off approach to labels in bulk imported files, see &lt;a href=&quot;http://accumulo.apache.org/1.5/accumulo_user_manual.html#_security:&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://accumulo.apache.org/1.5/accumulo_user_manual.html#_security:&lt;/a&gt; &quot;This constraint is not applied to bulk imported data, if this a concern then disable the bulk import permission.&quot; Also we can trivially prevent unauthorized direct access to HFiles by enabling encryption (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7544&quot; title=&quot;Transparent table/CF encryption&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7544&quot;&gt;&lt;del&gt;HBASE-7544&lt;/del&gt;&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="13877148" author="anoop.hbase" created="Tue, 21 Jan 2014 03:38:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;It does not even have to be &apos;on&apos; in 0.98.0..... in fact it is better if is not &apos;on&apos;. It just needs to be possible.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 for that. The interface Codec is marked InterfaceAudience.Private .  Do we have to change this marking now?&lt;/p&gt;</comment>
                            <comment id="13877158" author="ram_krish" created="Tue, 21 Jan 2014 03:57:48 +0000"  >&lt;p&gt;+1 on the entire summary.  &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;+1 for that. The interface Codec is marked InterfaceAudience.Private . Do we have to change this marking now?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;br/&gt;
I think Stack meant it only in the replication context?  May be am not getting the intent correctly.&lt;/p&gt;</comment>
                            <comment id="13877180" author="stack" created="Tue, 21 Jan 2014 04:38:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;The interface Codec is marked InterfaceAudience.Private . Do we have to change this marking now?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I dont follow you Anoop.  The Codec remains as is.  You just need to be able to configure the replication source to use a codec that ships tags (do you have one?) rather than the default no tags (and the default for replication should be no tags so it can replicate from 0.98 to 0.96).&lt;/p&gt;</comment>
                            <comment id="13877187" author="anoop.hbase" created="Tue, 21 Jan 2014 04:49:11 +0000"  >&lt;p&gt;Got it Stack.  We will provide codec that can handle tag.&lt;/p&gt;</comment>
                            <comment id="13877192" author="anoop.hbase" created="Tue, 21 Jan 2014 05:03:23 +0000"  >&lt;p&gt;Changes &lt;br/&gt;
1. Not serializing the tags over RPC. KeyValueCodec ignores tags&lt;br/&gt;
2. Added a codec KeyValueCodecWithTags which can serialize tags also&lt;br/&gt;
3. Renamed CellCodecV2 to CellCodecWithTags to be consistent with KeyValueCodecWithTags &lt;br/&gt;
4. Adding a new config &quot;hbase.replication.rpc.codec&quot;  Using which the codec class name to be used by replication can be specified.&lt;/p&gt;</comment>
                            <comment id="13877196" author="stack" created="Tue, 21 Jan 2014 05:13:23 +0000"  >&lt;p&gt;If we remove tags from Put, how do tags make it into the system at all?&lt;/p&gt;

&lt;p&gt;Patch seems fine.  I see where the replication codec is being inserted.  For sure we know this works?  We haven&apos;t forgot anything?  There is no test for it.&lt;/p&gt;

&lt;p&gt;Good stuff lads.&lt;/p&gt;</comment>
                            <comment id="13877208" author="ram_krish" created="Tue, 21 Jan 2014 05:24:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;If we remove tags from Put, how do tags make it into the system at all?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The agreement is that 0.98.0 will not support tags from client side.  all tags will be server side only.  As ACL and Visibility does tags will be passed via Operation Attributes and the respective CPs will take care.&lt;br/&gt;
If really user needs to add tags, then he has to write his own CP, pass tags via Operation Attributes and use it. (This is ideally not easy for the user), but as we have this stripping tags from server to clients using codec, we have finalised on this.  Thoughts? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13877245" author="ram_krish" created="Tue, 21 Jan 2014 06:08:25 +0000"  >&lt;p&gt;I am +1 on patch.  KeyValueCodecWithTags and CellcodecwithTags both would be needed right?  I think better. so +1.&lt;/p&gt;</comment>
                            <comment id="13877275" author="hadoopqa" created="Tue, 21 Jan 2014 06:40:22 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12624069/HBASE-10322_V3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12624069/HBASE-10322_V3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12624069&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 21 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 3 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8478//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13877279" author="stack" created="Tue, 21 Jan 2014 06:50:44 +0000"  >&lt;p&gt;OK.  So CPs add tags for now.  Good.&lt;/p&gt;

&lt;p&gt;How we know replication will pick up the codec config and work?  You fellas tried it?&lt;/p&gt;</comment>
                            <comment id="13877281" author="ram_krish" created="Tue, 21 Jan 2014 06:55:19 +0000"  >&lt;p&gt;I tried it atleast with testcases.  That is why added it in Replication source and replication sink.  If any replication experts would see that, it would be better.&lt;br/&gt;
Can test in a small cluster too.&lt;/p&gt;</comment>
                            <comment id="13877287" author="stack" created="Tue, 21 Jan 2014 07:04:02 +0000"  >&lt;p&gt;I&apos;d suggest you test in small cluster.&lt;/p&gt;

&lt;p&gt;I&apos;d be +1 on committing this in meantime.&lt;/p&gt;

&lt;p&gt;Andrew can make the call on whether to wait on test completion before RC&apos;ing or not.&lt;/p&gt;</comment>
                            <comment id="13877291" author="anoop.hbase" created="Tue, 21 Jan 2014 07:12:33 +0000"  >&lt;p&gt;Let me try adding a test Stack.  &lt;br/&gt;
I have to write it as a separate test class which spins 2 clusters. I have to set the replication codec class to KVCodecWithTags and add a CP to handle the tags as we don&apos;t support tags from client to server. Don&apos;t want existing tests to get these changes. Is that fine?&lt;/p&gt;</comment>
                            <comment id="13877316" author="stack" created="Tue, 21 Jan 2014 07:54:45 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; Whatever you think boss.  It&apos;d just be good if we knew things basically worked here before we cut RC.&lt;/p&gt;</comment>
                            <comment id="13877417" author="hadoopqa" created="Tue, 21 Jan 2014 12:00:56 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12624103/HBASE-10322_V4.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12624103/HBASE-10322_V4.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12624103&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 23 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 3 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8481//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13877622" author="anoop.hbase" created="Tue, 21 Jan 2014 17:12:24 +0000"  >&lt;p&gt;V5 fixing javadoc warns&lt;/p&gt;</comment>
                            <comment id="13877651" author="apurtell" created="Tue, 21 Jan 2014 17:48:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;d be +1 on committing this in meantime.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 for commit of v5 as is. Thanks for seeing this through Anoop and Ram. &lt;/p&gt;

&lt;p&gt;Please add a release note about HConstants.REPLICATION_CODEC_CONF_KEY.&lt;/p&gt;

&lt;p&gt;Fix the comment above this change on commit:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;diff --git hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/RpcClient.java hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/RpcClient.java
index a612b18..305a76a 100644
--- hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/RpcClient.java
+++ hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/RpcClient.java
@@ -1300,7 +1300,7 @@ public class RpcClient {
   Codec getCodec() {
     // For NO CODEC, &quot;hbase.client.rpc.codec&quot; must be the empty string AND
     // &quot;hbase.client.default.rpc.codec&quot; -- because default is to do cell block encoding.
-    String className = conf.get(&quot;hbase.client.rpc.codec&quot;, getDefaultCodec(this.conf));
+    String className = conf.get(HConstants.RPC_CODEC_CONF_KEY, getDefaultCodec(this.conf));
     if (className == null || className.length() == 0) return null;
     try {
       return (Codec)Class.forName(className).newInstance();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;Andrew can make the call on whether to wait on test completion before RC&apos;ing or not.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d really like a test if we get one in. Would have to be a LargeTest given it spins up two clusters. If it proves difficult then we can skip it. Or, if it flakes during RC testing, we can revert it for 0.98.1. Therefore it makes sense to me to do it as a follow up issue. &lt;/p&gt;

&lt;p&gt;Please also update the replication section of the manual to inform the user what HConstants.REPLICATION_CODEC_CONF_KEY does. We also need an update of the section talking about tags that setting HConstants.REPLICATION_CODEC_CONF_KEY to the tags-aware codec is required to replicate tags from one cluster to another. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;: The security coprocessors use operation attributes to ship metadata to the server. The downside is you have to take care because all cells bundled in the op will get the same metadata and the server has to rewrite the incoming cells, but the upside is we don&apos;t care about any limitations we might have with tags on the client. We can make tags &quot;first class&quot; for 1.0. We will have to look at things like negotiating codecs on the connection at that time.&lt;/p&gt;</comment>
                            <comment id="13877659" author="apurtell" created="Tue, 21 Jan 2014 17:54:31 +0000"  >&lt;p&gt;And if making tags &quot;first class&quot; we will have to look at thorny issues like deciding what user is allowed to attach what tags or what user is allowed to see what tags. There&apos;s a lot involved with it and I think we will end up punting on it all, but we can save this discussion for the next JIRA&lt;/p&gt;</comment>
                            <comment id="13877662" author="anoop.hbase" created="Tue, 21 Jan 2014 17:56:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;Would have to be a LargeTest given it spins up two clusters. If it proves difficult then we can skip it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Pls see TestReplicationWithTags in the patch&lt;/p&gt;</comment>
                            <comment id="13877665" author="apurtell" created="Tue, 21 Jan 2014 17:57:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;Pls see TestReplicationWithTags in the patch&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, can we split this out to a subtask and commit the rest now? &lt;br/&gt;
Edit: Also please see comments above about manual updates. Could be done at the same time.&lt;/p&gt;</comment>
                            <comment id="13877721" author="hadoopqa" created="Tue, 21 Jan 2014 18:50:40 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12624161/HBASE-10322_V5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12624161/HBASE-10322_V5.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12624161&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 23 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8483//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13878201" author="anoop.hbase" created="Wed, 22 Jan 2014 03:18:19 +0000"  >&lt;p&gt;V5 patch - TestReplicationWithTags&lt;/p&gt;

&lt;p&gt;The test and book update will be given in a follow on task soon.&lt;/p&gt;

&lt;p&gt;I will commit V6 in some time unless hear objections.   Thanks all for the help.&lt;/p&gt;</comment>
                            <comment id="13878246" author="ram_krish" created="Wed, 22 Jan 2014 04:26:13 +0000"  >&lt;p&gt;+1 on V6.  Thanks everyone for the active participation and bringing this to a conclusion.&lt;/p&gt;</comment>
                            <comment id="13878259" author="hadoopqa" created="Wed, 22 Jan 2014 04:54:05 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12624263/HBASE-10322_V6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12624263/HBASE-10322_V6.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12624263&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 21 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8486//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13878356" author="anoop.hbase" created="Wed, 22 Jan 2014 07:25:11 +0000"  >&lt;p&gt;Committed to Trunk and 98.&lt;br/&gt;
Will file a jira for the book update and test as per Andy&apos;s suggestion.&lt;/p&gt;

&lt;p&gt;Note : There is no difference btw V5 and V6 other than the latter removed a test class. So the Findbugs warns might have come from other commits I guess.&lt;/p&gt;</comment>
                            <comment id="13878360" author="anoop.hbase" created="Wed, 22 Jan 2014 07:32:55 +0000"  >&lt;p&gt;Thanks alot all for helping us to arrive at a conclusion.&lt;/p&gt;</comment>
                            <comment id="13878469" author="hudson" created="Wed, 22 Jan 2014 09:45:17 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #4847 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/4847/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/4847/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10322&quot; title=&quot;Strip tags from KV while sending back to client on reads&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10322&quot;&gt;&lt;del&gt;HBASE-10322&lt;/del&gt;&lt;/a&gt; Strip tags from KV while sending back to client on reads. (anoopsamjohn: rev 1560265)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HConnectionKey.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MultiServerCallable.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Put.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/RpcClient.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/CellCodecV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/CellCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/KeyValueCodec.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/KeyValueCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/codec/TestCellCodecV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/codec/TestCellCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/test/java/org/apache/hadoop/hbase/codec/TestKeyValueCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCellCodec.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSink.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/encoding/TestEncodedSeekers.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/rest/PerformanceEvaluation.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13878506" author="hudson" created="Wed, 22 Jan 2014 10:35:45 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.98 #101 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98/101/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98/101/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10322&quot; title=&quot;Strip tags from KV while sending back to client on reads&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10322&quot;&gt;&lt;del&gt;HBASE-10322&lt;/del&gt;&lt;/a&gt; Strip tags from KV while sending back to client on reads. (anoopsamjohn: rev 1560266)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HConnectionKey.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MultiServerCallable.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Put.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/RpcClient.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/CellCodecV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/CellCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/KeyValueCodec.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/KeyValueCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/test/java/org/apache/hadoop/hbase/codec/TestCellCodecV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/test/java/org/apache/hadoop/hbase/codec/TestCellCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/test/java/org/apache/hadoop/hbase/codec/TestKeyValueCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCellCodec.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSink.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/test/java/org/apache/hadoop/hbase/io/encoding/TestEncodedSeekers.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/test/java/org/apache/hadoop/hbase/rest/PerformanceEvaluation.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13878559" author="hudson" created="Wed, 22 Jan 2014 11:41:36 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.98-on-Hadoop-1.1 #95 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/95/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/95/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10322&quot; title=&quot;Strip tags from KV while sending back to client on reads&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10322&quot;&gt;&lt;del&gt;HBASE-10322&lt;/del&gt;&lt;/a&gt; Strip tags from KV while sending back to client on reads. (anoopsamjohn: rev 1560266)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HConnectionKey.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MultiServerCallable.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Put.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/RpcClient.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/CellCodecV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/CellCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/KeyValueCodec.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/main/java/org/apache/hadoop/hbase/codec/KeyValueCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/test/java/org/apache/hadoop/hbase/codec/TestCellCodecV2.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/test/java/org/apache/hadoop/hbase/codec/TestCellCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-common/src/test/java/org/apache/hadoop/hbase/codec/TestKeyValueCodecWithTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCellCodec.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSink.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/test/java/org/apache/hadoop/hbase/io/encoding/TestEncodedSeekers.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestCacheOnWrite.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.98/hbase-server/src/test/java/org/apache/hadoop/hbase/rest/PerformanceEvaluation.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14064020" author="hudson" created="Wed, 16 Jul 2014 20:14:16 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #5313 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/5313/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/5313/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10398&quot; title=&quot;HBase book updates for Replication after HBASE-10322&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10398&quot;&gt;&lt;del&gt;HBASE-10398&lt;/del&gt;&lt;/a&gt; HBase book updates for Replication after &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10322&quot; title=&quot;Strip tags from KV while sending back to client on reads&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10322&quot;&gt;&lt;del&gt;HBASE-10322&lt;/del&gt;&lt;/a&gt;. (Misty) (anoopsamjohn: rev da8f0a336d9a3b516fc1f5d33c462b1ef4996117)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;src/main/docbkx/book.xml&lt;/li&gt;
	&lt;li&gt;src/main/docbkx/security.xml&lt;/li&gt;
	&lt;li&gt;src/main/docbkx/ops_mgt.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14331125" author="enis" created="Sat, 21 Feb 2015 23:33:40 +0000"  >&lt;p&gt;Closing this issue after 0.99.0 release. &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12690313">HBASE-10398</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12688495">HBASE-10326</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12755072">HBASE-12470</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12753566">HBASE-12441</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12622539" name="HBASE-10322.patch" size="75184" author="anoop.hbase" created="Sun, 12 Jan 2014 10:44:39 +0000"/>
                            <attachment id="12623185" name="HBASE-10322_V2.patch" size="32837" author="anoop.hbase" created="Wed, 15 Jan 2014 18:34:58 +0000"/>
                            <attachment id="12624069" name="HBASE-10322_V3.patch" size="60117" author="anoop.hbase" created="Tue, 21 Jan 2014 05:03:23 +0000"/>
                            <attachment id="12624103" name="HBASE-10322_V4.patch" size="71875" author="anoop.hbase" created="Tue, 21 Jan 2014 10:29:42 +0000"/>
                            <attachment id="12624161" name="HBASE-10322_V5.patch" size="72404" author="anoop.hbase" created="Tue, 21 Jan 2014 17:12:24 +0000"/>
                            <attachment id="12624263" name="HBASE-10322_V6.patch" size="62427" author="anoop.hbase" created="Wed, 22 Jan 2014 03:18:19 +0000"/>
                            <attachment id="12623779" name="HBASE-10322_codec.patch" size="2665" author="ram_krish" created="Sat, 18 Jan 2014 08:06:01 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 12 Jan 2014 10:25:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>367451</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 42 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1rc5j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>367760</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Added a new config hbase.replication.rpc.codec, using which one can specify the codec to be used by the replication. This config don&amp;#39;t have a default value. When it is not specified, the codec specified by hbase.client.rpc.codec config will be used for replication.(For which org.apache.hadoop.hbase.codec.KeyValueCodec is the default value)&lt;br/&gt;
&lt;br/&gt;
Note : When using tags directly or indirectly (ie. Usage of cell level visibility labels or per cell ACL) make sure to configure hbase.replication.rpc.codec with a Codec which supports shipping of tags. We have org.apache.hadoop.hbase.codec.KeyValueCodecWithTags  and org.apache.hadoop.hbase.codec.CellCodecWithTags, which can handle tags.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>