<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:44:32 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-469/HBASE-469.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-469] Streamline HStore startup and compactions</title>
                <link>https://issues.apache.org/jira/browse/HBASE-469</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Several useful patches that streamline HStore startup and compactions that were a part of the abandoned changes in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-69&quot; title=&quot;[hbase] Make cache flush triggering less simplistic&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-69&quot;&gt;&lt;del&gt;HBASE-69&lt;/del&gt;&lt;/a&gt; should be incorporated.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12389413">HBASE-469</key>
            <summary>Streamline HStore startup and compactions</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jimk">Jim Kellerman</assignee>
                                    <reporter username="jimk">Jim Kellerman</reporter>
                        <labels>
                    </labels>
                <created>Sun, 24 Feb 2008 06:07:29 +0000</created>
                <updated>Fri, 22 Aug 2008 21:13:10 +0000</updated>
                            <resolved>Wed, 2 Apr 2008 07:01:19 +0000</resolved>
                                    <version>0.2.0</version>
                                    <fixVersion>0.2.0</fixVersion>
                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12573977" author="jimk" created="Fri, 29 Feb 2008 21:53:16 +0000"  >&lt;p&gt;FWIW. Still fails in sequential write test.&lt;/p&gt;</comment>
                            <comment id="12583415" author="jimk" created="Sun, 30 Mar 2008 07:06:11 +0000"  >&lt;p&gt;HMerge, HRegionServer&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;changes that reflect changes to HRegion, CompactSplitThread and Flusher methods&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;ServerManager&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Return zero length array to region server if it is exiting or quiesced and Master is not yet ready to shut down.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;QueueEntry&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removed. no longer used.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;CompactSplitThread&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;make compactionQueue a queue of HRegion.&lt;/li&gt;
	&lt;li&gt;Add Set&amp;lt;HRegion&amp;gt; so we can quickly determine if a region is in the queue. BlockingQueue.contains() does a linear scan of the queue.&lt;/li&gt;
	&lt;li&gt;Add a lock and interruptPolitely methods so that compactions/splits in progress are not interrupted.&lt;/li&gt;
	&lt;li&gt;Don&apos;t add a region to the queue if it is already present.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Flusher&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;change queue from DelayQueue to BlockingQueue, with HRegion entries instead of QueueEntry.&lt;/li&gt;
	&lt;li&gt;Add Set&amp;lt;HRegion&amp;gt; to quickly determine if a region is already in the queue to avoid linear scan of BlockingQueue.contains().&lt;/li&gt;
	&lt;li&gt;Only put regions in the queue for optional cache flush if the last time they were flushed is older than now - optionalFlushInterval.&lt;/li&gt;
	&lt;li&gt;Only add regions to the queue if it is not already present.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;HRegion&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;don&apos;t request a cache flush if one has already been requested.&lt;/li&gt;
	&lt;li&gt;In close, null out references so garbage collector will have an easier time figuring out what can be released.&lt;/li&gt;
	&lt;li&gt;Add setLastFlushTime so flusher can set it once it has queued an optional flush.&lt;/li&gt;
	&lt;li&gt;Replace largestHStore with getLargestHStoreSize: returns long instead of HStoreSize object.&lt;/li&gt;
	&lt;li&gt;Add midKey as parameter to splitRegion.&lt;/li&gt;
	&lt;li&gt;Reorder start of splitRegion so it doesn&apos;t do any work before validating parameters.&lt;/li&gt;
	&lt;li&gt;Remove needsSplit and compactIfNeeded - no longer needed.&lt;/li&gt;
	&lt;li&gt;compactStores now returns midKey if split is needed.&lt;/li&gt;
	&lt;li&gt;snapshotMemcaches now sets flushRequested to false and sets lastFlushTime to now.&lt;/li&gt;
	&lt;li&gt;update does not request a cache flush if one has already been requested.&lt;/li&gt;
	&lt;li&gt;Override equals and hashCode so HRegions can be stored in a HashSet.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;HStore&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;loadHStoreFiles now computes max sequence id and the initial size of the store.&lt;/li&gt;
	&lt;li&gt;Add getter for family.&lt;/li&gt;
	&lt;li&gt;Close nulls out references to for many objects which helps the garbage collector determine if objects can be gc&apos;d.&lt;/li&gt;
	&lt;li&gt;internalCacheFlush updates store size, and logs both size of cache flush and resulting map file size (with debug logging enabled).&lt;/li&gt;
	&lt;li&gt;Remove needsCompaction and hasReferences - no longer needed.&lt;/li&gt;
	&lt;li&gt;compact() returns midKey if store needs to be split.&lt;/li&gt;
	&lt;li&gt;compact() does all checking before actually starting a compaction.&lt;/li&gt;
	&lt;li&gt;If store size is greater than desiredMaxFileSize, compact returns the midKey for the store regardless of whether a compaction was actually done.&lt;/li&gt;
	&lt;li&gt;Added more synchronization in completeCompaction while iterating over storeFiles.&lt;/li&gt;
	&lt;li&gt;completeCompaction computes new store size.&lt;/li&gt;
	&lt;li&gt;New method checkSplit replaces method size. Returns midKey if store needs to be split and can be split.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;HStoreSize&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;removed. No longer needed.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Memcache&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;added close method which clears all the maps and should make the job easier for garbage collector.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;HBaseTestCase&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;only set fs if it has not already been set by a subclass.&lt;/li&gt;
	&lt;li&gt;Add protected method deleteLocal to clean up files created in local fs, by M/R jobs.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;TestTableIndex, TestTableMapReduce&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;call new deleteLocal method&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12583416" author="jimk" created="Sun, 30 Mar 2008 07:08:26 +0000"  >&lt;p&gt;Passes all regression tests. Ran PerformanceEvaluation sequentialWrite with 4 clients in 1000MB heap and randomWrite with 4 clients in 2000MB heap (same as 0.1.0)&lt;/p&gt;

&lt;p&gt;Please review.&lt;/p&gt;</comment>
                            <comment id="12583881" author="stack" created="Mon, 31 Mar 2008 21:26:40 +0000"  >&lt;p&gt;Before reviewing, does this new patch do as previous versions did &amp;#8211; IIRC &amp;#8211; removing the memory cap for a region rather moving the memory cap down to the store such that if ten stores, we could use ten times the memory we used to use if all stores are undergoing updates?&lt;/p&gt;</comment>
                            <comment id="12584201" author="jimk" created="Tue, 1 Apr 2008 16:24:55 +0000"  >&lt;p&gt;&amp;gt; stack - 31/Mar/08 02:26 PM&lt;br/&gt;
&amp;gt; Before reviewing, does this new patch do as previous versions did - IIRC - removing the memory cap&lt;br/&gt;
&amp;gt; for a region rather moving the memory cap down to the store such that if ten stores, we could use ten&lt;br/&gt;
&amp;gt; times the memory we used to use if all stores are undergoing updates?&lt;/p&gt;

&lt;p&gt;No the flushing policy has not changed. That is it still uses checkResources to block updates when the total memcache size for a region reaches 64MB.&lt;/p&gt;

&lt;p&gt;The patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-69&quot; title=&quot;[hbase] Make cache flush triggering less simplistic&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-69&quot;&gt;&lt;del&gt;HBASE-69&lt;/del&gt;&lt;/a&gt; is the one you&apos;re thinking of.&lt;/p&gt;

&lt;p&gt;This patch makes the HStore smarter. For example loadHStoreFiles also gets the sequence number and file size while it is loading the stores so a separate scan is no longer necessary. cache flushing updates the store size. The only time the store size is recomputed is after a compaction: in that case compact knows the size of the file it just created so it only has to look at any new store files that might have been created by a cache flush that occurred while the compaction was running.&lt;/p&gt;

&lt;p&gt;compact also computes the mid key if the store needs to be (and can be) split even if it decides no compaction is necessary. Thus the compactor thread knows if the region needs to be split after calling compact and does not have to query the region.&lt;/p&gt;

&lt;p&gt;QueueEntry&apos;s were removed because neither the flusher nor the compactor use delay queues and at that point, the only payload of the QueueEntry was the region reference. HRegion now implements equals and hashCode so it can be inserted into a blocking queue and a hash set. The hash set is a set of all the regions in the queue and can determine if a region is in the queue much faster than BlockingQueue.contains() which does a linear scan of the queue.&lt;/p&gt;</comment>
                            <comment id="12584224" author="stack" created="Tue, 1 Apr 2008 17:37:45 +0000"  >&lt;p&gt;Thanks for the detailed explaination.&lt;/p&gt;

&lt;p&gt;Patch has lots of nice cleanup.&lt;/p&gt;

&lt;p&gt;Here&apos;s a couple of comments:&lt;/p&gt;


&lt;p&gt;Why catch the exception?  Why not just let out?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (fs == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.fs = FileSystem.get(conf);
+      } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+        LOG.fatal(&lt;span class=&quot;code-quote&quot;&gt;&quot;error getting file system&quot;&lt;/span&gt;, e);
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Regards the below:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; void deleteLocal(File f) {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (f.exists()) {
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (f.isDirectory()) {
+        File[] children = f.listFiles();
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (children != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; children.length &amp;gt; 0) {
+          &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; children.length; i++) {
+            deleteLocal(children[i]);
+          }
+        }
+      }
+      f.delete();
+    }
+  } 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Its called deleteLocalFile &amp;#8211; does it only work against local filesystem?  Should this method be in file utils instead?  Is there a method that does this up in hadoop?  What if test is run on DFS?&lt;/p&gt;

&lt;p&gt;Should the System.out.* logging be changed in src/test/org/apache/hadoop/hbase/TestHBaseCluster.java?&lt;/p&gt;

&lt;p&gt;Whats happening with TestMemcache?  Is there a renaming going on?   Its different from TestHMemcache?&lt;/p&gt;

&lt;p&gt;Why do the below:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+      e.printStackTrace();
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Doesn&apos;t a stacktrace come out anyways?&lt;/p&gt;

&lt;p&gt;Log instead? +    System.err.println(&quot;setup completed.&quot;);  Change all the System.out* to use log?&lt;/p&gt;

&lt;p&gt;Just let the below out?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+      r.flushcache();
+    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+      e.printStackTrace();
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+    } 
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+      r.compactStores();
+    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+      e.printStackTrace();
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+      r.flushcache();
+      r.compactStores();
+    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+      e.printStackTrace();
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Should this run in tearDown?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
       mrCluster.shutdown();
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (jobConf != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+        deleteLocal(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(jobConf.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;hadoop.tmp.dir&quot;&lt;/span&gt;)));
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Why is this necessary?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  void close() {
+    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.lock.writeLock().lock();
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.memcache.clear();
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.snapshot.clear();
+    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.lock.writeLock().unlock();
+    }
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Its just busy work and it will mask real memory retention issues &amp;#8211; e.g. if the host of this MemCache is being held on to, then this clearing will make it that condidtion harder to detect (if the host is not being referenced, the memcache and snapshot have no path to root and GC will clean them up).  I see that we used do this elsewhere...and you&apos;re just tidying stuff.&lt;/p&gt;

&lt;p&gt;Can this be final? +  protected Memcache memcache = new Memcache();&lt;/p&gt;

&lt;p&gt;Why remove the final in below?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;final FileSystem fs;&lt;/li&gt;
	&lt;li&gt;private final HBaseConfiguration conf;&lt;br/&gt;
+  FileSystem fs;&lt;br/&gt;
+  private HBaseConfiguration conf;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Because not set on construction?&lt;/p&gt;

&lt;p&gt;This is a nice addition -&amp;gt; +  private volatile long storeSize;&lt;/p&gt;

&lt;p&gt;I think one of my patches yesterday might make it so this part doesn&apos;t apply:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@@ -208,29 +220,18 @@
     &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(LOG.isDebugEnabled()) {
       LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;starting &quot;&lt;/span&gt; + storeName +
           ((reconstructionLog == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || !fs.exists(reconstructionLog)) ?
-          &lt;span class=&quot;code-quote&quot;&gt;&quot; (no reconstruction log)&quot;&lt;/span&gt; :
-            &lt;span class=&quot;code-quote&quot;&gt;&quot; with reconstruction log: &quot;&lt;/span&gt; + reconstructionLog.toString()));
+              &lt;span class=&quot;code-quote&quot;&gt;&quot; (no reconstruction log)&quot;&lt;/span&gt; :
+                &lt;span class=&quot;code-quote&quot;&gt;&quot; with reconstruction log: &quot;&lt;/span&gt; + reconstructionLog.toString()));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What you think our policy on data member access should be?  Sometimes we make things default access.  Other times we add accessors:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+
+  HColumnDescriptor getFamily() {
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.family;
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Should we log debug something here just in case things are not working as we&apos;d hope?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+        &lt;span class=&quot;code-comment&quot;&gt;// If the HSTORE_LOGINFOFILE doesn&apos;t contain a number, just ignore it.
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// That means it was built prior to the previous run of HStore, and so
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// it cannot contain any updates also contained in the log.
&lt;/span&gt;+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just suggesting...&lt;/p&gt;

&lt;p&gt;You want to remove this?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+&lt;span class=&quot;code-comment&quot;&gt;//      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.basedir = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
&lt;/span&gt;+&lt;span class=&quot;code-comment&quot;&gt;//      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.info = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
&lt;/span&gt;+&lt;span class=&quot;code-comment&quot;&gt;//      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.family = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
&lt;/span&gt;+&lt;span class=&quot;code-comment&quot;&gt;//      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.fs = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Would suggest this log not necessary&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isDebugEnabled()) {
+              LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Not compacting &quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.storeName +
+                  &lt;span class=&quot;code-quote&quot;&gt;&quot; because no store files to compact.&quot;&lt;/span&gt;);
+            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Lets log events and changes in state &amp;#8211; not the fact that they did not happen (there are a few other logs after this one).  Would suggest that as part of logging compactions, you add rationale.&lt;/p&gt;

&lt;p&gt;Should the below check be done inside the checkSplit method for the sake of better coherence?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (storeSize &amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.desiredMaxFileSize) {
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; checkSplit();
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is intentional (Moving where reportOpen happens?)?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-      reportOpen(regionInfo); 
     }   
+    reportOpen(regionInfo);  
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don&apos;t think the HRegion cleanup you&apos;ve added helps (See above note on how I think it could make memleaks harder to detect).&lt;/p&gt;


</comment>
                            <comment id="12584389" author="jimk" created="Wed, 2 Apr 2008 03:31:06 +0000"  >&lt;p&gt;&amp;gt; Here&apos;s a couple of comments:&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Why catch the exception? Why not just let out?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (fs == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.fs = FileSystem.get(conf);
+      } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+        LOG.fatal(&lt;span class=&quot;code-quote&quot;&gt;&quot;error getting file system&quot;&lt;/span&gt;, e);
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Beats me. Is what we did before. All I really did was encase the existing code inside the if. I have removed the try/catch&lt;/p&gt;

&lt;p&gt;&amp;gt; Regards the below:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; void deleteLocal(File f) {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (f.exists()) {
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (f.isDirectory()) {
+        File[] children = f.listFiles();
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (children != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; children.length &amp;gt; 0) {
+          &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; children.length; i++) {
+            deleteLocal(children[i]);
+          }
+        }
+      }
+      f.delete();
+    }
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;gt; Its called deleteLocalFile - does it only work against local filesystem?&lt;/p&gt;

&lt;p&gt;Yes. It is used to clean up the cruft that MapReduce leaves in the local&lt;br/&gt;
file system when it runs a test (because it does not clean up after itself)&lt;/p&gt;

&lt;p&gt;&amp;gt; Should this method be in file utils instead?&lt;br/&gt;
&amp;gt; Is there a method that does this up in hadoop?&lt;/p&gt;

&lt;p&gt;Yes, duh! Removed.&lt;/p&gt;

&lt;p&gt;&amp;gt; What if test is run on DFS?&lt;/p&gt;

&lt;p&gt;It is only used to clean up the cruft that MapReduce leaves in the local file system.&lt;/p&gt;

&lt;p&gt;&amp;gt; Should the System.out.* logging be changed in&lt;br/&gt;
&amp;gt; src/test/org/apache/hadoop/hbase/TestHBaseCluster.java?&lt;/p&gt;

&lt;p&gt;Yes also in TestHRegion.&lt;/p&gt;

&lt;p&gt;&amp;gt; Whats happening with TestMemcache? Is there a renaming going on?&lt;br/&gt;
&amp;gt; Its different from TestHMemcache?&lt;/p&gt;

&lt;p&gt;It was a new test I wrote while debugging. I folded it into TestHMemcache.&lt;/p&gt;

&lt;p&gt;&amp;gt; Why do the below:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+      e.printStackTrace();
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;gt; Doesn&apos;t a stacktrace come out anyways?&lt;/p&gt;

&lt;p&gt;Yes, removed.&lt;/p&gt;

&lt;p&gt;&amp;gt; Log instead? + System.err.println(&quot;setup completed.&quot;);&lt;br/&gt;
&amp;gt; Change all the System.out* to use log?&lt;/p&gt;

&lt;p&gt;Yes. Done.&lt;/p&gt;

&lt;p&gt;&amp;gt; Just let the below out?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+      r.flushcache();
+    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+      e.printStackTrace();
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+    } 
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+      r.compactStores();
+    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+      e.printStackTrace();
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;gt; And here:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+      r.flushcache();
+      r.compactStores();
+    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+      e.printStackTrace();
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; e;
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Done.&lt;/p&gt;

&lt;p&gt;&amp;gt; Should this run in tearDown?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
} &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
       mrCluster.shutdown();
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (jobConf != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+        deleteLocal(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; File(jobConf.get(&lt;span class=&quot;code-quote&quot;&gt;&quot;hadoop.tmp.dir&quot;&lt;/span&gt;)));
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Yes. Done.&lt;/p&gt;

&lt;p&gt;&amp;gt; Why is this necessary?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  void close() {
+    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.lock.writeLock().lock();
+    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.memcache.clear();
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.snapshot.clear();
+    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.lock.writeLock().unlock();
+    }
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;gt; Its just busy work and it will mask real memory retention issues - e.g.&lt;br/&gt;
&amp;gt; if the host of this MemCache is being held on to, then this clearing will&lt;br/&gt;
&amp;gt; make it that condidtion harder to detect (if the host is not being&lt;br/&gt;
&amp;gt; referenced, the memcache and snapshot have no path to root and GC will&lt;br/&gt;
&amp;gt; clean them up). I see that we used do this elsewhere...and you&apos;re just&lt;br/&gt;
&amp;gt; tidying stuff.&lt;/p&gt;

&lt;p&gt;I was trying to give the garbage collector some help, but you&apos;re right, it&apos;s not necessary.&lt;/p&gt;

&lt;p&gt;&amp;gt; Can this be final? + protected Memcache memcache = new Memcache();&lt;br/&gt;
Yes. Done.&lt;/p&gt;

&lt;p&gt;&amp;gt; Why remove the final in below?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    * &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; FileSystem fs;
    * &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; HBaseConfiguration conf;
      + FileSystem fs;
      + &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; HBaseConfiguration conf;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&amp;gt; Because not set on construction?&lt;/p&gt;

&lt;p&gt;No, close at one point nulled out these pointers to try to help the garbage collector. They are final now.&lt;/p&gt;

&lt;p&gt;&amp;gt; This is a nice addition -&amp;gt; + private volatile long storeSize;&lt;/p&gt;

&lt;p&gt;Yes. HStore for the most part knows how big it is, so why recompute it every time we want to know if the store wants to be split.&lt;/p&gt;

&lt;p&gt;&amp;gt; I think one of my patches yesterday might make it so this part doesn&apos;t apply:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@@ -208,29 +220,18 @@
     &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(LOG.isDebugEnabled()) {
       LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;starting &quot;&lt;/span&gt; + storeName +
           ((reconstructionLog == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || !fs.exists(reconstructionLog)) ?
-          &lt;span class=&quot;code-quote&quot;&gt;&quot; (no reconstruction log)&quot;&lt;/span&gt; :
-            &lt;span class=&quot;code-quote&quot;&gt;&quot; with reconstruction log: &quot;&lt;/span&gt; + reconstructionLog.toString()));
+              &lt;span class=&quot;code-quote&quot;&gt;&quot; (no reconstruction log)&quot;&lt;/span&gt; :
+                &lt;span class=&quot;code-quote&quot;&gt;&quot; with reconstruction log: &quot;&lt;/span&gt; + reconstructionLog.toString()));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;y, I resolved the conflict.&lt;/p&gt;

&lt;p&gt;&amp;gt; What you think our policy on data member access should be? Sometimes we make&lt;br/&gt;
&amp;gt; things default access. Other times we add accessors:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+
+  HColumnDescriptor getFamily() {
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.family;
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don&apos;t have a clear opinion on this. If access is package scoped, usually I don&apos;t go through an accessor. But if you&apos;d like to formalize this, that&apos;s cool with me too.&lt;/p&gt;

&lt;p&gt;&amp;gt; Should we log debug something here just in case things are not working as&lt;br/&gt;
&amp;gt; we&apos;d hope? Just suggesting...&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException e) {
+        &lt;span class=&quot;code-comment&quot;&gt;// If the HSTORE_LOGINFOFILE doesn&apos;t contain a number, just ignore it.
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// That means it was built prior to the previous run of HStore, and so
&lt;/span&gt;+        &lt;span class=&quot;code-comment&quot;&gt;// it cannot contain any updates also contained in the log.
&lt;/span&gt;+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Done.&lt;/p&gt;

&lt;p&gt;&amp;gt; You want to remove this?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+&lt;span class=&quot;code-comment&quot;&gt;//      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.basedir = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
&lt;/span&gt;+&lt;span class=&quot;code-comment&quot;&gt;//      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.info = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
&lt;/span&gt;+&lt;span class=&quot;code-comment&quot;&gt;//      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.family = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
&lt;/span&gt;+&lt;span class=&quot;code-comment&quot;&gt;//      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.fs = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Done.&lt;/p&gt;

&lt;p&gt;&amp;gt; Would suggest this log not necessary&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isDebugEnabled()) {
+              LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Not compacting &quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.storeName +
+                  &lt;span class=&quot;code-quote&quot;&gt;&quot; because no store files to compact.&quot;&lt;/span&gt;);
+            }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I think this is useful at debug level. If we ever get our INFO/DEBUG messages right, then this should only show up if we are trying to trace a problem.&lt;/p&gt;

&lt;p&gt;&amp;gt; Lets log events and changes in state - not the fact that they did not&lt;br/&gt;
&amp;gt; happen (there are a few other logs after this one). Would suggest that as&lt;br/&gt;
&amp;gt; part of logging compactions, you add rationale.&lt;/p&gt;

&lt;p&gt;Like I said above, it we make INFO level logging provide us with enough information, this, as a debug level log, should disappear.&lt;/p&gt;

&lt;p&gt;&amp;gt; Should the below check be done inside the checkSplit method for the sake of&lt;br/&gt;
&amp;gt; better coherence?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (storeSize &amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.desiredMaxFileSize) {
+        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; checkSplit();
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Yes. Done.&lt;/p&gt;

&lt;p&gt;&amp;gt; This is intentional (Moving where reportOpen happens?)?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-      reportOpen(regionInfo); 
     }   
+    reportOpen(regionInfo);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Yes. Sometimes the master sends multiple open region requests to the region server, why I don&apos;t know. If it does and the region server already has the region open, It can make the master happy by telling it that the region has been opened.&lt;/p&gt;

&lt;p&gt;&amp;gt; I don&apos;t think the HRegion cleanup you&apos;ve added helps (See above note on&lt;br/&gt;
&amp;gt; how I think it could make memleaks harder to detect).&lt;/p&gt;

&lt;p&gt;Agreed. Removed.&lt;/p&gt;</comment>
                            <comment id="12584391" author="jimk" created="Wed, 2 Apr 2008 03:31:57 +0000"  >&lt;p&gt;Let me know if you want to re-review the patch, or if I can just commit it. Thanks.&lt;/p&gt;</comment>
                            <comment id="12584406" author="stack" created="Wed, 2 Apr 2008 05:06:00 +0000"  >&lt;p&gt;Go commit it Jim&lt;/p&gt;</comment>
                            <comment id="12584441" author="jimk" created="Wed, 2 Apr 2008 07:01:19 +0000"  >&lt;p&gt;Committed.&lt;/p&gt;</comment>
                            <comment id="12585718" author="stack" created="Fri, 4 Apr 2008 19:37:09 +0000"  >&lt;p&gt;In review I suggested that we log events, not that events didn&apos;t happen.&lt;/p&gt;

&lt;p&gt;You counter:&lt;/p&gt;

&lt;p&gt;&amp;gt; I think this is useful at debug level.&lt;/p&gt;

&lt;p&gt;Here is an example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    [junit] 2008-04-04 12:15:01,686 INFO  [RegionServer:0.compactor] regionserver.HRegion(852): starting compaction on region -ROOT-,,0
    [junit] 2008-04-04 12:15:01,687 DEBUG [RegionServer:0.compactor] regionserver.HStore(726): Not compacting 70236052/info because only one store file and it is not a reference
    [junit] 2008-04-04 12:15:01,691 INFO  [RegionServer:0.compactor] regionserver.HRegion(862): compaction completed on region -ROOT-,,0. Took 0sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thats 3 lines of logging to say compaction did NOT run.&lt;/p&gt;

&lt;p&gt;Here are other examples:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    [junit] 2008-04-04 12:15:12,707 DEBUG [RegionServer:0.compactor] regionserver.HStore(719): Not compacting 1578871709/text because no store files to compact.
    [junit] 2008-04-04 12:15:12,707 DEBUG [RegionServer:0.compactor] regionserver.HStore(719): Not compacting 1578871709/contents because no store files to compact.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When compaction does run, it logs.  Absence of logging is sufficient for me to know that compaction did not run (I can&apos;t think of a reason why I&apos;d want to know why the compaction did not run)&lt;/p&gt;

&lt;p&gt;I&apos;d suggest that the less noise in the logs, the easier to decipher whats going on whether we&apos;re logging at INFO or DEBUG level and that we only log events... not their NOT having happened&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12389411">HBASE-467</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12379092" name="patch.txt" size="109098" author="jimk" created="Wed, 2 Apr 2008 03:31:05 +0000"/>
                            <attachment id="12378878" name="patch.txt" size="105938" author="jimk" created="Sun, 30 Mar 2008 07:06:10 +0000"/>
                            <attachment id="12376868" name="patch.txt" size="108101" author="jimk" created="Fri, 29 Feb 2008 21:53:16 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 31 Mar 2008 21:26:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31716</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 37 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0h7hz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98477</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>