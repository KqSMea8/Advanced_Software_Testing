<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:06:36 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-9681/HBASE-9681.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-9681] Basic codec negotiation</title>
                <link>https://issues.apache.org/jira/browse/HBASE-9681</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Basic codec negotiation:&lt;/p&gt;

&lt;p&gt;There should be a default codec used for cell encoding over the RPC connection. This should be configurable in the site file. &lt;/p&gt;

&lt;p&gt;The client can optionally send a message, a manufactured &quot;call&quot; that would otherwise be invalid in some way, to the server asking for a list of supported cell codecs. An older server should simply send back an error because the request is invalid except to servers supporting this feature. A server supporting this feature should send back the requested information or an error indication if something went wrong.&lt;/p&gt;

&lt;p&gt;The client can optionally send a message, a manufactured &quot;call&quot; that would otherwise be invalid in some way, to the server asking for it to use a given codec for all further communication. Otherwise the server will continue to use the default codec. The server will send back a call response acknowledging the change or an error indication if the request cannot be honored.&lt;/p&gt;

&lt;p&gt;Server configuration should support mappings from one codec type to another. We need to handle the case where the server has a codec available that extends the requested type but overrides some behavior in the base class, and this is what should be used in lieu of the base type. It must also be possible to choose an alternate default codec which stands in for the default codec, is compatible with client expectations, but changes the server side behavior as needed in the absence of negotiation. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12671241">HBASE-9681</key>
            <summary>Basic codec negotiation</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12665680">HBASE-9351</parent>
                                    <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="apurtell">Andrew Purtell</reporter>
                        <labels>
                    </labels>
                <created>Sun, 29 Sep 2013 06:11:48 +0000</created>
                <updated>Sun, 19 Jan 2014 00:44:10 +0000</updated>
                                            <version>0.99.0</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="13781282" author="ram_krish" created="Sun, 29 Sep 2013 07:17:15 +0000"  >&lt;p&gt;Correct we need something like this. Where the client is able to tell what it would send and what the server should use.&lt;br/&gt;
The server should respond with what server will be using from the mapping.&lt;/p&gt;</comment>
                            <comment id="13783142" author="ram_krish" created="Tue, 1 Oct 2013 17:15:52 +0000"  >&lt;p&gt;Currently we have a connectionheader, request header and request response on the RPC communication side.&lt;br/&gt;
The connection header is the place where the codec and compression is determined i.e once per connection.  Once the connection header is processed the remaining normal Request headers are processed.&lt;br/&gt;
So as to introduce the basic negotiaion protocol&lt;br/&gt;
1) Need to introduce a connection response that on getting the option from the client to return the list of codecs. So on what basis should the server return them? Check it from the classpath?&lt;br/&gt;
2)This response to be interpreted by the client and select one codec from the list and send that codec as a new response from the client to the server.&lt;br/&gt;
3) To this response, the server tries to use the codec given by the client and again returns a success/failure msg if it was able to use the specified codec.&lt;br/&gt;
4)The mapping of individual codecs and the extended functionality of codecs that needs specific behaviour on the server side am yet to work on that.&lt;/p&gt;</comment>
                            <comment id="13783612" author="apurtell" created="Wed, 2 Oct 2013 03:37:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;The connection header is the place where the codec and compression is determined i.e once per connection. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My thinking is this is where the initial default codec for the connection would established like it is done now for 0.96. Then an additional round of negotiation would optionally happen, hence the idea for using &apos;invalid&apos; calls after the initial connection header processing. I suppose it could be done with new optional fields in the connection header and response instead but this would need to support:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;0.96 clients talking to 0.98 servers expecting them to act like 0.96 servers&lt;/li&gt;
	&lt;li&gt;0.98 clients talking to 0.96 servers&lt;/li&gt;
	&lt;li&gt;0.98 clients talking to 0.98 servers, with codec negotiation, and server side substitution&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;Need to introduce a connection response that on getting the option from the client to return the list of codecs. So on what basis should the server return them? Check it from the classpath?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We can do this with configuration or decorators. Either we add a new site configuration option where a comma separated list of codec classes could go, or we create a new decorator type that marks codecs and scan the classpath for the decorator at server startup and add the discovered classes to a list. &lt;/p&gt;</comment>
                            <comment id="13784821" author="ram_krish" created="Thu, 3 Oct 2013 04:51:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;We can do this with configuration or decorators. Either we add a new site configuration option where a comma separated list of codec classes&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Currently using this as configuration.  We can use reflections to get the Codec related class paths too.  I can later work on that part.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I suppose it could be done with new optional fields in the connection header and response instead but this would need to support:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, adding new fields should work.  Working on it.  I would post a WIP patch on this. I feel  we may need some new request/response too to make this 2 way communication.  And the header of which can be forcefully made negative and the client/server understands the new response/request if the header size is negative?&lt;/p&gt;</comment>
                            <comment id="13784971" author="apurtell" created="Thu, 3 Oct 2013 10:42:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;And the header of which can be forcefully made negative and the client/server understands the new response/request if the header size is negative?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds like a nasty hack Ram. &lt;/p&gt;

&lt;p&gt;So a 0.96 client won&apos;t barf on this new request/response message you propose? How is that a different approach than my OP on this issue? Perhaps you can put up a design doc explaining. &lt;/p&gt;</comment>
                            <comment id="13784982" author="ram_krish" created="Thu, 3 Oct 2013 10:57:47 +0000"  >&lt;p&gt;Sure.. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Sounds like a nasty hack Ram.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I have tried removing this way of getting the reponse back and forth.  Will post a design doc sooner.  &lt;br/&gt;
I am working on  a cleaner way of doing rather than making the header negative.  &lt;/p&gt;</comment>
                            <comment id="13785261" author="eclark" created="Thu, 3 Oct 2013 15:10:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;The client can optionally send a message, a manufactured &quot;call&quot; that would otherwise be invalid in some way, to the server asking for a list of supported cell codecs.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That sounds like a lot of round trips.  Can we have the client send a preference ordered list of codec it wants.&lt;/p&gt;</comment>
                            <comment id="13785856" author="apurtell" created="Fri, 4 Oct 2013 02:56:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;That sounds like a lot of round trips.  Can we have the client send a preference ordered list of codec it wants.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13788255" author="apurtell" created="Mon, 7 Oct 2013 15:58:24 +0000"  >&lt;p&gt;So to modify the OP with Elliot&apos;s suggestion:&lt;/p&gt;

&lt;p&gt;The client can optionally send a message, a manufactured &quot;call&quot; that would otherwise be invalid in some way, to the server asking for a list of supported cell codecs, and also optionally a preference ordered list of the codecs it wants. An older server should simply send back an error because the request is invalid except to servers supporting this feature. &lt;/p&gt;

&lt;p&gt;If the preference ordered list was provided, the server should enable the most preferred codec available for all further communication on the connection and send back a call response acknowledging the change and indicating which codec is in use, or an error indication if something went wrong.&lt;/p&gt;

&lt;p&gt;If a preference ordered list was not provided, or if no codec on the client&apos;s list was available, the server should send back a list of available codecs. The client can optionally send another message, a manufactured &quot;call&quot; that would otherwise be invalid in some way, to the server asking for it to use one of the codecs from the server supplied list for all further communication. Otherwise the server will continue to use the default codec. The server will send back a call response acknowledging the change or an error indication if the request cannot be honored.&lt;/p&gt;

&lt;p&gt;Suggestions for error handling:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Once codec negotiation is initiated by the client, if the client and server can&apos;t agree on a mutually intelligible codec then the connection setup should fail with a big fat ERROR in the log. I think this decision will be up to the client, since it is driving the negotiation. It would be good if the client can also send its decision to the server so the server can print an ERROR in its logs also.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;We should not do anything about incompatible default codecs if codec negotiation is disabled (either due to older servers, or older clients, or a configuration toggle). Connection setup should proceed, but there will be failures later.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13788309" author="stack" created="Mon, 7 Oct 2013 17:07:42 +0000"  >&lt;p&gt;Is this over-engineering? What if we have it that server never drops support for any one codec (at least, within major versions).  Then there is no need of negotiation?  Client just says what they want?  Server fails connection if can&apos;t give client want it wants.  I&apos;m guessing client doesn&apos;t want &apos;fallback&apos;.  If it does, it can do it itself by catching the UnsupportedCodecException and then go again w/ a different codec. See &apos;J.4.3.1. CellBlock Codecs&apos; in &lt;a href=&quot;http://hbase.apache.org/book.html#d0e14417&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hbase.apache.org/book.html#d0e14417&lt;/a&gt;  &lt;/p&gt;</comment>
                            <comment id="13788311" author="ram_krish" created="Mon, 7 Oct 2013 17:11:58 +0000"  >&lt;p&gt;The most important thing would be how we change the default behaviour of the base class in the client and in the server.  We need a mapping for this and this mapping should be configurable. &lt;/p&gt;</comment>
                            <comment id="13788339" author="apurtell" created="Mon, 7 Oct 2013 17:41:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Stack&amp;#93;&lt;/span&gt; Is this over-engineering? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I wanted to put this idea out there and make a concrete proposal rather than a two line JIRA. We can wait on most of this until there are mixed major version deployments or when we have different codec flavors to choose from. Don&apos;t you think we could use something like this for a 1.0 for future-proofing?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;Ram&amp;#93;&lt;/span&gt; The most important thing would be how we change the default behaviour of the base class in the client and in the server. We need a mapping for this and this mapping should be configurable.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What Ram said.&lt;/p&gt;



</comment>
                            <comment id="13788343" author="apurtell" created="Mon, 7 Oct 2013 17:46:41 +0000"  >&lt;p&gt;On the over-engineering comment, if the proposal is ugly, that&apos;s one thing, but implementing coprocessors just to put in security was arguably over-engineering at the time too.&lt;/p&gt;</comment>
                            <comment id="13788352" author="sershe" created="Mon, 7 Oct 2013 17:52:36 +0000"  >&lt;p&gt;Small clarification - why does there have to be an invalid message? &lt;br/&gt;
If it&apos;s a separate method/message, when the new client attempts to send it to an old server, it will get an easily recognizable exception back, right? (Thrift has exception for no-such-method, at least; don&apos;t recall for PB)&lt;/p&gt;</comment>
                            <comment id="13788357" author="apurtell" created="Mon, 7 Oct 2013 17:56:49 +0000"  >&lt;blockquote&gt;&lt;p&gt;Small clarification - why does there have to be an invalid message? If it&apos;s a separate method/message, when the new client attempts to send it to an old server, it will get an easily recognizable exception back, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;For the old server it&apos;s an invalid message. Ok, there I agree that&apos;s over specified, I had one thing in mind but it&apos;s not the only way.&lt;/p&gt;

&lt;p&gt;Edit: Fix formatting&lt;/p&gt;</comment>
                            <comment id="13788384" author="stack" created="Mon, 7 Oct 2013 18:16:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;Don&apos;t you think we could use something like this for a 1.0 for future-proofing?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure.  Was just trying to save having to do fancy-dancing when may not be necessary (just-yet)&lt;/p&gt;</comment>
                            <comment id="13788457" author="apurtell" created="Mon, 7 Oct 2013 19:15:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;Was just trying to save having to do fancy-dancing when may not be necessary (just-yet)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought we could invest a little extra for the future while working in this area, but if I&apos;m the only one who thinks this particular proposal is worthy, then we can just do the part Ram mentioned and address what actually needs doing right now.&lt;/p&gt;</comment>
                            <comment id="13790000" author="ram_krish" created="Wed, 9 Oct 2013 04:00:33 +0000"  >&lt;p&gt;Regarding the mapping, how should the server decide on the mapping?  Should it be from a configuration?  If it is from a configuration then it is not generic because this may be context based.&lt;br/&gt;
One reason why the mapping is important because in some cases the client may ask for a codec but it may not be right for the server to send out all the information say for example some information stored in the tags.  So in that case the server should apply the context based knowledge on what codec it should use.  This is where the mapping comes into picture.&lt;br/&gt;
In an internal discussion, there is a chance that for some cases like Export the server still needs to send out information in tags too.  So in that case the mapping should deal this in a different way.&lt;br/&gt;
So overall this mapping and usage of the codecs on the server side is more context based.  &lt;br/&gt;
When we have sytem tags in future the above argument applies (generally here it is better to suppress the tags from the clients).&lt;br/&gt;
So the connection negotiation part is a protocol that we can decide but the mapping is one which is not very generic.  Can try to make this mapping a pluggable one?&lt;/p&gt;</comment>
                            <comment id="13790050" author="stack" created="Wed, 9 Oct 2013 05:48:05 +0000"  >&lt;p&gt;Give me example of a mapping mighty &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; so I can follow along better.  Rather than one mapping for clients and another for export, would it better to have this switch be done on what permissions the client has?&lt;/p&gt;</comment>
                            <comment id="13790081" author="ram_krish" created="Wed, 9 Oct 2013 06:36:13 +0000"  >&lt;p&gt;When codec is getting used say KeyValueCodec we would be using the codec in in Puts also.  Means the server would use the codec to decode the KVs and add it to the RS.&lt;br/&gt;
The same codec will be used by the server while the client issues a scan or read operation.  This means that the codec is uniform in the client and the server.&lt;br/&gt;
For example, take the case of tags, the client should be able to add the tags through the codec while doing Puts and the server should decode the tags.  Where as while doing the scan the server should suppress the tags using a different codec and the client should be able to decode KVs using that codec.&lt;br/&gt;
Using one codec would be applicable for pure scan cases but when we have read and writes then both client and server should be aware of its own local and the remote codec on the other side.&lt;br/&gt;
Either we could have a mapping in the server side for the codec specified on the client side or we should have specific api in the encoder and decoders like getEncoderForClient, getEncoderForServer.&lt;br/&gt;
Anyway this mapping ( we can say as the intelligence added to server to decide the codec) is always context specific.&lt;/p&gt;</comment>
                            <comment id="13790099" author="eclark" created="Wed, 9 Oct 2013 07:00:51 +0000"  >&lt;p&gt;That sounds more like an in and an out codec.  Why not just add each way.&lt;/p&gt;

&lt;p&gt;eg.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;// This is sent on connection setup after the connection preamble is sent.
&lt;/span&gt;message ConnectionHeader {
  optional UserInformation user_info = 1;
  optional string service_name = 2;
  &lt;span class=&quot;code-comment&quot;&gt;// Cell block codec we will use sending over optional cell blocks.  Server &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; exception
&lt;/span&gt;  &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; cannot deal.  Null means no codec&apos;ing going on so we are pb all the time (SLOW!!!)
&lt;/span&gt;  optional string cell_block_codec_class = 3;

  &lt;span class=&quot;code-comment&quot;&gt;// This one is already there. 
&lt;/span&gt;  &lt;span class=&quot;code-comment&quot;&gt;// For 0.98 &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; is set to a class that&apos;s only present in 0.98+
&lt;/span&gt;  &lt;span class=&quot;code-comment&quot;&gt;// Something like &lt;span class=&quot;code-quote&quot;&gt;&quot;org.apache.hadoop.hbase.codecs.SpecifyEachDirectionCodec&quot;&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;code-comment&quot;&gt;// Obviously the name can use some work.
&lt;/span&gt;  optional string cell_block_compressor_class = 4;

  &lt;span class=&quot;code-comment&quot;&gt;// This will be used on all key values being sent from &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; client to the sever
&lt;/span&gt;  optional string cell_block_compressor_from_client_class = 5;
  &lt;span class=&quot;code-comment&quot;&gt;// This will be used on all all key values being sent to the client from the server.
&lt;/span&gt;  optional string cell_block_compressor_to_client_class = 6;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Older servers will throw an exception if they don&apos;t know the full duplex codec.  So the client will fall back to a 0.96 codec.&lt;/p&gt;

&lt;p&gt;Servers after 0.98 will throw an exception if they can&apos;t accept the codec&apos;s specified for each direction (preferably an info carrying exception with a list of codecs that are accepted). If it&apos;s successful then we just use each the negotiated codec.&lt;/p&gt;

&lt;p&gt;With this there&apos;s no extra round trips on the default case (server and client both support the same codecs).  On the worst case there&apos;s one extra round trip.&lt;/p&gt;</comment>
                            <comment id="13790238" author="ram_krish" created="Wed, 9 Oct 2013 10:54:32 +0000"  >&lt;p&gt;Just to clarify&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Something like &quot;org.apache.hadoop.hbase.codecs.SpecifyEachDirectionCodec&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This will have the two codecs that would be needed by the client and server?&lt;/p&gt;</comment>
                            <comment id="13790617" author="eclark" created="Wed, 9 Oct 2013 17:01:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;This will have the two codecs that would be needed by the client and server?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I was thinking that would be the sentinel that the following two classes are used.&lt;/p&gt;

&lt;p&gt;However I&apos;m still a little slow on picking up when you&apos;d need the client to specify more than one codec.  It seems like in your example having the client specify one codec and having the codec have some idea of where it&apos;s running would make this easier.&lt;/p&gt;

&lt;h2&gt;&lt;a name=&quot;ClientsendingtoServer&quot;&gt;&lt;/a&gt;Client sending to Server&lt;/h2&gt;
&lt;ol&gt;
	&lt;li&gt;Client calls getCodec.&lt;/li&gt;
	&lt;li&gt;Client get Codec1&lt;/li&gt;
	&lt;li&gt;Tells that codec that it&apos;s on the client&lt;/li&gt;
	&lt;li&gt;Client then calls getEncoder &lt;a href=&quot;https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/codec/Codec.html#getEncoder(java.io.OutputStream&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/codec/Codec.html#getEncoder(java.io.OutputStream&lt;/a&gt;)
	&lt;ul&gt;
		&lt;li&gt;This call returns Codec1.ClientEncoder&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;send the kv&apos;s to the codec&apos;s encoder who encodes the key values placing the tags at the end of the byte stream&lt;/li&gt;
	&lt;li&gt;Client sends that encoded byte stream to the server after specifying the codec on the header.&lt;/li&gt;
	&lt;li&gt;Server then looks up the same codec codec by calling getCodec&lt;/li&gt;
	&lt;li&gt;Server gets Codec1&lt;/li&gt;
	&lt;li&gt;Server then tells the codec that it&apos;s on the server&lt;/li&gt;
	&lt;li&gt;Server gets the decoder &lt;a href=&quot;https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/codec/Codec.html#getDecoder(java.io.InputStream&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/codec/Codec.html#getDecoder(java.io.InputStream&lt;/a&gt;)
	&lt;ul&gt;
		&lt;li&gt;This call returns Codec1.ServerDecoder&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Server feeds the decoder the bytes who preforms the exact inverse of what was done by the client&apos;s encoder.&lt;/li&gt;
&lt;/ol&gt;


&lt;h2&gt;&lt;a name=&quot;ServersendingtoClient&quot;&gt;&lt;/a&gt;Server sending to Client&lt;/h2&gt;
&lt;ol&gt;
	&lt;li&gt;Server then looks up the codec specified in the connection header&lt;/li&gt;
	&lt;li&gt;Server gets Codec1&lt;/li&gt;
	&lt;li&gt;Server then tells the codec that it&apos;s on the server&lt;/li&gt;
	&lt;li&gt;Server gets the encoder &lt;a href=&quot;https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/codec/Codec.html#getDecoder(java.io.InputStream&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hbase.apache.org/devapidocs/org/apache/hadoop/hbase/codec/Codec.html#getDecoder(java.io.InputStream&lt;/a&gt;)
	&lt;ul&gt;
		&lt;li&gt;This call returns Codec1.ServerEncoder&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Server feeds the encoder the cells.  It stips any system tags and then encodes the cells by moving the tags to the back end (or whatever is needed)&lt;/li&gt;
	&lt;li&gt;Server sends these bytes&lt;/li&gt;
	&lt;li&gt;Client then gets the Call result with the encoded bytes.&lt;/li&gt;
	&lt;li&gt;Notices they are encoded so callse getCodec&lt;/li&gt;
	&lt;li&gt;The client gets Codec1&lt;/li&gt;
	&lt;li&gt;The client then informs Codec1 that it&apos;s on the client&lt;/li&gt;
	&lt;li&gt;The client gets the decoder
	&lt;ul&gt;
		&lt;li&gt;This call returns Codec1.ClientDecoder&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;This decoder knows nothing about system tags so it only preforms the inverse of moving the tags to the end of the byte stream.&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13791203" author="ram_krish" created="Thu, 10 Oct 2013 05:02:33 +0000"  >&lt;p&gt;Correct.. Agree.  So here the mapping is  we have a codec say the ClientSideCodec and the ServerSideCodec for the same type of base codec.&lt;br/&gt;
The encoder and decoder will be called based on the process that calls it.. (either the client or the server). &lt;br/&gt;
We have considered this way also.  Let me see what changes would be needed for getting this.   &lt;/p&gt;</comment>
                            <comment id="13791222" author="ram_krish" created="Thu, 10 Oct 2013 05:50:21 +0000"  >&lt;p&gt;The impl that I have does the same but in a bit different way.  So I would add a configuration say a mapping between two codecs.  &lt;br/&gt;
Say CodecA is related with CodecB.  Client would say it would be using CodecA on the header and server would pick up CodecB from the above mapping configuration(if found).&lt;br/&gt;
The CodecA.getEncoder and CodecB.getDecoder would work in sync (for client to server communication).&lt;br/&gt;
The CodecB.getEncoder and CodecA.getDecoder() would work in sycn (for server to client communication).&lt;/p&gt;



</comment>
                            <comment id="13791226" author="eclark" created="Thu, 10 Oct 2013 05:57:08 +0000"  >&lt;p&gt;Yeah that can work too(I&apos;m not sure which would be cleaner) as long  as anything that uses the mapping is a new codec so there&apos;s no possibility of older client&apos;s being confused.&lt;/p&gt;</comment>
                            <comment id="13812602" author="anoop.hbase" created="Mon, 4 Nov 2013 04:10:15 +0000"  >&lt;p&gt;Ram&lt;br/&gt;
   So it will be like the server will always NOT write back the cell tags? Or that also based on some context information?&lt;br/&gt;
There is Export tool which uses MR based scan. In this case the server should serialize back the tags also?&lt;/p&gt;</comment>
                            <comment id="13812803" author="ram_krish" created="Mon, 4 Nov 2013 12:34:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;So it will be like the server will always NOT write back the cell tags?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Currently it is based on the mapping that we provide and no context is available with the client.  &lt;br/&gt;
For export tool we may have to see how to over come the problem. &lt;br/&gt;
When we have any type of negotiation &lt;br/&gt;
0.96 clients talking to 0.98 servers expecting them to act like 0.96 servers would be another tricky part because the we cannot use a new codec here as the 0.96 client is not aware of it.&lt;/p&gt;</comment>
                            <comment id="13812814" author="anoop.hbase" created="Mon, 4 Nov 2013 13:07:30 +0000"  >&lt;p&gt;So here basically using a different Encoder at server side, we will or will not serialize the tags back to the client. In case of scan where we use Codec based serialization of Result cells in the PayloadCarryingRpcController&apos;s payload, this different Codec will work. But what about pure PB based request, response? In this case the cells at server side will be converted to PB cells and returned. In the current code this conversion is not considering cell tags so we are not serializing back the tags as of now. For get request, there will be PB based return.&lt;/p&gt;</comment>
                            <comment id="13833227" author="apurtell" created="Tue, 26 Nov 2013 23:43:33 +0000"  >&lt;p&gt;Where is this issue &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; or &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;? Planning on branching 0.98 Sunday 12/1.&lt;/p&gt;</comment>
                            <comment id="13875785" author="apurtell" created="Sun, 19 Jan 2014 00:44:10 +0000"  >&lt;p&gt;Moving out of 0.98&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 29 Sep 2013 07:17:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>350947</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 47 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1oidb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>351238</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>