<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:05:29 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-15619/HBASE-15619.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-15619] Performance regression observed: Empty random read(get) performance of branch-1 worse than 0.98</title>
                <link>https://issues.apache.org/jira/browse/HBASE-15619</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;As titled, I observed the perf regression in the final stress testing before upgrading our online cluster to 1.x. More details as follows:&lt;/p&gt;

&lt;p&gt;1. HBase version in the comparison test:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;0.98: based on 0.98.12 with some backports, among which &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11297&quot; title=&quot;Remove some synchros in the rpcServer responder&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11297&quot;&gt;&lt;del&gt;HBASE-11297&lt;/del&gt;&lt;/a&gt; is the most important perf-related one (especially under high stress)&lt;/li&gt;
	&lt;li&gt;1.x: checked 3 releases in total&lt;br/&gt;
     1) 1.1.2 with important perf fixes/improvements including &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15031&quot; title=&quot;Fix merge of MVCC and SequenceID performance regression in branch-1.0 for Increments&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15031&quot;&gt;&lt;del&gt;HBASE-15031&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14465&quot; title=&quot;Backport &amp;#39;Allow rowlock to be reader/write&amp;#39; to branch-1&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14465&quot;&gt;&lt;del&gt;HBASE-14465&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
     2) 1.1.4 release&lt;br/&gt;
     3) 1.2.1RC1&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2. Test environment&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;YCSB: 0.7.0 with &lt;a href=&quot;https://github.com/brianfrankcooper/YCSB/pull/651&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;YCSB-651&lt;/a&gt; applied&lt;/li&gt;
	&lt;li&gt;Client: 4 physical nodes, each with 8 YCSB instance, each instance with 100 threads&lt;/li&gt;
	&lt;li&gt;Server: 1 Master with 3 RS, each RS with 256 handlers and 64G heap&lt;/li&gt;
	&lt;li&gt;Hardware: 64-core CPU, 256GB Mem, 10Gb Net, 1 PCIe-SSD and 11 HDD, same hardware for client and server&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;3. Test cases&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;-p fieldcount=1 -p fieldlength=128 -p readproportion=1&lt;/li&gt;
	&lt;li&gt;case #1: read against empty table&lt;/li&gt;
	&lt;li&gt;&lt;del&gt;case #2: lrucache 100% hit&lt;/del&gt;&lt;/li&gt;
	&lt;li&gt;&lt;del&gt;case #3: BLOCKCACHE=&amp;gt;false&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;4. Test result&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;1.1.4 and 1.2.1 have a similar perf (less than 2% deviation) as 1.1.2+, so will only paste comparison data of 0.98.12+ and 1.1.2+&lt;/li&gt;
	&lt;li&gt;per-RS Throughput(ops/s)
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;HBaseVersion&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;case#1&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&lt;del&gt;case#2&lt;/del&gt;&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&lt;del&gt;case#3&lt;/del&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.98.12+&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;383562&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;del&gt;257493&lt;/del&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;del&gt;47594&lt;/del&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.1.2+&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;363050&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;del&gt;232757&lt;/del&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;del&gt;35872&lt;/del&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
	&lt;li&gt;AverageLatency(us)
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;HBaseVersion&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;case#1&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&lt;del&gt;case#2&lt;/del&gt;&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&lt;del&gt;case#3&lt;/del&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.98.12+&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2774&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;del&gt;4134&lt;/del&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;del&gt;22371&lt;/del&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.1.2+&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2930&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;del&gt;4572&lt;/del&gt;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&lt;del&gt;29690&lt;/del&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It seems there&apos;s perf regression on RPCServer (we tried 0.98 client against 1.x server and observed a similar perf to 1.x client)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12957289">HBASE-15619</key>
            <summary>Performance regression observed: Empty random read(get) performance of branch-1 worse than 0.98</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="carp84">Yu Li</assignee>
                                    <reporter username="carp84">Yu Li</reporter>
                        <labels>
                    </labels>
                <created>Fri, 8 Apr 2016 18:00:48 +0000</created>
                <updated>Tue, 9 Aug 2016 06:46:04 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>18</watches>
                                                                <comments>
                            <comment id="15232622" author="carp84" created="Fri, 8 Apr 2016 18:06:21 +0000"  >&lt;p&gt;We&apos;re still trying hard to locate the problem, and will share our findings here.&lt;/p&gt;

&lt;p&gt;There&apos;re quite some changes from 0.98.12 to 1.2.1, so I&apos;m expecting some help from community. Any hint on what change might cause the regression or any suggestion would be highly appreciated. Thanks!&lt;/p&gt;</comment>
                            <comment id="15232638" author="carp84" created="Fri, 8 Apr 2016 18:16:01 +0000"  >&lt;p&gt;Forget to mention, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15315&quot; title=&quot;Remove always set super user call as high priority&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15315&quot;&gt;&lt;del&gt;HBASE-15315&lt;/del&gt;&lt;/a&gt; is required if using the same user to launch client and server for 1.2.1RC1 testing.&lt;/p&gt;</comment>
                            <comment id="15232644" author="vrodionov" created="Fri, 8 Apr 2016 18:19:23 +0000"  >&lt;p&gt;This is what I do observe in 2.0 : &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15540&quot; title=&quot;Hot spots&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15540&quot;&gt;HBASE-15540&lt;/a&gt;. May be all 1.1+ has the same issue. &lt;/p&gt;

</comment>
                            <comment id="15232660" author="carp84" created="Fri, 8 Apr 2016 18:25:54 +0000"  >&lt;p&gt;Thanks for the hint &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;. Have you done any comparison between 2.0 and 0.98 also? Are hot spots observed in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15540&quot; title=&quot;Hot spots&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15540&quot;&gt;HBASE-15540&lt;/a&gt; only for branch-1/2.0, or maybe existing issues all along?&lt;/p&gt;</comment>
                            <comment id="15232716" author="vrodionov" created="Fri, 8 Apr 2016 18:58:49 +0000"  >&lt;p&gt;I have not done any comparisons. I was profiling end-to-end test case and found this on a client side. This may explain 10 may be 20 % perf drop due to heavy cpu and gc usage on a client side. This is in the current master. Another issue, related to excessive GC on client side in 2.0 was fixed in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15479&quot; title=&quot;No more garbage or beware of autoboxing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15479&quot;&gt;&lt;del&gt;HBASE-15479&lt;/del&gt;&lt;/a&gt;. This may explain some worse latencies numbers. &lt;/p&gt;</comment>
                            <comment id="15233744" author="stack" created="Sat, 9 Apr 2016 21:39:15 +0000"  >&lt;p&gt;Marking critical. Let me try and reproduce what you are seeing &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15233890" author="stack" created="Sun, 10 Apr 2016 05:50:08 +0000"  >&lt;p&gt;Which ycsb client did you run with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt;? hbase98 or hbase10 or did you change the ycsb client with the runs? Thanks.&lt;/p&gt;</comment>
                            <comment id="15234425" author="carp84" created="Mon, 11 Apr 2016 02:33:50 +0000"  >&lt;p&gt;Thanks for chim in sir &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Which ycsb client did you run with Yu Li? hbase98 or hbase10 or did you change the ycsb client with the runs?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;hbase98 against 0.98.12+ and hbase10 against 1.x. We also tried hbase98 client against 1.x server and confirmed no perf enhancement, so I think we could focus on the server side debugging. Thanks.&lt;/p&gt;</comment>
                            <comment id="15234429" author="carp84" created="Mon, 11 Apr 2016 02:39:21 +0000"  >&lt;p&gt;I see, thanks for sharing the information sir &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;. I also tried 0.98 client against 1.x server and got a similar perf data, so here in this JIRA I incline to focus on the server side debugging. Good work and findings though in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15540&quot; title=&quot;Hot spots&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15540&quot;&gt;HBASE-15540&lt;/a&gt;/&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15479&quot; title=&quot;No more garbage or beware of autoboxing&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15479&quot;&gt;&lt;del&gt;HBASE-15479&lt;/del&gt;&lt;/a&gt; etc. and I&apos;ll definitely keep an eye on them. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="15235283" author="carp84" created="Mon, 11 Apr 2016 15:25:58 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; and all:&lt;br/&gt;
Please ignore case#2 and case#3, today I just found that &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14061&quot; title=&quot;Support CF-level Storage Policy&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14061&quot;&gt;HBASE-14061&lt;/a&gt; is not committed yet thus not included in release 1.1.4/1.2.1, so I was actually comparing ONE_SSD read for 0.98.12+ and HOT(all HDD) for 1.1.4/1.2.1. After loading data with our 1.1.2+ to generate ONE_SSD hfiles, no more regression observed (the issue does exist in our 1.1.2+, but that&apos;s my own problem and will resolve it in private). Sorry for the bothering.&lt;/p&gt;

&lt;p&gt;However, for case#1 the regression does exist, so the RPCServer part may still have some problem. Will update the JIRA title and description.&lt;/p&gt;</comment>
                            <comment id="15235702" author="vrodionov" created="Mon, 11 Apr 2016 18:39:18 +0000"  >&lt;p&gt;With hardware:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hardware: 64-core CPU, 256GB Mem, 10Gb Net, 1 PCIe-SSD and 11 HDD, same hardware for client and server&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;only 47K reads from file system? for 3 RS? 15.7K per server? for PCIe-SSD? That is ridiculously low number.  &lt;/p&gt;</comment>
                            <comment id="15236298" author="stack" created="Tue, 12 Apr 2016 00:14:02 +0000"  >&lt;p&gt;I ran loadings comparing 0.98.13 (works w/ jdk8) to tip of 1.1 and branch-1.&lt;/p&gt;

&lt;p&gt;The diagram shows three versions of the software all undergoing 5 loadings.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;C-Empty is running ycsb workload c against an empty table&lt;/li&gt;
	&lt;li&gt;load is running 20minutes of loading of table&lt;/li&gt;
	&lt;li&gt;A is workload &apos;a&apos;; i.e. 50/50 read/write for 20minutes&lt;/li&gt;
	&lt;li&gt;C is workload &apos;c&apos; against loaded table&lt;/li&gt;
	&lt;li&gt;C` is running workload c alone where we are get keys most of the time but fail to find values almost as much.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;From the diagram we can see:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;For empty table, indeed there is regression.&lt;/li&gt;
	&lt;li&gt;For load phase, 1.1 and branch-1 tip are a little slower&lt;/li&gt;
	&lt;li&gt;For workload &apos;A&apos;, 50/50, all are about same.&lt;/li&gt;
	&lt;li&gt;For workload &apos;C&apos; when our random read is actually fetching keys, 1.1 and branch-1 are about 25% better.&lt;/li&gt;
	&lt;li&gt;For the case where we are reading values about 60% of the time and doing reads of non-existent values about 40% of the time, we are about 15% slower in 1.1 and branch-1.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I&apos;m thinking that us being bad at reading non-existent values is a problem but not a critical issue. What you think &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt;? Seems like 1.1 is about the same as 0.98 otherwise (I thought it was much better).&lt;/p&gt;</comment>
                            <comment id="15236306" author="stack" created="Tue, 12 Apr 2016 00:20:44 +0000"  >&lt;p&gt;Knocking it down from critical. Let me know if you think different &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15236322" author="stack" created="Tue, 12 Apr 2016 00:26:48 +0000"  >&lt;p&gt;Flame graphs from when were were doing the C` workload where we were mostly random reading values with about 40% of the time reading nothing from hbase.&lt;/p&gt;

&lt;p&gt;I don&apos;t think these help  much. The shape of the server has changed too much. Would be more useful if they&apos;d been for the empty table. Then we might see where they are spending the extra time... though flight recording might give better detail. I didn&apos;t do this. Let me know if you want me to (you&apos;d probably be better-off doing it yourself &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt; if bad performance reading an empty table is important for you). &lt;/p&gt;</comment>
                            <comment id="15236482" author="carp84" created="Tue, 12 Apr 2016 02:37:46 +0000"  >&lt;p&gt;Thanks for the double check &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;m thinking that us being bad at reading non-existent values is a problem but not a critical issue. What you think Yu Li?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed, and make sense to knock it down from critical.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Seems like 1.1 is about the same as 0.98 otherwise (I thought it was much better).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Same feeling, it&apos;s a pity, but also means we still have the space to improve. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;flight recording might give better detail. I didn&apos;t do this. Let me know if you want me to (you&apos;d probably be better-off doing it yourself Yu Li if bad performance reading an empty table is important for you).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let me further dig into the empty reading case and get back here if any findings, what you&apos;ve done is already very helpful, thank you sir!&lt;/p&gt;</comment>
                            <comment id="15236485" author="carp84" created="Tue, 12 Apr 2016 02:44:13 +0000"  >&lt;p&gt;Sharp eyes! But it&apos;s indeed the case. We checked the jstack and found some locks on the HDFS layer (which I guess only emerges with PCIe-SSD), and our people already find a way to improve that. Will link the issue here as soon as we create any HDFS JIRA (probably days later though).&lt;/p&gt;</comment>
                            <comment id="15333640" author="carp84" created="Thu, 16 Jun 2016 12:00:28 +0000"  >&lt;p&gt;It seems &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15971&quot; title=&quot;Regression: Random Read/WorkloadC slower in 1.x than 0.98&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15971&quot;&gt;&lt;del&gt;HBASE-15971&lt;/del&gt;&lt;/a&gt; has resolved the problem.&lt;/p&gt;</comment>
                            <comment id="15334452" author="enis" created="Thu, 16 Jun 2016 18:59:49 +0000"  >&lt;blockquote&gt;&lt;p&gt;We checked the jstack and found some locks on the HDFS layer (which I guess only emerges with PCIe-SSD), and our people already find a way to improve that.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Any jiras that you can refer to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="15334835" author="stack" created="Thu, 16 Jun 2016 22:30:47 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt; I think the difference between my tests here and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15971&quot; title=&quot;Regression: Random Read/WorkloadC slower in 1.x than 0.98&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15971&quot;&gt;&lt;del&gt;HBASE-15971&lt;/del&gt;&lt;/a&gt; are that in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15971&quot; title=&quot;Regression: Random Read/WorkloadC slower in 1.x than 0.98&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15971&quot;&gt;&lt;del&gt;HBASE-15971&lt;/del&gt;&lt;/a&gt; I was trying to overload the regionserver and had many YCSB instances running whereas on the former, I had a single instance running. Doing the overloading seems to have brought out the issue you saw. Have you tried &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15971&quot; title=&quot;Regression: Random Read/WorkloadC slower in 1.x than 0.98&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15971&quot;&gt;&lt;del&gt;HBASE-15971&lt;/del&gt;&lt;/a&gt; on your setup? Hopefully you&apos;ll see an improvement...&lt;/p&gt;</comment>
                            <comment id="15335276" author="carp84" created="Fri, 17 Jun 2016 02:55:58 +0000"  >&lt;p&gt;Yep, the whole work is still not completely done but still something to share in advance:&lt;br/&gt;
1. &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-9668&quot; title=&quot;Optimize the locking in FsDatasetImpl&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-9668&quot;&gt;HDFS-9668&lt;/a&gt;&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;When network-card bandwidth enhanced to 10Gb, there would be much higher IO pressure on disk, and HDD is more frequently exhausted with 100% util. In this case, we found SSD read/write also affected and RT reached as high as ~10s. &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-9668&quot; title=&quot;Optimize the locking in FsDatasetImpl&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-9668&quot;&gt;HDFS-9668&lt;/a&gt; is the correct way to resolve it&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;2. Improvements on ShortCircuitCache (SCC)&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;We found some locking problem on SCC and my workmate already made a fix, testing done on our side but still not opening JIRA, will add the link as soon as JIRA created for this.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15335287" author="carp84" created="Fri, 17 Jun 2016 03:02:06 +0000"  >&lt;p&gt;I see, then &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15971&quot; title=&quot;Regression: Random Read/WorkloadC slower in 1.x than 0.98&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15971&quot;&gt;&lt;del&gt;HBASE-15971&lt;/del&gt;&lt;/a&gt; is more likely to resolve the problem here since I did the test with multiple YCSB instances.&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ll for sure try &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15971&quot; title=&quot;Regression: Random Read/WorkloadC slower in 1.x than 0.98&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15971&quot;&gt;&lt;del&gt;HBASE-15971&lt;/del&gt;&lt;/a&gt; out and update the result here (maybe days later though due to online supporting work...). Thanks for the information &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15395137" author="carp84" created="Wed, 27 Jul 2016 06:40:02 +0000"  >&lt;p&gt;Here is the improvement on SCC, as promised: &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-10690&quot; title=&quot;Optimize insertion/removal of replica in ShortCircuitCache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-10690&quot;&gt;&lt;del&gt;HDFS-10690&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What&apos;s more, &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-9668&quot; title=&quot;Optimize the locking in FsDatasetImpl&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-9668&quot;&gt;HDFS-9668&lt;/a&gt; is not enough to resolve the mentioned problem, so we&apos;ve done more work but still in testing phase, JFYI.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12992517">HDFS-10690</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="12310051">
                    <name>Supercedes</name>
                                                                <inwardlinks description="is superceded by">
                                        <issuelink>
            <issuekey id="12976215">HBASE-15971</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12798153" name="compare.png" size="85300" author="stack" created="Tue, 12 Apr 2016 00:14:02 +0000"/>
                            <attachment id="12798158" name="flamegraph-108588.098.svg" size="1169592" author="stack" created="Tue, 12 Apr 2016 00:26:48 +0000"/>
                            <attachment id="12798157" name="flamegraph-1221.branch-1.svg" size="1092354" author="stack" created="Tue, 12 Apr 2016 00:26:48 +0000"/>
                            <attachment id="12798156" name="flamegraph-135684.1.1.svg" size="1062656" author="stack" created="Tue, 12 Apr 2016 00:26:48 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 8 Apr 2016 18:19:23 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            20 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2vuuv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>