<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:10:22 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3455/HBASE-3455.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3455] Heap fragmentation in region server</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3455</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Stop-the-world GC pauses have long been a problem in HBase. &quot;Concurrent mode failures&quot; can usually be tuned around by setting the initiating occupancy fraction low, but eventually the heap becomes fragmented and a promotion failure occurs.&lt;/p&gt;

&lt;p&gt;This JIRA is to do research/experiments about the heap fragmentation issue and possible solutions.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12496160">HBASE-3455</key>
            <summary>Heap fragmentation in region server</summary>
                <type id="13" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/genericissue.png">Brainstorming</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="tlipcon">Todd Lipcon</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 Jan 2011 18:08:01 +0000</created>
                <updated>Fri, 20 Nov 2015 12:43:05 +0000</updated>
                            <resolved>Mon, 7 Feb 2011 21:41:34 +0000</resolved>
                                    <version>0.90.1</version>
                                    <fixVersion>0.90.1</fixVersion>
                                    <component>Performance</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>20</watches>
                                                                <comments>
                            <comment id="12984311" author="tlipcon" created="Thu, 20 Jan 2011 18:08:46 +0000"  >&lt;p&gt;Here&apos;s a PDF showing some graphs about heap fragmentation. These graphs indicate that memstore is way worse of a problem than block cache, though block cache churn can also introduce some fragmentation.&lt;/p&gt;</comment>
                            <comment id="12984312" author="stack" created="Thu, 20 Jan 2011 18:10:05 +0000"  >&lt;p&gt;Upping to critical.  I love this report of yours Todd.&lt;/p&gt;</comment>
                            <comment id="12984313" author="tlipcon" created="Thu, 20 Jan 2011 18:12:30 +0000"  >&lt;p&gt;Here&apos;s the python script I use to convert the FLS statistics log into a TSV format for graphing.&lt;/p&gt;

&lt;p&gt;I was using the following flags with JVM 6u23:&lt;br/&gt;
&lt;del&gt;XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -verbose:gc -Xloggc:$HBASE_HOME/logs/gc&lt;/del&gt;$(hostname)-hbase.log&lt;br/&gt;
-XX:PrintCMSStatistics=1 -XX:PrintFLSStatistics=1&lt;/p&gt;

&lt;p&gt;Might need to fiddle with the regex in the script if you use different flags or a different JVM release.&lt;/p&gt;</comment>
                            <comment id="12984324" author="tlipcon" created="Thu, 20 Jan 2011 18:38:11 +0000"  >&lt;p&gt;For reference, the R commands I use to produce graphs look like:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
library(ggplot2)
d &amp;lt;- read.table(file=&lt;span class=&quot;code-quote&quot;&gt;&quot;/tmp/fls.txt&quot;&lt;/span&gt;, header=T)
qplot(time, value, data=melt(subset(d, time&amp;gt;122000&amp;amp;time&amp;lt;127000), c(&lt;span class=&quot;code-quote&quot;&gt;&quot;time&quot;&lt;/span&gt;), measure.vars=c(&lt;span class=&quot;code-quote&quot;&gt;&quot;free_space&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;max_chunk&quot;&lt;/span&gt;)), facets=variable~., geom=&lt;span class=&quot;code-quote&quot;&gt;&quot;line&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And since JIRA screwed up formatting on those JVM options, repaste:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;-XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+PrintTenuringDistribution -verbose:gc
-Xloggc:$HBASE_HOME/logs/gc$(hostname)-hbase.log
-XX:PrintCMSStatistics=1 -XX:PrintFLSStatistics=1
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12984552" author="tatsuya6502" created="Fri, 21 Jan 2011 04:01:08 +0000"  >&lt;p&gt;Very nice report, Todd. &lt;/p&gt;

&lt;p&gt;Here is my thought on memstore, though, this is pure assumption and I need somebody to verify it. &lt;/p&gt;

&lt;p&gt;1. Puts creates KeyValues, and each of them has their own &lt;b&gt;small&lt;/b&gt; byte array.&lt;br/&gt;
2. Those KeyValues are stored in a memstore and survive for a few CMS GCs, get promoted to the old generation. &lt;br/&gt;
3. The memstore eventually gets full and flushed. KeyValues and their small byte arrays on the old generation are GCed, resulting the fragmentation. &lt;/p&gt;


&lt;p&gt;To workaround this, we could use a &lt;b&gt;larger&lt;/b&gt; (some MB?) byte array and allocate some portion of it to each kv. (Share one big array with a number of KeyValues instead of having small their own arrays.)  When the memstore is flushed, we can wipe the contents out and reuse the array. In this way, those byte arrays will stay in the old generation forever and never bother the GC.&lt;/p&gt;</comment>
                            <comment id="12984554" author="tlipcon" created="Fri, 21 Jan 2011 04:09:32 +0000"  >&lt;p&gt;Hi Tatsuya. Thanks for the comments. We were actually discussing this the other day and this morning in IRC and came to similar conclusions. I&apos;ll try to write up a summary of the various solutions and some experiments we can try.&lt;/p&gt;

&lt;p&gt;I&apos;m also experimenting again with G1GC - finally got a build environment for JDK7 so I can add some printfs and understand why it hasn&apos;t worked well for us yet.&lt;/p&gt;</comment>
                            <comment id="12984562" author="tatsuya6502" created="Fri, 21 Jan 2011 04:41:57 +0000"  >&lt;p&gt;Hi Todd. Thanks for your comment. I&apos;m looking forwared to seeing the next report!&lt;/p&gt;

&lt;p&gt;So, you&apos;re going to debug G1GC itself? Wow, you&apos;re the memory guy. G1GC sounds promissing and I wonder why it doesn&apos;t work well for us. Maybe, KeyValues from different memstores are mixed up in all over the place so it can&apos;t release any region?&lt;/p&gt;</comment>
                            <comment id="12986283" author="tlipcon" created="Tue, 25 Jan 2011 09:08:24 +0000"  >&lt;p&gt;Yep, I think the KVs are all mixed up like you said.&lt;/p&gt;

&lt;p&gt;I did make some progress on G1 - trying to get them to include a couple patches which make it perform somewhat better than CMS, at least in my environment.&lt;/p&gt;

&lt;p&gt;Also just did a patch tonight which will try to collapse the byte arrays together into large ones, will run it overnight and get a graph.&lt;/p&gt;</comment>
                            <comment id="12986284" author="tlipcon" created="Tue, 25 Jan 2011 09:10:44 +0000"  >&lt;p&gt;here&apos;s a fairly simple patch that adds a moderately efficient (read: CAS-happy) allocation arena per memstore. When a KV gets added to the memstore it clones its byte array into the arena. Hopefully this means that when the memstore gets freed, it will be able to release large chunks of heap.&lt;/p&gt;</comment>
                            <comment id="12986416" author="tlipcon" created="Tue, 25 Jan 2011 15:02:10 +0000"  >&lt;p&gt;Hey cool, looks like it worked. None of my regionservers had any full GCs. Max chunk size is still around 700MB after the YCSB load, and I think total throughput actually went up as well. &lt;/p&gt;</comment>
                            <comment id="12986472" author="stack" created="Tue, 25 Jan 2011 16:10:10 +0000"  >&lt;p&gt;Hotdog!&lt;/p&gt;</comment>
                            <comment id="12986575" author="stack" created="Tue, 25 Jan 2011 18:21:01 +0000"  >&lt;p&gt;Should this wait notify rather than spin?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (!initialized) {
+        &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.yield();
+      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Patch is small.  Reasonable.  Lets commit it!&lt;/p&gt;</comment>
                            <comment id="12986698" author="tlipcon" created="Tue, 25 Jan 2011 21:34:31 +0000"  >&lt;p&gt;There&apos;s one big flaw in this which I&apos;ve now realized: upserts&lt;/p&gt;

&lt;p&gt;The issue is that, even after we upsert a KV and drop its reference from the KV set, we don&apos;t actually free any memory, since that KV&apos;s byte[] was just a pointer to a larger chunk. So assumedly there is at least one other KV pointing into that same chunk. Let&apos;s say a 2M chunk supports 20000 incrementable cells. If we increment 19999 of them, we still have one KV pointing to it which uses up 2MB of RAM.&lt;/p&gt;

&lt;p&gt;Not sure exactly how to solve this... will sleep on it a few days...&lt;/p&gt;

&lt;p&gt;One thought is that the Memstore can keep an IdentityHashMap&amp;lt;byte[], AtomicInteger&amp;gt; chunk-&amp;gt;referred_size map around. When we upsert something (and hence remove its KV from kvset) we decrement the value in this map for the chunk it referred to. If the amount of referred-to data in a chunk falls below some threshold (say 50%) then we run some &quot;compaction&quot; code which relocates the remaining values to a new contiguous chunk. Performance impact of this might be too much, but maybe addressable with striping the counters or something.&lt;/p&gt;</comment>
                            <comment id="12986699" author="tlipcon" created="Tue, 25 Jan 2011 21:36:50 +0000"  >&lt;p&gt;Here&apos;s a working version of the patch. Fails some test cases around ICV, probably will blow up with OOME under an ICV workload&lt;/p&gt;</comment>
                            <comment id="12986726" author="tlipcon" created="Tue, 25 Jan 2011 22:24:35 +0000"  >&lt;p&gt;As expected, when I turned on ICV, I got a full GC within a few minutes.&lt;/p&gt;</comment>
                            <comment id="12986840" author="tatsuya6502" created="Wed, 26 Jan 2011 04:23:22 +0000"  >&lt;p&gt;Maybe this is not an optimal solution but how about this? Forget about reclaiming individual free spaces from old cell values, but pretend them as live spaces and let Memstore to flush. Memstore flusher won&apos;t write old cell values to HFile as they are not referenced from the Memstore. &lt;/p&gt;

&lt;p&gt;You could get a stupid smaller HFiles if you do lots of ICVs, but a minor compaction will soon merge them into one moderate-sized HFile, so it&apos;s not going to be a problem.&lt;/p&gt;</comment>
                            <comment id="12986853" author="ryanobjc" created="Wed, 26 Jan 2011 05:19:46 +0000"  >&lt;p&gt;for ICVs, we might be force flushing due to the maximum hlog fairly&lt;br/&gt;
&apos;frequently&apos; anyways.  if we spill to the next slab, will we let the&lt;br/&gt;
GC free up the previous slabs?  maybe once we fill up an allocation we&lt;br/&gt;
dereference the slab from the slab manager that way we can let GC do&lt;br/&gt;
the hard work for us?&lt;/p&gt;</comment>
                            <comment id="12986858" author="stack" created="Wed, 26 Jan 2011 06:04:17 +0000"  >&lt;p&gt;@Ryan Your idea will only work if the slab is full of ICVs all with same coordinates, is that right?  Or you thinking something different?  What if we did give each ICV a 2MB slab (or less) and then when it overflowed, we&apos;d let go of the old slab as you suggest?&lt;/p&gt;

&lt;p&gt;@Todd I don&apos;t think the rewrite of a slab would be that bad perf-wise&lt;/p&gt;

&lt;p&gt;@Tatsuya IIRC, we used to do iCVs this way but we&apos;d end up flushing way too much; thats when the replacing old values was putting into effect.&lt;/p&gt;</comment>
                            <comment id="12986864" author="tatsuya6502" created="Wed, 26 Jan 2011 06:43:49 +0000"  >&lt;p&gt;Just realized ICV means fixed-size KeyValue, right? These old and new KeyValues must have the exactly same key (except fixed-size timestamp) with a fixed-size value (Long value). Maybe we can just override the old value on the slab with the new value?&lt;/p&gt;</comment>
                            <comment id="12986866" author="ryanobjc" created="Wed, 26 Jan 2011 06:49:45 +0000"  >&lt;p&gt;we cannot replace the old value with the new one because there is no&lt;br/&gt;
way to atomically do that.&lt;/p&gt;</comment>
                            <comment id="12987235" author="streamy" created="Wed, 26 Jan 2011 21:33:55 +0000"  >&lt;p&gt;A slight aside, but in a heavy concurrency increment-only use case we are CPU bound with 80% or so being used in MemStore / CSLM operations.  We are playing with different ways of optimizing the MemStore+Increments use case.  Today, it takes between 3 and 4 CSLM operations for each increment.  We should be able to get this down to 1 or 2, but in all likelihood this would be an increment-only optimization.  Rather than modifying the original bytes in place, we are making a new byte[] and modifying the KV to point at the new byte[].  This keeps the modification atomic and prevents build-up (and costly removal) of KVs.&lt;/p&gt;

&lt;p&gt;Will file a JIRA for this.&lt;/p&gt;</comment>
                            <comment id="12987842" author="tlipcon" created="Fri, 28 Jan 2011 00:09:26 +0000"  >&lt;p&gt;New patch where this feature is off-by-default, enabled by setting hbase.hregion.memstore.mslab.enabled&lt;/p&gt;</comment>
                            <comment id="12988279" author="tlipcon" created="Fri, 28 Jan 2011 22:22:27 +0000"  >&lt;p&gt;Oops, missed one test change before.&lt;/p&gt;

&lt;p&gt;This patch should be good to go. I tested under heavy load (95% write, 5% increment, large working set to trigger block cache churn) on a cluster for about 16 hours, no full GCs at all in 8G heap with CMS.&lt;/p&gt;

&lt;p&gt;But it&apos;s still off by default because of the worrisome theoretical possibilities with upsert.&lt;/p&gt;</comment>
                            <comment id="12988280" author="tlipcon" created="Fri, 28 Jan 2011 22:23:06 +0000"  >&lt;p&gt;Marking for 0.90.1 since the new feature is off-by-default. Happy to punt to 0.92 if others disagree.&lt;/p&gt;</comment>
                            <comment id="12988288" author="stack" created="Fri, 28 Jan 2011 22:32:21 +0000"  >&lt;p&gt;+1 on commit and on 0.90.1 (Fix license so its 2011 on commit, I don&apos;t know about exposing such exotic configs in hbase-default.xml but will not object to their presence).  This is great Todd.  Want to open new issue to figure the ICV issue?&lt;/p&gt;</comment>
                            <comment id="12988289" author="streamy" created="Fri, 28 Jan 2011 22:32:47 +0000"  >&lt;p&gt;I&apos;m cool with 0.90.1 because it would be good to get this out there for people to experiment with sooner than later (and it&apos;s off by default, which I think it needs to be until we do more experimenting with more workloads in more environments).  Seems like there&apos;s a lot of configuration params that could go into this too that may need tweaking in general and in different setups?&lt;/p&gt;</comment>
                            <comment id="12988291" author="streamy" created="Fri, 28 Jan 2011 22:35:39 +0000"  >&lt;p&gt;+1 on keeping exotic config out of hbase-default though i&apos;m not sure just the turning on/off of this is that exotic.  Definitely need some documentation/explanation somewhere tho.&lt;/p&gt;</comment>
                            <comment id="12988292" author="tlipcon" created="Fri, 28 Jan 2011 22:41:28 +0000"  >&lt;p&gt;Yea.. how about we put in the on/off switch in hbase-default, but leave the size switches undocumented except for in the source? (I have no idea what the best values are for those... could be very dependent on your JVM settings even)&lt;/p&gt;

&lt;p&gt;Ted also reminded me that some unit tests are failing (heapsize tests for Store for example), so we should run those before committing and fix up - I don&apos;t think I got them all right yet.&lt;/p&gt;</comment>
                            <comment id="12988295" author="streamy" created="Fri, 28 Jan 2011 22:44:31 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="12988466" author="yuzhihong@gmail.com" created="Sat, 29 Jan 2011 15:30:16 +0000"  >&lt;p&gt;hbase.hregion.memstore.mslab.chunksize appears twice in hbase-default.xml&lt;/p&gt;</comment>
                            <comment id="12988891" author="tlipcon" created="Mon, 31 Jan 2011 21:17:03 +0000"  >&lt;p&gt;Fixes heap size test and removes the advanced tunables from hbase-default.xml&lt;/p&gt;</comment>
                            <comment id="12988955" author="stack" created="Mon, 31 Jan 2011 23:22:53 +0000"  >&lt;p&gt;+1 on commit to branch and trunk (fix licenses on commit).  I think its important that this stuff get an airing as soon as possible (and its off by default).&lt;/p&gt;</comment>
                            <comment id="12988958" author="ryanobjc" created="Mon, 31 Jan 2011 23:30:17 +0000"  >&lt;p&gt;just had a look at the patch, it is looking good. nice minimal touch point w/memstore, and I am also happy to note the chunks are being dereferenced during rollover.  The other CAS logic seems to make sense as well.&lt;/p&gt;</comment>
                            <comment id="12988985" author="tlipcon" created="Tue, 1 Feb 2011 01:10:56 +0000"  >&lt;p&gt;Turns out there was a big bug in this which made upsert basically not work at all!&lt;/p&gt;

&lt;p&gt;New patch coming soon.&lt;/p&gt;</comment>
                            <comment id="12989008" author="tlipcon" created="Tue, 1 Feb 2011 02:09:05 +0000"  >&lt;p&gt;New version fixes ICV.&lt;/p&gt;

&lt;p&gt;I ran this one through the full test suite with MSLAB enabled, and it passed. (my previous test run had been with mslab disabled so it didn&apos;t show that ICV was massively broken!)&lt;/p&gt;

&lt;p&gt;Also includes a test case that triggers the pathological behavior.&lt;/p&gt;</comment>
                            <comment id="12989524" author="stack" created="Wed, 2 Feb 2011 05:55:23 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Minors below:&lt;/p&gt;

&lt;p&gt;On commit, I wonder if you should commit w/ it disabled on branch but enabled on trunk?&lt;/p&gt;

&lt;p&gt;In here:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-comment&quot;&gt;// Use the internalAdd method here since we (a) already have a lock
&lt;/span&gt;+    &lt;span class=&quot;code-comment&quot;&gt;// and (b) cannot safely use the MSLAB here.
&lt;/span&gt;+    &lt;span class=&quot;code-comment&quot;&gt;// See TestMemStore.DISABLED_testUpsertMSLAB&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... its not safe because it would bloat memory?  Or is it some thread &apos;safety&apos; issue?  Maybe clarify on commit?&lt;/p&gt;

&lt;p&gt;Should this class even be public?&lt;/p&gt;

&lt;p&gt;+public class MemStoreLAB {&lt;/p&gt;

&lt;p&gt;Why this?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (size &amp;gt; maxAlloc) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Allocation(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[size], 0);
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On return we&apos;ll clone when we don&apos;t need to?  Return null as flag that we&apos;re not to clone?  (Caller is maybeCloneWithAllocator).&lt;/p&gt;

&lt;p&gt;We should open new issue for fixing upsert?&lt;/p&gt;
</comment>
                            <comment id="12990813" author="tlipcon" created="Fri, 4 Feb 2011 23:04:52 +0000"  >&lt;p&gt;New rev takes Stack&apos;s suggestions:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;better comment on the upsert code&lt;/li&gt;
	&lt;li&gt;actually enabled the test in memstore, since fixing the upsert code lets that test pass - this way if we accidentally start using MSLAB for upsert it&apos;ll fail.&lt;/li&gt;
	&lt;li&gt;MemStoreLAB now returns null for large allocs, and MemStore doesnt clone&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12991620" author="stack" created="Mon, 7 Feb 2011 21:28:01 +0000"  >&lt;p&gt;+1 on commit.  Its great.&lt;/p&gt;</comment>
                            <comment id="12991798" author="hudson" created="Tue, 8 Feb 2011 05:09:29 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #1737 (See &lt;a href=&quot;https://hudson.apache.org/hudson/job/HBase-TRUNK/1737/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/HBase-TRUNK/1737/&lt;/a&gt;)&lt;/p&gt;
</comment>
                            <comment id="12992302" author="otis" created="Wed, 9 Feb 2011 02:46:03 +0000"  >&lt;p&gt;In plain English, what&apos;s the end effect of this change?  Elimination or minimalization of stop zee world GC pauses?  Or maybe (also) lower memory consumption? Or...?  Thanks.&lt;/p&gt;</comment>
                            <comment id="12992311" author="tlipcon" created="Wed, 9 Feb 2011 03:07:35 +0000"  >&lt;p&gt;Yes, elimination of stop-the-world GC pauses for a lot of applications. Memory consumption likely to be about the same.&lt;/p&gt;

&lt;p&gt;If you have thousands of regions per server and a small heap, could end up being &lt;b&gt;more&lt;/b&gt; memory usage though, currently.&lt;/p&gt;</comment>
                            <comment id="12992577" author="yuzhihong@gmail.com" created="Wed, 9 Feb 2011 17:05:03 +0000"  >&lt;p&gt;I think this feature should be turned off automatically when region server uses small heap.&lt;/p&gt;</comment>
                            <comment id="15017426" author="lars_francke" created="Fri, 20 Nov 2015 12:43:05 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12468868" name="HBasefragmentation.pdf" size="198564" author="tlipcon" created="Thu, 20 Jan 2011 18:08:45 +0000"/>
                            <attachment id="12469263" name="collapse-arrays.patch" size="6428" author="tlipcon" created="Tue, 25 Jan 2011 09:10:44 +0000"/>
                            <attachment id="12469345" name="icv-frag.png" size="111312" author="tlipcon" created="Tue, 25 Jan 2011 22:24:35 +0000"/>
                            <attachment id="12469336" name="mslab-1.txt" size="17248" author="tlipcon" created="Tue, 25 Jan 2011 21:36:50 +0000"/>
                            <attachment id="12469611" name="mslab-2.txt" size="22345" author="tlipcon" created="Fri, 28 Jan 2011 00:09:26 +0000"/>
                            <attachment id="12469707" name="mslab-3.txt" size="23788" author="tlipcon" created="Fri, 28 Jan 2011 22:22:27 +0000"/>
                            <attachment id="12469857" name="mslab-4.txt" size="23270" author="tlipcon" created="Mon, 31 Jan 2011 21:17:03 +0000"/>
                            <attachment id="12469885" name="mslab-5.txt" size="27053" author="tlipcon" created="Tue, 1 Feb 2011 02:09:05 +0000"/>
                            <attachment id="12470303" name="mslab-6.txt" size="27666" author="tlipcon" created="Fri, 4 Feb 2011 23:04:52 +0000"/>
                            <attachment id="12468869" name="parse-fls-statistics.py" size="954" author="tlipcon" created="Thu, 20 Jan 2011 18:12:30 +0000"/>
                            <attachment id="12469285" name="with-kvallocs.png" size="80586" author="tlipcon" created="Tue, 25 Jan 2011 15:02:10 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 20 Jan 2011 18:10:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33033</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hmcn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100883</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Adds an allocation buffer local to each memstore which is used to combat heap fragmentation. Experimental in 0.90.1 - enable by toggling hbase.hregion.memstore.mslab.enabled. Enabled by default in 0.91</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>