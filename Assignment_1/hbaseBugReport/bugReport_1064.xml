<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:50:26 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-1064/HBASE-1064.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-1064] HBase REST xml/json improvements</title>
                <link>https://issues.apache.org/jira/browse/HBASE-1064</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I&apos;ve begun work on creating a REST based interface for HBase that can use both JSON and XML and would be extensible enough to add new formats down the road.  I&apos;m at a point with this where I would like to submit it for review and to get feedback as I continue to work towards new features.&lt;/p&gt;

&lt;p&gt;Attached to this issue you will find the patch for the changes to this point along with a necessary jar file for the JSON serialization.  Also below you will find my notes on how to use what is finished with the interface to this point.&lt;/p&gt;

&lt;p&gt;This patch is based off of jira issues: &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-814&quot; title=&quot;JSON Rest Regular (No Transaction)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-814&quot;&gt;&lt;del&gt;HBASE-814&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-815&quot; title=&quot;JSON Rest Transactional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-815&quot;&gt;&lt;del&gt;HBASE-815&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I am interested on gaining feedback on:&lt;br/&gt;
-what you guys think works&lt;br/&gt;
-what doesn&apos;t work for the project&lt;br/&gt;
-anything that may need to be added&lt;br/&gt;
-code style&lt;br/&gt;
-anything else...&lt;/p&gt;


&lt;p&gt;Finished components:&lt;br/&gt;
-framework around parsing json/xml input&lt;br/&gt;
-framework around serialzing xml/json output&lt;br/&gt;
-changes to exception handing&lt;br/&gt;
-changes to the response object to better handle the serializing of output data&lt;br/&gt;
-table CRUD calls&lt;br/&gt;
-Full table fetching&lt;br/&gt;
-creating/fetching scanners&lt;/p&gt;

&lt;p&gt;TODO:&lt;br/&gt;
-fix up the filtering with scanners&lt;br/&gt;
-row insert/delete operations&lt;br/&gt;
-individual row fetching&lt;br/&gt;
-cell fetching interface&lt;br/&gt;
-scanner use interface&lt;/p&gt;


&lt;p&gt;Here are the wiki(ish) notes for what is done to this point:&lt;br/&gt;
REST Service for HBASE Notes:&lt;/p&gt;

&lt;p&gt;GET / &lt;br/&gt;
-retrieves a list of all the tables with their meta data in HBase&lt;br/&gt;
curl -v -H &quot;Accept: text/xml&quot; -X GET -T - &lt;a href=&quot;http://localhost:60050/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;curl -v -H &quot;Accept: application/json&quot; -X GET -T - &lt;a href=&quot;http://localhost:60050/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;POST / &lt;br/&gt;
-Create a table&lt;br/&gt;
curl -H &quot;Content-Type: text/xml&quot; -H &quot;Accept: text/xml&quot; -v -X POST -T - &lt;a href=&quot;http://localhost:60050/newTable&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/newTable&lt;/a&gt;&lt;br/&gt;
&amp;lt;table&amp;gt;&lt;br/&gt;
  &amp;lt;name&amp;gt;test14&amp;lt;/name&amp;gt;&lt;br/&gt;
  &amp;lt;columnfamilies&amp;gt;&lt;br/&gt;
    &amp;lt;columnfamily&amp;gt;&lt;br/&gt;
      &amp;lt;name&amp;gt;subscription&amp;lt;/name&amp;gt;&lt;br/&gt;
      &amp;lt;max-versions&amp;gt;2&amp;lt;/max-versions&amp;gt;&lt;br/&gt;
      &amp;lt;compression&amp;gt;NONE&amp;lt;/compression&amp;gt;&lt;br/&gt;
      &amp;lt;in-memory&amp;gt;false&amp;lt;/in-memory&amp;gt;&lt;br/&gt;
      &amp;lt;block-cache&amp;gt;true&amp;lt;/block-cache&amp;gt;&lt;br/&gt;
    &amp;lt;/columnfamily&amp;gt;&lt;br/&gt;
  &amp;lt;/columnfamilies&amp;gt;&lt;br/&gt;
&amp;lt;/table&amp;gt;&lt;/p&gt;

&lt;p&gt;Response:&lt;br/&gt;
&amp;lt;status&amp;gt;&amp;lt;code&amp;gt;200&amp;lt;/code&amp;gt;&amp;lt;message&amp;gt;success&amp;lt;/message&amp;gt;&amp;lt;/status&amp;gt;&lt;/p&gt;

&lt;p&gt;JSON:&lt;br/&gt;
curl -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json&quot; -v -X POST -T - &lt;a href=&quot;http://localhost:60050/newTable&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/newTable&lt;/a&gt;&lt;br/&gt;
{&quot;name&quot;:&quot;test5&quot;, &quot;column_families&quot;:[&lt;/p&gt;
{
             &quot;name&quot;:&quot;columnfam1&quot;,
             &quot;bloomfilter&quot;:true,
             &quot;time_to_live&quot;:10,
             &quot;in_memory&quot;:false,
             &quot;max_versions&quot;:2,
             &quot;compression&quot;:&quot;&quot;, 
             &quot;max_value_length&quot;:50,
             &quot;block_cache_enabled&quot;:true
          }
&lt;p&gt;]}&lt;/p&gt;

&lt;p&gt;&lt;b&gt;NOTE&lt;/b&gt; this is an enum defined in class HColumnDescriptor.CompressionType&lt;/p&gt;

&lt;p&gt;GET /&lt;span class=&quot;error&quot;&gt;&amp;#91;table_name&amp;#93;&lt;/span&gt;&lt;br/&gt;
-returns all records for the table&lt;br/&gt;
curl -v -H &quot;Accept: text/xml&quot; -X GET -T - &lt;a href=&quot;http://localhost:60050/tablename&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/tablename&lt;/a&gt;&lt;br/&gt;
curl -v -H &quot;Accept: application/json&quot; -X GET -T - &lt;a href=&quot;http://localhost:60050/tablename&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/tablename&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;GET /&lt;span class=&quot;error&quot;&gt;&amp;#91;table_name&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;-Parameter Action &lt;br/&gt;
	metadata - returns the metadata for this table.&lt;br/&gt;
	regions - returns the regions for this table&lt;/p&gt;

&lt;p&gt;curl -v -H &quot;Accept: text/xml&quot; -X GET -T - &lt;a href=&quot;http://localhost:60050/pricing1?action=metadata&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/pricing1?action=metadata&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Update Table&lt;br/&gt;
PUT /&lt;span class=&quot;error&quot;&gt;&amp;#91;table_name&amp;#93;&lt;/span&gt;&lt;br/&gt;
-updates a table &lt;br/&gt;
curl -v -H &quot;Content-Type: text/xml&quot; -H &quot;Accept: text/xml&quot; -X PUT -T - &lt;a href=&quot;http://localhost:60050/pricing1&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/pricing1&lt;/a&gt;&lt;br/&gt;
  &amp;lt;columnfamilies&amp;gt;&lt;br/&gt;
    &amp;lt;columnfamily&amp;gt;&lt;br/&gt;
      &amp;lt;name&amp;gt;subscription&amp;lt;/name&amp;gt;&lt;br/&gt;
      &amp;lt;max-versions&amp;gt;3&amp;lt;/max-versions&amp;gt;&lt;br/&gt;
      &amp;lt;compression&amp;gt;NONE&amp;lt;/compression&amp;gt;&lt;br/&gt;
      &amp;lt;in-memory&amp;gt;false&amp;lt;/in-memory&amp;gt;&lt;br/&gt;
      &amp;lt;block-cache&amp;gt;true&amp;lt;/block-cache&amp;gt;&lt;br/&gt;
    &amp;lt;/columnfamily&amp;gt;&lt;br/&gt;
    &amp;lt;columnfamily&amp;gt;&lt;br/&gt;
      &amp;lt;name&amp;gt;subscription1&amp;lt;/name&amp;gt;&lt;br/&gt;
      &amp;lt;max-versions&amp;gt;3&amp;lt;/max-versions&amp;gt;&lt;br/&gt;
      &amp;lt;compression&amp;gt;NONE&amp;lt;/compression&amp;gt;&lt;br/&gt;
      &amp;lt;in-memory&amp;gt;false&amp;lt;/in-memory&amp;gt;&lt;br/&gt;
      &amp;lt;block-cache&amp;gt;true&amp;lt;/block-cache&amp;gt;&lt;br/&gt;
    &amp;lt;/columnfamily&amp;gt;&lt;br/&gt;
  &amp;lt;/columnfamilies&amp;gt;&lt;/p&gt;

&lt;p&gt;curl -v -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json&quot; -X PUT -T - &lt;a href=&quot;http://localhost:60050/pricing1&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/pricing1&lt;/a&gt;&lt;br/&gt;
{&quot;column_families&quot;:[&lt;/p&gt;
{
             &quot;name&quot;:&quot;columnfam1&quot;,
             &quot;bloomfilter&quot;:true,
             &quot;time_to_live&quot;:10,
             &quot;in_memory&quot;:false,
             &quot;max_versions&quot;:2,
             &quot;compression&quot;:&quot;&quot;, 
             &quot;max_value_length&quot;:50,
             &quot;block_cache_enabled&quot;:true
          }
&lt;p&gt;, &lt;/p&gt;
          {
             &quot;name&quot;:&quot;columnfam2&quot;,
             &quot;bloomfilter&quot;:true,
             &quot;time_to_live&quot;:10,
             &quot;in_memory&quot;:false,
             &quot;max_versions&quot;:2,
             &quot;compression&quot;:&quot;&quot;, 
             &quot;max_value_length&quot;:50,
             &quot;block_cache_enabled&quot;:true
          }
&lt;p&gt;]}&lt;/p&gt;

&lt;p&gt;Delete Table&lt;br/&gt;
curl -v -H &quot;Content-Type: text/xml&quot; -H &quot;Accept: text/xml&quot; -X DELETE -T - &lt;a href=&quot;http://localhost:60050/TEST16&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/TEST16&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;creating a scanner&lt;br/&gt;
curl -v -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json&quot; -X POST -T - &lt;a href=&quot;http://localhost:60050/TEST16?action=newscanner&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/TEST16?action=newscanner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;//TODO fix up the scanner filters.&lt;/p&gt;

&lt;p&gt;response:&lt;br/&gt;
xml:&lt;br/&gt;
&amp;lt;scanner&amp;gt;&lt;br/&gt;
  &amp;lt;id&amp;gt;&lt;br/&gt;
    2&lt;br/&gt;
  &amp;lt;/id&amp;gt;&lt;br/&gt;
&amp;lt;/scanner&amp;gt;&lt;/p&gt;

&lt;p&gt;json:&lt;/p&gt;
{&quot;id&quot;:1}

&lt;p&gt;Using a scanner&lt;br/&gt;
curl -v -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json&quot; -X POST -T - &quot;http://localhost:60050/TEST16?action=scan&amp;amp;scannerId=&amp;lt;scannerID&amp;gt;&amp;amp;numrows=&amp;lt;num rows to return&amp;gt;&quot;&lt;/p&gt;



&lt;p&gt;This would be my first submission to an open source project of this size, so please, give it to me rough.  =)&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12410837">HBASE-1064</key>
            <summary>HBase REST xml/json improvements</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="macdiesel">Brian Beggs</reporter>
                        <labels>
                    </labels>
                <created>Tue, 16 Dec 2008 20:56:20 +0000</created>
                <updated>Sun, 13 Sep 2009 22:24:17 +0000</updated>
                            <resolved>Thu, 22 Jan 2009 00:23:10 +0000</resolved>
                                                    <fixVersion>0.20.0</fixVersion>
                                    <component>REST</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12657160" author="macdiesel" created="Tue, 16 Dec 2008 20:57:19 +0000"  >&lt;p&gt;first pass at this patch.  &lt;/p&gt;</comment>
                            <comment id="12657182" author="stack" created="Tue, 16 Dec 2008 22:00:33 +0000"  >&lt;p&gt;Looks excellent.  Really sweet.&lt;/p&gt;

&lt;p&gt;+ Where does the jar come from and whats its license?&lt;br/&gt;
+ The REST API  looks good.  Very RESTy.  There might be little nitpicks later but for it looks great.  How different is it from current REST.  Should the two be the same?  If not, how to deprecate the old?&lt;br/&gt;
+ The annotations look interesting.  Could their serializations be used in other contexts, the shell say?  Or &amp;#8211; warning -&amp;gt; crazy-thought coming &amp;#8211; somehow producing thrift IDL?&lt;br/&gt;
+ In hadoop/hbase, line lengths are &amp;lt; 80 chars (Your new classes are missing apache license, classes are missing comments describing what class is about, etc).&lt;br/&gt;
+ Is there anything we could do refactoring HTable say, so your modeling was easier?  Looks like lots of code in your Cell and Database controllers.   Should our client be taking on this model?&lt;br/&gt;
+ Can you add a note on how you&apos;ve changed how REST works, high-level?&lt;/p&gt;

&lt;p&gt;Thats all for now.&lt;/p&gt;</comment>
                            <comment id="12657197" author="macdiesel" created="Tue, 16 Dec 2008 22:31:01 +0000"  >&lt;p&gt;Ok, first I misquoted the Jira issues,  The issues this patch is based off of are &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-814&quot; title=&quot;JSON Rest Regular (No Transaction)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-814&quot;&gt;&lt;del&gt;HBASE-814&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-815&quot; title=&quot;JSON Rest Transactional&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-815&quot;&gt;&lt;del&gt;HBASE-815&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;+ The REST API looks good. Very RESTy. There might be little nitpicks later but for it looks great. How different is it from current REST. Should the two be the same? If not, how to deprecate the old?&lt;/p&gt;

&lt;p&gt;I can&apos;t take credit for the full architecture of the system as this patch was initially submitted by Michael Gottesman.  I did rework the way that the input/output flowed out of the system mainly.  I also have added some missing functionality that was in the original REST implementation that was not in this one.  &lt;/p&gt;

&lt;p&gt;I&apos;ve been trying to stay as close to the original implementation as possible.  Some of the calls have changed, though I&apos;ve tried to keep the xml output/input as close as possible to the original implementation.  &lt;/p&gt;

&lt;p&gt;I will start working on a changelog to hold the differences and attach it to this issue.&lt;/p&gt;

&lt;p&gt;It&apos;s possible with some package name changes that both interfaces could be bundled with hbase for a release or 2 with the old one eventually being removed.&lt;/p&gt;

&lt;p&gt;+ Where does the jar come from and whats its license&lt;br/&gt;
Micheal included this jar with his original issue in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-814&quot; title=&quot;JSON Rest Regular (No Transaction)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-814&quot;&gt;&lt;del&gt;HBASE-814&lt;/del&gt;&lt;/a&gt;.  after I bit of research I found here: &lt;a href=&quot;http://github.com/gottesmm/agile-json-2.0/tree/master&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/gottesmm/agile-json-2.0/tree/master&lt;/a&gt;&lt;br/&gt;
It appears that the jar is based on the org.json implementation &lt;/p&gt;

&lt;p&gt;Here is the license from json.org:&lt;br/&gt;
Copyright (c) 2002 JSON.org&lt;/p&gt;

&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &quot;Software&quot;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt;

&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt;

&lt;p&gt;The Software shall be used for Good, not Evil.&lt;/p&gt;

&lt;p&gt;THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. &lt;/p&gt;

&lt;p&gt;If needed I could rewrite this code at some future point if this library would prove unsatisfactory, thought it would need to happen once I get the initial implementation finished.&lt;/p&gt;

&lt;p&gt;+ The annotations look interesting. Could their serializations be used in other contexts, the shell say? Or - warning -&amp;gt; crazy-thought coming - somehow producing thrift IDL?&lt;/p&gt;

&lt;p&gt;something like this is quite possible I would think, and does make serialization much easier.  The tradeoff however is that your domain/model objects end up with quite a few annotations in them and it can be ugly.  Though it will save you from writing quite a bit of code.  &lt;/p&gt;

&lt;p&gt;I am not familiar with thift IDL but if something using annotations could be used for serialization it would be something that could be written as a separate module and could have an impact beyond this project.&lt;/p&gt;

&lt;p&gt;I had initially started using annotations for the XML serialization but pulled them out and opted for a simpler approach, but this is something that could be changed at a later time.  I was using this library for the annotation serialization: &lt;a href=&quot;http://simple.sourceforge.net/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://simple.sourceforge.net/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;+ In hadoop/hbase, line lengths are &amp;lt; 80 chars (Your new classes are missing apache license, classes are missing comments describing what class is about, etc).&lt;/p&gt;

&lt;p&gt;Yes I will fix these issues with the next patch I supply.&lt;/p&gt;

&lt;p&gt;+ Is there anything we could do refactoring HTable say, so your modeling was easier? Looks like lots of code in your Cell and Database controllers. Should our client be taking on this model?&lt;/p&gt;

&lt;p&gt;Possibly.  I haven&apos;t been down that far into the interface yet to fully comment on that issue at this point.&lt;/p&gt;


&lt;p&gt;+ Can you add a note on how you&apos;ve changed how REST works, high-level?&lt;br/&gt;
Yes I will supply this in the coming days.&lt;/p&gt;</comment>
                            <comment id="12657200" author="streamy" created="Tue, 16 Dec 2008 22:34:02 +0000"  >&lt;p&gt;This looks great.&lt;/p&gt;

&lt;p&gt;If we can get some metrics out from the Master and RegionServers through this interface, then it&apos;s a much easier way to develop a nagios/nrpe plugin.  Previously I hacked apart the existing web ui to output information in XML or JSON, this would make much more sense.&lt;/p&gt;</comment>
                            <comment id="12657206" author="stack" created="Tue, 16 Dec 2008 22:46:52 +0000"  >&lt;p&gt;I like the suggestion of a metrics view.&lt;/p&gt;

&lt;p&gt;Brian, in case you hadn&apos;t seen it, Michael Gottesman wanted to make sure you&apos;d seen this page he&apos;d been working on: &lt;a href=&quot;http://wiki.apache.org/hadoop/Hbase/JSONRest&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/hadoop/Hbase/JSONRest&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12657210" author="macdiesel" created="Tue, 16 Dec 2008 22:56:02 +0000"  >&lt;p&gt;Yeah I&apos;ve seen it and have been using it.  My hope for all of this is to get this all integrated together, get the wiki page updated and complete with information for both JSON and XML for the REST interface and kind of tie both of these implementations together with a more extensible input/output interface.&lt;/p&gt;

&lt;p&gt;At least that&apos;s the plan.  I&apos;m hoping to have alot of this wrapped up in the coming week or 2.  &lt;/p&gt;</comment>
                            <comment id="12657254" author="yedingding@gmail.com" created="Wed, 17 Dec 2008 01:10:14 +0000"  >&lt;p&gt;Excellent work. Big step move.&lt;/p&gt;

&lt;p&gt;For the request api, should we try to keep the same as orginal?  I think this will be helpful to the merge and also to the third side library which used the REST api now.&lt;/p&gt;</comment>
                            <comment id="12657257" author="stack" created="Wed, 17 Dec 2008 01:28:31 +0000"  >&lt;p&gt;IMO, if the two APIs were effectively the same, then no need of our maintaining two REST implementations and we can just slot the new stuff in soon as 0.19.0 goes out (Would be nice if tools that depend on REST weren&apos;t broken by the REST upgrade).&lt;/p&gt;</comment>
                            <comment id="12657437" author="macdiesel" created="Wed, 17 Dec 2008 16:07:38 +0000"  >&lt;p&gt;I&apos;m not sure if Michael Gottesman reads the dev list or not but he may want to comment on what I&apos;m about to say.&lt;/p&gt;

&lt;p&gt;First let me point out the differences.&lt;/p&gt;

&lt;p&gt;current REST implementation:&lt;br/&gt;
the path that follows the url is in this format /tablename/&amp;lt;action&amp;gt;/&lt;span class=&quot;error&quot;&gt;&amp;#91;additional info&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;where action can be enable/disable a table, a scanner or a call to retrieve a row.&lt;/p&gt;

&lt;p&gt;In the implementation I&apos;m working on the path that follows the url is in this format:&lt;br/&gt;
/tablename/&lt;span class=&quot;error&quot;&gt;&amp;#91;row&amp;#93;&lt;/span&gt;/&lt;span class=&quot;error&quot;&gt;&amp;#91;column&amp;#93;&lt;/span&gt;/&lt;span class=&quot;error&quot;&gt;&amp;#91;timestamp&amp;#93;&lt;/span&gt; &lt;br/&gt;
Also a query string can be included depending on what you wanted to do.&lt;/p&gt;

&lt;p&gt;For example to get table regions data with this implementation:&lt;br/&gt;
&lt;a href=&quot;http://localhost:60050/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/&lt;/a&gt;&amp;lt;tableName&amp;gt;?action=regions&lt;br/&gt;
the current way:&lt;br/&gt;
&lt;a href=&quot;http://localhost:60050/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/&lt;/a&gt;&amp;lt;tableName&amp;gt;/regions&lt;/p&gt;

&lt;p&gt;or to get a scanner with this implemenation:&lt;br/&gt;
&lt;a href=&quot;http://localhost:60050/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/&lt;/a&gt;&amp;lt;tableName&amp;gt;?action=newscanner&lt;br/&gt;
the current way:&lt;br/&gt;
&lt;a href=&quot;http://localhost:60050/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/&lt;/a&gt;&amp;lt;table_name&amp;gt;/scanner&lt;/p&gt;

&lt;p&gt;As you can see the interface is a bit different where as the implementation I&apos;m working on is perhaps a bit more restful in spirit. &lt;/p&gt;

&lt;p&gt;Also the reason for the change in moving to the query string for some of these items is that in order to retrieve the row/column/timestamp using the path you are unable to have any directives in the path.  Unless we wanted to get into the thought of reserved words, which IMHO is a bad idea and complicates the interface.&lt;/p&gt;

&lt;p&gt;Now I think the real question that needs to be answered... is it necessary or desirable to query out the row/column/timestamp data in this RESTful fashion using the path?&lt;/p&gt;

&lt;p&gt;If no the interface can be changed to be much closer to the current implementation.&lt;/p&gt;

&lt;p&gt;If yes, then the interface needs to change.&lt;/p&gt;


&lt;p&gt;To be honest, a change like this is not currently on my roadmap, though I feel it could be done with a few days worth of work.  Obviously I do not desire to break anyones current interface into the system, but at the same time you can&apos;t make an omelet without breaking a few eggs. And I also fee that if a big change to something like this does go in, sooner is probably better than later as adoption of this project picks up.&lt;/p&gt;

&lt;p&gt;I also am not sure if I have an opinion either way on the interface.  I tend to like the new model a bit better, but I think that the questions that really needs to be answered are, what are the needs of the users of the rest interface currently?  Are they getting everything they need? Could the interface be better?  Is there a need for a better interface?  Will the current interface meet the demands of future users?  Is the current interface extensible enough to allow the HBase project to expand in the future?&lt;/p&gt;

&lt;p&gt;And I really don&apos;t have the answer to these  questions. I&apos;m still somewhat of an hbase noob.&lt;/p&gt;</comment>
                            <comment id="12657448" author="apurtell" created="Wed, 17 Dec 2008 17:10:35 +0000"  >&lt;p&gt;+1, and +1 again for separating directives out into query parameters, leaving the path strictly for cell addressing.&lt;/p&gt;</comment>
                            <comment id="12657484" author="tomstrummer" created="Wed, 17 Dec 2008 18:54:59 +0000"  >&lt;p&gt;I replied on the mailing list but only people subscribe to the dev list will see my comments.  So I&apos;ll quickly summarize what I said there.  &lt;/p&gt;

&lt;p&gt;Basically &amp;#8211; &lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;What advantage does this provide besides the perception of being more restful?&lt;/li&gt;
	&lt;li&gt;If the proposed tablename/&lt;span class=&quot;error&quot;&gt;&amp;#91;row&amp;#93;&lt;/span&gt;/&lt;span class=&quot;error&quot;&gt;&amp;#91;cols&amp;#93;&lt;/span&gt;/&lt;span class=&quot;error&quot;&gt;&amp;#91;timestamp&amp;#93;&lt;/span&gt; interface is adopted, how do you GET/PUT/POST/DELETE scanners?&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;In short, a scanner is a stateful resource (like a table) &amp;#8211; not an action.  The proposed model means that a table cannot have any &quot;child resources&quot; &amp;#8211; just rows.  So you could potentially make a scanner a root-level type, and make an interface like scanner/&lt;span class=&quot;error&quot;&gt;&amp;#91;id&amp;#93;&lt;/span&gt;/&lt;span class=&quot;error&quot;&gt;&amp;#91;opts&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;So you&apos;d POST scanner/?table=myTable&amp;amp;cols=....&lt;br/&gt;
then GET scanner/&lt;span class=&quot;error&quot;&gt;&amp;#91;id&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;because the proposed table interface leaves no room for table/scanner/ &amp;#8211; scanner would be interpreted as a row ID.&lt;/p&gt;

&lt;p&gt;I, for one, thought the old interface worked well because it allowed one to access different resource on a given table.  Given, &apos;enable&apos; and &apos;disable&apos; are actions, not resources.&lt;/p&gt;

&lt;p&gt;Think about what other resources might be added to the interface (i.e. maybe MapReduce jobs, Pig jobs, etc) &amp;#8211; would those be resources of a specific table, or root-level types?  If you adopt the tablename/rowID/cols interface, it leaves no room for child resources other than rows.&lt;/p&gt;</comment>
                            <comment id="12658263" author="stack" created="Sat, 20 Dec 2008 05:48:41 +0000"  >&lt;p&gt;Brian: I don&apos;t exactly following the below:&lt;/p&gt;

&lt;p&gt;.bq Also the reason for the change in moving to the query string for some of these items is that in order to retrieve the row/column/timestamp using the path you are unable to have any directives in the path. Unless we wanted to get into the thought of reserved words, which IMHO is a bad idea and complicates the interface.&lt;/p&gt;

&lt;p&gt;Can you say more so I can understand better the question below.&lt;/p&gt;

&lt;p&gt;.bq Now I think the real question that needs to be answered... is it necessary or desirable to query out the row/column/timestamp data in this RESTful fashion using the path?&lt;/p&gt;

&lt;p&gt;Can you answer the Tom Nicols questions Brian?&lt;/p&gt;

&lt;p&gt;As stated already, what the old API has going for it is that if the new implementation kept it up, then it could be just dropped in.  Otherwise, we have to do the deprecate/remove dance.&lt;/p&gt;

&lt;p&gt;Good stuff.&lt;/p&gt;</comment>
                            <comment id="12658571" author="macdiesel" created="Mon, 22 Dec 2008 15:37:15 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Brian: I don&apos;t exactly following the below:&lt;/p&gt;

&lt;p&gt;.bq Also the reason for the change in moving to the query string for some of these items is that in order to retrieve the row/column/timestamp using the path you are unable to have any directives in the path. Unless we wanted to get into the thought of reserved words, which IMHO is a bad idea and complicates the interface.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So with this new implementation of the REST interface it&apos;s possible to query a table, row, column, or timestamp directly using the path that follows the url.&lt;/p&gt;

&lt;p&gt;For example:&lt;br/&gt;
&lt;a href=&quot;http://localhost:60050/testtable1/thesecondrow&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/testtable1/thesecondrow&lt;/a&gt;&lt;br/&gt;
Would retrieve the second row from testtable1.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:60050/testtable1/thesecondrow/rowWithData:otherData&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/testtable1/thesecondrow/rowWithData:otherData&lt;/a&gt;&lt;br/&gt;
Would retrieve the column rowWithData:otherData from the secondrow from testtable1.&lt;/p&gt;

&lt;p&gt;same thing works for timestamps...&lt;br/&gt;
&lt;a href=&quot;http://localhost:60050/testtable1/thesecondrow/rowWithData:otherData/1229121022233&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/testtable1/thesecondrow/rowWithData:otherData/1229121022233&lt;/a&gt;&lt;br/&gt;
Would retrieve the cell at timestamp 1229121022233, from cell rowWithData:otherData, in row thesecondrow, from table testtable1&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;.bq Now I think the real question that needs to be answered... is it necessary or desirable to query out the row/column/timestamp data in this RESTful fashion using the path?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So my question is... Is it desirable to have the interface work in such a way that you are able to query out timestamp and individual cell data as in the examples above?  If the answer is no I believe it will be relatively easy to remove those parts of the interface and make this REST implementation match the current REST implementation.  Though the ability to query out cells by identifier and cells by timestamp will be lost.  Though I do not believe this functionality is available in the current rest implementation.&lt;/p&gt;

&lt;p&gt;If the answer is yes, we want to query in the /table/row/column/timestamp fashion, this is the reason that the directives (and when I say directive I mean things such as fetching region data or using a scanner) were moved into a query string.  Now if we wanted to keep this interface and allow for querying with the directives in the path I believe that the logic that would be required could make the code much more complex than it already is and harder to maintain.  And for what it&apos;s worth I don&apos;t feel it&apos;s the most straight forward implementation as it currently stands.  &lt;/p&gt;

&lt;p&gt;Adding additional complexity to the path I feel would make the harder to maintain and add too.  Where as putting these parameters in a query string, I feel, simplifies the addition of future code.&lt;/p&gt;

&lt;p&gt;To address Tom&apos;s questions: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What advantage does this provide besides the perception of being more restful?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Again, I&apos;m not sure I have the full answer for this.  I chose this implementation for selfish reason outlined below.  And I&apos;m not really sure if the ability to query cells by identifier/timestamp is something that is truly necessary for HBase.  This is one of the questions I&apos;m hoping someone who has been working on the project can answer.&lt;/p&gt;

&lt;p&gt;The reason I initially chose to start working on this implementation of the REST interface from the patches in issues 814 and 815 was that I felt it would be easier to separate the parsing/serialization code out of this version.  I also felt that more modification would need to be done to the current interface to allow JSON to be sent using it than this implementation would take to send xml from it.  &lt;/p&gt;

&lt;p&gt;I did not fully understand exactly how items were being retrieved out of the interface until I was some way into the project and began to notice the differences in the interface.  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the proposed tablename/&lt;span class=&quot;error&quot;&gt;&amp;#91;row&amp;#93;&lt;/span&gt;/&lt;span class=&quot;error&quot;&gt;&amp;#91;cols&amp;#93;&lt;/span&gt;/&lt;span class=&quot;error&quot;&gt;&amp;#91;timestamp&amp;#93;&lt;/span&gt; interface is adopted, how do you GET/PUT/POST/DELETE scanners?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;From my notes:&lt;/p&gt;

&lt;p&gt;creating a scanner&lt;br/&gt;
curl -v -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json&quot; -X POST -T - &lt;a href=&quot;http://localhost:60050/TEST16?action=newscanner&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/TEST16?action=newscanner&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;//TODO fix up the scanner filters.&lt;/p&gt;

&lt;p&gt;response:&lt;br/&gt;
xml:&lt;br/&gt;
&amp;lt;scanner&amp;gt;&lt;br/&gt;
  &amp;lt;id&amp;gt;&lt;br/&gt;
    2&lt;br/&gt;
  &amp;lt;/id&amp;gt;&lt;br/&gt;
&amp;lt;/scanner&amp;gt;&lt;/p&gt;

&lt;p&gt;json:&lt;/p&gt;
{&quot;id&quot;:1}

&lt;p&gt;Using a scanner&lt;br/&gt;
curl -v -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json&quot; -X POST -T - &quot;http://localhost:60050/TEST16?action=scan&amp;amp;scannerid=&amp;lt;scannerID&amp;gt;&amp;amp;numrows=&amp;lt;num rows to return&amp;gt;&quot;&lt;/p&gt;

&lt;p&gt;//TODO scanner action to return all rows between 2 row ID&apos;s&lt;/p&gt;

&lt;p&gt;Closing a scanner&lt;br/&gt;
curl -v -H &quot;Content-Type: application/json&quot; -H &quot;Accept: application/json&quot; -X POST -T - &quot;http://localhost:60050/TEST16?action=closescanner&amp;amp;scannerid=&amp;lt;scannerId&amp;gt;&quot;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In short, a scanner is a stateful resource (like a table) - not an action. The proposed model means that a table cannot have any &quot;child resources&quot; - just rows. So you could potentially make a scanner a root-level type, and make an interface like scanner/&lt;span class=&quot;error&quot;&gt;&amp;#91;id&amp;#93;&lt;/span&gt;/&lt;span class=&quot;error&quot;&gt;&amp;#91;opts&amp;#93;&lt;/span&gt;&lt;br/&gt;
So you&apos;d POST scanner/?table=myTable&amp;amp;cols=....&lt;br/&gt;
then GET scanner/&lt;span class=&quot;error&quot;&gt;&amp;#91;id&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;because the proposed table interface leaves no room for table/scanner/ - scanner would be interpreted as a row ID.&lt;/p&gt;

&lt;p&gt;I, for one, thought the old interface worked well because it allowed one to access different resource on a given table. Given, &apos;enable&apos; and &apos;disable&apos; are actions, not resources.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I believe these issues are addressed above.  I will say that putting a directive as the first item in the path is possible, though it will always need to be there. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Think about what other resources might be added to the interface (i.e. maybe MapReduce jobs, Pig jobs, etc) - would those be resources of a specific table, or root-level types? If you adopt the tablename/rowID/cols interface, it leaves no room for child resources other than rows.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Perhaps stack or someone can comment on this further, but it seems with the paradigm of HBase and how a column store database works I have trouble thinking of a case where you were trying to query the datababase and it didn&apos;t go from /table/row  Though I could see possible changes further down the path from there.&lt;/p&gt;

&lt;p&gt;Also as far as PIG or MapReduce jobs go.... I believe implementing these interfaces will be taken care of by their respective groups.  It&apos;s probably best to stick with what works for HBase and let the other projects decide what&apos;s best for them.&lt;/p&gt;</comment>
                            <comment id="12658572" author="macdiesel" created="Mon, 22 Dec 2008 15:43:20 +0000"  >&lt;p&gt;I have attached my unfinished notes on all of the operations available to the interface and examples of how to test them using curl.&lt;/p&gt;

&lt;p&gt;Perhaps this may give a better window into how the interface currently works.&lt;/p&gt;

&lt;p&gt;file is named: REST-Upgrade-Notes.txt&lt;/p&gt;</comment>
                            <comment id="12658652" author="yedingding@gmail.com" created="Mon, 22 Dec 2008 20:21:47 +0000"  >&lt;p&gt;Hi, Brian.&lt;/p&gt;

&lt;p&gt;I don&apos;t see the benefit of the urls&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:60050/testtable1/thesecondrow/rowWithData:otherData&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/testtable1/thesecondrow/rowWithData:otherData&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;http://localhost:60050/testtable1/thesecondrow/rowWithData:otherData/1229121022233&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/testtable1/thesecondrow/rowWithData:otherData/1229121022233&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Instead, it limits to get multiple columns once.&lt;/p&gt;

&lt;p&gt;The current REST implementation do support this but as the query string&lt;/p&gt;

&lt;p&gt;/testtables/row/thesecondrow?column=rowWithData:otherData&lt;br/&gt;
/testtables/row/thesecondrow/1229121022233?column=rowWithData:otherData&lt;/p&gt;</comment>
                            <comment id="12660101" author="macdiesel" created="Wed, 31 Dec 2008 17:24:02 +0000"  >&lt;p&gt;I&apos;ve been on vacation for the last few days and am just getting back to work on this today.  Given the feedback I think that the best course of action is to make this interface conform to the current rest interface.  I am starting work on this today.  I will hopefully have a patch early next week.&lt;/p&gt;</comment>
                            <comment id="12660107" author="stack" created="Wed, 31 Dec 2008 17:48:48 +0000"  >&lt;p&gt;I agree that smoothest path would be a refactor that keeps current API.  Good man Brian.&lt;/p&gt;</comment>
                            <comment id="12662510" author="macdiesel" created="Fri, 9 Jan 2009 20:29:46 +0000"  >&lt;p&gt;Attached you will find the latest patch for the REST implementation.  &lt;/p&gt;

&lt;p&gt;The interface now conforms to the current rest interface.  The interface now also returns either xml or json.  Simply change your &lt;br/&gt;
Accept: text/xml header &lt;br/&gt;
to: &lt;br/&gt;
Accept: application/json&lt;/p&gt;


&lt;p&gt;I could really use a sanity check on this.  I&apos;m sure there are some defects and I&apos;m going to go back through and start double checking this stuff now.&lt;/p&gt;</comment>
                            <comment id="12662561" author="stack" created="Fri, 9 Jan 2009 23:46:53 +0000"  >&lt;p&gt;Update your hbase or leave this out of your patch &apos;Index: src/webapps/master/WEB-INF/web.xml&apos;.  This caused it fail to apply to trunk (Not yo really.  I need to figure whats going on here...in this generated code).&lt;/p&gt;

&lt;p&gt;I figured out that I need to add the json.jar &amp;#8211; what would be a better name for this jar &amp;#8211; but how should I fix these Brian?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

compile:
    [javac] Compiling 276 source files to /Users/stack/Documents/checkouts/cleantrunk/build/classes
    [javac] /Users/stack/Documents/checkouts/cleantrunk/src/java/org/apache/hadoop/hbase/HColumnDescriptor.java:37: &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.simpleframework.xml does not exist
    [javac] &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.simpleframework.xml.Element;
    [javac]                               ^
    [javac] /Users/stack/Documents/checkouts/cleantrunk/src/java/org/apache/hadoop/hbase/HColumnDescriptor.java:38: &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.simpleframework.xml does not exist
    [javac] &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; org.simpleframework.xml.Root;

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="12662562" author="stack" created="Fri, 9 Jan 2009 23:54:18 +0000"  >&lt;p&gt;A quick look at the code and it looks fine.&lt;/p&gt;

&lt;p&gt;Add &apos;&amp;lt;pre&amp;gt;&apos; around things like this in your javadoc:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+ * 
+ * {
+ *  &lt;span class=&quot;code-quote&quot;&gt;&quot;type&quot;&lt;/span&gt; : &lt;span class=&quot;code-quote&quot;&gt;&quot;WhileMatchRowFilter&quot;&lt;/span&gt;,
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;.... if you want to keep your formatting.&lt;/p&gt;

&lt;p&gt;Are you not using xmlenc-0.53.jar to do XML?&lt;/p&gt;
</comment>
                            <comment id="12663083" author="macdiesel" created="Mon, 12 Jan 2009 20:39:03 +0000"  >&lt;p&gt;Stack, give this a try.  I fixed the problems you were encountering.  I was playing with an xml serialization library that used annotations like the JSON library but it was not suppose to be included in the patch.  Sorry about that.&lt;/p&gt;
</comment>
                            <comment id="12663089" author="macdiesel" created="Mon, 12 Jan 2009 20:43:20 +0000"  >&lt;p&gt;Also for the json jar naming, how about jsonAnnotation.jar?&lt;/p&gt;</comment>
                            <comment id="12663169" author="gottesmm" created="Tue, 13 Jan 2009 01:06:57 +0000"  >&lt;p&gt;@Brian&lt;/p&gt;

&lt;p&gt;I am going to submit it to json.org soon (I should have done it six months ago but things got in the way). It should really be called Agile-Json2.0.jar because the whole idea about it is to make Serialization to JSON of lots and lots of classes obscenely easy and then to be replaced with more hardcore items later if more performance is needed.&lt;/p&gt;

&lt;p&gt;Imagine using JSON.org serialization code for 5 objects. Now imagine writing JSON.org serialization code for 100 objects. Wouldnt you rather just mark it with @ToJSON?. That is the premise anyways.&lt;/p&gt;

&lt;p&gt;@Stacks&lt;/p&gt;

&lt;p&gt;the source is here:&lt;br/&gt;
&lt;a href=&quot;http://github.com/gottesmm/agile-json-2.0/tree/master&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/gottesmm/agile-json-2.0/tree/master&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12663245" author="stack" created="Tue, 13 Jan 2009 06:45:08 +0000"  >&lt;p&gt;Brian: That complies. All tests pass.  To try and prove it adheres to old interface, I tried running the sishen prescriptions at end of this page under title &apos;Examples using curl&apos;.  On first one, &apos;durruti:cleantrunk stack$ curl -v -X POST -T - &lt;a href=&quot;http://localhost:60050/api/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://localhost:60050/api/&lt;/a&gt;&apos;, I entered single line: &apos;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt; &amp;lt;table&amp;gt; &amp;lt;name&amp;gt;tables&amp;lt;/name&amp;gt; &amp;lt;columnfamilies&amp;gt; &amp;lt;columnfamily&amp;gt; &amp;lt;name&amp;gt;subscription&amp;lt;/name&amp;gt; &amp;lt;max-versions&amp;gt;2&amp;lt;/max-versions&amp;gt; &amp;lt;compression&amp;gt;NONE&amp;lt;/compression&amp;gt; &amp;lt;in-memory&amp;gt;false&amp;lt;/in-memory&amp;gt; &amp;lt;block-cache&amp;gt;true&amp;lt;/block-cache&amp;gt; &amp;lt;/columnfamily&amp;gt; &amp;lt;/columnfamilies&amp;gt; &amp;lt;/table&amp;gt;&apos; and I get back below in the rest log:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2009-01-12 22:40:58,008 WARN jsonrest: /api/:
java.lang.ArrayIndexOutOfBoundsException: 1
    at org.apache.hadoop.hbase.&lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;.Dispatcher.doPost(Dispatcher.java:219)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:709)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)
    at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:427)
    at org.mortbay.jetty.servlet.WebApplicationHandler.dispatch(WebApplicationHandler.java:475)
    at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:567)
    at org.mortbay.http.HttpContext.handle(HttpContext.java:1565)
    at org.mortbay.jetty.servlet.WebApplicationContext.handle(WebApplicationContext.java:635)
    at org.mortbay.http.HttpContext.handle(HttpContext.java:1517)
    at org.mortbay.http.HttpServer.service(HttpServer.java:954)
    at org.mortbay.http.HttpConnection.service(HttpConnection.java:814)
    at org.mortbay.http.HttpConnection.handleNext(HttpConnection.java:981)
    at org.mortbay.http.HttpConnection.handle(HttpConnection.java:831)
    at org.mortbay.http.SocketListener.handleConnection(SocketListener.java:244)
    at org.mortbay.util.ThreadedServer.handle(ThreadedServer.java:357)
    at org.mortbay.util.ThreadPool$PoolThread.run(ThreadPool.java:534)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Does it work for you?&lt;/p&gt;</comment>
                            <comment id="12663443" author="macdiesel" created="Tue, 13 Jan 2009 19:50:44 +0000"  >&lt;p&gt;I&apos;m working on a patch for this issue along with a few others I have found.  &lt;/p&gt;

&lt;p&gt;A few questions..&lt;/p&gt;

&lt;p&gt;When updating a row, with the current xml structure:&lt;br/&gt;
&amp;lt;column&amp;gt;&lt;br/&gt;
  &amp;lt;name&amp;gt;other:&amp;lt;/name&amp;gt;&lt;br/&gt;
  &amp;lt;value&amp;gt;test5&amp;lt;/value&amp;gt;&lt;br/&gt;
&amp;lt;/column&amp;gt;&lt;/p&gt;

&lt;p&gt;you can only update one column at a time.  If that&apos;s the way it should be kept fine, but I can change it to allow multiple columns in a row all be updated at once by adding a new root element to the xml.&lt;/p&gt;

&lt;p&gt;Should the input values be base 64 encoded as well?&lt;/p&gt;

&lt;p&gt;Also for the JSON implementation do we want the values there base 64 encoded as well?  And same question for the JSON input, should that also be base64 encoded.  It may be preferable to not base64 encode the json as base64 encode/decode is not available natively in the language.&lt;/p&gt;</comment>
                            <comment id="12663445" author="stack" created="Tue, 13 Jan 2009 20:04:33 +0000"  >&lt;p&gt;Sounds like you&apos;ve found a bug in the XML.  Seems bad you can&apos;t do multiple columns at once.&lt;/p&gt;

&lt;p&gt;Maybe do as is for now.  Add fixing multiple column update as new issue that can be done after?&lt;/p&gt;

&lt;p&gt;base64&apos;ing is because you can&apos;t have binary in XML.  In JSON, you can carry binary, right?  If so, no need base64ing JSON payloads.&lt;/p&gt;

&lt;p&gt;Michael is working on cleaning up the json jar &amp;#8211; fixing licenses, etc.  Should have something to add soon.&lt;/p&gt;</comment>
                            <comment id="12663448" author="macdiesel" created="Tue, 13 Jan 2009 20:11:37 +0000"  >&lt;p&gt;JSON does not allow the transfer of binary data:&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;http://www.json.org/xml.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.json.org/xml.html&lt;/a&gt; :&lt;br/&gt;
JSON does not have a &amp;lt;[CDATA[]]&amp;gt; feature, so it is not well suited to act as a carrier of sounds or images or other large binary payloads.&lt;/p&gt;
</comment>
                            <comment id="12663453" author="stack" created="Tue, 13 Jan 2009 20:17:39 +0000"  >&lt;p&gt;dang.  you&apos;ll have to base64 it then?  Is that so?  Whats couchdb do?  REST is their client.&lt;/p&gt;</comment>
                            <comment id="12663465" author="macdiesel" created="Tue, 13 Jan 2009 20:43:13 +0000"  >&lt;p&gt;I inspected the couchdb rest interface and here is what I found.&lt;/p&gt;

&lt;p&gt;Binary files are specifically marked as attachments and retrieved separately from the rest of the data.  Binary attachments are uploaded as base64 values, but attachments are retrieved via their own urls and are not encoded.&lt;/p&gt;

&lt;p&gt;Since there is no distinction in hbase between binary and regular data some kind of encoding will need to be used I&apos;m assuming.&lt;/p&gt;</comment>
                            <comment id="12663481" author="streamy" created="Tue, 13 Jan 2009 21:27:28 +0000"  >&lt;p&gt;We are using binary data with JSON by base64&apos;ing it.  This seems like a sane approach and has worked well for us.&lt;/p&gt;</comment>
                            <comment id="12663501" author="macdiesel" created="Tue, 13 Jan 2009 22:19:13 +0000"  >&lt;p&gt;Perhaps there is something we can do with the JSON annotations jar that would allow a value to be base64 encoded using the annotations?  &lt;/p&gt;</comment>
                            <comment id="12663504" author="gottesmm" created="Tue, 13 Jan 2009 22:24:13 +0000"  >&lt;p&gt;brian, you beat me to it =). Give me 30 minutes or so and check my github repo.&lt;/p&gt;</comment>
                            <comment id="12663521" author="macdiesel" created="Tue, 13 Jan 2009 22:44:26 +0000"  >&lt;p&gt;I just wanted to post a snippet of what the return JSON looks like see what everyone thinks:&lt;/p&gt;

&lt;p&gt;a row:&lt;br/&gt;
{&quot;row&quot;:&quot;rowName&quot;,&quot;cells&quot;:[&lt;/p&gt;
{&quot;name&quot;:&quot;firstName:&quot;,&quot;value&quot;:&quot;firstValueIwillbeBase64ed&quot;,&quot;timestamp&quot;:1229121008893}
&lt;p&gt;,&lt;/p&gt;
{&quot;name&quot;:&quot;other:&quot;,&quot;value&quot;:&quot;otherValue&quot;,&quot;timestamp&quot;:1229121008893}
&lt;p&gt;]}&lt;/p&gt;

&lt;p&gt;Table:&lt;br/&gt;
{&quot;master_running&quot;:true,&quot;tables&quot;:[&lt;br/&gt;
{&quot;name&quot;:&quot;test13&quot;,&quot;columns&quot;:[&lt;/p&gt;
{&quot;time_to_live&quot;:-1,&quot;in_memory&quot;:false,&quot;name&quot;:&quot;subscription:&quot;,&quot;max_versions&quot;:2,&quot;max_value_length&quot;:2147483647,&quot;block_cache_enabled&quot;:true,&quot;bloomfilter&quot;:false}
&lt;p&gt;]},{&quot;name&quot;:&quot;test14&quot;,&quot;columns&quot;:[&lt;/p&gt;
{&quot;time_to_live&quot;:-1,&quot;in_memory&quot;:false,&quot;name&quot;:&quot;subscription:&quot;,&quot;max_versions&quot;:2,&quot;max_value_length&quot;:2147483647,&quot;block_cache_enabled&quot;:true,&quot;bloomfilter&quot;:false}
&lt;p&gt;]}&lt;br/&gt;
]}&lt;/p&gt;


&lt;p&gt;update/insert a row:&lt;br/&gt;
{&quot;columns&quot;:[&lt;/p&gt;
{
             &quot;name&quot;:&quot;other:&quot;,
             &quot;value&quot;:&quot;test1&quot;,
          }
&lt;p&gt;,&lt;/p&gt;
          {
             &quot;name&quot;:&quot;trans:&quot;,
             &quot;value&quot;:&quot;yes&quot;,
          }
&lt;p&gt;]}&lt;/p&gt;

&lt;p&gt;I need to make 1 last tweak to the JSON to insert a table and I will post that later tonight when I&apos;m done.&lt;/p&gt;</comment>
                            <comment id="12663643" author="stack" created="Wed, 14 Jan 2009 06:54:16 +0000"  >&lt;p&gt;Brian:&lt;/p&gt;

&lt;p&gt;What jgray says regards base64&apos;ing json sounds right.&lt;/p&gt;

&lt;p&gt;You&apos;ll need to base64 row names and column family qualifiers too (row names can be raw binary as can the qualifier on the column family).&lt;/p&gt;</comment>
                            <comment id="12663816" author="stack" created="Wed, 14 Jan 2009 17:52:12 +0000"  >&lt;p&gt;Brian: Thanks for checking how couchdb works.  As described, it makes sense for a document-oriented store &amp;#8211; i.e. couchdb &amp;#8211; but strikes me as unsuited to the hbase case especially with possibility of binary keys and column qualifiers.&lt;/p&gt;</comment>
                            <comment id="12663823" author="yedingding@gmail.com" created="Wed, 14 Jan 2009 18:16:43 +0000"  >&lt;p&gt;Most of the case, the base64 encoded object is the String.  But sometimes we do need more, such as int, binary stream. Can it also cover those?&lt;/p&gt;</comment>
                            <comment id="12663846" author="macdiesel" created="Wed, 14 Jan 2009 18:48:37 +0000"  >&lt;p&gt;Sishen:&lt;br/&gt;
I don&apos;t believe it matters from my perspective as I&apos;m always dealing with byte arrays....&lt;/p&gt;

&lt;p&gt;Stack:&lt;br/&gt;
I&apos;ll encode the row, cell name and cell value.&lt;/p&gt;

&lt;p&gt;I have Michael&apos;s updated json jar and have incorporated the base64 changes into the json serialization.  &lt;/p&gt;

&lt;p&gt;I&apos;m working on a few more issues and hope to have a patch submitted soon.  &lt;/p&gt;</comment>
                            <comment id="12663854" author="stack" created="Wed, 14 Jan 2009 19:01:35 +0000"  >&lt;p&gt;Brian: I&apos;d like to punt on this making 0.19.0.  Patch is big and its likely we still have stuff to work through, test and review.  I see it being 2 or 3 more days at least before we&apos;re done review and tests.  RC is already well late.  OK if we put your work in 0.19.1 hbase?  &amp;lt; a month I&apos;d say?&lt;/p&gt;</comment>
                            <comment id="12663858" author="macdiesel" created="Wed, 14 Jan 2009 19:08:47 +0000"  >&lt;p&gt;I didn&apos;t expect it to make 0.19.0 anyway.  Whatever works.&lt;/p&gt;</comment>
                            <comment id="12663859" author="yedingding@gmail.com" created="Wed, 14 Jan 2009 19:12:40 +0000"  >&lt;p&gt;Brian:&lt;/p&gt;

&lt;p&gt;I see. I think my issues should be how to convert the byte array to the objects in client such as ruby, python, etc,  but not the hbase. byte array really works well,  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12663893" author="stack" created="Wed, 14 Jan 2009 21:25:43 +0000"  >&lt;p&gt;Brian: I was hoping it would make it into 0.19.0 (smile).&lt;/p&gt;</comment>
                            <comment id="12663906" author="macdiesel" created="Wed, 14 Jan 2009 22:18:57 +0000"  >&lt;p&gt;This AgileJson.jar replaces the old json.jar that is attached to this issue.  This new jar should be used going forward.&lt;/p&gt;</comment>
                            <comment id="12663909" author="macdiesel" created="Wed, 14 Jan 2009 22:22:50 +0000"  >&lt;p&gt;There are many fixes included in this latest version of the patch, including the following items:  &lt;/p&gt;

&lt;p&gt;I retested and fixed any requests that were not working correctly.  &lt;br/&gt;
Status messages should be more consistent&lt;br/&gt;
Status (200/404/etc) should now be inline with the rest interface &lt;br/&gt;
Exception handling fixed in a few places&lt;br/&gt;
the path segments parser was rewritten to allow /api/* to be in the path (this was breaking alot of stuff before)&lt;br/&gt;
Base64 encoding on row names, cell names, cell values.&lt;/p&gt;
</comment>
                            <comment id="12665535" author="stack" created="Tue, 20 Jan 2009 20:00:27 +0000"  >&lt;p&gt;HColumnDescriptor patch doesn&apos;t apply to TRUNK but thats minor fixup on my part.  Would suggest that the REST server print out the port its running on (but that can be another issue).  Its a pity this stuff don&apos;t work from the browser.  I get 406 if I browse there but no biggie.  I took a quick look at patch.  Looks good to me.  I tried it. Was able to do first few curl examples from wiki page.  Results looked like those posted on wiki page.&lt;/p&gt;

&lt;p&gt;Sishen, what do you think?  If OK with you, if it works with your library, I&apos;d like to apply this and then open new issues as we find broken stuff?&lt;/p&gt;
</comment>
                            <comment id="12665598" author="yedingding@gmail.com" created="Tue, 20 Jan 2009 22:25:15 +0000"  >&lt;p&gt;The patch does a good work. &lt;/p&gt;

&lt;p&gt; I&apos;m happy to see the big advance and will update my library to match the new REST interface. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12666012" author="stack" created="Thu, 22 Jan 2009 00:23:10 +0000"  >&lt;p&gt;Committed.  Thanks for the fat patch Brian and thanks for persisting through multiple revisions.  Thanks too to Michael Gottesman for original work and agile json.&lt;/p&gt;</comment>
                            <comment id="12666018" author="stack" created="Thu, 22 Jan 2009 01:03:15 +0000"  >&lt;p&gt;Looks like REST still uses the xmlenc for XML outputting (Thats no prob., just thought it no longer used it).&lt;/p&gt;</comment>
                            <comment id="12666019" author="stack" created="Thu, 22 Jan 2009 01:05:30 +0000"  >&lt;p&gt;Added note to head of the REST wik page that REST has been refactored preserving the API&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12397916" name="AgileJSON.jar" size="67533" author="macdiesel" created="Wed, 14 Jan 2009 22:18:57 +0000"/>
                            <attachment id="12396605" name="REST-Upgrade-Notes.txt" size="5141" author="macdiesel" created="Mon, 22 Dec 2008 15:43:20 +0000"/>
                            <attachment id="12396236" name="RESTPatch-pass1.patch" size="227313" author="macdiesel" created="Tue, 16 Dec 2008 20:57:19 +0000"/>
                            <attachment id="12397559" name="hbase-1064-patch-v2.patch" size="274643" author="macdiesel" created="Fri, 9 Jan 2009 20:29:46 +0000"/>
                            <attachment id="12397715" name="hbase-1064-patch-v3.patch" size="271392" author="macdiesel" created="Mon, 12 Jan 2009 20:39:03 +0000"/>
                            <attachment id="12397917" name="hbase-1064-patch-v4.patch" size="276539" author="macdiesel" created="Wed, 14 Jan 2009 22:22:50 +0000"/>
                            <attachment id="12396237" name="json2.jar" size="103896" author="macdiesel" created="Tue, 16 Dec 2008 20:57:56 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 16 Dec 2008 22:00:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31973</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 48 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hb3z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>99062</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>