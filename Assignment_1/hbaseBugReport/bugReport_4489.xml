<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:19:23 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-4489/HBASE-4489.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-4489] Better key splitting in RegionSplitter</title>
                <link>https://issues.apache.org/jira/browse/HBASE-4489</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The RegionSplitter utility allows users to create a pre-split table from the command line or do a rolling split on an existing table. It supports pluggable split algorithms that implement the SplitAlgorithm interface. The only/default SplitAlgorithm is one that assumes keys fall in the range from ASCII string &quot;00000000&quot; to ASCII string &quot;7FFFFFFF&quot;. This is not a sane default, and seems useless to most users. Users are likely to be surprised by the fact that all the region splits occur in in the byte range of ASCII characters.&lt;/p&gt;

&lt;p&gt;A better default split algorithm would be one that evenly divides the space of all bytes, which is what this patch does. Making a table with five regions would split at \x33\x33..., \x66\x66...., \x99\x99..., \xCC\xCC..., and \xFF\xFF.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12524750">HBASE-4489</key>
            <summary>Better key splitting in RegionSplitter</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dave_revell">Dave Revell</assignee>
                                    <reporter username="dave_revell">Dave Revell</reporter>
                        <labels>
                    </labels>
                <created>Mon, 26 Sep 2011 21:59:52 +0000</created>
                <updated>Fri, 12 Oct 2012 05:34:56 +0000</updated>
                            <resolved>Thu, 20 Oct 2011 00:10:50 +0000</resolved>
                                    <version>0.90.4</version>
                                    <fixVersion>0.94.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13114973" author="yuzhihong@gmail.com" created="Mon, 26 Sep 2011 22:18:52 +0000"  >&lt;p&gt;I looked at patch for TRUNK:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[][] splitKeysPlusEndpoints = Bytes.split(firstRowBytes, lastRowBytes,
+              numRegions-1);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It seems range checking is missing.&lt;/p&gt;</comment>
                            <comment id="13114982" author="mingjielai" created="Mon, 26 Sep 2011 22:29:28 +0000"  >&lt;p&gt;Dave. &lt;/p&gt;

&lt;p&gt;Changing a default configuration may affect existing users:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt;&amp;lt;? &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; SplitAlgorithm&amp;gt; splitClass = conf.getClass(
-        &lt;span class=&quot;code-quote&quot;&gt;&quot;split.algorithm&quot;&lt;/span&gt;, MD5StringSplit.class, SplitAlgorithm.class);
+        &lt;span class=&quot;code-quote&quot;&gt;&quot;split.algorithm&quot;&lt;/span&gt;, UniformSplit.class, SplitAlgorithm.class);
     SplitAlgorithm splitAlgo;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="13115051" author="dave_revell" created="Tue, 27 Sep 2011 00:01:03 +0000"  >&lt;p&gt;Mingjie, I would agree with you if the existing behavior was sane, but it has some problems:&lt;/p&gt;

&lt;p&gt;1. Using ASCII strings as keys is a poor choice, and to have it be a default in a builtin tool would send the wrong message. Since HFiles repeat the key for every cell in the table, small key size is very important.&lt;/p&gt;

&lt;p&gt;2. The MD5StringSplit class contains a bug that makes the current behavior even less sane. It assumes that an ASCII hex representation of an MD5 hash begins with 0, 1, 2, 3, 4, 5, 6, or 7. This is incorrect, since an MD5 hash is just a 128-bit number and can start with any digit. The result will be a single oversized region at the high end of the key space.&lt;/p&gt;

&lt;p&gt;So as far as I can tell, the existing behavior does the wrong thing, and furthermore does it wrongly. We shouldn&apos;t preserve this situation. &lt;/p&gt;

&lt;p&gt;If I&apos;ve misunderstood the situation I definitely welcome corrections.&lt;/p&gt;</comment>
                            <comment id="13115052" author="dave_revell" created="Tue, 27 Sep 2011 00:02:30 +0000"  >&lt;p&gt;The bug in MD5StringSplit I mentioned in my earlier comment occurs in the definition of the variable MAXMD5 in RegionSplitter.java.&lt;/p&gt;</comment>
                            <comment id="13115054" author="yuzhihong@gmail.com" created="Tue, 27 Sep 2011 00:04:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;since an MD5 hash is just a 128-bit number and can start with any digit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The above was confirmed by the creator of MD5 hash.&lt;/p&gt;</comment>
                            <comment id="13115057" author="dave_revell" created="Tue, 27 Sep 2011 00:08:28 +0000"  >&lt;p&gt;Ted: I&apos;m not clear what you&apos;re suggesting. Do you want to see length checking of the arrays returned from Bytes.split()?&lt;/p&gt;</comment>
                            <comment id="13115068" author="yuzhihong@gmail.com" created="Tue, 27 Sep 2011 00:20:17 +0000"  >&lt;p&gt;@Dave:&lt;br/&gt;
I meant that numRegions could be negative. This is minor.&lt;/p&gt;</comment>
                            <comment id="13115211" author="streamy" created="Tue, 27 Sep 2011 04:50:11 +0000"  >&lt;p&gt;+1 that keyspace split should be 0x00..00 to 0xff..ff and not ascii or 0x7f.&lt;/p&gt;</comment>
                            <comment id="13115870" author="dave_revell" created="Tue, 27 Sep 2011 20:10:51 +0000"  >&lt;p&gt;@Ted: Bytes.split() will check the number of splits and throw IllegalArgumentException if &amp;lt;=0. It seems like a shame to add more code to duplicate a check that&apos;s already being done.&lt;/p&gt;</comment>
                            <comment id="13116021" author="jmhsieh" created="Wed, 28 Sep 2011 00:04:53 +0000"  >&lt;p&gt;A few thoughts:&lt;/p&gt;

&lt;p&gt;I agree with jgray &amp;#8211; I think one fix should correct the MD5 string split so that it splits from 0x00.. 0xff.  I think there could be another separate patch that adds the UniformSplit.  &lt;/p&gt;

&lt;p&gt;I&apos;d be wary of changing the default, especially if this is means to go into a 0.90.x branch.  It looks like as a user you can add and use the UniformSplit by changing the conf option. &lt;/p&gt;

&lt;p&gt;Ideally patches with new functionality or changing semantics would also introduce corresponding tests.  There were no tests on the previous code, and no tests in on the newly introduced code.  Adding tests especially around edge cases could accommodate Ted&apos;s concerns, and it doesn&apos;t really hurt to be extra defensive when coding on non-performance sensitive code.&lt;/p&gt;
</comment>
                            <comment id="13116639" author="dave_revell" created="Wed, 28 Sep 2011 17:59:19 +0000"  >&lt;p&gt;@Jonathan Hsieh, thanks for your thoughts.&lt;/p&gt;

&lt;p&gt;When you say you agree with jgray: he actually wants to do two things. (1) stop using ASCII and (2) remove the 0x7F range bug. It sounds like you only agree with removing the 0x7F range bug but not with avoiding ASCII, for the default split algorithm? &lt;/p&gt;

&lt;p&gt;I agree in principle with your comment about preserving behavior between minor releases. If there were a valid use case for the existing code, I would agree that we should leave it. But given its current brokenness, we should fix it all the way instead of creating an intermediate slightly-broken state that falls short of a real fix. We&apos;re already breaking any existing use cases by virtue of fixing the range bug. We should not create another generation of broken use cases before making the real fix, IMO.&lt;/p&gt;

&lt;p&gt;I agree that tests would be a good idea. I&apos;ll hopefully find some time for that soon.&lt;/p&gt;</comment>
                            <comment id="13116642" author="yuzhihong@gmail.com" created="Wed, 28 Sep 2011 18:04:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;There were no tests on the previous code&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think lack of unit test is not a gating item for this JIRA.&lt;/p&gt;</comment>
                            <comment id="13116648" author="yuzhihong@gmail.com" created="Wed, 28 Sep 2011 18:08:59 +0000"  >&lt;p&gt;+1 on Dave&apos;s patches.&lt;/p&gt;</comment>
                            <comment id="13116683" author="tlipcon" created="Wed, 28 Sep 2011 18:41:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think lack of unit test is not a gating item for this JIRA.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Why not? Lack of unit tests is what caused the bug in the first place. This is trivially testable.&lt;/p&gt;</comment>
                            <comment id="13116685" author="dave_revell" created="Wed, 28 Sep 2011 18:46:12 +0000"  >&lt;p&gt;I don&apos;t object to adding tests. I can have them by next Monday if someone else doesn&apos;t write them first.&lt;/p&gt;</comment>
                            <comment id="13116774" author="jmhsieh" created="Wed, 28 Sep 2011 20:36:15 +0000"  >&lt;p&gt;@Dave&lt;/p&gt;

&lt;p&gt;My main suggestion is fixing based on the original author&apos;s intent in one patch (fixing the ascii encoded hex 7f problem) and then potentially changing the semantics/default in a different patch.  I believe we agree that the intent of the original author&apos;s code looks to be for ascii hex ranges and that the 0x7f max is broken.&lt;/p&gt;

&lt;p&gt;In the tables I&apos;ve encountered, it seems more folks who just use ascii rowkeys than use binary rowkeys.  Using the uniform byte range split keys for ascii character ranges &amp;#8211; would make the new alternate default just a &quot;wrong&quot; for many users.  The shell provides a generic mechanism for generating splits for new tables now (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4000&quot; title=&quot;You can&amp;#39;t specify split points when you create a table in the shell&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4000&quot;&gt;&lt;del&gt;HBASE-4000&lt;/del&gt;&lt;/a&gt;) so it seems like using that completely generic approach seems more useful given knowledge about your particular row keys.&lt;/p&gt;

&lt;p&gt;From a code skim, it seems that rollingSplits is &quot;smarter&quot; - it take existing row key boundaries and split them at region midpoints.  This is still vulnerable to skewed rows key distributions but at least takes into account the existing rowkey ranges!&lt;/p&gt;

</comment>
                            <comment id="13116830" author="yuzhihong@gmail.com" created="Wed, 28 Sep 2011 21:42:28 +0000"  >&lt;p&gt;@Dave, @Jonathan:&lt;br/&gt;
Shall we do the following to move this forward ?&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;fix the range bug in MD5StringSplit&lt;/li&gt;
	&lt;li&gt;provide unit tests&lt;/li&gt;
	&lt;li&gt;keep MD5StringSplit as the default&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="13116839" author="dave_revell" created="Wed, 28 Sep 2011 21:53:52 +0000"  >&lt;p&gt;@Ted, fine with me.&lt;/p&gt;</comment>
                            <comment id="13116951" author="jmhsieh" created="Thu, 29 Sep 2011 01:59:14 +0000"  >&lt;p&gt;@Ted, sounds good to me.&lt;/p&gt;</comment>
                            <comment id="13120277" author="dave_revell" created="Tue, 4 Oct 2011 16:57:06 +0000"  >&lt;p&gt;I haven&apos;t forgotten about this. I&apos;ll write the tests as soon as I can make time, hopefully by the end of the week.&lt;/p&gt;</comment>
                            <comment id="13120382" author="nspiegelberg" created="Tue, 4 Oct 2011 19:02:05 +0000"  >&lt;p&gt;@Dave:&lt;/p&gt;

&lt;p&gt;Some more clarity on MD5StringSplit:&lt;/p&gt;

&lt;p&gt;1. In the original RegionSplitter use case, the key is MD5(username) + username.  In the general case, users probably should use an MD5 algorithm to partition their data if there is not access locality between 2 adjacent keys.  This provides proper random dispersion and helps avoid hot row issues.&lt;br/&gt;
2. It was kept as ASCII for readability on WebUI and logs.  The original application was IO bound &amp;amp; the data size was ~1000 bytes/entry, so key size saving was not a huge issue.  Additionally, key compression (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4218&quot; title=&quot;Data Block Encoding of KeyValues  (aka delta encoding / prefix compression&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4218&quot;&gt;&lt;del&gt;HBASE-4218&lt;/del&gt;&lt;/a&gt;) will be available shortly and make byte code optimization pretty negligible compared to readability benefits.&lt;br/&gt;
3. The end range is not a bug. Java doesn&apos;t natively support uint32, so 7FFF is Max Int for an MD5 hash unless you use int64 in your calculations.  I&apos;m guessing that you&apos;re using the Thrift API, but you probably should code for the native interface.&lt;br/&gt;
4. The uneven key space can (and probably should) be fixed, but it is not a significant issue with a large number of regions.  For N regions across a range of K, the common region size is floor(K/N) &amp;amp; the skewed region is K - (N-1) * floor(K/N) == floor(K/N) + K % N &amp;lt; 2N.  So the worse case is that one region has double load.  For 10 regions/server, 10% variance.&lt;/p&gt;</comment>
                            <comment id="13123577" author="drevell" created="Sun, 9 Oct 2011 00:19:41 +0000"  >&lt;p&gt;@Nicolas, responding to your points one-by-one:&lt;/p&gt;

&lt;p&gt;1 and 2. This is a perfectly valid key format (choosing readability over space efficiency). Hashed keys are good. There is no disagreement here, but as a default it is inefficient for people who don&apos;t need to print their HBase keys, or are willing to parse their keys before printing. Claims of equal compressibility need evidence (raw bytes vs. ASCII)&lt;br/&gt;
3. Why should Java integers or longs have anything to do with an MD5 hash, which is a sequence of 16 bytes? Do we expect clients to truncate their MD5 hashes and make sure the high-order bit is a 0 (as required to be in the range 0-7F)? This is a bizarre default and puts a strange burden on clients, whose MD5 generator is giving them an arbitrary 128-bit array.&lt;br/&gt;
4. What unevenness are you referring to? If you&apos;re referring to the unevenness that results from using arbitrary keys in a partitioning scheme designed for ASCII, it can be quite bad. The first ASCII character, &apos;0&apos;, has the ordinal 48. So the first region would cover the range (empty)..48), which is 48/256 = 18% of the key space, regardless of how many regions there are.&lt;/p&gt;

&lt;p&gt;Maybe we should chat on freenode or Monday? I think it would be fast and easy to figure out where we disagree if we were chatting in realtime. Also, thanks for the input.&lt;/p&gt;</comment>
                            <comment id="13124450" author="dave_revell" created="Mon, 10 Oct 2011 20:13:20 +0000"  >&lt;p&gt;New patches ending in -v2. These have new tests for RegionSplitter.&lt;/p&gt;

&lt;p&gt;Some weirdness: RegionSplitter.rollingSplit() seems to be broken, so it doesn&apos;t have any test cases in my code. I opened &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4567&quot; title=&quot;Divide by zero exception in RegionSplitter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4567&quot;&gt;&lt;del&gt;HBASE-4567&lt;/del&gt;&lt;/a&gt; to focus on this. I also included a test case in TestRegionSplitter.java called reproduceDivByZeroFailure() that reproduces the problem. I think fixing this bug is outside the scope of this ticket.&lt;/p&gt;</comment>
                            <comment id="13124756" author="yuzhihong@gmail.com" created="Tue, 11 Oct 2011 06:53:56 +0000"  >&lt;p&gt;Please add license to TestRegionSplitter.java&lt;/p&gt;</comment>
                            <comment id="13125118" author="jmhsieh" created="Tue, 11 Oct 2011 15:29:27 +0000"  >&lt;p&gt;@Dave&lt;/p&gt;

&lt;p&gt;Part of me really just would prefer decouple rollingSplit from the  presplit min/max value selection &amp;#8211; maybe change this in to two programs &amp;#8211; a custom presplit table generator program that handles key bounds, and a separate rollingSplit program that just splits based on given key ranges.&lt;/p&gt;

&lt;p&gt;I thought that there was agreement that we would keep MD5StringSplit as default for 0.90.  It looks like the default was changed to UniformSplit from MD5StringSplit in both patches.   While I generally agree with your point #3, it is a in 0.90 and would be a compatibility problem for anyone who depends on it.   Would it make sense to change the default in trunk/0.92 (I&apos;m fine with that) but leave 0.90.x as is?    &lt;/p&gt;

&lt;p&gt;Nice functional test.  Did you consider just doing a unit test on the split algorithm along with the cluster spinning functional test?  I believe HBaseAdmin.create(HTableDescriptor htd,byte startKeys[][]) is well tested and would make the non @Ignored portions quicker.  I can see how you need this setup for testing rollingSplit.&lt;/p&gt;

&lt;p&gt;Interesting div 0 bug.  More testing, less surprises!&lt;/p&gt;

&lt;p&gt;Any reason why in testCreatePressplitTable you go to -0x71, 0x81 .. -0x11 instead of just going to 0x8f, 0x9f .. 0xff?  Though more verbose,  I think it is easier to read and follow if you use &quot;positive&quot; hex and cast all of them with (byte), or write out single longs and convert?&lt;/p&gt;
</comment>
                            <comment id="13125196" author="dave_revell" created="Tue, 11 Oct 2011 17:05:54 +0000"  >&lt;p&gt;@Ted: will add license in patch -v3.&lt;/p&gt;

&lt;p&gt;@Jonathan: &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;We did agree to leave MD5StringSplit as the default in 0.90, I&apos;ll fix that&lt;/li&gt;
	&lt;li&gt;I have no objection to turning rollingsplit into a different utility. That seems out of scope here though; my intent in this ticket was to make RegionSplitter do something sane.&lt;/li&gt;
	&lt;li&gt;Unit tests are a good idea, I&apos;ll add some&lt;/li&gt;
	&lt;li&gt;Using positive hex with (byte) casting is a good idea, I&apos;ll change that&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="13125411" author="dave_revell" created="Tue, 11 Oct 2011 21:50:15 +0000"  >&lt;p&gt;v3 patches with suggested fixes.&lt;/p&gt;</comment>
                            <comment id="13125474" author="nspiegelberg" created="Tue, 11 Oct 2011 23:16:37 +0000"  >&lt;p&gt;1. If you want to save space, you should probably switch to a UINT32 for the key range instead of the current INT64.  This should scale for up to 2 million regions.&lt;/p&gt;

&lt;p&gt;2. We (FB) have this specified for MD5StringSplit elsewhere, but I think an mandatory requirement if your goal is &quot;better key splitting&quot; is to provide the hash function that, given a user-specified key, hash it and return what you need to insert into HBase.  Maybe add a generateKey() function to SplitAlgorithm interface.  Worst case is we make it an identity operation.  &lt;/p&gt;

&lt;p&gt;Talked with StumbleUpon &amp;amp; Salesforce guys last week about making this something that users can enable and the HBase Client would transparently do for them.  However, step one is giving users the APIs they need to manually do proper key distribution.&lt;/p&gt;</comment>
                            <comment id="13125481" author="dave_revell" created="Tue, 11 Oct 2011 23:40:14 +0000"  >&lt;p&gt;@Nicolas,&lt;/p&gt;

&lt;p&gt;In response to your #1:&lt;br/&gt;
&amp;gt; &quot;If you want to save space, you should probably switch to a UINT32 for the key range instead of the current INT64. This should scale for up to 2 million regions.&quot;&lt;/p&gt;

&lt;p&gt;Users can use whatever length of keys they want. RegionSplitter just chooses the region boundaries, which has no effect on space consumption.&lt;/p&gt;

&lt;p&gt;In response to your #2:&lt;br/&gt;
Every cryptographic hash function distributes its values uniformly across the space of byte strings of length N. So that makes UniformSplit a sensible default when using MD5 hashes or SHA1 hashes or whatever else, as long as they&apos;re not converted to ASCII. &lt;/p&gt;

&lt;p&gt;The goal here is sane default behavior that makes sense for typical use cases. Evenly dividing the key space accomplishes that goal. At least that&apos;s &lt;b&gt;my&lt;/b&gt; goal.&lt;/p&gt;</comment>
                            <comment id="13125495" author="dave_revell" created="Wed, 12 Oct 2011 00:10:30 +0000"  >&lt;p&gt;@Nicolas, did you know HBase keys are lexicographically ordered? &lt;a href=&quot;http://wiki.apache.org/hadoop/Hbase/DataModel&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://wiki.apache.org/hadoop/Hbase/DataModel&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Otherwise I can&apos;t see how variables (integer, long) are relevant to the problem.&lt;/p&gt;</comment>
                            <comment id="13126270" author="nspiegelberg" created="Thu, 13 Oct 2011 00:37:06 +0000"  >&lt;p&gt;@Dave: &lt;/p&gt;

&lt;p&gt;I think the main disconnect here how is we envision accomplishing the goal of &apos;better key splitting&apos;.  I think your patch provides a different way to split.  However, both algorithms provide a splitting algorithm but do not provide an easy way to normalize your row into this keyspace.  We both assume you are instinctively normalizing to begin with.  I was suggesting adding a static normalization function to both algorithms, in addition to the comments you provided.&lt;/p&gt;

&lt;p&gt;I still think that keeping the algorithm as ASCII would be better for readability &amp;amp; usage.  &lt;br/&gt;
1. Basically, we&apos;re telling users that they need to learn the JRuby byte translation API to issue get commands from the shell if they follow the UniformSplit strategy.   I use the shell far more than I create new tables.  &lt;br/&gt;
2. It&apos;s 8 bits per nibble.  The 2x savings will go away with Delta Encoding &amp;amp; naively using the default UINT128 sha1 would take up more space and be less compressible than an ASCII UINT32 anyways.&lt;/p&gt;</comment>
                            <comment id="13126282" author="streamy" created="Thu, 13 Oct 2011 01:11:20 +0000"  >&lt;p&gt;Historically ASCII has proven a bad choice in key design.  If it&apos;s always fixed length, it&apos;s less of a big deal and really does come down to space savings vs. readability.  In many applications, row keys are composite keys made up of many different things.  Often times, the key may be preceded by some fixed-length random hash of some sort.&lt;/p&gt;

&lt;p&gt;I almost always want to be building these composite keys from fixed-length binary ints/longs and such, rather than fixed-length ascii characters.&lt;/p&gt;

&lt;p&gt;If we are talking a straightforward key-val situation with a string-like key, then the usability of ASCII would make sense.&lt;/p&gt;</comment>
                            <comment id="13126290" author="dave_revell" created="Thu, 13 Oct 2011 01:27:17 +0000"  >&lt;p&gt;@Nicolas and I just chatted in #hbase. Now we think that forcing the user to specify the split algorithm makes the most sense; we don&apos;t want to implicitly assume anything about the user&apos;s key distribution since badness could happen in either case. Jonathan Gray agreed with the idea.&lt;/p&gt;

&lt;p&gt;Everyone OK with this?&lt;/p&gt;</comment>
                            <comment id="13126292" author="dave_revell" created="Thu, 13 Oct 2011 01:31:17 +0000"  >&lt;p&gt;Re: normalization, I think nspiegelberg agreed in #hbase that normalization can happen in a different ticket. Right nspiegelberg?&lt;/p&gt;</comment>
                            <comment id="13126301" author="nspiegelberg" created="Thu, 13 Oct 2011 01:50:54 +0000"  >&lt;p&gt;@Dave : correct on normalization function.  I&apos;ll open up another ticket&lt;/p&gt;</comment>
                            <comment id="13126302" author="nspiegelberg" created="Thu, 13 Oct 2011 02:12:57 +0000"  >&lt;p&gt;btw: Since you&apos;re putting this as an explicit option on the command line, the proper name of that class should probably be HexStringSplit instead of MD5StringSplit.&lt;/p&gt;</comment>
                            <comment id="13126767" author="dave_revell" created="Thu, 13 Oct 2011 18:01:50 +0000"  >&lt;p&gt;nspiegelberg: going to change the upper bound for MD5StringSplit from 7FFF... to FFFF...  OK with you?&lt;/p&gt;</comment>
                            <comment id="13126806" author="nspiegelberg" created="Thu, 13 Oct 2011 18:55:45 +0000"  >&lt;p&gt;@Dave: go for it&lt;/p&gt;</comment>
                            <comment id="13126918" author="dave_revell" created="Thu, 13 Oct 2011 21:03:18 +0000"  >&lt;p&gt;New patch for trunk with last night&apos;s feedback. &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The SplitAlgorithm to use is now a required parameter&lt;/li&gt;
	&lt;li&gt;MD5StringSplit is now called HexStringSplit&lt;/li&gt;
	&lt;li&gt;The ceiling of 7FFFFFFF is now FFFFFFFF, and tests were changed to accomodate this.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;No changes are necessary on the 0.90 branch, so the -v3 patch for 0.90 is still current.&lt;/p&gt;</comment>
                            <comment id="13127167" author="nspiegelberg" created="Fri, 14 Oct 2011 00:21:15 +0000"  >&lt;p&gt;Review comments:&lt;/p&gt;

&lt;p&gt;1. With the &apos;newSplitAlgoInstance&apos; factory, should we have HexStringSplit &amp;amp; UniformSplit be special words to instantiate those classes?  Or do they not need any prefix before the classname because they are in the same namespace?  I just think, in general, you want to run: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;bin/hbase RegionSplitter UniformSplit table&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2. We should probably put the 2 well-known class options in the help text.&lt;/p&gt;</comment>
                            <comment id="13128044" author="dave_revell" created="Sat, 15 Oct 2011 03:00:46 +0000"  >&lt;p&gt;Nicolas, agreed. New patch for trunk (v5) attached that incorporates your feedback.&lt;/p&gt;

&lt;p&gt;The v3 patch is still the most current patch for 0.90.&lt;/p&gt;</comment>
                            <comment id="13128047" author="yuzhihong@gmail.com" created="Sat, 15 Oct 2011 03:19:45 +0000"  >&lt;p&gt;+1 on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4489&quot; title=&quot;Better key splitting in RegionSplitter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4489&quot;&gt;&lt;del&gt;HBASE-4489&lt;/del&gt;&lt;/a&gt;-trunk-v5.patch&lt;/p&gt;</comment>
                            <comment id="13131183" author="nspiegelberg" created="Wed, 19 Oct 2011 23:58:41 +0000"  >&lt;p&gt;Code-wise, I think everything looks fine.  I&apos;m going to make a minor adjustment to the unit tests prior to commit. Namely: we should not add unit tests and then put down @Ignore.  Instead, remove these unit tests and add them back in with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4567&quot; title=&quot;Divide by zero exception in RegionSplitter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4567&quot;&gt;&lt;del&gt;HBASE-4567&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13131193" author="nspiegelberg" created="Thu, 20 Oct 2011 00:10:50 +0000"  >&lt;p&gt;putting in 0.94 since it is an improvement and we don&apos;t plan on a long release cycle between 0.92 and 0.94&lt;/p&gt;</comment>
                            <comment id="13131274" author="hudson" created="Thu, 20 Oct 2011 02:19:53 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #2343 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/2343/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/2343/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4489&quot; title=&quot;Better key splitting in RegionSplitter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4489&quot;&gt;&lt;del&gt;HBASE-4489&lt;/del&gt;&lt;/a&gt; Better key splitting in RegionSplitter&lt;/p&gt;

&lt;p&gt;nspiegelberg : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/util/RegionSplitter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/util/TestRegionSplitter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13142642" author="hudson" created="Wed, 2 Nov 2011 22:46:46 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #2402 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/2402/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/2402/&lt;/a&gt;)&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4627&quot; title=&quot;Ability to specify a custom start/end to RegionSplitter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4627&quot;&gt;&lt;del&gt;HBASE-4627&lt;/del&gt;&lt;/a&gt; Ability to specify a custom start/end to RegionSplitter&lt;/p&gt;

&lt;p&gt;Summary:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4627&quot; title=&quot;Ability to specify a custom start/end to RegionSplitter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4627&quot;&gt;&lt;del&gt;HBASE-4627&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;added a custom start/end row to RegionSplitter.  Also solved&lt;br/&gt;
an off-by-one error because the end row is prefix-inclusive and not&lt;br/&gt;
exclusive.&lt;/p&gt;

&lt;p&gt;&amp;lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4489&quot; title=&quot;Better key splitting in RegionSplitter&quot;&amp;gt;&amp;lt;del&amp;gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4489&quot; title=&quot;Better key splitting in RegionSplitter&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4489&quot;&gt;&lt;del&gt;HBASE-4489&lt;/del&gt;&lt;/a&gt;&amp;lt;/del&amp;gt;&amp;lt;/a&amp;gt; changed the default endKey on HexStringSplit from 7FFF... to FFFF...  While this is correct, existing users of 0.90 RegionSplitter have 7FFF as the end key in their schema and the last region will not split properly under this new code.  We need to let the user specify a custom start/end key range for when situations like this arise.  Optimally, we should also write the start/end key in META so we could figure this out implicitly instead of requiring the user to explicitly specify it.&lt;/p&gt;

&lt;p&gt;Test Plan:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;mvn test -Dtest=TestRegionSplitter&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;CC: JIRA&lt;/p&gt;

&lt;p&gt;Reviewers: DUMMY_REVIEWER&lt;/p&gt;

&lt;p&gt;Differential Revision: 39&lt;/p&gt;

&lt;p&gt;nspiegelberg : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/util/Bytes.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/util/RegionSplitter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/util/TestRegionSplitter.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12527837">HBASE-4627</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12527838">HBASE-4628</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12496574" name="HBASE-4489-branch0.90-v1.patch" size="4069" author="dave_revell" created="Mon, 26 Sep 2011 22:11:01 +0000"/>
                            <attachment id="12498460" name="HBASE-4489-branch0.90-v2.patch" size="15113" author="dave_revell" created="Mon, 10 Oct 2011 20:13:20 +0000"/>
                            <attachment id="12498672" name="HBASE-4489-branch0.90-v3.patch" size="19779" author="dave_revell" created="Tue, 11 Oct 2011 21:50:15 +0000"/>
                            <attachment id="12496575" name="HBASE-4489-trunk-v1.patch" size="4080" author="dave_revell" created="Mon, 26 Sep 2011 22:11:01 +0000"/>
                            <attachment id="12498459" name="HBASE-4489-trunk-v2.patch" size="14890" author="dave_revell" created="Mon, 10 Oct 2011 20:13:20 +0000"/>
                            <attachment id="12498671" name="HBASE-4489-trunk-v3.patch" size="20273" author="dave_revell" created="Tue, 11 Oct 2011 21:50:15 +0000"/>
                            <attachment id="12498925" name="HBASE-4489-trunk-v4.patch" size="28461" author="dave_revell" created="Thu, 13 Oct 2011 21:03:17 +0000"/>
                            <attachment id="12499121" name="HBASE-4489-trunk-v5.patch" size="29540" author="dave_revell" created="Sat, 15 Oct 2011 03:00:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 26 Sep 2011 22:18:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3156</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 7 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i08rbb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>49025</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>The split algorithm used by RegionSplitter is now a required parameter. Previously there was one split algorithm called MD5StringSplit, which was the default. MD5StringSplit has been renamed to HexStringSplit, and tweaked so that its maximum key is now &amp;quot;FFFFFFFF&amp;quot; instead of &amp;quot;7FFFFFFF. A new split algorithm UniformSplit has been added which treats keys as arbitrary bytes.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>