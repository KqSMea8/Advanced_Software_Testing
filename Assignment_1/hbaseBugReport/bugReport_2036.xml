<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:58:26 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2036/HBASE-2036.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2036] Use Configuration instead of HBaseConfiguration </title>
                <link>https://issues.apache.org/jira/browse/HBASE-2036</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;HBaseConfiguration extends Configuration but does not add any functionality to it. The only function is hashCode() which really should be refactored into Hadoop Configuration. &lt;br/&gt;
I think in all the places(especially in the client side)  HBase methods and classes should accept Configuration rather than HBaseConfiguration. The creation of the configuration with the right files (hbase-site and hbase-default) should not be encapsulated in a private method, but in a public static one. &lt;/p&gt;

&lt;p&gt;The issues has arisen in our nutch+hbase patch for which we include both nutch configuration and hbase configurations. Moreover people may want to include separate project-specific configuration files to their configurations without the need to be dependent on the HBaseConfiguration. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12442983">HBASE-2036</key>
            <summary>Use Configuration instead of HBaseConfiguration </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="enis">Enis Soztutar</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Dec 2009 13:08:23 +0000</created>
                <updated>Fri, 20 Nov 2015 13:01:15 +0000</updated>
                            <resolved>Thu, 31 Dec 2009 20:45:55 +0000</resolved>
                                                    <fixVersion>0.90.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12788810" author="stack" created="Thu, 10 Dec 2009 17:54:38 +0000"  >&lt;p&gt;I&apos;m not so sure hashcode in HBC is a good idea.  Its up in the air at the moment.  It&apos;ll probably be removed.&lt;/p&gt;

&lt;p&gt;If we used plain Configuration Enis, how would we ensure that hbase-*.xml had been read into the Configuration?   The public static method you allude to above would be where?&lt;/p&gt;

&lt;p&gt;What if we kept HBC and just changed methods so they took a Configuration, not necessarily an HBC?  Would that work?&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;
</comment>
                            <comment id="12789206" author="dogacan" created="Fri, 11 Dec 2009 10:09:32 +0000"  >&lt;p&gt;If you are going to remove hashCode(), then it can be done just like in nutch. Add a static HBaseConfiguration.create() method that creates a Configuration object, reads hbase-*.xml as well then returns the Configuration object. &lt;/p&gt;</comment>
                            <comment id="12789446" author="stack" created="Fri, 11 Dec 2009 18:37:39 +0000"  >&lt;p&gt;@Do&#287;acan What is your timeline?  OK if we make these changes for hbase 0.21 or you need them in 0.20 branch?&lt;/p&gt;</comment>
                            <comment id="12789592" author="enis" created="Fri, 11 Dec 2009 22:53:46 +0000"  >&lt;p&gt;Sorry, I intended to write a preliminary patch for this, but I&apos;ve got stuck up with something else. We(either me or Dogacan) will write the patch hopefully before Monday.  I think it is OK for the 0.21 branch for this, since there is some more time needed for nutchbase to become mature enough. &lt;/p&gt;</comment>
                            <comment id="12789760" author="enis" created="Sat, 12 Dec 2009 16:27:49 +0000"  >&lt;p&gt;I have put together a patch (not covering src/test yet). HBaseConfiguration constructors are deprecated and create() methods are added. I think it illustrates the goal of the issue. For compatibility, the methods are only deprecated. We can make remove the deprecated methods in the next release. &lt;/p&gt;</comment>
                            <comment id="12790243" author="davelatham" created="Mon, 14 Dec 2009 17:14:10 +0000"  >&lt;p&gt;This looks like a good idea.&lt;/p&gt;

&lt;p&gt;It relates to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2027&quot; title=&quot;HConnectionManager.HBASE_INSTANCES leaks TableServers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2027&quot;&gt;&lt;del&gt;HBASE-2027&lt;/del&gt;&lt;/a&gt; and some other issues that deal with how HConnection&apos;s are cached by the client.  Right now, they use HBaseConfiguration as a key to a set of cached connections and information.  It looks like the patch removes equals() from HBaseConfiguration (but not hashcode()) and then uses the hashcode as the key instead.&lt;/p&gt;

&lt;p&gt;If we&apos;re planning on removing HBaseConfiguration entirely, what about introducing a separate key object that can implement both equals and hashcode properly based on the relevant information from a Configuration object, then using that as the key.  That would avoid potential collisions, get rid of having an object with just a hashcode method but not equals, and separate this connection caching logic away from the Configuration where it doesn&apos;t really belong.&lt;/p&gt;

&lt;p&gt;The trick then is identifying the relevant information to base it on.  I can see two ways of doing it, maybe someone else could come up with something better.  The current code uses all properties in the Configuration.  This is complete, but runs the risk of redundant connections for configurations that have only irrelevant config changes.  Another choice would be to explicitly define the set of hbase config properties that define the connections.  However, this could be fragile to changes.&lt;/p&gt;

&lt;p&gt;Anyone else have thoughts?&lt;/p&gt;</comment>
                            <comment id="12790288" author="enis" created="Mon, 14 Dec 2009 18:53:46 +0000"  >&lt;blockquote&gt;&lt;p&gt;It relates to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2027&quot; title=&quot;HConnectionManager.HBASE_INSTANCES leaks TableServers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2027&quot;&gt;&lt;del&gt;HBASE-2027&lt;/del&gt;&lt;/a&gt; and some other issues that deal with how HConnection&apos;s are cached by the client. Right now, they use HBaseConfiguration as a key to a set of cached connections and information. It looks like the patch removes equals() from HBaseConfiguration (but not hashcode()) and then uses the hashcode as the key instead.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah, the patch should not remove equals() and keep hashCode(). Since I have insufficient background about &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2027&quot; title=&quot;HConnectionManager.HBASE_INSTANCES leaks TableServers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2027&quot;&gt;&lt;del&gt;HBASE-2027&lt;/del&gt;&lt;/a&gt;, I did not want to make any changes to any configuration-related logic, so I think keeping hashcode as the key may work for now. But calculating the whole hashcode() at every call seems a major overkill. Maybe we can cache the hashcode in the conf itself so that the hash-code works much faster. Does it make sense? &lt;/p&gt;</comment>
                            <comment id="12790364" author="stack" created="Mon, 14 Dec 2009 21:00:41 +0000"  >&lt;p&gt;Enis: This looks great.  Lets get it into TRUNK.&lt;/p&gt;

&lt;p&gt;Dave: I like the idea of a Key object, separating this whacky keying of HConnectionManagers from Configuration.  What about the Configuration/HBaseConfiguration object id?  Your Key object could be internal class and it would take the object id as the thing to check equals and hashcode on?  If someone wants to make a new HCM, then they just create a new Configuraiton/HBaseConfiguration?&lt;/p&gt;</comment>
                            <comment id="12790385" author="davelatham" created="Mon, 14 Dec 2009 21:31:53 +0000"  >&lt;p&gt;Enis: It would definitely be more efficient if we cache the hash code.  Can we assume that no one will modify the Configuration after it&apos;s already been used?  It seems the existing code already makes that assumption, so it&apos;s probably safe to stick with that.&lt;/p&gt;

&lt;p&gt;Stack: I agree, an internal ConfigurationKey would probably be a good idea.  I&apos;d rather have it cache the hashcode than use the object id, so that identical Configurations will work.  For example, if you do a new HTable(&quot;tableName&quot;), it automatically instantiates a new HBaseConfiguration.&lt;/p&gt;</comment>
                            <comment id="12790390" author="stack" created="Mon, 14 Dec 2009 21:44:08 +0000"  >&lt;p&gt;Yes presumption seems to be that the configuration won&apos;t change.   Hashing all in a configuration will be expensive.  There is usually a lot of config in there.  For a new htable that is not passed a configuration can we not make a new instance internal to the htable constrictor as we currently do?  &lt;/p&gt;</comment>
                            <comment id="12790433" author="davelatham" created="Mon, 14 Dec 2009 23:06:11 +0000"  >&lt;p&gt;Yes, we can make a new Configuration instance just as we currently do, but if that Configuration has the same properties as an existing one, then we should reuse the cached connections &amp;amp; data instead of building up a new set.  To do that, we need to match against an existing key, which means a new hash.  So long as we cache the hash, then it only needs to be done once per instantiation.&lt;/p&gt;

&lt;p&gt;On the other hand, if someone is using the HTable() constructor and passing in the same Configuration each time, then it would be nice to avoid the hash step.  We could bring back the old WeakHashMap but this time map from Configuration to ConfigurationKey so that we can reuse the ConfigurationKey if it&apos;s the same instance of Configuration.  Is it worth that added complexity to avoid recomputing the hash code each time we instantiate an HTable?  I think I would lean toward no.&lt;/p&gt;</comment>
                            <comment id="12790468" author="stack" created="Mon, 14 Dec 2009 23:49:42 +0000"  >&lt;p&gt;.bq ...then we should reuse the cached connections &amp;amp; data instead of building up a new set. &lt;/p&gt;

&lt;p&gt;Dave, doing the above would be fancy and a new facility, no?  What if we didn&apos;t do this new smarts, but just left it as dumb as it was, would that simplify things?&lt;/p&gt;

&lt;p&gt;.bq Is it worth that added complexity to avoid recomputing the hash code each time we instantiate an HTable?&lt;/p&gt;

&lt;p&gt;I&apos;m with you that its not worth.&lt;/p&gt;

&lt;p&gt;My base thing is that at the root, this static map of HCMs is broke so lets not go out of our way to preserve it.  I like your KeyConfiguration idea.  It gets the ugly equals and hashcode out of HBC.  I think object identity is good enough.  The broke HCM map will work as it did?&lt;/p&gt;
</comment>
                            <comment id="12790498" author="davelatham" created="Tue, 15 Dec 2009 00:51:00 +0000"  >&lt;p&gt;If we use object identity, the HCM map will not work as it did.  With the current code, when you create a new HTable without passing in a HBaseConfiguration object, it instantiates a new one.  The HCM will find the existing connections/data via the hash map (and hashing of the data).  The current patch does the same thing via HBaseConfiguration.create().  So if we changed to only use object identity, then each time you create a new HTable this way, it will not find the existing TableServers object containing the existing connections &amp;amp; data.  I think we should move to a internal ConnectionKey that has the hashcode / equals logic as well as caching of the hash code.  This will preserve the existing behavior and clean up the Configuration object.&lt;/p&gt;</comment>
                            <comment id="12790999" author="stack" created="Tue, 15 Dec 2009 22:34:44 +0000"  >&lt;p&gt;@Dave I see.  You are right.  I thought the hashCode a recent addition but see it old.  +1 on ConnectionKey made around Configuration/HBaseConfiguration#hashCode.&lt;/p&gt;</comment>
                            <comment id="12791000" author="stack" created="Tue, 15 Dec 2009 22:35:26 +0000"  >&lt;p&gt;Enis, you up for finishing off the change or you want us to take it from here?&lt;/p&gt;</comment>
                            <comment id="12792415" author="enis" created="Fri, 18 Dec 2009 09:49:47 +0000"  >&lt;p&gt;ok, then let me finish with the patch first. Then we can open another issue for this. I think you can find the fix better then me. Anyway, I will complete the fix as soon as I can, Thanks. &lt;/p&gt;</comment>
                            <comment id="12795134" author="enis" created="Tue, 29 Dec 2009 20:15:44 +0000"  >&lt;p&gt;Here is a first shot at the complete patch. All the unit tests pass, except org.apache.hadoop.hbase.util.TestMergeTool. &lt;/p&gt;</comment>
                            <comment id="12795502" author="stack" created="Thu, 31 Dec 2009 00:14:30 +0000"  >&lt;p&gt; I&apos;ve not completed the review yet but so far so good.  Just giving a heads up that I&apos;m going to commit this patch soon (will try and figure the broken test).  Its big so especially liable to rot so lets get it in. &lt;/p&gt;</comment>
                            <comment id="12795546" author="stack" created="Thu, 31 Dec 2009 05:58:47 +0000"  >&lt;p&gt;Tracking down why TestMergeTool is failing.  Its a messy test particularly in how it does its setup.  Here is the failure mode:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Testcase: testMergeTool took 10.931 sec
  Caused an ERROR
&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
java.lang.NullPointerException
  at org.apache.hadoop.fs.FileSystem.getDefaultUri(FileSystem.java:111)
  at org.apache.hadoop.fs.FileSystem.get(FileSystem.java:103)
  at org.apache.hadoop.hbase.util.Merge.run(Merge.java:79)
  at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:65)
  at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:79)
  at org.apache.hadoop.hbase.util.TestMergeTool.mergeAndVerify(TestMergeTool.java:174)
  at org.apache.hadoop.hbase.util.TestMergeTool.testMergeTool(TestMergeTool.java:252)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12795670" author="stack" created="Thu, 31 Dec 2009 20:45:55 +0000"  >&lt;p&gt;Committed TRUNK.  Thanks for the patch Enis.  It was a bug in how Merge was using Configurable interface that was causing the test failure.  Let us know if anything else we can do to help out your effort.&lt;/p&gt;</comment>
                            <comment id="15017757" author="lars_francke" created="Fri, 20 Nov 2015 13:01:15 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12427825" name="hconf.patch" size="83223" author="enis" created="Sat, 12 Dec 2009 16:27:49 +0000"/>
                            <attachment id="12429083" name="hconf_v1.patch" size="90784" author="enis" created="Tue, 29 Dec 2009 20:15:44 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 10 Dec 2009 17:54:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32378</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hg8n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>99893</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>HBaseConfiguration as an object is now deprecated.  Use HBaseConfiguration.create to make an Hadoop Configuration populated with hbase config. from here on out.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>