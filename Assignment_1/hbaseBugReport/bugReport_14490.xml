<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:53:37 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14490/HBASE-14490.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14490] [RpcServer] reuse request read buffer</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14490</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Reusing buffer to read request.It&apos;s not necessary to every request free buffer.The idea of optimization is to reduce the times that allocate ByteBuffer.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Modification&lt;/b&gt;&lt;br/&gt;
1. &lt;tt&gt;saslReadAndProcess&lt;/tt&gt; ,&lt;tt&gt;processOneRpc&lt;/tt&gt;, &lt;tt&gt;processUnwrappedData&lt;/tt&gt;, &lt;tt&gt;processConnectionHeader&lt;/tt&gt; accept a ByteBuffer instead of byte[].They can move &lt;tt&gt;ByteBuffer.position&lt;/tt&gt; correctly when we have read the data.&lt;/p&gt;

&lt;p&gt;2. &lt;tt&gt;processUnwrappedData&lt;/tt&gt; no longer use any extra memory.&lt;/p&gt;

&lt;p&gt;3. Maintaining a buffer pool in each &lt;tt&gt;Connection&lt;/tt&gt;.&lt;/p&gt;

</description>
                <environment></environment>
        <key id="12896352">HBASE-14490</key>
            <summary>[RpcServer] reuse request read buffer</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="gzh1992n">Zephyr Guo</assignee>
                                    <reporter username="gzh1992n">Zephyr Guo</reporter>
                        <labels>
                            <label>performance</label>
                    </labels>
                <created>Fri, 25 Sep 2015 08:37:21 +0000</created>
                <updated>Thu, 7 Apr 2016 06:05:14 +0000</updated>
                                            <version>2.0.0</version>
                    <version>1.0.2</version>
                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>1.0.2</fixVersion>
                                    <component>IPC/RPC</component>
                        <due>Fri, 25 Sep 2015 00:00:00 +0000</due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="14907879" author="hadoopqa" created="Fri, 25 Sep 2015 10:02:56 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762355/HBASE-14490-v1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762355/HBASE-14490-v1.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit a33adf2f0b050e9cf9330fd5ab7e200a7dd27d6d.&lt;br/&gt;
  ATTACHMENT ID: 12762355&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.ipc.TestAsyncIPC&lt;br/&gt;
                  org.apache.hadoop.hbase.security.TestSecureRPC&lt;br/&gt;
                  org.apache.hadoop.hbase.ipc.TestIPC&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.hdfs.server.namenode.TestFSImageWithSnapshot.testLoadImageWithAppending(TestFSImageWithSnapshot.java:411)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15738//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15738//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15738//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15738//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15738//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15738//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15738//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15738//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14907951" author="ikeda" created="Fri, 25 Sep 2015 11:33:12 +0000"  >&lt;p&gt;&lt;tt&gt;ByteBuffer.array&lt;/tt&gt; might contain garbage. Also keeping objects tend to require Full GC to collect the objects.&lt;/p&gt;</comment>
                            <comment id="14908069" author="gzh1992n" created="Fri, 25 Sep 2015 14:12:45 +0000"  >&lt;p&gt;What is the meaning of &#8220;contain garbage&#8221;&#65311;&lt;br/&gt;
We have a buffer that 4 bytes.First, we read 4 bytes of data.Then we reuse buffer to read 2 bytes of data.Finally, buffer contain 2 bytes of garbage.Do you means that?&lt;/p&gt;</comment>
                            <comment id="14908238" author="stack" created="Fri, 25 Sep 2015 16:01:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;ByteBuffer.array might contain garbage. Also keeping objects tend to require Full GC to collect the objects.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Isn&apos;t that ok as long as the length-of-read accounting is properly kept up &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;? (There is a &apos;clear&apos; on the end of the patch if the buffer is not too large; i.e. we do not retain very large buffers).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gzh1992n&quot; class=&quot;user-hover&quot; rel=&quot;gzh1992n&quot;&gt;Zephyr Guo&lt;/a&gt; The failures above seem related. Is it correct that you flip the dataLengthBuffer each time through?&lt;/p&gt;

&lt;p&gt;I think this could make for a nice optimization &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gzh1992n&quot; class=&quot;user-hover&quot; rel=&quot;gzh1992n&quot;&gt;Zephyr Guo&lt;/a&gt; and a good place to dig in. Should we swap in an instance of BoundedByteBufferPool here?  (Could make for a nice difference especially with say the nice finding by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13819&quot; title=&quot;Make RPC layer CellBlock buffer a DirectByteBuffer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13819&quot;&gt;&lt;del&gt;HBASE-13819&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;

</comment>
                            <comment id="14908330" author="gzh1992n" created="Fri, 25 Sep 2015 17:04:09 +0000"  >&lt;p&gt;The failures because I modify the &lt;tt&gt;channelIO&lt;/tt&gt;.I was wrong think in it.I had deleted misleading patch.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Should we swap in an instance of BoundedByteBufferPool here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;tt&gt;BoundedByteBufferPool&lt;/tt&gt; is heavy to rpc request.&lt;br/&gt;
Reason:&lt;br/&gt;
1.According to experience, size of rpc request &amp;lt;&amp;lt; response on server side.&lt;br/&gt;
A simple example: Client request a scan, then RS maybe need to return many cells.&lt;br/&gt;
(we have used &lt;tt&gt;BoundedByteBufferPool&lt;/tt&gt; in response.)&lt;/p&gt;

&lt;p&gt;2.Maintain &lt;tt&gt;BoundedByteBufferPool&lt;/tt&gt; need some cost.&lt;/p&gt;


&lt;p&gt;We just need a lightweight way to reuse request buffer.Look like my patch-v2....&lt;/p&gt;


</comment>
                            <comment id="14908341" author="gzh1992n" created="Fri, 25 Sep 2015 17:11:05 +0000"  >&lt;p&gt;Anyone has good idea? Welcome!&lt;/p&gt;</comment>
                            <comment id="14908347" author="gzh1992n" created="Fri, 25 Sep 2015 17:20:18 +0000"  >&lt;p&gt;3.Most requests is samll.Appropriate buffer can be used for a long time...&lt;/p&gt;</comment>
                            <comment id="14908370" author="stack" created="Fri, 25 Sep 2015 17:31:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;According to experience, size of rpc request &amp;lt;&amp;lt; response on server side.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Request is big when we are putting Cells.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;2.Maintain BoundedByteBufferPool need some cost.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You would rather have a reusable buffer made once per Connection?  That&apos;d work too.&lt;/p&gt;

&lt;p&gt;On the patch, why do we need isAllocateData ?  Can&apos;t we just check for data == null?&lt;/p&gt;</comment>
                            <comment id="14908384" author="hadoopqa" created="Fri, 25 Sep 2015 17:46:24 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762400/HBASE-14490-v2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762400/HBASE-14490-v2.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 36f6eb139d0dfd499c75b15e7a337d0e72730817.&lt;br/&gt;
  ATTACHMENT ID: 12762400&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.security.TestSecureRPC&lt;br/&gt;
                  org.apache.hadoop.hbase.ipc.TestAsyncIPC&lt;br/&gt;
                  org.apache.hadoop.hbase.ipc.TestIPC&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15741//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15741//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15741//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15741//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15741//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15741//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15741//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15741//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14908577" author="ikeda" created="Fri, 25 Sep 2015 19:55:12 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void process() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException, InterruptedException {
      data.flip();
     (...skip...)
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (useSasl) {
          saslReadAndProcess(data.array());
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
          processOneRpc(data.array());
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;tt&gt;data.array()&lt;/tt&gt; just exposes its backed byte array. (&lt;tt&gt;data.flip()&lt;/tt&gt; at that position is meaningless at all.) That means, the instance variable &lt;tt&gt;data&lt;/tt&gt; should be a non-direct buffer which always has the same length of received data, or you should rewrite &lt;tt&gt;saslReadAndProcess&lt;/tt&gt;/&lt;tt&gt;processOneRpc&lt;/tt&gt; methods to accept a byte buffer instead of a byte array.&lt;/p&gt;

&lt;p&gt;BTW, about generational GC, it is better to distinguish between objects to drop immediately and objects to keep and reuse for ever (or for as long as possible). It is said that creating objects in heap is not so expensive, and keeping objects halfway has the opposite effect.&lt;/p&gt;</comment>
                            <comment id="14908589" author="ikeda" created="Fri, 25 Sep 2015 20:05:38 +0000"  >&lt;p&gt;I&apos;m rather worried about overhead by accessing a channel with a small byte buffer.&lt;/p&gt;</comment>
                            <comment id="14908643" author="stack" created="Fri, 25 Sep 2015 20:39:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt; Thanks for the input. Good point. Would need to change those methods to take a BB at least. And yes, either long-lived as in for-the-life-of-the-application or die quick... Agreed.&lt;/p&gt;</comment>
                            <comment id="14908963" author="gzh1992n" created="Sat, 26 Sep 2015 01:20:30 +0000"  >&lt;blockquote&gt;
&lt;p&gt;On the patch, why do we need isAllocateData ? Can&apos;t we just check for data == null?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;data is not null If we reuse data.So we need to know whether we already have provided a appropriate data.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Request is big when we are putting Cells.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Right but most request is samll?&lt;/p&gt;</comment>
                            <comment id="14908971" author="gzh1992n" created="Sat, 26 Sep 2015 01:31:23 +0000"  >&lt;p&gt;Thanks for review.I will write a new patch.&lt;/p&gt;</comment>
                            <comment id="14908990" author="stack" created="Sat, 26 Sep 2015 01:51:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;data is not null If we reuse data.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought the point of an isAllocateData flag was whether we&apos;d allocated the data buffer.  Maybe needs better name.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Right but most request is samll?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Puts can be big... megabytes.&lt;/p&gt;</comment>
                            <comment id="14909072" author="gzh1992n" created="Sat, 26 Sep 2015 04:26:59 +0000"  >&lt;p&gt;patch-v4 rewrite &lt;tt&gt;processOneRpc&lt;/tt&gt; etc.In order to back reused &lt;tt&gt;ByteBuffer&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="14909098" author="hadoopqa" created="Sat, 26 Sep 2015 05:22:01 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762494/HBASE-14490-v3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762494/HBASE-14490-v3.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 02699fe967dde00cde3fc96af782401440dfe2ac.&lt;br/&gt;
  ATTACHMENT ID: 12762494&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.ipc.TestIPC&lt;br/&gt;
                  org.apache.hadoop.hbase.ipc.TestAsyncIPC&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15756//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15756//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15756//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15756//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15756//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15756//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15756//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15756//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14909359" author="anoop.hbase" created="Sat, 26 Sep 2015 17:20:00 +0000"  >&lt;p&gt;Using the buffer from our pool can help the put reqs. Yes at that time, the req data can be very big.  Fine to do it as part of other issue as it need a perf run result.  This change looks ok.  Yes as Stack mentioned pls better name that new boolean variable. I also thought in same line as Stack and was reading again the patch, why we need the boolean.&lt;/p&gt;</comment>
                            <comment id="14909385" author="gzh1992n" created="Sat, 26 Sep 2015 18:04:01 +0000"  >&lt;p&gt;update patch-v4:&lt;br/&gt;
1.fix patch-v3 bug.&lt;br/&gt;
2.Rewrite &lt;tt&gt;processUnwrappedData&lt;/tt&gt;.It also can reuse buffer.&lt;/p&gt;</comment>
                            <comment id="14909418" author="gzh1992n" created="Sat, 26 Sep 2015 18:53:15 +0000"  >&lt;p&gt;Thanks for &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; review.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I also thought in same line as Stack and was reading again the patch, why we need the boolean.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Seem not need it.I has removed it in patch-v5.&lt;/p&gt;</comment>
                            <comment id="14909457" author="hadoopqa" created="Sat, 26 Sep 2015 20:10:07 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762535/HBASE-14490-v4.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762535/HBASE-14490-v4.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 02699fe967dde00cde3fc96af782401440dfe2ac.&lt;br/&gt;
  ATTACHMENT ID: 12762535&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1786 checkstyle errors (more than the master&apos;s current 1785 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15762//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15762//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15762//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15762//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15762//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15762//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15762//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15762//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14909485" author="gzh1992n" created="Sat, 26 Sep 2015 21:22:35 +0000"  >&lt;p&gt;patch-v6 fix checkStyle&lt;/p&gt;</comment>
                            <comment id="14909495" author="hadoopqa" created="Sat, 26 Sep 2015 21:47:29 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762539/HBASE-14490-v5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762539/HBASE-14490-v5.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 02699fe967dde00cde3fc96af782401440dfe2ac.&lt;br/&gt;
  ATTACHMENT ID: 12762539&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1786 checkstyle errors (more than the master&apos;s current 1785 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestShell&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestReplicationShell&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15763//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15763//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15763//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15763//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15763//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15763//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15763//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15763//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14909504" author="hadoopqa" created="Sat, 26 Sep 2015 22:13:12 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762540/HBASE-14490-v5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762540/HBASE-14490-v5.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 02699fe967dde00cde3fc96af782401440dfe2ac.&lt;br/&gt;
  ATTACHMENT ID: 12762540&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1786 checkstyle errors (more than the master&apos;s current 1785 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.mapreduce.TestImportExport&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestProcessBasedCluster&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.regionserver.TestHRegion.testFlushCacheWhileScanning(TestHRegion.java:3756)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15764//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15764//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15764//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15764//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15764//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15764//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15764//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15764//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14909539" author="hadoopqa" created="Sun, 27 Sep 2015 00:24:34 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762556/HBASE-14490-v6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762556/HBASE-14490-v6.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 02699fe967dde00cde3fc96af782401440dfe2ac.&lt;br/&gt;
  ATTACHMENT ID: 12762556&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1786 checkstyle errors (more than the master&apos;s current 1785 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.regionserver.TestHRegion.testFlushCacheWhileScanning(TestHRegion.java:3756)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15766//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15766//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15766//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15766//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15766//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15766//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15766//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15766//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14909604" author="hadoopqa" created="Sun, 27 Sep 2015 05:14:32 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762570/HBASE-14490-v7.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762570/HBASE-14490-v7.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 526520de0a9d7a29fcf1b4c521f017ca75a46cbc.&lt;br/&gt;
  ATTACHMENT ID: 12762570&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestReplicationShell&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestShell&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15769//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15769//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15769//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15769//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15769//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15769//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15769//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15769//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14909674" author="gzh1992n" created="Sun, 27 Sep 2015 09:56:19 +0000"  >&lt;p&gt;The failure seems doesn&apos;t matter? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14909981" author="ikeda" created="Mon, 28 Sep 2015 02:26:14 +0000"  >&lt;p&gt;&quot;It maybe cause memory fragmentation&quot; in the description is incorrect. Fragmentation is resolved for each GC by copying between an Eden space and Survivor spaces in young generation. That means, keeping a byte array (backing in a byte buffer) might cause overhead of copying for each GC, even if the array&apos;s contents are garbage after use. I think the overhead of creating a byte array almost comes from filling zero, and the advantage of keeping a byte array ends when GC is occurred.&lt;/p&gt;

&lt;p&gt;If you stick to keeping a byte array, I suggest to use a weak reference. Also making new byte buffer with the twice size of previous one is appropriate to reduce creation.&lt;/p&gt;
</comment>
                            <comment id="14909991" author="gzh1992n" created="Mon, 28 Sep 2015 03:03:11 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;.I think you know than me about GC.But reduce creation than creating each time.So reuse buffer seems to a optimization.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you stick to keeping a byte array, I suggest to use a weak reference. Also making new byte buffer with the twice size of previous one is appropriate to reduce creation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s a good suggestion.It&apos;s necessary write a new patch.&lt;/p&gt;</comment>
                            <comment id="14933134" author="hadoopqa" created="Mon, 28 Sep 2015 10:37:59 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12762729/HBASE-14490-v8.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12762729/HBASE-14490-v8.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit cfce91e514dcb570ca1b3131f340dc01cdbd5e56.&lt;br/&gt;
  ATTACHMENT ID: 12762729&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15784//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15784//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15784//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15784//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15784//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15784//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15784//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15784//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14933269" author="gzh1992n" created="Mon, 28 Sep 2015 13:16:34 +0000"  >&lt;p&gt;I updated the description for modification of newest patch.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt; could you have a look at it.&lt;br/&gt;
Is it ok?&lt;/p&gt;</comment>
                            <comment id="14933524" author="hadoopqa" created="Mon, 28 Sep 2015 16:24:35 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12764015/HBASE-14490-v9.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12764015/HBASE-14490-v9.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit cfce91e514dcb570ca1b3131f340dc01cdbd5e56.&lt;br/&gt;
  ATTACHMENT ID: 12764015&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 2 zombie test(s): 	at org.apache.hadoop.hbase.regionserver.TestHRegion.testFlushCacheWhileScanning(TestHRegion.java:3756)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15788//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15788//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15788//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15788//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15788//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15788//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15788//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15788//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14939514" author="anoop.hbase" created="Thu, 1 Oct 2015 08:39:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;READ_REQ_REUSED_BUF_SIZE = 48 * 1024;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You are doing it along with read reqs I believe.  Write will have large message size as that will contain the cells. So based on what tests u have taken 48 KB size? If read alone is the consideration, it is high?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;if (READ_REQ_REUSED_BUF_SIZE &amp;lt; dataLength)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We need to have check &amp;lt;= ?&lt;/p&gt;

&lt;p&gt;processRequest(ByteBuffer buf) &lt;br/&gt;
There is some offset manipulation going on this method after reading header length, header etc.  Based on the move fwd of offset, the length is not getting reduced. In current code also this happens BTW.  Will be better correct?  Seems no issues coming in though&lt;br/&gt;
Not ur patch, but we will do CodedInputStream.newInstance 2 times here. We can avoid the second one? We can do skipRawBytes on the CodedInputStream created and come to the point where we can read the paramSize.  Pls check once.&lt;/p&gt;

&lt;p&gt;processUnwrappedData&lt;br/&gt;
We use &apos;data&apos; ByteBuffer here also. Allocate bigger sized BB and will refer it from then on. The &apos;unwrappedData&apos; ref set to be null now. But we dont do that for data.  That be an issue? Why dont going with SoftRef way here? Am I missing some thing?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;// SASL API evaluateResponse(byte[] response) is so hard.&lt;br/&gt;
1413	          // Because saslToken is a reused buffer, so we can not direct use saslToken.arrray().&lt;br/&gt;
1414	          // We have to copy it. Copy will break optimization about reusing buffer.&lt;br/&gt;
1415	          // Luckily, evaluateResponse just occurs several times.&lt;br/&gt;
1416	          // We can write well if SASL API will be improved.&lt;br/&gt;
1417	          replyToken = saslServer.evaluateResponse(&lt;br/&gt;
1418	            new Bytes(saslToken.array(), saslToken.position(), saslToken.remaining()).copyBytes());&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;U mean call to evaluateResponse occurs just once? After that the boolean saslContextEstablished will be true.&lt;/p&gt;</comment>
                            <comment id="14939688" author="gzh1992n" created="Thu, 1 Oct 2015 11:11:57 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; Thanks for your review.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; If read alone is the consideration, it is high?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Seem big.How about 16K?I have no test.Just experience...&lt;br/&gt;
Dynamic adjustment is better?Set it to average at sometime.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We need to have check &amp;lt;= ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No.&lt;br/&gt;
If dataLength==READ_REQ_REUSED_BUF_SIZE, we can use it exactly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;processRequest(ByteBuffer buf)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will improve the method.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The &apos;unwrappedData&apos; ref set to be null now. But we dont do that for data. That be an issue? Why dont going with SoftRef way here? Am I missing some thing?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;invoking chain:&lt;br/&gt;
process &#8212;&amp;gt; saslReadAndProcess &#8212;&amp;gt; processUnwrappedData&lt;/p&gt;

&lt;p&gt;Supposing we come into processUnwrappedData now.Define A as reused buffer and B as temporary buffer(a large buffer).&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;data&lt;/tt&gt; is not null obviously(reference to A or B) and it has no useful data to read.So we just use &lt;tt&gt;data&lt;/tt&gt; again.&lt;/p&gt;

&lt;p&gt;In the end of &lt;tt&gt;process&lt;/tt&gt;, we do &lt;tt&gt;data = null&lt;/tt&gt;. If &lt;tt&gt;data&lt;/tt&gt; is A, the BB will be reference by SoftRef only.If data is B, no one reference to it.&lt;/p&gt;

&lt;p&gt;Because we have no variable &lt;tt&gt;unwrappedData&lt;/tt&gt;, so we can clear buffer uniformly.Just set data to be null in end of &lt;tt&gt;process&lt;/tt&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;U mean call to evaluateResponse occurs just once? After that the boolean saslContextEstablished will be true.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;At least occur one time.I just want to say &#8216;evaluateResponse(byte[] rsp, int off, int len) is best&#8217;.But SASL API not look like this currently.So we have to copy.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
replyToken = saslServer.evaluateResponse(
            &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Bytes(saslToken.array(), saslToken.position(), saslToken.remaining()).copyBytes());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I mark here by &#8217;TODO&#8217;.If the API be improved in the future, we can modify here.If there misunderstanding , can remove.It&#8217;s not important.&lt;/p&gt;</comment>
                            <comment id="14939866" author="gzh1992n" created="Thu, 1 Oct 2015 14:05:08 +0000"  >&lt;p&gt;patch-v10 modification:&lt;/p&gt;

&lt;p&gt;1.processRequest&lt;br/&gt;
Just create &lt;tt&gt;CodedInputStream&lt;/tt&gt; once.&lt;br/&gt;
Maintaining ByteBuffer.position instead of &lt;tt&gt;offset&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;2.set READ_REQ_REUSED_BUF_SIZE = 2K&lt;/p&gt;</comment>
                            <comment id="14939979" author="ikeda" created="Thu, 1 Oct 2015 15:36:28 +0000"  >&lt;p&gt;I think you have decided to keep objects in old generation. It is more possible for large buffers to be moved in old generation while receiving data, and keeping large buffers instead of small buffers is meaningful if any. Think a shared pool of large buffers, but be careful that blocking and causing a context switch has the same cost as creating about 100 objects, while just non-congested synchronization has the same cost of about just creating one object (according to my old java book). Keeping small buffers is relatively meaningless.&lt;/p&gt;</comment>
                            <comment id="14940062" author="hadoopqa" created="Thu, 1 Oct 2015 16:52:44 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12764609/HBASE-14490-v10.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12764609/HBASE-14490-v10.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 76463a36f5648f42cdcf64019a825c1e3f0c4fe1.&lt;br/&gt;
  ATTACHMENT ID: 12764609&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.mapreduce.TestImportExport&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestProcessBasedCluster&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15843//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15843//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15843//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15843//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15843//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15843//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15843//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15843//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14940110" author="gzh1992n" created="Thu, 1 Oct 2015 17:35:23 +0000"  >&lt;p&gt;Yes, large buffer more useful and pooI is troublesome.&lt;br/&gt;
I find a silly wrong...I use buffer in &lt;tt&gt;Connection&lt;/tt&gt;, but multi Connection share one &lt;/p&gt;
{Reader}
&lt;p&gt;(single thread).&lt;br/&gt;
I should maintain a suitable buffer each Reader.It&apos;s a easy way for optimizing.&lt;br/&gt;
Shared pool is a perfect way but we need a low cost way of sharing.I will think on it.It can be another issue?&lt;/p&gt;

&lt;p&gt;very thanks.&lt;/p&gt;</comment>
                            <comment id="14940889" author="gzh1992n" created="Fri, 2 Oct 2015 08:22:37 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I should maintain a suitable buffer each Reader.It&apos;s a easy way for optimizing.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is wrong.Because non-blocking socket, so we can&apos;t use one buffer each Reader.Each Connect still need a buffer.&lt;/p&gt;</comment>
                            <comment id="14941767" author="ikeda" created="Fri, 2 Oct 2015 21:10:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;Shared pool is a perfect way but we need a low cost way of sharing.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Added an example class. It might be possible to keep many buffers so that you might want to change some.&lt;/p&gt;</comment>
                            <comment id="14948752" author="gzh1992n" created="Thu, 8 Oct 2015 14:33:33 +0000"  >&lt;p&gt;patch-v11:&lt;/p&gt;

&lt;p&gt;1.&lt;tt&gt;processUnwrappedData&lt;/tt&gt; pass a ByteBuffer and no longer use any extra memory.&lt;/p&gt;

&lt;p&gt;2.There is a dynamic buffer in each &lt;tt&gt;Connection&lt;/tt&gt; to fit special client.&lt;/p&gt;

&lt;p&gt;3.Add a test for wrapped RPC.&lt;/p&gt;</comment>
                            <comment id="14949029" author="hadoopqa" created="Thu, 8 Oct 2015 17:38:43 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12765604/HBASE-14490-v11.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12765604/HBASE-14490-v11.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 7e30436e3fa84525b85b05b9e23cb01b2ada7c12.&lt;br/&gt;
  ATTACHMENT ID: 12765604&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1776 checkstyle errors (more than the master&apos;s current 1775 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15917//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15917//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15917//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15917//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15917//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15917//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15917//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15917//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14950155" author="anoop.hbase" created="Fri, 9 Oct 2015 09:58:42 +0000"  >&lt;p&gt;We keep on adding to the reqTotalSize.  Possible overflow?&lt;br/&gt;
Do we really need this?     If we do to this extend and handle both smaller sized reqs and larger sized (write req) we better use a BufferPool? We already have it and using it while sending back response.   So the older version for reusing smaller sized BB is better?  Any test result numbers?  I know u consider the read reqs&lt;/p&gt;</comment>
                            <comment id="14950402" author="gzh1992n" created="Fri, 9 Oct 2015 13:44:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;We keep on adding to the reqTotalSize. Possible overflow?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It can hold 8000TB.For more correct, we can calculate average by other way.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we do to this extend and handle both smaller sized reqs and larger sized (write req) we better use a BufferPool?We already have it and using it while sending back response.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I know &lt;tt&gt;BoundedByteBufferPool&lt;/tt&gt; and I think it does not fit request.&lt;br/&gt;
Look at the &lt;tt&gt;getBuffer()&lt;/tt&gt;.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; ByteBuffer getBuffer() {
    ByteBuffer bb = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
&lt;span class=&quot;code-comment&quot;&gt;// It can cause blocking. We don&apos;t need lock because Reader is single-thread.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// If we use a BoundedByteBufferPool in all Reader, we will increase possible of blocking.
&lt;/span&gt;&lt;span class=&quot;code-comment&quot;&gt;// If we maintain a buffer in Connection, we can get most suitable size &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; specific client.
&lt;/span&gt;    lock.lock();
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      bb = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.buffers.poll();
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (bb != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.totalReservoirCapacity -= bb.capacity();
      }
    } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
      lock.unlock();
    }
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (bb != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      bb.clear();
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
&lt;span class=&quot;code-comment&quot;&gt;// It can not provide enough capacity.We will allocate again.
&lt;/span&gt;      bb = ByteBuffer.allocate(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.runningAverage);
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.allocations.incrementAndGet();
    }
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isTraceEnabled()) {
      LOG.trace(&lt;span class=&quot;code-quote&quot;&gt;&quot;runningAverage=&quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.runningAverage +
        &lt;span class=&quot;code-quote&quot;&gt;&quot;, totalCapacity=&quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.totalReservoirCapacity + &lt;span class=&quot;code-quote&quot;&gt;&quot;, count=&quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.buffers.size() +
        &lt;span class=&quot;code-quote&quot;&gt;&quot;, alloctions=&quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.allocations.get());
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; bb;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;How about other better BufferPool?I think is not necessary and that&apos;d work too.So simple way is better.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So the older version for reusing smaller sized BB is better? Any test result numbers? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;m trying to test.&lt;/p&gt;</comment>
                            <comment id="14951279" author="stack" created="Fri, 9 Oct 2015 22:02:28 +0000"  >&lt;p&gt;What is wrong w/ BoundedByteBufferPool ? Please be explicit (trying to follow along so may not have all the context &amp;#8211; excuse me).  A different or subclass of BufferPool, sure.&lt;/p&gt;</comment>
                            <comment id="14961295" author="stack" created="Fri, 16 Oct 2015 20:09:06 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gzh1992n&quot; class=&quot;user-hover&quot; rel=&quot;gzh1992n&quot;&gt;Zephyr Guo&lt;/a&gt; Question for you above Zephyr&lt;/p&gt;</comment>
                            <comment id="14962485" author="gzh1992n" created="Sun, 18 Oct 2015 16:23:30 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What is wrong w/ BoundedByteBufferPool ? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;tt&gt;BoundedByteBufferPool.getBuffer()&lt;/tt&gt; provide a buffer, but it can&apos;t assure that size is enough.For example, if dataLen=10 and &lt;tt&gt;getBuffer()&lt;/tt&gt; return a buffer that size less than 10, we have to allocate again.Patch-11 maintain a dynamic buffer in &lt;tt&gt;Connection&lt;/tt&gt;.I think BufferPool is not different with Patch-11.I do some test and it seems Patch-10 is better.Patch-10 use a fixed buffer for most small request(such as get operation).&lt;/p&gt;

&lt;p&gt;YCSB test result.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
*No reusable buffer:*
[OVERALL], RunTime(ms), 18583.0
[OVERALL], Throughput(ops/sec), 1614.3787332508207
[INSERT], Operations, 30000.0
[INSERT], AverageLatency(us), 563.6561

[OVERALL], RunTime(ms), 7997.0
[OVERALL], Throughput(ops/sec), 1250.4689258471926
[READ], Operations, 10000.0
[READ], AverageLatency(us), 629.6487

*Patch-11:*
[OVERALL], RunTime(ms), 18441.0
[OVERALL], Throughput(ops/sec), 1626.8098259313485
[INSERT], Operations, 30000.0
[INSERT], AverageLatency(us), 540.7597

[OVERALL], RunTime(ms), 7668.0
[OVERALL], Throughput(ops/sec), 1304.1210224308816
[READ], Operations, 10000.0
[READ], AverageLatency(us), 620.7383

*Patch-10(3K size):*
[OVERALL], RunTime(ms), 17313.0
[OVERALL], Throughput(ops/sec), 1732.8019407381737
[INSERT], Operations, 30000.0
[INSERT], AverageLatency(us), 526.9979333333333

[OVERALL], RunTime(ms), 7516.0
[OVERALL], Throughput(ops/sec), 1330.4949441192123
[READ], Operations, 10000.0
[READ], AverageLatency(us), 604.255
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Seems like anoop said older version is better...&lt;br/&gt;
stack, what&apos;s your suggestion?&lt;/p&gt;</comment>
                            <comment id="14964364" author="gzh1992n" created="Tue, 20 Oct 2015 01:36:06 +0000"  >&lt;p&gt;I beware &lt;tt&gt;lock&lt;/tt&gt; impact on reading performance.How about non-block bufferPool in each &lt;tt&gt;Reader&lt;/tt&gt;(Reader is single-thread)?&lt;/p&gt;</comment>
                            <comment id="14966482" author="ikeda" created="Wed, 21 Oct 2015 09:01:52 +0000"  >&lt;p&gt;I have realized that pooling large byte buffers is effective if it reduces frequency of GC, rather than its creation cost. Checking GC helps you when doing benchmarks.&lt;/p&gt;

&lt;p&gt;The last patch is based on the assumption that the size of coming data would be almost same, but it seems not to be true.&lt;/p&gt;

&lt;p&gt;Did you try ByteBufferPool I attached? That is a non-block pool.&lt;/p&gt;</comment>
                            <comment id="14966840" author="gzh1992n" created="Wed, 21 Oct 2015 13:54:02 +0000"  >&lt;p&gt;I know you doubling idea.If we use Pool, we hope fewer number of buffer service more &lt;tt&gt;Connection&lt;/tt&gt;.If Pool can&apos;t reduce amount of buffer dynamically, it will increase to N (&quot;N&quot; is number of Connection ).In that case, there is no different between Pool and non-pool.I&apos;m thinking about Pool that can control the number of buffer and each size of buffer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The last patch is based on the assumption that the size of coming data would be almost same, but it seems not to be true&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It maintain average size.It expect hitting 50% req.&lt;/p&gt;</comment>
                            <comment id="14970333" author="ikeda" created="Fri, 23 Oct 2015 02:59:14 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I know you doubling idea.If we use Pool, we hope fewer number of buffer service more Connection.If Pool can&apos;t reduce amount of buffer dynamically, it will increase to N (&quot;N&quot; is number of Connection ).In that case, there is no different between Pool and non-pool.I&apos;m thinking about Pool that can control the number of buffer and each size of buffer.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, could you be more specific? The pool can hold much more number of buffers than connections on a heavy load, and lower on a low load. It is easy and it would be not bad to leave that adjustment to weak/soft references (I still recommend to use weak one). Leaving it aside, from the point of a view of GC (and creating cost), what we should pay attention to is, not how many buffers we are currently keeping, but how many buffers we have discarded (and created). Non-pooling creates and discards a buffer each time and pooling would have an advantage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It maintain average size.It expect hitting 50% req.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If it is much more possibility that coming data has a different size, it nearly discards the buffer each time, which depends on the protocol HBase uses. For example, receiving data whose size of 100, 1000, 100, 1000, ..., the average is 500-600 and your logic creates a buffer of the average size or 1000 for each data.&lt;/p&gt;</comment>
                            <comment id="14970334" author="ikeda" created="Fri, 23 Oct 2015 02:59:14 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I know you doubling idea.If we use Pool, we hope fewer number of buffer service more Connection.If Pool can&apos;t reduce amount of buffer dynamically, it will increase to N (&quot;N&quot; is number of Connection ).In that case, there is no different between Pool and non-pool.I&apos;m thinking about Pool that can control the number of buffer and each size of buffer.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, could you be more specific? The pool can hold much more number of buffers than connections on a heavy load, and lower on a low load. It is easy and it would be not bad to leave that adjustment to weak/soft references (I still recommend to use weak one). Leaving it aside, from the point of a view of GC (and creating cost), what we should pay attention to is, not how many buffers we are currently keeping, but how many buffers we have discarded (and created). Non-pooling creates and discards a buffer each time and pooling would have an advantage.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It maintain average size.It expect hitting 50% req.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If it is much more possibility that coming data has a different size, it nearly discards the buffer each time, which depends on the protocol HBase uses. For example, receiving data whose size of 100, 1000, 100, 1000, ..., the average is 500-600 and your logic creates a buffer of the average size or 1000 for each data.&lt;/p&gt;</comment>
                            <comment id="14970337" author="ikeda" created="Fri, 23 Oct 2015 03:00:54 +0000"  >&lt;p&gt;Sorry for my double click &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14987586" author="gzh1992n" created="Tue, 3 Nov 2015 16:43:44 +0000"  >&lt;p&gt;patch-v12:&lt;br/&gt;
Using &lt;tt&gt;BoundedByteBufferPool&lt;/tt&gt; to share buffer in all &lt;tt&gt;Connection&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I did some test contrast between &lt;tt&gt;BoundedByteBufferPool&lt;/tt&gt; and &lt;tt&gt;byteBufferPool&lt;/tt&gt; that Hiroshi Ikeda attached.The former looks better.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;test design&lt;/b&gt;&lt;br/&gt;
step1: Using YCSB to put 10000 records.&lt;br/&gt;
step2: Dumping information.Each creating and discarding will be recorded in log.&lt;br/&gt;
step3: Using YCSB to read 10000 records.&lt;br/&gt;
step4: Dumping information&lt;/p&gt;

&lt;p&gt;&lt;b&gt;test result&lt;/b&gt;&lt;br/&gt;
BoundedByteBUfferPool test result:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[OVERALL], RunTime(ms), 43010.0
[OVERALL], Throughput(ops/sec), 232.50406882120438
[INSERT], Operations, 10000.0
[INSERT], AverageLatency(us), 2004.2133

[OVERALL], RunTime(ms), 32663.0
[OVERALL], Throughput(ops/sec), 306.1568135198849
[READ], Operations, 10000.0
[READ], AverageLatency(us), 1057.9065
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
put create times: 15
put discard times: 13
put create total bytes: 1441979
put discard tota bytes: 1282991
read create times: 0
read discard times: 0
read create total bytes: 0
read discard total bytes: 0
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;byteBufferPool test result:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[OVERALL], RunTime(ms), 43470.0
[OVERALL], Throughput(ops/sec), 230.04370830457788
[INSERT], Operations, 10000.0
[INSERT], AverageLatency(us), 1998.8565

[OVERALL], RunTime(ms), 35066.0
[OVERALL], Throughput(ops/sec), 285.1765242685222
[READ], Operations, 10000.0
[READ], AverageLatency(us), 1246.3949
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
put create times: 70
put discard times: 66
put create total bytes: 503152
put discard total bytes: 11632
read create times: 10058
read discard times: 10058
read create total bytes: 1344303
read discard total bytes: 1347255
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Not too much difference between their throughput.But BoundedByteBufferPool do less creating and discarding obviously.&lt;br/&gt;
YCSB properties:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
recordcount=10000
operationcount=10000
workload=com.yahoo.ycsb.workloads.CoreWorkload
threads 25
readproportion=1.0
updateproportion=0
scanproportion=0
insertproportion=0
fieldcount=64
fieldlength=10240
readallfields=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
writeallfields=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
fieldlengthdistribution=zipfian
requestdistribution=zipfian
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14987648" author="hadoopqa" created="Tue, 3 Nov 2015 17:17:33 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12770346/HBASE-14490-v12.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12770346/HBASE-14490-v12.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 0eae729ffa95828462737c54c7204b34bb73182a.&lt;br/&gt;
  ATTACHMENT ID: 12770346&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16365//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16365//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14988163" author="stack" created="Tue, 3 Nov 2015 21:30:42 +0000"  >&lt;p&gt;Would you like me to try out the patch &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gzh1992n&quot; class=&quot;user-hover&quot; rel=&quot;gzh1992n&quot;&gt;Zephyr Guo&lt;/a&gt;? Isn&apos;t the BoundedByteBufferPool offheap by default now? Was it in your test?  If so, especially if the throughput was close, it would be an added advantage going the BBBP route.&lt;/p&gt;</comment>
                            <comment id="14988799" author="ikeda" created="Wed, 4 Nov 2015 03:05:53 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        data = reqBufPool.getBuffer();
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (data.capacity() &amp;lt; dataLength) {
+          data = ByteBuffer.allocate(dataLength);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Is that right usage to throw away a buffer gotten from BoundedByteBufferPool?&lt;/p&gt;

&lt;p&gt;What does dumping information means?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
read create total bytes: 1344303
read discard total bytes: 1347255
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What should I interpret the information that discarded total bytes is larger than created total bytes? It would be better to show the patches that you used.&lt;/p&gt;

&lt;p&gt;Did you check the frequency of GC? I&apos;m interested in how much these patches reduce it, though it also requires a result of the code without patches.&lt;/p&gt;

&lt;p&gt;ByteBufferPool I attached can be tuned. It might reduce GC to lower the threshold to pool buffers .&lt;/p&gt;

&lt;p&gt;To tell the truth, checking the size is required before memory allocation in order to prevent OutOfMemoryError caused by a malicious client.&lt;/p&gt;</comment>
                            <comment id="14988891" author="stack" created="Wed, 4 Nov 2015 05:04:43 +0000"  >&lt;p&gt;Good review &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is that right usage to throw away a buffer gotten from BoundedByteBufferPool?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good one &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt; Your patch should go faster if you put the buffer back rather than discard &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gzh1992n&quot; class=&quot;user-hover&quot; rel=&quot;gzh1992n&quot;&gt;Zephyr Guo&lt;/a&gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;Did you check the frequency of GC? I&apos;m interested in how much these patches reduce it, though it also requires a result of the code without patches.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If it helps, I could run these tests.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;To tell the truth, checking the size is required before memory allocation in order to prevent OutOfMemoryError caused by a malicious client.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, but beyond the scope of this issue I&apos;d say (we&apos;ll happily allocate the buffer whether pool or not....)&lt;/p&gt;

&lt;p&gt;I&apos;m still interested in whether the BBBP allocations were onheap or off. Would be cool if offheap. I can try it with BBBP offheap too.&lt;/p&gt;</comment>
                            <comment id="14989764" author="gzh1992n" created="Wed, 4 Nov 2015 15:50:35 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Would you like me to try out the patch Zephyr Guo?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, thanks for helping me.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Isn&apos;t the BoundedByteBufferPool offheap by default now? Was it in your test? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;m not sure.How to test it?&lt;/p&gt;</comment>
                            <comment id="14989860" author="gzh1992n" created="Wed, 4 Nov 2015 16:39:10 +0000"  >&lt;blockquote&gt;
&lt;p&gt;What does dumping information means?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There are two stages(put and read).I mark &quot;#CREATE#&quot; and &quot;#DSICARD#&quot; in log.You can look test-v12-patch that I attached.test-v12-patch is my way that test BBBP.Your byteBufferPool use the same way to test.&lt;br/&gt;
&quot;read create total bytes&quot; means total of byte that was created in put stage.&lt;/p&gt;

&lt;p&gt;15 seconds after put stage(first stage) done , I use following code to dump information.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
#!/bin/bash

REPORT=./report.my

&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; [ ! -e $REPORT ]; then
	touch  $REPORT
fi

create_t=$(grep -oE &apos;#CREATE#&apos; $LOG_FILE | wc -l)
discard_t=$(grep -oE &apos;#DISCARD#&apos; $LOG_FILE | wc -l)

sed -ibk &apos;1,$ d&apos; $REPORT
rm ${REPORT}bk
echo &lt;span class=&quot;code-quote&quot;&gt;&quot;put create times:&quot;&lt;/span&gt;$create_t &amp;gt;&amp;gt; $REPORT
echo &lt;span class=&quot;code-quote&quot;&gt;&quot;put discard times:&quot;&lt;/span&gt;$discard_t &amp;gt;&amp;gt; $REPORT

cal_sum() {
	sum=0
	&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in $1; &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt;
		sum=$(expr $sum + $i)
	done
}

cal_sum &lt;span class=&quot;code-quote&quot;&gt;&quot;$(grep -oE &apos;#CREATE#\d+&apos; $LOG_FILE | grep -oE &apos;\d+&apos;)&quot;&lt;/span&gt;
echo &lt;span class=&quot;code-quote&quot;&gt;&quot;put create total bytes:&quot;&lt;/span&gt;$sum &amp;gt;&amp;gt; $REPORT
	
cal_sum &lt;span class=&quot;code-quote&quot;&gt;&quot;$(grep -oE &apos;#DISCARD#\d+&apos; $LOG_FILE | grep -oE &apos;\d+&apos;)&quot;&lt;/span&gt;
echo &lt;span class=&quot;code-quote&quot;&gt;&quot;put discard total bytes:&quot;&lt;/span&gt;$sum &amp;gt;&amp;gt; $REPORT
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;15 seconds after read stage(second stage) done, I use following code to dump information.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
#!/bin/bash

REPORT=./report.my

create_t=$(grep -oE &apos;put create times: *\d+&apos; $REPORT | grep -oE &apos;\d+&apos;)
discard_t=$(grep -oE &apos;put discard times: *\d+&apos; $REPORT | grep -oE &apos;\d+&apos;)

create_tot=$(grep -oE &apos;put create total bytes:\d+&apos; $REPORT | grep -oE &apos;\d+&apos;)
discard_tot=$(grep -oE &apos;put discard total bytes:\d+&apos; $REPORT | grep -oE &apos;\d+&apos;)

create_t=$(expr $(grep -oE &apos;#CREATE#&apos; $LOG_FILE | wc -l) - $create_t)
discard_t=$(expr $(grep -oE &apos;#DISCARD#&apos; $LOG_FILE | wc -l) - $discard_t)

cal_sum() {
	sum=0
	&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in $1; &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt;
		sum=$(expr $sum + $i)
	done
}

echo &lt;span class=&quot;code-quote&quot;&gt;&quot;read create times:&quot;&lt;/span&gt;$create_t &amp;gt;&amp;gt; $REPORT
echo &lt;span class=&quot;code-quote&quot;&gt;&quot;read discard times:&quot;&lt;/span&gt;$discard_t &amp;gt;&amp;gt; $REPORT

cal_sum &lt;span class=&quot;code-quote&quot;&gt;&quot;$(grep -oE &apos;#CREATE#\d+&apos; $LOG_FILE | grep -oE &apos;\d+&apos;)&quot;&lt;/span&gt;
echo &lt;span class=&quot;code-quote&quot;&gt;&quot;read create total bytes:&quot;&lt;/span&gt;$(expr $sum - $create_tot) &amp;gt;&amp;gt; $REPORT

cal_sum &lt;span class=&quot;code-quote&quot;&gt;&quot;$(grep -oE &apos;#DISCARD#\d+&apos; $LOG_FILE | grep -oE &apos;\d+&apos;)&quot;&lt;/span&gt;
echo &lt;span class=&quot;code-quote&quot;&gt;&quot;read discard total bytes:&quot;&lt;/span&gt;$(expr $sum - $discard_tot) &amp;gt;&amp;gt; $REPORT
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Did you check the frequency of GC?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t know how to test frequency of GC if the gap is small.&lt;/p&gt;
</comment>
                            <comment id="14989864" author="gzh1992n" created="Wed, 4 Nov 2015 16:41:15 +0000"  >&lt;p&gt;Sorry for my wrong.&lt;br/&gt;
&quot;read create total bytes&quot; means total of byte that was created in &lt;b&gt;read&lt;/b&gt; stage.&lt;/p&gt;</comment>
                            <comment id="14989893" author="gzh1992n" created="Wed, 4 Nov 2015 16:53:38 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I&apos;m still interested in whether the BBBP allocations were onheap or off.Would be cool if offheap.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Why cool? Will be faster?&lt;/p&gt;</comment>
                            <comment id="14991002" author="ikeda" created="Thu, 5 Nov 2015 02:39:05 +0000"  >&lt;blockquote&gt;
&lt;p&gt;test result&lt;br/&gt;
BoundedByteBUfferPool test result:&lt;br/&gt;
...skip...&lt;br/&gt;
put create times: 15&lt;br/&gt;
put discard times: 13&lt;br/&gt;
put create total bytes: 1441979&lt;br/&gt;
put discard tota bytes: 1282991&lt;br/&gt;
read create times: 0&lt;br/&gt;
read discard times: 0&lt;br/&gt;
read create total bytes: 0&lt;br/&gt;
read discard total bytes: 0&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;According to the result, since the pool contained just 2 buffers but it was enough to read, you must have used one or two connection(s) from the client. BoundedByteBufferPool uses locks inside but this benchmark might not expose its disadvantage.&lt;/p&gt;</comment>
                            <comment id="14991531" author="ikeda" created="Thu, 5 Nov 2015 11:05:16 +0000"  >&lt;p&gt;I just noticed that your patch is not equivalent to the original code when using SASL. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gzh1992n&quot; class=&quot;user-hover&quot; rel=&quot;gzh1992n&quot;&gt;Zephyr Guo&lt;/a&gt; have you confirmed that is OK?&lt;/p&gt;</comment>
                            <comment id="14998701" author="gzh1992n" created="Tue, 10 Nov 2015 15:03:32 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;you must have used one or two connection(s) from the client.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I use YCSB with 25 threads.Because read request is small usually, do once &lt;tt&gt;readAndProcess()&lt;/tt&gt; can get full data from socket. Then Reader will put buffer back immediately. Reader is single thread that maintain many Connections.If most of the Connection do read request, it may need a buffer only.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BoundedByteBufferPool uses locks inside but this benchmark might not expose its disadvantage.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Both &lt;tt&gt;ConcurrentLinkedDeque&lt;/tt&gt; and &lt;tt&gt;ReentrantLock&lt;/tt&gt; base on CAS.They will lead to waiting in fact.&lt;br/&gt;
&lt;a href=&quot;https://en.wikipedia.org/wiki/Non-blocking_algorithm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://en.wikipedia.org/wiki/Non-blocking_algorithm&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I just noticed that your patch is not equivalent to the original code when using SASL. Zephyr Guo have you confirmed that is OK?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. What is wrong i missed?&lt;/p&gt;</comment>
                            <comment id="15014899" author="stack" created="Fri, 20 Nov 2015 00:49:30 +0000"  >&lt;p&gt;Any progress on this patch lads?&lt;/p&gt;</comment>
                            <comment id="15020179" author="gzh1992n" created="Sat, 21 Nov 2015 02:32:30 +0000"  >&lt;p&gt;I&apos;m waiting for you test and response.Do you see my question &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;?&lt;br/&gt;
I will submit new patch that can be applied if we decide to use BBBP.&lt;/p&gt;</comment>
                            <comment id="15021536" author="stack" created="Mon, 23 Nov 2015 05:14:00 +0000"  >&lt;p&gt;Let me try it &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gzh1992n&quot; class=&quot;user-hover&quot; rel=&quot;gzh1992n&quot;&gt;Zephyr Guo&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="15021552" author="ikeda" created="Mon, 23 Nov 2015 05:38:34 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gzh1992n&quot; class=&quot;user-hover&quot; rel=&quot;gzh1992n&quot;&gt;Zephyr Guo&lt;/a&gt; You intentionally deleted logic and changed the protocol with breaking compatibility. That is not OK. Concretely, wrapped data should be able to contain a part of data. There are other things, but later on.&lt;/p&gt;</comment>
                            <comment id="15022407" author="stack" created="Mon, 23 Nov 2015 16:31:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;You intentionally deleted logic and changed the protocol with breaking compatibility. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok. Will try after the above is addressed. Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=gzh1992n&quot; class=&quot;user-hover&quot; rel=&quot;gzh1992n&quot;&gt;Zephyr Guo&lt;/a&gt; (and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;)&lt;/p&gt;</comment>
                            <comment id="15143539" author="stack" created="Thu, 11 Feb 2016 21:28:44 +0000"  >&lt;p&gt;Hack to make this patch work on 1.2 so I can perf eval it.&lt;/p&gt;</comment>
                            <comment id="15143842" author="stack" created="Fri, 12 Feb 2016 01:21:01 +0000"  >&lt;p&gt;I tried the patch here (sorry it took me so long).&lt;/p&gt;

&lt;p&gt;I did two runs, one with, and one without.&lt;/p&gt;

&lt;p&gt;Its ycsb load, 50/50, 95% reads, then 80% reads.&lt;/p&gt;

&lt;p&gt;The patched run starts at about 13:30.&lt;/p&gt;

&lt;p&gt;There is perhaps less GC. This is a macro test so probably not much difference made by this improvement in the grand scheme of things (Also, what @enis found where PB CIS is allocating up the wazoo on top of our nice BB from a pool... probably obscures the benefit too).&lt;/p&gt;

&lt;p&gt;I backported the patch to 1.2 to do my run above.&lt;/p&gt;

&lt;p&gt;We should update the patch and get it in?  (it clashes I&apos;d say w/ commits that have since gone into master in this area &amp;#8211; I&apos;ve not checked).&lt;/p&gt;</comment>
                            <comment id="15143877" author="eclark" created="Fri, 12 Feb 2016 01:54:28 +0000"  >&lt;p&gt;Unless there is a noticeable benefit, is there a reason to try and defeat the GC? Short lived objects are very very cheap with newer jvm&apos;s and adding complexity that would be disabled for people running a newer jvm seems weird.&lt;/p&gt;</comment>
                            <comment id="15143897" author="anoop.hbase" created="Fri, 12 Feb 2016 02:20:45 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;		
		} &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
1612	        dataLengthBuffer.clear(); &lt;span class=&quot;code-comment&quot;&gt;// Clean &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the next call
&lt;/span&gt;1613	        reqBufPool.putBuffer(data);
1614	        data = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
1615	      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can not put back the buffer to pool here.  The req is just given to handlers for processing. With CellScanners in place, we are not sure whether all Cells are read out of it yet. We can release only at completeion of the Call. This was initially proposed for read reqs and now for all read and write.&lt;br/&gt;
We need 2 pools for req and response?&lt;/p&gt;

&lt;p&gt;FYI Stack, we are working in this area for the write path off heaping..  Will be doing some perf testing soon. &lt;/p&gt;

&lt;p&gt;Correction:&lt;br/&gt;
We can release the buffers where the req is read into after &lt;br/&gt;
resultPair = this.rpcServer.call(call.service, call.md, call.param, call.cellScanner,&lt;br/&gt;
          call.timestamp, this.status);&lt;br/&gt;
We have done with the req and we are about to make the response...  &lt;/p&gt;</comment>
                            <comment id="15143910" author="enis" created="Fri, 12 Feb 2016 02:31:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;We can not put back the buffer to pool here. The req is just given to handlers for processing. With CellScanners in place, we are not sure whether all Cells are read out of it yet. We can release only at completeion of the Call. This was initially proposed for read reqs and now for all read and write.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, I had a partial hacked-up patch as well. It carries the buffer in Call object, and releases at Call.done(), and also uses a fixed version of Hadoop&apos;s BoundedBBPool to give a buffer equal or bigger than the requested size. There is some sync overhead unfortunately. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;(Also, what @enis found where PB CIS is allocating up the wazoo on top of our nice BB from a pool... probably obscures the benefit too).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah, my test was with PE, and only gets so the IPC buffers were mostly &amp;lt;200 bytes, while everytime CIS allocates 4KB defeating the whole purpose. Once we or Google guys do zero-copy CIS, I think we cannot get the full benefits. &lt;/p&gt;</comment>
                            <comment id="15143918" author="anoop.hbase" created="Fri, 12 Feb 2016 02:38:26 +0000"  >&lt;p&gt;We will be doing the write tests with these kind of buffer reuse changes and off heaping..   Will report back soon..&lt;br/&gt;
Ya that PB thing is another worry.   May be we will try to change PB to support DBB backed CIS and see how/what changes it makes.   We can do that here.&lt;br/&gt;
cc &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15143956" author="ikeda" created="Fri, 12 Feb 2016 03:18:38 +0000"  >&lt;p&gt;It&apos;s been so long and I can remember some things...&lt;/p&gt;

&lt;p&gt;I prefer to use a pool of direct buffers whose have a fixed length, NIO_BUFFER_LIMIT, that is assumed to be larger than the size of the buffer of a native socket. That is not for preventing GC (and that is still required to use heap buffers), but for reducing the count of native calls to get chopped data, and that is more efficient rather than worrying about GC. Moreover, as you know, when you use a heap buffer the Oracle implementation uses an internal direct buffer pool and copies data between them, and not only that might cause shortage of the off-heap area, but also that causes overhead of redundant copying. The direct buffer pool can be shared for writing and BoundedByteBufferPool will be no longer necessary, but I was rejected in some other JIRA issue if I remember right.&lt;/p&gt;

&lt;p&gt;Some operations actually require a byte array, and I think it is meaningless to change signatures to pass a byte buffer under the condition that the buffer is on-heap. It is better to change to pass a byte array with a offset and a length, though I think paying a cost to create an instance of holding them might be subtle. I remember that there is confusion somewhere that some of methods use them as a start-position and an end-potion.&lt;/p&gt;

&lt;p&gt;Also I remember a bug that some byte buffer is not hold when coming data is insufficient.&lt;/p&gt;</comment>
                            <comment id="15144035" author="stack" created="Fri, 12 Feb 2016 04:50:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;is there a reason to try and defeat the GC?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Man, you are such a first worlder &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; You wan of them fellows who goes and buys a new one everytime? This is recycling. And later, the pool will be offheap too.&lt;/p&gt;

&lt;p&gt;Yeah, should measure though how long the buffer is occupied.&lt;/p&gt;</comment>
                            <comment id="15144039" author="stack" created="Fri, 12 Feb 2016 04:51:46 +0000"  >&lt;p&gt;Good stuff. I did not test for correctness. Just fired off a YCSB suite.&lt;/p&gt;</comment>
                            <comment id="15144041" author="stack" created="Fri, 12 Feb 2016 04:54:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;but I was rejected in some other JIRA issue if I remember right.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Where &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt; We want to save on the offheap copy to oneheap from socket for sure.&lt;/p&gt;

&lt;p&gt;Thanks for chiming in Hiroshi&lt;/p&gt;</comment>
                            <comment id="15144048" author="ram_krish" created="Fri, 12 Feb 2016 04:59:12 +0000"  >&lt;p&gt;Just yesterday was working on this area of the code. &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        data = reqBufPool.getBuffer();
1574	        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (data.capacity() &amp;lt; dataLength) {
1575	          data = ByteBuffer.allocate(dataLength);
1576	        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
1577	          data.limit(dataLength);
1578	        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This step of limiting is very important without which things does not work correctly. &lt;br/&gt;
As Anoop said returning the pool in the finally, is not correct. When you turn on cellblocks in the write request, things will get messed up. Tested that and it has to be done either when the call is completed or we need to have a mechanism as to when we get rid of the BB. For now Call.done() should be okie.&lt;br/&gt;
But there are other things also in my opinion to see as to what should be the maximum capacity of this BBPool. Do we need to create another pool for read and write seperately? IMHO I feel yes. But Anoop had other suggestions in terms of GC holding to these pools and another is that we don&apos;t know if it is write/read request. But still I think we can manage it but GC holding to these pools is what I need to evaluate. Will check on that.&lt;br/&gt;
Another thing to note is that, in case we are creating DBB from this pool and we are not able to add it  back to the pool in case of increase in capacity how will those DBB be GCed? Hence suggesting a suitable capacity for this pool is very important.&lt;br/&gt;
DBB pool avoids copying that Oracle impl does. So +1 for doing it.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Unless there is a noticeable benefit, is there a reason to try and defeat the GC? Short lived objects are very very cheap with newer jvm&apos;s and adding complexity that would be disabled for people running a newer jvm seems weird.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is something I saw in Elliot&apos;s comment in another JIRA too. Actually I think we should investigate here. I am not a G1GC expert so I think we can get some help here and really see what is the impact of these short lived objects with the new GC and its tuning. It makes sense if we can leave things to JVM if it is not burdened in doing this housekeeping. &lt;/p&gt;</comment>
                            <comment id="15144051" author="eclark" created="Fri, 12 Feb 2016 05:00:26 +0000"  >&lt;p&gt;Haha not really sure that java 8&apos;s that cutting edge anymore. Java 9&apos;s already in EA. &lt;/p&gt;

&lt;p&gt;Just saying be careful trying to make buffers hang around longer than they should in order to keep from creating new ones. Benchmarking the mslab which was much the same feature has shown that it&apos;s a net loss now that there are compacting GC&apos;s.&lt;/p&gt;</comment>
                            <comment id="15144068" author="ram_krish" created="Fri, 12 Feb 2016 05:14:41 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     data = reqBufPool.getBuffer();
1574	        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (data.capacity() &amp;lt; dataLength) {
1575	          data = ByteBuffer.allocate(dataLength);
1576	        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
1577	          data.limit(dataLength);
1578	        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So here the getBuffer will create a direct buffer if the queue is empty and that DBB we will throw away if the capacity is not enough? Such offheap memory area when will it get cleared ? &lt;/p&gt;</comment>
                            <comment id="15144218" author="anoop.hbase" created="Fri, 12 Feb 2016 07:40:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do we need to create another pool for read and write seperately? IMHO I feel yes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ya read reqs into one pool&apos;s buffer and write into another&apos;s... that is not really possible. Because we don&apos;t know the op type here in RPC. May be we can have one large buffer pool and one small  buffer pool. Write reqs normally land in the large category.  The worry was reserving more memory as we have 2 pools.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Moreover, as you know, when you use a heap buffer the Oracle implementation uses an internal direct buffer pool and copies data between them, and not only that might cause shortage of the off-heap area, but also that causes overhead of redundant copying.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. That is why along with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11425&quot; title=&quot;Cell/DBB end-to-end on the read-path&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11425&quot;&gt;&lt;del&gt;HBASE-11425&lt;/del&gt;&lt;/a&gt; work, we changed the BBBPool to be off heap rather than on heap. Did some perf testing also that time.  Having the BBBPool making on heap buffers and caching having some -ve impact in G1GC noticed by Elliot.  I forgot which Jira he says it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I prefer to use a pool of direct buffers whose have a fixed length, NIO_BUFFER_LIMIT, that is assumed to be larger than the size of the buffer of a native socket.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When u say this, u mean when we have a write req with size larger than this buffer&apos;s size, read it into N buffers rather than one and use?  I had some thinking in that direction and had some offline discussion with Stack and Ram.  Also was working on a PoC patch there.   We are actively working in this area to see what best suits us.  Will be able to tell more in near future.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So here the getBuffer will create a direct buffer if the queue is empty and that DBB we will throw away if the capacity is not enough? Such offheap memory area when will it get cleared ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ya that is another concern for me.  Off heap buffers we make and those are not pooled...  If we end up in many such allocations and throw away, the full GC, when needed will have an -ve impact?  When we are not able to get a buffer from our BBBPool  (these buffers are off heap), we should be creating only on heap buffers? data = ByteBuffer.allocate(dataLength);  -&amp;gt; Here I can see it is on heap. I mean when we ask Pool to give one and it is not able to find (it&apos;s capacity is reached and buffer is not available).  It is becoming more imp in request path as we know the size need.&lt;/p&gt;</comment>
                            <comment id="15144219" author="ikeda" created="Fri, 12 Feb 2016 07:42:24 +0000"  >&lt;blockquote&gt;
&lt;p&gt;    but I was rejected in some other JIRA issue if I remember right.&lt;/p&gt;

&lt;p&gt;Where Hiroshi Ikeda We want to save on the offheap copy to oneheap from socket for sure.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What I said above is for writing (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14873&quot; title=&quot;Problems around BoundedByteBufferPool providing direct buffers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14873&quot;&gt;HBASE-14873&lt;/a&gt;). BoundedByteBuffer is just used for writing data to a socket, as far as I know, and GatheringByteChannel can accept multiple byte buffers so that discarding and re-creating direct buffers, which might cause fragmentation of the off-heap area, is not necessary.&lt;/p&gt;

&lt;p&gt;As to reading, in general, data for an operation has a various length, which might be quite smaller or larger than NIO_BUFFER_LIMIT, and it doesn&apos;t seem effective to hold a given direct buffer to prepare and execute its operation.&lt;/p&gt;

&lt;p&gt;Besides the issue of copying, using another pool for large heap buffers might be useful to reduce GC frequency, as described long ago.&lt;/p&gt;</comment>
                            <comment id="15144225" author="anoop.hbase" created="Fri, 12 Feb 2016 07:47:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;What I said above is for writing (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14873&quot; title=&quot;Problems around BoundedByteBufferPool providing direct buffers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14873&quot;&gt;HBASE-14873&lt;/a&gt;). BoundedByteBuffer is just used for writing data to a socket, as far as I know, and GatheringByteChannel can accept multiple byte buffers so that discarding and re-creating direct buffers, which might cause fragmentation of the off-heap area, is not necessary.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ya while writing it is not really necessary to have the entire CellBlock in one BB.  It can be N buffers.  We can avoid the need for recreate and copy as the size of the block becomes more..   Did some work in this area already..  I need to make the code better and do some testing.    Was thinking for reading (I mean request read) how/whether we can use this strategy so that we can have fixed sized buffer pool..&lt;/p&gt;</comment>
                            <comment id="15228396" author="gzh1992n" created="Wed, 6 Apr 2016 14:54:00 +0000"  >&lt;p&gt;Thanks for everyone. I&apos;m sorry that I didn&apos;t pay a attention to this issue for a long time.I have some new idea in here now.&lt;/p&gt;

&lt;p&gt;The protocol of hbase can be regarded as two parts.&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; head + params &lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; cells &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;For first one, we can use a fixed DirectBB in each &lt;tt&gt;Connection&lt;/tt&gt;.They can reuse to reading first part of protocol.Just ensure&lt;br/&gt;
MaxSize(head + params) less than our fixed size.&lt;br/&gt;
For second one, we can use a DirectBB pool.Each DBB is same size that equal to NIO_BUFFER_LIMIT.We take the number of DBBs exactly and link them in a special &lt;tt&gt;CellScanner&lt;/tt&gt;.The scanner would move pointer to read cells ,and give back DBBs if the DBB before the pointer.&lt;br/&gt;
For example:&lt;br/&gt;
There is a CellScanner consist of 3 DBBs.The pointer moved to the second DDB.So we can give back first DBB now.&lt;br/&gt;
-------&lt;br/&gt;
DBB &amp;lt;-- no longer use, give back&lt;br/&gt;
DBB &amp;lt;-- pointer&lt;br/&gt;
DBB  &lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Maybe another issue improve the RpcServer, and I just share my idea.&lt;/p&gt;</comment>
                            <comment id="15229745" author="anoop.hbase" created="Thu, 7 Apr 2016 06:05:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;For first one, we can use a fixed DirectBB in each Connection.They can reuse to reading first part of protocol.Just ensure&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;MaxSize(head + params) less than our fixed size.&lt;br/&gt;
So how we know the max size of head+ params?  In case the write reqs comes from a Java client using a codec, the Cells are part of cell block. But when the client do not support cell blocking (No codec and/or non java client) it will be part of this PB message so in the 1st part.  So sizing is not so easy.  Ya we can know whether the incoming req is from a cell block supported client or not.&lt;/p&gt;

&lt;p&gt;In 15525, we are changing the BBBPool so as to have fixed sized BB pool.  So my idea is that for incoming reqs also, we can read it into N BBs from the pool.  &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12787533" name="14490.hack.to.1.2.patch" size="21087" author="stack" created="Thu, 11 Feb 2016 21:28:44 +0000"/>
                            <attachment id="12764851" name="ByteBufferPool.java" size="3264" author="ikeda" created="Fri, 2 Oct 2015 21:10:07 +0000"/>
                            <attachment id="12762393" name="HBASE-14490-v1.patch" size="2274" author="gzh1992n" created="Fri, 25 Sep 2015 15:33:20 +0000"/>
                            <attachment id="12764609" name="HBASE-14490-v10.patch" size="12621" author="gzh1992n" created="Thu, 1 Oct 2015 14:05:08 +0000"/>
                            <attachment id="12765604" name="HBASE-14490-v11.patch" size="14839" author="gzh1992n" created="Thu, 8 Oct 2015 14:33:33 +0000"/>
                            <attachment id="12770346" name="HBASE-14490-v12.patch" size="14395" author="gzh1992n" created="Tue, 3 Nov 2015 16:43:44 +0000"/>
                            <attachment id="12762400" name="HBASE-14490-v2.patch" size="3382" author="gzh1992n" created="Fri, 25 Sep 2015 16:16:39 +0000"/>
                            <attachment id="12762494" name="HBASE-14490-v3.patch" size="8954" author="gzh1992n" created="Sat, 26 Sep 2015 03:40:09 +0000"/>
                            <attachment id="12762535" name="HBASE-14490-v4.patch" size="10847" author="gzh1992n" created="Sat, 26 Sep 2015 18:04:01 +0000"/>
                            <attachment id="12762540" name="HBASE-14490-v5.patch" size="10270" author="gzh1992n" created="Sat, 26 Sep 2015 19:05:10 +0000"/>
                            <attachment id="12762556" name="HBASE-14490-v6.patch" size="10238" author="gzh1992n" created="Sat, 26 Sep 2015 21:22:35 +0000"/>
                            <attachment id="12762570" name="HBASE-14490-v7.patch" size="10230" author="gzh1992n" created="Sun, 27 Sep 2015 02:20:17 +0000"/>
                            <attachment id="12762729" name="HBASE-14490-v8.patch" size="12470" author="gzh1992n" created="Mon, 28 Sep 2015 09:10:10 +0000"/>
                            <attachment id="12764015" name="HBASE-14490-v9.patch" size="12357" author="gzh1992n" created="Mon, 28 Sep 2015 13:36:29 +0000"/>
                            <attachment id="12787586" name="gc.png" size="31703" author="stack" created="Fri, 12 Feb 2016 01:21:01 +0000"/>
                            <attachment id="12787585" name="hits.png" size="16395" author="stack" created="Fri, 12 Feb 2016 01:21:01 +0000"/>
                            <attachment id="12770605" name="test-v12-patch" size="5534" author="gzh1992n" created="Wed, 4 Nov 2015 15:51:37 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>17.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 25 Sep 2015 10:02:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            36 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2lk1b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>