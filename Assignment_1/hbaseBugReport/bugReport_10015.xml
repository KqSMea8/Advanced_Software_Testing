<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:09:42 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10015/HBASE-10015.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10015] Replace intrinsic locking with explicit locks in StoreScanner</title>
                <link>https://issues.apache.org/jira/browse/HBASE-10015</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Did some more profiling (this time with a sampling profiler) and StoreScanner.peek() showed up a lot in the samples. At first that was surprising, but peek is synchronized, so it seems a lot of the sync&apos;ing cost is eaten there.&lt;br/&gt;
It seems the only reason we have to synchronize all these methods is because a concurrent flush or compaction can change the scanner stack, other than that only a single thread should access a StoreScanner at any given time.&lt;br/&gt;
So replaced updateReaders() with some code that just indicates to the scanner that the readers should be updated and then make it the using thread&apos;s responsibility to do the work.&lt;br/&gt;
The perf improvement from this is staggering. I am seeing somewhere around 3x scan performance improvement across all scenarios.&lt;/p&gt;

&lt;p&gt;Now, the hard part is to reason about whether this is 100% correct. I ran TestAtomicOperation and TestAcidGuarantees a few times in a loop, all still pass.&lt;/p&gt;

&lt;p&gt;Will attach a sample patch.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12680362">HBASE-10015</key>
            <summary>Replace intrinsic locking with explicit locks in StoreScanner</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lhofhansl">Lars Hofhansl</assignee>
                                    <reporter username="lhofhansl">Lars Hofhansl</reporter>
                        <labels>
                            <label>performance</label>
                    </labels>
                <created>Wed, 20 Nov 2013 20:10:58 +0000</created>
                <updated>Mon, 16 Dec 2013 18:46:44 +0000</updated>
                            <resolved>Tue, 26 Nov 2013 21:11:24 +0000</resolved>
                                                    <fixVersion>0.98.0</fixVersion>
                    <fixVersion>0.96.1</fixVersion>
                    <fixVersion>0.94.15</fixVersion>
                                        <due></due>
                            <votes>1</votes>
                                    <watches>18</watches>
                                                                <comments>
                            <comment id="13828061" author="lhofhansl" created="Wed, 20 Nov 2013 20:12:19 +0000"  >&lt;p&gt;Sample 0.94 patch.&lt;/p&gt;</comment>
                            <comment id="13828074" author="lhofhansl" created="Wed, 20 Nov 2013 20:24:06 +0000"  >&lt;p&gt;The 3x improvement I see for tall tables. For wider tables the improvement is less pronounced (for 5 columns I see a 20% or so improvement).&lt;/p&gt;

&lt;p&gt;Also a note as to why I think this should be correct: Even with the current synchronized, a next/peek/reseek that has already started, will finish with the old reader. That has not changed.&lt;/p&gt;

&lt;p&gt;Need to look closer at races between close() and next/peek/reseek, as close could be called from another thread (I think), when the lease expired.&lt;/p&gt;</comment>
                            <comment id="13828082" author="lhofhansl" created="Wed, 20 Nov 2013 20:30:50 +0000"  >&lt;p&gt;Actually the main difference is between ScanWildcardColumnTracker and ExplicitColumnTracker. With ExplicitColumnTracker there are still many reseeks that outweigh the performance improvement seen here.&lt;/p&gt;</comment>
                            <comment id="13828088" author="vrodionov" created="Wed, 20 Nov 2013 20:39:29 +0000"  >&lt;p&gt;It is interesting. Java synchronization w/o thread contention cost is close to zero. You would see the difference only when you run multiple threads accessing the same StoreScanner.&lt;/p&gt;</comment>
                            <comment id="13828103" author="lhofhansl" created="Wed, 20 Nov 2013 20:56:04 +0000"  >&lt;p&gt;That is true as far as actual thread synchronization goes.&lt;/p&gt;

&lt;p&gt;Every synchronize still places a read and write memory fence, though, and I think that is the effect we&apos;re seeing. I was a bit surprised about the magnitude of this myself.&lt;/p&gt;

&lt;p&gt;I can try switching one of my cores off and measure this again, if the issues is memory fencing we should not see any improvement with one core only.&lt;/p&gt;</comment>
                            <comment id="13828130" author="vrodionov" created="Wed, 20 Nov 2013 21:20:17 +0000"  >&lt;p&gt;I just ran mys tests and found no difference at all, but they were single-thread StoreScanner. &lt;/p&gt;</comment>
                            <comment id="13828131" author="lhofhansl" created="Wed, 20 Nov 2013 21:20:21 +0000"  >&lt;p&gt;Nope. I see the same effect with just one core.&lt;br/&gt;
Will on some other machines and different versions of the JDK.&lt;/p&gt;</comment>
                            <comment id="13828278" author="lhofhansl" created="Wed, 20 Nov 2013 23:23:32 +0000"  >&lt;p&gt;Close is fine, since it is only triggered via RegionScannerImpl, which is synchronized.&lt;br/&gt;
The overhead I measured &lt;b&gt;could&lt;/b&gt; explain the numbers I&apos;ve seen here:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9440?focusedCommentId=13767047&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13767047&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-9440?focusedCommentId=13767047&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13767047&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Compared to the raw scan speed in an HFile I found medium overhead per column and a lot of overhead per rows, and StoreScanner.peek()/next(), etc, are mostly called per row).&lt;/p&gt;</comment>
                            <comment id="13828288" author="lhofhansl" created="Wed, 20 Nov 2013 23:30:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;I just ran mys tests and found no difference at all, but they were single-thread StoreScanner. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Hmm... All my tests are single threaded. Different JVM versions?&lt;br/&gt;
Are you testing with tall tables?&lt;/p&gt;</comment>
                            <comment id="13828289" author="apurtell" created="Wed, 20 Nov 2013 23:31:12 +0000"  >&lt;p&gt;The patch doesn&apos;t look wrong, but I&apos;m surprised at the improvement. If not too onerous, perhaps you could attach a test case that reproduces it?&lt;/p&gt;</comment>
                            <comment id="13828297" author="lhofhansl" created="Wed, 20 Nov 2013 23:33:46 +0000"  >&lt;p&gt;It&apos;ll be hard to disentangle the test. Basically I am testing with a table with a single column family, and filtering all data at the server with a ValueFilter. Lemme have an extra look at the code.&lt;/p&gt;</comment>
                            <comment id="13828307" author="ndimiduk" created="Wed, 20 Nov 2013 23:41:32 +0000"  >&lt;p&gt;Could the test be isolated in a variant of HFilePerfEval? I&apos;ve had luck isolating the BlockCache in a similar variant (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9806&quot; title=&quot;Add PerfEval tool for BlockCache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9806&quot;&gt;HBASE-9806&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="13828332" author="vrodionov" created="Thu, 21 Nov 2013 00:30:50 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Different JVM versions?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;1.6_56 Mac OSX 10.7.5.  I concur with myself one more time: the cost of synchronized is very low when there is no thread contention.&lt;/p&gt;</comment>
                            <comment id="13828346" author="lhofhansl" created="Thu, 21 Nov 2013 00:42:16 +0000"  >&lt;p&gt;Strange... On my desktop machine (12 cores, JDK6) I also measure no difference.&lt;br/&gt;
My Laptop has 2 cores and OpenJDK7. I wonder whether I am seeing an OpenJDK bug.&lt;/p&gt;</comment>
                            <comment id="13828361" author="lhofhansl" created="Thu, 21 Nov 2013 01:06:03 +0000"  >&lt;p&gt;Confirmed on my laptop with OpenJDK, 2.5x improvement over 10 runs very low standard deviation.&lt;br/&gt;
Going to do some microbenchmarks.&lt;/p&gt;</comment>
                            <comment id="13828365" author="lhofhansl" created="Thu, 21 Nov 2013 01:12:15 +0000"  >&lt;p&gt;Wait... No, I do see the same improvement in the JDK6, 12 core box (I forgot to switch the server over).&lt;br/&gt;
I&apos;ll attach a quick and dirty benchmark.&lt;/p&gt;</comment>
                            <comment id="13828370" author="lhofhansl" created="Thu, 21 Nov 2013 01:24:25 +0000"  >&lt;p&gt;Test code. This is some crap extracted from various tests, don&apos;t judge me on that code.. I will deny that I&apos;ve ever written that.&lt;br/&gt;
Use it with TestLoad &amp;lt;tableName&amp;gt;. It will create and seed the table if needed.&lt;br/&gt;
Then it runs the scan tests 5 times (after a prime round) and calculates mean and standard deviation.&lt;/p&gt;

&lt;p&gt;Did I mention that this is hack? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;For the record, I see a 2-3x scan speed improvement on both OpenJDK7 on a old&apos;ish 2 core machine as well as with Oracle JDK6 on a 12 core machine. In both cases the scan is from a single client only.&lt;/p&gt;</comment>
                            <comment id="13828410" author="lhofhansl" created="Thu, 21 Nov 2013 02:26:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;I concur with myself one more time: the cost of synchronized is very low when there is no thread contention.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, you&apos;re wrong twice then &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Just try it... Call a synchronized method in a loop a few 100 million times. Then remove the synchronized. Make sure the method returns something, such as a reference to a member, so it is not optimized immediately.&lt;/p&gt;

&lt;p&gt;On my test machines (JDK6 and JDK7) the latter is at least 40x faster on some machines it&apos;s 63x faster. All just a single thread.&lt;/p&gt;

&lt;p&gt;As I said before, synchronized does more than exclusion.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;it barres JVM from reordering instructions&lt;/li&gt;
	&lt;li&gt;it places memory fences (both read and write), which &amp;#45;depending on exact hw- disallows instruction reordering of the CPU&lt;/li&gt;
	&lt;li&gt;it may flush cache lines&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="13828418" author="lhofhansl" created="Thu, 21 Nov 2013 02:32:29 +0000"  >&lt;p&gt;If somebody else could run the test I attached that&apos;d be great. I ran against a local single node HBase on top of a single node HDFS cluster, with all data in the blockcache. Maybe a unittest against a mini cluster would be better.&lt;/p&gt;</comment>
                            <comment id="13828439" author="vrodionov" created="Thu, 21 Nov 2013 03:02:44 +0000"  >&lt;p&gt;May be I am wrong (empty synchronized method call cost on my laptop is 25 ns) but my own tests on StoreScanner show 0 improvement. &lt;/p&gt;

&lt;p&gt;Code is simple:&lt;/p&gt;

&lt;p&gt;create region, populate with data (make sure data is in a cache) , then&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test store scanner&quot;&lt;/span&gt;);
      Scan scan = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Scan();
      scan.setStartRow(region.getStartKey());
      scan.setStopRow(region.getEndKey());
      Store store = region.getStore(CF);
      StoreScanner scanner = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StoreScanner(store,  store.getScanInfo(), scan,  &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
      &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; start = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; total = 0;
      List&amp;lt;KeyValue&amp;gt; result = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;KeyValue&amp;gt;();
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt;(scanner.next(result)){
        total++; result.clear();
      }
      
      LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test store scanner finished. Found &quot;&lt;/span&gt;+total +&lt;span class=&quot;code-quote&quot;&gt;&quot; in &quot;&lt;/span&gt;+(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis() - start)+&lt;span class=&quot;code-quote&quot;&gt;&quot;ms&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This test shows exact the same time for both: default StoreScanner and &lt;b&gt;unsynchronized&lt;/b&gt; StoreScanner. The scan is not very fast: 1-1.5M rows per sec (rows are relatively small: 1 CF + 5 CQ,  ~ 120 bytes )&lt;/p&gt;

</comment>
                            <comment id="13828466" author="vrodionov" created="Thu, 21 Nov 2013 03:52:08 +0000"  >&lt;p&gt;For all microbenchmarks, please add the following command -line args:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-XX:+UseBiasedLocking -XX:BiasedLockingStartupDelay=0
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Oracle JVM does not enable biased locking (single thread lock optimization) first 4s of program execution.&lt;/p&gt;</comment>
                            <comment id="13828472" author="lhofhansl" created="Thu, 21 Nov 2013 04:09:04 +0000"  >&lt;p&gt;Can you try at the RegionScanner level, which maintains a heap of StoreScanners and calls peek() quite frequently. In my sampling sampling profiler I saw StoreScanner.peek() come us as some of the top method where the time is spent (and does nothing but doing a compare on a local member then calls peek on its heap).&lt;/p&gt;

&lt;p&gt;Also 25ns are more than 100 cycles on modern HW, in line what I would expect from memory stalls caused by the fences.&lt;/p&gt;</comment>
                            <comment id="13828473" author="lhofhansl" created="Thu, 21 Nov 2013 04:13:09 +0000"  >&lt;p&gt;Will add those options. All the tests run at least 15s, though.&lt;/p&gt;

&lt;p&gt;Oh, also rereading your comment above... I saw the most significant improvement per row (i.e. with 5 CQ you&apos;d see less of an improvement). This very much looks like it is an interaction between KeyValueHeap and StoreScanner, where the cost seems to be mostly per row, rather than KeyValue.&lt;/p&gt;</comment>
                            <comment id="13828477" author="vrodionov" created="Thu, 21 Nov 2013 04:15:30 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Also 25ns are more than 100 cycles on modern HW, in line what I would expect from memory stalls caused by the fences.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;With  biased locking on, its ~ 2ns. I will try RegionScanner.&lt;/p&gt;</comment>
                            <comment id="13828527" author="lhofhansl" created="Thu, 21 Nov 2013 06:22:47 +0000"  >&lt;p&gt;Added a quick and dirty perf test. The test will fail at the end and failure message is the runtime (I find this the most convenient).&lt;/p&gt;

&lt;p&gt;I get:&lt;br/&gt;
10 runs  mean:2315.9 sigma:121.37417352962696&lt;br/&gt;
and&lt;br/&gt;
10 runs  mean:4721.9 sigma:153.24911092727422&lt;br/&gt;
with the changes to StoreScanner reverted.&lt;/p&gt;</comment>
                            <comment id="13828547" author="lhofhansl" created="Thu, 21 Nov 2013 06:47:44 +0000"  >&lt;p&gt;One last note before I call it quits today.&lt;br/&gt;
The win appears to reduce the per row overhead by 50-60%. With 5 CQs this shrinks proportionally to 10-15% or so.&lt;/p&gt;</comment>
                            <comment id="13829118" author="lhofhansl" created="Thu, 21 Nov 2013 17:33:45 +0000"  >&lt;p&gt;If somebody could run the attached unit test that would be greatly appreciated.&lt;/p&gt;</comment>
                            <comment id="13829205" author="yuzhihong@gmail.com" created="Thu, 21 Nov 2013 18:45:57 +0000"  >&lt;p&gt;I tried to run the unit test but got:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
testScanFilterPerformance(org.apache.hadoop.hbase.regionserver.TestScanFilterPerformance)  Time elapsed: 0.007 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
org.apache.hadoop.ipc.RemoteException: java.io.IOException: File /user/tyu/hbase/hbase.version could only be replicated to 0 nodes, instead of 1
  at org.apache.hadoop.hdfs.server.namenode.FSNamesystem.getAdditionalBlock(FSNamesystem.java:1558)
  at org.apache.hadoop.hdfs.server.namenode.NameNode.addBlock(NameNode.java:696)
  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
  at java.lang.reflect.Method.invoke(Method.java:597)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13829212" author="lhofhansl" created="Thu, 21 Nov 2013 18:54:14 +0000"  >&lt;p&gt;That would be related to your setup I think. Seems like it can&apos;t start the mini cluster.&lt;/p&gt;</comment>
                            <comment id="13829223" author="apurtell" created="Thu, 21 Nov 2013 19:02:24 +0000"  >&lt;p&gt;Without: testScanFilterPerformance(org.apache.hadoop.hbase.regionserver.TestScanFilterPerformance): 10 runs  mean:2224.3 sigma:24.178709642989634&lt;/p&gt;

&lt;p&gt;With: testScanFilterPerformance(org.apache.hadoop.hbase.regionserver.TestScanFilterPerformance): 10 runs  mean:1373.3 sigma:14.920120642943875&lt;/p&gt;

&lt;p&gt;This is on an EC2 c3.2xlarge, which uses 16 of 20 available hardware threads of a two socket board with Xeon E5-2680s, backed by SSDs. &lt;/p&gt;</comment>
                            <comment id="13829225" author="apurtell" created="Thu, 21 Nov 2013 19:06:14 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tedyu@apache.org&quot;&gt;Ted Yu&lt;/a&gt; that&apos;s probably &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5711&quot; title=&quot;Tests are failing with incorrect data directory permissions.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5711&quot;&gt;HBASE-5711&lt;/a&gt;, do &apos;umask 022&apos; first.&lt;/p&gt;</comment>
                            <comment id="13829230" author="yuzhihong@gmail.com" created="Thu, 21 Nov 2013 19:10:25 +0000"  >&lt;p&gt;@Andy:&lt;br/&gt;
Thanks for the hint.&lt;br/&gt;
I ran &apos;umask 022&apos; first but got the same result on Mac.&lt;/p&gt;</comment>
                            <comment id="13829268" author="yuzhihong@gmail.com" created="Thu, 21 Nov 2013 19:46:04 +0000"  >&lt;p&gt;200 iterations of TestStoreScanner, TestAtomicOperation and TestAcidGuarantees passed based on 0.94 patch.&lt;/p&gt;</comment>
                            <comment id="13829302" author="lhofhansl" created="Thu, 21 Nov 2013 20:22:26 +0000"  >&lt;p&gt;I&apos;ll make a trunk patch later today.&lt;/p&gt;</comment>
                            <comment id="13829365" author="vrodionov" created="Thu, 21 Nov 2013 21:21:41 +0000"  >&lt;p&gt;I ran RegionScanner and see  ~10% improvement on on a very narrow rows only (8 store files in a region). This is 0.94.6. By the way the performance difference between StoreScanner and RegionScanner is huge (almost 3x times).&lt;/p&gt;</comment>
                            <comment id="13829403" author="lhofhansl" created="Thu, 21 Nov 2013 22:14:48 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;, we&apos;ll look at RegionScanner next. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  My evil plans is to eventually get rid of all synchronization during scanning and provide exclusion by containment instead.&lt;/p&gt;

&lt;p&gt;The overall improvement is real. Validated on various different machines. The effect of memory stalls is probably more pronounced in the running server.&lt;/p&gt;

&lt;p&gt;In any case, I think we agree that this patch can&apos;t make things worse (provide it is correct, of course).&lt;br/&gt;
I also tried with count&amp;#40;*) queries in Phoenix on tall tables (to rule out some anomalies with Filters). I see a 90% improvement there - again only on tall tables.&lt;/p&gt;</comment>
                            <comment id="13829405" author="lhofhansl" created="Thu, 21 Nov 2013 22:15:36 +0000"  >&lt;p&gt;Trunk patch.&lt;/p&gt;</comment>
                            <comment id="13829416" author="lhofhansl" created="Thu, 21 Nov 2013 22:31:48 +0000"  >&lt;p&gt;Some more results:&lt;br/&gt;
10 runs  mean:1851.0 sigma:127.71374240855992&lt;br/&gt;
vs (without StoreScanner patch)&lt;br/&gt;
10 runs  mean:2795.8 sigma:57.52182194611015&lt;/p&gt;</comment>
                            <comment id="13829423" author="lhofhansl" created="Thu, 21 Nov 2013 22:41:12 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
0: jdbc:phoenix:localhost&amp;gt; select count(*) from &lt;span class=&quot;code-quote&quot;&gt;&quot;tableTall&quot;&lt;/span&gt;;
+----------+
| COUNT(1) |
+----------+
| 20000000 |
+----------+
1 row selected (3.946 seconds)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;With patch:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
0: jdbc:phoenix:localhost&amp;gt; select count(*) from &lt;span class=&quot;code-quote&quot;&gt;&quot;tableTall&quot;&lt;/span&gt;;
+----------+
| COUNT(1) |
+----------+
| 20000000 |
+----------+
1 row selected (2.915 seconds)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Phoenix is using FAST_DIFF encoding and the ExplicitColumnTracker, so the relative gain is only 25% there (one CQ per row)&lt;/p&gt;</comment>
                            <comment id="13829485" author="hadoopqa" created="Thu, 21 Nov 2013 23:52:08 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12615205/10015-trunk.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12615205/10015-trunk.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestHRegion&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestMergeTable&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestHRegionBusyWait&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7965//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13829547" author="lhofhansl" created="Fri, 22 Nov 2013 01:27:47 +0000"  >&lt;p&gt;The failures are all NPEs. Two of them could be related, the last is during DFS cluster shutdown.&lt;/p&gt;</comment>
                            <comment id="13829552" author="lhofhansl" created="Fri, 22 Nov 2013 01:32:45 +0000"  >&lt;p&gt;Got together with some of our hardware exports. We measured some of a perf counters and found that with the patch we see 50% less branch-misses, which is significant.&lt;/p&gt;</comment>
                            <comment id="13829570" author="lhofhansl" created="Fri, 22 Nov 2013 01:55:13 +0000"  >&lt;p&gt;Arrghh... No idea how the first patch could actually work &lt;b&gt;at all&lt;/b&gt;. If you look closely you&apos;ll see that the updateReader condition was never unset. So on each an every call to next() it would force a reset of the scanner stack.&lt;/p&gt;

&lt;p&gt;Here&apos;s an update, which resets the condition atomically.&lt;/p&gt;</comment>
                            <comment id="13829571" author="lhofhansl" created="Fri, 22 Nov 2013 01:58:04 +0000"  >&lt;p&gt;And a trunk version. Note with v2 I see the same improvement.&lt;/p&gt;</comment>
                            <comment id="13829576" author="lhofhansl" created="Fri, 22 Nov 2013 02:02:32 +0000"  >&lt;p&gt;10 runs  mean:2770.5 sigma:85.37827592543668, without&lt;br/&gt;
10 runs  mean:1791.2 sigma:50.81495842761264, with&lt;/p&gt;</comment>
                            <comment id="13829603" author="lhofhansl" created="Fri, 22 Nov 2013 02:33:15 +0000"  >&lt;p&gt;Still getting the NPE in trunk in TestHRegion with v2, though (0.94 is fine with v2)... Looking.&lt;/p&gt;</comment>
                            <comment id="13829624" author="hadoopqa" created="Fri, 22 Nov 2013 03:33:28 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12615249/10015-trunk-v2.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12615249/10015-trunk-v2.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestHRegionBusyWait&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7966//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13829645" author="stack" created="Fri, 22 Nov 2013 04:44:50 +0000"  >&lt;p&gt;The numbers are great.  Patch looks good given the premise.  Was going to suggest volatile instead of AtomicBoolean but looks like the getAndSet is fundamental so withdraw this nit.  Is test failure because of this patch?&lt;/p&gt;
</comment>
                            <comment id="13829649" author="lhofhansl" created="Fri, 22 Nov 2013 05:02:00 +0000"  >&lt;p&gt;Unfortunately I am no longer sure it actually works. I identified the problem:&lt;br/&gt;
In HStore.completeCompaction we call notifyChangedReadersObservers, which calls updateReaders on all StoreScanners. Before this patch, this method would block if there was a StoreScanner in the middle of a next/seek/reseek/etc. So before that patch one would guarantee that after notifyChangedReadersObservers returns it is safe to remove the compacted files. That is no longer true.&lt;/p&gt;

&lt;p&gt;I&apos;ll see if I can come up with something. It is a shame that we have to synchronize and get 10&apos;s of millions of branch misses per second, just so we can compact a few times a day.&lt;/p&gt;</comment>
                            <comment id="13829670" author="lhofhansl" created="Fri, 22 Nov 2013 05:37:56 +0000"  >&lt;p&gt;A possible solution is keeping updateReaders() all methods that actually call checkReseek synchronized.&lt;br/&gt;
So peek() could still go without synchronization. Will test the performance with that.&lt;/p&gt;</comment>
                            <comment id="13829673" author="lhofhansl" created="Fri, 22 Nov 2013 05:44:38 +0000"  >&lt;p&gt;That seems to be correct. updateReaders now waits until all operations that are effected by the reader changes to finish. peek() does not need to be synchronized as long as we do not change scanner stack from under its feet, which we avoid by deferring to the scanner thread to do that.&lt;/p&gt;

&lt;p&gt;The unittest now yields this:&lt;br/&gt;
10 runs  mean:4449.2 sigma:24.395901295094635, without patch&lt;br/&gt;
10 runs  mean:2609.2 sigma:67.94085663280968, with patch&lt;/p&gt;

&lt;p&gt;So, still a significant win, albeit to quite what it was before.&lt;/p&gt;</comment>
                            <comment id="13829674" author="lhofhansl" created="Fri, 22 Nov 2013 05:45:18 +0000"  >&lt;p&gt;New v3 patch for 0.94&lt;/p&gt;</comment>
                            <comment id="13829675" author="lhofhansl" created="Fri, 22 Nov 2013 05:45:54 +0000"  >&lt;p&gt;And trunk.&lt;br/&gt;
This patch should be correct for all scenarios.&lt;/p&gt;</comment>
                            <comment id="13829679" author="stack" created="Fri, 22 Nov 2013 05:53:58 +0000"  >&lt;p&gt;Can we have it so no changing of readers during a scan?&lt;/p&gt;</comment>
                            <comment id="13829680" author="lhofhansl" created="Fri, 22 Nov 2013 05:57:03 +0000"  >&lt;p&gt;Oops. Attached wrong trunk patch. This is right one. All good &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13829686" author="lhofhansl" created="Fri, 22 Nov 2013 06:03:28 +0000"  >&lt;p&gt;I think it would be hard to&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;push reader switching to the scanning thread&lt;/li&gt;
	&lt;li&gt;guarantee that the readers will eventually be switched to the compaction can proceed and finished&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;What if a scanner isn&apos;t closed? Or nobody ever calls next() on it? Then we have to wait for the lease to expire before the compaction can finish.&lt;/p&gt;

&lt;p&gt;next()/seek()/reseek() are not as critical as they are not called remotely as often as peek. peek() is also a very small method and (according to our perf expert here) small synchronized methods have the greatest potential to throw the branch prediction off.&lt;/p&gt;</comment>
                            <comment id="13829695" author="lhofhansl" created="Fri, 22 Nov 2013 06:20:14 +0000"  >&lt;p&gt;Phoenix with v3 (different machines than above, so do not compare absolute numbers).&lt;br/&gt;
Without patch:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
0: jdbc:phoenix:localhost&amp;gt; select count(*) from &lt;span class=&quot;code-quote&quot;&gt;&quot;myNew1&quot;&lt;/span&gt;;
+----------+
| COUNT(1) |
+----------+
| 30000000 |
+----------+
1 row selected (18.417 seconds)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With patch:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
0: jdbc:phoenix:localhost&amp;gt; select count(*) from &lt;span class=&quot;code-quote&quot;&gt;&quot;myNew1&quot;&lt;/span&gt;;
+----------+
| COUNT(1) |
+----------+
| 30000000 |
+----------+
1 row selected (13.319 seconds)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13829698" author="stack" created="Fri, 22 Nov 2013 06:23:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;Then we have to wait for the lease to expire before the compaction can finish.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was thinking this might not be the end of the world.&lt;/p&gt;

&lt;p&gt;What if we closed and reopened the current scanner when readers are changed. It is a rare event.&lt;/p&gt;</comment>
                            <comment id="13829700" author="lhofhansl" created="Fri, 22 Nov 2013 06:26:38 +0000"  >&lt;p&gt;Actually now it does not even need the AtomicBoolean anymore.&lt;/p&gt;</comment>
                            <comment id="13829701" author="lhofhansl" created="Fri, 22 Nov 2013 06:30:31 +0000"  >&lt;p&gt;The closing and reopening is what needs the synchronization &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
A thread might still be using the scanner. If we can make it so that we do not have to synchronize all methods in StoreScanner, and still do it safely I&apos;d be happy... But frankly ATM I do not see how without other expensive synchronization.&lt;/p&gt;</comment>
                            <comment id="13829705" author="lhofhansl" created="Fri, 22 Nov 2013 06:37:54 +0000"  >&lt;p&gt;Removed AtomicBoolean&lt;/p&gt;</comment>
                            <comment id="13829708" author="lhofhansl" created="Fri, 22 Nov 2013 06:38:29 +0000"  >&lt;p&gt;Same for trunk.&lt;br/&gt;
(This give a few % better performance)&lt;/p&gt;</comment>
                            <comment id="13829732" author="stack" created="Fri, 22 Nov 2013 06:58:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;The closing and reopening is what needs the synchronization &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not helping. &lt;/p&gt;

&lt;p&gt;This looks like an issue:&lt;/p&gt;

&lt;p&gt;+    if (shouldUpdateReaders) {&lt;br/&gt;
+      shouldUpdateReaders = false;&lt;/p&gt;

&lt;p&gt;It is happening outside a sync block and shouldUpdateReaders is not volatile.&lt;/p&gt;
</comment>
                            <comment id="13829736" author="lhofhansl" created="Fri, 22 Nov 2013 07:02:25 +0000"  >&lt;p&gt;checkUpdateReaders is called from checkReseek, which is only called from synchronized methods. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;You are helping. Looking at this from different angles is good.&lt;/p&gt;</comment>
                            <comment id="13829751" author="stack" created="Fri, 22 Nov 2013 07:17:11 +0000"  >&lt;p&gt;OK.  Would suggest running hadoopqa  a few times.  Tests around changing readers are usually pretty good at finding issues if any.&lt;/p&gt;</comment>
                            <comment id="13829754" author="lhofhansl" created="Fri, 22 Nov 2013 07:26:42 +0000"  >&lt;p&gt;Yep. Found issues with the first two versions of this.&lt;/p&gt;</comment>
                            <comment id="13829767" author="hadoopqa" created="Fri, 22 Nov 2013 07:47:41 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12615278/10015-trunk-v3.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12615278/10015-trunk-v3.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.wal.TestLogRolling&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7967//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13829824" author="hadoopqa" created="Fri, 22 Nov 2013 09:29:18 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12615283/10015-trunk-v4.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12615283/10015-trunk-v4.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7968//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13830138" author="stack" created="Fri, 22 Nov 2013 17:31:49 +0000"  >&lt;p&gt;Get another run in.&lt;/p&gt;</comment>
                            <comment id="13830174" author="lhofhansl" created="Fri, 22 Nov 2013 18:04:55 +0000"  >&lt;p&gt;Thanks Stack.&lt;/p&gt;</comment>
                            <comment id="13830243" author="hadoopqa" created="Fri, 22 Nov 2013 19:13:01 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12615356/10015-trunk-v4.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12615356/10015-trunk-v4.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7970//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13830296" author="hadoopqa" created="Fri, 22 Nov 2013 20:57:32 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12615371/10015-trunk-v4.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12615371/10015-trunk-v4.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7972//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13830309" author="lhofhansl" created="Fri, 22 Nov 2013 21:03:27 +0000"  >&lt;p&gt;Need to look at the find bugs thing&lt;/p&gt;</comment>
                            <comment id="13830333" author="stack" created="Fri, 22 Nov 2013 21:40:00 +0000"  >&lt;p&gt;+1 on commit.&lt;/p&gt;</comment>
                            <comment id="13830464" author="lhofhansl" created="Sat, 23 Nov 2013 00:45:45 +0000"  >&lt;p&gt;There&apos;s more stuff to do. I got a crash course on CPU design from Hussam Mousa, one of our performance experts.&lt;br/&gt;
We saw a lot of CPU frontend and backend stalls during scanning, so there is potential for a lot more improvements.&lt;/p&gt;

&lt;p&gt;I&apos;m still looking for ways to remove all synchronization from StoreScanner and RegionScannerImpl.&lt;/p&gt;</comment>
                            <comment id="13830467" author="lhofhansl" created="Sat, 23 Nov 2013 00:50:12 +0000"  >&lt;p&gt;I&apos;ll look at the findbugs issue, do some more tests, and then commit.&lt;/p&gt;

&lt;p&gt;An interesting metric we have to start to pay more attention is the scan cost per KV.&lt;br/&gt;
For example scanning through 1m rows with one CQ is &lt;b&gt;much&lt;/b&gt; slower than scanning through 100k rows with 10 CQs, even though it touches the same number of KVs. This patch helps a bit to even that out.&lt;/p&gt;

&lt;p&gt;As &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; and I said in the comments here, it should be possible to remove all synchronization form StoreScanner and RegionScannerImpl. It would require some refactoring.&lt;/p&gt;</comment>
                            <comment id="13830481" author="stack" created="Sat, 23 Nov 2013 01:07:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;It would require some refactoring.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Lets make a plan.&lt;/p&gt;</comment>
                            <comment id="13830495" author="lhofhansl" created="Sat, 23 Nov 2013 01:28:18 +0000"  >&lt;p&gt;The findbugs warning is a dud, it complains about StoreScanner.heap being locked 79% of the cases.&lt;/p&gt;</comment>
                            <comment id="13830496" author="vrodionov" created="Sat, 23 Nov 2013 01:30:23 +0000"  >&lt;blockquote&gt;
&lt;p&gt; so there is potential for a lot more improvements&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;KV creation (new) is one of the serious bottlenecks, but I have no idea how to not create new instances on &lt;b&gt;next&lt;/b&gt;. I have done some HBase internal hacks to get Maximum possible performance from scan. It is the multi-threaded  application (in my case - 8HT threads) and scans on StoreFileScanner directly (data is cached 100%).  The table was tall and narrow.&lt;/p&gt;

&lt;p&gt;Stock HBase was able to reach 50M KV per sec&lt;br/&gt;
Stock with KV reuse (hack) - 90M KV per sec.&lt;/p&gt;

</comment>
                            <comment id="13830498" author="lhofhansl" created="Sat, 23 Nov 2013 01:38:24 +0000"  >&lt;p&gt;Here&apos;s another idea:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;we already lock the RegionScannerImpl.next/seek/reseek, etc.&lt;/li&gt;
	&lt;li&gt;what if we pass the RegionScannerImpl instance as a lock object to StoreScanner&lt;/li&gt;
	&lt;li&gt;in updateReaders() we&apos;d then lock on that RegionScannerImpl instance, or we&apos;d call a special synchronized method in RegionScannerImpl and have it update the readers.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The lock scope would be broader, but it should be correct, and it would allow us to remove all locking from StoreScanner.&lt;br/&gt;
I&apos;ll experiment with that.&lt;/p&gt;</comment>
                            <comment id="13830499" author="lhofhansl" created="Sat, 23 Nov 2013 01:40:50 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;, yeah, need to work on that too. Is that with block encoding? When using block encoding we need to copy the underlying byte[]. When no block encoding is used making a new KV is just a few dozen bytes.&lt;/p&gt;</comment>
                            <comment id="13830578" author="lhofhansl" created="Sat, 23 Nov 2013 05:47:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;pass the RegionScannerImpl instance as a lock object to StoreScanner&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Alas, that works fine for scanning, but not for compactions/flushes (which also use StoreScanner, and can actually override the StoreScanner via a coprocessor hook).&lt;/p&gt;</comment>
                            <comment id="13830580" author="stack" created="Sat, 23 Nov 2013 05:58:49 +0000"  >&lt;blockquote&gt;&lt;p&gt;but not for compactions/flushes ....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Tell us more?  Am interested.&lt;/p&gt;</comment>
                            <comment id="13830588" author="lhofhansl" created="Sat, 23 Nov 2013 06:19:55 +0000"  >&lt;p&gt;I thought, since we lock all operations at the RegioScannerImpl level anyway, we could exclude a Store&apos;s updateReaders at that level too. That works fine if we have a RegionScanner, but in the case of compactions and flushes we don&apos;t one, so I have no way to protect the StoreScanner reading on behalf of a flush or a compaction.&lt;/p&gt;</comment>
                            <comment id="13830597" author="stack" created="Sat, 23 Nov 2013 06:45:13 +0000"  >&lt;p&gt;And it would be silly creating a regionscannerimpl to do a storescan.  We need to do update readers differently.  Compactions and flushes are rare and background tasks.  They should defer to the ongoing scans.&lt;/p&gt;</comment>
                            <comment id="13830600" author="lhofhansl" created="Sat, 23 Nov 2013 07:06:26 +0000"  >&lt;p&gt;Yeah, I&apos;m coming around to that. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
We have to figure out how to do that without excessive synchronization. At the minimum we have to guarantee that nobody is currently using the readers in question before we retire them.&lt;br/&gt;
Alternatively we wait for all running scanners to finish. How do we do that?&lt;/p&gt;</comment>
                            <comment id="13830605" author="lhofhansl" created="Sat, 23 Nov 2013 07:17:08 +0000"  >&lt;p&gt;I can come up with various schemes for that, but nothing that is cheaper than just synchronizing all the methods.&lt;/p&gt;</comment>
                            <comment id="13830612" author="stack" created="Sat, 23 Nov 2013 07:37:36 +0000"  >&lt;p&gt;+ Scans run free for N seconds or nanoseconds since checking this should be cheap&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; and then they go to a checkpoint where they look to see if they should reset.  ChangedReaders blocks until checkpoint has been cleared.&lt;br/&gt;
+ Scans check for closing being set on each op (I suppose this check of a volatile would be just as bad as a synchronization).&lt;br/&gt;
+ We refcount outstanding scanners and only delete compacted files when refcount goes to zero.  Not sure how we&apos;d switch in flushes unless we prevent the flush happening while ongoing scan (eek).&lt;/p&gt;
</comment>
                            <comment id="13830719" author="lhofhansl" created="Sat, 23 Nov 2013 17:49:27 +0000"  >&lt;p&gt;Something like this. &lt;/p&gt;

&lt;p&gt;On order for the compaction to make progress we could assign scanners to epochs, where everytime we change the readers for a store we go to a new epoch. If all scanners for an epoch are either done or have switched to the new epoch, we can retire the readers of that epoch.&lt;/p&gt;

&lt;p&gt;In any case, just commit this change and keep working on it? As Vladimir points out there are other issues with more serious performance implications.&lt;/p&gt;</comment>
                            <comment id="13830735" author="apurtell" created="Sat, 23 Nov 2013 18:35:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;On order for the compaction to make progress we could assign scanners to epochs, where everytime we change the readers for a store we go to a new epoch. If all scanners for an epoch are either done or have switched to the new epoch, we can retire the readers of that epoch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I haven&apos;t thought about this nearly as much as you have recently but that sounds promising.&lt;/p&gt;</comment>
                            <comment id="13830739" author="stack" created="Sat, 23 Nov 2013 18:42:27 +0000"  >&lt;p&gt;+1 on committing what is done already.&lt;/p&gt;

&lt;p&gt;epoch sounds like refcounting?  Yeah, no hurry deleting the old stuff as long as it is done eventually.  Accounting would be easier if we could move/rename files under the scanner as long is it does not disrupt (maybe I can try this).&lt;/p&gt;

&lt;p&gt;I like your idea of lockless scanning.  Would be good to put it up as a goal even if hard to attain, if only to orientate which way progress lies.&lt;/p&gt;</comment>
                            <comment id="13830786" author="lhofhansl" created="Sat, 23 Nov 2013 22:35:42 +0000"  >&lt;p&gt;Epoch would be like reference counting per distinct sweet of readers. With just a reference count of scanners I&apos;d be worried that compaction would never make any progress.&lt;/p&gt;</comment>
                            <comment id="13830849" author="lhofhansl" created="Sun, 24 Nov 2013 04:08:13 +0000"  >&lt;p&gt;Actually this is not quite right in 0.94, because it does not have &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6499&quot; title=&quot;StoreScanner&amp;#39;s QueryMatcher not reset on store update&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6499&quot;&gt;&lt;del&gt;HBASE-6499&lt;/del&gt;&lt;/a&gt;. (seek does not call checkReseek). I&apos;ll make that change as well, also checkUpdatedReaders can be folded into checkReseek for better readability.&lt;/p&gt;</comment>
                            <comment id="13830857" author="lhofhansl" created="Sun, 24 Nov 2013 05:02:18 +0000"  >&lt;p&gt;No longer sure that patch is good. The problem was that StoreScanner.peek() is synchronized.&lt;/p&gt;

&lt;p&gt;With the patch peek() will use the old scanner stack, looking at MemstoreScanner and StoreFileScanner it &lt;b&gt;is&lt;/b&gt; correct (both scanners just return the current KV and StoreFileScanner does not touch its reader during peek), but it is fragile, it also requires StoreScanner to hang on to all StoreFileScanners and the MemstoreScanner, until checkReseek is called or the scanner is closed. This in turn means that we keep references to the readers open, etc.&lt;/p&gt;

&lt;p&gt;I keep doing that... Filing jiras with patches and then finding that the fix is a bad idea.&lt;br/&gt;
Well, at least I learned about modern CPU and that synchronized in tight loops is very expensive.&lt;/p&gt;

&lt;p&gt;I will keep thinking about this. Unscheduling for now.&lt;/p&gt;</comment>
                            <comment id="13831001" author="stack" created="Sun, 24 Nov 2013 18:20:58 +0000"  >&lt;p&gt;So you are thinking this cannot be completed until after we add delayed clean up of no-longer-used files?  Only then can we safely remove synchronizations?&lt;/p&gt;

&lt;p&gt;How many threads we talking anyways?  It should be uncontended.  The only thread is the current handler asking to return scan results &amp;#8211; this changes as different handlers come in on each bulk next invocation &amp;#8211; and then an incidental update readers request..and that is it?&lt;/p&gt;</comment>
                            <comment id="13831111" author="lhofhansl" created="Sun, 24 Nov 2013 23:47:54 +0000"  >&lt;p&gt;I think so (to your first point).&lt;/p&gt;

&lt;p&gt;This is (almost) never contented, but StoreScanner.peek() is called &lt;b&gt;very&lt;/b&gt; frequently (including the compares in KeyValueHeap) and the memory fences enforced by synchronized cause a slowdown.&lt;/p&gt;

&lt;p&gt;I did notice that during flushed and compactions we do &lt;b&gt;not&lt;/b&gt; register any listeners for changed readers, so my earlier idea of just synchronizing on the RegionScannerImpl should work after all.&lt;/p&gt;</comment>
                            <comment id="13831160" author="lhofhansl" created="Mon, 25 Nov 2013 03:32:06 +0000"  >&lt;p&gt;Here&apos;s yet another sample patch (for 0.94). Adds a setter for a syncObject to KeyValueScanner. (if I wanted to change the StoreScanner constructor then we need to change the coprocessor region observer to pass this in as well, so I opted for a setter instead). When a StoreScanner is created by a RegionScanner it passes a reference to this as the syncObject.&lt;br/&gt;
So now all locking is - when needed - done through the RegionScannerImpl and I see the same performance improvement.&lt;br/&gt;
As said above StoreScanner for flushes and compactions are never invalidated anyway.&lt;/p&gt;

&lt;p&gt;We have coarsened the lock from StoreScanner.next/peek/seek/etc to RegionScannerImpl.next/peek/seek/etc.&lt;/p&gt;

&lt;p&gt;Now, this is not really pretty. Is this worth the performance gain for tall table scans? Up to 2x for really tall tables with small KVs, proportionally less for wider tables and larger KVs.&lt;/p&gt;</comment>
                            <comment id="13831165" author="lhofhansl" created="Mon, 25 Nov 2013 04:02:41 +0000"  >&lt;p&gt;Was just looking at making a trunk patch.&lt;br/&gt;
In trunk StoreScanners for compaction &lt;b&gt;do&lt;/b&gt; register a change observer? But not in 0.94?!&lt;/p&gt;

&lt;p&gt;So - sigh - the patch I just made for 0.94 will not work in trunk. And maybe more importantly: Is there a lingering bug in 0.94?&lt;/p&gt;</comment>
                            <comment id="13831191" author="lhofhansl" created="Mon, 25 Nov 2013 05:53:56 +0000"  >&lt;p&gt;Continuing my monologue here... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;To my surprise I get a 25-30% perf improvement when I just replace intrinsic locking (synchronized) with ReentrantLock - again for very tall tables only.&lt;br/&gt;
synchronized with biased locking should outperform the ReentrantLock in uncontended cases, but it does not (all my tests are against a real RegionServer, so the initial delay for BiasedLocking has not effect here). &lt;/p&gt;

&lt;p&gt;Something is going on.&lt;/p&gt;

&lt;p&gt;This is on JDK7 on old&apos;ish 2 core machine. Will try on some other machines as well. If this bears out on other machines as well it would be safe and quick win.&lt;/p&gt;</comment>
                            <comment id="13831192" author="lhofhansl" created="Mon, 25 Nov 2013 05:54:33 +0000"  >&lt;p&gt;Parking the ReentrantLock patch for 0.94 here.&lt;/p&gt;</comment>
                            <comment id="13831202" author="lhofhansl" created="Mon, 25 Nov 2013 06:20:22 +0000"  >&lt;p&gt;Verified on different machine architecture with JDK6 (using the attached unittest).&lt;br/&gt;
4400ms vs 3200ms (JDK7, 2 core machine)&lt;br/&gt;
2600mx vs 2000ms (JDK6, 12 core machine)&lt;/p&gt;

&lt;p&gt;Again, if somebody is still reading and could verify the latest patch with the earlier unittest on their hardware that would be greatly appreciated.&lt;/p&gt;</comment>
                            <comment id="13831719" author="stack" created="Mon, 25 Nov 2013 18:31:47 +0000"  >&lt;p&gt;On mac I see this w/ jvm1.8:&lt;/p&gt;

&lt;p&gt;Failed tests:   testScanFilterPerformance(org.apache.hadoop.hbase.regionserver.TestScanFilterPerformance): 10 runs  mean:3032.9 sigma:60.501983438561744&lt;br/&gt;
Failed tests:   testScanFilterPerformance(org.apache.hadoop.hbase.regionserver.TestScanFilterPerformance): 10 runs  mean:2322.4 sigma:119.92430946226041&lt;/p&gt;

&lt;p&gt;Let me try another box.  How can I be sure there is no regression for wide tables?&lt;/p&gt;</comment>
                            <comment id="13831721" author="apurtell" created="Mon, 25 Nov 2013 18:33:10 +0000"  >&lt;p&gt;JDK 7, 16 vcores, SSD, xfs&lt;/p&gt;

&lt;p&gt;Without: 5 runs, Mean: 14.4136 Sigma: 0.17013712116995514&lt;/p&gt;

&lt;p&gt;With the 0.94 -lock patch: 5 runs, Mean: 10.614 Sigma: 0.18904179432072687&lt;/p&gt;

&lt;p&gt;Edit: This is with the &apos;TestLoad&apos; utility&lt;/p&gt;</comment>
                            <comment id="13831740" author="apurtell" created="Mon, 25 Nov 2013 18:39:31 +0000"  >&lt;p&gt;This is the same system with TestScanFilterPerformance:&lt;/p&gt;

&lt;p&gt;Without: 10 runs  mean:2248.7 sigma:36.59795076230362&lt;/p&gt;

&lt;p&gt;With the 0.94 -lock patch: 10 runs  mean:1860.3 sigma:29.397448868906977&lt;/p&gt;</comment>
                            <comment id="13831742" author="yuzhihong@gmail.com" created="Mon, 25 Nov 2013 18:41:19 +0000"  >&lt;p&gt;On Linux with jdk 1.7 :&lt;/p&gt;

&lt;p&gt;with patch:&lt;br/&gt;
Failed tests:   testScanFilterPerformance(org.apache.hadoop.hbase.regionserver.TestScanFilterPerformance): 10 runs  mean:2297.5 sigma:23.29484921608208&lt;/p&gt;

&lt;p&gt;without:&lt;br/&gt;
Failed tests:   testScanFilterPerformance(org.apache.hadoop.hbase.regionserver.TestScanFilterPerformance): 10 runs  mean:3242.4 sigma:732.0478399667605&lt;/p&gt;</comment>
                            <comment id="13831814" author="lhofhansl" created="Mon, 25 Nov 2013 19:29:52 +0000"  >&lt;p&gt;So it seems this is universal.&lt;br/&gt;
Our performance dude has actually confirmed that this is an expected outcome. I&apos;ll gather some more CPU metrics as I find time today.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, these locks are taken in StoreScanner, which is &quot;row&quot; based (unlike StoreFileScanner and MemstoreScanner). So the frequent locks/unlocks there we&apos;d mostly see per row. Wider rows won&apos;t be slower, but the speedup effect would be proportionally less. To be sure I&apos;ll validate with wider tables (maybe 20 CQs). I will also double check that biased locking is in effect.&lt;/p&gt;</comment>
                            <comment id="13832029" author="lhofhansl" created="Mon, 25 Nov 2013 23:00:16 +0000"  >&lt;p&gt;10 columns, 100 byte values, 1st and 4th selected.&lt;br/&gt;
5 runs, Mean: 13.756 Sigma: 0.04210938137755054, with lock patch&lt;br/&gt;
5 runs, Mean: 14.2028 Sigma: 0.08452313292821084, without&lt;/p&gt;

&lt;p&gt;10 columns, all selected&lt;br/&gt;
5 runs, Mean: 8.577 Sigma: 0.09060463564299566&lt;br/&gt;
5 runs, Mean: 9.9846 Sigma: 0.1023749969474969, without&lt;/p&gt;

&lt;p&gt;Per KV cost now is dominant. In no scenario have I observed this to be slower.&lt;/p&gt;</comment>
                            <comment id="13832032" author="yuzhihong@gmail.com" created="Mon, 25 Nov 2013 23:02:01 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13832107" author="lhofhansl" created="Tue, 26 Nov 2013 00:12:08 +0000"  >&lt;p&gt;I force enabled biased locking. No improvement with intrinsic locking; according to the docs it is enabled in JDK6+ anyway, was just making sure.&lt;/p&gt;</comment>
                            <comment id="13832147" author="enis" created="Tue, 26 Nov 2013 01:01:30 +0000"  >&lt;p&gt;If we do ref counting, can&apos;t we still finish the compaction, but not archive the files as long as there are scanners against them. We can do it by decoupling the store file archiving from compaction. At the worst case on RS crash, we might end up already compacted files which won&apos;t affect semantics. &lt;br/&gt;
Regardless, +1 on -lock patch just for the gains. &lt;/p&gt;</comment>
                            <comment id="13832162" author="lhofhansl" created="Tue, 26 Nov 2013 01:21:07 +0000"  >&lt;p&gt;Yeah, that&apos;s the idea. We&apos;d delay archiving any HFile until no scanners are referring to it any more.&lt;/p&gt;</comment>
                            <comment id="13832182" author="enis" created="Tue, 26 Nov 2013 01:53:39 +0000"  >&lt;p&gt;oh, ok. I missed that somehow from the above discussion.  Is there a jira yet? I can help with this.&lt;/p&gt;</comment>
                            <comment id="13832315" author="lhofhansl" created="Tue, 26 Nov 2013 05:03:05 +0000"  >&lt;p&gt;The trick will be to do all this without the need to synchronize anything in StoreScanner.&lt;br/&gt;
Maybe there is a way to bring my idea of lock coarsening further: Above I suggest to just have updateReaders lock on the RegionScannerImpl, because that is locked anyway. The problem was that - at least in trunk - we also want to be notified during flushes and compactions and in that case we do not have a RegionScannerImpl. So idea is: Lock the StoreScanner itself from the compaction/flush code and pass itself as the lock object. For flushes we do it in a single loop, for compaction we could do that in chunks of 10000 or so.&lt;/p&gt;

&lt;p&gt;Now in this issue I already attached a bunch of different patches. Lemme commit the -lock patch here and close this. We can discuss further on a new jira.&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tedyu@apache.org&quot;&gt;Ted Yu&lt;/a&gt; for running the perf unittests.&lt;/p&gt;</comment>
                            <comment id="13832829" author="lhofhansl" created="Tue, 26 Nov 2013 18:17:04 +0000"  >&lt;p&gt;Trunk patch.&lt;/p&gt;</comment>
                            <comment id="13832884" author="lhofhansl" created="Tue, 26 Nov 2013 18:57:46 +0000"  >&lt;p&gt;Will commit if it comes through clean.&lt;br/&gt;
Checked again in the sampling profiler, StoreScanner.peek() moved from 1st place to 15th or so.&lt;/p&gt;</comment>
                            <comment id="13832909" author="stack" created="Tue, 26 Nov 2013 19:18:22 +0000"  >&lt;p&gt;+1 to 0.96 and trunk.&lt;/p&gt;</comment>
                            <comment id="13833035" author="hadoopqa" created="Tue, 26 Nov 2013 20:46:11 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12615867/10015-trunk-lock.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12615867/10015-trunk-lock.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javac&lt;/font&gt;.  The applied patch generated 4 javac compiler warnings (more than the trunk&apos;s current 0 warnings).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 release audit&lt;/font&gt;.  The applied patch generated 1 release audit warnings (more than the trunk&apos;s current 0 warnings).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8000//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13833043" author="lhofhansl" created="Tue, 26 Nov 2013 20:57:08 +0000"  >&lt;p&gt;Will check the various new warnings.&lt;/p&gt;</comment>
                            <comment id="13833055" author="lhofhansl" created="Tue, 26 Nov 2013 21:01:55 +0000"  >&lt;p&gt;The javac warnings are these:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[INFO] Compiling 150 source files to /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/trunk/hbase-common/target/classes
[WARNING] /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java:[51,15] sun.misc.Unsafe is Sun proprietary API and may be removed in a &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt; release
[WARNING] /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java:[1110,19] sun.misc.Unsafe is Sun proprietary API and may be removed in a &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt; release
[WARNING] /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java:[1116,21] sun.misc.Unsafe is Sun proprietary API and may be removed in a &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt; release
[WARNING] /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Bytes.java:[1121,28] sun.misc.Unsafe is Sun proprietary API and may be removed in a &lt;span class=&quot;code-keyword&quot;&gt;future&lt;/span&gt; release
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;These are not new.&lt;/p&gt;

&lt;p&gt;Same with the Javadoc warnings (no new ones from this patch).&lt;br/&gt;
Same for findbugs.&lt;/p&gt;

&lt;p&gt;Going to commit.&lt;/p&gt;</comment>
                            <comment id="13833076" author="lhofhansl" created="Tue, 26 Nov 2013 21:11:24 +0000"  >&lt;p&gt;Committed to all branches.&lt;/p&gt;

&lt;p&gt;Interestingly now I find that for tall tables region.getCoprocessorHost().postScannerFilterRow takes the new top spot.&lt;br/&gt;
(with a sampling profiler)&lt;/p&gt;</comment>
                            <comment id="13833429" author="hudson" created="Wed, 27 Nov 2013 04:01:12 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.94-security #346 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security/346/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security/346/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10015&quot; title=&quot;Replace intrinsic locking with explicit locks in StoreScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10015&quot;&gt;&lt;del&gt;HBASE-10015&lt;/del&gt;&lt;/a&gt; Replace intrinsic locking with explicit locks in StoreScanner (larsh: rev 1545840)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13833557" author="hudson" created="Wed, 27 Nov 2013 07:58:10 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.94 #1212 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/1212/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/1212/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10015&quot; title=&quot;Replace intrinsic locking with explicit locks in StoreScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10015&quot;&gt;&lt;del&gt;HBASE-10015&lt;/del&gt;&lt;/a&gt; Replace intrinsic locking with explicit locks in StoreScanner (larsh: rev 1545840)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13833708" author="hudson" created="Wed, 27 Nov 2013 12:02:18 +0000"  >&lt;p&gt;FAILURE: Integrated in hbase-0.96-hadoop2 #133 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.96-hadoop2/133/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.96-hadoop2/133/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10015&quot; title=&quot;Replace intrinsic locking with explicit locks in StoreScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10015&quot;&gt;&lt;del&gt;HBASE-10015&lt;/del&gt;&lt;/a&gt; Replace intrinsic locking with explicit locks in StoreScanner (larsh: rev 1545837)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13833732" author="hudson" created="Wed, 27 Nov 2013 12:17:52 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #853 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/853/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/853/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10015&quot; title=&quot;Replace intrinsic locking with explicit locks in StoreScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10015&quot;&gt;&lt;del&gt;HBASE-10015&lt;/del&gt;&lt;/a&gt; Replace intrinsic locking with explicit locks in StoreScanner (larsh: rev 1545838)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13833796" author="hudson" created="Wed, 27 Nov 2013 13:30:31 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.96 #205 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.96/205/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.96/205/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10015&quot; title=&quot;Replace intrinsic locking with explicit locks in StoreScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10015&quot;&gt;&lt;del&gt;HBASE-10015&lt;/del&gt;&lt;/a&gt; Replace intrinsic locking with explicit locks in StoreScanner (larsh: rev 1545837)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13834192" author="hudson" created="Wed, 27 Nov 2013 21:42:19 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #4700 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/4700/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/4700/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10015&quot; title=&quot;Replace intrinsic locking with explicit locks in StoreScanner&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10015&quot;&gt;&lt;del&gt;HBASE-10015&lt;/del&gt;&lt;/a&gt; Replace intrinsic locking with explicit locks in StoreScanner (larsh: rev 1545838)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13849491" author="stack" created="Mon, 16 Dec 2013 18:46:44 +0000"  >&lt;p&gt;Released in 0.96.1.  Issue closed.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12615540" name="10015-0.94-lock.txt" size="4321" author="lhofhansl" created="Mon, 25 Nov 2013 05:54:33 +0000"/>
                            <attachment id="12615525" name="10015-0.94-new-sample.txt" size="9255" author="lhofhansl" created="Mon, 25 Nov 2013 03:32:06 +0000"/>
                            <attachment id="12615248" name="10015-0.94-v2.txt" size="6119" author="lhofhansl" created="Fri, 22 Nov 2013 01:55:13 +0000"/>
                            <attachment id="12615273" name="10015-0.94-v3.txt" size="4502" author="lhofhansl" created="Fri, 22 Nov 2013 05:45:18 +0000"/>
                            <attachment id="12615282" name="10015-0.94-v4.txt" size="4487" author="lhofhansl" created="Fri, 22 Nov 2013 06:37:54 +0000"/>
                            <attachment id="12615073" name="10015-0.94-withtest.txt" size="8585" author="lhofhansl" created="Thu, 21 Nov 2013 06:22:47 +0000"/>
                            <attachment id="12614973" name="10015-0.94.txt" size="5626" author="lhofhansl" created="Wed, 20 Nov 2013 20:12:19 +0000"/>
                            <attachment id="12615867" name="10015-trunk-lock.txt" size="3679" author="lhofhansl" created="Tue, 26 Nov 2013 18:17:04 +0000"/>
                            <attachment id="12615249" name="10015-trunk-v2.txt" size="5553" author="lhofhansl" created="Fri, 22 Nov 2013 01:58:04 +0000"/>
                            <attachment id="12615278" name="10015-trunk-v3.txt" size="3946" author="lhofhansl" created="Fri, 22 Nov 2013 05:57:03 +0000"/>
                            <attachment id="12615371" name="10015-trunk-v4.txt" size="3931" author="stack" created="Fri, 22 Nov 2013 19:17:39 +0000"/>
                            <attachment id="12615356" name="10015-trunk-v4.txt" size="3931" author="stack" created="Fri, 22 Nov 2013 17:31:49 +0000"/>
                            <attachment id="12615283" name="10015-trunk-v4.txt" size="3931" author="lhofhansl" created="Fri, 22 Nov 2013 06:38:29 +0000"/>
                            <attachment id="12615205" name="10015-trunk.txt" size="5540" author="lhofhansl" created="Thu, 21 Nov 2013 22:15:36 +0000"/>
                            <attachment id="12615048" name="TestLoad.java" size="3779" author="lhofhansl" created="Thu, 21 Nov 2013 01:24:25 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 20 Nov 2013 20:39:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>359627</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1pzvb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>359926</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>