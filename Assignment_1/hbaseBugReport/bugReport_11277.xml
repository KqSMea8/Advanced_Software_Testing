<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:21:42 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-11277/HBASE-11277.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-11277] RPCServer threads can wedge under high load</title>
                <link>https://issues.apache.org/jira/browse/HBASE-11277</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;This is with 0.98.0 in an insecure setup with 7u55 and 7u60. Under high load, RPCServer threads can wedge, fail to make progess, and consume 100% CPU time on a core indefinitely. &lt;/p&gt;

&lt;p&gt;Dumping threads, all threads are in BLOCKED or IN_NATIVE state. The IN_NATIVE threads are mostly in EPollArrayWrapper.epollWait or FileDispatcherImpl.read0. The number of threads found in FileDispatcherImpl.read0 correspond to the number of runaway threads expected based on looking at &apos;top&apos; output. These look like:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Thread 64758: (state = IN_NATIVE)
 - sun.nio.ch.FileDispatcherImpl.read0(java.io.FileDescriptor, long, int) @bci=0 (Compiled frame; information may be imprecise)
 - sun.nio.ch.SocketDispatcher.read(java.io.FileDescriptor, long, int) @bci=4, line=39 (Compiled frame)
 - sun.nio.ch.IOUtil.readIntoNativeBuffer(java.io.FileDescriptor, java.nio.ByteBuffer, long, sun.nio.ch.NativeDispatcher) @bci=114, line=223 (Compil
ed frame)
 - sun.nio.ch.IOUtil.read(java.io.FileDescriptor, java.nio.ByteBuffer, long, sun.nio.ch.NativeDispatcher) @bci=48, line=197 (Compiled frame)
 - sun.nio.ch.SocketChannelImpl.read(java.nio.ByteBuffer) @bci=234, line=379 (Compiled frame)
 - org.apache.hadoop.hbase.ipc.RpcServer.channelRead(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer) @bci=12, line=2224 (Compiled frame)
 - org.apache.hadoop.hbase.ipc.RpcServer$Connection.readAndProcess() @bci=509, line=1488 (Compiled frame)
 - org.apache.hadoop.hbase.ipc.RpcServer$Listener.doRead(java.nio.channels.SelectionKey) @bci=23, line=790 (Compiled frame)
 - org.apache.hadoop.hbase.ipc.RpcServer$Listener$Reader.doRunLoop() @bci=97, line=581 (Compiled frame)
 - org.apache.hadoop.hbase.ipc.RpcServer$Listener$Reader.run() @bci=1, line=556 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor.runWorker(java.util.concurrent.ThreadPoolExecutor$Worker) @bci=95, line=1145 (Interpreted frame)
 - java.util.concurrent.ThreadPoolExecutor$Worker.run() @bci=5, line=615 (Interpreted frame)
 - java.lang.Thread.run() @bci=11, line=745 (Interpreted frame)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12717602">HBASE-11277</key>
            <summary>RPCServer threads can wedge under high load</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="apurtell">Andrew Purtell</assignee>
                                    <reporter username="apurtell">Andrew Purtell</reporter>
                        <labels>
                    </labels>
                <created>Fri, 30 May 2014 18:23:11 +0000</created>
                <updated>Sat, 21 Feb 2015 23:35:17 +0000</updated>
                            <resolved>Sat, 31 May 2014 22:26:33 +0000</resolved>
                                    <version>0.96.2</version>
                    <version>0.98.3</version>
                                    <fixVersion>0.99.0</fixVersion>
                    <fixVersion>0.96.3</fixVersion>
                    <fixVersion>0.98.3</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>15</watches>
                                                                <comments>
                            <comment id="14014065" author="apurtell" created="Fri, 30 May 2014 18:28:58 +0000"  >&lt;p&gt;I&apos;d say the runaway loop is RpcServer.Connection#readAndProcess(). It is constructed with a top level while (true) loop so if ever we miss all of the coded exit conditions we will iterate forever.&lt;/p&gt;

&lt;p&gt;Line 1488 corresponds to a call to channelRead(). This is after &quot;We have read a length and we have read the preamble.  It is either the connection header or it is a request.&quot;  Given the observed behavior, I think we are going to the unconditional else clause where &quot;More to read still; go around again.&quot;, and going around, and around, and around.&lt;/p&gt;
</comment>
                            <comment id="14014070" author="apurtell" created="Fri, 30 May 2014 18:32:33 +0000"  >&lt;p&gt;This would seem to affect recent 0.96 and all 0.98 because git blame suggests relevant commits are &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8214&quot; title=&quot;Remove proxy and engine, rely directly on pb generated Service&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8214&quot;&gt;&lt;del&gt;HBASE-8214&lt;/del&gt;&lt;/a&gt; (d668363c) and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8952&quot; title=&quot;Missing error handling can cause RegionServer RPC thread to busy loop forever&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8952&quot;&gt;&lt;del&gt;HBASE-8952&lt;/del&gt;&lt;/a&gt; (b2c835d3). Perhaps &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8952&quot; title=&quot;Missing error handling can cause RegionServer RPC thread to busy loop forever&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8952&quot;&gt;&lt;del&gt;HBASE-8952&lt;/del&gt;&lt;/a&gt; didn&apos;t get it all. In this case the client&apos;s connection (YCSB) is still open and not making further progress.&lt;/p&gt;</comment>
                            <comment id="14014074" author="stack" created="Fri, 30 May 2014 18:36:04 +0000"  >&lt;p&gt;Any exceptions in logs to indicate an unusual exit along an infrequent code path?  (Good catch)&lt;/p&gt;</comment>
                            <comment id="14014077" author="apurtell" created="Fri, 30 May 2014 18:36:46 +0000"  >&lt;p&gt;Trying to debug this at TRACE will be prohibitively verbose and might not reproduce timing. To make forward progress I suggest an initial patch that replaces the top level unconditional loop in readAndProcess with something that will abort if we loop around beyond the point of sanity. This seems like a good thing to do regardless if even a red herring. What do you think &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; ?&lt;/p&gt;</comment>
                            <comment id="14014078" author="apurtell" created="Fri, 30 May 2014 18:38:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;Any exceptions in logs to indicate an unusual exit along an infrequent code path? (Good catch)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No exceptions. No ERRORs, no WARNs. &lt;/p&gt;</comment>
                            <comment id="14014087" author="apurtell" created="Fri, 30 May 2014 18:43:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;with something that will abort &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;To clarify, I mean the connection, not the server&lt;/p&gt;</comment>
                            <comment id="14014096" author="stack" created="Fri, 30 May 2014 18:50:27 +0000"  >&lt;p&gt;+1 on abort if mad loop.&lt;/p&gt;

&lt;p&gt;Can you repro Andrew?  Would be sweet to figure culprit.&lt;/p&gt;</comment>
                            <comment id="14014099" author="apurtell" created="Fri, 30 May 2014 18:51:42 +0000"  >&lt;p&gt;Yes I have a testbed and test scenario up that hits this reliably every time. Unfortunately it is remote and headless, but we can throw patches at it.&lt;/p&gt;</comment>
                            <comment id="14014315" author="apurtell" created="Fri, 30 May 2014 22:40:51 +0000"  >&lt;p&gt;I&apos;m running YCSB&apos;s workload A on a well endowed EC2 testbed with 1 master and 5 slaves (with 10GE networking) against a table preloaded with 100M entries, running 5 instances of the YCSB client with 10 threads each on 5 separate client servers. All servers have 32 vcores. The clients are attempting 10M ops at a target rate of 100,000 ops/second in aggregate. (I also tried an aggregate target of 250,000 ops/sec but this might have been triggering EC2 / kernel / networking issues.)&lt;/p&gt;

&lt;p&gt;I added a tiny bit of code to RpcServer.Reader#readAndProcess that throws an IOE if we go 100,000 times around the readAndProcess loop and it was triggered maybe 2-3 times on every server during a run. I then changed the limit to 10,000 with better results but many more exceptions observed, maybe ~20 per server per test run.  They look like:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;2014-05-30 20:58:40,637 WARN  [RpcServer.reader=3,port=8120] ipc.RpcServer: RpcServer.listener,port=8120: count of bytes read: 0
java.io.IOException: readAndProcess waited too long for message data: client=10.220.3.99 authMethod=SIMPLE connectionPreambleRead=true connectionHeaderRead=true data.remaining=624118 data.limit=644612
        at org.apache.hadoop.hbase.ipc.RpcServer$Connection.readAndProcess(RpcServer.java:1411)
        at org.apache.hadoop.hbase.ipc.RpcServer$Listener.doRead(RpcServer.java:790)
        at org.apache.hadoop.hbase.ipc.RpcServer$Listener$Reader.doRunLoop(RpcServer.java:581)
        at org.apache.hadoop.hbase.ipc.RpcServer$Listener$Reader.run(RpcServer.java:556)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
        at java.lang.Thread.run(Thread.java:745)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;readAndProcess probably isn&apos;t waiting very long. Readers are pulled from a pool to handle channels that become readable. In the message processing connection phase, they read 4 bytes of length and then want to read exactly those many additional bytes. I should confirm the channels are set up in blocking mode. The added IOEs short circuit the observed issue by closing the connection and forcing a retry after a certain point. Without doing that  one of the client (multiplexed) connections stops making progress for periods of 20-40 seconds. If we do drop the connection, the test sustains an average 100,000 ops/sec.&lt;/p&gt;

&lt;p&gt;Edit: Yes, the reader channels are nonblocking, see RpcServer.java:756:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
          channel.configureBlocking(&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So we will be spinning hard on channelRead if the remote stops sending data for a while in the middle of transmitting a message.&lt;/p&gt;</comment>
                            <comment id="14014330" author="stack" created="Fri, 30 May 2014 22:56:08 +0000"  >&lt;p&gt;Nice work &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;  IIRC, the put back on the Selector if all data not available is an under-exercised code-path. Your test seems to be falling in to this hole.  When looking at the putting back of the request on selector, I was surprised it ever worked.&lt;/p&gt;

&lt;p&gt;A small sleep would mean a Reader occupied for a while?  Would yield even work?  Yeah to async server (was going to work on that ...)&lt;/p&gt;</comment>
                            <comment id="14014335" author="apurtell" created="Fri, 30 May 2014 22:58:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;A small sleep would mean a Reader occupied for a while? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It just lessens the time we are soaking the CPU waiting for message data.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When looking at the putting back of the request on selector, I was surprised it ever worked.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Guess this is what should be fixed &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14014339" author="apurtell" created="Fri, 30 May 2014 23:03:12 +0000"  >&lt;p&gt;I also tried this change near line 1488:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        count = channelRead(channel, data);
-       &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (count &amp;lt; 0) {
+       &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (count &amp;lt;= 0) {
          &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; count;
        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (data.remaining() == 0) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which seems what we should be doing, but this alone doesn&apos;t resolve the issue.&lt;/p&gt;</comment>
                            <comment id="14014424" author="apurtell" created="Sat, 31 May 2014 00:38:49 +0000"  >&lt;p&gt;This seems to work:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
diff --git hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java
index d7be74a..778e853 100644
--- hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java
+++ hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java
@@ -1506,8 +1506,8 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class RpcServer &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; RpcServerInterface {
           &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!headerRead) {
             &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
           }
-        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
-          &lt;span class=&quot;code-comment&quot;&gt;// More to read still; go around again.
&lt;/span&gt;+        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (count &amp;gt; 0) {
+          &lt;span class=&quot;code-comment&quot;&gt;// We got some data and there is more to read still; go around again.
&lt;/span&gt;           &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isTraceEnabled()) LOG.trace(&lt;span class=&quot;code-quote&quot;&gt;&quot;Continue to read &lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt; of data &quot;&lt;/span&gt; 
           &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
         }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14014440" author="apurtell" created="Sat, 31 May 2014 01:06:21 +0000"  >&lt;p&gt;10 runs out of 10 are ok at 100,000/ops/sec up to ~250,000/ops/sec. This issue is fixed.&lt;/p&gt;</comment>
                            <comment id="14014448" author="apurtell" created="Sat, 31 May 2014 01:20:10 +0000"  >&lt;p&gt;A potential future improvement in this area is to track connection state with an enum and switch to state specific handler blocks accordingly. I hacked around with that a bit today but prefer to fix the issue at hand and maybe do that later.&lt;/p&gt;</comment>
                            <comment id="14014452" author="yuzhihong@gmail.com" created="Sat, 31 May 2014 01:29:07 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="14014456" author="apurtell" created="Sat, 31 May 2014 01:43:42 +0000"  >&lt;p&gt;Thanks Ted. What do you think &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; ?&lt;/p&gt;</comment>
                            <comment id="14014497" author="hadoopqa" created="Sat, 31 May 2014 03:38:42 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12647738/HBASE-11277.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12647738/HBASE-11277.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12647738&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/9656//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14014504" author="stack" created="Sat, 31 May 2014 04:12:31 +0000"  >&lt;p&gt;I think proof is in the pudding &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;  If it is working in your nice setup, commit.&lt;/p&gt;

&lt;p&gt;I think you tripped over this because you have low friction going on.  It has been lurking and probably bitten us multiple times in the past but you figured it.&lt;/p&gt;</comment>
                            <comment id="14014545" author="lhofhansl" created="Sat, 31 May 2014 06:45:16 +0000"  >&lt;p&gt;Nice find.&lt;/p&gt;

&lt;p&gt;Going by the documentation and all the examples I find on the web this fix would not be correct.&lt;/p&gt;

&lt;p&gt;According to the doc on ReadableByteChannel it&apos;s possible that read returns 0 and is still not finished with the stream (only -1 indicates EOS). Strange that this continues to return 0, maybe that happens when the other side disconnected...? (in that case I would have expected EOS as well or an exception, though). Or maybe no space left in the buffer. Or maybe the buffer is not correctly reset in all cases.&lt;/p&gt;

&lt;p&gt;I do find the RpcServer extremely hard to read.&lt;/p&gt;

&lt;p&gt;+1 on fixing this with attached patch as the experiment bears this out. There might be more to this, though.&lt;/p&gt;</comment>
                            <comment id="14014719" author="apurtell" created="Sat, 31 May 2014 17:25:13 +0000"  >&lt;p&gt;Agreed with your points &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;. The other side is not disconnected and there is space in the buffer. My understanding of the code after this change is now in the data phase as long as we have read &amp;gt; 0 we will loop back to do another immediate read call, but otherwise we will exit handling for the connection and move on. We won&apos;t come back to the connection again until it is selectable for reading again. In this sense I think the fix is correct. Without the fix when a channel is selectable we go to read from it, and spin on reads until the entire message is transmitted no matter how many times we spin in a hot loop. With the fix when a channel is selectable we go to read from it but then set it aside when read returns 0 for useful work. &lt;/p&gt;</comment>
                            <comment id="14014727" author="apurtell" created="Sat, 31 May 2014 17:53:07 +0000"  >&lt;p&gt;I am going to commit this in a few hours to roll a new RC, unless objection.&lt;/p&gt;</comment>
                            <comment id="14014842" author="apurtell" created="Sat, 31 May 2014 22:26:34 +0000"  >&lt;p&gt;Committed to 0.96+. Thanks for the reviews!&lt;/p&gt;</comment>
                            <comment id="14014853" author="hudson" created="Sat, 31 May 2014 22:49:34 +0000"  >&lt;p&gt;FAILURE: Integrated in hbase-0.96 #404 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.96/404/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.96/404/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11277&quot; title=&quot;RPCServer threads can wedge under high load&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11277&quot;&gt;&lt;del&gt;HBASE-11277&lt;/del&gt;&lt;/a&gt; RpcServer threads can wedge under high load (apurtell: rev 0c374ceea9374c4743a427c7029335a975ad3f14)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14014871" author="hudson" created="Sun, 1 Jun 2014 00:39:43 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.98 #324 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98/324/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98/324/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11277&quot; title=&quot;RPCServer threads can wedge under high load&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11277&quot;&gt;&lt;del&gt;HBASE-11277&lt;/del&gt;&lt;/a&gt; RpcServer threads can wedge under high load (apurtell: rev 7257dbc58fe27ec3b1b573707bb0a8f6fde3d462)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14014875" author="hudson" created="Sun, 1 Jun 2014 00:57:31 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.96-hadoop2 #279 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.96-hadoop2/279/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.96-hadoop2/279/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11277&quot; title=&quot;RPCServer threads can wedge under high load&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11277&quot;&gt;&lt;del&gt;HBASE-11277&lt;/del&gt;&lt;/a&gt; RpcServer threads can wedge under high load (apurtell: rev 0c374ceea9374c4743a427c7029335a975ad3f14)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14014883" author="hudson" created="Sun, 1 Jun 2014 01:32:16 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #5163 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/5163/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/5163/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11277&quot; title=&quot;RPCServer threads can wedge under high load&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11277&quot;&gt;&lt;del&gt;HBASE-11277&lt;/del&gt;&lt;/a&gt; RpcServer threads can wedge under high load (apurtell: rev 7f2f7c23a7bd274925f6438d316d8e2e8d8709d6)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14014899" author="hudson" created="Sun, 1 Jun 2014 03:43:25 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.98-on-Hadoop-1.1 #306 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/306/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/306/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11277&quot; title=&quot;RPCServer threads can wedge under high load&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11277&quot;&gt;&lt;del&gt;HBASE-11277&lt;/del&gt;&lt;/a&gt; RpcServer threads can wedge under high load (apurtell: rev 7257dbc58fe27ec3b1b573707bb0a8f6fde3d462)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/ipc/RpcServer.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14015018" author="lhofhansl" created="Sun, 1 Jun 2014 17:16:27 +0000"  >&lt;p&gt;Still delay on apache email?&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;, agree with what you said.&lt;/p&gt;</comment>
                            <comment id="14015447" author="nkeywal" created="Mon, 2 Jun 2014 15:04:27 +0000"  >&lt;p&gt;late +1, I also think that the patch is correct. &lt;br/&gt;
I&apos;m having a look at this code path, I plan to propose some changes soon.&lt;/p&gt;</comment>
                            <comment id="14015552" author="nkeywal" created="Mon, 2 Jun 2014 16:55:53 +0000"  >&lt;p&gt;This said, I wonder if data/connectionPreambleRead should not be volatile? What are our guarantees here?&lt;/p&gt;</comment>
                            <comment id="14015586" author="apurtell" created="Mon, 2 Jun 2014 17:14:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;This said, I wonder if data/connectionPreambleRead should not be volatile? What are our guarantees here?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As I read the code only one thread is handling a connection at a time. Readers are assigned channel selectors in round robin fashion by an acceptor thread servicing the listener socket (that thread is the &apos;Listener&apos;). There is only one of these running per RpcServer. Readers service their selectable channels one at a time. It looks to me like readAndProcess is called serially for each connection.&lt;/p&gt;</comment>
                            <comment id="14015641" author="nkeywal" created="Mon, 2 Jun 2014 17:49:54 +0000"  >&lt;p&gt;Yeah, you&apos;re right. Thanks Andrew.&lt;/p&gt;</comment>
                            <comment id="14020498" author="apurtell" created="Fri, 6 Jun 2014 22:59:59 +0000"  >&lt;p&gt;I found the root platform issue on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11306&quot; title=&quot;Client connection starvation issues under high load on Amazon EC2&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11306&quot;&gt;HBASE-11306&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14331304" author="enis" created="Sat, 21 Feb 2015 23:35:17 +0000"  >&lt;p&gt;Closing this issue after 0.99.0 release. &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12647738" name="HBASE-11277.patch" size="788" author="apurtell" created="Sat, 31 May 2014 01:07:30 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 30 May 2014 18:36:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>395806</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 42 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1w57b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>395923</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>