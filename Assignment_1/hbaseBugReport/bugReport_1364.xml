<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:52:54 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-1364/HBASE-1364.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-1364] [performance] Distributed splitting of regionserver commit logs</title>
                <link>https://issues.apache.org/jira/browse/HBASE-1364</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1008&quot; title=&quot;[performance] The replay of logs on server crash takes way too long&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1008&quot;&gt;&lt;del&gt;HBASE-1008&lt;/del&gt;&lt;/a&gt; has some improvements to our log splitting on regionserver crash; but it needs to run even faster.&lt;/p&gt;

&lt;p&gt;(Below is from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1008&quot; title=&quot;[performance] The replay of logs on server crash takes way too long&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1008&quot;&gt;&lt;del&gt;HBASE-1008&lt;/del&gt;&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In bigtable paper, the split is distributed. If we&apos;re going to have 1000 logs, we need to distribute or at least multithread the splitting.&lt;/p&gt;

&lt;p&gt;1. As is, regions starting up expect to find one reconstruction log only. Need to make it so pick up a bunch of edit logs and it should be fine that logs are elsewhere in hdfs in an output directory written by all split participants whether multithreaded or a mapreduce-like distributed process (Lets write our distributed sort first as a MR so we learn whats involved; distributed sort, as much as possible should use MR framework pieces). On startup, regions go to this directory and pick up the files written by split participants deleting and clearing the dir when all have been read in. Making it so can take multiple logs for input, can also make the split process more robust rather than current tenuous process which loses all edits if it doesn&apos;t make it to the end without error.&lt;br/&gt;
2. Each column family rereads the reconstruction log to find its edits. Need to fix that. Split can sort the edits by column family so store only reads its edits.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12424367">HBASE-1364</key>
            <summary>[performance] Distributed splitting of regionserver commit logs</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="khemani">Prakash Khemani</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Fri, 1 May 2009 05:03:28 +0000</created>
                <updated>Fri, 20 Nov 2015 13:01:58 +0000</updated>
                            <resolved>Mon, 18 Apr 2011 17:18:36 +0000</resolved>
                                                    <fixVersion>0.92.0</fixVersion>
                                    <component>Coprocessors</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>17</watches>
                                            <timeestimate seconds="0">0h</timeestimate>
                            <timespent seconds="28800">8h</timespent>
                                            <aggregatetimeoriginalestimate seconds="7200">2h</aggregatetimeoriginalestimate>
                                        <aggregatetimeremainingestimate seconds="0">0h</aggregatetimeremainingestimate>
                                        <aggregatetimespent seconds="36000">10h</aggregatetimespent>
                                    <comments>
                            <comment id="12735206" author="streamy" created="Fri, 24 Jul 2009 23:30:48 +0000"  >&lt;p&gt;Target for 0.21 so we make sure to talk about it at the hackathon.&lt;/p&gt;</comment>
                            <comment id="12741032" author="jdcryans" created="Sun, 9 Aug 2009 06:10:34 +0000"  >&lt;p&gt;The WAL situation currently looks like this:&lt;/p&gt;

&lt;p&gt;A region server has a default maximum of 30 log files.&lt;br/&gt;
A log file is synced every 10 seconds or when it reaches 100 entries.&lt;br/&gt;
A log file is rolled when it gets to 95% of a block size.&lt;/p&gt;

&lt;p&gt;What&apos;s happening during a log split is:&lt;br/&gt;
Until all log files are split&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;3 readers read one log each into memory&lt;/li&gt;
	&lt;li&gt;3 writers output to differents oldlogfile.log&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That means that in the worst case 10 iterations will be done, a maximum of 182MB of data will be put into memory &lt;br/&gt;
during the reading phase and a maximum of 1824MB will pass through memory... probably getting us some GC pauses.&lt;br/&gt;
Also supposing that thefailing RS had 100 regions and only 10 of them had edits, you hold off 90 regions for nothing. The only&lt;br/&gt;
thing holding us is that we don&apos;t have any knowledge about which regions are in which logs.&lt;/p&gt;

&lt;p&gt;One proposition: &lt;br/&gt;
Make that every hlog publishes in ZK its location under every region&apos;s folder and in its own folder. (both new in 0.21)&lt;br/&gt;
When a RS crashes, just reassign the whole thing right away.&lt;br/&gt;
When a RS opens a new region, it should check if there&apos;s any hlog in the region&apos;s ZK folder.&lt;br/&gt;
If so, it should require other RS to help it split the logs and watch the logs (something wise).&lt;br/&gt;
Log splitting :&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Take a lock on the hlog folder.&lt;/li&gt;
	&lt;li&gt;Split the log in as many files as there are regions and put the files in the region&apos;s folder in HDFS.&lt;/li&gt;
	&lt;li&gt;oldlogfile.log should now have a sequence id.&lt;/li&gt;
	&lt;li&gt;Finally delete the hlog znodes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When all logs are split for a region, the RS opening it opens file by file the logs (in order) and runs them.&lt;/p&gt;

&lt;p&gt;When a region server tries to log split and a lock is held, it should watch it.&lt;/p&gt;</comment>
                            <comment id="12741144" author="jdcryans" created="Sun, 9 Aug 2009 21:18:42 +0000"  >&lt;p&gt;New similar solution after discussing it at hackathon.&lt;/p&gt;

&lt;p&gt;The map of regions in each HLog should be a file written in the same folder on HDFS as its hlog.&lt;br/&gt;
When a region server crashes, the master does 2 things:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Read every map of regions, see which hlogs has which region&apos;s edits, open&lt;br/&gt;
   all the regions and pass a message to those that have edits to tell them where to look for them.&lt;/li&gt;
	&lt;li&gt;Start a distributed sorting. For every hlog, output a sorted file by region name with the index to seek to for each region.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;When a RS opens a region, it waits for all the sorted files to be available and replays the edits in order.&lt;br/&gt;
The master deletes the hlog folders when all regions that had edits are opened.&lt;/p&gt;</comment>
                            <comment id="12741509" author="stack" created="Mon, 10 Aug 2009 19:44:57 +0000"  >&lt;p&gt;I wonder if we could add list of regions to end of hlog as metadata?   There might be other useful metadata we&apos;d want to add to an hlog.   Currenlty hlog is a sequencefile.  SequenceFile takes metadata but only at its head which is no good to us.  Maybe we can hack around an hfile-like thing to use here?&lt;/p&gt;</comment>
                            <comment id="12741966" author="erikholstad@gmail.com" created="Tue, 11 Aug 2009 17:13:33 +0000"  >&lt;p&gt;Yeah, would be nice to have our own file format for this, but I thought JD said something about keeping two different files and not writing the regions effected in the same file, cause we would append to two files right and not writing it out afterwards?&lt;/p&gt;</comment>
                            <comment id="12754628" author="stack" created="Sat, 12 Sep 2009 22:49:03 +0000"  >&lt;p&gt;Part of master rewrite would include the running of the distributed split.  Lets coordinate.&lt;/p&gt;</comment>
                            <comment id="12791694" author="jdcryans" created="Thu, 17 Dec 2009 00:22:13 +0000"  >&lt;p&gt;My proposition optimizes regions that aren&apos;t in any HLog file, mgilbert on the IRC was mentioning that a RS failure took a long time to recover because many flushed edits were processed because the files had un-flushed edits from other regions. We should probably also look out for that case.&lt;/p&gt;</comment>
                            <comment id="12848858" author="streamy" created="Tue, 23 Mar 2010 19:11:10 +0000"  >&lt;p&gt;JD, Stack.  Where do we stand on this?  We&apos;ve started talks on this topic here at FB... seems like there&apos;s cross-over with work being done on replication?&lt;/p&gt;</comment>
                            <comment id="12848861" author="jdcryans" created="Tue, 23 Mar 2010 19:17:14 +0000"  >&lt;p&gt;I think the crossover could be about publishing which HLogs a RS is holding. Other than that I&apos;m not sure about others.&lt;/p&gt;</comment>
                            <comment id="12848890" author="streamy" created="Tue, 23 Mar 2010 20:20:56 +0000"  >&lt;p&gt;Yeah, I was just thinking about the use of ZK could be very similar.  Will mull back over previous comments and think more on this.&lt;/p&gt;</comment>
                            <comment id="12849082" author="stack" created="Wed, 24 Mar 2010 06:57:38 +0000"  >&lt;p&gt;I was thinking that we could use a coprocessor to do log sort/split.  One thing that needs addressing is that each Store in a Region reads the whole log itself.  Seems like reading of the old edits should be done once at region level (I don&apos;t think this would be hard to do).  Other things, in BT paper, they talk of regions asking for edits after they come back online.   First, the region is already online again before log split starts &amp;#8211; maybe its already taking on writes?  &amp;#8211; and second, somehow the region knew what logs they want to get edits from (Recheck paper. I&apos;m pulling from rusty memory).&lt;/p&gt;</comment>
                            <comment id="12849086" author="larsgeorge" created="Wed, 24 Mar 2010 07:10:12 +0000"  >&lt;p&gt;@stack: I had the same suggestion using Coprocessors back when we discussed this initially. Andrew said that it would not make sense because CP&apos;s can only access local data, not random DFS file because of security concerns. I gave up on that point knowing I had much less insight into how things work. But there seems to be more interest apparently &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The presorting of the log into pieces per region was also discussed here (or a related issue), one idea was to use Zookeeper to stick in the ranges to be processed and RS&apos;s working on those distributed until they all report back that sorting has been done. Then the regions can read their edits locally. The other notion here (pretty sure it was JD) was that index file kept with the log that would give us know knowledge which regions are dirty and therefore unedited regions can go live right away. Starting to accept writes before the region is up seems like a doable technique as well. Not sure about the implications (say what if they write with no WAL - or even with WAL for that matter I guess - and you need to flush while the region is still in that &quot;replay&quot; state etc.)&lt;/p&gt;

&lt;p&gt;I cannot recall though the BT approach you refer to though, i.e. the regions are already online while log splitting. It sounded like they do that distributed split and then have the regions read those edits. I need to read this again it seems.&lt;/p&gt;

&lt;p&gt;But seems like there is a lot of room for improvement there. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12851305" author="apurtell" created="Tue, 30 Mar 2010 08:12:45 +0000"  >&lt;p&gt;ZK 3.3.0 claims to have a worked distributed queue recipe implementation. Hand out logs to regionservers to split via this primitive.&lt;/p&gt;

&lt;p&gt;Build the logic into core, no need for CPs here (and there are security problems with that anyway).&lt;/p&gt;</comment>
                            <comment id="12864986" author="posix4e" created="Fri, 7 May 2010 01:13:24 +0000"  >&lt;p&gt;People have asked about my design so I thought I would give a quick status report and what I am doing.&lt;/p&gt;

&lt;p&gt;Design:&lt;br/&gt;
    When the HMaster server calls splitLog, under the hood, it is just enqueing a znode as SEQUENTIAL PERSISTANT to build a quick queue. It then blocks until that queue is drained.&lt;br/&gt;
    RegionServer now have a LogSplitter thread, who is responsible for doing the leg work of splitting a log. They watch the znode queue, so when an update happens, and they are not doing work, they will attempt to claim responsibility for working on that log.&lt;br/&gt;
    RegionServers take responsibility by writing an ephemeral node under a seperate znode, which acts as a bnar&lt;/p&gt;



&lt;p&gt;Status:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;I need to rejigger some stuff to handle an entire cluster loosing power(kill -9)&lt;/li&gt;
	&lt;li&gt;More testing infrastructure is needed&lt;/li&gt;
	&lt;li&gt;I am thinking about incorporating &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2437&quot; title=&quot;Refactor HLog splitLog&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2437&quot;&gt;&lt;del&gt;HBASE-2437&lt;/del&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12864987" author="posix4e" created="Fri, 7 May 2010 01:14:30 +0000"  >&lt;p&gt;Sorry I got cut off before finishing that comment. could someone please remove it?&lt;/p&gt;</comment>
                            <comment id="12864989" author="posix4e" created="Fri, 7 May 2010 01:19:02 +0000"  >&lt;p&gt;People have asked about my design so I thought I would give a quick status report and what I am doing.&lt;br/&gt;
Design:&lt;br/&gt;
When the HMaster server calls splitLog, under the hood, it is just enqueing a znode as SEQUENTIAL PERSISTANT to build a quick queue. It then blocks until that queue is drained.&#8232;&lt;br/&gt;
RegionServer now have a LogSplitter thread, who is responsible for doing the leg work of splitting a log. They watch the znode queue, so when an update happens, and they are not doing work, they will attempt to claim responsibility for working on that log.&#8232;&lt;br/&gt;
RegionServers take responsibility by writing an ephemeral node under a separate znode, which acts as a lock, preventing other regionservers from attempting to split that same log. Technically this could still happen if a regionserver gc so long that its ephemeral node expires. In which case we rely on the fact that logsplits are idempotent.&lt;br/&gt;
The resultant per region logs are named sn_oldlog.log where the sn is the first sequence number in that log.  (Maybe it should be the last). When it is done, i delete the queue entry and then the lock.&lt;br/&gt;
The main remaining issue, is that if the whole cluster goes down, the regionserver threads are not started up until they are associated with a master so the logsplitter never runs, and the master stays blocked waiting for the queue to drain. &lt;br/&gt;
Status:&lt;br/&gt;
	&#9642;	I need to rejigger some stuff to handle an entire cluster loosing power(kill -9)&lt;br/&gt;
	&#9642;	More testing infrastructure is needed&lt;br/&gt;
	&#9642;	I am thinking about incorporating &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2437&quot; title=&quot;Refactor HLog splitLog&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2437&quot;&gt;&lt;del&gt;HBASE-2437&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12864991" author="ryanobjc" created="Fri, 7 May 2010 01:31:50 +0000"  >&lt;p&gt;this generally looks really good, sounds like zk has really helped us a lot.&lt;/p&gt;
</comment>
                            <comment id="12865363" author="saint.ack@gmail.com" created="Sat, 8 May 2010 00:23:54 +0000"  >
&lt;p&gt;Looks great&lt;/p&gt;


&lt;p&gt;On May 6, 2010, at 6:20 PM, &quot;Alex Newman (JIRA)&quot; &amp;lt;jira@apache.org&amp;gt;  &lt;/p&gt;

</comment>
                            <comment id="12865366" author="posix4e" created="Sat, 8 May 2010 00:38:25 +0000"  >&lt;p&gt;So I tested just launching the LogSplitter thread early and it works just fine.  It required putting more information into zk. Basically when the logSplitter is finished splitting it drops the path of the split made into zookeeper, so the master can receive it, when they are all done. &lt;/p&gt;

&lt;p&gt;Stack can you remove my earlier comments.&lt;/p&gt;</comment>
                            <comment id="12865395" author="stack" created="Sat, 8 May 2010 04:08:08 +0000"  >&lt;p&gt;You want me to delete &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1364?focusedCommentId=12864989&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12864989?&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-1364?focusedCommentId=12864989&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12864989?&lt;/a&gt;  Whats wrong w/ it?  Ain&apos;t it better to have the painful history all there out in the open rather than have folks get the impression that you some kinda ultra-human who just makes solutions absent supposition, trial and error! (You can&apos;t remove it yourself?  You are a contrib.  Maybe only admin can remove stuff?)&lt;/p&gt;</comment>
                            <comment id="12867020" author="stack" created="Thu, 13 May 2010 04:41:58 +0000"  >&lt;p&gt;Moved from 0.21 to 0.22 just after merge of old 0.20 branch into TRUNK.&lt;/p&gt;</comment>
                            <comment id="12874724" author="tlipcon" created="Wed, 2 Jun 2010 18:32:41 +0000"  >&lt;p&gt;Sorry, just finally got time to look at this one &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Some questions about the design:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;What happens if the regionserver crashes in the middle of splitting a log? Who is monitoring its znode so that the log split gets re-enqueued?&lt;/li&gt;
	&lt;li&gt;You mention that log splitting is idempotent, however, it&apos;s not 100% true since the last step of log splitting is to remove the old logs. How will you address this issue? eg RS A starts splitting, gets almost done, goes into GC pause. RS B starts splitting. RS A wakes up and removes logs. RS B gets missing block errors, etc.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12875354" author="posix4e" created="Thu, 3 Jun 2010 23:19:15 +0000"  >&lt;p&gt;I think we need some more tests. Anyone got any good ideas on the whole multiple simulations splits writing to the same region tests?&lt;/p&gt;</comment>
                            <comment id="12875355" author="posix4e" created="Thu, 3 Jun 2010 23:22:35 +0000"  >&lt;p&gt;So I posted the first patch. I think we need to so some magic in regards to multiple regionservers writing logs to the same region still. &lt;/p&gt;</comment>
                            <comment id="12875494" author="posix4e" created="Fri, 4 Jun 2010 05:55:00 +0000"  >&lt;p&gt;v.v Todd&apos;s comments&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The node isn&apos;t deleted til after the log is completed. We use a ephemeral lock to prevent contention&lt;/li&gt;
	&lt;li&gt;B is testable so let&apos;s test it!&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Any other tetst?&lt;/p&gt;</comment>
                            <comment id="12875795" author="posix4e" created="Fri, 4 Jun 2010 23:38:23 +0000"  >&lt;p&gt;This allows multiple splitters to split to the same region.&lt;/p&gt;</comment>
                            <comment id="12876364" author="posix4e" created="Mon, 7 Jun 2010 19:00:27 +0000"  >&lt;p&gt;So as I understand it, processServerShutdown always runs one split at a time due to locking issues. I would prefer if we were to relax this requirement that it be done in a separate jira. Any objections? What else should I do here to move things forward. I think the only thing that needs to be done is &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Add some more tests (suggestions)&lt;/li&gt;
	&lt;li&gt;switch all calls from splitLog to distributedSplitLog&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12876407" author="tlipcon" created="Mon, 7 Jun 2010 20:37:17 +0000"  >&lt;p&gt;How hard would it be to refactor the log splitting to be configurable which algorithm to use? eg have a LogSplitter interface with MasterLogSplitter, DistributedLogSplitter, perhaps MapReduceLogSplitter if someone wants to write that one?&lt;/p&gt;</comment>
                            <comment id="12876415" author="ryanobjc" created="Mon, 7 Jun 2010 20:47:56 +0000"  >&lt;p&gt;for this JIRA we should do the inline splitting, which means waiting on the distributed split to finish before going to the next ProcessServerShutdown item on the queue.&lt;/p&gt;

&lt;p&gt;It isnt just as simple as saying &apos;just make it parallel&apos; since there is an order to these TODO items and there are a number of different types of work items on the queue.  This should be addressed in the next JIRA.&lt;/p&gt;</comment>
                            <comment id="12876421" author="posix4e" created="Mon, 7 Jun 2010 21:10:16 +0000"  >&lt;p&gt;Todd: not hard at all. I exposed it as a different api, but if we wish we could have it be conf driven. I could see scenarios where the same cluster could use different types of splitting for different things &lt;b&gt;shrug&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Ryan: I totally agree&lt;/p&gt;

&lt;p&gt;Is their any reason why we are targeting 22.0 vs 21.0 for this patch?&lt;/p&gt;</comment>
                            <comment id="12876425" author="tlipcon" created="Mon, 7 Jun 2010 21:14:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is their any reason why we are targeting 22.0 vs 21.0 for this patch?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My personal opinion is that this should not be default in 0.21, since it doesn&apos;t quite fit with the current priorities (durability, stability, correctness) and may actually introduce new complicated bugs in the above. The most carefully programmed distributed operation is usually buggier than the least carefully programmed single-node operation &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Having it be configurable seems like a great thing for 0.21 so people can try it out, and if it seems bug-free we can make it default in the next release. Of course that&apos;s just my opinion, and if others disagree, happy to be outvoted.&lt;/p&gt;</comment>
                            <comment id="12876427" author="posix4e" created="Mon, 7 Jun 2010 21:20:03 +0000"  >&lt;p&gt;todd: sounds about right. &lt;/p&gt;</comment>
                            <comment id="12884396" author="posix4e" created="Thu, 1 Jul 2010 20:10:52 +0000"  >&lt;p&gt;Going to put some work in to get this to reapply to trun&lt;/p&gt;</comment>
                            <comment id="12891424" author="hbasereviewboard" created="Fri, 23 Jul 2010 00:35:23 +0000"  >&lt;p&gt;Message from: &quot;Alex Newman&quot; &amp;lt;newalex@cloudera.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/370/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This build on the previous work. It does some smarter stuff with testing and now splitting is configurable.&lt;/p&gt;


&lt;p&gt;This addresses bug hbase-1364.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/hbase-1364&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/hbase-1364&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/HConstants.java c77ebf5 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java f251d54 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/LogSplitter.java PRE-CREATION &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLog.java 5688c03 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java 8225178 &lt;br/&gt;
  src/main/resources/hbase-default.xml e3a9669 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/wal/BaseTestHLogSplit.java PRE-CREATION &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/wal/DistributedTestHLog.java PRE-CREATION &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/wal/DistributedTestHLogSplit.java PRE-CREATION &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/wal/DistributedTestHLogSplitSkipErrors.java PRE-CREATION &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/wal/DistributedTestLogRolling.java PRE-CREATION &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLog.java ad8f9e5 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogSplit.java 908633e &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogSplitSkipErrors.java PRE-CREATION &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestLogActionsListener.java 776d78c &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestLogRolling.java 9eae4b4 &lt;br/&gt;
  src/test/resources/hbase-site.xml 3c0601a &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/370/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;ran on our private hudson&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Alex&lt;/p&gt;

</comment>
                            <comment id="12891747" author="hbasereviewboard" created="Fri, 23 Jul 2010 19:15:49 +0000"  >&lt;p&gt;Message from: &quot;Jean-Daniel Cryans&quot; &amp;lt;jdcryans@apache.org&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/370/#review464&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#review464&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;First pass on this patch. Lots of cleanup that needs to be done, and it&apos;s a bit hard to follow the flow of events without any clear documentation that gives an overview of distributed splitting. Nothing big, just some use cases that could be put in the class javadoc of LogSplitter?&lt;/p&gt;


&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1903&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1903&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I&apos;m sure you have a good reason of putting that there, but at least one issue I&apos;m seeing is that this code is also in init() (which will be run just after that) and it&apos;s almost the same thing.&lt;/p&gt;

&lt;p&gt;    Also, fs.automatic.close is handled by the ShutdownHook class, you shouldn&apos;t be setting it.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1904&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1904&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Fix those long lines.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/LogSplitter.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1905&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1905&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    rogue &quot;q&quot;&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/LogSplitter.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1914&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1914&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Why are those static?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/LogSplitter.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1906&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1906&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    remove that white space and all the others in that class at the same place&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/LogSplitter.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1922&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1922&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    both process and run call this method, can there be a race?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/LogSplitter.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1923&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1923&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    don&apos;t need to declare this here&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/LogSplitter.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1907&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1907&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    What does that mean?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/LogSplitter.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1918&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1918&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    why two lines?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLog.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1908&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1908&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    rogue &quot;b&quot;&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLog.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1909&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1909&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    ?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1917&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1917&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    confusing name when looking at what&apos;s returned, fix that&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1921&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1921&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Why two lines for nodes? Also, if nodes is null for any reason, won&apos;t that throw an NPE?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1924&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1924&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;     most of that stuff can be removed and put into the &lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1928&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1928&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    so you create a lock with data=null?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1930&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1930&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Or you were just disconnected, could mean a lot of things right?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1915&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1915&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    JavaBean convention, don&apos;t start parameters&apos; name with upper case&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1916&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1916&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    So we log here and we log in LogSplitter, remove one of them?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1933&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1933&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    again, name confusing WRT returned type&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1931&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1931&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    same comment&lt;/p&gt;




&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1934&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1934&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    don&apos;t start with upper case&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1938&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1938&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Usually ppl check that the other way around&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1936&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1936&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    use HConstants.EMPTY_BYTE_ARRAY&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1940&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1940&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    third ERROR line if splitPath is null, keep only one&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1943&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1943&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    pull the next lines on this one with a tertiary operator&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1941&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1941&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    EMPTY_BYTE_ARRAY&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1942&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1942&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Use Bytes.toBytes&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1944&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1944&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Use Bytes.toString&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/wal/DistributedTestHLog.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1911&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1911&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    copy pasta, we&apos;re in 2010 now! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/tongue.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/wal/DistributedTestHLog.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1910&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1910&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    clean&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestHLogSplit.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1912&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1912&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    white spaces...&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/wal/TestLogRolling.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/370/#comment1913&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#comment1913&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    clean&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jean-Daniel&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12891787" author="hbasereviewboard" created="Fri, 23 Jul 2010 20:48:29 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/370/#review467&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#review467&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;Hey Alex, this is looking good.  The master rewrite branch has a refactoring of ZooKeeperWrapper and general ZK usage inside HBase that conflicts with this pretty significantly.&lt;/p&gt;

&lt;p&gt;Do you think you could pull the new methods and classes nested in ZooKeeperWrapper into a separate class of static methods?  If you need the instantiated instance of ZKW, pass it in as the first argument to the static methods?  That will make my life WAY easier when I have to merge the branch back into trunk.&lt;/p&gt;

&lt;p&gt;Also gives an opportunity to have a class comment in the new class explaining the overall usage of zk.&lt;/p&gt;

&lt;p&gt;Stuff like the names of the nodes can be left in the instantiated ZKW class since it makes sense to pull those in from the confs on instantiation.&lt;/p&gt;

&lt;p&gt;Cool?  Let me know if you want an example.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12891797" author="hbasereviewboard" created="Fri, 23 Jul 2010 21:10:53 +0000"  >&lt;p&gt;Message from: &quot;Alex Newman&quot; &amp;lt;newalex@cloudera.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-23 13:41:09, Jonathan Gray wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Hey Alex, this is looking good.  The master rewrite branch has a refactoring of ZooKeeperWrapper and general ZK usage inside HBase that conflicts with this pretty significantly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Do you think you could pull the new methods and classes nested in ZooKeeperWrapper into a separate class of static methods?  If you need the instantiated instance of ZKW, pass it in as the first argument to the static methods?  That will make my life WAY easier when I have to merge the branch back into trunk.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Also gives an opportunity to have a class comment in the new class explaining the overall usage of zk.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Stuff like the names of the nodes can be left in the instantiated ZKW class since it makes sense to pull those in from the confs on instantiation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Cool?  Let me know if you want an example.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;sounds good&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Alex&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/370/#review467&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#review467&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12891799" author="hbasereviewboard" created="Fri, 23 Jul 2010 21:12:21 +0000"  >&lt;p&gt;Message from: &quot;Alex Newman&quot; &amp;lt;newalex@cloudera.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-23 12:01:53, Jean-Daniel Cryans wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; First pass on this patch. Lots of cleanup that needs to be done, and it&apos;s a bit hard to follow the flow of events without any clear documentation that gives an overview of distributed splitting. Nothing big, just some use cases that could be put in the class javadoc of LogSplitter?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ll add the story and get these changes in.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Alex&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/370/#review464&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/370/#review464&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12983821" author="posix4e" created="Wed, 19 Jan 2011 18:11:49 +0000"  >&lt;p&gt;Updated patch v.v &lt;a href=&quot;https://review.cloudera.org/r/1472/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://review.cloudera.org/r/1472/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12983823" author="posix4e" created="Wed, 19 Jan 2011 18:16:01 +0000"  >&lt;p&gt;After rereading this jira I realized I should probably add some additional javadoc to the patch. Shouldn&apos;t be to bad to find time sometime this week.&lt;/p&gt;</comment>
                            <comment id="13005820" author="apurtell" created="Fri, 11 Mar 2011 20:35:35 +0000"  >&lt;p&gt;Cancelling patch, stale.&lt;/p&gt;</comment>
                            <comment id="13005821" author="streamy" created="Fri, 11 Mar 2011 20:39:36 +0000"  >&lt;p&gt;FYI, Prakash Khemani is working on this right now.  Not sure when a patch will be up but it&apos;s looking good so far.  It is built on top of the new ZK stuff in 0.90 and above.&lt;/p&gt;</comment>
                            <comment id="13005822" author="posix4e" created="Fri, 11 Mar 2011 20:39:43 +0000"  >&lt;p&gt;Yea sorry sorry about that. Are you taking a different approach?&lt;/p&gt;</comment>
                            <comment id="13005827" author="streamy" created="Fri, 11 Mar 2011 20:44:43 +0000"  >&lt;p&gt;The approach is similar, but based on the new master/rs interfaces, ZK classes, etc.&lt;/p&gt;</comment>
                            <comment id="13008973" author="khemani" created="Sun, 20 Mar 2011 22:13:09 +0000"  >&lt;p&gt;I justed posted not yet fully done patch for review &lt;a href=&quot;https://review.cloudera.org/r/1655/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://review.cloudera.org/r/1655/&lt;/a&gt; (For some reason it isn&apos;t getting automatically linked)&lt;/p&gt;</comment>
                            <comment id="13011499" author="stack" created="Fri, 25 Mar 2011 23:25:46 +0000"  >&lt;p&gt;@Prakash I posted a review of about 50% of your patch over on rb.  It looks great so far.&lt;/p&gt;</comment>
                            <comment id="13016539" author="stack" created="Wed, 6 Apr 2011 21:16:17 +0000"  >&lt;p&gt;I did the top 50% or so again over on rb.  Over there I write &quot;...I&apos;d be up for committing this sooner rather than later, especially if its bascially working for you.  My thought is this is a big patch and its critical functionality so commit and get the rest of the community helping iron out bugs.  Let us know when you think its good to commit.&quot;&lt;/p&gt;

&lt;p&gt;FYI Prakash, you need to update here when you post a new patch, at least for the moment, because email of notifications is not working (We&apos;ll be moving to Apache&apos;s review board instance some time soon).&lt;/p&gt;</comment>
                            <comment id="13016681" author="yuzhihong@gmail.com" created="Thu, 7 Apr 2011 04:33:16 +0000"  >&lt;p&gt;I got the following from TestDistributedLogSplitting:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
testOrphanLogCreation(org.apache.hadoop.hbase.master.TestDistributedLogSplitting)  Time elapsed: 33.203 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
java.lang.Exception: Unexpected exception, expected&amp;lt;org.apache.hadoop.hbase.regionserver.wal.OrphanHLogAfterSplitException&amp;gt; but was&amp;lt;java.lang.Error&amp;gt;
        at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
        at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
Caused by: java.lang.Error: Unresolved compilation problem:
        The method appendNoSync(HRegionInfo, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], WALEdit, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;) is undefined &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the type HLog
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13017553" author="yuzhihong@gmail.com" created="Fri, 8 Apr 2011 17:23:50 +0000"  >&lt;p&gt;TestDistributedLogSplitting.testThreeRSAbort() consistently hangs on my laptop.&lt;/p&gt;</comment>
                            <comment id="13017557" author="dhruba" created="Fri, 8 Apr 2011 17:26:05 +0000"  >



&lt;p&gt;&amp;#8211; &lt;br/&gt;
Connect to me at &lt;a href=&quot;http://www.facebook.com/dhruba&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.facebook.com/dhruba&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13018744" author="khemani" created="Tue, 12 Apr 2011 06:57:30 +0000"  >&lt;p&gt;posted a revised patch at &lt;a href=&quot;https://review.cloudera.org/r/1655/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://review.cloudera.org/r/1655/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13018973" author="khemani" created="Tue, 12 Apr 2011 18:28:54 +0000"  >&lt;p&gt;updated patch at &lt;a href=&quot;https://review.cloudera.org/r/1655/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://review.cloudera.org/r/1655/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13020105" author="stack" created="Thu, 14 Apr 2011 23:40:07 +0000"  >&lt;p&gt;org.apache.hadoop.hbase.master.TestDistributedLogSplitting.testWorkerAbort fails for me w/ latest patch:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-------------------------------------------------------------------------------
Test set: org.apache.hadoop.hbase.master.TestDistributedLogSplitting
-------------------------------------------------------------------------------
Tests run: 4, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 182.303 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!
testWorkerAbort(org.apache.hadoop.hbase.master.TestDistributedLogSplitting)  Time elapsed: 60.731 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!
java.lang.AssertionError: expected:&amp;lt;1&amp;gt; but was:&amp;lt;0&amp;gt;
        at org.junit.Assert.fail(Assert.java:91)
        at org.junit.Assert.failNotEquals(Assert.java:645)
        at org.junit.Assert.assertEquals(Assert.java:126)
        at org.junit.Assert.assertEquals(Assert.java:470)
        at org.junit.Assert.assertEquals(Assert.java:454)
        at org.apache.hadoop.hbase.master.TestDistributedLogSplitting.testWorkerAbort(TestDistributedLogSplitting.java:288)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:616)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
        at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:616)
        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13020107" author="stack" created="Thu, 14 Apr 2011 23:44:46 +0000"  >&lt;p&gt;Version of prakash&apos;s patch that applies to TRUNK (there&apos;s a few rejects when I apply whats out on rb).&lt;/p&gt;</comment>
                            <comment id="13020116" author="stack" created="Thu, 14 Apr 2011 23:56:46 +0000"  >&lt;p&gt;Did some review over on rb but not done yet.  Will finish this evening.&lt;/p&gt;</comment>
                            <comment id="13020216" author="khemani" created="Fri, 15 Apr 2011 07:14:05 +0000"  >&lt;p&gt;TestDistributedLogSplitting.testWorkerAbort test failed because the SplitLogWorker was incrementing the tot_wkr_task_resigned twice. My test runs were passing because of a race - if the test happens to look at the counter between the 2 increments then the test will pass. Fixing this in the latest patch.&lt;/p&gt;
</comment>
                            <comment id="13020229" author="stack" created="Fri, 15 Apr 2011 07:57:50 +0000"  >&lt;p&gt;@Prakash I uploaded more review.  See if it helps.&lt;/p&gt;</comment>
                            <comment id="13020488" author="khemani" created="Fri, 15 Apr 2011 23:51:28 +0000"  >&lt;p&gt;I uploaded a new diff at the review board &lt;a href=&quot;https://review.cloudera.org/r/1655/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://review.cloudera.org/r/1655/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think it takes care of all of Stack&apos;s comments.&lt;/p&gt;

&lt;p&gt;added a new test in TestHLogSplit to test that when skip-errors is set to true then corrupted log files are ignored and correctly moved to the .corrupted directory.&lt;/p&gt;

&lt;p&gt;Some of the tests - especially in TestDistributedLogSplitting - are somewhat timing dependent. For example I will abort a few region servers and wait at most few seconds for all those servers to go down. Sometimes it takes longer and the test fails. Last night I had to bump up the time-limit in one such test (testThreeRSAbort()). I am sure these tests can be made more robust ....&lt;/p&gt;</comment>
                            <comment id="13020657" author="stack" created="Sat, 16 Apr 2011 20:45:18 +0000"  >&lt;p&gt;Latest patch looks good but still fails TestDistributedLogSplitting it seems.  I&apos;m on apache hbase trunk and apply your r6 patch from review board.  I get:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-------------------------------------------------------------------------------
Test set: org.apache.hadoop.hbase.master.TestDistributedLogSplitting
-------------------------------------------------------------------------------
Tests run: 4, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 164.652 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!
testWorkerAbort(org.apache.hadoop.hbase.master.TestDistributedLogSplitting)  Time elapsed: 48.77 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!
java.lang.AssertionError: region server completed the split before aborting
        at org.junit.Assert.fail(Assert.java:91)
        at org.apache.hadoop.hbase.master.TestDistributedLogSplitting.testWorkerAbort(TestDistributedLogSplitting.java:291)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:616)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
        at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:616)
        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;ll attach the log.&lt;/p&gt;

&lt;p&gt;If you want me to dig in too Prakash, just say and I&apos;ll have a go.  Otherwise defer to you since you know best whats in motion here.&lt;/p&gt;

&lt;p&gt;Meantime I&apos;m going to try it out on a cluster.  Good stuff Prakash!&lt;/p&gt;</comment>
                            <comment id="13020658" author="stack" created="Sat, 16 Apr 2011 20:45:50 +0000"  >&lt;p&gt;Failed test output.&lt;/p&gt;</comment>
                            <comment id="13020712" author="stack" created="Sun, 17 Apr 2011 02:26:51 +0000"  >&lt;p&gt;I tried it on a small cluster w/ loads of regions under load &amp;gt; 1k regions each.  It worked for me.   Its great.  Fast.&lt;/p&gt;</comment>
                            <comment id="13020721" author="khemani" created="Sun, 17 Apr 2011 04:31:05 +0000"  >&lt;p&gt;This is a problem with the test-case which I will fix.&lt;/p&gt;

&lt;p&gt;You got this error because of (1) not being able to interrupt  the split-log-worker thread when it is doing dfs operations (I think the interrupt is swallowed somewhere) (2) timing issues where in the aborting region server the filesystem and the zk session don&apos;t close before the split-log-worker thread completes its splitting task ...&lt;/p&gt;

&lt;p&gt;I will fix this by removing fail(&quot;region server completed the split before aborting&quot;) from the test case.&lt;/p&gt;


</comment>
                            <comment id="13020730" author="khemani" created="Sun, 17 Apr 2011 06:44:15 +0000"  >&lt;p&gt;&apos;fixed&apos; TestDistriButedLogSplitting.testWorkerAbort() by not letting the test fail if the aborting region server completes the split before it closes dfs or zk session.&lt;/p&gt;

&lt;p&gt;uploaded a new patch in rb&lt;/p&gt;</comment>
                            <comment id="13020842" author="stack" created="Sun, 17 Apr 2011 18:41:04 +0000"  >&lt;p&gt;This fails for me Prakash.  Does it pass for you?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Running org.apache.hadoop.hbase.regionserver.TestSplitLogWorker
Tests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.107 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the fail:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-------------------------------------------------------------------------------
Test set: org.apache.hadoop.hbase.regionserver.TestSplitLogWorker
-------------------------------------------------------------------------------
Tests run: 5, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.107 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!
testRaceForTask(org.apache.hadoop.hbase.regionserver.TestSplitLogWorker)  Time elapsed: 0.182 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!
java.lang.AssertionError: 
        at org.junit.Assert.fail(Assert.java:91)
        at org.junit.Assert.assertTrue(Assert.java:43)
        at org.junit.Assert.assertTrue(Assert.java:54)
        at org.apache.hadoop.hbase.regionserver.TestSplitLogWorker.waitForCounter(TestSplitLogWorker.java:75)
        at org.apache.hadoop.hbase.regionserver.TestSplitLogWorker.testRaceForTask(TestSplitLogWorker.java:165)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:616)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)
        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)
        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)
        at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:62)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.executeTestSet(AbstractDirectoryTestSuite.java:140)
        at org.apache.maven.surefire.suite.AbstractDirectoryTestSuite.execute(AbstractDirectoryTestSuite.java:165)
        at org.apache.maven.surefire.Surefire.run(Surefire.java:107)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:616)
        at org.apache.maven.surefire.booter.SurefireBooter.runSuitesInProcess(SurefireBooter.java:289)
        at org.apache.maven.surefire.booter.SurefireBooter.main(SurefireBooter.java:1005)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let me know if you want me to post the log.&lt;/p&gt;

&lt;p&gt;Good stuff.&lt;/p&gt;</comment>
                            <comment id="13020874" author="khemani" created="Sun, 17 Apr 2011 22:01:05 +0000"  >&lt;p&gt;Yes, it passes for me - just ran it again.&lt;/p&gt;

&lt;p&gt;This is another of timing related errors.&lt;/p&gt;


&lt;p&gt;164     waitForCounter(tot_wkr_task_acquired, 0, 1, 100);&lt;br/&gt;
165     waitForCounter(tot_wkr_failed_to_grab_task_lost_race, 0, 1, 100);&lt;/p&gt;


&lt;p&gt;In your case the failure occurred when in line 165 the counter tot_wkr_failed_to_grab_task_lost_race did not change value from 0 to 1 in 100ms.&lt;/p&gt;

&lt;p&gt;Can you please increase the timeout in both these lines from 100ms to 1000ms and retry ... &lt;/p&gt;

&lt;p&gt;I will go over all my tests and try to improve them but I won&apos;t be able to get to that before the end of this week.&lt;/p&gt;



</comment>
                            <comment id="13021119" author="stack" created="Mon, 18 Apr 2011 17:14:43 +0000"  >&lt;p&gt;Hmm... i ran test on mac and linux and now it passes.  I&apos;ll up the timer on commit anyways.&lt;/p&gt;</comment>
                            <comment id="13021123" author="stack" created="Mon, 18 Apr 2011 17:18:36 +0000"  >&lt;p&gt;Committed to TRUNK.  Thanks for the sweet feature Prakash.  If issues w/ tests subsequent to this commit, lets address them in separate issues (like I say, tests are passing for me on linux and macos).&lt;/p&gt;</comment>
                            <comment id="13021160" author="streamy" created="Mon, 18 Apr 2011 18:20:15 +0000"  >&lt;p&gt;Great work Prakash!&lt;/p&gt;</comment>
                            <comment id="13043193" author="koven2049" created="Fri, 3 Jun 2011 03:02:59 +0000"  >&lt;p&gt;It&apos;s a great work!&lt;br/&gt;
But I can&apos;t pass the test unit TestDistributedLogSplitting. I used 1364-v5.txt.&lt;/p&gt;

&lt;p&gt;Tests run: 4, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 159.419 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
testWorkerAbort(org.apache.hadoop.hbase.master.TestDistributedLogSplitting)  Time elapsed: 60.897 sec  &amp;lt;&amp;lt;&amp;lt; FAILURE!&lt;br/&gt;
java.lang.AssertionError: region server completed the split before aborting&lt;br/&gt;
        at org.junit.Assert.fail(Assert.java:91)&lt;br/&gt;
        at org.apache.hadoop.hbase.master.TestDistributedLogSplitting.testWorkerAbort(TestDistributedLogSplitting.java:289)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&lt;br/&gt;
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)&lt;br/&gt;
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)&lt;br/&gt;
        at java.lang.reflect.Method.invoke(Method.java:616)&lt;/p&gt;</comment>
                            <comment id="13043195" author="stack" created="Fri, 3 Jun 2011 03:07:06 +0000"  >&lt;p&gt;@mingjian Are you running HBase trunk?  That test passes for me.&lt;/p&gt;</comment>
                            <comment id="13043196" author="koven2049" created="Fri, 3 Jun 2011 03:10:33 +0000"  >&lt;p&gt;I used 0.90.3 + this patch.&lt;br/&gt;
Because I want to patch it into our system.&lt;/p&gt;</comment>
                            <comment id="13045288" author="koven2049" created="Tue, 7 Jun 2011 06:29:24 +0000"  >&lt;p&gt;I saw the function &quot;public void splitLog(final String serverName)&quot;:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-style: solid;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
          splitLogSize = splitLogManager.splitLogDistributed(logDir);
        } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (OrphanHLogAfterSplitException e) {
          LOG.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Retrying distributed splitting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &quot;&lt;/span&gt; +
              serverName + &lt;span class=&quot;code-quote&quot;&gt;&quot;because of:&quot;&lt;/span&gt;, e);
          splitLogManager.splitLogDistributed(logDir);
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The method &quot;splitLogDistributed&quot; blocks until all the log files of the given region server have been rocessed. In this way, it would spend much time if there are many regionserver dirs in the .logs dir.&lt;/p&gt;

&lt;p&gt;Why not put all regionserver log dirs in this method?&lt;/p&gt;</comment>
                            <comment id="13045670" author="khemani" created="Tue, 7 Jun 2011 22:21:59 +0000"  >&lt;p&gt;splitLog is called for one region server at a time - it is not called directly on the .logs directory. The servername passed is the name of the regionserver&apos;s log directory under .logs. It is called at startup by the function splitLogAfterStartup(). It is splitLogAfterStartup() that calls splitLog() for one regionserver at a time and that can take a long time.&lt;/p&gt;

&lt;p&gt;It is probably better to call splitLog() for all region servers simultaneously. A large number of splitlog tasks  will get scheduled - one for each log file. But a splitlog-worker (region server) executes only one task at a time and there shouldn&apos;t be a danger of DFS overload.&lt;/p&gt;
</comment>
                            <comment id="13045708" author="stack" created="Tue, 7 Jun 2011 23:49:30 +0000"  >&lt;p&gt;@Prakash Should I open a new JIRA to schedule all logs for all regionservers?  Good stuff.&lt;/p&gt;</comment>
                            <comment id="13046044" author="khemani" created="Wed, 8 Jun 2011 16:10:58 +0000"  >&lt;p&gt;Filed &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3963&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-3963&lt;/a&gt;. Will try to get this done.&lt;/p&gt;
</comment>
                            <comment id="13046048" author="stack" created="Wed, 8 Jun 2011 16:22:52 +0000"  >&lt;p&gt;@mingjian Since you are looking the distributed code now, maybe you&apos;d be up for having a go at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3963&quot; title=&quot;Schedule all log-spliiting at startup all at once&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3963&quot;&gt;&lt;del&gt;HBASE-3963&lt;/del&gt;&lt;/a&gt;?  Or at least posting a patch that you&apos;ve tried for Prakash and/or I to review?  Thanks.&lt;/p&gt;</comment>
                            <comment id="13046299" author="koven2049" created="Thu, 9 Jun 2011 01:25:50 +0000"  >&lt;p&gt;@stack &amp;amp; Prakash I will attach a patch in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3963&quot; title=&quot;Schedule all log-spliiting at startup all at once&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3963&quot;&gt;&lt;del&gt;HBASE-3963&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="15017944" author="lars_francke" created="Fri, 20 Nov 2015 13:01:58 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                                                <inwardlinks description="is part of">
                                        <issuelink>
            <issuekey id="12434794">HBASE-1816</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12441192">HBASE-1994</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12507352">HBASE-3889</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12492801">HBASE-3323</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12476390" name="1364-v5.txt" size="165414" author="stack" created="Thu, 14 Apr 2011 23:44:46 +0000"/>
                            <attachment id="12468771" name="HBASE-1364.patch" size="89643" author="posix4e" created="Wed, 19 Jan 2011 18:11:49 +0000"/>
                            <attachment id="12476535" name="org.apache.hadoop.hbase.master.TestDistributedLogSplitting-output.txt" size="6000331" author="stack" created="Sat, 16 Apr 2011 20:45:50 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12466687">HBASE-2709</subtask>
                            <subtask id="12477274">HBASE-3107</subtask>
                            <subtask id="12477275">HBASE-3108</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 24 Jul 2009 23:30:48 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32106</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i05i3b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>30028</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Adds distributed WAL log splitting in place of single-process master orchestrated splitting.  Feature is ON by default (To disable, set hbase.master.distributed.log.splitting=false).</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>