<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:20:07 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-4570/HBASE-4570.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-4570] Scan ACID problem with concurrent puts.</title>
                <link>https://issues.apache.org/jira/browse/HBASE-4570</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;When scanning a table sometimes rows that have multiple column families get split into two rows if there are concurrent writes.  In this particular case we are overwriting the contents of a Get directly back onto itself as a Put.&lt;/p&gt;

&lt;p&gt;For example, this is a two cf row (with &quot;f1&quot;, &quot;f2&quot;, .. &quot;f9&quot; cfs).  It is actually returned as two rows (#55 and #56). Interestingly if the two were merged we would have a single proper row.&lt;/p&gt;

&lt;p&gt;Row row0000024461 had time stamps: [55: keyvalues=&lt;/p&gt;
{row0000024461/f0:data/1318200440867/Put/vlen=1000, row0000024461/f0:qual/1318200440867/Put/vlen=10, row0000024461/f1:data/1318200440867/Put/vlen=1000, row0000024461/f1:qual/1318200440867/Put/vlen=10, row0000024461/f2:data/1318200440867/Put/vlen=1000, row0000024461/f2:qual/1318200440867/Put/vlen=10, row0000024461/f3:data/1318200440867/Put/vlen=1000, row0000024461/f3:qual/1318200440867/Put/vlen=10, row0000024461/f4:data/1318200440867/Put/vlen=1000, row0000024461/f4:qual/1318200440867/Put/vlen=10}
&lt;p&gt;, &lt;br/&gt;
56: keyvalues=&lt;/p&gt;
{row0000024461/f5:data/1318200440867/Put/vlen=1000, row0000024461/f5:qual/1318200440867/Put/vlen=10, row0000024461/f6:data/1318200440867/Put/vlen=1000, row0000024461/f6:qual/1318200440867/Put/vlen=10, row0000024461/f7:data/1318200440867/Put/vlen=1000, row0000024461/f7:qual/1318200440867/Put/vlen=10, row0000024461/f8:data/1318200440867/Put/vlen=1000, row0000024461/f8:qual/1318200440867/Put/vlen=10, row0000024461/f9:data/1318200440867/Put/vlen=1000, row0000024461/f9:qual/1318200440867/Put/vlen=10}
&lt;p&gt;]&lt;/p&gt;

&lt;p&gt;I&apos;ve only tested this on 0.90.1+patches and 0.90.3+patches, but it is consistent and duplicatable.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12526531">HBASE-4570</key>
            <summary>Scan ACID problem with concurrent puts.</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jmhsieh">Jonathan Hsieh</assignee>
                                    <reporter username="jmhsieh">Jonathan Hsieh</reporter>
                        <labels>
                    </labels>
                <created>Mon, 10 Oct 2011 23:05:26 +0000</created>
                <updated>Fri, 20 Nov 2015 11:55:28 +0000</updated>
                            <resolved>Mon, 17 Oct 2011 17:37:59 +0000</resolved>
                                    <version>0.90.1</version>
                    <version>0.90.3</version>
                                    <fixVersion>0.90.5</fixVersion>
                                    <component>Client</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="13125999" author="jmhsieh" created="Wed, 12 Oct 2011 18:00:15 +0000"  >&lt;p&gt;I&apos;ve attached a file with some standalone programs that generate data, scan+count, and scan+twiddle.  It includes instructions on how to duplicate the problem.&lt;/p&gt;

&lt;p&gt;I&apos;ve tried duplicating the problem in a unit test but have not been able to reproduce it as reliably.&lt;/p&gt;</comment>
                            <comment id="13126001" author="jmhsieh" created="Wed, 12 Oct 2011 18:03:11 +0000"  >&lt;p&gt;rephrase: I have not been able to duplicate this in a unit test yet.  &lt;/p&gt;

&lt;p&gt;This test seems scenario is similar to TestAcidGuarentees (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2856&quot; title=&quot;TestAcidGuarantee broken on trunk &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2856&quot;&gt;&lt;del&gt;HBASE-2856&lt;/del&gt;&lt;/a&gt;) but uses filters and seems a little focused on this particular symptom.&lt;/p&gt;</comment>
                            <comment id="13126369" author="jmhsieh" created="Thu, 13 Oct 2011 06:14:02 +0000"  >&lt;p&gt;Ran the unit test version of this test and it did not fail as the separate programs did after 3-4 hours.&lt;/p&gt;
</comment>
                            <comment id="13126644" author="stack" created="Thu, 13 Oct 2011 14:56:04 +0000"  >&lt;p&gt;Good on you Jon.  Keep digging (smile).&lt;/p&gt;</comment>
                            <comment id="13127162" author="jmhsieh" created="Fri, 14 Oct 2011 00:16:20 +0000"  >&lt;p&gt;I can still run these and see acid failues on today&apos;s trunk with git hash b45dfec.  &lt;/p&gt;

&lt;p&gt;I&apos;ve also tried on a build that applies &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2856&quot; title=&quot;TestAcidGuarantee broken on trunk &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2856&quot;&gt;&lt;del&gt;HBASE-2856&lt;/del&gt;&lt;/a&gt; v11 (&lt;a href=&quot;https://reviews.apache.org/r/2224/diff/#index_header&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2224/diff/#index_header&lt;/a&gt;) it also still has the same problem.  &lt;/p&gt;

</comment>
                            <comment id="13127711" author="jmhsieh" created="Fri, 14 Oct 2011 17:18:25 +0000"  >&lt;p&gt;Current experiment seems to indicate that Bytes.equals, when it uses the UNSAFE_COMPARER class doesn&apos;t always tell the truth, and causes scan rows to get chopped up into two rows.  I&apos;ve modified code to use the PureJavaComparer and the described problem hasn&apos;t appeared yet (runing for 30 mins or so).  &lt;/p&gt;</comment>
                            <comment id="13127725" author="tlipcon" created="Fri, 14 Oct 2011 17:42:35 +0000"  >&lt;p&gt;woah, that&apos;s interesting... but I thought you could reproduce this on 0.90.4 where the UNSAFE_COMPARER doesn&apos;t exist?&lt;/p&gt;</comment>
                            <comment id="13127774" author="jmhsieh" created="Fri, 14 Oct 2011 18:48:01 +0000"  >&lt;p&gt;The way this is setup, I can&apos;t tell if problem will never happen, but I can detect if it ever does.&lt;/p&gt;

&lt;p&gt;I&apos;m still experimenting on trunk and will move to previous versions when I feel confident with this potential root cause.  I&apos;m using a combo of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2856&quot; title=&quot;TestAcidGuarantee broken on trunk &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2856&quot;&gt;&lt;del&gt;HBASE-2856&lt;/del&gt;&lt;/a&gt; on trunk and reverting to the java comparator &amp;#8211; it might the combo of the two that is required. &lt;/p&gt;</comment>
                            <comment id="13127780" author="yuzhihong@gmail.com" created="Fri, 14 Oct 2011 18:56:53 +0000"  >&lt;p&gt;@Jonathan:&lt;br/&gt;
Can you either post the combined patch or run TestAcidGuarantees in a loop ?&lt;br/&gt;
Your findings may give us clue for pushing 2856 forward.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="13127882" author="jmhsieh" created="Fri, 14 Oct 2011 21:39:58 +0000"  >&lt;p&gt;4570-instrumentation.tgz includes a few incremental patches &amp;#8211; the first applies v11 of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2856&quot; title=&quot;TestAcidGuarantee broken on trunk &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2856&quot;&gt;&lt;del&gt;HBASE-2856&lt;/del&gt;&lt;/a&gt;, the second comments out the use of sun.misc.Unsafe, and other add instrumentation around the RS&apos;s internal scanner&apos;s next and row delimiting functions.  &lt;/p&gt;</comment>
                            <comment id="13127887" author="jmhsieh" created="Fri, 14 Oct 2011 21:43:51 +0000"  >&lt;p&gt;@Ted&lt;/p&gt;

&lt;p&gt;I have a strange situation where just with the fixes (first two patches, no instrumentation) I still get a lot of the failures in my test setup.  However with extra instrumentation failure seem to go away (runs a long time without encountering problems).  Note in my table setup, I have 10 cf&apos;s each with 2 cols so the instrumentation is written to always expect 20 KVs.  I have two process &amp;#8211; one that does a filtered scan and twiddle, and another that just dues a filtered scan and count.&lt;/p&gt;

&lt;p&gt;I ran TestAcidGuarantees in a loop on the instrumented version.  It eventually failed &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Tests in error:
  testScanAtomicity(org.apache.hadoop.hbase.TestAcidGuarantees): Deferred
  testMixedAtomicity(org.apache.hadoop.hbase.TestAcidGuarantees): org.apache.hadoop.hbase.client.HConnectionManager$HConnectionImplementation@54697123 closed
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With the instrumented version TestAcidGuarentees still fails &amp;#8211; &lt;br/&gt;
It took about 10th iterations before this happened.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 127.479 sec
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 121.662 sec
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 117.508 sec
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 124.208 sec
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 121.513 sec
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 120.472 sec
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 117.869 sec
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 120.435 sec
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 118.946 sec
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0
Tests run: 3, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 85.81 sec &amp;lt;&amp;lt;&amp;lt; FAILURE!
Tests run: 3, Failures: 0, Errors: 2, Skipped: 0
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13127995" author="yuzhihong@gmail.com" created="Fri, 14 Oct 2011 23:48:50 +0000"  >&lt;p&gt;I reproduced the above test failure using patch for 4485 (including 2856) combined with 0002-Only-use-safe-java-comparator-don-t-use-sun.misc.Uns.patch&lt;/p&gt;</comment>
                            <comment id="13128008" author="tlipcon" created="Sat, 15 Oct 2011 00:55:33 +0000"  >&lt;p&gt;Jon and I spent the afternoon with his test cases. We&apos;ve found the issue - it&apos;s a nice one!&lt;/p&gt;

&lt;p&gt;In KeyValue, we have the following code:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] getRow() {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rowCache == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; o = getRowOffset();
      &lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt; l = getRowLength();
      rowCache = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[l];
      &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy(getBuffer(), o, rowCache, 0, l);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; rowCache;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which is called extensively by KeyValueHeaps throughout the scanner code. In the case of scanning MemStore, an individual KeyValue ends up as &lt;tt&gt;next&lt;/tt&gt; in multiple MemStoreScanners. Then, if multiple threads call &lt;tt&gt;getRow&lt;/tt&gt; at the same time, we see the following race:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Thread 1 sees &lt;tt&gt;rowCache&lt;/tt&gt; as null, and initializes &lt;tt&gt;rowCache = new byte&lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;Thread 2 sees &lt;tt&gt;rowCache&lt;/tt&gt; as non-null, and returns a byte array of all 0s&lt;/li&gt;
	&lt;li&gt;Thread 1 initializes the row with &lt;tt&gt;arrayCopy&lt;/tt&gt;, and returns the right result&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The byte array returned to Thread 2 is modified while it&apos;s working with it, so depending on the interleaving of events, it can cause an invalid heap, or invalid results, or a weird split row like Jon was seeing, etc.&lt;/p&gt;

&lt;p&gt;The fix is pretty simple - we need to declare &lt;tt&gt;rowCache&lt;/tt&gt; volatile, and initialize it in a temporary variable before overwriting the volatile reference. If this is too slow, we could use an AtomicFieldUpdater with &lt;tt&gt;lazySet&lt;/tt&gt; to put the cost only on the write side, but I don&apos;t think it really matters.&lt;/p&gt;</comment>
                            <comment id="13128016" author="tlipcon" created="Sat, 15 Oct 2011 01:15:48 +0000"  >&lt;p&gt;(btw, the unsafe comparator was probably just a red herring - it&apos;s faster, so the race is more likely, but pretty sure the above is the true case)&lt;/p&gt;</comment>
                            <comment id="13128031" author="yuzhihong@gmail.com" created="Sat, 15 Oct 2011 01:44:46 +0000"  >&lt;p&gt;Using patch for 4485 (including 2856, without variable length memstoreTS) combined with hbase-4570.txt, I still got:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Tests in error: 
  testScanAtomicity(org.apache.hadoop.hbase.TestAcidGuarantees): Deferred
  testMixedAtomicity(org.apache.hadoop.hbase.TestAcidGuarantees): Deferred
...
TestAcidGuarantees failed, iteration: 3
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;But this is some progress - previously TestAcidGuarantees failed every time.&lt;/p&gt;</comment>
                            <comment id="13128033" author="jbellis" created="Sat, 15 Oct 2011 01:58:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;we could use an AtomicFieldUpdater with lazySet to put the cost only on the write side&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I thought that (a) ARFU requires that its target be volatile still, and (b) that the point of lazySet was to allow cheaper writes, with no effect on reads.&lt;/p&gt;</comment>
                            <comment id="13128065" author="tlipcon" created="Sat, 15 Oct 2011 04:23:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;I thought that (a) ARFU requires that its target be volatile still, and (b) that the point of lazySet was to allow cheaper writes, with no effect on reads.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think it requires a volatile target - it just treats the target as having part of the volatile semantics for the particular update in question. The trick here would be that we don&apos;t need an up-to-date read whenever we read the field in order for lazy initialization to work. If a second thread recomputes the same array copy, that&apos;s fine. We only need to make sure that the writes happen in the correct order (ie the reference to the byte array isn&apos;t published before the byte array itself has been copied)&lt;/p&gt;</comment>
                            <comment id="13128073" author="stack" created="Sat, 15 Oct 2011 05:13:47 +0000"  >&lt;p&gt;@Jon and Todd &amp;#8211; Nice find.  I&apos;m +1 on applying patch as is.  If &apos;too slow&apos;, we can come back around later with AtomicFieldUpdater kung-fu&lt;/p&gt;</comment>
                            <comment id="13128867" author="jmhsieh" created="Mon, 17 Oct 2011 13:28:31 +0000"  >&lt;p&gt;@stack I&apos;ve done testing on trunk and an 0.90 branch and the symptoms encountered with the testing programs is fixed.  Would be great to get on 0.90, 0.92 and trunk.  Thanks!&lt;/p&gt;</comment>
                            <comment id="13129026" author="tlipcon" created="Mon, 17 Oct 2011 17:34:37 +0000"  >&lt;p&gt;Cool, I will commit this to 90, 92, and trunk momentarily.&lt;/p&gt;</comment>
                            <comment id="13129028" author="tlipcon" created="Mon, 17 Oct 2011 17:37:59 +0000"  >&lt;p&gt;Fixed in 90, 92, trunk branches&lt;/p&gt;</comment>
                            <comment id="13129067" author="hudson" created="Mon, 17 Oct 2011 18:28:24 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #2331 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/2331/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/2331/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4570&quot; title=&quot;Scan ACID problem with concurrent puts.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4570&quot;&gt;&lt;del&gt;HBASE-4570&lt;/del&gt;&lt;/a&gt;. Fix a race condition that could cause inconsistent results from scans during concurrent writes.&lt;/p&gt;

&lt;p&gt;todd : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15016490" author="lars_francke" created="Fri, 20 Nov 2015 11:55:28 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12497404">HBASE-3498</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12524659">HBASE-4485</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12466239">HBASE-2670</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12469746">HBASE-2856</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12499102" name="4570-instrumentation.tgz" size="14622" author="jmhsieh" created="Fri, 14 Oct 2011 21:39:58 +0000"/>
                            <attachment id="12498785" name="hbase-4570.tgz" size="9068" author="jmhsieh" created="Wed, 12 Oct 2011 18:00:15 +0000"/>
                            <attachment id="12499116" name="hbase-4570.txt" size="1023" author="tlipcon" created="Sat, 15 Oct 2011 01:03:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 13 Oct 2011 14:56:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>57001</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hrdb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>101696</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>