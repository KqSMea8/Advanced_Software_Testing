<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:51:16 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-8016/HBASE-8016.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-8016] HBase as an embeddable library, but still using HDFS</title>
                <link>https://issues.apache.org/jira/browse/HBASE-8016</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;This goes in the &quot;strange idea&quot; bucket...  &lt;/p&gt;

&lt;p&gt;I&apos;m looking for a tool to allow folks to store key-value data into HDFS so that hadoop companion layers &amp;amp; apps don&apos;t need to rely either on external database or a NoSQL store.  HBase itself is often not running on such clusters and we can not add it as a requirement for many of the use cases I&apos;m considering.&lt;/p&gt;

&lt;p&gt;But...  what if we produced a library that provided the basic HBase API (creating tables &amp;amp; putting / getting values...) and this library was pointed at HDFS for durability.  This library would effectively embed a region server and the the master in a node and provide only API level access within that JVM.  We would skip marshaling &amp;amp; networking, gaining a fair amount of efficiency.  An application using this library would gain all of the advantages of HBase without adding any additional administrative complexity of managing HBase as a distributed service.&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;

&lt;p&gt;Example use cases...  Right now a typical hadoop install runs serval services that use databases (Oozie, HCat, Hive ...).  What if some of these could be ported to use HDFS itself as their store with the HBase API provided to manage their data.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12635675">HBASE-8016</key>
            <summary>HBase as an embeddable library, but still using HDFS</summary>
                <type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="eric14">eric baldeschwieler</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Mar 2013 22:01:02 +0000</created>
                <updated>Fri, 8 Mar 2013 06:48:17 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>17</watches>
                                                                <comments>
                            <comment id="13595207" author="ndimiduk" created="Wed, 6 Mar 2013 22:32:13 +0000"  >&lt;p&gt;Like, HBase APIs for Derby or SQLite usage scenarios?&lt;/p&gt;</comment>
                            <comment id="13595225" author="eric14" created="Wed, 6 Mar 2013 22:43:00 +0000"  >&lt;p&gt;Yes, that is a good analogy.&lt;/p&gt;</comment>
                            <comment id="13595422" author="apurtell" created="Thu, 7 Mar 2013 01:47:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;This goes in the &quot;strange idea&quot; bucket...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This sounds to me like a &quot;Hadoop flavored LevelDB&quot;? If so, in the sense that BigTable begat LevelDB, this is an analogous technology evolution.&lt;/p&gt;</comment>
                            <comment id="13595437" author="apurtell" created="Thu, 7 Mar 2013 02:07:13 +0000"  >&lt;p&gt;On this:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;An application using this library would gain all of the advantages of HBase without adding any additional administrative complexity of managing HBase as a distributed service.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m skeptical. Since HBase is by definition a distributed datastore, and gains most (if not just about all) of its advantages from being a distributed service, I don&apos;t see how one does not use &quot;LevelHBase&quot; to gain all the advantages of HBase without building a distributed service which incorporates it. How does this avoid &quot;additional administrative complexity?&quot; At which point you have a new datastore which might by chance incorporate some HBase code. TANSTAAFL&lt;/p&gt;</comment>
                            <comment id="13595441" author="mcorgan" created="Thu, 7 Mar 2013 02:14:57 +0000"  >&lt;p&gt;Could you run the regionserver process in the HDFS process?  I think MapR does something like that.  The downside is that the less reliable service will take down the more reliable service with it.&lt;/p&gt;</comment>
                            <comment id="13595521" author="stack" created="Thu, 7 Mar 2013 04:08:26 +0000"  >&lt;p&gt;MiniHBaseCluster doesn&apos;t cut it?  (zk, a master, and N regionservers) all in the one jvm process?  Would have to make it listen on external interface...&lt;/p&gt;</comment>
                            <comment id="13596899" author="eric14" created="Fri, 8 Mar 2013 06:48:17 +0000"  >&lt;p&gt;Hi Stack&lt;/p&gt;

&lt;p&gt;MiniHBaseCluster sounds like a good way to prototype this.  I&apos;ve been kicking this around w ddas and serge and they suggested that.  &lt;/p&gt;

&lt;p&gt;Hi Matt&lt;/p&gt;

&lt;p&gt;Noooo .. that would be an interesting project but is going a very different direction.&lt;/p&gt;

&lt;p&gt;Hi Andrew&lt;/p&gt;

&lt;p&gt;LevelDB is the other thing I&apos;ve been thinking about.  We may to some comparison.  But adapting it to use HDFS efficiently may prove non-trivial and I&apos;d want something that can handle a couple of TB of data, not clear level DB fits that bill.&lt;/p&gt;

&lt;p&gt;In terms of distributed data store...  we definitely suffer from not having good simple mechanisms to add good state management of large data sets to simple apps around hadoop.  Often they have a single master and managable data rates.  They are getting built on DBs today, but that really is crufty.  I&apos;m looking for a repeatable data management design that doesn&apos;t bring all the fun of Admining either a high availablity RDMS or distributed NoSQL store into the mix.&lt;/p&gt;

&lt;p&gt;Other approaches might be to hack up derbe or SqlLite or postgres, but all of these bring more bagage since thet are not already HDFS native.  And none should scale as well as HBase.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 6 Mar 2013 22:32:13 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>316168</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 41 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ik2f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>316511</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>