<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:57:00 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-8626/HBASE-8626.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-8626] RowMutations fail when Delete and Put on same columnFamily/column/row</title>
                <link>https://issues.apache.org/jira/browse/HBASE-8626</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;When RowMutations have a Delete followed by Put to same column family or columns or rows, only the Delete is happening while the Put is ignored so atomicity of RowMutations is broken for such cases.&lt;/p&gt;

&lt;p&gt;Attached is a unit test where the following tests are failing:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;testDeleteCFThenPutInSameCF: Delete a column family and then Put to same column family.&lt;/li&gt;
	&lt;li&gt;testDeleteColumnThenPutSameColumn: Delete a column and then Put to same column.&lt;/li&gt;
	&lt;li&gt;testDeleteRowThenPutSameRow: Delete a row and then Put to same row&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment>&lt;p&gt;Ubuntu 12.04, HBase 0.94.7&lt;/p&gt;</environment>
        <key id="12649476">HBASE-8626</key>
            <summary>RowMutations fail when Delete and Put on same columnFamily/column/row</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="yuzhihong@gmail.com">Ted Yu</assignee>
                                    <reporter username="vinodv26">Vinod</reporter>
                        <labels>
                    </labels>
                <created>Sun, 26 May 2013 14:58:17 +0000</created>
                <updated>Mon, 3 Jun 2013 00:10:58 +0000</updated>
                            <resolved>Wed, 29 May 2013 23:10:30 +0000</resolved>
                                    <version>0.94.7</version>
                    <version>0.95.0</version>
                                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                <comments>
                            <comment id="13667338" author="vinodv26" created="Sun, 26 May 2013 14:59:52 +0000"  >&lt;p&gt;Test case to reproduce the issue.&lt;/p&gt;</comment>
                            <comment id="13667354" author="vinodv26" created="Sun, 26 May 2013 17:09:09 +0000"  >&lt;p&gt;Attached unit test patch for trunk&lt;/p&gt;</comment>
                            <comment id="13667367" author="varunsharma" created="Sun, 26 May 2013 18:47:49 +0000"  >&lt;p&gt;I think this is manifestation of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2256&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2256&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a known issue and I dont think we can fix it since the delete and put get the same timestamp. The client needs to specify a latter timestamp for the put(s) than the deletes manually to get around this.&lt;/p&gt;</comment>
                            <comment id="13667368" author="varunsharma" created="Sun, 26 May 2013 18:49:31 +0000"  >&lt;p&gt;Or one thing we could do is to have HBase give a higher timestamp to all ops other than Delete ops in RowMutations and give the Delete ops lower timestamp. That would be one way to fix this...&lt;/p&gt;</comment>
                            <comment id="13667369" author="jmspaggi" created="Sun, 26 May 2013 19:03:19 +0000"  >&lt;p&gt;But if you do that, if someone try to do a put then a delete, the delete will not be considered...&lt;/p&gt;

&lt;p&gt;At the end, I will just consider this as default HBase reaction...&lt;/p&gt;</comment>
                            <comment id="13667372" author="varunsharma" created="Sun, 26 May 2013 19:09:38 +0000"  >&lt;p&gt;I actually meant that we do this only for transactions which contain a mix of deletes and puts with overlaps like this one.&lt;/p&gt;

&lt;p&gt;Another way to fix this would be to put the responsibility on the client to break out the mutations and possibly add some documentation..&lt;/p&gt;</comment>
                            <comment id="13667401" author="apurtell" created="Sun, 26 May 2013 21:08:53 +0000"  >&lt;p&gt;Currently RowMutations should not mix Deletes that dominate some of the Puts because they will all be given the same timestamp if not otherwise specified by the client.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I actually meant that we do this only for transactions which contain a mix of deletes and puts with overlaps like this one.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The semantics &lt;em&gt;could&lt;/em&gt; be changed that for all mutations in the RowMutation with timestamp == HConstants#LATEST_TIMESTAMP as the ops are applied with the row lock asserted, the mutation processor will substitute timestamps incremented by 1 at each op. (What happens now IIRC is the current time is snapshot into a long, then packed into a byte[], and reused to set the timestamp of every KV if its timestamp == HConstants#LATEST_TIMESTAMP.) Then if the client is trying to structure the RowMutation with Deletes ahead of Puts it would work as expected even if one of the Deletes may dominate one or more of the Puts. But if we make that change, then we have to make sure that any other op applied to the row(s) are not assigned a time in the past relative to those synthetic timestamps. Depending on the resolution of the system clock, &quot;now&quot; when the RowMutation is processed and &quot;now&quot; when the next RPC is serviced after the row locks are released could be the same, and both may address the same same row(s), leading to weird time travel behavior.&lt;/p&gt;</comment>
                            <comment id="13667404" author="yuzhihong@gmail.com" created="Sun, 26 May 2013 21:16:44 +0000"  >&lt;p&gt;Here is draft patch including some of the tests Vinod provided.&lt;/p&gt;

&lt;p&gt;I didn&apos;t keep testPutRowThenDeleteSameRow from Vinod&apos;s test because I think the net effect of Put&apos;s followed by Delete would be Delete. This is something client can manage.&lt;/p&gt;

&lt;p&gt;TestRowMutations and TestAtomicOperation passed.&lt;/p&gt;</comment>
                            <comment id="13667407" author="yuzhihong@gmail.com" created="Sun, 26 May 2013 21:25:43 +0000"  >&lt;p&gt;Andy made some interesting observations.&lt;/p&gt;

&lt;p&gt;What can be done in next patch is to make HRegion.doProcessRowWithTimeout() return a map of byte[] to long, representing the timestamp assigned to the Puts (i.e. &quot;now&quot;) per family. This way the next call to HRegion.doProcessRowWithTimeout() can avoid the time travel issue.&lt;/p&gt;</comment>
                            <comment id="13667411" author="apurtell" created="Sun, 26 May 2013 21:41:00 +0000"  >&lt;p&gt;No. &lt;/p&gt;

&lt;p&gt;I was thinking something simple and data structure free like spinning for the system clock to sufficiently advance before releasing the lock(s), but am curious if one of the wizards here has a more imaginative idea. &lt;/p&gt;</comment>
                            <comment id="13667423" author="hadoopqa" created="Sun, 26 May 2013 22:28:50 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12584879/8626-v1.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12584879/8626-v1.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5834//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13668306" author="jmspaggi" created="Tue, 28 May 2013 13:47:29 +0000"  >&lt;p&gt;Are we going to be break the compatibility with the previous version? &lt;/p&gt;

&lt;p&gt;I mean, if someone is using this today on is code knowing how it&apos;s working, that mean after this patch it will not work anymore, right?&lt;/p&gt;

&lt;p&gt;I&apos;m not really convinced this is a bug. Why should we first to the deletes and not first do the puts...&lt;/p&gt;</comment>
                            <comment id="13668324" author="apurtell" created="Tue, 28 May 2013 14:11:52 +0000"  >&lt;p&gt;I for one don&apos;t think this is a bug and have touched on some of the complexities involved if we think the requested semantics are a good idea. I&apos;m -0. &lt;/p&gt;</comment>
                            <comment id="13668996" author="lhofhansl" created="Wed, 29 May 2013 04:59:46 +0000"  >&lt;p&gt;-1 on changing this. This is working as designed.&lt;/p&gt;

&lt;p&gt;It does not make any logical sense to do an atomic Put and Delete to the &lt;b&gt;same&lt;/b&gt; column. What does that even mean? You want both the Put and the Delete, but not really the Put, because the Delete should win.&lt;/p&gt;

&lt;p&gt;Will close as &quot;Won&apos;t fix&quot; unless I hear objections.&lt;/p&gt;</comment>
                            <comment id="13669113" author="vinodv26" created="Wed, 29 May 2013 09:24:21 +0000"  >&lt;p&gt;I think this becomes relevant when I want to remove all columns in a column family followed by adding some new columns to the same column family atomically.&lt;/p&gt;

&lt;p&gt;Here is my original use-case which lead to this, please suggest how else I can achieve the same?&lt;/p&gt;

&lt;p&gt;I have a HBase (v0.94.7) table with a single column family and columns are added to it over time. These columns are named as the timestamp they were created, so unless I query the row I do not know what all columns it has.&lt;/p&gt;

&lt;p&gt;Now given a row, I want to &lt;em&gt;atomically&lt;/em&gt; remove all the existing columns of this column family and add a new set of columns and values.&lt;/p&gt;

&lt;p&gt;So I thought of using HBase&apos;s RowMutations like:&lt;/p&gt;

&lt;p&gt;--------------&lt;br/&gt;
RowMutations mutations = new RowMutations(row);&lt;/p&gt;

&lt;p&gt;//delete the column family&lt;br/&gt;
Delete delete = new Delete(row);&lt;br/&gt;
delete.deleteFamily(cf);&lt;/p&gt;

&lt;p&gt;//add new columns&lt;br/&gt;
Put put = new Put(row);&lt;br/&gt;
put.add(cf, col1, v1);&lt;br/&gt;
put.add(cf, col2, v2);&lt;/p&gt;

&lt;p&gt;//delete column family and add new columns to same family&lt;br/&gt;
mutations.add(delete);&lt;br/&gt;
mutations.add(put);&lt;/p&gt;

&lt;p&gt;table.mutateRow(mutations);&lt;br/&gt;
--------------&lt;/p&gt;

&lt;p&gt;But what this code ends up doing is just deleting the column family, it does not add the new columns to the column family.&lt;/p&gt;</comment>
                            <comment id="13669124" author="xieliang007" created="Wed, 29 May 2013 09:50:25 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vinod&quot; class=&quot;user-hover&quot; rel=&quot;vinod&quot;&gt;R vinod kumar&lt;/a&gt;, we(XiaoMi) had a similar scenario like yours, and we introduced a new DeteteFamilyVersion kv type and modified Delete/DeleteTracker/ScanDeleteTracker/ScanQueryMatcher, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=fenghh&quot; class=&quot;user-hover&quot; rel=&quot;fenghh&quot;&gt;Honghua Feng&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13669131" author="vinodv26" created="Wed, 29 May 2013 10:03:38 +0000"  >&lt;p&gt;In the use-case above, the client does not know upfront what all columns the row/column-family has. I guess this would be a common use-case in schema-free data stores like HBase.&lt;/p&gt;

&lt;p&gt;The client now gets a new copy of the entire row, essentially new data for that row which might not have all the columns the row has currently. So it needs to atomically &lt;em&gt;replace&lt;/em&gt; the entire row with this new data.&lt;/p&gt;

&lt;p&gt;So one way I could think of is to use RowMutations to first delete entire column family and then Put the new columns to same column family. &lt;/p&gt;

&lt;p&gt;Another way would be to read the row first to figure out the current columns and then create a non-overlapping set of Puts and Deletes and add those to the RowMutations. But this a check-then-act scenario which can cause inconsistency. Also this causes multiple round trips to the server.&lt;/p&gt;

&lt;p&gt;Any other ways to address this use-case?&lt;/p&gt;</comment>
                            <comment id="13669152" author="apurtell" created="Wed, 29 May 2013 11:09:01 +0000"  >&lt;p&gt;I read this as a request to change RowMutation semantics from a bundle of ops to apply atomically at the exact same time to a bundle of ops to apply atomically,  with each op applied at a motonically increasing time, with row locks providing mutual exclusion. It&apos;s logical enough, then a client can structure the RM with a DeleteColumn first and Puts to the same row+column after, as described for the use case described here. I think that &lt;em&gt;could&lt;/em&gt; be reasonable, but we should take care such that no ops outside the RowMutation bundle can have interleaving timestamps unless the client is providing them, and so is that complication worth it?&lt;/p&gt;</comment>
                            <comment id="13669400" author="yuzhihong@gmail.com" created="Wed, 29 May 2013 16:29:58 +0000"  >&lt;p&gt;In Vinod&apos;s example, only one column family was involved. However, we should consider multiple column families if the feature is supported.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Delete delete1 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Delete(row);
delete1.deleteFamily(cf1);

&lt;span class=&quot;code-comment&quot;&gt;//add &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; columns
&lt;/span&gt;Put put1 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(row);
put1.add(cf1, col1, v1);
put1.add(cf1, col2, v2);

Delete delete2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Delete(row);
delete2.deleteFamily(cf2);

&lt;span class=&quot;code-comment&quot;&gt;//add &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; columns
&lt;/span&gt;Put put2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(row);
put2.add(cf2, col3, v3);
put2.add(cf2, col4, v4);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In the above case, only two distinct timestamps are needed t and t+1 where the Deletes carry t and Puts carry t+1.&lt;/p&gt;</comment>
                            <comment id="13669455" author="lhofhansl" created="Wed, 29 May 2013 17:13:56 +0000"  >&lt;p&gt;The semantics of RowMutation are that all edits are applied in one MVCC snapshot and written to a single WALEdit. There are no assumptions about Put/Delete timestamps whatsoever.&lt;/p&gt;

&lt;p&gt;The client is free to set timestamps as desired. The Vinod&apos;s example above the Puts just need to have a timestamp higher than the Delete. The client can make that so.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; now = &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis();
    Delete delete = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Delete(row);
    delete.deleteFamily(cf1, now);
    
    Put put1 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(row);
    put1.add(cf1,col1,now+1);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let&apos;s not make this more complicated that it has to be. I maintain my -1 on changing this.&lt;/p&gt;</comment>
                            <comment id="13669464" author="yuzhihong@gmail.com" created="Wed, 29 May 2013 17:26:23 +0000"  >&lt;p&gt;What if another client uses the following code where the value of now is the same as the value of now obtained above ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    Delete delete = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Delete(row);
    delete.deleteFamily(cf1, now);

    Put put2 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(row);
    put2.add(cf1, col2, now+1);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Both put1 and put2 would go through, right ?&lt;/p&gt;</comment>
                            <comment id="13669772" author="yuzhihong@gmail.com" created="Wed, 29 May 2013 21:47:36 +0000"  >&lt;p&gt;Maybe we can introduce a special constant, Long.MIN_VALUE+1, e.g. which the user can use for Delete&apos;s in the mutations.&lt;br/&gt;
HRegion would obtain now = System.currentTimeMillis() first.&lt;br/&gt;
When HRegion#doMiniBatchMutation() sees this special constant, it would wait till System.currentTimeMillis() reaches now+1 (let&apos;s represent now+1 as variable t). The Delete&apos;s would be given timestamp equal to t while the Put&apos;s would receive timestamp now.&lt;/p&gt;</comment>
                            <comment id="13669844" author="apurtell" created="Wed, 29 May 2013 22:51:28 +0000"  >&lt;p&gt;I don&apos;t follow Ted. The more I read the less it makes sense to me. I think we would want a widely applicable change not something specific to one use case, only one kind of op ordering. Why are deletes special? Not clear why a magic constant is needed. There&apos;s already a -1 here. Lets resolve as invalid. I&apos;ll add a -1 too, IMO the discussion isn&apos;t productive now. &lt;/p&gt;</comment>
                            <comment id="13669889" author="lhofhansl" created="Wed, 29 May 2013 23:38:37 +0000"  >&lt;p&gt;Thanks Andy. I concur.&lt;/p&gt;

&lt;p&gt;Vinod, does the approach above (where the client sets the TS) solve your problem?&lt;/p&gt;</comment>
                            <comment id="13672702" author="vinodv26" created="Sun, 2 Jun 2013 22:33:22 +0000"  >&lt;p&gt;Lars, the approach you suggest does not work for my use-case because of the race-condition mentioned by Ted in his comment above at:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8626?focusedCommentId=13669464&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13669464&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-8626?focusedCommentId=13669464&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13669464&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Can we extend current RowMutations to support something like what Andrew stated in his previous comment here:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8626?focusedCommentId=13669152&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13669152&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-8626?focusedCommentId=13669152&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13669152&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That would solve my use-case perfectly.&lt;/p&gt;</comment>
                            <comment id="13672737" author="lhofhansl" created="Mon, 3 Jun 2013 00:10:58 +0000"  >&lt;p&gt;You can always have the races when multiple clients issue requests at the same time.&lt;/p&gt;

&lt;p&gt;Two clients could issue a request within the same ms (or in the case of the patch within 1 ms of each other) and the result would still be not what you want - basically there &lt;b&gt;is&lt;/b&gt; no correct order if things happen &quot;at the same time&quot;.&lt;/p&gt;

&lt;p&gt;The race Ted outline is not worth than the one you get with the patch (well the chance might be slightly reduce since writes to the same rows are serialized, so the chance is lessened that the region server does them in the same ms, but it can still happen).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12584879" name="8626-v1.txt" size="12077" author="yuzhihong@gmail.com" created="Sun, 26 May 2013 21:16:44 +0000"/>
                            <attachment id="12584871" name="TestRowMutations.java" size="10105" author="vinodv26" created="Sun, 26 May 2013 14:59:52 +0000"/>
                            <attachment id="12584875" name="tests_for_row_mutations1.patch" size="11664" author="vinodv26" created="Sun, 26 May 2013 17:09:09 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 26 May 2013 18:47:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>329803</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 28 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1kwdz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>330138</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>