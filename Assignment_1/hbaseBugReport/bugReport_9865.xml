<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:08:17 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-9865/HBASE-9865.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-9865] Reused WALEdits in replication may cause RegionServers to go OOM</title>
                <link>https://issues.apache.org/jira/browse/HBASE-9865</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;WALEdit.heapSize() is incorrect in certain replication scenarios which may cause RegionServers to go OOM.&lt;/p&gt;

&lt;p&gt;A little background on this issue.  We noticed that our source replication regionservers would get into gc storms and sometimes even OOM. &lt;br/&gt;
We noticed a case where it showed that there were around 25k WALEdits to replicate, each one with an ArrayList of KeyValues.  The array list had a capacity of around 90k (using 350KB of heap memory) but had around 6 non null entries.&lt;/p&gt;

&lt;p&gt;When the ReplicationSource.readAllEntriesToReplicateOrNextFile() gets a WALEdit it removes all kv&apos;s that are scoped other than local.  &lt;/p&gt;

&lt;p&gt;But in doing so we don&apos;t account for the capacity of the ArrayList when determining heapSize for a WALEdit.  The logic for shipping a batch is whether you have hit a size capacity or number of entries capacity.  &lt;/p&gt;

&lt;p&gt;Therefore if have a WALEdit with 25k entries and suppose all are removed: &lt;br/&gt;
The size of the arrayList is 0 (we don&apos;t even count the collection&apos;s heap size currently) but the capacity is ignored.&lt;br/&gt;
This will yield a heapSize() of 0 bytes while in the best case it would be at least 100000 bytes (provided you pass initialCapacity and you have 32 bit JVM) &lt;/p&gt;

&lt;p&gt;I have some ideas on how to address this problem and want to know everyone&apos;s thoughts:&lt;/p&gt;

&lt;p&gt;1. We use a probabalistic counter such as HyperLogLog and create something like:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;class CapacityEstimateArrayList implements ArrayList
	&lt;ul&gt;
		&lt;li&gt;this class overrides all additive methods to update the probabalistic counts&lt;/li&gt;
		&lt;li&gt;it includes one additional method called estimateCapacity (we would take estimateCapacity - size() and fill in sizes for all references)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Then we can do something like this in WALEdit.heapSize:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; heapSize() {
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ret = ClassSize.ARRAYLIST;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (KeyValue kv : kvs) {
      ret += kv.heapSize();
    }
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; nullEntriesEstimate = kvs.getCapacityEstimate() - kvs.size();
    ret += ClassSize.align(nullEntriesEstimate * ClassSize.REFERENCE);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (scopes != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      ret += ClassSize.TREEMAP;
      ret += ClassSize.align(scopes.size() * ClassSize.MAP_ENTRY);
      &lt;span class=&quot;code-comment&quot;&gt;// TODO &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; isn&apos;t quite right, need help here
&lt;/span&gt;    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ret;
  }	
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2. In ReplicationSource.removeNonReplicableEdits() we know the size of the array originally, and we provide some percentage threshold.  When that threshold is met (50% of the entries have been removed) we can call kvs.trimToSize()&lt;/p&gt;

&lt;p&gt;3. in the heapSize() method for WALEdit we could use reflection (Please don&apos;t shoot me for this) to grab the actual capacity of the list.  Doing something like this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getArrayListCapacity()  {
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      Field f = ArrayList.class.getDeclaredField(&lt;span class=&quot;code-quote&quot;&gt;&quot;elementData&quot;&lt;/span&gt;);
      f.setAccessible(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ((&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;[]) f.get(kvs)).length;
    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
      log.warn(&lt;span class=&quot;code-quote&quot;&gt;&quot;Exception in trying to get capacity on ArrayList&quot;&lt;/span&gt;, e);
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; kvs.size();
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;


&lt;p&gt;I am partial to (1) using HyperLogLog and creating a CapacityEstimateArrayList, this is reusable throughout the code for other classes that implement HeapSize which contains ArrayLists.  The memory footprint is very small and it is very fast.  The issue is that this is an estimate, although we can configure the precision we most likely always be conservative.  The estimateCapacity will always be less than the actualCapacity, but it will be close. I think that putting the logic in removeNonReplicableEdits will work, but this only solves the heapSize problem in this particular scenario.  Solution 3 is slow and horrible but that gives us the exact answer.&lt;/p&gt;

&lt;p&gt;I would love to hear if anyone else has any other ideas on how to remedy this problem?  I have code for trunk and 0.94 for all 3 ideas and can provide a patch if the community thinks any of these approaches is a viable one.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12676743">HBASE-9865</key>
            <summary>Reused WALEdits in replication may cause RegionServers to go OOM</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lhofhansl">Lars Hofhansl</assignee>
                                    <reporter username="churromorales">churro morales</reporter>
                        <labels>
                    </labels>
                <created>Wed, 30 Oct 2013 23:55:59 +0000</created>
                <updated>Tue, 26 Nov 2013 05:53:45 +0000</updated>
                            <resolved>Tue, 12 Nov 2013 22:15:08 +0000</resolved>
                                    <version>0.94.5</version>
                    <version>0.95.0</version>
                                    <fixVersion>0.98.0</fixVersion>
                    <fixVersion>0.96.1</fixVersion>
                    <fixVersion>0.94.14</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13809789" author="yuzhihong@gmail.com" created="Thu, 31 Oct 2013 00:17:30 +0000"  >&lt;p&gt;You may have seen this:&lt;br/&gt;
&lt;a href=&quot;http://stackoverflow.com/questions/2497063/how-to-get-the-capacity-of-the-arraylist-in-java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://stackoverflow.com/questions/2497063/how-to-get-the-capacity-of-the-arraylist-in-java&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13809826" author="lhofhansl" created="Thu, 31 Oct 2013 01:17:12 +0000"  >&lt;p&gt;So if I understand this correctly the gist of the problem is that we&apos;re reusing the WALEdits (see ReplicationHLogReaderManager.readNextAndSetPosition reusing entriesArray), and thus their internal kvs ArrayList can only grow and never shrink. Some of the WALEdits can have a large list of KVs if they were created by a batch operation.&lt;/p&gt;

&lt;p&gt;Calculating the correct heapsize would be pasting over the problem (I think). We should ensure that at some point we can reduce the capacity of the internal kvs array of the reused WALEdit.&lt;/p&gt;

&lt;p&gt;The right point seems to be where the WALEdits are reused for reading. We could look at WALEdit.readFields. There we clear the kvs list (which does not reduce its capacity of course).&lt;/p&gt;

&lt;p&gt;It&apos;s not immediately clear to me what the correct solution is. We do not always want to reset the capacity since that is expensive too and the next time we&apos;ll need to recreate the internal array.&lt;/p&gt;

&lt;p&gt;Upon reuse in WALEdit.readFields, we could check the current size before we call clear, then if the new size is (say) &amp;gt; twice the required size call trimToSize() (which will set capacity to 0). I also think a WALEdit should start with the kvs ArrayList of capacity 1 (rather than the default of 16).&lt;/p&gt;

&lt;p&gt;Or we could a probabilistic approach and reset the ArrayList with a probability proportional to the previous size.&lt;/p&gt;</comment>
                            <comment id="13809828" author="lhofhansl" created="Thu, 31 Oct 2013 01:25:19 +0000"  >&lt;p&gt;Something like this, maybe? Resets a WALEdit&apos;s size when we detect &amp;gt; 99% wastage. This does not have to be perfect, as long as we eventually clear out the extreme outliers.&lt;/p&gt;</comment>
                            <comment id="13809908" author="lhofhansl" created="Thu, 31 Oct 2013 04:43:03 +0000"  >&lt;p&gt;Might actually be better to keep track of the maximum size seen as a proxy for the capacity.&lt;/p&gt;</comment>
                            <comment id="13809935" author="lhofhansl" created="Thu, 31 Oct 2013 05:00:38 +0000"  >&lt;p&gt;Yet another trivial option is to replace kvs.clear() with kvs = new ArrayList&amp;lt;KeyValue&amp;gt;(length) in WALEdit.readFields. &lt;br/&gt;
Which approach is better depends on the variance of the sizes of the WALEdits.&lt;/p&gt;</comment>
                            <comment id="13810543" author="churromorales" created="Thu, 31 Oct 2013 18:43:05 +0000"  >&lt;p&gt;Hi Lars.&lt;/p&gt;

&lt;p&gt;I believe the batching logic in shipping replication logs is incorrect (if we delete  a lot kv&apos;s from the HLogEntry and the number of key values for each entry is sufficiently large).  In this case, the logic which determines batchSize will underestimate the actual heap size required.  We will keep everything in the heap until we ship the edits, after that we can overwrite the values in the array for new HLogEntries and then garbage collection will take care of them.  &lt;/p&gt;

&lt;p&gt;I think the problem is that when we remove quite a kvs from the HLogEntry (ReplicationSource.removeNonReplicableEdits()), we have to account for memory footprint for the ArrayList of kv&apos;s in the heap.&lt;/p&gt;
</comment>
                            <comment id="13810611" author="lhofhansl" created="Thu, 31 Oct 2013 19:40:49 +0000"  >&lt;p&gt;Hi Churro,&lt;/p&gt;

&lt;p&gt;But that is not &quot;useful heap&quot; right? It happens to be an implementation detail of ArrayList. (If we cleared trimToSize()&apos;d each ArrayList we&apos;d be fine.)&lt;/p&gt;

&lt;p&gt;The GC will unfortunately &lt;b&gt;not&lt;/b&gt; take care of it... The elements array in ArrayList will never shrink unless trimToSize() is called. Reusing or clearing the ArrayList will only reset the size member, but not shrink the elements array. That seems to be the core of the problem. As large edit flow though the replication source eventually all reused WALEdits will have been used for an edit with a large number of KVs and hence have their ArrayLists capacity grown accordingly, that memory footprint will never be reduced.&lt;/p&gt;

&lt;p&gt;Rather than accounting for &quot;useless heap&quot; I&apos;d rather not have that heap used in the first place.&lt;/p&gt;</comment>
                            <comment id="13810727" author="churromorales" created="Thu, 31 Oct 2013 21:27:16 +0000"  >&lt;p&gt;Lars, &lt;/p&gt;

&lt;p&gt;You are totally correct, my apologies.  The reuse of the WALEdits allows for only the array list of kv&apos;s to only grow.  In our scenario, we ran a copyTable job to the same cluster (not replicating the new table).  Thus we had batches that were quite large with most of the kv&apos;s being removed from the list as they were not to be replicated.  Quite a few regionservers are OOM&apos;ing well after the job completed, those that removed the kv&apos;s from their replication logs never had the capacity reset.  I agree with you that rather than dealing with the &quot;useless heap&quot; lets not have the arraylist use the heap at all. &lt;/p&gt;
</comment>
                            <comment id="13810774" author="davelatham" created="Thu, 31 Oct 2013 21:54:04 +0000"  >&lt;p&gt;There are actually two issues at play here that can each cause heap problems:&lt;/p&gt;

&lt;p&gt;1. As Churro notes, each time we read a WALEdit then discard KVs that don&apos;t have a proper replication scope set.  We then try to measure the heap used by that WALEdit and only measure the remaining KVs without accounting for the extra ArrayList capacity (which is not currently trimmed).  For this reason we may use far more than &quot;replication.source.size.capacity&quot; memory while replicating a single batch, even if the WALEdits are all new.  So the computed heap usage during a batch is underestimated.&lt;/p&gt;

&lt;p&gt;2. As Lars notes, after using the WALEdit entriesArray for one batch we keep them around to be reused.  Each one contains an ArrayList with capacity at least as large as the largest single WALEdit that occurred in any batch.  So HLogs that have high variance in the size of the batches written will cause each WALEdit to grow large over time.  (We saw a region server go out of memory today using 4 GB of memory for this).  So the heap usage of the replication source as a whole is not checked or compared to replication.source.size.capacity.&lt;/p&gt;

&lt;p&gt;For #1 I&apos;d propose kvs.trimToSize() in ReplicationSource.removeNonReplicableEdits if more than X% of the kvs are removed.&lt;/p&gt;

&lt;p&gt;For #2 I&apos;d propose throwing away the WALEdit reuse altogether unless there are some real numbers about that having significant benefit.  Each time we read it we create all the KeyValue instances and their backing arrays which should be more than the WALEdits in any case.  Trying to keep the arrays mostly reused seems like a recipe for getting them tenured and then making more old gen GC work.&lt;/p&gt;
</comment>
                            <comment id="13810782" author="davelatham" created="Thu, 31 Oct 2013 21:56:41 +0000"  >&lt;p&gt;If we only recycle the kvs arrays during readFields there&apos;s still an ugly case where successive batches use fewer and fewer WALEdits so the tails of the previous batches don&apos;t get GCed and we can still OOM.&lt;/p&gt;</comment>
                            <comment id="13811037" author="lhofhansl" created="Fri, 1 Nov 2013 04:39:41 +0000"  >&lt;p&gt;I agree. A simple approach would be to just create the array of HLog.Entries to replicate, and dump it when done. Would be detrimental in a case where most WALEdits only have a few KVs, in that case we&apos;d produce a lot of extra garbage now. But I think that is a good tradeoff.&lt;/p&gt;</comment>
                            <comment id="13811066" author="lhofhansl" created="Fri, 1 Nov 2013 05:50:26 +0000"  >&lt;p&gt;Another sample patch for 0.94, that does away with the reusable HLog.Entry[], but creates a new local ArrayList&amp;lt;HLogEntry&amp;gt; on each iteration. Actually make some of the code nicer.&lt;br/&gt;
Ran some of the basic replication test, still pass.&lt;/p&gt;

&lt;p&gt;Please have a look. Maybe somebody could try this out in a high volume environment?&lt;/p&gt;</comment>
                            <comment id="13811426" author="davelatham" created="Fri, 1 Nov 2013 16:41:54 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jdcryans&quot; class=&quot;user-hover&quot; rel=&quot;jdcryans&quot;&gt;Jean-Daniel Cryans&lt;/a&gt; Would love to hear your thoughts if you have a chance to read over this issue.&lt;/p&gt;</comment>
                            <comment id="13811524" author="churromorales" created="Fri, 1 Nov 2013 18:16:32 +0000"  >&lt;p&gt;Hi lars, &lt;/p&gt;

&lt;p&gt;Thanks for the patch, I will review and apply it on a few nodes in our cluster to monitor how garbage collection is affected in a high volume environment.  I will let you know the results.  &lt;/p&gt;</comment>
                            <comment id="13811644" author="lhofhansl" created="Fri, 1 Nov 2013 20:46:50 +0000"  >&lt;p&gt;Cool. Thanks Churro. The patch address the #2 issue. I&apos;m less worried about #1 as other than #2 it is not permanent.&lt;/p&gt;

&lt;p&gt;Agree that J-D&apos;s input would be good.&lt;/p&gt;</comment>
                            <comment id="13811667" author="jdcryans" created="Fri, 1 Nov 2013 21:14:02 +0000"  >&lt;p&gt;Story time guys!&lt;/p&gt;

&lt;p&gt;Joking, it&apos;s not that bad. When writing replication&apos;s first version there was a concern that creating all those new objects would be costly, but I don&apos;t think that we&apos;ve ever measured it. Now it looks like that reusing has its own issues. I&apos;m in favor of the latest approach since it does make the code cleaner, KISS. I would be even &quot;+1ier&quot; if we get &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=churromorales&quot; class=&quot;user-hover&quot; rel=&quot;churromorales&quot;&gt;churro morales&lt;/a&gt;&apos;s feedback for his real use case.&lt;/p&gt;</comment>
                            <comment id="13812130" author="lhofhansl" created="Sat, 2 Nov 2013 19:53:24 +0000"  >&lt;p&gt;Trunk version for a full test run.&lt;/p&gt;</comment>
                            <comment id="13812187" author="hadoopqa" created="Sat, 2 Nov 2013 21:29:38 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12611785/9865-trunk.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12611785/9865-trunk.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 2 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7714//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13812236" author="lhofhansl" created="Sun, 3 Nov 2013 01:28:02 +0000"  >&lt;p&gt;Fixing Javadoc and Findbugs warnings.&lt;/p&gt;</comment>
                            <comment id="13812240" author="hadoopqa" created="Sun, 3 Nov 2013 02:58:44 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12611797/9865-trunk-v2.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12611797/9865-trunk-v2.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7717//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13812509" author="lhofhansl" created="Sun, 3 Nov 2013 22:46:00 +0000"  >&lt;p&gt;This is not quite right in the partial read failure case, yet. (a log was partially read and is then found corrupted)&lt;/p&gt;</comment>
                            <comment id="13812626" author="lhofhansl" created="Mon, 4 Nov 2013 05:15:14 +0000"  >&lt;p&gt;I&apos;m trying to grok the details of the failure logic, this has gotten pretty convoluted over time.&lt;br/&gt;
Specifically this part in ReplicationSource.run():&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (readAllEntriesToReplicateOrNextFile(currentWALisBeingWrittenTo)) {
          &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt;;
        }
      } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException ioe) {
         ...
          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.replicationQueueInfo.isQueueRecovered()) {
              ...
              considerDumping = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
              ...
          } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (currentNbEntries != 0) {
            ...
            considerDumping = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
            currentNbEntries = 0;
          }
      ...
      } &lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So when we find a corrupt log file we won&apos;t replicate any of it (&lt;tt&gt;currentNbEntries = 0&lt;/tt&gt;), unless the queue was recovered, in which case we &lt;b&gt;do&lt;/b&gt; want to replicate the partial set of edits we managed to read?&lt;/p&gt;</comment>
                            <comment id="13813072" author="davelatham" created="Mon, 4 Nov 2013 18:10:59 +0000"  >&lt;p&gt;Lars, you beat me to the punch on that read failure case.  I&apos;m also not sure why it is the way it is or how it should be, but noticed the patch had seemed to change it.  Seems like it&apos;s best to replicate all you can for a corrupt log.  JD, any thoughts or more cool stories?&lt;/p&gt;

&lt;p&gt;I also agree that #2 is more serious than #1.  However the issue as filed ad described was targeted at #1.  Lars, what do you think about adding a simple check in ReplicationSource.removeNonReplicableEdits to trimToSize if more than half the KVs are removed?&lt;/p&gt;

&lt;p&gt;A little more background as we&apos;ve deciphered some behavior on our cluster in case anyone is curious.  We&apos;re running clusters in a pair of data centers, and just migrated one of those data centers which involved shutting off replication with one cluster and getting it going with another one.  As part of that process we managed to get some edits stuck in a replication cycle without realizing it ( &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9888&quot; title=&quot;HBase replicates edits written before the replication peer is created&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9888&quot;&gt;HBASE-9888&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7709&quot; title=&quot;Infinite loop possible in Master/Master replication&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7709&quot;&gt;&lt;del&gt;HBASE-7709&lt;/del&gt;&lt;/a&gt; ).  Because those edits got batched up with edits from other clusters ( &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9158&quot; title=&quot;Serious bug in cyclic replication&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9158&quot;&gt;&lt;del&gt;HBASE-9158&lt;/del&gt;&lt;/a&gt; ) it created some enormous edits that varied by position leading to this particular pain.&lt;/p&gt;</comment>
                            <comment id="13813129" author="jeffreyz" created="Mon, 4 Nov 2013 19:14:13 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; The following code is a dead code path and should never be called in current implementation. The handling here is confusing enough though.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (currentNbEntries != 0) {
            ...
            considerDumping = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
            currentNbEntries = 0;
          }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13813155" author="lhofhansl" created="Mon, 4 Nov 2013 19:39:57 +0000"  >&lt;p&gt;Why is that code dead, though? Maybe a few edit are read then we get an IOException. In that case currentNbEntries would be &amp;gt; 0. If the queue was not recovered we could reach this code, no?&lt;/p&gt;</comment>
                            <comment id="13813164" author="lhofhansl" created="Mon, 4 Nov 2013 19:47:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;Lars, what do you think about adding a simple check in ReplicationSource.removeNonReplicableEdits to trimToSize if more than half the KVs are removed?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No harm in that &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I doubt it makes a difference, the worst - and something that just occurred to me - is that all KVs loaded via entriesArray/WALEdit will stay referenced until we reuse the WALEdit. The KVs might themselves be large. If we only have a few large batches followed by only small batches we&apos;ll keep those KVs from the higher indexes in memory forever.&lt;/p&gt;</comment>
                            <comment id="13813190" author="jdcryans" created="Mon, 4 Nov 2013 20:03:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;Why is that code dead, though? Maybe a few edit are read then we get an IOException. In that case currentNbEntries would be &amp;gt; 0. If the queue was not recovered we could reach this code, no?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In readAllEntriesToReplicateOrNextFile we do:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
        entry = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.repLogReader.readNextAndSetPosition(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.entriesArray, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.currentNbEntries);
      } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (IOException ie) {
        LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;Break on IOE: &quot;&lt;/span&gt; + ie.getMessage());
        &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
      }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So that IOE won&apos;t come out. Only seek() and the first readNextAndSetPosition() calls can throw the IOE.&lt;/p&gt;</comment>
                            <comment id="13813308" author="lhofhansl" created="Mon, 4 Nov 2013 21:35:21 +0000"  >&lt;p&gt;Ahh... Cool. I&apos;ll remove that part. I have decouple the ArrayList from the method then, i.e. by just passing in the List.&lt;/p&gt;</comment>
                            <comment id="13813391" author="lhofhansl" created="Mon, 4 Nov 2013 23:01:22 +0000"  >&lt;p&gt;How about this? This should implement the exact same logic.&lt;br/&gt;
The reason why I favor a method local reference for the entries array is that it would be automatically eligible for GC as soon as it gets out of scope.&lt;br/&gt;
With a member we&apos;d have to carefully think about when to recreate the array.&lt;/p&gt;

&lt;p&gt;Also calls trimToSize() when &amp;gt; 1/2 of the KVs of a WALEdit have been removed. Unfortunate we now need to leak the internal implementation detail of WALEdit using an ArrayList for kvs rather than just a List.&lt;/p&gt;</comment>
                            <comment id="13813465" author="hadoopqa" created="Tue, 5 Nov 2013 00:33:10 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12612049/9865-trunk-v3.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12612049/9865-trunk-v3.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 6 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestHRegion&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestHRegionBusyWait&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7729//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13813497" author="lhofhansl" created="Tue, 5 Nov 2013 01:00:47 +0000"  >&lt;p&gt;The test failures are unrelated. Will check the findbugs warnings.&lt;/p&gt;</comment>
                            <comment id="13813523" author="lhofhansl" created="Tue, 5 Nov 2013 01:30:39 +0000"  >&lt;p&gt;None of the classes/methods changed in this patch cause any new findbugs warning. Not sure why it would report this (or I cannot read the find bugs report correctly).&lt;/p&gt;</comment>
                            <comment id="13813675" author="lhofhansl" created="Tue, 5 Nov 2013 05:58:35 +0000"  >&lt;p&gt;Any comments on last patch? Should be good to go.&lt;/p&gt;</comment>
                            <comment id="13814247" author="davelatham" created="Tue, 5 Nov 2013 20:58:08 +0000"  >&lt;p&gt;Looks good to me.  Thanks, Lars.&lt;/p&gt;</comment>
                            <comment id="13814278" author="churromorales" created="Tue, 5 Nov 2013 21:41:30 +0000"  >&lt;p&gt;One thing i noticed in WALEdit, we should be accounting for the ArrayList object as well&lt;br/&gt;
instead of:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; heapSize() {
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ret = 0;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;this would be correct, although it doesn&apos;t matter very much.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; heapSize() {
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; ret = ClassSize.ARRAYLIST;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you didn&apos;t want to bleed the ArrayList implementation that WALEdit uses maybe something like this might work:&lt;br/&gt;
For WALEdit&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void removeIf(Predicate&amp;lt;KeyValue&amp;gt; predicate) {
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = kvs.size()-1; i &amp;gt;= 0; i--) {
      KeyValue kv = kvs.get(i);
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (predicate.apply(kv)) {
        kvs.remove(i);
      }
    }
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (kvs.size() &amp;lt; size()/2) {
       kvs.trimToSize();
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And ReplicationSource would change to:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; void removeNonReplicableEdits(WALEdit edit) {
    &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; NavigableMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;&amp;gt; scopes = edit.getScopes();
    edit.removeIf(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Predicate&amp;lt;KeyValue&amp;gt;() {
      @Override
      &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; apply(KeyValue keyValue) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; scopes == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || !scopes.containsKey(keyValue.getFamily());
      }
    });
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I don&apos;t think it adds much by doing this but it is an alternative if we don&apos;t want to bleed that the WALEdit uses an ArrayList. &lt;/p&gt;</comment>
                            <comment id="13814302" author="lhofhansl" created="Tue, 5 Nov 2013 22:02:05 +0000"  >&lt;p&gt;Thanks Churro (and Dave). While we&apos;re add it, might as well fix WALEdit.heapSize().&lt;br/&gt;
The other change does not help with readability I think. It&apos;s not so bad to leak this out of WALEdit, if anything it declares that this is a random access list.&lt;/p&gt;

&lt;p&gt;I&apos;ll make a 0.94 patch as well. Any chance you would try it on a real cluster?&lt;/p&gt;</comment>
                            <comment id="13814312" author="churromorales" created="Tue, 5 Nov 2013 22:13:23 +0000"  >&lt;p&gt;Hi Lars, &lt;/p&gt;

&lt;p&gt;I&apos;m sure at the very least we will be able to apply it to a few nodes in our cluster and monitor the how this patch affects garbage collection.  Upon gathering results, I will be sure to share.&lt;br/&gt;
Cheers&lt;/p&gt;</comment>
                            <comment id="13814348" author="lhofhansl" created="Tue, 5 Nov 2013 22:43:15 +0000"  >&lt;p&gt;Updated 0.94 patch.&lt;/p&gt;</comment>
                            <comment id="13814349" author="lhofhansl" created="Tue, 5 Nov 2013 22:43:38 +0000"  >&lt;p&gt;Aaaand. Trunk.&lt;/p&gt;</comment>
                            <comment id="13815094" author="jdcryans" created="Wed, 6 Nov 2013 18:12:13 +0000"  >&lt;p&gt;+1, would wait for churro&apos;s cluster testing before committing.&lt;/p&gt;</comment>
                            <comment id="13815162" author="lhofhansl" created="Wed, 6 Nov 2013 19:04:50 +0000"  >&lt;p&gt;If I get time I might write a microtest comparing the reuse approach with new allocations and varying batch sizes.&lt;/p&gt;</comment>
                            <comment id="13820286" author="churromorales" created="Tue, 12 Nov 2013 17:56:43 +0000"  >&lt;p&gt;Okay folks, &lt;/p&gt;

&lt;p&gt;We ran a rack of region servers with the patch.  We increased the new generation sizes in the hopes that these new gc&apos;able objects would never make it into tenured space.  After doing a jmap -histo on the regionservers with the patch applied and those without, I noticed a significant drop in the amount of space taken by Object[] .  This patch has been running in our cluster on a subset of boxes for around a week and everything is looking good from garbage collection to replication lag.&lt;/p&gt;

&lt;p&gt;Thanks to the community!&lt;/p&gt;</comment>
                            <comment id="13820350" author="lhofhansl" created="Tue, 12 Nov 2013 18:52:41 +0000"  >&lt;p&gt;Cool. Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=churromorales&quot; class=&quot;user-hover&quot; rel=&quot;churromorales&quot;&gt;churro morales&lt;/a&gt;. If there are no objections I will commit this to all branches today.&lt;/p&gt;</comment>
                            <comment id="13820539" author="lhofhansl" created="Tue, 12 Nov 2013 22:15:08 +0000"  >&lt;p&gt;Committed to all branches.&lt;br/&gt;
Thanks for unveiling the issues, the reviews, and for testing.&lt;/p&gt;</comment>
                            <comment id="13820897" author="hudson" created="Wed, 13 Nov 2013 03:44:30 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.94-security #334 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security/334/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security/334/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9865&quot; title=&quot;Reused WALEdits in replication may cause RegionServers to go OOM&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9865&quot;&gt;&lt;del&gt;HBASE-9865&lt;/del&gt;&lt;/a&gt; Reused WALEdits in replication may cause RegionServers to go OOM (larsh: rev 1541269)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALEdit.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationHLogReaderManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13820913" author="hudson" created="Wed, 13 Nov 2013 04:01:51 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.94 #1200 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/1200/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/1200/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9865&quot; title=&quot;Reused WALEdits in replication may cause RegionServers to go OOM&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9865&quot;&gt;&lt;del&gt;HBASE-9865&lt;/del&gt;&lt;/a&gt; Reused WALEdits in replication may cause RegionServers to go OOM (larsh: rev 1541269)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALEdit.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationHLogReaderManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13821122" author="hudson" created="Wed, 13 Nov 2013 09:31:04 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.96-hadoop2 #118 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.96-hadoop2/118/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.96-hadoop2/118/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9865&quot; title=&quot;Reused WALEdits in replication may cause RegionServers to go OOM&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9865&quot;&gt;&lt;del&gt;HBASE-9865&lt;/del&gt;&lt;/a&gt; Reused WALEdits in replication may cause RegionServers to go OOM (larsh: rev 1541267)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALEdit.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationHLogReaderManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationHLogReaderManager.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13821466" author="hudson" created="Wed, 13 Nov 2013 16:06:35 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #836 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/836/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/836/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9865&quot; title=&quot;Reused WALEdits in replication may cause RegionServers to go OOM&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9865&quot;&gt;&lt;del&gt;HBASE-9865&lt;/del&gt;&lt;/a&gt; Reused WALEdits in replication may cause RegionServers to go OOM (larsh: rev 1541265)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALEdit.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationHLogReaderManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestWALPlayer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationHLogReaderManager.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13821471" author="hudson" created="Wed, 13 Nov 2013 16:08:59 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #4679 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/4679/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/4679/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9865&quot; title=&quot;Reused WALEdits in replication may cause RegionServers to go OOM&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9865&quot;&gt;&lt;del&gt;HBASE-9865&lt;/del&gt;&lt;/a&gt; Reused WALEdits in replication may cause RegionServers to go OOM (larsh: rev 1541265)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALEdit.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationHLogReaderManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/mapreduce/TestWALPlayer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationHLogReaderManager.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13821742" author="hudson" created="Wed, 13 Nov 2013 19:42:24 +0000"  >&lt;p&gt;SUCCESS: Integrated in hbase-0.96 #188 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.96/188/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.96/188/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9865&quot; title=&quot;Reused WALEdits in replication may cause RegionServers to go OOM&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9865&quot;&gt;&lt;del&gt;HBASE-9865&lt;/del&gt;&lt;/a&gt; Reused WALEdits in replication may cause RegionServers to go OOM (larsh: rev 1541267)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALEdit.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationHLogReaderManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.96/hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestReplicationHLogReaderManager.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13825879" author="lhofhansl" created="Mon, 18 Nov 2013 22:43:54 +0000"  >&lt;p&gt;It turns out this change breaks Phoenix. And older compiled coprocessor is using WALEdit directly, and it is now referring to the getKeyValues that returned a list.&lt;/p&gt;</comment>
                            <comment id="13825881" author="lhofhansl" created="Mon, 18 Nov 2013 22:45:54 +0000"  >&lt;p&gt;Could do what Churro was saying or just cast the returned List to an ArrayList.&lt;/p&gt;</comment>
                            <comment id="13826023" author="hudson" created="Tue, 19 Nov 2013 01:03:59 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.94-security #341 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security/341/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security/341/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9993&quot; title=&quot;0.94: HBASE-9865 breaks coprocessor compatibility with WALEdit.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9993&quot;&gt;&lt;del&gt;HBASE-9993&lt;/del&gt;&lt;/a&gt; 0.94: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9865&quot; title=&quot;Reused WALEdits in replication may cause RegionServers to go OOM&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9865&quot;&gt;&lt;del&gt;HBASE-9865&lt;/del&gt;&lt;/a&gt; breaks coprocessor compatibility with WALEdit. (larsh: rev 1543220)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALEdit.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13826047" author="hudson" created="Tue, 19 Nov 2013 01:25:49 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-0.94 #1207 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/1207/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/1207/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9993&quot; title=&quot;0.94: HBASE-9865 breaks coprocessor compatibility with WALEdit.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9993&quot;&gt;&lt;del&gt;HBASE-9993&lt;/del&gt;&lt;/a&gt; 0.94: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9865&quot; title=&quot;Reused WALEdits in replication may cause RegionServers to go OOM&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9865&quot;&gt;&lt;del&gt;HBASE-9865&lt;/del&gt;&lt;/a&gt; breaks coprocessor compatibility with WALEdit. (larsh: rev 1543220)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALEdit.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.94/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12679831">HBASE-9993</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12611796" name="9865-0.94-v2.txt" size="10172" author="lhofhansl" created="Sun, 3 Nov 2013 01:27:35 +0000"/>
                            <attachment id="12612267" name="9865-0.94-v4.txt" size="10486" author="lhofhansl" created="Tue, 5 Nov 2013 22:43:15 +0000"/>
                            <attachment id="12611557" name="9865-sample-1.txt" size="10023" author="lhofhansl" created="Fri, 1 Nov 2013 05:50:26 +0000"/>
                            <attachment id="12611225" name="9865-sample.txt" size="1257" author="lhofhansl" created="Thu, 31 Oct 2013 01:25:19 +0000"/>
                            <attachment id="12611797" name="9865-trunk-v2.txt" size="12873" author="lhofhansl" created="Sun, 3 Nov 2013 01:28:02 +0000"/>
                            <attachment id="12612049" name="9865-trunk-v3.txt" size="13869" author="lhofhansl" created="Mon, 4 Nov 2013 23:01:22 +0000"/>
                            <attachment id="12612268" name="9865-trunk-v4.txt" size="14047" author="lhofhansl" created="Tue, 5 Nov 2013 22:43:38 +0000"/>
                            <attachment id="12611785" name="9865-trunk.txt" size="12724" author="lhofhansl" created="Sat, 2 Nov 2013 19:53:24 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 31 Oct 2013 00:17:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>356175</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 4 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1pehz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>356463</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>