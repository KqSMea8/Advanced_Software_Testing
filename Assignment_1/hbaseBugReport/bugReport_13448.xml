<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:43:25 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-13448/HBASE-13448.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-13448] New Cell implementation with cached component offsets/lengths</title>
                <link>https://issues.apache.org/jira/browse/HBASE-13448</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;This can be extension to KeyValue and can be instantiated and used in read path.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12819983">HBASE-13448</key>
            <summary>New Cell implementation with cached component offsets/lengths</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12783345">HBASE-13291</parent>
                                    <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="anoop.hbase">Anoop Sam John</assignee>
                                    <reporter username="anoop.hbase">Anoop Sam John</reporter>
                        <labels>
                    </labels>
                <created>Fri, 10 Apr 2015 09:04:01 +0000</created>
                <updated>Mon, 22 Jun 2015 08:27:52 +0000</updated>
                            <resolved>Mon, 22 Jun 2015 05:33:34 +0000</resolved>
                                                    <fixVersion>2.0.0</fixVersion>
                                    <component>Scanners</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="14496786" author="stack" created="Wed, 15 Apr 2015 19:49:18 +0000"  >&lt;p&gt;Clever. Tried it. Some minor discernible benefit (4500nexts/second vs 4600nexts/second &amp;#8211; 2-3%?) in throughput with some extra GC... 15% more?&lt;/p&gt;</comment>
                            <comment id="14497494" author="ram_krish" created="Thu, 16 Apr 2015 03:02:59 +0000"  >&lt;p&gt;Ya 2-3 % max is what we would get. Atleast the hot spot would not be cribbing in the Bytes.toXXX call in these APIs.&lt;br/&gt;
But just curious, why is GC increasing because of this? Am not able to relate. May be am missing something.&lt;/p&gt;</comment>
                            <comment id="14497499" author="stack" created="Thu, 16 Apr 2015 03:10:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;...why is GC increasing because of this?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Objects being read are bigger? Cells are 0-1k in size. This implementation adds what, 3xLongs+2xShorts... whats that? 32bytes on each cell? Could that be the extra 15%?&lt;/p&gt;</comment>
                            <comment id="14497536" author="ram_krish" created="Thu, 16 Apr 2015 04:19:45 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;br/&gt;
So can we try caching only these four &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt; rowLength = -1;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; qualLength = -1;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; keyLength = -1;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; famLength = -1;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;as we did in BufferBackedCell in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11425&quot; title=&quot;Cell/DBB end-to-end on the read-path&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11425&quot;&gt;&lt;del&gt;HBASE-11425&lt;/del&gt;&lt;/a&gt;. Not sure on impact/benefit. Just saying.&lt;/p&gt;
{edit}&lt;br/&gt;
Not sure on impact/benefit. Just saying.  I mean the change that we would get considering the V1 version of this patch.{edit}</comment>
                            <comment id="14497582" author="anoop.hbase" created="Thu, 16 Apr 2015 05:25:59 +0000"  >&lt;p&gt;Even when we parse int/long from KV&apos;s byte[] Unsafe utils are being used. So those were not too costly.  This would better help when we do &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10800&quot; title=&quot;Use CellComparator instead of KVComparator&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10800&quot;&gt;&lt;del&gt;HBASE-10800&lt;/del&gt;&lt;/a&gt; and ServerCell jira as there will be more calls to getXXXOffset and getXXXLengths then.    Ya certain items like ts ( 8 bytes save) can be avoided from cache.   As long as the bigger size are short living and young GC itself can clean them, we need worry much?  The increase in GC is the young GC activity only ?&lt;/p&gt;</comment>
                            <comment id="14498188" author="stack" created="Thu, 16 Apr 2015 15:40:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;The increase in GC is the young GC activity only ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Likely. Lets try and avoid garbage though if we can; garbage == CPU. I&apos;d be interested in a patch that has metrics that show how often these parses are done getting a Cell out to a client; perhaps the key and value lengths are parsed multiple times but say, the timestamp or qualifier once only?&lt;/p&gt;</comment>
                            <comment id="14500517" author="stack" created="Fri, 17 Apr 2015 19:37:25 +0000"  >&lt;p&gt;I think this issue is actually a critical part of our moving to Cell.&lt;/p&gt;

&lt;p&gt;+ Currently, our KeyValue comparators do a bunch of &apos;carry-over&apos; of calculated lengths &amp;#8211; e.g. key, value, row, family, etc., lengths &amp;#8211; from method to method so we don&apos;t have to recalc each time (because reparse costs CPU).&lt;br/&gt;
+ Moving to the Cell Interface and CellComparator, Cell does not expose means for passing &apos;carry-over&apos;s, and besides, carry-overs only boost parse when the Cell is serialized as our KeyValue is now (they may help when the serialization format is otherwise, but may also be of no use).&lt;br/&gt;
+ The CellComparator patch over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10800&quot; title=&quot;Use CellComparator instead of KVComparator&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10800&quot;&gt;&lt;del&gt;HBASE-10800&lt;/del&gt;&lt;/a&gt; which replaces all KeyValueComparators with CellComparator currently preserves methods that take &apos;carry-over&apos;, methods that won&apos;t make much sense when the serialization is other than current KeyValue.&lt;br/&gt;
+  We will need to remove all the carry-over methods in CellComparator to undo our explicit dependence on KeyValue serialization.&lt;/p&gt;

&lt;p&gt;Having the Cell internally do the caching rather than have the caller call the appropriate methods with a carry-over will be the way to go going forward. Cell knows best what needs caching.&lt;/p&gt;</comment>
                            <comment id="14528255" author="anoop.hbase" created="Tue, 5 May 2015 10:51:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;d be interested in a patch that has metrics that show how often these parses are done getting a Cell out to a client; perhaps the key and value lengths are parsed multiple times but say, the timestamp or qualifier once only?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will check and let you know those readings Stack.&lt;/p&gt;</comment>
                            <comment id="14529956" author="anoop.hbase" created="Wed, 6 May 2015 05:29:25 +0000"  >&lt;p&gt;So we can better cache these&lt;br/&gt;
rowLength -  Short - 2 bytes&lt;br/&gt;
keyLength - int       - 4 bytes&lt;br/&gt;
valueLength - int    - 4 bytes&lt;/p&gt;

&lt;p&gt;Total 10 bytes per cell..  The key length parsing is used by multiple items like getFamilyOffset/Length etc.&lt;/p&gt;</comment>
                            <comment id="14530429" author="hadoopqa" created="Wed, 6 May 2015 12:16:12 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12730766/HBASE-13448_V2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12730766/HBASE-13448_V2.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 652929c0ff8c8cec1e86ded834f3e770422b2ace.&lt;br/&gt;
  ATTACHMENT ID: 12730766&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13959//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13959//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13959//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13959//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13959//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13959//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13959//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13959//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14530685" author="stack" created="Wed, 6 May 2015 15:13:46 +0000"  >&lt;p&gt;Can I see code used to make the measurements &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; please?&lt;/p&gt;

&lt;p&gt;Are the counts on a single instance only?&lt;/p&gt;

&lt;p&gt;It is crazy we retrack that much.&lt;/p&gt;

&lt;p&gt;Maybe we should cache more even?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; Here we are going against work you did in past. Your opinion appreciated.  What other tests would you like done?&lt;/p&gt;</comment>
                            <comment id="14530686" author="stack" created="Wed, 6 May 2015 15:14:04 +0000"  >&lt;p&gt;Oh, nice work &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14530836" author="anoop.hbase" created="Wed, 6 May 2015 16:34:25 +0000"  >&lt;p&gt;I just added single KV to table and done a Scan.  The counts are obtained by sysouts in the KV getters.  Simple way.  Just to know which are called most frequently.&lt;/p&gt;</comment>
                            <comment id="14537552" author="stack" created="Mon, 11 May 2015 04:38:31 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; So, a single KV in a clean, new table? And you just did System.out.println in the parse methods? I&apos;m wondering if we shouldn&apos;t dig in more here... Ain&apos;t it kinda crazy that we do a get row length nine times when scan all of a row....and 37 times when we do a get?  I&apos;m thinking of doing your experiment but adding in throws so can see where each call is happening. What you think boss?&lt;/p&gt;</comment>
                            <comment id="14537556" author="ram_krish" created="Mon, 11 May 2015 04:47:13 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;br/&gt;
Did the &apos;get&apos; have any column tracking case ? Just asking. &lt;/p&gt;</comment>
                            <comment id="14537571" author="anoop.hbase" created="Mon, 11 May 2015 05:06:20 +0000"  >&lt;p&gt;Yes Get case had the cols added to it. Means it is using ExplicitColumnTracker.&lt;br/&gt;
Yes Stack, getRowLength() is used many times as many other getXXXLength/getXXXOffset indirectly uses this.&lt;/p&gt;</comment>
                            <comment id="14537577" author="anoop.hbase" created="Mon, 11 May 2015 05:08:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m thinking of doing your experiment but adding in throws so can see where each call is happening.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes am also thinking of doing this to see who all call this. Will do this today Stack.&lt;/p&gt;</comment>
                            <comment id="14537585" author="stack" created="Mon, 11 May 2015 05:18:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;Will do this today Stack.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this will be a good exercise &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; That many calls is pretty amazing.  Keep the code and schema used testing and stick them on here I&apos;d say.&lt;/p&gt;</comment>
                            <comment id="14537639" author="anoop.hbase" created="Mon, 11 May 2015 06:29:04 +0000"  >&lt;p&gt;This is my test&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class MyTest {

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; HBaseTestingUtility TEST_UTIL = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HBaseTestingUtility();
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] row1 = Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;row1&quot;&lt;/span&gt;);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] row2 = Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;row2&quot;&lt;/span&gt;);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] fam = Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;info&quot;&lt;/span&gt;);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] qual = Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;qual&quot;&lt;/span&gt;);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] val = Bytes.toBytes(&lt;span class=&quot;code-quote&quot;&gt;&quot;value1&quot;&lt;/span&gt;);

  @Rule
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; TestName TEST_NAME = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TestName();

  @BeforeClass
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void setupBeforeClass() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    TEST_UTIL.startMiniCluster(2);
  }

  @Test
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testSimpleScan() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Throwable {
    TableName tableName = TableName.valueOf(TEST_NAME.getMethodName());
    Table table = TEST_UTIL.createTable(tableName, fam);
    Put put = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(row1);
    put.addColumn(fam, qual, val);
    table.put(put);
    /*put = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(row2);
    put.addColumn(fam, qual, val);
    table.put(put);*/
    Scan s = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Scan();
    &lt;span class=&quot;code-comment&quot;&gt;//s.addColumn(fam, qual);
&lt;/span&gt;    s.setCaching(1);
    ResultScanner scanner = table.getScanner(s);
    Result res = scanner.next();
    
    /*Get get = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Get(row1);
    get.addColumn(fam, qual);
    res = table.get(get);
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(res);*/
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&apos;&lt;br/&gt;
Above is the Scan test.&lt;br/&gt;
Yes, this is a new clean table with only one cell in it.&lt;br/&gt;
Scan with out ExplicitColumnTracker&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt; getRowLength() {
    &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Exception(&lt;span class=&quot;code-quote&quot;&gt;&quot;getRowLength &amp;gt; &quot;&lt;/span&gt; + &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;).printStackTrace();
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Bytes.toShort(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.bytes, getKeyOffset());
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Just using the above in getRowLength() method of KeyValue, am tracking the usage.&lt;/p&gt;

&lt;p&gt;getRowLength - 6&lt;br/&gt;
RegionScannerImpl.nextInternal(HRegion.java:5509)&lt;br/&gt;
StoreScanner.next(StoreScanner.java:509)&lt;br/&gt;
ScanQueryMatcher.match(ScanQueryMatcher.java:281)&lt;br/&gt;
Above 3 are direct calls to getRowLength&lt;/p&gt;

&lt;p&gt;SQM.match (Line 308 and 309) calls getQualOffset() and getQualLength which in turn calls getRowLength() on same KV 3 times!&lt;/p&gt;</comment>
                            <comment id="14537685" author="anoop.hbase" created="Mon, 11 May 2015 07:34:52 +0000"  >&lt;p&gt;Doing more tests around Scan (with out ExplicitColumnTracker), it depends on the number of rows/cols also&lt;br/&gt;
On the 1st cell in 1st row we have 6 calls to getRowLength and on subsequent cols it is 4&lt;br/&gt;
On the 2nd row onwards instead of 6, it will be 9 calls.&lt;br/&gt;
Again in all these tests, the cells come from memstore alone (one scanner).  When we have 1 memstore scanner + N StoreFiles, it will be more calls.&lt;/p&gt;

&lt;p&gt;Am checking the ECT case,  there the calls to getRowLength() is many more because it is being indirectly used by almost all other getXXXLength/Offset methods&lt;/p&gt;</comment>
                            <comment id="14539554" author="anoop.hbase" created="Tue, 12 May 2015 09:05:57 +0000"  >&lt;p&gt;Using below addition in KeyValue.java we can better track #calls &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @Override
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt; getRowLength() {
    incInvokeCounts(&lt;span class=&quot;code-quote&quot;&gt;&quot;getRowLength&quot;&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Bytes.toShort(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.bytes, getKeyOffset());
  }
  
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, StringBuilder&amp;gt;&amp;gt;&amp;gt; invokeCounts = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, StringBuilder&amp;gt;&amp;gt;&amp;gt;();
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; NEW_LINE = &apos;\n&apos;;
  
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void incInvokeCounts(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; method, Cell thisObj){
    ByteBufferOutputStream os = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ByteBufferOutputStream(100);
    &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Exception().printStackTrace(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PrintStream(os));
    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bb = os.getByteBuffer().array();
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset = nThIndexOf(bb, NEW_LINE, 3) + 1;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; endOffset = nThIndexOf(bb, NEW_LINE, 9);
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; msg = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (endOffset == -1) {
      msg = Bytes.toString(bb, offset);
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      msg = Bytes.toString(bb, offset, (endOffset - 1 - offset));
    }
    msg = msg.replaceAll(&lt;span class=&quot;code-quote&quot;&gt;&quot;\\r?\\n\\tat&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot; -&amp;gt; &quot;&lt;/span&gt;);
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; s = thisObj.toString();
    &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; key = s.substring(0, s.lastIndexOf(&apos;/&apos;));
    Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, StringBuilder&amp;gt;&amp;gt; methodMap = invokeCounts.get(method);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(methodMap == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;){
      methodMap =  &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HashMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, StringBuilder&amp;gt;&amp;gt;();
      invokeCounts.put(method, methodMap);
    }
    Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, StringBuilder&amp;gt; p = methodMap.get(key);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(p == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;){
      p = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, StringBuilder&amp;gt;(0, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; StringBuilder());
      methodMap.put(key, p);
    }
    p.setFirst(p.getFirst().intValue()+1);
    StringBuilder sb = p.getSecond();
    sb.append(&apos;\n&apos;).append(msg);
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void printInvokeCounts() {
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Entry&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, StringBuilder&amp;gt;&amp;gt;&amp;gt; entry : invokeCounts.entrySet()) {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Entry&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, Pair&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;, StringBuilder&amp;gt;&amp;gt; e : entry.getValue().entrySet()) {
        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(e.getKey() + &lt;span class=&quot;code-quote&quot;&gt;&quot;#&quot;&lt;/span&gt; + entry.getKey() + &lt;span class=&quot;code-quote&quot;&gt;&quot;  :  &quot;&lt;/span&gt; + e.getValue().getFirst());
        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(e.getValue().getSecond().toString());
      }

      &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(&lt;span class=&quot;code-quote&quot;&gt;&quot;=================================================&quot;&lt;/span&gt;);
    }
  }

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void cleanInvokeCounts() {
    invokeCounts.clear();
  }

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; nThIndexOf(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] array, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; target, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; n) {
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; c = 1;
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; array.length; i++) {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (array[i] == target) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(c==n) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; i;
        c++;
      }
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14539665" author="anoop.hbase" created="Tue, 12 May 2015 11:16:47 +0000"  >&lt;p&gt;Table with CF and testing with 3 rows and 3 cells in each row&lt;br/&gt;
Scan with out ExplicitColumnTracker and no stop row specified&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Method&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;First cell in first row&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;First cell in other rows&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Other cells&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getRowOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getRowLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getFamilyOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getFamilyLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getQualifierOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getQualifierLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getTimestamp&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getTypeByte&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getValueLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;#getKeyLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Scan with ExplicitColumnTracker&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Method&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;First cell in first row&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;First cell in other rows&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Other cells&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getRowOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getRowLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;20&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;19&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;15&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getFamilyOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getFamilyLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getQualifierOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getQualifierLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getTimestamp&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getTypeByte&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getValueLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getKeyLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Similarly there are so many calls on getXXXOffset/Length on fake cells. (Like the oldest/latest cells on a row etc)&lt;/p&gt;</comment>
                            <comment id="14539992" author="stack" created="Tue, 12 May 2015 15:11:57 +0000"  >&lt;p&gt;Is there too much machinery involved to run a jmh micro-benchmark on cache vs non-caching of row offset, row length (and whatever you think we should cache)?&lt;/p&gt;

&lt;p&gt;Numbers are pretty crazy &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; You going to do more compares? Adding explicit tracker and pure get of a single cell? Nice work.&lt;/p&gt;</comment>
                            <comment id="14540108" author="ram_krish" created="Tue, 12 May 2015 16:01:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is there too much machinery involved to run a jmh micro-benchmark on cache vs non-caching of row offset, row length (and whatever you think we should cache)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Should be possible.  You want me to measure how much difference between caching and non-caching.  JMH would give a very big difference I feel. &lt;/p&gt;</comment>
                            <comment id="14540180" author="stack" created="Tue, 12 May 2015 16:43:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;JMH would give a very big difference I feel.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How would you do it? Could you run against the Region API only? If so, that might be a good-to-have going forward, a JMH example that does not require servers to start, etc.&lt;/p&gt;

&lt;p&gt;I&apos;m looking to see if we can run some tests over here too...&lt;/p&gt;</comment>
                            <comment id="14540269" author="ram_krish" created="Tue, 12 May 2015 17:20:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;How would you do it? Could you run against the Region API only? If so, that might be a good-to-have going forward, a JMH example that does not require servers to start, etc.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What I was thinking is mimic the compares that we do say when we do a scan with explicit column tracking and there have this with patch and without patch mode.&lt;/p&gt;</comment>
                            <comment id="14540283" author="stack" created="Tue, 12 May 2015 17:26:09 +0000"  >&lt;p&gt;How would you mimic? How much code would you have to write and how close would it be to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&apos;s runs? Might have to go that route if a Region is too heavyweight for jmh (too many moving parts) but would be cool if we had a little test bench for region instances (Would implementing the Table Interface with an HRegion instance make stuff easier?  Probably too big a project).&lt;/p&gt;</comment>
                            <comment id="14541269" author="ram_krish" created="Wed, 13 May 2015 03:51:43 +0000"  >&lt;p&gt;What I was thinking is that if the report says identifies the number of times the getXXX are invoked for a case with simple scan and a case with trackers with scans, only mimic those comparison part alone. But I got your intention, you would like to have a HRegion itself and the entire scan flow going thro it. &lt;/p&gt;</comment>
                            <comment id="14541276" author="anoop.hbase" created="Wed, 13 May 2015 04:02:54 +0000"  >&lt;blockquote&gt;&lt;p&gt;Numbers are pretty crazy Anoop Sam John You going to do more compares? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I have details from where each call comes in (not adding here right now)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Adding explicit tracker and pure get of a single cell?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Get with out ExplcitColumnTracker&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Method&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;First cell in row&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Other cells in row&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;First cell in next row&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getRowOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getRowLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;12&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getFamilyOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getFamilyLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getQualifierOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getQualifierLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getTimestamp&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getTypeByte&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getValueLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getKeyLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Get with ExplicitColumnTracker&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Method&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;First cell in row&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;Other cells in row&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getRowOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getRowLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;25&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;17&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getFamilyOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getFamilyLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getQualifierOffset&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getQualifierLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getTimestamp&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getTypeByte&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getValueLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;getKeyLength&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;12&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</comment>
                            <comment id="14541278" author="anoop.hbase" created="Wed, 13 May 2015 04:05:58 +0000"  >&lt;p&gt;We can actually instantiate standalone HRegion (we do in tests).  May be need to create a stub for the HFileReader which just returns an in memory HFile block?  Will see more. That test will be good to do JMH kind of micro benchmark but E2E scan flow. (Atleast from HRegion onward)&lt;/p&gt;</comment>
                            <comment id="14541294" author="stack" created="Wed, 13 May 2015 04:25:44 +0000"  >&lt;p&gt;I think a JMH against region only &amp;#8211; no servers &amp;#8211; would be nice tool going forward and would be good for the argument as to why we have to bulk up Cells.&lt;/p&gt;

&lt;p&gt;Crazy numbers &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14548595" author="anoop.hbase" created="Mon, 18 May 2015 19:26:32 +0000"  >&lt;p&gt;getRowLength() and getKeyLength() are getting called and data getting parsed more times.  Caching these 2 items only.  Any others come in later in profiling, we can add then.  This can go in as a 1st step &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                            <comment id="14549119" author="stack" created="Mon, 18 May 2015 20:12:28 +0000"  >&lt;p&gt;+1 on v3 patch. Change name of class to SizeCachedKeyValue on commit.  Maybe add to the class comment a pointer to here so &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; doesn&apos;t remove it (again). Fix this sentence on commit too: &quot; * Note: Please do not use these objects in write path and it will increase the heap space usage.&quot;&lt;/p&gt;</comment>
                            <comment id="14549145" author="anoop.hbase" created="Mon, 18 May 2015 20:23:39 +0000"  >&lt;p&gt;Thanks Stack. Will fix the comments on commit.&lt;/p&gt;</comment>
                            <comment id="14549347" author="lhofhansl" created="Mon, 18 May 2015 22:08:02 +0000"  >&lt;p&gt;Please gimme a day or so to look through this issue.&lt;/p&gt;

&lt;p&gt;Want to make sure we&apos;re not falling into the micro-benchmark trap. In the past i have been &lt;em&gt;removing&lt;/em&gt; things like this. It looked bad in a profiler, but with a sampler it turned out not to be useful, and just waste HEAP, be cache line unfriendly, etc, etc.&lt;/p&gt;

&lt;p&gt;2-3% does not seem to worth it on first glance. Are these end-to-end perf numbers?&lt;/p&gt;</comment>
                            <comment id="14549386" author="stack" created="Mon, 18 May 2015 22:31:41 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We are going this route to save CPU &amp;#8211; the length parses show in macro profiling as costly &amp;#8211; and to simplify code: all over our codebase we are doing carry-overs, passing a parsed length found in one method as input on other methods as we walk through the elements of a Cell/KeyValue. These latter won&apos;t always make sense as Cell implementations are different and rather than do them arbitrarily around the code base, rather let the Cell do the length caching. See &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13448?focusedCommentId=14500517&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14500517&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-13448?focusedCommentId=14500517&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14500517&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14549859" author="lhofhansl" created="Tue, 19 May 2015 06:14:05 +0000"  >&lt;p&gt;What about key length? Not all Cells will have a notion of a key length, I thought we&apos;re going to get rid of it (rather than now cementing its use more by caching the key length).&lt;/p&gt;

&lt;p&gt;Are there some perf numbers (single machine is fine)? Or else we&apos;re flying blind (Apologies if I missed them. What I see from the comments here is s 2-3% perf improvement at the expense of 15% of young GC, am I reading that correctly?) &lt;/p&gt;</comment>
                            <comment id="14549869" author="ram_krish" created="Tue, 19 May 2015 06:22:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;Not all Cells will have a notion of a key length, I thought we&apos;re going to get rid of it (rather than now cementing its use more by caching the key length).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I would say &apos;yes&apos;, we are getting rid of it even now.  But KeyValue, a type of Cell works based on keylength and where ever KeyValue is used in read side its better to cache it (the perf reading part wrt GC need to check and decide though).  Overall the read path is actually not bothered about how the key or the key length is getting used.  Previously the read path was directly using the key or keylength and trying to infer the details about a Cell.&lt;br/&gt;
As Stack said a Cell would know what to be cached. If you take any cell coming from the encoders we don&apos;t do this.&lt;/p&gt;
</comment>
                            <comment id="14549944" author="anoop.hbase" created="Tue, 19 May 2015 07:06:18 +0000"  >&lt;p&gt;Thanks Ram..  He explained it mostly.&lt;br/&gt;
Yes we are not adding keylength stufff back.  This is only within a specific Cell impl, ie. KeyValue where key length make sense.   You can see above how many times we call each of the methods in read of a cell.  As per that it is clear that keylength calc is happening more often, as this is needed by some other offset/length.&lt;/p&gt;

&lt;p&gt;Yes 2-3% gain only what I also saw in a small single node run.  But Stack ran the test on V1 patch where I tried to cache many other items. Per KeyValue object we were adding some 24+ bytes extra cost. The latest version of patch just adds 6 bytes extra.  Yet to take a GC reading. Will do that.  Any chance of giving a try in ur cluster Stack?&lt;/p&gt;

&lt;p&gt;As Stack explained, we are trying to get rid of caching the offset/length and passing it around in the read path. We used to pass byte[] , offset, length .  This is part of the offheap read work where we better pass the Cell.   As the subtasks of that gets done, we will tend to call these getters more and caching makes more sense then.&lt;/p&gt;</comment>
                            <comment id="14550736" author="stack" created="Tue, 19 May 2015 16:35:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;What about key length? Not all Cells will have a notion of a key length, I thought we&apos;re going to get rid of it (rather than now cementing its use more by caching the key length).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We ARE getting rid of the notion of key length being scattered around the code base. In its place, Cell implementations figure what needs to be cached. Whatever caching is done is encapsulated by the Cell implementation.&lt;/p&gt;

&lt;p&gt;No harm gating this on new numbers. Let me try and get to it (Any luck w/ a Region-based jmh implementation &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; / &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; ?)&lt;/p&gt;

&lt;p&gt;Again, to be clear:&lt;/p&gt;

&lt;p&gt;+ This patch brings minor throughput improvement at the cost of some more GC&lt;br/&gt;
+ This patch simplifies code path removing a bunch of housekeeping &apos;carrying-over&apos; calculated lengths done in various locations such as SQM and elsewhere where we do Cell compares.&lt;/p&gt;
</comment>
                            <comment id="14551120" author="lhofhansl" created="Tue, 19 May 2015 20:06:24 +0000"  >&lt;p&gt;I&apos;ll also get some numbers. Not trying to be an ass here, BTW. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Cell&apos;s deciding what to cache, avoiding carry-over, etc, I get it. How far do we get by just caching row length (not key-length)?&lt;/p&gt;

&lt;p&gt;I also looked back at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7279&quot; title=&quot;Avoid copying the rowkey in RegionScanner, StoreScanner, and ScanQueryMatcher&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7279&quot;&gt;&lt;del&gt;HBASE-7279&lt;/del&gt;&lt;/a&gt;, there I removed the row cache (where we copy and cache the row key as well as the timestamp cache). Those didn&apos;t help in the sampler sessions I did. Saying that: Caching row-length and key-length is different, and does not necessarily go against what I wanted to achieve in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7279&quot; title=&quot;Avoid copying the rowkey in RegionScanner, StoreScanner, and ScanQueryMatcher&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7279&quot;&gt;&lt;del&gt;HBASE-7279&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
It&apos;s just that I&apos;ve seen more issues with GC than wasted CPU.&lt;/p&gt;

&lt;p&gt;If we can back it up by numbers, let&apos;s do it. The row length cache seems fine (just 2 bytes, and called often), I&apos;m more dubious about the key length cache.&lt;/p&gt;</comment>
                            <comment id="14551200" author="lhofhansl" created="Tue, 19 May 2015 20:53:47 +0000"  >&lt;p&gt;Here&apos;s an 0.98 version I made (easier for me to test with).&lt;/p&gt;</comment>
                            <comment id="14551228" author="hadoopqa" created="Tue, 19 May 2015 21:07:26 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12733951/13291-0.98.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12733951/13291-0.98.txt&lt;/a&gt;&lt;br/&gt;
  against 0.98 branch at commit 74e5b26e57ef8d31723ff05ff913bad7f92a7518.&lt;br/&gt;
  ATTACHMENT ID: 12733951&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14098//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14098//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14551555" author="lhofhansl" created="Wed, 20 May 2015 00:33:12 +0000"  >&lt;p&gt;My 0.98 patch must be wrong.&lt;br/&gt;
Am seeing it taking more time with the patch than without (I&apos;m doing runs of 3 and measure the standard deviation, so it&apos;s not a test anomaly at least).&lt;/p&gt;

&lt;p&gt;10m rows, 5 cols each, 1 version, 8 byte keys, 8 byte values.&lt;br/&gt;
Scan scanning over all rows filtering everything at the server with a ValueFilter. Everything in the blockcache. Numbers in seconds (mean and standard deviation):&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;tracker&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;w/ patch&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;w/o patch&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;explicit&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;m=7.5 s=0.01&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;m=7.03 s=0.006&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;wildcard&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;m=6.278 s=0.005&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;m=5.59 s=0.004&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Not trusting my 0.98 patch now. Will take another look at it. And I will also test with only caching the row length.&lt;/p&gt;</comment>
                            <comment id="14551562" author="lhofhansl" created="Wed, 20 May 2015 00:37:20 +0000"  >&lt;p&gt;The 0.98 patch doesn&apos;t have the new classes in it (forgot to git-add them, but they were in the build).&lt;/p&gt;</comment>
                            <comment id="14551827" author="stack" created="Wed, 20 May 2015 05:18:56 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; for trying the test. Onus on us now.&lt;/p&gt;</comment>
                            <comment id="14552177" author="anoop.hbase" created="Wed, 20 May 2015 11:51:33 +0000"  >&lt;p&gt;Seeing the number of times the getKeyLength() call happens and the decoding of the keylength,  I feel we have to cache that also.  I can see this keylength decoding is required while getting length/offset like qualifier.  The calls to these will be more as we do other cleanup (mentioned by Stack)   While we did profiling with offheap work and patch, we saw this getKeyLength() also in hot path.&lt;/p&gt;</comment>
                            <comment id="14552722" author="lhofhansl" created="Wed, 20 May 2015 17:35:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;keylength, I feel we have to cache that also&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is very hard to quantify GC cost. A run might finish very quickly, but generate a lot of garbage that is collected later, slowing things down then.&lt;br/&gt;
Let&apos;s get numbers so that we do not have to guess what we should do &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I&apos;ll double check my 0.98 patch and test run (I don&apos;t see how the patch would make things slower, so there must something I am not doing right).&lt;/p&gt;</comment>
                            <comment id="14552739" author="lhofhansl" created="Wed, 20 May 2015 17:42:05 +0000"  >&lt;p&gt;Full 0.98 patch this time.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, did I miss anything in that patch? I&apos;ll do my test-run again, and lemme tune GC a bit more careful on my test box (since this is an important part)&lt;/p&gt;</comment>
                            <comment id="14553700" author="ram_krish" created="Thu, 21 May 2015 06:21:06 +0000"  >&lt;p&gt;The 0.98 patch is fine.  &lt;/p&gt;</comment>
                            <comment id="14557128" author="lhofhansl" created="Sat, 23 May 2015 04:43:52 +0000"  >&lt;p&gt;Trying same scan test on another machine now.&lt;/p&gt;</comment>
                            <comment id="14557136" author="lhofhansl" created="Sat, 23 May 2015 05:19:38 +0000"  >&lt;p&gt;Similar on other machine. Same setup as above.&lt;/p&gt;

&lt;p&gt;Wildcard tracker w/ patch: 7.4s&lt;br/&gt;
Wildcard tracker w/o patch: 7.3s&lt;br/&gt;
Explicit tracker w/ patch: 8.7s&lt;br/&gt;
Explicit tracker w/o patch: 8.5s&lt;/p&gt;</comment>
                            <comment id="14557138" author="anoop.hbase" created="Sat, 23 May 2015 05:23:40 +0000"  >&lt;p&gt;That is strange!  Whether you tracked GC activity? With patch GC overhead is much more?&lt;/p&gt;</comment>
                            <comment id="14557141" author="anoop.hbase" created="Sat, 23 May 2015 05:28:16 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;  you have done the test on V1 patch and V3, we cache less items. Any chance for a run in ur test env too?  Let me give one run on a single node with FIlterAll PE.&lt;/p&gt;</comment>
                            <comment id="14557144" author="lhofhansl" created="Sat, 23 May 2015 05:36:19 +0000"  >&lt;p&gt;Same with FAST_DIFF encoding (so 10m rows, 5 cols, 1 version, FAST_DIFF encoded, everything in block cache, and filtered at the server with the ValueFilter):&lt;/p&gt;

&lt;p&gt;Wildcard tracker w/ patch: 12.2s&lt;br/&gt;
Wildcard tracker w/o patch: 11.7s&lt;br/&gt;
Explicit tracker w/ patch: 13.5s&lt;br/&gt;
Explicit tracker w/o patch: 13.5s&lt;/p&gt;</comment>
                            <comment id="14557147" author="anoop.hbase" created="Sat, 23 May 2015 05:39:32 +0000"  >&lt;p&gt;With FAST_DIFF DBE, we wont come into this change.. There wont be new KeyValue impls comes out of the scanner layers.. Still there is a change with and with out patch? !!&lt;/p&gt;</comment>
                            <comment id="14557152" author="anoop.hbase" created="Sat, 23 May 2015 05:44:55 +0000"  >&lt;p&gt;Oh.. The ClonnedSeekerState optimization not there in 0.98 ? Am not sure.. I was always checking with trunk.&lt;/p&gt;</comment>
                            <comment id="14557153" author="lhofhansl" created="Sat, 23 May 2015 05:46:35 +0000"  >&lt;p&gt;My test is quite specific in that the entire scan happens on the region server, because all Cells are filtered there. I do this in order to find out how much overhead the server has. It&apos;s possible that if the Cells would not be filtered and more calls to getRowLength would happen.&lt;/p&gt;

&lt;p&gt;I have not specifically tracked GC activity. I ran the test many times in a loop, first warming up the region server a few times, then running it a few time in order to capture some GC activity in the run times.&lt;/p&gt;

&lt;p&gt;My main comment stands: Just because we call getRowLength a bunch, or a profiler says it&apos;s inefficient, doesn&apos;t mean it&apos;s bad. Only a real test can bear that out. For this case it&apos;s best (I think) to test with just a single region server to keep network variance out of the picture (and this is a region server local optimization anyway).&lt;/p&gt;

&lt;p&gt;I don&apos;t know how to explain the numbers, yet. It is possible that reading the length from a member leads to less efficient cache line utilization compared to decoding it from the byte[] each time... That would heavily depend on the specific call sequence.&lt;/p&gt;

&lt;p&gt;Lemme try with only caching the row key.&lt;/p&gt;</comment>
                            <comment id="14557156" author="lhofhansl" created="Sat, 23 May 2015 05:48:03 +0000"  >&lt;p&gt;ClonnedSeekerState? Can you point me to patch. Maybe that explains the difference...?&lt;/p&gt;</comment>
                            <comment id="14557164" author="ram_krish" created="Sat, 23 May 2015 06:23:47 +0000"  >&lt;p&gt;We can test with a PE tool on a single RS by enabling filterAll with tracker and without tracker.  I think trunk would give a better picture because we are now not explicitly passing the rowlength, rowkeys etcs to the comparators.&lt;/p&gt;</comment>
                            <comment id="14557168" author="anoop.hbase" created="Sat, 23 May 2015 06:35:08 +0000"  >&lt;p&gt;Doing it again now Ram.&lt;br/&gt;
Using PE tool on a single RS. Data loaded using PE tool using default setting. I think it will load 1024*1024 rows with single cell in each column and each cell value size 1000 bytes.&lt;br/&gt;
Now doing a range scan for 10K range (Also am changing PE tool to fix the start and stop row so always it scans same rows) and filterAll. (Doing only for NO explicit tracker case).  Doing it with 1 client thread as well as 20 threads.&lt;/p&gt;</comment>
                            <comment id="14557179" author="anoop.hbase" created="Sat, 23 May 2015 06:53:32 +0000"  >&lt;p&gt;One thing to note regarding the number of calls to getXXXLengths() is that I have done it on case where cells are returned. Some calls might be happening after the FIlter#filterKeyValue().  So when we test with filter all which filters cells with call to Filter#filterKeyValue(Cell),  we might not be hitting the same getXXXLength() calls those many times.&lt;br/&gt;
Done the above PE tests. The gain is not so much still with patch is better than trunk always&lt;/p&gt;

&lt;p&gt; With patch&lt;br/&gt;
 20 client threads&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 14566ms    Max: 15352ms    Avg: 15106ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 14333ms    Max: 15328ms    Avg: 14982ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 14446ms    Max: 15259ms    Avg: 14914ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 14417ms    Max: 15307ms    Avg: 14990ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 14695ms    Max: 15585ms    Avg: 15152ms&lt;/p&gt;

&lt;p&gt;1 client thread&lt;br/&gt;
7857ms&lt;br/&gt;
8115ms&lt;br/&gt;
7994ms&lt;br/&gt;
8149ms&lt;br/&gt;
7925ms&lt;br/&gt;
8051ms&lt;br/&gt;
8005ms&lt;br/&gt;
8083ms&lt;/p&gt;


&lt;p&gt;trunk&lt;br/&gt;
20 client threads&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 14552ms    Max: 15760ms    Avg: 15242ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 14507ms    Max: 15495ms    Avg: 15204ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 14271ms    Max: 15251ms    Avg: 14835ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 14483ms    Max: 15504ms    Avg: 15235ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 14761ms    Max: 15658ms    Avg: 15243ms&lt;/p&gt;

&lt;p&gt;1 client thread&lt;br/&gt;
8170ms&lt;br/&gt;
8064ms&lt;br/&gt;
8191ms&lt;br/&gt;
8150ms&lt;br/&gt;
8143ms&lt;br/&gt;
8307ms&lt;br/&gt;
8215ms&lt;br/&gt;
8281ms&lt;/p&gt;
</comment>
                            <comment id="14557182" author="ram_krish" created="Sat, 23 May 2015 06:57:40 +0000"  >&lt;p&gt;I would suggest in the FilterAllFilter you could make the filterKeyValue to INCLUDE and filterRow to NEXT.  So almost all the cells will be included and only the row is excluded. &lt;br/&gt;
But in a normal PE case only one cell is added so may not be of much impact, not sure.&lt;/p&gt;</comment>
                            <comment id="14557190" author="stack" created="Sat, 23 May 2015 07:11:48 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; My rig currently occupied. Will try when freed up. Will try on 0.98 so can compare to Lars&apos; runs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; You&apos;ve pasted your rig somewhere? It is a straight scan end to end? How to replicate?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think trunk would give a better picture because we are now not explicitly passing the rowlength, rowkeys etcs to the comparators.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True but even not doing this, I would think that the caching of a few vital lengths that are reconstructed repeatedly would make our perf be the same if not better (Lars is finding otherwise).&lt;/p&gt;


</comment>
                            <comment id="14557541" author="lhofhansl" created="Sat, 23 May 2015 21:53:39 +0000"  >&lt;p&gt;It&apos;s just a straight scan end-to-end. If you promise to not judge on the hacked up code I&apos;ll post it here (maybe I&apos;ll clean it up some).&lt;/p&gt;

&lt;p&gt;So it&apos;s entirely possible that we do many more calls to getRowLength and friend in trunk, and that that would tip the scale in favor of the patch. &lt;br/&gt;
Just passing Cells to the comparators - as we do in trunk now - is certainly much nicer. In the past I have usually not pursued optimization that yielded a &amp;lt; 5% improvement. Can we look at the comparators and see if we can modify them such that they are more cache line friendly (i.e. not jumping around in the backing byte[]). &lt;/p&gt;

&lt;p&gt;After all my previous testing I am biased now, but I feel that caching things like these just work around the issue.&lt;/p&gt;</comment>
                            <comment id="14557598" author="anoop.hbase" created="Sun, 24 May 2015 01:26:47 +0000"  >&lt;p&gt;Pls share test. Will run it with trunk. Thanks Lars.&lt;/p&gt;</comment>
                            <comment id="14564589" author="anoop.hbase" created="Fri, 29 May 2015 11:13:22 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=larsh&quot; class=&quot;user-hover&quot; rel=&quot;larsh&quot;&gt;larsh&lt;/a&gt; can you share test pls?&lt;/p&gt;

&lt;p&gt;After going through 0.98 code &lt;br/&gt;
In ur test the data is major compacted? If so only one file and there won&apos;t be comparisons in the KVHeap under the StoreScanner.  So the call to getXXXOffset/Length happens in StoreScanner and then in SQM. But seeing SQM, we are finding the length/offset using parsing on KeyValue#getBuffer() returned byte[].  Then the KVs are skipped using the ValueFilter.  So in total the actual calls to getXXXLength()/Offset happens mostly one time only. Can be a reason why no perf gain we get.  Still 8.4 sec to 8.5 secs is like a 1% degrade and am not sure why so. GC is creating overhead? Or this is just a noise?&lt;/p&gt;

&lt;p&gt;Said so, I feel this is good to go in for trunk considering the #calls to these offset/lengths. SQM layer and all it has increased only.   The calls will be more when we have more store files in a store and/or more than one store etc.&lt;/p&gt;

&lt;p&gt;As my Table in above comments it shows the #calls to each of these getters in case of single CF and single storefile in that. Still the calls are more and when the stores and /or store files are more it will become more only.&lt;/p&gt;

&lt;p&gt;BTW I have also noticed one more issue with 0.98.  Here we have HFile V2 as default and that is not having Tags.  We have done optimization so that when the tags length is 0 we will create a NoTagsKeyValue which avoids getTagsLength() overhead. In HfileReaderV3 the impl is correct. But HFileV2 (which is the default in 0.98) returns KeyValue. Here we can always return NoTagsKeyValue. I can raise a Jira and give a fix.&lt;/p&gt;</comment>
                            <comment id="14564593" author="anoop.hbase" created="Fri, 29 May 2015 11:17:14 +0000"  >&lt;p&gt;Also one more point to say.  In 0.98 the decision of switching region happens based on KeyValue#heapSizeWithoutTags() and server also similar decides max #cells to return.  We had bugs around this and fixed..  Now if we add a KV extension with more heap size and add that extra #bytes in heapSizeWithoutTags() , similar bug will come again.  Any way in ur test it wont come as all Cells are filtered at server.  Just saying.  Trunk fixed this issue already and this is only a 2.0 issue.&lt;/p&gt;</comment>
                            <comment id="14566230" author="lhofhansl" created="Sat, 30 May 2015 22:33:27 +0000"  >&lt;p&gt;I&apos;d read 8.4s vs 8.5s that there was no statistically significant improvement not that the new code is necessary slower (there was variance in the test runs that was sometimes systemics across many runs).&lt;/p&gt;

&lt;p&gt;Yes, the table was fully compacted. So what&apos;s best way to test this? When data is sent back to the client, a percent or two saved should be insignificant compared to the cost of creating the result object and shipping that to the client.&lt;/p&gt;

&lt;p&gt;My overall comment still stands: For 1 or 2% perf improvement it might not be worth increasing the memory footprint of the data, which is already high. Ideally a Cell (and especially KeyValue) is passed around just as a pointer, the closest thing we have to that in Java is a handle of a byte[] + offset into the array. Anything is overhead until we prove it is not &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Yeah, let&apos;s fix that thingy in 0.98.&lt;/p&gt;</comment>
                            <comment id="14566385" author="lhofhansl" created="Sun, 31 May 2015 06:21:38 +0000"  >&lt;p&gt;And, of course, if you all think this is needed, I won&apos;t -1 it.&lt;/p&gt;</comment>
                            <comment id="14566404" author="anoop.hbase" created="Sun, 31 May 2015 07:22:22 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=larsh&quot; class=&quot;user-hover&quot; rel=&quot;larsh&quot;&gt;larsh&lt;/a&gt; thanks for the comments&lt;/p&gt;

&lt;p&gt;I was trying to explain why we won&apos;t see any improve as such in the test and especially  in 0.98. Sorry if I was not clearly saying.&lt;br/&gt;
Test have 1 CF and single file in that. Under StoreScanner KVHeap, we have only single file always and there is no comparison happening and no calls to getXXXOffset/Length there.  There is get calls in StoreScanner (max 2 times) and then in SQM also we need component offset/length.  But in SQM we dont do get calls on KeyValue to get offset/length.  Instead we calculate there on parsing KV buffer on our own. (See code below). Then SQM is skipping these cells and so no further get calls on the cells.  So in effect there is 2 times get call on rowLength and just one time on others.  This makes it clear why no adv.&lt;br/&gt;
In a real case where Cells are not skipped (and in trunk especially) there are many times call happen and mainly on rowLength.  When ExplicitColTracker in use, there are calls to qualifier offset/length also many times.  For other component length/offset, the keyLength is parsed frequently.  If u see table in above comments you can see how many times each call happen on a single Cell. Those numbers are when cells are written back to client side so comes in all layes.  But in that test also I had only 1 CF and one HFile.  So when this is also getting more, there will be comparison op happening in 2 KVHeaps and so the calls will be more. (We no longer pass the byte[], offset, length into Comparators but instead pass Cell alone)&lt;/p&gt;

&lt;p&gt;So in case of trunk there will be adv we would see..  If you can give us your test, I will run it on trunk.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] bytes = kv.getBuffer();
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset = kv.getOffset();

    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; keyLength = Bytes.toInt(bytes, offset, Bytes.SIZEOF_INT);
    offset += KeyValue.ROW_OFFSET;

    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; initialOffset = offset;

    &lt;span class=&quot;code-object&quot;&gt;short&lt;/span&gt; rowLength = Bytes.toShort(bytes, offset, Bytes.SIZEOF_SHORT);
    offset += Bytes.SIZEOF_SHORT;

    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.rowComparator.compareRows(row, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.rowOffset, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.rowLength,
        bytes, offset, rowLength);
...
...

&lt;span class=&quot;code-comment&quot;&gt;//Passing rowLength
&lt;/span&gt;    offset += rowLength;

    &lt;span class=&quot;code-comment&quot;&gt;//Skipping family
&lt;/span&gt;    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; familyLength = bytes [offset];
    offset += familyLength + 1;

    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; qualLength = keyLength -
      (offset - initialOffset) - KeyValue.TIMESTAMP_TYPE_SIZE;

    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; timestamp = Bytes.toLong(bytes, initialOffset + keyLength - KeyValue.TIMESTAMP_TYPE_SIZE);
	...
	...
&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; type = bytes[initialOffset + keyLength - 1];
...
MatchCode colChecker = columns.checkColumn(bytes, offset, qualLength, type);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (colChecker == MatchCode.INCLUDE) {
      ReturnCode filterResponse = ReturnCode.SKIP;
      &lt;span class=&quot;code-comment&quot;&gt;// STEP 2: Yes, the column is part of the requested columns. Check &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; filter is present
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (filter != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
        &lt;span class=&quot;code-comment&quot;&gt;// STEP 3: Filter the key value and &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; it filters out
&lt;/span&gt;        filterResponse = filter.filterKeyValue(kv);

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14566650" author="lhofhansl" created="Sun, 31 May 2015 18:23:14 +0000"  >&lt;p&gt;Oh I get this. Hence in my test I only see the disadvantage of extra heap used. That&apos;s why I asked how to best this. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;So I&apos;ll test with multiple CFs (maybe one per column) and also not compact the table.&lt;/p&gt;</comment>
                            <comment id="14587989" author="anoop.hbase" created="Tue, 16 Jun 2015 12:50:17 +0000"  >&lt;p&gt;Running PE test with scanRange10000 and rows set to 1000. Have 20 client threads.  So every thread scanning 10K rows(cells) 1000 times. ie. Every thread doing 10 million cells read. All cells are filtered using &apos;--filterAll&apos; option. All data is in L1 cache.&lt;br/&gt;
I have repeated this PE run for 5 times and taking avg of each threads avg total run time (for 10 million cells)&lt;/p&gt;

&lt;p&gt;Master - 17132.6&lt;br/&gt;
With patch - 15958.4&lt;/p&gt;

&lt;p&gt;This mean a redution of ~7% in latency with patch.&lt;/p&gt;

&lt;p&gt;Detailed thread timings&lt;br/&gt;
Master&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 16529ms    Max: 17617ms    Avg: 17331ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 16646ms    Max: 17628ms    Avg: 17245ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 16346ms    Max: 17193ms    Avg: 16902ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 16473ms    Max: 17473ms    Avg: 17144ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 16396ms    Max: 17382ms    Avg: 17041ms&lt;/p&gt;


&lt;p&gt;With patch&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 15224ms    Max: 16294ms    Avg: 15984ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 15048ms    Max: 16334ms    Avg: 15908ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 15409ms    Max: 16216ms    Avg: 15946ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 15574ms    Max: 16402ms    Avg: 16118ms&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt;        Min: 15380ms    Max: 16090ms    Avg: 15836ms&lt;/p&gt;</comment>
                            <comment id="14588249" author="hadoopqa" created="Tue, 16 Jun 2015 15:42:39 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12739855/HBASE-13448_V4.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12739855/HBASE-13448_V4.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit a10a82a8ff2babefbfafe7c323d88eb85f2be52c.&lt;br/&gt;
  ATTACHMENT ID: 12739855&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1908 checkstyle errors (more than the master&apos;s current 1906 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14435//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14435//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14435//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14435//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14435//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14435//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14435//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14435//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14435//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14435//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14588417" author="stack" created="Tue, 16 Jun 2015 17:30:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; One CF?  7% is a nice improvement sir.  I guess there was some more GC going on.&lt;/p&gt;

&lt;p&gt;What say you &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;I&apos;m +1 for commit.&lt;/p&gt;</comment>
                            <comment id="14588426" author="anoop.hbase" created="Tue, 16 Jun 2015 17:35:07 +0000"  >&lt;p&gt;Yep. This is default PE tool setup. So 1 CF and 1 qualifier only. The data is not major compacted. Now in trunk we have done some jiras which avoid caching of length/offset. As that goes on this Jira is important IMO.&lt;/p&gt;</comment>
                            <comment id="14588537" author="lhofhansl" created="Tue, 16 Jun 2015 18:36:08 +0000"  >&lt;p&gt;A longer test running for for 5 or 10 mins, would be a better indicator as it would capture GC pauses.&lt;/p&gt;

&lt;p&gt;A non-committal -0 from.&lt;br/&gt;
I.e. feel free to commit if you&apos;re absolutely sure it&apos;s better. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14591236" author="anoop.hbase" created="Thu, 18 Jun 2015 04:36:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;A longer test running for for 5 or 10 mins, would be a better indicator as it would capture GC pauses&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Running PE scanRange10000  with rows=100000 so that the test runs longer. (around 15 mns). Here is the result&lt;br/&gt;
Master&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt; Min: 928521ms   Max: 948676ms   Avg: 939301ms&lt;br/&gt;
With patch&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; hbase.PerformanceEvaluation: &lt;span class=&quot;error&quot;&gt;&amp;#91;RandomScanWithRange10000Test&amp;#93;&lt;/span&gt; Min: 839790ms   Max: 856261ms   Avg: 848221ms&lt;/p&gt;</comment>
                            <comment id="14591270" author="stack" created="Thu, 18 Jun 2015 05:23:14 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="14591736" author="ram_krish" created="Thu, 18 Jun 2015 12:54:58 +0000"  >&lt;p&gt;+1 on patch. Perf gain seems significant though not negligable. Thanks for the perseverance &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14591924" author="anoop.hbase" created="Thu, 18 Jun 2015 14:51:06 +0000"  >&lt;p&gt;Fixed an old comment from Stack regarding class name and checkstyle comment.&lt;br/&gt;
Thanks all for the reviews.&lt;br/&gt;
Will commit once QA result is clean.&lt;/p&gt;</comment>
                            <comment id="14592647" author="lhofhansl" created="Thu, 18 Jun 2015 22:19:26 +0000"  >&lt;p&gt;Cool. Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14593216" author="anoop.hbase" created="Fri, 19 Jun 2015 08:53:43 +0000"  >&lt;p&gt;Attaching same patch for a QA run.&lt;/p&gt;</comment>
                            <comment id="14594052" author="hadoopqa" created="Fri, 19 Jun 2015 22:39:49 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12740605/HBASE-13448_V5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12740605/HBASE-13448_V5.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 8ae4b374e3fa4cd54b8b83bc857d41f0678ad9b6.&lt;br/&gt;
  ATTACHMENT ID: 12740605&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestCheckAndMutate&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestRowProcessorEndpoint&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityWithCheckAuths&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestTableInputFormatScan2&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestServerCustomProtocol&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestPerColumnFamilyFlush&lt;br/&gt;
                  org.apache.hadoop.hbase.TestFullLogReconstruction&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestWALRecordReader&lt;br/&gt;
                  org.apache.hadoop.hbase.TestLocalHBaseCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestRegionObserverBypass&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestTableSnapshotInputFormat&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestSnapshotFromClientWithRegionReplicas&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestClassLoading&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestWALPlayer&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestCoprocessorStop&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.wal.TestWALReplay&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.wal.TestLogRolling&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestClusterId&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestClientOperationInterrupt&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestOpenTableInCoprocessor&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestRestoreSnapshotFromClient&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelsWithDistributedLogReplay&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestMultiParallel&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestScannerRetriableFailure&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestCompactionWithCoprocessor&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestSecureLoadIncrementalHFilesSplitRecovery&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestCellCounter&lt;br/&gt;
                  org.apache.hadoop.hbase.io.hfile.TestHFileBlockIndex&lt;br/&gt;
                  org.apache.hadoop.hbase.util.hbck.TestOfflineMetaRebuildOverlap&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestFSErrorsExposed&lt;br/&gt;
                  org.apache.hadoop.hbase.zookeeper.lock.TestZKInterProcessReadWriteLock&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestDefaultScanLabelGeneratorStack&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRegionServerHostname&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestCompaction&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestMergeTool&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestScannerWithBulkload&lt;br/&gt;
                  org.apache.hadoop.hbase.io.encoding.TestChangingEncoding&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestTags&lt;br/&gt;
                  org.apache.hadoop.hbase.client.replication.TestReplicationAdminWithClusters&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRegionMergeTransactionOnCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRowTooBig&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestBatchCoprocessorEndpoint&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestHBaseFsck&lt;br/&gt;
                  org.apache.hadoop.hbase.snapshot.TestSecureExportSnapshot&lt;br/&gt;
                  org.apache.hadoop.hbase.snapshot.TestExportSnapshot&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestCompactionState&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestWALObserver&lt;br/&gt;
                  org.apache.hadoop.hbase.zookeeper.TestZKLeaderManager&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestHLogRecordReader&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestFromClientSide3&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestHRegion&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRegionReplicas&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRegionServerMetrics&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestCloneSnapshotFromClientWithRegionReplicas&lt;br/&gt;
                  org.apache.hadoop.hbase.zookeeper.TestZooKeeperNodeTracker&lt;br/&gt;
                  org.apache.hadoop.hbase.security.access.TestCellACLs&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestMultiTableInputFormat&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestMiniClusterLoadParallel&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestPutWithDelete&lt;br/&gt;
                  org.apache.hadoop.hbase.TestHBaseOnOtherDfsCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestCompoundBloomFilter&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestCoprocessorScanPolicy&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestHTableWrapper&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelsWithDeletes&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestImportTSVWithTTLs&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestStore&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestDoubleColumnInterpreter&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestScannersFromClientSide&lt;br/&gt;
                  org.apache.hadoop.hbase.io.hfile.TestForceCacheImportantBlocks&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestCorruptedRegionStoreFile&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestHFileOutputFormat2&lt;br/&gt;
                  org.apache.hadoop.hbase.snapshot.TestFlushSnapshotFromClient&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestSizeFailures&lt;br/&gt;
                  org.apache.hadoop.hbase.TestJMXListener&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestCloneSnapshotFromClient&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestHashTable&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityLablesWithGroups&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestCacheOnWriteInSchema&lt;br/&gt;
                  org.apache.hadoop.hbase.TestGlobalMemStoreSize&lt;br/&gt;
                  org.apache.hadoop.hbase.TestMovedRegionsCleaner&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestParallelPut&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestHTableMultiplexerFlushCache&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestCoprocessorTableEndpoint&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestRegionServerObserver&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestMinorCompaction&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestSnapshotFromClient&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestPriorityRpc&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestRpcControllerFactory&lt;br/&gt;
                  org.apache.hadoop.hbase.backup.TestHFileArchiving&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestRegionSplitter&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestAggregateProtocol&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestHRegionOnCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestSnapshotMetadata&lt;br/&gt;
                  org.apache.hadoop.hbase.zookeeper.TestZKMulti&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRegionFavoredNodes&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestHCM&lt;br/&gt;
                  org.apache.hadoop.hbase.procedure.TestZKProcedure&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestMasterAddressTracker&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestReplicasClient&lt;br/&gt;
                  org.apache.hadoop.hbase.security.token.TestZKSecretWatcher&lt;br/&gt;
                  org.apache.hadoop.hbase.TestNamespace&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRecoveredEdits&lt;br/&gt;
                  org.apache.hadoop.hbase.wal.TestDefaultWALProvider&lt;br/&gt;
                  org.apache.hadoop.hbase.security.access.TestAccessControlFilter&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestResultSizeEstimation&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestLoadIncrementalHFilesSplitRecovery&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestImportExport&lt;br/&gt;
                  org.apache.hadoop.hbase.TestAcidGuarantees&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestDefaultMemStore&lt;br/&gt;
                  org.apache.hadoop.hbase.security.access.TestScanEarlyTermination&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRegionReplicaFailover&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestHMasterRPCException&lt;br/&gt;
                  org.apache.hadoop.hbase.trace.TestHTraceHooks&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestImportTSVWithVisibilityLabels&lt;br/&gt;
                  org.apache.hadoop.hbase.wal.TestBoundedRegionGroupingProvider&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestMultithreadedTableMapper&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRSKilledWhenInitializing&lt;br/&gt;
                  org.apache.hadoop.hbase.security.access.TestWithDisabledAuthorization&lt;br/&gt;
                  org.apache.hadoop.hbase.io.hfile.TestCacheOnWrite&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestMasterCoprocessorExceptionWithAbort&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestGetClosestAtOrBefore&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRegionServerNoMaster&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestScannerHeartbeatMessages&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestConnectionCache&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestRegionObserverInterface&lt;br/&gt;
                  org.apache.hadoop.hbase.snapshot.TestSnapshotClientRetries&lt;br/&gt;
                  org.apache.hadoop.hbase.TestMultiVersions&lt;br/&gt;
                  org.apache.hadoop.hbase.zookeeper.TestRecoverableZooKeeper&lt;br/&gt;
                  org.apache.hadoop.hbase.client.replication.TestReplicationAdmin&lt;br/&gt;
                  org.apache.hadoop.hbase.TestMetaTableLocator&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestTableMapReduce&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestSplitLogWorker&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestLoadIncrementalHFiles&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRegionServerOnlineConfigChange&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestRegionPlacement2&lt;br/&gt;
                  org.apache.hadoop.hbase.security.access.TestAccessController2&lt;br/&gt;
                  org.apache.hadoop.hbase.TestPartialResultsFromClientSide&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelsWithCustomVisLabService&lt;br/&gt;
                  org.apache.hadoop.hbase.util.hbck.TestOfflineMetaRebuildBase&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestSplitTransactionOnCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestMajorCompaction&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.wal.TestDurability&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestRegionServerCoprocessorExceptionWithAbort&lt;br/&gt;
                  org.apache.hadoop.hbase.TestRegionRebalancing&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelsReplication&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelsOpWithDifferentUsersNoACL&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestHRegionReplayEvents&lt;br/&gt;
                  org.apache.hadoop.hbase.security.access.TestZKPermissionsWatcher&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.wal.TestWALReplayCompressed&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestMultiTableSnapshotInputFormat&lt;br/&gt;
                  org.apache.hadoop.hbase.TestZooKeeper&lt;br/&gt;
                  org.apache.hadoop.hbase.wal.TestDefaultWALProviderWithHLogKey&lt;br/&gt;
                  org.apache.hadoop.hbase.wal.TestWALSplitCompressed&lt;br/&gt;
                  org.apache.hadoop.hbase.procedure.TestZKProcedureControllers&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestHTableMultiplexer&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.wal.TestFSHLog&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestTableInputFormat&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestSecureLoadIncrementalHFiles&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestHBaseFsckEncryption&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestRegionServerCoprocessorEndpoint&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.compactions.TestCompactionWithThroughputController&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestReversibleScanners&lt;br/&gt;
                  org.apache.hadoop.hbase.wal.TestWALReaderOnSecureWAL&lt;br/&gt;
                  org.apache.hadoop.hbase.quotas.TestQuotaAdmin&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestTableSnapshotScanner&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestTimeRangeMapRed&lt;br/&gt;
                  org.apache.hadoop.hbase.io.encoding.TestEncodedSeekers&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestClientScannerRPCTimeout&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestEncryptionRandomKeying&lt;br/&gt;
                  org.apache.hadoop.hbase.wal.TestWALSplit&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestMetaWithReplicas&lt;br/&gt;
                  org.apache.hadoop.hbase.quotas.TestQuotaTableUtil&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestHFileOutputFormat&lt;br/&gt;
                  org.apache.hadoop.hbase.ipc.TestDelayedRpc&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestTableInputFormatScan1&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestRegionServerReportForDuty&lt;br/&gt;
                  org.apache.hadoop.hbase.namespace.TestNamespaceAuditor&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestHRegionServerBulkLoad&lt;br/&gt;
                  org.apache.hadoop.hbase.util.hbck.TestOfflineMetaRebuildHole&lt;br/&gt;
                  org.apache.hadoop.hbase.wal.TestSecureWAL&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestSnapshotCloneIndependence&lt;br/&gt;
                  org.apache.hadoop.hbase.security.access.TestTablePermissions&lt;br/&gt;
                  org.apache.hadoop.hbase.security.access.TestNamespaceCommands&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestUpdateConfiguration&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestFromClientSideNoCodec&lt;br/&gt;
                  org.apache.hadoop.hbase.TestMetaTableAccessor&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestMultiColumnScanner&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestRowCounter&lt;br/&gt;
                  org.apache.hadoop.hbase.TestMetaTableAccessorNoCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestFromClientSideWithCoprocessor&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestScannerTimeout&lt;br/&gt;
                  org.apache.hadoop.hbase.io.hfile.TestScannerSelectionUsingTTL&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestAdmin1&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestWithDisabledAuthorization&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestAtomicOperation&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestFastFail&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestMasterCoprocessorExceptionWithRemove&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestAdmin2&lt;br/&gt;
                  org.apache.hadoop.hbase.security.access.TestAccessController&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestMiniClusterLoadSequential&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.wal.TestLogRollAbort&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestMergeTable&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.wal.TestLogRollPeriod&lt;br/&gt;
                  org.apache.hadoop.hbase.util.TestMiniClusterLoadEncoded&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestEncryptionKeyRotation&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestBlocksRead&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestRegionObserverScannerOpenHook&lt;br/&gt;
                  org.apache.hadoop.hbase.quotas.TestQuotaThrottle&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelsWithDefaultVisLabelService&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestSeekOptimizations&lt;br/&gt;
                  org.apache.hadoop.hbase.wal.TestWALFactory&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestFromClientSide&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestLoadIncrementalHFilesUseSecurityEndPoint&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestImportTSVWithOperationAttributes&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestTimestampsFilter&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelsWithACL&lt;br/&gt;
                  org.apache.hadoop.hbase.security.access.TestCellACLWithMultipleVersions&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestJoinedScanners&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestReplicaWithCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.wal.TestWALFiltering&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.wal.TestProtobufLog&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestBigDecimalColumnInterpreter&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestEnforcingScanLabelGenerator&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestSplitWalDataLoss&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestSyncTable&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestEndToEndSplitTransaction&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.wal.TestSecureWALReplay&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestRegionServerCoprocessorExceptionWithRemove&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestSCVFWithMiniCluster&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelsWithSLGStack&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestClientTimeouts&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestHRegionPartitioner&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestMasterObserver&lt;br/&gt;
                  org.apache.hadoop.hbase.security.visibility.TestVisibilityLabelReplicationWithExpAsString&lt;br/&gt;
                  org.apache.hadoop.hbase.backup.example.TestZooKeeperTableArchiveClient&lt;br/&gt;
                  org.apache.hadoop.hbase.snapshot.TestRestoreFlushSnapshotFromClient&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestRestoreSnapshotFromClientWithRegionReplicas&lt;br/&gt;
                  org.apache.hadoop.hbase.io.hfile.TestHFileSeek&lt;br/&gt;
                  org.apache.hadoop.hbase.security.token.TestGenerateDelegationToken&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestCopyTable&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestImportTsv&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestMasterFailover&lt;br/&gt;
                  org.apache.hadoop.hbase.TestInfoServers&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestMultipleTimestamps&lt;br/&gt;
                  org.apache.hadoop.hbase.client.TestClientPushback&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestCoprocessorEndpoint&lt;br/&gt;
                  org.apache.hadoop.hbase.io.encoding.TestLoadAndSwitchEncodeOnDisk&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 3 zombie test(s): 	at org.apache.hadoop.hbase.ipc.TestProtoBufRpc.testProtoBufRpc(TestProtoBufRpc.java:125)&lt;br/&gt;
	at org.apache.phoenix.mapreduce.IndexToolIT.testSecondaryIndex(IndexToolIT.java:131)&lt;br/&gt;
	at org.apache.phoenix.mapreduce.IndexToolIT.testMutableGlobalIndex(IndexToolIT.java:84)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14470//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14470//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14470//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14470//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14470//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14470//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14470//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14470//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14594411" author="anoop.hbase" created="Sat, 20 Jun 2015 05:24:18 +0000"  >&lt;p&gt;Attaching same patch for a QA run.  Last time all tests failed.. Seems not able to load some HTrace classes!  retry..&lt;/p&gt;</comment>
                            <comment id="14594619" author="hadoopqa" created="Sat, 20 Jun 2015 14:01:16 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12740799/HBASE-13448_V5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12740799/HBASE-13448_V5.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit db08013ebeeaa85802d9795cc72b4c29c5338a47.&lt;br/&gt;
  ATTACHMENT ID: 12740799&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn post-site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14485//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14485//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14485//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14485//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14485//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14485//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14485//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14485//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14595143" author="hadoopqa" created="Sun, 21 Jun 2015 17:42:27 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12740915/HBASE-13448_V5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12740915/HBASE-13448_V5.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit e4d8fab104d6c4edc8721ee14238fcc59bd203d0.&lt;br/&gt;
  ATTACHMENT ID: 12740915&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14490//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14490//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14490//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14490//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14490//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14490//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/14490//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/14490//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14595382" author="anoop.hbase" created="Mon, 22 Jun 2015 05:25:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;TEST-org.apache.hadoop.hbase.master.TestDistributedLogSplitting.xml.&amp;lt;init&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Test failure not related to this patch. Will be committing now.&lt;/p&gt;</comment>
                            <comment id="14595390" author="anoop.hbase" created="Mon, 22 Jun 2015 05:33:34 +0000"  >&lt;p&gt;Pushed to master.  Thanks all for the reviews.&lt;/p&gt;</comment>
                            <comment id="14595496" author="hudson" created="Mon, 22 Jun 2015 08:27:52 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6588 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6588/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6588/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13448&quot; title=&quot;New Cell implementation with cached component offsets/lengths&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13448&quot;&gt;&lt;del&gt;HBASE-13448&lt;/del&gt;&lt;/a&gt; New Cell implementation with cached component offsets/lengths. (anoopsamjohn: rev a4bd2b784e6da17e7b81b8666c876ebc716e167b)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/SizeCachedNoTagsKeyValue.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/SizeCachedKeyValue.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12734167" name="13448-0.98.txt" size="10498" author="lhofhansl" created="Wed, 20 May 2015 17:42:05 +0000"/>
                            <attachment id="12725310" name="HBASE-13448.patch" size="5801" author="anoop.hbase" created="Tue, 14 Apr 2015 18:54:19 +0000"/>
                            <attachment id="12730766" name="HBASE-13448_V2.patch" size="11146" author="anoop.hbase" created="Wed, 6 May 2015 07:47:16 +0000"/>
                            <attachment id="12733602" name="HBASE-13448_V3.patch" size="11248" author="anoop.hbase" created="Mon, 18 May 2015 19:26:32 +0000"/>
                            <attachment id="12739855" name="HBASE-13448_V4.patch" size="8208" author="anoop.hbase" created="Tue, 16 Jun 2015 12:50:17 +0000"/>
                            <attachment id="12740915" name="HBASE-13448_V5.patch" size="8187" author="anoop.hbase" created="Sun, 21 Jun 2015 15:10:38 +0000"/>
                            <attachment id="12725663" name="gc.png" size="17388" author="stack" created="Wed, 15 Apr 2015 19:49:18 +0000"/>
                            <attachment id="12725662" name="hits.png" size="10694" author="stack" created="Wed, 15 Apr 2015 19:49:18 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>8.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 15 Apr 2015 19:49:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 25 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2d35j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>