<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:20:12 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-17018/HBASE-17018.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-17018] Spooling BufferedMutator</title>
                <link>https://issues.apache.org/jira/browse/HBASE-17018</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;For Yarn Timeline Service v2 we use HBase as a backing store.&lt;br/&gt;
A big concern we would like to address is what to do if HBase is (temporarily) down, for example in case of an HBase upgrade.&lt;/p&gt;

&lt;p&gt;Most of the high volume writes will be mostly on a best-effort basis, but occasionally we do a flush. Mainly during application lifecycle events, clients will call a flush on the timeline service API. In order to handle the volume of writes we use a BufferedMutator. When flush gets called on our API, we in turn call flush on the BufferedMutator.&lt;/p&gt;

&lt;p&gt;We would like our interface to HBase be able to spool the mutations to a filesystems in case of HBase errors. If we use the Hadoop filesystem interface, this can then be HDFS, gcs, s3, or any other distributed storage. The mutations can then later be re-played, for example through a MapReduce job.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13017903">HBASE-17018</key>
            <summary>Spooling BufferedMutator</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jrottinghuis">Joep Rottinghuis</reporter>
                        <labels>
                    </labels>
                <created>Fri, 4 Nov 2016 02:09:13 +0000</created>
                <updated>Fri, 16 Dec 2016 18:28:10 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>13</watches>
                                                                                                            <comments>
                            <comment id="15634962" author="jrottinghuis" created="Fri, 4 Nov 2016 02:16:05 +0000"  >&lt;p&gt;Attaching PDF with additional background, discussion of failure modes we&apos;d like to cover, some thoughts on implementation, and a list of open questions.&lt;/p&gt;</comment>
                            <comment id="15634964" author="jrottinghuis" created="Fri, 4 Nov 2016 02:17:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sduskis&quot; class=&quot;user-hover&quot; rel=&quot;sduskis&quot;&gt;Solomon Duskis&lt;/a&gt; I&apos;ve made you a watcher of this jira, since we discussed this at the last HBase meetup in NYC.&lt;/p&gt;</comment>
                            <comment id="15635154" author="yangzhe1991" created="Fri, 4 Nov 2016 04:06:59 +0000"  >&lt;p&gt;An interesting and useful feature &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;

&lt;p&gt;Cassandra has a feature/api called &quot;atomic batches&quot;. If the client get response from server, we can say all mutations have be executed. If the request timeout, server can guarantee &quot;all or nothing&quot; &amp;#8211; all will be executed eventually or nothing will be executed. I think we can provide a similar feature to HBase users as a Table&apos;s API. And BufferedMutator can have an optional logic to switch to this API when the initial request failed.&lt;/p&gt;

&lt;p&gt;For implementation, I think we&apos;d better not use MR because users may not have MR for a HBase cluster, or at least RS should be able to replay mutations. If we save mutations to HDFS, the client will be like a RS that writes WAL to HDFS, right? We can use a logic just like distribute log replay to read log entries and use client api to write them to all region servers.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="15635287" author="anoop.hbase" created="Fri, 4 Nov 2016 05:18:45 +0000"  >&lt;p&gt;If an MR way is what we take, then better  it can be an ImportTSV kind of job which splits data into HFiles and do bulk load? &lt;/p&gt;</comment>
                            <comment id="15637715" author="mantonov" created="Fri, 4 Nov 2016 21:17:13 +0000"  >&lt;p&gt;At a high level idea of having BufferedMutator or similar client API manage separate persistent storage with atomicity / replay guarantees sounds somewhat weird to me. Is that the problem to be solved outside of HBase? Or should it be bulk ingest or some sort as mentioned above?&lt;/p&gt;</comment>
                            <comment id="15638727" author="jrottinghuis" created="Sat, 5 Nov 2016 05:57:42 +0000"  >&lt;p&gt;Thanks for the comments.&lt;/p&gt;

&lt;p&gt;My thought around using MR were because of easy of implementation and stemmed from my use case where Yarn is present and therefore MR trivially available. It is a fair point that as a standalone feature in HBase this doesn&apos;t have to be true. Using MR isn&apos;t a requirement, but was merely a (naive) suggestion.&lt;/p&gt;

&lt;p&gt;I don&apos;t think that atomicity is a requirement, nor are we asking for &quot;guarantees&quot;.&lt;br/&gt;
If you want to be guaranteed to write something to HBase you probably shouldn&apos;t use a BufferedMutator in the first place.&lt;/p&gt;

&lt;p&gt;Please see attached PDF where I try to sketch out our use case and what behavior we&apos;re hoping to see.&lt;/p&gt;
</comment>
                            <comment id="15730082" author="stack" created="Wed, 7 Dec 2016 22:07:37 +0000"  >&lt;p&gt;Looking at attached PDF (in future, attach google doc with comments permissions for those w/ URL... then we can write comment on the doc itself):&lt;/p&gt;

&lt;p&gt;You are setting timestamp on the Puts. You are not relying on HBase for this?&lt;/p&gt;

&lt;p&gt;How long would you allow spooling to go on? What you thinking?&lt;/p&gt;

&lt;p&gt;Agree focus should be on spooling to distributed storage. If wrote using hbase WAL, could use WALPlayer to replay. Just a suggestion. Might be too heavyweight for what you need. FYI, lots of support in hbase for serializing pojos as protobufs and back again.&lt;/p&gt;

&lt;p&gt;Section &apos;Replaying spooled puts&apos; especially #2 is awkward. Needs working through.&lt;/p&gt;

&lt;p&gt;Connection needs to be able to ride over vagaries such as the coming and going of cluster (Application servers can&apos;t be expected to check/reset Connections): i.e. most scenarios in this doc are general hbase connection issues that we should have test coverage for and deal with; if missing from general client, its a bug. Client is not currently interruptible which is wrong.I like where you finger ClusterStatusListener as a font for connection state signal. TODO.&lt;/p&gt;

&lt;p&gt;See subtask on this issue for cut at making it so can supply own BM.&lt;/p&gt;

&lt;p&gt;AP is convoluted. Better would be an Interface on AP that exposes API you&apos;d need to run your spooling BM. Its YAI (yet-another-interface) but AP is inscrutable and subject to change; not to be depended on.&lt;/p&gt;

&lt;p&gt;Thanks for posting the doc.&lt;/p&gt;










</comment>
                            <comment id="15730113" author="vrushalic" created="Wed, 7 Dec 2016 22:17:51 +0000"  >
&lt;blockquote&gt;&lt;p&gt;You are setting timestamp on the Puts. You are not relying on HBase for this?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We use our generated timestamps for certain cells. Especially for those cell which the coprocessor needs to look at. The cell timestamps for these cells are our unique timestamp (generated at &lt;a href=&quot;https://github.com/apache/hadoop/blob/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimestampGenerator.java#L65&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/hadoop/blob/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimestampGenerator.java#L65&lt;/a&gt;) &lt;br/&gt;
which is left shifted by 1million and lower digits of the app id added to them (at &lt;a href=&quot;https://github.com/apache/hadoop/blob/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimestampGenerator.java#L90&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/hadoop/blob/trunk/hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/common/TimestampGenerator.java#L90&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This is required to avoid cell over-writes for the case when say two or more applications have to write the same column happen to write at the same instant in time.  &lt;/p&gt;
</comment>
                            <comment id="15746545" author="jrottinghuis" created="Tue, 13 Dec 2016 23:01:57 +0000"  >&lt;p&gt;Based on feedback, I&apos;ve attached a new design doc. &lt;br/&gt;
This is the shared Google doc open for comments:&lt;br/&gt;
&lt;a href=&quot;https://docs.google.com/document/d/1GTSk1Hd887gGJduUr8ZJ2m-VKrIXDUv9K3dr4u2YGls/edit?usp=sharing&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/document/d/1GTSk1Hd887gGJduUr8ZJ2m-VKrIXDUv9K3dr4u2YGls/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;ve attached a sketch of what the code would look like (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-17018&quot; title=&quot;Spooling BufferedMutator&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-17018&quot;&gt;HBASE-17018&lt;/a&gt;.master.001.patch) to clarify what this design in a bit more details than is worded in the doc. It is ready for design feedback, not for code feedback. It has tons of TODOs and open items and is lacking any unit tests.&lt;br/&gt;
If people think this is a sensible approach I can work out the code to more details with unit tests, and a POC for the spooling code.&lt;/p&gt;</comment>
                            <comment id="15746798" author="stack" created="Wed, 14 Dec 2016 00:57:54 +0000"  >&lt;p&gt;Nice writeup/design. Looks good. Like the tracking of &apos;batches&apos;. There seems to be a bunch of moving parts but all seem necessary.&lt;/p&gt;

&lt;p&gt;On &quot;...wrapped in a SpoolingBufferedMutatorSubmission which comes in three SpoolingBufferedMutatorSubmissionType...&quot;, if you were looking for a simpler approach, you might just add markers to the Mutation Map of Attributes... &lt;a href=&quot;https://hbase.apache.org/apidocs/org/apache/hadoop/hbase/client/OperationWithAttributes.html#setAttribute-java.lang.String-byte:A-&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hbase.apache.org/apidocs/org/apache/hadoop/hbase/client/OperationWithAttributes.html#setAttribute-java.lang.String-byte:A-&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;On the patch:&lt;/p&gt;

&lt;p&gt;This will not be committed to hbase?  It&apos;ll be part of timeline v2?  (Or looking at the patch, there is some change needed in core ... in BufferedMutatorParams... these we can take).&lt;/p&gt;

&lt;p&gt;The bulk of the change in BufferedMutatorParams is unrelated. You want to do a patch w/ just the changes to hbase core removing the non-changes: i.e. in BufferedMutatorParams only change should be the clone method addition, not the reformatting of javadoc.&lt;/p&gt;

&lt;p&gt;Is FilesystemMutationSpooler still TODO? Is it needed? There doesn&apos;t seem to be much filesystem-ey about FilesystemMutationSpooler, at least just yet.&lt;/p&gt;

&lt;p&gt;If SpoolingBufferedMutatorCoordinator Interface a bit over the top? Is there ever going to be another type of cooridinator implementation?&lt;/p&gt;


&lt;p&gt;nit: Could change this&lt;/p&gt;

&lt;p&gt;145	  public boolean shouldSpool(SpoolingBufferedMutatorSubmission submission) {&lt;br/&gt;
146	    // TODO: should we keep track of the last successful flush that went through&lt;br/&gt;
147	    // and perhaps still drop some items from outbound, even if we just went&lt;br/&gt;
148	    // into a bad state?&lt;br/&gt;
149	    if (state == State.GOOD) &lt;/p&gt;
{
150	      return false;
151	    }
&lt;p&gt; else &lt;/p&gt;
{
152	      // Spool for both BAD and TRANSITIONING states.
153	      return true;
154	    }
&lt;p&gt;155	  }&lt;/p&gt;


&lt;p&gt;to....&lt;/p&gt;

&lt;p&gt;return state != State.GOOD;&lt;/p&gt;


&lt;p&gt;Otherwise skimmed the rest.. Where are the tests?&lt;/p&gt;

&lt;p&gt;Looks good &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jrottinghuis&quot; class=&quot;user-hover&quot; rel=&quot;jrottinghuis&quot;&gt;Joep Rottinghuis&lt;/a&gt;&lt;/p&gt;








</comment>
                            <comment id="15746879" author="jrottinghuis" created="Wed, 14 Dec 2016 01:35:36 +0000"  >&lt;p&gt;Interesting idea about using attributes on the mutation itself. That wouldn&apos;t mess with the way the BufferedMutatorImpl would deal with them? I don&apos;t want those attributes to be transmitted to HBase, that would be a waste.&lt;br/&gt;
I&apos;ll read up more, but upon first inspection I should be able to stash flushCount, submit- and completion times in a byte[]. Putting a flushLatch there would be harder. I&apos;d have to think if that can be stashed and communicated in a different way. The other impact is that I&apos;d have to peel apart a list of mutations and set attributes on each. Right now a submission maintains a List of Mutations so that they can be added to BufferedMutatorImpl in batch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This will not be committed to hbase? It&apos;ll be part of timeline v2?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Is that a question or statement? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; If the HBase community is interested to have this part of HBase, that would be great and I&apos;ll continue the code in place. If not, then I&apos;ll move this to yarn.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The bulk of the change in BufferedMutatorParams is unrelated. You want to do a patch w/ just the changes to hbase core removing the non-changes: i.e. in BufferedMutatorParams only change should be the clone method addition, not the reformatting of javadoc.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Reformatting javadoc wasn&apos;t intended. I&apos;ll remove that. In fact, I&apos;ll file a separate sub-jira to just add the clone method to the BufferedMutatorParams to separate out that concern.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is FilesystemMutationSpooler still TODO? Is it needed? There doesn&apos;t seem to be much filesystem-ey about FilesystemMutationSpooler, at least just yet.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Indeed this is still completely an empty template. Actual implementation still open. I didn&apos;t want to go too far with implementation, just sketch out enough to make the design clear to get feedback on that. I started with the diagram and a description, but as I was thinking through more details the design had to be tweaked. I figured POC code would do best job in describing the design.&lt;/p&gt;

&lt;p&gt;With respect to public boolean shouldSpool() indeed, the code right now it a bit more verbose than needed. I&apos;ll collapse to the simple format if indeed I don&apos;t need to keep track of the max successful flushCount. I need to add actual tests before I can get those details added.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If SpoolingBufferedMutatorCoordinator Interface a bit over the top? Is there ever going to be another type of cooridinator implementation?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes indeed and no probably not. I started with this thinking I needed to make it pluggable for testing. But you&apos;re right that no interface is needed there, I can simply use inheritance and still control tests.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Otherwise skimmed the rest.. Where are the tests?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Tests are still missing indeed. Just a design sketch at the moment. If the approach seems sane, I&apos;ll add unit tests.&lt;/p&gt;

&lt;p&gt;Thanks for the feedback &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="15747317" author="stack" created="Wed, 14 Dec 2016 05:19:33 +0000"  >&lt;p&gt;bq,  I don&apos;t want those attributes to be transmitted to HBase, that would be a waste.&lt;/p&gt;

&lt;p&gt;The bit where you&apos;d have to peel-apart-a-submission to mark all Mutations kills my suggestion I&apos;d say.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is that a question or statement?  If the HBase community is interested to have this part of HBase, that would be great and I&apos;ll continue the code in place. If not, then I&apos;ll move this to yarn.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Question. IMO, it is an exotic feature. Lets see if anyone else interested. If not, probably better have it live w/ TimelineV2.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Reformatting javadoc wasn&apos;t intended. I&apos;ll remove that. In fact, I&apos;ll file a separate sub-jira to just add the clone method to the BufferedMutatorParams to separate out that concern.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good. Lets get that in.&lt;/p&gt;

&lt;p&gt;Patch looks great so far. Is there anything point in AP that could be exposed that might help simplify the implementation at all?  Your approach of treating BMI as black box is probably best way to go... justifies all the rigging you have about... rigging that you&apos;d probably end up building anyway because AP signaling would likely be mixed, not-clean.&lt;/p&gt;</comment>
                            <comment id="15747443" author="jrottinghuis" created="Wed, 14 Dec 2016 06:29:59 +0000"  >&lt;p&gt;Filed &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-17313&quot; title=&quot;Add BufferedMutatorParams#clone method&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-17313&quot;&gt;&lt;del&gt;HBASE-17313&lt;/del&gt;&lt;/a&gt; with patch. If &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-17313&quot; title=&quot;Add BufferedMutatorParams#clone method&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-17313&quot;&gt;&lt;del&gt;HBASE-17313&lt;/del&gt;&lt;/a&gt; goes in first, then &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-17277&quot; title=&quot;Allow alternate BufferedMutator implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-17277&quot;&gt;&lt;del&gt;HBASE-17277&lt;/del&gt;&lt;/a&gt; should be updated to add the new field in the clone method (and in the unit test comparison), or visa versa.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is there anything point in AP that could be exposed that might help simplify the implementation at all?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Good question. Not quite sure. I was thinking of adding two more things: a) an exception listener that can be used to capture exceptions from the BufferedMutatorImpl and pass them to the coordinator. I&apos;ll have to see if it is clear for the submission to catch these and shove all of this info into the Future to pass back, or if I want to have this all appear asynchronously in the coordinator. I think the former might be cleaner.&lt;/p&gt;

&lt;p&gt;b) If the outbound queue reaches a certain size it should trigger a flush. As &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sjlee0&quot; class=&quot;user-hover&quot; rel=&quot;sjlee0&quot;&gt;Sangjin Lee&lt;/a&gt; pointed out, the current design would allow for the outbound queue to grow very large if the user keeps sending mutations without calling flush. The BufferdMutatorImpl could have flushed, but we don&apos;t know that. I think the cleanest solution would be to call flush, but that cannot be a blocking call from the processor, otherwise we&apos;ll have a deadlock on our hands. I probably have to make flush on the SpoolingBufferedMutatorImpl have a boolean argument to block or not block.&lt;br/&gt;
Perhaps this is a bit where modifying the AP or the BMI to indicate that a size-based flush happened might be a good thing. On the other hand, to treat the BMI as a total black-box has a certain elegance...&lt;/p&gt;</comment>
                            <comment id="15747493" author="stack" created="Wed, 14 Dec 2016 06:57:18 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-17313&quot; title=&quot;Add BufferedMutatorParams#clone method&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-17313&quot;&gt;&lt;del&gt;HBASE-17313&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-17277&quot; title=&quot;Allow alternate BufferedMutator implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-17277&quot;&gt;&lt;del&gt;HBASE-17277&lt;/del&gt;&lt;/a&gt; were pushed. Hope I think I got it right.&lt;/p&gt;

&lt;p&gt;ExceptionListener seems like good idea &amp;#8211; especially if it will help this project.&lt;/p&gt;</comment>
                            <comment id="15748827" author="jrottinghuis" created="Wed, 14 Dec 2016 16:49:36 +0000"  >&lt;p&gt;If I can make it so that the SpoolingBufferedMutator doesn&apos;t even connect to an actual BufferedMutatorImpl, this setup could help in some tests where you want to be able to send mutations but just have them appear in a file.&lt;/p&gt;</comment>
                            <comment id="15753265" author="jrottinghuis" created="Fri, 16 Dec 2016 03:03:59 +0000"  >&lt;p&gt;Added .master.002.patch&lt;br/&gt;
Eliminated SpoolingBufferedMutatorCoordinator Interface&lt;br/&gt;
Added initial unit tests (several more needed) to show that the basic approach works.&lt;br/&gt;
Tweaked some logic in processor.&lt;/p&gt;

&lt;p&gt;Still open for design feedback. Without it I&apos;ll keep going in current direction.&lt;/p&gt;</comment>
                            <comment id="15755171" author="stack" created="Fri, 16 Dec 2016 18:28:10 +0000"  >&lt;p&gt;Skimmed. Looking clean. Tests look great.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12857077">YARN-4061</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12762928">HBASE-12728</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12843116" name="HBASE-17018.master.001.patch" size="54523" author="jrottinghuis" created="Tue, 13 Dec 2016 23:01:57 +0000"/>
                            <attachment id="12843541" name="HBASE-17018.master.002.patch" size="65985" author="jrottinghuis" created="Fri, 16 Dec 2016 03:03:59 +0000"/>
                            <attachment id="12843117" name="HBASE-17018SpoolingBufferedMutatorDesign-v1.pdf" size="166322" author="jrottinghuis" created="Tue, 13 Dec 2016 23:01:57 +0000"/>
                            <attachment id="12837016" name="YARN-4061 HBase requirements for fault tolerant writer.pdf" size="191385" author="jrottinghuis" created="Fri, 4 Nov 2016 02:16:05 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="13026468">HBASE-17277</subtask>
                            <subtask id="13028001">HBASE-17313</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 4 Nov 2016 04:06:59 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 hours ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i35uf3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>