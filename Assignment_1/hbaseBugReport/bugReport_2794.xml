<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:04:49 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2794/HBASE-2794.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2794] Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get</title>
                <link>https://issues.apache.org/jira/browse/HBASE-2794</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Noticed the following snippet in StoreFile.java:Scanner:shouldSeek():&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
        &lt;span class=&quot;code-keyword&quot;&gt;switch&lt;/span&gt;(bloomFilterType) {
          &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ROW:
            key = row;
            &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
          &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; ROWCOL:
            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (columns.size() == 1) {
              &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] col = columns.first();
              key = Bytes.add(row, col);
              &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
            }
            &lt;span class=&quot;code-comment&quot;&gt;//$FALL-THROUGH$
&lt;/span&gt;          &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;:
            &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If columns.size &amp;gt; 1, then we currently don&apos;t take advantage of the bloom filter.  We should optimize this to check bloom for each of columns and if none of the columns are present in the bloom avoid opening the file.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12467968">HBASE-2794</key>
            <summary>Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mikhail">Mikhail Bautin</assignee>
                                    <reporter username="kannanm">Kannan Muthukkaruppan</reporter>
                        <labels>
                    </labels>
                <created>Sat, 26 Jun 2010 07:46:11 +0000</created>
                <updated>Fri, 20 Nov 2015 12:41:07 +0000</updated>
                            <resolved>Fri, 30 Sep 2011 22:33:29 +0000</resolved>
                                                    <fixVersion>0.92.0</fixVersion>
                                    <component>Performance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12882820" author="kannanm" created="Sat, 26 Jun 2010 07:49:41 +0000"  >&lt;p&gt;Perhaps a simple starter task for someone interested.&lt;/p&gt;</comment>
                            <comment id="12887272" author="kjirapinyo" created="Mon, 12 Jul 2010 05:26:24 +0000"  >&lt;p&gt;First stab at it.  Comments welcome.&lt;/p&gt;</comment>
                            <comment id="12887274" author="ryanobjc" created="Mon, 12 Jul 2010 05:35:53 +0000"  >&lt;p&gt;can you also upload it to review.hbase.org for easy reviewing, thanks &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

</comment>
                            <comment id="12887277" author="hbasereviewboard" created="Mon, 12 Jul 2010 05:55:49 +0000"  >&lt;p&gt;Message from: &quot;Kris Jirapinyo&quot; &amp;lt;kjirapinyo@attensity.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/296/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt; Enable bloom filter checks for multiple columns in same column family&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2794&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java 962748 &lt;br/&gt;
  /trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java 962748 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/296/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Ran and passed org.apache.hadoop.hbase.regionserver.TestStoreFile multiple times.  Ran and passed all tests when building.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Kris&lt;/p&gt;

</comment>
                            <comment id="12887278" author="kjirapinyo" created="Mon, 12 Jul 2010 05:56:08 +0000"  >&lt;p&gt;Submitted to review.hbase.org.  So the process is actually to get reviewed there before uploading the patch here?&lt;/p&gt;</comment>
                            <comment id="12887433" author="hbasereviewboard" created="Mon, 12 Jul 2010 17:20:53 +0000"  >&lt;p&gt;Message from: &quot;Nicolas&quot; &amp;lt;nspiegelberg@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/296/#review350&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#review350&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/296/#comment1468&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#comment1468&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    have you done any tests to see when the number of bloom checks takes significant time compared to just getting the block?  For example, if you have 100 columns to lookup, do bloom filters really buy you anything, or shouldn&apos;t you just switch to a Row-level bloom anyways?  Also, with a default 1% error rate, you&apos;re looking at ~100% false positive with 100 columns.  Maybe max.columns = sqrt(1/error.rate)&lt;/p&gt;



&lt;p&gt;/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/296/#comment1463&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#comment1463&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    probably should pre-allocate the ArrayList() size so we only deal with one heap element.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Nicolas&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12887443" author="hbasereviewboard" created="Mon, 12 Jul 2010 17:54:50 +0000"  >&lt;p&gt;Message from: &quot;Kris Jirapinyo&quot; &amp;lt;kjirapinyo@attensity.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 10:17:25, Nicolas wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; /trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java, line 860&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/296/diff/1/?file=2378#file2378line860&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/diff/1/?file=2378#file2378line860&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     probably should pre-allocate the ArrayList() size so we only deal with one heap element.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Good idea.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 10:17:25, Nicolas wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; /trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java, line 857&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/296/diff/1/?file=2378#file2378line857&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/diff/1/?file=2378#file2378line857&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     have you done any tests to see when the number of bloom checks takes significant time compared to just getting the block?  For example, if you have 100 columns to lookup, do bloom filters really buy you anything, or shouldn&apos;t you just switch to a Row-level bloom anyways?  Also, with a default 1% error rate, you&apos;re looking at ~100% false positive with 100 columns.  Maybe max.columns = sqrt(1/error.rate)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I have not, but would running on just the test data be sufficent to tell the true savings since the tests just run on mock data?  I don&apos;t really have a dev cluster with real data that I can test this on, so perhaps you or someone could help out in that regard.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Kris&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/296/#review350&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#review350&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12887472" author="hbasereviewboard" created="Mon, 12 Jul 2010 19:06:40 +0000"  >&lt;p&gt;Message from: &quot;Nicolas&quot; &amp;lt;nspiegelberg@facebook.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 10:17:25, Nicolas wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; /trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java, line 857&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/296/diff/1/?file=2378#file2378line857&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/diff/1/?file=2378#file2378line857&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     have you done any tests to see when the number of bloom checks takes significant time compared to just getting the block?  For example, if you have 100 columns to lookup, do bloom filters really buy you anything, or shouldn&apos;t you just switch to a Row-level bloom anyways?  Also, with a default 1% error rate, you&apos;re looking at ~100% false positive with 100 columns.  Maybe max.columns = sqrt(1/error.rate)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Kris Jirapinyo wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I have not, but would running on just the test data be sufficent to tell the true savings since the tests just run on mock data?  I don&apos;t really have a dev cluster with real data that I can test this on, so perhaps you or someone could help out in that regard.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;BTW: Thanks for the work.  I don&apos;t think running on test data would be sufficient because you want to compare the speed of accessing a large bloom filter (which should have random access, aka L1 cache misses) with the cost of getting an HFile block from disk (with OS block cache miss).  If you can&apos;t setup a large cluster, one strategy might be to use 10ms as a the disk seek baseline and use testBloomPerf() in TestByteBloomFilter.java to estimate BloomFilter latency.  Ryan Rawson did some tests on using blooms with small KV entries.  He might be able to give you some numbers on when blooms do not take up too much memory (hopefully, some number like LV.length &amp;gt; 1KB).  You can then use the fact that HFiles are ~64MB to estimate a good entry sample size (I just picked 10M entries in current testBloomPerf() from thin air as a big number).  Sounds a little complicated at first, but this strategy would probably take less time &lt;span class=&quot;error&quot;&gt;&amp;#91;and be more interesting&amp;#93;&lt;/span&gt; than trying to setup a genuine cluster.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Nicolas&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/296/#review350&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#review350&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12887501" author="hbasereviewboard" created="Mon, 12 Jul 2010 20:19:16 +0000"  >&lt;p&gt;Message from: &quot;Kannan Muthukkaruppan&quot; &amp;lt;kannan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/296/#review361&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#review361&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/296/#comment1497&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#comment1497&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    can&apos;t this loop be over &quot;columns&quot; itself? And then inside the loop, you prepare one key at a time use Bytes.add(row, col). That way, you can avoid the keyList data structure completely.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Kannan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12887507" author="hbasereviewboard" created="Mon, 12 Jul 2010 20:27:49 +0000"  >&lt;p&gt;Message from: &quot;Kris Jirapinyo&quot; &amp;lt;kjirapinyo@attensity.com&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-12 13:14:32, Kannan Muthukkaruppan wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; /trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java, line 880&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/296/diff/1/?file=2378#file2378line880&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/diff/1/?file=2378#file2378line880&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     can&apos;t this loop be over &quot;columns&quot; itself? And then inside the loop, you prepare one key at a time use Bytes.add(row, col). That way, you can avoid the keyList data structure completely.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Another good idea &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Will also get rid of the warning that keyList could possibly be null.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Kris&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/296/#review361&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#review361&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="12887509" author="kjirapinyo" created="Mon, 12 Jul 2010 20:30:33 +0000"  >&lt;p&gt;I removed the patch I uploaded.  Will upload the final version when it&apos;s approved from review.hbase.org.&lt;/p&gt;</comment>
                            <comment id="12887511" author="ryanobjc" created="Mon, 12 Jul 2010 20:32:52 +0000"  >&lt;p&gt;Consider a table with 12 billion rows. At 9 bits/row, we are looking&lt;br/&gt;
at 13500000000 bytes of ram (base) to store the blooms in ram. That is&lt;br/&gt;
12.57 GB ram to store the blooms.  The memory competes with the block&lt;br/&gt;
cache, thus you are losing 12.57 GB ram that could be used to cache&lt;br/&gt;
blocks.  If your data is in block cache, seeking is free, thus there&lt;br/&gt;
is an essential trade off here.&lt;/p&gt;

&lt;p&gt;In my case, the 12b rows are small ones, and thus we have a lot of&lt;br/&gt;
rows for the actual data size.  On a different dataset, the row count&lt;br/&gt;
might be smaller for a the actual data size and it might be&lt;br/&gt;
worthwhile.  Furthermore, blooms don&apos;t work on Scans and only Gets.&lt;/p&gt;

&lt;p&gt;The key takeaway here is that (a) bloom filters are not free and&lt;br/&gt;
potentially very expensive in terms of RAM, (b) bloom data competes&lt;br/&gt;
with the block cache, and (c) the trade off depends on the data set&lt;br/&gt;
and access patterns.&lt;/p&gt;



&lt;p&gt;On Mon, Jul 12, 2010 at 12:07 PM, HBase Review Board (JIRA)&lt;/p&gt;
</comment>
                            <comment id="12887537" author="nspiegelberg" created="Mon, 12 Jul 2010 21:13:30 +0000"  >&lt;p&gt;IRC conversation about this...&lt;/p&gt;

&lt;p&gt; krispyjala: nspiegelberg: but is the test you want related to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt; or just using bloom filter in general (e.g. when to use it and when not to)?&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:41pm&amp;#93;&lt;/span&gt; nspiegelberg: it&apos;s related to 2794&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:42pm&amp;#93;&lt;/span&gt; nspiegelberg: an easy example of why you need good measurements is the case of calling bloom.contains() for 100 row+col in a 1% false positive bloom.  You are getting almost 100% false positives then, so the bloom is an obvious perf drop&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:43pm&amp;#93;&lt;/span&gt; krispyjala: nspiegelberg: ok i think i understand&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:44pm&amp;#93;&lt;/span&gt; krispyjala: nspiegelberg: but wait 100% false positive?&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:46pm&amp;#93;&lt;/span&gt; nspiegelberg: right, so io.hfile.bloom.error.rate == .01 by default.  so 1%&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:46pm&amp;#93;&lt;/span&gt; krispyjala: ok&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:46pm&amp;#93;&lt;/span&gt; krispyjala: how does that add up to 100% for 100 lookups?&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:46pm&amp;#93;&lt;/span&gt; nspiegelberg: therefore, if you call bloom.contains() 5 times and OR the result, the false positive rate is 5%&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:49pm&amp;#93;&lt;/span&gt; nspiegelberg: krispyjala: so a simple example. call bloom.contains() 10 times = 10% error rate = (10ms/seek * 10%) + time(bloom.contains)&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:50pm&amp;#93;&lt;/span&gt; krispyjala: nspiegelberg: but is it really OR&apos;ing all of them? In the code if even one column lookup returns true we return true and don&apos;t look up any other columns&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:51pm&amp;#93;&lt;/span&gt; nspiegelberg: right, that&apos;s the same thing as ORing them&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:51pm&amp;#93;&lt;/span&gt; nspiegelberg: logical OR =&amp;gt;  ||&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:52pm&amp;#93;&lt;/span&gt; krispyjala: nspiegelberg: but the point is we&apos;re probably not looking up 100 columns every time for that operation, even theoretically yes we do a logical OR&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:52pm&amp;#93;&lt;/span&gt; krispyjala: if we hit true on the 5th column, we quit the loop and return right away&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:53pm&amp;#93;&lt;/span&gt; nspiegelberg: the only way you win with blooms is if all bloom.contains() return false and you don&apos;t have to do the lookup&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:53pm&amp;#93;&lt;/span&gt; krispyjala: yes&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:53pm&amp;#93;&lt;/span&gt; nspiegelberg: so, you&apos;re right, we do an average of 50 lookups per false positive in this case.&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:54pm&amp;#93;&lt;/span&gt; nspiegelberg: I&apos;m just saying, what is the cost of those 50 lookups?  If 1ms, then every HFile seek costs 11ms with blooms enabled versus 10 ms without using them&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:55pm&amp;#93;&lt;/span&gt; krispyjala: but wait i thought the code was to determine whether to add the StoreScanner to the list or not...or are you saying then that the point is in the case of 100 columns we should just not even bother doing bloom multicolumn check because perhaps it&apos;s better to just load it than wasting time with the 100 lookups (potentially)&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:55pm&amp;#93;&lt;/span&gt; nspiegelberg: exactly&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:55pm&amp;#93;&lt;/span&gt; krispyjala: nspiegelberg: lol ok got it&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:56pm&amp;#93;&lt;/span&gt; krispyjala: but realistically, who does gets on 100 columns? I don&apos;t know the HBase internals well yet (that&apos;s why i picked the noob ticket lol)...wouldn&apos;t it be better to just do a get on the row?&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:57pm&amp;#93;&lt;/span&gt; nspiegelberg: never under-estimate the naivete of users&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:57pm&amp;#93;&lt;/span&gt; krispyjala: nspiegelberg: sigh lol, i guess that&apos;s why the bloom is off by default?&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:58pm&amp;#93;&lt;/span&gt; nspiegelberg: yes&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:58pm&amp;#93;&lt;/span&gt; nspiegelberg: so, it&apos;s obvious that you never want to run bloom code with 101 columns + 1% error rate&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:58pm&amp;#93;&lt;/span&gt; krispyjala: correct&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;1:59pm&amp;#93;&lt;/span&gt; nspiegelberg: so, really it&apos;s just timing testBloomPerf with various lookup counts on various size blooms&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:00pm&amp;#93;&lt;/span&gt; krispyjala: nspiegelberg: this talk has helped me think about how to test like you said&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:00pm&amp;#93;&lt;/span&gt; &#8226; St^Ack hopes the above good-stuff(tm) &apos;lesson&apos; makes it back into the issue....&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:00pm&amp;#93;&lt;/span&gt; nspiegelberg: looks like ryan didn&apos;t give you any concrete numbers, so you might have to just start with some assumptions (like, don&apos;t use blooms if avg key &amp;lt; 1KB) and run with that&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:01pm&amp;#93;&lt;/span&gt; krispyjala: nspiegelberg: and perhaps once we kind of know where the tradeoff is, would it be wrong to limit in the code saying if there are more than say 10 column lookups might as well just return true?&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:01pm&amp;#93;&lt;/span&gt; krispyjala: cuz it&apos;s not worth looking up in bloom at that point&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:01pm&amp;#93;&lt;/span&gt; nspiegelberg: I think that&apos;s exactly what we need to do&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:01pm&amp;#93;&lt;/span&gt; krispyjala: whatever the threshold is&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:02pm&amp;#93;&lt;/span&gt; nspiegelberg: if we pretend that the cost of bloom.contains() == 0, then maybe we want to say if (column.count * error.rate &amp;gt; 10%) return true;&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:02pm&amp;#93;&lt;/span&gt; dj_ryan: well it&apos;s hard to say where the tradeoff goes&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:02pm&amp;#93;&lt;/span&gt; krispyjala: pastebin? lol jk&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:02pm&amp;#93;&lt;/span&gt; dj_ryan: but the hard number is 9 bits/item&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:03pm&amp;#93;&lt;/span&gt; dj_ryan: you can then calculate how much ram you are spending on blooms&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:03pm&amp;#93;&lt;/span&gt; dj_ryan: and decide if its worth it&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:03pm&amp;#93;&lt;/span&gt; nspiegelberg: the hard # for 1% error rate blooms is 9 bits/item&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:03pm&amp;#93;&lt;/span&gt; dj_ryan: we never implemented blooms because it seemed 12gb of ram would be better off caching&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:03pm&amp;#93;&lt;/span&gt; krispyjala: dj_ryan: so your suggestion the onus is on the user and not hbase code&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:03pm&amp;#93;&lt;/span&gt; nspiegelberg: with .1% error rate, it&apos;s ~12 bits/item&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:04pm&amp;#93;&lt;/span&gt; krispyjala: or should we allow customizations of the limits? then we don&apos;t need to come up with the &quot;recommended&quot; threshold&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:05pm&amp;#93;&lt;/span&gt; dj_ryan: well&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:05pm&amp;#93;&lt;/span&gt; dj_ryan: it is up to the user&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:05pm&amp;#93;&lt;/span&gt; nspiegelberg: I think the onus for figuring out whether to use blooms or not is on the user, but we should still have a &apos;this is too stupid&apos; early exit&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:05pm&amp;#93;&lt;/span&gt; dj_ryan: i mean maybe we could put a lot of metrics to detect when a bloom filter might be useful&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:05pm&amp;#93;&lt;/span&gt; dj_ryan: but im not sure that&apos;s worth it &lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:06pm&amp;#93;&lt;/span&gt; krispyjala: dj_ryan: yes, but right now they can either just turn it on or off, and with my patch they will be forced to look up all the columns if they have more than one&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:07pm&amp;#93;&lt;/span&gt; nspiegelberg: krispyjala: I think just running testBloomPerf on a couple different sizes will give you a goo timing measurement.  Unless my initial thoughts are off, you can probably just get away with saying: (column.count * error.rate &amp;gt; 10%) return true;&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:07pm&amp;#93;&lt;/span&gt; krispyjala: nspiegelberg: yeah I agree we should have the early exit strat&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:08pm&amp;#93;&lt;/span&gt; krispyjala: nspiegelberg: ok i will do some testing this evening on it&lt;br/&gt;
 &lt;span class=&quot;error&quot;&gt;&amp;#91;2:08pm&amp;#93;&lt;/span&gt; nspiegelberg: then, when somebody asks why you chose 10%, you can say that it obviously makes sense when below 10% and they should run some numbers for you if they want to pump it up &lt;/p&gt;
</comment>
                            <comment id="12887638" author="hbasereviewboard" created="Tue, 13 Jul 2010 02:53:47 +0000"  >&lt;p&gt;Message from: &quot;Kris Jirapinyo&quot; &amp;lt;kjirapinyo@attensity.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/296/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-07-12 19:48:43.373418)&lt;/p&gt;


&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Implemented Kannan&apos;s suggestion, thereby removing keyList.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt; Enable bloom filter checks for multiple columns in same column family&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2794&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java 962748 &lt;br/&gt;
  /trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java 962748 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/296/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Ran and passed org.apache.hadoop.hbase.regionserver.TestStoreFile multiple times.  Ran and passed all tests when building.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Kris&lt;/p&gt;

</comment>
                            <comment id="12887659" author="hbasereviewboard" created="Tue, 13 Jul 2010 05:33:08 +0000"  >&lt;p&gt;Message from: &quot;Kannan Muthukkaruppan&quot; &amp;lt;kannan@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/296/#review384&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#review384&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;One inlined comment. Otherwise, the patch and the test look good.&lt;/p&gt;


&lt;p&gt;/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/296/#comment1622&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#comment1622&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Once Pranav&apos;s patch for HBase-2265 lands, the shouldSeek() API will take a &quot;Scan&quot; as the first argument instead of the row. So, you might need to rebase the test with respect to that patch.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Kannan&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12888109" author="hbasereviewboard" created="Tue, 13 Jul 2010 23:38:55 +0000"  >&lt;p&gt;Message from: &quot;Kris Jirapinyo&quot; &amp;lt;kjirapinyo@attensity.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/296/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-07-13 16:32:18.729301)&lt;/p&gt;


&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Added changes to code after &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2265&quot; title=&quot;HFile and Memstore should maintain minimum and maximum timestamps&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2265&quot;&gt;&lt;del&gt;HBASE-2265&lt;/del&gt;&lt;/a&gt; was committed.&lt;/p&gt;

&lt;p&gt;Also, incorporated suggestion from Nicolas to not lookup when columns.size*error.rate &amp;gt; 10%.&lt;/p&gt;

&lt;p&gt;Changed BloomFilter interface, adding getErrorRate().  ByteBloomFilter now also has errorRate stored.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt; Enable bloom filter checks for multiple columns in same column family&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2794&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java 963862 &lt;br/&gt;
  /trunk/src/main/java/org/apache/hadoop/hbase/util/BloomFilter.java 963873 &lt;br/&gt;
  /trunk/src/main/java/org/apache/hadoop/hbase/util/ByteBloomFilter.java 963873 &lt;br/&gt;
  /trunk/src/main/java/org/apache/hadoop/hbase/util/DynamicByteBloomFilter.java 963873 &lt;br/&gt;
  /trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java 963873 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.hbase.org/r/296/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Ran and passed org.apache.hadoop.hbase.regionserver.TestStoreFile multiple times.  Ran and passed all tests when building.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Kris&lt;/p&gt;

</comment>
                            <comment id="12888142" author="nspiegelberg" created="Wed, 14 Jul 2010 01:14:34 +0000"  >&lt;p&gt;Talked with Kris about setting proper exit conditions.&lt;/p&gt;

&lt;p&gt;#1 : Exit if our error.rate &amp;gt; 10%.  This is an arbitrary number.  Could easily make this configurable if someone needs it&lt;br/&gt;
#2 : Exit if it would take &amp;gt; 1ms to run the bloom check.  This ensures that blooms are beneficial for performance even if they aren&apos;t needed 90% of the time&lt;/p&gt;

&lt;p&gt;I wonder if it would be good to give the user an option of not running a bloom check if only 1 HFile in the StoreFile, but that&apos;s for another JIRA.&lt;/p&gt;</comment>
                            <comment id="12888144" author="hbasereviewboard" created="Wed, 14 Jul 2010 01:17:53 +0000"  >&lt;p&gt;Message from: &quot;Nicolas&quot; &amp;lt;nspiegelberg@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/296/#review397&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#review397&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;Looking good!  Waiting for performance test numbers on StoreFile.shouldSeek().  I think we want to early exit if shouldSeek() would take &amp;gt; 1ms or something sensible.&lt;/p&gt;


&lt;p&gt;/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/296/#comment1703&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#comment1703&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    red = using tabs instead of spaces or trailing spaces.  quick fix might be nice (or is this auto-handled by svn, Stack?)&lt;/p&gt;



&lt;p&gt;/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFile.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.hbase.org/r/296/#comment1702&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#comment1702&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    could you add test header comments so we know all the cases you&apos;re trying to test?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Nicolas&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12888166" author="hbasereviewboard" created="Wed, 14 Jul 2010 03:07:03 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;On 2010-07-13 18:09:13, Nicolas wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; /trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java, line 958&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;http://review.hbase.org/r/296/diff/3/?file=2723#file2723line958&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/diff/3/?file=2723#file2723line958&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     red = using tabs instead of spaces or trailing spaces.  quick fix might be nice (or is this auto-handled by svn, Stack?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;none of this is auto-handled by svn.  need to setup eclipse or whatever you use to use 2 spaces instead of tabs.  and in eclipse, i have my code cleanup set to remove whitespace and run that periodically.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.hbase.org/r/296/#review397&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.hbase.org/r/296/#review397&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


</comment>
                            <comment id="13116569" author="jiraposter@reviews.apache.org" created="Wed, 28 Sep 2011 16:04:45 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2084/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Previously we only used row-column Bloom filters for scans that only requested one column. We have seen production queries that request up to 200 columns, and with say ~6 store files per store (region / column family combination) this might have resulted in 1200 block read operations in the worst case. With this diff we will be avoiding seeks on store files that we know don&apos;t contain the row/column of interest when using an ExplicitColumnTracker. The performance should remain the same for column range queries.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2794&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 08d3ba4 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java ac2348e &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 4aa72de &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java 68cdac5 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java fd9e7ef &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 9d9895c &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueScanner.java 6cdada7 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 7cbdb98 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/AbstractKeyValueScanner.java PRE-CREATION &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/KeyValue.java 585c4a8 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java f5173c4 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java a3d778e &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java 32f88fb &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/TestKeyValueHeap.java a5d13f7 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiColumnScanner.java baee696 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/TestScanWithBloomError.java PRE-CREATION &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2084/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Existing unit tests. A new unit test (TestScanWithBloomError). Load testing using HBaseTest.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Mikhail&lt;/p&gt;
</comment>
                            <comment id="13116578" author="jiraposter@reviews.apache.org" created="Wed, 28 Sep 2011 16:16:45 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2084/#review2130&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#review2130&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;nice work mikhail!  i will let someone else give the +1 though&lt;/p&gt;


&lt;p&gt;src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/2084/#comment4946&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#comment4946&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    method doesn&apos;t actually take a KeyValue... this is to create the last KV the on row and column for the KeyValue this is called on?&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/2084/#comment4947&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#comment4947&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    got it.  maybe add a comment on this method to explain this usage&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestScanWithBloomError.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/2084/#comment4948&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#comment4948&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    license&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Jonathan&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-09-28 16:03:52, Mikhail Bautin wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/2084/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-09-28 16:03:52)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Previously we only used row-column Bloom filters for scans that only requested one column. We have seen production queries that request up to 200 columns, and with say ~6 store files per store (region / column family combination) this might have resulted in 1200 block read operations in the worst case. With this diff we will be avoiding seeks on store files that we know don&apos;t contain the row/column of interest when using an ExplicitColumnTracker. The performance should remain the same for column range queries.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2794&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 08d3ba4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java ac2348e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 4aa72de &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java 68cdac5 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java fd9e7ef &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 9d9895c &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueScanner.java 6cdada7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 7cbdb98 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/AbstractKeyValueScanner.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/KeyValue.java 585c4a8 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java f5173c4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java a3d778e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java 32f88fb &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestKeyValueHeap.java a5d13f7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiColumnScanner.java baee696 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestScanWithBloomError.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2084/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Existing unit tests. A new unit test (TestScanWithBloomError). Load testing using HBaseTest.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Mikhail&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13116628" author="jiraposter@reviews.apache.org" created="Wed, 28 Sep 2011 17:42:46 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2084/#review2137&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#review2137&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;This is an important feature.&lt;/p&gt;

&lt;p&gt;Since the boolean parameter, forward, correlates so closely with reseek, can we give it a better name ?&lt;br/&gt;
I was thinking about either reseek or forwardOnly.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ted&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-09-28 16:03:52, Mikhail Bautin wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/2084/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-09-28 16:03:52)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Previously we only used row-column Bloom filters for scans that only requested one column. We have seen production queries that request up to 200 columns, and with say ~6 store files per store (region / column family combination) this might have resulted in 1200 block read operations in the worst case. With this diff we will be avoiding seeks on store files that we know don&apos;t contain the row/column of interest when using an ExplicitColumnTracker. The performance should remain the same for column range queries.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2794&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 08d3ba4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java ac2348e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 4aa72de &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java 68cdac5 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java fd9e7ef &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 9d9895c &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueScanner.java 6cdada7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 7cbdb98 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/AbstractKeyValueScanner.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/KeyValue.java 585c4a8 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java f5173c4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java a3d778e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java 32f88fb &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestKeyValueHeap.java a5d13f7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiColumnScanner.java baee696 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestScanWithBloomError.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2084/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Existing unit tests. A new unit test (TestScanWithBloomError). Load testing using HBaseTest.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Mikhail&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13116689" author="yuzhihong@gmail.com" created="Wed, 28 Sep 2011 18:48:07 +0000"  >&lt;p&gt;I got the following errors from test suite:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Failed tests:   testWorkerAbort(org.apache.hadoop.hbase.master.TestDistributedLogSplitting): expected:&amp;lt;1&amp;gt; but was:&amp;lt;0&amp;gt;

Tests in error:
  testMergeTool(org.apache.hadoop.hbase.util.TestMergeTool): &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; index out of range: -1
  testBasicRollingRestart(org.apache.hadoop.hbase.master.TestRollingRestart): test timed out after 300000 milliseconds
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;They passed individually.&lt;/p&gt;</comment>
                            <comment id="13117517" author="jiraposter@reviews.apache.org" created="Thu, 29 Sep 2011 18:38:45 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2084/#review2161&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#review2161&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/2084/#comment5035&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#comment5035&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I was implying that &quot;this&quot; is also a method argument when I wrote this comment. I will edit this to make it clearer.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/2084/#comment5036&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#comment5036&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Yes, I will modify the javadoc of this method.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mikhail&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-09-28 16:03:52, Mikhail Bautin wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/2084/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-09-28 16:03:52)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Previously we only used row-column Bloom filters for scans that only requested one column. We have seen production queries that request up to 200 columns, and with say ~6 store files per store (region / column family combination) this might have resulted in 1200 block read operations in the worst case. With this diff we will be avoiding seeks on store files that we know don&apos;t contain the row/column of interest when using an ExplicitColumnTracker. The performance should remain the same for column range queries.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2794&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 08d3ba4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java ac2348e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 4aa72de &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java 68cdac5 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java fd9e7ef &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 9d9895c &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueScanner.java 6cdada7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 7cbdb98 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/AbstractKeyValueScanner.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/KeyValue.java 585c4a8 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java f5173c4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java a3d778e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java 32f88fb &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestKeyValueHeap.java a5d13f7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiColumnScanner.java baee696 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestScanWithBloomError.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2084/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Existing unit tests. A new unit test (TestScanWithBloomError). Load testing using HBaseTest.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Mikhail&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13117523" author="jiraposter@reviews.apache.org" created="Thu, 29 Sep 2011 18:40:46 +0000"  >

&lt;blockquote&gt;&lt;p&gt;On 2011-09-28 17:42:46, Ted Yu wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; This is an important feature.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Since the boolean parameter, forward, correlates so closely with reseek, can we give it a better name ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; I was thinking about either reseek or forwardOnly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We have a few diffs in the pipeline that depend on this one. Can we rename the boolean flag after we commit those diffs?&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Mikhail&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2084/#review2137&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#review2137&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2011-09-28 16:03:52, Mikhail Bautin wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/2084/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-09-28 16:03:52)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Previously we only used row-column Bloom filters for scans that only requested one column. We have seen production queries that request up to 200 columns, and with say ~6 store files per store (region / column family combination) this might have resulted in 1200 block read operations in the worst case. With this diff we will be avoiding seeks on store files that we know don&apos;t contain the row/column of interest when using an ExplicitColumnTracker. The performance should remain the same for column range queries.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2794&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 08d3ba4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java ac2348e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 4aa72de &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java 68cdac5 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java fd9e7ef &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 9d9895c &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueScanner.java 6cdada7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 7cbdb98 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/AbstractKeyValueScanner.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/KeyValue.java 585c4a8 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java f5173c4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java a3d778e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java 32f88fb &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestKeyValueHeap.java a5d13f7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiColumnScanner.java baee696 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestScanWithBloomError.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2084/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Existing unit tests. A new unit test (TestScanWithBloomError). Load testing using HBaseTest.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Mikhail&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13117524" author="jiraposter@reviews.apache.org" created="Thu, 29 Sep 2011 18:42:45 +0000"  >

&lt;blockquote&gt;&lt;p&gt;On 2011-09-28 17:42:46, Ted Yu wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; This is an important feature.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; Since the boolean parameter, forward, correlates so closely with reseek, can we give it a better name ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; I was thinking about either reseek or forwardOnly.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Mikhail Bautin wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;We have a few diffs in the pipeline that depend on this one. Can we rename the boolean flag after we commit those diffs?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am fine with the current name of forward.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Ted&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2084/#review2137&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#review2137&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2011-09-28 16:03:52, Mikhail Bautin wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/2084/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-09-28 16:03:52)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Previously we only used row-column Bloom filters for scans that only requested one column. We have seen production queries that request up to 200 columns, and with say ~6 store files per store (region / column family combination) this might have resulted in 1200 block read operations in the worst case. With this diff we will be avoiding seeks on store files that we know don&apos;t contain the row/column of interest when using an ExplicitColumnTracker. The performance should remain the same for column range queries.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2794&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 08d3ba4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java ac2348e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 4aa72de &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java 68cdac5 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java fd9e7ef &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 9d9895c &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueScanner.java 6cdada7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 7cbdb98 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/AbstractKeyValueScanner.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/KeyValue.java 585c4a8 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java f5173c4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java a3d778e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java 32f88fb &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestKeyValueHeap.java a5d13f7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiColumnScanner.java baee696 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestScanWithBloomError.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2084/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Existing unit tests. A new unit test (TestScanWithBloomError). Load testing using HBaseTest.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Mikhail&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13117615" author="jiraposter@reviews.apache.org" created="Thu, 29 Sep 2011 21:05:45 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2084/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2011-09-29 21:05:20.334849)&lt;/p&gt;


&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Addressing Jonathan&apos;s comments.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Previously we only used row-column Bloom filters for scans that only requested one column. We have seen production queries that request up to 200 columns, and with say ~6 store files per store (region / column family combination) this might have resulted in 1200 block read operations in the worst case. With this diff we will be avoiding seeks on store files that we know don&apos;t contain the row/column of interest when using an ExplicitColumnTracker. The performance should remain the same for column range queries.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2794&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/KeyValue.java 585c4a8 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java f5173c4 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java a3d778e &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/AbstractKeyValueScanner.java PRE-CREATION &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 7cbdb98 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 9d9895c &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueScanner.java 6cdada7 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 4aa72de &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java 68cdac5 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java fd9e7ef &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 08d3ba4 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java ac2348e &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java 32f88fb &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/TestKeyValueHeap.java a5d13f7 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiColumnScanner.java baee696 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/TestScanWithBloomError.java PRE-CREATION &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2084/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Existing unit tests. A new unit test (TestScanWithBloomError). Load testing using HBaseTest.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Mikhail&lt;/p&gt;
</comment>
                            <comment id="13118247" author="yuzhihong@gmail.com" created="Fri, 30 Sep 2011 18:11:46 +0000"  >&lt;p&gt;TestServerCustomProtocol#testRowRange failed during test suite run but passed standalone.&lt;/p&gt;</comment>
                            <comment id="13118265" author="yuzhihong@gmail.com" created="Fri, 30 Sep 2011 18:37:06 +0000"  >&lt;p&gt;Integrated to 0.92 branch and TRUNK.&lt;/p&gt;

&lt;p&gt;Thanks for the patch Mikhail.&lt;/p&gt;

&lt;p&gt;Thanks for the review Jonathan.&lt;/p&gt;</comment>
                            <comment id="13118294" author="jiraposter@reviews.apache.org" created="Fri, 30 Sep 2011 19:10:45 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2084/#review2226&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#review2226&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;


&lt;p&gt;I&apos;m +0 on commmitting this.  I tried reviewing it but I don&apos;t know this code well.  The added unit test is nicely intrusive and the asserts look right.  What about Nicolas&apos;s performance concerns.  How are they addressed by this patch?  I&apos;m running a build of the patch and if that passes I&apos;m +1 on commit. &lt;/p&gt;


&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/2084/#comment5175&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#comment5175&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Interesting method name.  We should use this pattern everywhere we have to do this.&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/2084/#comment5176&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/#comment5176&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Should we get rid of this javadoc if an override?  (Let us know can do on commit)&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Michael&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-09-29 21:05:20, Mikhail Bautin wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/2084/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-09-29 21:05:20)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Previously we only used row-column Bloom filters for scans that only requested one column. We have seen production queries that request up to 200 columns, and with say ~6 store files per store (region / column family combination) this might have resulted in 1200 block read operations in the worst case. With this diff we will be avoiding seeks on store files that we know don&apos;t contain the row/column of interest when using an ExplicitColumnTracker. The performance should remain the same for column range queries.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2794&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/KeyValue.java 585c4a8 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java f5173c4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java a3d778e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/AbstractKeyValueScanner.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 7cbdb98 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java 9d9895c &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueScanner.java 6cdada7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java 4aa72de &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java 68cdac5 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java fd9e7ef &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java 08d3ba4 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java ac2348e &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java 32f88fb &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestKeyValueHeap.java a5d13f7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiColumnScanner.java baee696 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/regionserver/TestScanWithBloomError.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2084/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2084/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Existing unit tests. A new unit test (TestScanWithBloomError). Load testing using HBaseTest.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Mikhail&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13118449" author="stack" created="Fri, 30 Sep 2011 21:12:47 +0000"  >&lt;p&gt;These failed after running full suite but seem unrelated:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Failed tests:   testOnlineChangeTableSchema(org.apache.hadoop.hbase.client.TestAdmin)
  testForceSplitMultiFamily(org.apache.hadoop.hbase.client.TestAdmin): expected:&amp;lt;2&amp;gt; but was:&amp;lt;1&amp;gt;

Tests in error:
  testEnableDisableAddColumnDeleteColumn(org.apache.hadoop.hbase.client.TestAdmin): org.apache.hadoop.hbase.TableNotEnabledException: testMasterAdmin
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13118471" author="mikhail" created="Fri, 30 Sep 2011 21:31:38 +0000"  >&lt;p&gt;@Michael: I am observing a different set of spuriously failing tests, also seemingly unrelated.&lt;/p&gt;

&lt;p&gt;2011-09-29_20_41_15 | tests: 1015, fail: 0, err: 0, skip: 21, time: 6027.3&lt;br/&gt;
2011-09-29_23_09_51 | tests: 1012, fail: 0, err: 0, skip: 21, time: 5328.0&lt;br/&gt;
2011-09-30_01_44_42 | tests: 1015, fail: 0, err: 0, skip: 21, time: 6338.4&lt;br/&gt;
2011-09-30_04_28_29 | tests: 1015, fail: 0, err: 0, skip: 21, time: 6079.2&lt;br/&gt;
2011-09-30_07_00_24 | tests: 1015, fail: 1, err: 0, skip: 21, time: 6656.2, failed: Admin&lt;br/&gt;
2011-09-30_09_41_53 | tests: 1015, fail: 0, err: 0, skip: 21, time: 5900.8&lt;br/&gt;
2011-09-30_12_10_25 | tests: 1004, fail: 1, err: 0, skip: 21, time: 5397.7, failed: DistributedLogSplitting&lt;/p&gt;

&lt;p&gt;(Patch applied on top of &lt;a href=&quot;http://svn.apache.org/repos/asf/hbase/trunk@1176613&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/hbase/trunk@1176613&lt;/a&gt;)&lt;/p&gt;</comment>
                            <comment id="13118507" author="hudson" created="Fri, 30 Sep 2011 22:17:13 +0000"  >&lt;p&gt;Integrated in HBase-0.92 #34 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.92/34/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.92/34/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;  Utilize ROWCOL bloom filter if multiple columns within same family&lt;br/&gt;
               are requested in a Get (Mikhail Bautin)&lt;/p&gt;

&lt;p&gt;tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.92/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/AbstractKeyValueScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/regionserver/TestKeyValueHeap.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiColumnScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.92/src/test/java/org/apache/hadoop/hbase/regionserver/TestScanWithBloomError.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13118632" author="hudson" created="Sat, 1 Oct 2011 02:03:18 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #2274 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/2274/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/2274/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2794&quot; title=&quot;Utilize ROWCOL bloom filter if multiple columns within same family are requested in a Get&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2794&quot;&gt;&lt;del&gt;HBASE-2794&lt;/del&gt;&lt;/a&gt;  Utilize ROWCOL bloom filter if multiple columns within same family&lt;br/&gt;
               are requested in a Get (Mikhail Bautin)&lt;/p&gt;

&lt;p&gt;tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/KeyValue.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/AbstractHFileReader.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/AbstractKeyValueScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueHeap.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/KeyValueScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStore.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFile.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/util/CollectionBackedScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestKeyValueHeap.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestMultiColumnScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestScanWithBloomError.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15016886" author="lars_francke" created="Fri, 20 Nov 2015 12:41:07 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 12 Jul 2010 05:26:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32773</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hja7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100386</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Resolving (the patch has been committed).</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>