<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:09:58 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3411/HBASE-3411.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3411] manually compact memstores?</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3411</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I have a theory and some experiments that indicate our heap fragmentation issues has to do with the KV buffers from memstores ending up entirely interleaved in the old gen. I had a bit of wine and came up with a wacky idea to have a thread which continuously defragments memstore data buffers into contiguous segments, hopefully to keep old gen fragmentation down.&lt;/p&gt;

&lt;p&gt;It didn&apos;t seem to work just yet, but wanted to show the patch to some people.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12494634">HBASE-3411</key>
            <summary>manually compact memstores?</summary>
                <type id="13" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/genericissue.png">Brainstorming</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Tue, 4 Jan 2011 19:43:51 +0000</created>
                <updated>Tue, 30 Oct 2012 21:23:16 +0000</updated>
                            <resolved>Tue, 30 Oct 2012 21:23:16 +0000</resolved>
                                                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12977429" author="tlipcon" created="Tue, 4 Jan 2011 19:45:09 +0000"  >&lt;p&gt;Here it is in all its buggy glory&lt;/p&gt;</comment>
                            <comment id="12977445" author="stack" created="Tue, 4 Jan 2011 20:20:55 +0000"  >&lt;p&gt;IRC where Todd explains more what he was at:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
11:27 &amp;lt; tlipcon&amp;gt; i was up late last night trying a crazy experiment
11:27 -!- Infin1ty [~Infin1ty@pdpc/supporter/active/infin1ty] has joined #hbase
11:27 &amp;lt; tlipcon&amp;gt; sadly it didn&apos;t work, but i may have a JVM bug to blame &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; it
11:27 &amp;lt; tlipcon&amp;gt; http:&lt;span class=&quot;code-comment&quot;&gt;//bugs.sun.com/bugdatabase/view_bug.&lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt;?bug_id=6999988
&lt;/span&gt;11:27 &amp;lt; jdcryans&amp;gt; stop breaking everything! ;)
11:28 &amp;lt; tlipcon&amp;gt; so I need to &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; again on some different jvm versions/options
11:28  * tlipcon added a thread that does something counterintuitive
11:28 &amp;lt; tlipcon&amp;gt; it runs through memstores and copies all the bytes just &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the hell of it
11:28 &amp;lt; tlipcon&amp;gt; and drops the old kvset
11:28 &amp;lt; jdcryans&amp;gt; to generate garbage?
11:28 &amp;lt; tlipcon&amp;gt; basically makes a deep copy of the kvset
11:28 &amp;lt; tlipcon&amp;gt; to compact all the &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] references into a single &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[]
11:29 &amp;lt; tlipcon&amp;gt; my theory is that all our CMS issues are because the heap gets really fragmented. I wrote a simple program that inserts randomly into a bunch of kvsets and saw the same behavior
11:29 &amp;lt; larsgeorge&amp;gt; oh, your own allocator, tres chique
11:29 &amp;lt; tlipcon&amp;gt; it makes sense because our insertion order is random across regions, and so when the data is promoted into old gen it&apos;s completely fragmented, like ABCABACADDBCADABAD &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; those are different memstores
11:29 &amp;lt; tlipcon&amp;gt; then when we flush a memstore we end up with AB ABA ADDB ADABAD
11:30 &amp;lt; tlipcon&amp;gt; ie fragmentation
11:30 &amp;lt; tlipcon&amp;gt; so &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; thread just runs through memstores and recopies them into contiguous buffers and drops the old one, in an attempt to defragment the old gen continuously
11:30 &amp;lt; tlipcon&amp;gt; unfortunately it didn&apos;t work :)
11:30 &amp;lt; larsgeorge&amp;gt; tlipcon: you are THAT close to allocating your own DirectByteBuffer and use that.... I know it!
11:30 &amp;lt; tlipcon&amp;gt; yea, that gets tricky though
11:31 &amp;lt; tlipcon&amp;gt; unless we add a copy &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; every read, or some kind of ref counting
11:31 &amp;lt; tlipcon&amp;gt; the issue is deallocating them
11:31 &amp;lt; tlipcon&amp;gt; actually have another idea, too... basically use jni to mmap(MAP_ANON) a big chunk of VM &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; each memstore
11:32 &amp;lt; tlipcon&amp;gt; then we compact into there
11:32 &amp;lt; tlipcon&amp;gt; or just allocate from there &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; memstore data
11:32 &amp;lt; tlipcon&amp;gt; then when the memstore flushes we just munmap it
11:32 &amp;lt; tlipcon&amp;gt; would end up using lots of vmem but our res size should be identical &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; not better
11:33 &amp;lt; tlipcon&amp;gt; but again the issue is those leaked references &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; zero-copy
11:33 &amp;lt; tlipcon&amp;gt; need some more atomic counters floating around
11:33 &amp;lt; tlipcon&amp;gt; but I think it&apos;s odable
11:33 &amp;lt; St^Ack&amp;gt; tlipcon: compact all &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; references into one?
11:33 &amp;lt; tlipcon&amp;gt; St^Ack: yea that&apos;s what it&apos;s doing now, ish
11:34 &amp;lt; tlipcon&amp;gt; i did a little mini heuristic
11:34 &amp;lt; tlipcon&amp;gt; it takes the total data size of the memstore, and compacts any &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; buffers smaller than 1/4 that size or something
11:34 &amp;lt; tlipcon&amp;gt; otherwise i found that big memstores wasted a lot of copying
11:41 &amp;lt; tlipcon&amp;gt; it&apos;ll probably make more sense
11:41 &amp;lt; St^Ack&amp;gt; thanks honey
11:41 &amp;lt; St^Ack&amp;gt; Your ABC picture above, is that kvs or is it memstores you are drawing?
11:41 &amp;lt; tlipcon&amp;gt; it&apos;s &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[]s in the heap
11:41 &amp;lt; tlipcon&amp;gt; right
11:41 &amp;lt; St^Ack&amp;gt; k
11:42 &amp;lt; tlipcon&amp;gt; basically the data from memstores ends up interleaved throughout the heap
11:42 &amp;lt; tlipcon&amp;gt; so when we free one we only free up a bunch of kv-sized segments in the old gen
11:42 &amp;lt; tlipcon&amp;gt; sorry I should say kv-buffer-sized
11:44 -!- ak2 [cfabb465@gateway/web/freenode/ip.207.171.180.101] has joined #hbase
11:45 -!- rberger [~rberger@adsl-99-48-184-49.dsl.snfc21.sbcglobal.net] has quit [Remote host closed the connection]
11:46 -!- rberger [~rberger@adsl-99-48-184-49.dsl.snfc21.sbcglobal.net] has joined #hbase
11:46  * St^Ack looking
...
11:46 &amp;lt; tlipcon&amp;gt; i&apos;m sure it&apos;s buggy, i got various &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; buffer overflow errors and such
...
11:51 &amp;lt; St^Ack&amp;gt; tlipcon: oh, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; is pretty basic todd...
11:52 &amp;lt; St^Ack&amp;gt; why don&apos;t it work?
...
11:52 &amp;lt; tlipcon&amp;gt; you mean my memorycompactor crap?
11:52 &amp;lt; St^Ack&amp;gt; yeah
11:52 &amp;lt; tlipcon&amp;gt; unclear as of yet
11:52 &amp;lt; tlipcon&amp;gt; it was 3am so I went to bed
11:52 &amp;lt; St^Ack&amp;gt; smile
11:52 -!- matt_c [~matt_c@gateway.the-worldco.com] has quit [Read error: Connection reset by peer]
11:52 &amp;lt; tlipcon&amp;gt; one theory is that now we&apos;re generating garbage twice as fast ;-)
11:52 -!- matt_c [~matt_c@gateway.the-worldco.com] has joined #hbase
11:52 &amp;lt; tlipcon&amp;gt; and still odd sizes... so we just have fragmentation at a larger granularity
11:53 &amp;lt; tlipcon&amp;gt; so perhaps having the compactor compact into slabs of a small number of preset sizes would work
11:53 -!- amoksoft [~Adium@204.15.3.162] has quit [Ping timeout: 272 seconds]
11:53 -!- cheddar [~cheddar@c-24-5-65-170.hsd1.ca.comcast.net] has joined #hbase
11:54 -!- matt_c_ [~matt_c@gateway.the-worldco.com] has joined #hbase
11:55 -!- posix4e [~posix4e@38.102.147.105] has joined #hbase
11:56 &amp;lt; St^Ack&amp;gt; hat &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; sun bug is a downer
11:57 &amp;lt; dj_ryan&amp;gt; hmm fragmentation eh
11:58 -!- amoksoft [~Adium@204.15.3.162] has joined #hbase
11:58 -!- matt_c [~matt_c@gateway.the-worldco.com] has quit [Ping timeout: 260 seconds]
11:59 &amp;lt; tlipcon&amp;gt; yea i hacked around &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; last night with the jhat API also
11:59 -!- patrick_angeles [~Adium@cpe-24-193-230-114.nyc.res.rr.com] has joined #hbase
12:00 &amp;lt; dj_ryan&amp;gt; what does the jhat api get you?
12:01 &amp;lt; dj_ryan&amp;gt; 3401 looks interesting
12:01 &amp;lt; tlipcon&amp;gt; looking at a heap dump to see how the objects actually end up laid out in old gen
12:01 &amp;lt; tlipcon&amp;gt; i did a little test app and the jhat analyzer &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; that
12:01 &amp;lt; tlipcon&amp;gt; but didn&apos;t &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; it on a 5G heap dump yet
....
12:04 &amp;lt; St^Ack&amp;gt; That sun bug you posted would seem to indicate that we should recommend folks NOT run &amp;gt; u20
12:04 &amp;lt; tlipcon&amp;gt; St^Ack: well, it&apos;s unclear
12:04 &amp;lt; tlipcon&amp;gt; because the bug was potentially introduced by another &lt;span class=&quot;code-quote&quot;&gt;&quot;fix&quot;&lt;/span&gt; which &lt;span class=&quot;code-quote&quot;&gt;&quot;improved&quot;&lt;/span&gt; the fragmentation behavior
12:05 &amp;lt; tlipcon&amp;gt; so we should really &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; some kind of test to see
12:05 &amp;lt; tlipcon&amp;gt; the very best thing we could &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt;, I think, is to have a fake regionserver that doesn&apos;t touch disk, but goes through all the motions of servicing a workload
12:05 &amp;lt; St^Ack&amp;gt; tlipcon: i&apos;d read about u21 fix &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; fragmentation ... bummer that it makes it worse
12:05 &amp;lt; tlipcon&amp;gt; then we could &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; it with different JVM options, send it to the hotspot people to use as a test &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt;, etc
12:06 &amp;lt; St^Ack&amp;gt; tlipcon: ok
12:06 &amp;lt; St^Ack&amp;gt; i could work on that
12:06 &amp;lt; tlipcon&amp;gt; but it&apos;s a messy prospect
12:06 &amp;lt; tlipcon&amp;gt; i tried to make a little fake one the other day, but i don&apos;t think it&apos;s quite realistic enough
12:07 &amp;lt; St^Ack&amp;gt; so you can&apos;t gen the promotion failures?
12:07 &amp;lt; St^Ack&amp;gt; the ycsb is no good &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; that because all keys same size?
12:07 &amp;lt; tlipcon&amp;gt; ycsb generates it real easily on a real cluster
12:07 &amp;lt; dj_ryan&amp;gt; we can get zipflan &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; length
12:08 &amp;lt; tlipcon&amp;gt; even with a simple YCSB workload I get the same frag issue
12:08 &amp;lt; tlipcon&amp;gt; I need to read the JDK source a bit more to understand how the promotion copy works
12:08 &amp;lt; tlipcon&amp;gt; I think it needs to find contiguous space &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; all the promoted objects
12:09 &amp;lt; dj_ryan&amp;gt; that is a good question
12:09 &amp;lt; dj_ryan&amp;gt; i doubt that is the &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt;
12:09 &amp;lt; tlipcon&amp;gt; there&apos;s a concept of a PLAB
12:09 &amp;lt; tlipcon&amp;gt; but the details out there are kind of hazy
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13487258" author="tlipcon" created="Tue, 30 Oct 2012 21:23:16 +0000"  >&lt;p&gt;This seems to have been obviated by MSLAB in later 0.90, 0.92+&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12467459" name="hbase-3411.txt" size="7269" author="tlipcon" created="Tue, 4 Jan 2011 19:45:09 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 4 Jan 2011 20:20:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33015</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 7 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02b8v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11423</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>