<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:56:54 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14832/HBASE-14832.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14832] Ensure write paths work with ByteBufferedCells in case of compaction</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14832</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Currently any cell coming out of offheap Bucketcache while compaction does a copy using the getXXXArray() API since write path does not work with BBCells. This JIRA is aimed at changing the write path to support BBCells so that this copy is avoided.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12914137">HBASE-14832</key>
            <summary>Ensure write paths work with ByteBufferedCells in case of compaction</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12724166">HBASE-11425</parent>
                                    <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="ram_krish">ramkrishna.s.vasudevan</reporter>
                        <labels>
                    </labels>
                <created>Wed, 18 Nov 2015 15:22:34 +0000</created>
                <updated>Thu, 7 Jan 2016 19:26:48 +0000</updated>
                            <resolved>Wed, 2 Dec 2015 05:00:14 +0000</resolved>
                                    <version>2.0.0</version>
                                    <fixVersion>2.0.0</fixVersion>
                                    <component>regionserver</component>
                    <component>Scanners</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="15011228" author="stack" created="Wed, 18 Nov 2015 15:45:30 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="15011391" author="anoop.hbase" created="Wed, 18 Nov 2015 16:57:09 +0000"  >&lt;p&gt;The write path already have Cell every where and no more ensureKeyValue stuff..  This change will make the write path to work with offheap Cells also so that it will help the off heaping of write path as well &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;   +1&lt;/p&gt;</comment>
                            <comment id="15013456" author="ram_krish" created="Thu, 19 Nov 2015 12:38:39 +0000"  >&lt;p&gt;Patch for trunk. There are two TODOs here &lt;br/&gt;
-&amp;gt; PrefixTree has to be changed to support BB Cells. It is not straight forward as other DBEs because the write path involves Byteranges and we may need to see how DBB can be supported.&lt;br/&gt;
-&amp;gt; TagCompression has to be handled particularly by changing the Dictionary interface and Dictionary should be built with ByteBuffers.&lt;/p&gt;</comment>
                            <comment id="15013473" author="ram_krish" created="Thu, 19 Nov 2015 12:48:01 +0000"  >&lt;p&gt;One doubt - in case of DBEs the cell that we may get during compaction will be the DBE cell right?  In which only the value part and tag part will be offheap and all others are onheap? Just got this doubt suddenly?  In that case supporting Prefix Tree should be relatively simple. Thoughts? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoopsamjohn&quot; class=&quot;user-hover&quot; rel=&quot;anoopsamjohn&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15013693" author="hadoopqa" created="Thu, 19 Nov 2015 15:24:57 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12773232/HBASE-14832.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12773232/HBASE-14832.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit c92737c0e912563aeba2112ab8df74af976e720a.&lt;br/&gt;
  ATTACHMENT ID: 12773232&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 8 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1729 checkstyle errors (more than the master&apos;s current 1727 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +      // There cannot be a case where one cell is BBCell and other is KeyValue. This flow comes either&lt;br/&gt;
+      // in flush or compactions. In flushes both cells are KV and in case of compaction it will be either&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16592//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16592//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16592//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16592//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16592//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16592//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16592//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16592//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="15013835" author="stack" created="Thu, 19 Nov 2015 16:47:39 +0000"  >&lt;p&gt;The patch will work though we&apos;ve not converted PrefixTree? PrefixTree will run really slow if it is doing copies all the time which will be a big surprise. I&apos;d doubt anyone is using PrefixTree but PrefixTree is something that we would want to take on after all the Cellification is done as a mainline option I&apos;d say. Ditto for TagCompression. It will work after the patch goes in, it&apos;ll just be slow because of all the copies? If so, then I&apos;d say could do these two conversions in a follow up patch.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One doubt - in case of DBEs the cell that we may get during compaction will be the DBE cell right? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can you explain this more or point to a place in the code that shows what you are seeing?&lt;/p&gt;

&lt;p&gt;One other question. I was looking at CellUtil the last day and remembered ByteRange. Was ByteRange an experiment that now should be purged from the code base? I see it used by PrefixTree. Is that the only place that uses it? I see support in MemStore. Should we undo it? If deprecated, should we tidy it up some (it is spread about the codebase currently).&lt;/p&gt;

&lt;p&gt;Skimming patch, its small! Seems good. Will do closer review later.&lt;/p&gt;

</comment>
                            <comment id="15014070" author="ram_krish" created="Thu, 19 Nov 2015 18:15:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;The patch will work though we&apos;ve not converted PrefixTree? PrefixTree will run really slow if it is doing copies all the time which will be a big surprise.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The read part there is no problem. Only when we try to write the Prefixtree cell we need to ensure that we handle offheap cells also. Currently in compaction case there will be a copy happening while writing back to the new file.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Ditto for TagCompression. It will work after the patch goes in, it&apos;ll just be slow because of all the copies?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Again this is applicable only during writes (during compaction).  Not during reads.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Can you explain this more or point to a place in the code that shows what you are seeing?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My point was that when DBEs are enabled then the cell that we get to write during compaction will be a DBE cell ie the decoded cell based on the DBE algo and that will be written back after encoding into the new file. &lt;br/&gt;
In our current trunk, these DBE decoded cells are of two types (onheap DBE cell and offheap DBE cell). In the offheap cell only the value part is referring to the offheap hfileblock coming out of the bucket cache. All other components are onheap byte[] only since the need to be decoded. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Was ByteRange an experiment that now should be purged from the code base? I see it used by PrefixTree. Is that the only place that uses it? I see support in MemStore. Should we undo it? If deprecated, should we tidy it up some&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think PrefixTree needs it when the cells are KV based. Will check once if we can purge it.&lt;/p&gt;
</comment>
                            <comment id="15014434" author="stack" created="Thu, 19 Nov 2015 21:38:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;Currently in compaction case there will be a copy happening while writing back to the new file.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Can do in a follow up.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In the offheap cell only the value part is referring to the offheap hfileblock coming out of the bucket cache. All other components are onheap byte[] only since the need to be decoded.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok. Seems like related work but can do in follow-on.&lt;/p&gt;

&lt;p&gt;Yeah, would be cool if we could purge but you probably can&apos;t. It is a PrefixTree intrinsic. The best we could do is move it back into the prefixtree module I&apos;d say.&lt;/p&gt;</comment>
                            <comment id="15033221" author="ram_krish" created="Tue, 1 Dec 2015 07:00:10 +0000"  >&lt;p&gt;Can this patch be committed as is?  For the remaining tasks will do in the follow up work.&lt;/p&gt;</comment>
                            <comment id="15033328" author="ram_krish" created="Tue, 1 Dec 2015 08:25:34 +0000"  >&lt;p&gt;Ping !! &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="15033722" author="anoop.hbase" created="Tue, 1 Dec 2015 14:06:12 +0000"  >&lt;p&gt;Looks good.&lt;br/&gt;
Some minor comments&lt;/p&gt;

&lt;p&gt;writeRowExcludingCommonPrefix&lt;br/&gt;
Call it writeRowSkippingBytes(out, Cell, int skipBytes)&lt;br/&gt;
Same way for writeQualifierExcludingCommonPrefix&lt;/p&gt;

&lt;p&gt;writeRow  -&amp;gt; Do we need to pass the rLength when we can get it from Cell? Or may be it is already computed in calling place and u want to avoid parsing it again?  Same for writeRowExcludingCommonPrefix&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; rkCommonPrefix = 0;
1119	    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (c1 &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; ByteBufferedCell &amp;amp;&amp;amp; c2 &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; ByteBufferedCell) {
1120	      rkCommonPrefix = ByteBufferUtils.findCommonPrefix(((ByteBufferedCell) c1).getRowByteBuffer(),
1121	        ((ByteBufferedCell) c1).getRowPosition(), rLen1, ((ByteBufferedCell) c2).getRowByteBuffer(),
1122	        ((ByteBufferedCell) c2).getRowPosition(), rLen2);
1123	    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
1124	      &lt;span class=&quot;code-comment&quot;&gt;// There cannot be a &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; where one cell is BBCell and other is KeyValue. This flow comes either
&lt;/span&gt;1125	      &lt;span class=&quot;code-comment&quot;&gt;// in flush or compactions. In flushes both cells are KV and in &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; of compaction it will be either
&lt;/span&gt;1126	      &lt;span class=&quot;code-comment&quot;&gt;// KV or BBCell
&lt;/span&gt;1127	      rkCommonPrefix = ByteBufferUtils.findCommonPrefix(c1.getRowArray(), c1.getRowOffset()
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can the instance of check be limited in some util place? CellUtil?  &lt;/p&gt;

&lt;p&gt;nit:&lt;br/&gt;
ByteBufferUtils.toByte(in, offset + i)&lt;br/&gt;
Just call toByte() as we are in same class&lt;br/&gt;
Same way in new method findCommonPrefix&lt;/p&gt;</comment>
                            <comment id="15034159" author="ram_krish" created="Tue, 1 Dec 2015 17:39:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;Or may be it is already computed in calling place and u want to avoid parsing it again? Same for writeRowExcludingCommonPrefix&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes that is the reason. Better to pass the rlen to the API instead of parsing it again.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can the instance of check be limited in some util place? CellUtil?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not sure I get this. The above code is already in CellUtil right?&lt;/p&gt;</comment>
                            <comment id="15034224" author="ram_krish" created="Tue, 1 Dec 2015 18:06:36 +0000"  >&lt;p&gt;Updated patch for QA.&lt;/p&gt;</comment>
                            <comment id="15034304" author="anoop.hbase" created="Tue, 1 Dec 2015 18:33:06 +0000"  >&lt;p&gt;Oh ya.. my bad. NP.&lt;/p&gt;</comment>
                            <comment id="15034734" author="hadoopqa" created="Tue, 1 Dec 2015 22:26:27 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12775086/HBASE-14832_1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12775086/HBASE-14832_1.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit ed4e00119ec43bb9e8fb3d9b37878b4d1dfb8e71.&lt;br/&gt;
  ATTACHMENT ID: 12775086&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 8 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated new checkstyle errors. Check build console for list of new errors.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +      // There cannot be a case where one cell is BBCell and other is KeyValue. This flow comes either&lt;br/&gt;
+      // in flush or compactions. In flushes both cells are KV and in case of compaction it will be either&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16721//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16721//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16721//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16721//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16721//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16721//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/16721//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/16721//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="15035273" author="ram_krish" created="Wed, 2 Dec 2015 05:00:14 +0000"  >&lt;p&gt;Pushed to master. Corrected the 100 line length and committed the patch. Thanks for the reviews. &lt;/p&gt;</comment>
                            <comment id="15035482" author="hudson" created="Wed, 2 Dec 2015 08:52:54 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-Trunk_matrix #523 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-Trunk_matrix/523/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-Trunk_matrix/523/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14832&quot; title=&quot;Ensure write paths work with ByteBufferedCells in case of compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14832&quot;&gt;&lt;del&gt;HBASE-14832&lt;/del&gt;&lt;/a&gt; Ensure write paths work with ByteBufferedCells in case of (ramkrishna: rev aa41232a877d7a8485bc361fd62150d7c094e9a4)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/NoOpDataBlockEncoder.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/PrefixKeyDeltaEncoder.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/CellUtil.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteBufferUtils.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/FastDiffDeltaEncoder.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/test/RedundantKVGenerator.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileDataBlockEncoder.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/CopyKeyDataBlockEncoder.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DiffKeyDeltaEncoder.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15087639" author="anoop.hbase" created="Thu, 7 Jan 2016 16:14:11 +0000"  >&lt;p&gt;Came to this area of code and this patch while working on off heap write path PoC.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (cell &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; ByteBufferedCell) {
890	      out.writeShort(rowLen);
891	      ByteBufferUtils.copyBufferToStream(out, ((ByteBufferedCell) cell).getRowByteBuffer(),
892	        ((ByteBufferedCell) cell).getRowPosition(), rowLen);
893	      out.writeByte(fLen);
894	      ByteBufferUtils.copyBufferToStream(out, ((ByteBufferedCell) cell).getFamilyByteBuffer(),
895	        ((ByteBufferedCell) cell).getFamilyPosition(), fLen);
896	      ByteBufferUtils.copyBufferToStream(out, ((ByteBufferedCell) cell).getQualifierByteBuffer(),
897	        ((ByteBufferedCell) cell).getQualifierPosition(), qLen);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We have done this but it is not really helping us!  &lt;br/&gt;
In ByteBufferUtils#copyBufferToStream&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void copyBufferToStream(OutputStream out, ByteBuffer in,
      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (in.hasArray()) {
      out.write(in.array(), in.arrayOffset() + offset,
          length);
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 0; i &amp;lt; length; ++i) {
        out.write(toByte(in, offset + i));
      }
    }
  }
  &lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So for DBB it is so costly op writing byte by byte reading each to on heap.&lt;br/&gt;
Even if we use writeByteBuffer(OutputStream out, ByteBuffer b, int offset, int length), it won&apos;t help us as the underlying stream is a ByteArrayOutputStream and so we will end up in copying.&lt;/p&gt;</comment>
                            <comment id="15087652" author="anoop.hbase" created="Thu, 7 Jan 2016 16:21:33 +0000"  >&lt;p&gt;Raised &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15077&quot; title=&quot;Support OffheapKV write in compaction with out copying data on heap&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15077&quot;&gt;&lt;del&gt;HBASE-15077&lt;/del&gt;&lt;/a&gt; to handle this.&lt;/p&gt;</comment>
                            <comment id="15087924" author="stack" created="Thu, 7 Jan 2016 19:26:48 +0000"  >&lt;p&gt;Nice digging &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12928359">HBASE-15077</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12773232" name="HBASE-14832.patch" size="36529" author="ram_krish" created="Thu, 19 Nov 2015 12:38:39 +0000"/>
                            <attachment id="12775086" name="HBASE-14832_1.patch" size="36465" author="ram_krish" created="Tue, 1 Dec 2015 18:06:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 18 Nov 2015 15:45:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            49 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2ol07:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>