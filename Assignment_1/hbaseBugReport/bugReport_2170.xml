<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:59:31 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2170/HBASE-2170.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2170] hbase lightweight client library as a distribution </title>
                <link>https://issues.apache.org/jira/browse/HBASE-2170</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;As a wish - it would be nice to have a hbase client library (subset of the current hbase distribution) that needs to be present at the hbase client level to interact with the master/region servers. &lt;/p&gt;

&lt;p&gt;From an app integration - users of hbase can just link against the client library as opposed to getting the entire library to link against. &lt;/p&gt;




</description>
                <environment></environment>
        <key id="12446756">HBASE-2170</key>
            <summary>hbase lightweight client library as a distribution </summary>
                <type id="5" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Wish</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="kaykay.unique">Karthik K</reporter>
                        <labels>
                    </labels>
                <created>Wed, 27 Jan 2010 00:09:15 +0000</created>
                <updated>Sat, 11 Apr 2015 01:02:28 +0000</updated>
                            <resolved>Sat, 11 Apr 2015 01:02:28 +0000</resolved>
                                                                        <due></due>
                            <votes>4</votes>
                                    <watches>18</watches>
                                                                <comments>
                            <comment id="12833279" author="psmith@apache.org" created="Sat, 13 Feb 2010 01:43:18 +0000"  >&lt;p&gt;One of the things I was actually starting to look at was related to this, over on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2051&quot; title=&quot;Use builder pattern to improve usability of client API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2051&quot;&gt;&lt;del&gt;HBASE-2051&lt;/del&gt;&lt;/a&gt; there is a utility library, of which a tiny-weeny class was an HBaseConfigurationFactory class for Spring users (such as myself).&lt;/p&gt;

&lt;p&gt;The lightweight client library in many cases only needs the basic parameters of the zookeeper location, and the path on HDFS.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; propertyMap = ImmutableMap.of(&lt;span class=&quot;code-quote&quot;&gt;&quot;hbase.rootdir&quot;&lt;/span&gt;,
                &lt;span class=&quot;code-quote&quot;&gt;&quot;file:&lt;span class=&quot;code-comment&quot;&gt;///tmp/hbase-${user.name}/hbase&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;hbase.cluster.distributed&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;&quot;&lt;/span&gt;,
&lt;/span&gt;                &lt;span class=&quot;code-quote&quot;&gt;&quot;hbase.zookeeper.quorum&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;localhost&quot;&lt;/span&gt;);

HBaseConfigurationFactory hBaseConfigurationFactory = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HBaseConfigurationFactory(
                propertyMap);

HBaseConfiguration config = (HBaseConfiguration) hbaseConfigurationFactory.getObject();

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think it&apos;s less about needing a smaller library, but more about a cleaner interface to create a logical &apos;connection&apos; to the HBase cluster.&lt;/p&gt;</comment>
                            <comment id="12833282" author="ryanobjc" created="Sat, 13 Feb 2010 01:48:03 +0000"  >&lt;p&gt;in theory a client will only need the client/ and ipc/ directories and maybe a few more.  Also zookeeper. And some other libraries.&lt;/p&gt;
</comment>
                            <comment id="12833286" author="psmith@apache.org" created="Sat, 13 Feb 2010 01:56:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;in theory a client will only need the client/ and ipc/ directories and maybe a few more. Also zookeeper. And some other libraries.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;that would make it simple to pull those packages out into a &apos;hbase-client&apos; Maven module (see &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2099&quot; title=&quot;Move build to Maven&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2099&quot;&gt;&lt;del&gt;HBASE-2099&lt;/del&gt;&lt;/a&gt;).  We could start by getting that depending on hbase-core, and exclude all transitive dependencies but add add back in the specific ones needed (zookeeper et al).&lt;/p&gt;
</comment>
                            <comment id="12833341" author="kaykay.unique" created="Sat, 13 Feb 2010 08:05:32 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; that would make it simple to pull those packages out into a &apos;hbase-client&apos; Maven module (see &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2099&quot; title=&quot;Move build to Maven&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2099&quot;&gt;&lt;del&gt;HBASE-2099&lt;/del&gt;&lt;/a&gt;). We could start by getting that depending on hbase-core, and exclude all transitive dependencies but add add back in the specific ones needed (zookeeper et al).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;+1 . Along ryan&apos;s suggestion - it might need some minor refactoring to carve out the separate package , but it might worth the effort to focus on the releases of the server side. &lt;/p&gt;</comment>
                            <comment id="12842258" author="lars_francke" created="Sat, 6 Mar 2010 13:32:39 +0000"  >&lt;p&gt;Now that we&apos;ve moved to Maven I had a look at this. While it might be possible to build custom assemblies for the client it won&apos;t be easy to automate - I hope Kay Kay or Paul can comment on that as they have more experience with this&lt;/p&gt;

&lt;p&gt;We&apos;re also looking at all the dependencies and marking them as &quot;optional&quot; if they are only needed for certain features (client, server, ...). But it&apos;s Mavens philosophy that an optional dependency is a sign for an &quot;inefficient&quot; build layout and that the project should be split into multiple modules.&lt;/p&gt;

&lt;p&gt;I haven&apos;t taken a close look at this and I&apos;m not very familiar with the HBase source code but it seems to me as if it would make sense to split the current &quot;core&quot; module in at least three parts: &lt;em&gt;common&lt;/em&gt;, &lt;em&gt;client&lt;/em&gt; and &lt;em&gt;server&lt;/em&gt;. This would allow us to bundle all those classes that are used by both components in the &lt;em&gt;common&lt;/em&gt; module which hopefully has none or very little external dependencies.&lt;/p&gt;

&lt;p&gt;I know that this would mean yet another big change in the source code layout so take it at as a proposal for one possible solution to the problem. I&apos;ve not been with the project for very long but I&apos;ve seen questions about how to use HBase in Java multiple times. This would hopefully make this easier and clear it up a bit.&lt;/p&gt;

&lt;p&gt;If you decide this is a good idea I&apos;d be willing to spend some time on it.&lt;/p&gt;</comment>
                            <comment id="12842301" author="kaykay.unique" created="Sat, 6 Mar 2010 19:58:18 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; current &quot;core&quot; module in at least three parts: common, client and server.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; .. the common module which hopefully has none or very little external dependencies.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;



&lt;p&gt;+1 . That is something along the lines of what I was thinking. &lt;/p&gt;

&lt;p&gt;It is true it might need another round of refactoring of code. I was thinking of adding ipc / client and thrift/generated (and stargate client ) packages in the client . &lt;/p&gt;

&lt;p&gt;I believe that it might be very useful long term for the adoption of the client alone with specific focus on examples , while there could be more focus on the server module. And yes - the client library would be much more light-weight than the entire app server . &lt;/p&gt;

&lt;p&gt;I can spend some time too on this one, now that we have a stable build, it might be good to have a look at this. &lt;/p&gt;</comment>
                            <comment id="12842326" author="dhruba" created="Sat, 6 Mar 2010 22:32:05 +0000"  >&lt;p&gt;It appears that from a build perspective (inefficient maven dependencies, etc, etc) you would want to split hbase into multiple jars. But from a deployment &amp;amp; operation perspective, it is a nightmare. Can somebody please enumerate which jars are currently required by a hbase client application and also enumerate which jars will be needed by after this patch? &lt;/p&gt;

&lt;p&gt;Also, can somebody who is &lt;b&gt;using&lt;/b&gt; hbase vouch for the fact that the splitting of jars is helpful? &lt;/p&gt;

&lt;p&gt;The analogy I draw is that the hadoop libraries are the same for the hadoop clients as well as servers. I have found it to be great help for operation purposes: there is lesser chance of mixing  up different incompatible versions. &lt;/p&gt;</comment>
                            <comment id="12842330" author="ryanobjc" created="Sat, 6 Mar 2010 22:45:04 +0000"  >&lt;p&gt;common would depend on hadoop-core,hadoop-hdfs at least (and possibly hadoop-mapred alas).&lt;/p&gt;

&lt;p&gt;and i somewhat agree with dhruba, in a world of copying jars around, a single jar reduces the mess-up possibility significantly.  In an automated ops-world this is somewhat less important I hope &lt;/p&gt;</comment>
                            <comment id="12842342" author="kaykay.unique" created="Sat, 6 Mar 2010 23:20:52 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  But from a deployment &amp;amp; operation perspective, it is a nightmare.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Why ? It is a nightmare now.  Theoretically - if there were a client for HBase doing some M-R / inserts / scans - we have to add the hbase-&lt;b&gt;.jar and everything in lib/&lt;/b&gt;.jar as well , because it is monolithic. Currently - we just add hbase-0.xx.jar and add other jars as required until there is no classnotfoundexception, which is really not the job of the client developer, but that of the system publisher to make the distinction. &lt;/p&gt;

&lt;p&gt;I guess that holds true for any client/server system, to publish a light-weight client , to focus on the server development better with different release cycles, depending on the need. &lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;  Can somebody please enumerate which jars are currently required by a hbase client application and also enumerate which jars will be needed by after this patch?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;The point is to shift the responsibility from the hbase client user to the hbase maintainers , to decide which dependencies need to go with the client, so the client does not need to do &lt;b&gt;add a jar from lib until no class not found exception occurs&lt;/b&gt; algorithm.  On top of my head - I can think of log4j / zk / thrift / rest , that would come in here. &lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; Also, can somebody who is using hbase vouch for the fact that the splitting of jars is helpful?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;To begin with ,  &lt;b&gt;we do&lt;/b&gt; . We have a HBase farm set up , consisting of the data set / and being inserted from the outside world and independent developers who develop on top of HBase ( on top of the ramp up curve, that they have to get on to the platform) are plain confused by the list of jars and adding them to the client namespace, and if it does not make sense to add , say hdfs.jar in the client lib of hbase , if all they wanted to do was to do some scans / M-R on the hbase data, as that information is immaterial. We have plans to start using mahout and build algorithms on top of the platform, and it makes no sense whatsoever to bring in the hidden dependencies of hbase and expose it to the hbase client to discourage them entirely. &lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; The analogy I draw is that the hadoop libraries are the same for the hadoop clients as well as servers. I have found it to be great help for operation purposes: there is lesser chance of mixing up different incompatible versions.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;But the hbase client is not meant to be on the same machine as a server ? From an operational purpose  - you will be having a different set of jars for client and the server. And the common jar, would not be released explicitly but be part of the client and the server as appropriate. &lt;/p&gt;


&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;   in a world of copying jars around, a single jar reduces the mess-up possibility significantly. In an automated ops-world this is somewhat less important I hope&apos;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;The client is susceptible to less changes and the server a lot more. If there were 2 jars - client and the server, would not that make it more clear as to the developer and the ops as to which jar needs to be replaced and which machines are affected ? &lt;/p&gt;



</comment>
                            <comment id="12842355" author="psmith@apache.org" created="Sun, 7 Mar 2010 02:06:23 +0000"  >&lt;p&gt;btw, there&apos;s no reason not to produce a &apos;hbase-uber&apos; artifact that combines everything into one as there is now, that can be done with a fairly simple assembly.   For those that need/like having slimmer client libraries they can still do that, those that feel safer with a fat jar, go right ahead.  &lt;/p&gt;</comment>
                            <comment id="12842381" author="kaykay.unique" created="Sun, 7 Mar 2010 09:39:03 +0000"  >
&lt;p&gt;$ mvn jdepend:generate &lt;/p&gt;



&lt;p&gt;&amp;lt;project name=&quot;xml2html&quot; default=&quot;change&quot;&amp;gt;&lt;br/&gt;
  &amp;lt;target name=&quot;change&quot;&amp;gt; &lt;br/&gt;
  &amp;lt;style basedir=&quot;.&quot; destdir=&quot;.&quot;&lt;br/&gt;
         includes=&quot;jdepend-report.xml&quot; &lt;br/&gt;
         style=&quot;$&lt;/p&gt;
{ant.home}
&lt;p&gt;/etc/jdepend.xsl&quot; /&amp;gt;&lt;br/&gt;
 &amp;lt;/target&amp;gt;&lt;br/&gt;
&amp;lt;/project&amp;gt;&lt;/p&gt;

&lt;p&gt;Interesting report that can be taken as a starting point / estimation of dependencies before venturing along the route. &lt;/p&gt;
</comment>
                            <comment id="12842387" author="kaykay.unique" created="Sun, 7 Mar 2010 09:57:39 +0000"  >&lt;p&gt;The report is a bit misleading because java/javax and other external packages, outside hbase are not ignored. Will submit a new one , after fixing the same. &lt;/p&gt;</comment>
                            <comment id="12842463" author="dhruba" created="Sun, 7 Mar 2010 18:51:33 +0000"  >&lt;p&gt;+1 to Paul smith&apos;s proposal that we create a hbase-uher artifact. can this be done as part of this patch Kay Kay?&lt;/p&gt;
</comment>
                            <comment id="12842469" author="kaykay.unique" created="Sun, 7 Mar 2010 19:25:48 +0000"  >&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; btw, there&apos;s no reason not to produce a &apos;hbase-uber&apos; artifact that combines everything into one as there is now, that can be done with a fairly simple assembly. For those that need/like having slimmer client libraries they can still do that, those that feel safer with a fat jar, go right ahead.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Thanks Paul for the  hint. &lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt; +1 to Paul smith&apos;s proposal that we create a hbase-uher artifact. can this be done as part of this patch Kay Kay?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Sure, Dhruba.  &lt;/p&gt;

&lt;p&gt;There will some be some work to move around some  classes / methods to achieve a decent separation between the client / common / server , before we venture down the road of 3 separate artifacts.  So yes - there will be an option for the single jar as well, for distribution. &lt;/p&gt;</comment>
                            <comment id="12868341" author="stack" created="Mon, 17 May 2010 18:41:52 +0000"  >&lt;p&gt;An argument for making hbase-common, hbase-server, and hbase-client not really mentioned above is that if we adopt these componentizations, and follow through with them, we&apos;ll end up with a software base that is more easy to maintain than the current hairball we currently have.&lt;/p&gt;

&lt;p&gt;I&apos;m good w/ going this route.  What gives me pain is that we&apos;d have to do it using mvn modules.  We have the opportunity just now of making our mvn build simple having ejected all contribs; we could undo module support.  But module support I think is required to do the above componentization.&lt;/p&gt;
</comment>
                            <comment id="12868374" author="kaykay.unique" created="Mon, 17 May 2010 19:50:21 +0000"  >&lt;p&gt;As the first step, (in the current code base), refactoring of the code , taking the jdepend reports as a cue might be a good place to begin with (w.r.t stability of the packages) , where we separately identify the package list to be grouped . &lt;/p&gt;

&lt;p&gt;After that is done, it would be easier to split the modules into server , client , common artifacts. &lt;/p&gt;</comment>
                            <comment id="12868386" author="ryanobjc" created="Mon, 17 May 2010 20:19:47 +0000"  >&lt;p&gt;would we need to do common,client,server?  could we do:&lt;/p&gt;

&lt;p&gt;hbase-client  (contains o.a.h.h.client and o.a.h.h.util &amp;amp; others)&lt;br/&gt;
   ^&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;hbase-server  (everything else)&lt;/p&gt;






</comment>
                            <comment id="12917367" author="bruno" created="Sun, 3 Oct 2010 17:30:17 +0000"  >&lt;p&gt;In case this is useful for someone: as a temporary solution in Lily we have a hbase-client wrapper project which defines the necessary excludes:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.outerthought.org/svn_public/outerthought_lilycms/trunk/hbase-client/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dev.outerthought.org/svn_public/outerthought_lilycms/trunk/hbase-client/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This might save some time for someone who wants to do the same.&lt;/p&gt;

&lt;p&gt;As I found it too much work to enter all these exclusions manually, and to be sure no new dependencies sneak in when switching to newer hbase versions, I made a little Maven plugin:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://dev.outerthought.org/svn_public/outerthought_lilycms/trunk/tools/hbase-exclusions-plugin/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://dev.outerthought.org/svn_public/outerthought_lilycms/trunk/tools/hbase-exclusions-plugin/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12993491" author="lars_francke" created="Fri, 11 Feb 2011 13:56:02 +0000"  >&lt;p&gt;I think I would spend some time on this but only if we have a decision on how to go forward.&lt;/p&gt;

&lt;p&gt;I&apos;d strongly prefer a modularization of HBase for various reasons. Stack laid out a few of them in terms of software design and maintainability.&lt;br/&gt;
My first step would be to see if we need two or three modules (as per Ryan&apos;s latest comment) and go forward from there.&lt;/p&gt;</comment>
                            <comment id="12996976" author="stack" created="Sun, 20 Feb 2011 06:03:18 +0000"  >&lt;p&gt;@Lars What you thinking?  A client rewrite?  (Out of interest, have you&apos;ve seen &lt;a href=&quot;https://github.com/stumbleupon/asynchbase?&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/stumbleupon/asynchbase?&lt;/a&gt;)  What other components you thinking?&lt;/p&gt;</comment>
                            <comment id="13006933" author="lars_francke" created="Tue, 15 Mar 2011 14:16:29 +0000"  >&lt;p&gt;I had hoped that a client rewrite would not be needed. I did take a look at it a few months back and the interdependencies weren&apos;t as bad as I had thought at first. I might be wrong though.&lt;/p&gt;

&lt;p&gt;I&apos;ve seen that asynchronous client but never used it. Very promising though! Are you thinking about bringing it into the core?&lt;/p&gt;

&lt;p&gt;What I would do is to identify everything that the client package depends on and then try to find a way to limit its dependencies to the absolute minimum and create a Maven module out of it. This might involve some code changes but without taking a closer look it&apos;s hard to say.&lt;/p&gt;

&lt;p&gt;Does this modularization need a vote on the mailing list? Just to see if you want to go ahead with it or not.&lt;/p&gt;</comment>
                            <comment id="13007026" author="stack" created="Tue, 15 Mar 2011 17:18:08 +0000"  >&lt;p&gt;@Lars I don&apos;t think we&apos;ll be bringing asynchbase into core (Beno&#238;t won&apos;t let us!  Ahead of his refusal, he makes a good argument that it makes no sense bringing it in).  I think a separate maven module would be necessary making the separation, probably the first step, or rather second step.  The first step is finding an advocate willing to take on this knarly issue.&lt;/p&gt;

&lt;p&gt;There would be a few advantages to extracting the client.  Way back when the gumgum lads tried to make the client/server go against Interfaces only.  Currently our Interface has zk pollution, a pollution that has gotten worse since gumgum boys last tried it.  This might be the third step we&apos;d take on making a separate client lib.&lt;/p&gt;</comment>
                            <comment id="13007027" author="stack" created="Tue, 15 Mar 2011 17:18:58 +0000"  >&lt;p&gt;Modularization would be pretty disruptive.  I&apos;d say that we should wait on branch of 0.92 before we&apos;d do it?  What you think?&lt;/p&gt;</comment>
                            <comment id="13007101" author="tlipcon" created="Tue, 15 Mar 2011 19:03:54 +0000"  >&lt;p&gt;I am +1 on this getting done &quot;at some point&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Won&apos;t comment on pre- or post-92.&lt;/p&gt;

&lt;p&gt;We could get started on the necessary refactoring before doing the build changes, though, by using a tool like JDepend to analyze inter-class and inter-package dependencies. Anyone have experience with this? (I don&apos;t, I&apos;ve just heard of it)&lt;/p&gt;</comment>
                            <comment id="13007186" author="stack" created="Tue, 15 Mar 2011 21:04:33 +0000"  >&lt;p&gt;We have (or can get easily) a license for &lt;a href=&quot;http://www.headwaysoftware.com/products/structure101/index.php&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.headwaysoftware.com/products/structure101/index.php&lt;/a&gt;.  They are Irish so it must be good software.&lt;/p&gt;</comment>
                            <comment id="13008737" author="tsuna" created="Sat, 19 Mar 2011 07:18:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;@Lars I don&apos;t think we&apos;ll be bringing asynchbase into core (Beno&#238;t won&apos;t let us! Ahead of his refusal, he makes a good argument that it makes no sense bringing it in)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, I don&apos;t think asynchbase will ever be part of core.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;asynchbase is .. well.. async.  Most programmers don&apos;t feel comfortable with this programming paradigm.  Plus Java has extremely poor support for asynchronous programming (because the syntax required to write callbacks is extremely verbose and pollutes the code and because the standard libraries don&apos;t play nicely with asynchronous programming).  I still think parallel asynchronous programming is the best option for truly scalable application servers, but I can also understand that average programmers need simple APIs that use paradigms they&apos;re used to.&lt;/li&gt;
	&lt;li&gt;Having said that, an async interface can easily be turned into a sync interface (the opposite isn&apos;t true), but I have no interest in maintaining a sync interface that wraps the asynchbase interface.&lt;/li&gt;
	&lt;li&gt;asynchbase uses a license that is in &quot;Category X&quot; (excluded) for Apache projects (LGPLv3+).  I have no interest in debating politics / licenses in this thread.  I just want to precise that contrary to a popular belief, LGPLv3+ isn&apos;t incompatible with the Apache license (version 2), it&apos;s just not allowed by the Apache Software Foundation in Apache projects.  A lot of people believe there is an incompatibility due to popular misinformation.&lt;/li&gt;
	&lt;li&gt;I personally do not wish to work with SVN and JIRA.  Even with &lt;tt&gt;git-svn&lt;/tt&gt;.  I&apos;m currently more than happy to maintain &lt;a href=&quot;https://github.com/stumbleupon/asynchbase&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;asynchbase on GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I hope you understand.&lt;/p&gt;

&lt;p&gt;Having said that, I think asynchbase contains a sane implementation and I&apos;d be happy to answer any question you might have about it.  It contains &lt;a href=&quot;https://github.com/stumbleupon/asynchbase/blob/master/src/HBaseRpc.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;detailed documentation of the HBase RPC protocol&lt;/a&gt; and &lt;a href=&quot;http://mail-archives.apache.org/mod_mbox/hbase-user/201102.mbox/%3CAANLkTi=JU+7TPc5=CcTzamyLMXBL5cYVVOS73J1Y-TBX@mail.gmail.com%3E&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;greatly outperforms the traditional HBase client&lt;/a&gt;.  After switching &lt;a href=&quot;http://opentsdb.net/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;OpenTSDB&lt;/a&gt; to it, I was able to push up to an order of magnitude more write throughput to HBase.  When doing a batch import where the data source is single threaded, I can push up to 200k &lt;tt&gt;KeyValue&lt;/tt&gt; per second to HBase (without WAL) on a 4 year old CPU.&lt;/p&gt;</comment>
                            <comment id="13008739" author="dhruba" created="Sat, 19 Mar 2011 07:25:23 +0000"  >&lt;p&gt;&amp;gt;  I can push up to 200k KeyValue per second to HBase (without WAL) on a 4 year old CPU.&lt;/p&gt;

&lt;p&gt;This is an impressive number. Just curious if u were able to run the same benchmark with WAL turned on, and what numbers you see then..&lt;/p&gt;</comment>
                            <comment id="13008822" author="stack" created="Sat, 19 Mar 2011 20:37:13 +0000"  >&lt;p&gt;@Beno&#238;t Can you post your comment to the dev list.  Its a waste having it as a comment in JIRA.&lt;/p&gt;</comment>
                            <comment id="13008872" author="tsuna" created="Sun, 20 Mar 2011 02:57:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;This is an impressive number. Just curious if u were able to run the same benchmark with WAL turned on, and what numbers you see then..&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Curiously enough, I see the same numbers.&lt;/p&gt;

&lt;p&gt;This is the 1st import I did Thursday (no WAL)&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ ./src/tsdb &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; /tmp/data.gz
[...]
2011-03-17 18:45:51,797 INFO  [main] TextImporter: ... 1000000 data points in 6688ms (149521.5 points/s)
2011-03-17 18:45:56,836 INFO  [main] TextImporter: ... 2000000 data points in 5044ms (198255.4 points/s)
2011-03-17 18:46:01,823 INFO  [main] TextImporter: ... 3000000 data points in 4986ms (200561.6 points/s)
2011-03-17 18:46:06,848 INFO  [main] TextImporter: ... 4000000 data points in 5025ms (199005.0 points/s)
2011-03-17 18:46:11,865 INFO  [main] TextImporter: ... 5000000 data points in 5016ms (199362.0 points/s)
2011-03-17 18:46:14,315 INFO  [main] TextImporter: Processed /tmp/data.gz in 29211 ms, 5487065 data points (187842.4 points/s)
2011-03-17 18:46:14,315 INFO  [main] TextImporter: Total: imported 5487065 data points in 29.212s (187838.4 points/s)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note: 1 data point = 1 &lt;tt&gt;KeyValue&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I commented out &lt;tt&gt;dp.setBatchImport(true);&lt;/tt&gt; in &lt;a href=&quot;https://github.com/stumbleupon/opentsdb/blob/master/src/tools/TextImporter.java#L225&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;TextImporter.getDataPoints&lt;/a&gt; and ran the same import again.  Note: this isn&apos;t exactly an apples-to-apples comparison because I&apos;m going to overwrite existing &lt;tt&gt;KeyValue&lt;/tt&gt; instead of creating new ones.  The table has &lt;tt&gt;VERSIONS=&amp;gt;1&lt;/tt&gt; but I think we disabled major compactions so we don&apos;t delete old data (Stack/JD correct me if I&apos;m mistaken about our setup).&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ ./src/tsdb &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; /tmp/data.gz
[...]
2011-03-19 19:09:36,102 INFO  [main] TextImporter: ... 1000000 data points in 6699ms (149276.0 points/s)
2011-03-19 19:09:41,101 INFO  [main] TextImporter: ... 2000000 data points in 5004ms (199840.1 points/s)
2011-03-19 19:09:46,051 INFO  [main] TextImporter: ... 3000000 data points in 4949ms (202061.0 points/s)
2011-03-19 19:09:51,006 INFO  [main] TextImporter: ... 4000000 data points in 4955ms (201816.3 points/s)
2011-03-19 19:09:56,017 INFO  [main] TextImporter: ... 5000000 data points in 5010ms (199600.8 points/s)
2011-03-19 19:09:58,422 INFO  [main] TextImporter: Processed /tmp/data.gz in 29025 ms, 5487065 data points (189046.2 points/s)
2011-03-19 19:09:58,422 INFO  [main] TextImporter: Total: imported 5487065 data points in 29.026s (189041.3 points/s)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So... this totally surprises me.  I expected to see a big performance drop with the WAL enabled.  I wondered if I didn&apos;t properly recompile the code or if something else was still disabling the WAL, but I verified with &lt;tt&gt;strace&lt;/tt&gt; that the WAL was turned on in the RPC that was going out:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
$ strace -f -e trace=write -s 4096 ./src/tsdb &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; /tmp/data.gz
[...]
[pid 21364] write(32, &quot;\0\0\312\313\0\0\0\3\0\10multiPut\0\0\0\00199\0\0\0\1Btsdb,\0\3\371L\301[\360\0\0\7\0\2;,1300586854474.a2a283a471dfcf5dcda82d05f2d468ed.\0\0\0:\1\r\0\3\371MZ2\200\0\0\7\0\0\216\177\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\1\0\0\0\1\1t\0\0\0(\0\0\6\340\0\0\0,\0\0\0\34\0\0\0\10\0\r\0\3\371MZ2\200\0\0\7\0\0\216\1t\0{\177\377\377\377\377\377\377\377\4\0\0\0\0C&amp;gt;\0\0\0\0\0,\0\0\0\34\0\0\0\10\0\r\0\3\371MZ2\200\0\0\7\0\0\216\1t\1k\177\377\377\377\377\377\377\377\4\0\0\0\0Cd...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This shows that the WAL is enabled.  Having the source of &lt;a href=&quot;https://github.com/stumbleupon/asynchbase/blob/master/src/MultiPutRequest.java#L274&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;asynchbase&apos;s &lt;tt&gt;MultiPutRequest&lt;/tt&gt;&lt;/a&gt; greatly helps make sense of this otherwise impossible to understand blob:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;We can easily see where the region name is, it contains an MD5 sum followed by a period (&lt;tt&gt;.&lt;/tt&gt;).&lt;/li&gt;
	&lt;li&gt;After the region name, the next 4 bytes are the number of edits for this region: &lt;tt&gt;\0\0\0:&lt;/tt&gt; = 58&lt;/li&gt;
	&lt;li&gt;Then there&apos;s a byte with value 1 with the &quot;versioning&quot; of the &lt;tt&gt;Put&lt;/tt&gt; object: &lt;tt&gt;\1&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;Then there&apos;s a the row key of the row we&apos;re writing to: &lt;tt&gt;\r\0\3\371MZ2\200\0\0\7\0\0\216&lt;/tt&gt; where:
	&lt;ul&gt;
		&lt;li&gt;&lt;tt&gt;\r&lt;/tt&gt; is a &lt;tt&gt;vint&lt;/tt&gt; indicating that the key length is 13 bytes&lt;/li&gt;
		&lt;li&gt;The first 3 bytes of the row key in OpenTSDB correspond to the metric ID: &lt;tt&gt;\0\3\371&lt;/tt&gt;&lt;/li&gt;
		&lt;li&gt;The next 4 bytes in OpenTSDB correspond to a UNIX timestamp: &lt;tt&gt;MZ2\200&lt;/tt&gt;.  Using Python, it&apos;s easy to confirm that:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; struct
&amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; time
&amp;gt;&amp;gt;&amp;gt; struct.unpack(&lt;span class=&quot;code-quote&quot;&gt;&quot;&amp;gt;I&quot;&lt;/span&gt;, &lt;span class=&quot;code-quote&quot;&gt;&quot;MZ2\200&quot;&lt;/span&gt;)
(1297756800,)
&amp;gt;&amp;gt;&amp;gt; time.ctime(*_)
&apos;Tue Feb 15 00:00:00 2011&apos;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
		&lt;li&gt;The next 6 bytes in OpenTSDB correspond to a tag:
		&lt;ul&gt;
			&lt;li&gt;3 bytes for a tag name ID: &lt;tt&gt;\0\0\7&lt;/tt&gt;&lt;/li&gt;
			&lt;li&gt;3 bytes for a tag value ID: &lt;tt&gt;\0\0\216&lt;/tt&gt;&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;Then we have the timestamp of the edit, which is unset, so it&apos;s &lt;tt&gt;Long.MAX_VALUE&lt;/tt&gt; which is &lt;tt&gt;\177\377\377\377\377\377\377\377&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;Then we have the &lt;tt&gt;RowLock&lt;/tt&gt; ID.  In this case no row lock is involved, so the value is &lt;tt&gt;-1L&lt;/tt&gt;: &lt;tt&gt;\377\377\377\377\377\377\377\377&lt;/tt&gt;&lt;/li&gt;
	&lt;li&gt;Then we have one byte indicating whether or not to use the WAL.  In this case, the byte is &lt;tt&gt;\1&lt;/tt&gt; so the WAL is enabled.  &#9633;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;After undoing my change to test once more with the WAL, I here&apos;s the output of &lt;tt&gt;strace&lt;/tt&gt;:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[pid 21727] write(32, &quot;\0\0\312\313\0\0\0\3\0\10multiPut\0\0\0\00199\0\0\0\1Btsdb,\0\3\371L\301[\360\0\0\7\0\2;,1300586854474.a2a283a471dfcf5dcda82d05f2d468ed.\0\0\0:\1\r\0\3\371MZ2\200\0\0\7\0\0\216\177\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\0\0\0\0\1\1t\0\0\0(\0\0\6\340\0\0\0,\0\0\0\34\0\0\0\10\0\r\0\3\371MZ2\200\0\0\7\0\0\216\1t\0{\177\377\377\377\377\377\377\377\4\0\0\0\0C&amp;gt;\0\0\0\0\0,\0\0\0\34\0\0\0\10\0\r\0\3\371MZ2\200\0\0\7\0\0\216\1t\1k\177\377\377\377\377\377\377\377\4\0\0\0\0Cd...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that the RPC is exactly the same modulo this byte that indicates whether the WAL is enabled or not.  In the last excerpt the byte is &lt;tt&gt;\0&lt;/tt&gt; (it&apos;s the first byte after the first long sequence of &lt;tt&gt;\377&lt;/tt&gt;), which indicates that as expected the WAL is disabled.&lt;/p&gt;

&lt;p&gt;In both cases I can consistently do 200k KeyValue inserts per second.  asynchbase was written specifically for high throughput server applications.&lt;/p&gt;

&lt;p&gt;I&apos;m running the tests above on a machine with a single crappy Intel E5405 (2.00GHz, 1 physical CPUs, 4 cores/CPU, 1 hardware thread/core = 4 hw threads total).  The HBase cluster I&apos;m writing to is one of StumbleUpon&apos;s clusters.  It&apos;s a fairly small cluster, but its size is largely irrelevant because the keys imported here only live in 3 different regions on 3 different servers.  During the import, the client consumes about 130% CPU (or 1 core and a third, if you prefer).&lt;/p&gt;

&lt;p&gt;PS: Stack, I replied here because even though I hate JIRA, it was easier to format my message here than on the mailing list.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12409017">HBASE-1015</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12498300">HBASE-3523</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12438128" name="jdepend-report.html" size="154553" author="kaykay.unique" created="Sun, 7 Mar 2010 09:39:03 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 13 Feb 2010 01:43:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32438</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 39 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hgnj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>99960</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>