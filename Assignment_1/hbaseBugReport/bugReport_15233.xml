<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:01:16 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-15233/HBASE-15233.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-15233] Bytes.toBytes() methods should allow arrays to be re-used </title>
                <link>https://issues.apache.org/jira/browse/HBASE-15233</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Today we have this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] toBytes(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; val) {
    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] b = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[8];
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 7; i &amp;gt; 0; i--) {
      b[i] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;) val;
      val &amp;gt;&amp;gt;&amp;gt;= 8;
    }
    b[0] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;) val;
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; b;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;might be nice to also have this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] toBytes(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; val, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] reuse) {
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; i = 7; i &amp;gt; 0; i--) {
      reuse[i] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;) val;
      val &amp;gt;&amp;gt;&amp;gt;= 8;
    }
    reuse[0] = (&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;) val;
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; reuse;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Same for all the other Bytes.toBytes() methods.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12937623">HBASE-15233</key>
            <summary>Bytes.toBytes() methods should allow arrays to be re-used </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="3" iconUrl="https://issues.apache.org/jira/images/icons/statuses/inprogress.png" description="This issue is being actively worked on at the moment by the assignee.">In Progress</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="mfernest">Michael Ernest</assignee>
                                    <reporter username="jmspaggi">Jean-Marc Spaggiari</reporter>
                        <labels>
                            <label>beginner</label>
                    </labels>
                <created>Mon, 8 Feb 2016 20:12:12 +0000</created>
                <updated>Thu, 12 May 2016 13:09:27 +0000</updated>
                                            <version>1.1.3</version>
                                                    <component>API</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="15138346" author="anoop.hbase" created="Tue, 9 Feb 2016 04:51:46 +0000"  >&lt;p&gt;In which area of code, you think we can make use of this new method?  If there are, it will be nice to add.&lt;/p&gt;</comment>
                            <comment id="15138878" author="jmspaggi" created="Tue, 9 Feb 2016 12:34:49 +0000"  >&lt;p&gt;When doing MR job to to create HFiles for bulkload. If you key is a long, like, timestamp, or what ever. Instead of creating a byte[] at each mapper iteration you might want to re-use it... The same is true for any type. Long, Booleans, etc. And not just for the key, but also if it&apos;s in the values.&lt;/p&gt;

&lt;p&gt;You can also for sure easily just re-implement Bytes.toBytes() in your own utility class or directly in your mapper, but might be consistent to see those methods added there since they are already very similar to what we have.&lt;/p&gt;

&lt;p&gt;Hope it makes sense for you.&lt;/p&gt;</comment>
                            <comment id="15138901" author="anoop.hbase" created="Tue, 9 Feb 2016 12:52:09 +0000"  >&lt;p&gt;ok. Pls go for it JMS.  If there are some areas in HBase code base itself to make use of this API, it will be great to do that&lt;/p&gt;</comment>
                            <comment id="15138907" author="jmspaggi" created="Tue, 9 Feb 2016 12:58:44 +0000"  >&lt;p&gt;I agree. I will try to find time to take a look if we can use that anywhere... As you said, might be great. &lt;/p&gt;

&lt;p&gt;For the coding, Rachel assigned this JIRA to her so I believe she is working on that. I will let her do and I will search all Bytes.toBytes() usages so see if we can use the re-use...&lt;/p&gt;</comment>
                            <comment id="15281486" author="jmspaggi" created="Thu, 12 May 2016 12:51:55 +0000"  >&lt;p&gt;So. I search a bit for some places where this can be used and found many. I can not list them all here. I recommend to open another JIRA for that.&lt;/p&gt;

&lt;p&gt;Here is one good example. In MetaTableAccessor.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Put addLocation(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Put p, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ServerName sn, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; openSeqNum, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; replicaId){
    &lt;span class=&quot;code-comment&quot;&gt;// using regionserver&apos;s local time as the timestamp of Put.
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// See: HBASE-11536
&lt;/span&gt;    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; now = EnvironmentEdgeManager.currentTime();
    p.addImmutable(HConstants.CATALOG_FAMILY, getServerColumn(replicaId), now,
      Bytes.toBytes(sn.getHostAndPort()));
    p.addImmutable(HConstants.CATALOG_FAMILY, getStartCodeColumn(replicaId), now,
      Bytes.toBytes(sn.getStartcode()));
    p.addImmutable(HConstants.CATALOG_FAMILY, getSeqNumColumn(replicaId), now,
      Bytes.toBytes(openSeqNum));
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; p;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can become&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; Put addLocation(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Put p, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ServerName sn, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; openSeqNum, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; replicaId){
  &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; longBytes = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[Bytes.SIZEOF_LONG];
    &lt;span class=&quot;code-comment&quot;&gt;// using regionserver&apos;s local time as the timestamp of Put.
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// See: HBASE-11536
&lt;/span&gt;    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; now = EnvironmentEdgeManager.currentTime();
    p.addImmutable(HConstants.CATALOG_FAMILY, getServerColumn(replicaId), now,
      Bytes.toBytes(sn.getHostAndPort());
    p.addImmutable(HConstants.CATALOG_FAMILY, getStartCodeColumn(replicaId), now,
      Bytes.toBytes(sn.getStartcode(), longBytes));
    p.addImmutable(HConstants.CATALOG_FAMILY, getSeqNumColumn(replicaId), now,
      Bytes.toBytes(openSeqNum, longBytes));
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; p;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It&apos;s not a HUGE saving, it just divides the number of arrays by 2.&lt;/p&gt;


&lt;p&gt;Another example in CellCodec&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void write(Cell cell) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
      checkFlushed();
      &lt;span class=&quot;code-comment&quot;&gt;// Row
&lt;/span&gt;      write(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength());
      &lt;span class=&quot;code-comment&quot;&gt;// Column family
&lt;/span&gt;      write(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength());
      &lt;span class=&quot;code-comment&quot;&gt;// Qualifier
&lt;/span&gt;      write(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength());
      &lt;span class=&quot;code-comment&quot;&gt;// Version
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.out.write(Bytes.toBytes(cell.getTimestamp()));
      &lt;span class=&quot;code-comment&quot;&gt;// Type
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.out.write(cell.getTypeByte());
      &lt;span class=&quot;code-comment&quot;&gt;// Value
&lt;/span&gt;      write(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());
      &lt;span class=&quot;code-comment&quot;&gt;// MvccVersion
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.out.write(Bytes.toBytes(cell.getSequenceId()));
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;can be changed to &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void write(Cell cell) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
      &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; longBytes = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[Bytes.SIZEOF_LONG];
      checkFlushed();
      &lt;span class=&quot;code-comment&quot;&gt;// Row
&lt;/span&gt;      write(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength());
      &lt;span class=&quot;code-comment&quot;&gt;// Column family
&lt;/span&gt;      write(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength());
      &lt;span class=&quot;code-comment&quot;&gt;// Qualifier
&lt;/span&gt;      write(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength());
      &lt;span class=&quot;code-comment&quot;&gt;// Version
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.out.write(Bytes.toBytes(cell.getTimestamp(), longBytes));
      &lt;span class=&quot;code-comment&quot;&gt;// Type
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.out.write(cell.getTypeByte());
      &lt;span class=&quot;code-comment&quot;&gt;// Value
&lt;/span&gt;      write(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());
      &lt;span class=&quot;code-comment&quot;&gt;// MvccVersion
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.out.write(Bytes.toBytes(cell.getSequenceId(), longBytes));
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here again, not a huge benefit, but still divides the number of created arrays by 2...&lt;/p&gt;

&lt;p&gt;So if we add them all, at the end, might still help.&lt;/p&gt;</comment>
                            <comment id="15281491" author="jmspaggi" created="Thu, 12 May 2016 12:57:24 +0000"  >&lt;p&gt;When this will be implemented we will have to open new JIRAs for other optimizations.&lt;/p&gt;

&lt;p&gt;Like still in CellCodec. If we change:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void write(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] bytes, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length)
    &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO add BB backed os check and &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; write. Pass Cell
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.out.write(Bytes.toBytes(length));
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.out.write(bytes, offset, length);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;by &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void write(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] bytes, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; offset, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] length)
    &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
      &lt;span class=&quot;code-comment&quot;&gt;// TODO add BB backed os check and &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; write. Pass Cell
&lt;/span&gt;      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.out.write(length);
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.out.write(bytes, offset, Bytes.toInt(length));
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then when we call write, we can again re-use the byte array and save again on objects creation... I will open another JIRA for CellCode optimizations...&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12968435">HBASE-15820</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 9 Feb 2016 04:51:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            31 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2skrj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>