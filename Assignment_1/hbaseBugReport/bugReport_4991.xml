<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:23:47 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-4991/HBASE-4991.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-4991] Provide capability to delete named region</title>
                <link>https://issues.apache.org/jira/browse/HBASE-4991</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;See discussion titled &apos;Able to control routing to Solr shards or not&apos; on lily-discuss&lt;br/&gt;
User may want to quickly dispose of out of date records by deleting specific regions. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12534488">HBASE-4991</key>
            <summary>Provide capability to delete named region</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="mubarakseyed">Mubarak Seyed</assignee>
                                    <reporter username="yuzhihong@gmail.com">Ted Yu</reporter>
                        <labels>
                    </labels>
                <created>Fri, 9 Dec 2011 15:46:13 +0000</created>
                <updated>Mon, 23 Sep 2013 18:23:55 +0000</updated>
                            <resolved>Wed, 21 Mar 2012 18:31:39 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="13166301" author="stack" created="Fri, 9 Dec 2011 16:48:29 +0000"  >&lt;p&gt;Yeah, we need this.  Should be easy enough... close region out on regionserver, remove from .META., bridge the hole in .META. by extending the span of the before or after regions, then finally removing dir from hdfs.&lt;/p&gt;</comment>
                            <comment id="13194079" author="zhihyu@ebaysf.com" created="Thu, 26 Jan 2012 18:57:27 +0000"  >&lt;p&gt;One of our teams is asking for this feature as well.&lt;/p&gt;</comment>
                            <comment id="13194103" author="mubarakseyed" created="Thu, 26 Jan 2012 19:22:59 +0000"  >&lt;p&gt;Do we need add a command under tools in hbase shell (with public API for delete named region)?&lt;/p&gt;

&lt;p&gt;How about this?&lt;/p&gt;

&lt;p&gt;hbase(main)&amp;gt; delete_region &amp;lt;region_name&amp;gt;&lt;/p&gt;

&lt;p&gt;compact and major_compact supports region-name as an argument, can we use the same approach? Thanks.&lt;/p&gt;</comment>
                            <comment id="13194107" author="zhihyu@ebaysf.com" created="Thu, 26 Jan 2012 19:26:58 +0000"  >&lt;p&gt;The above syntax makes sense.&lt;/p&gt;</comment>
                            <comment id="13194263" author="jmhsieh" created="Thu, 26 Jan 2012 23:18:31 +0000"  >&lt;p&gt;When you are deleting regions, do you intend to just getting rid of all the data in region, or do you mean to create a hole in a region and the merge with an preceding or succeeding region?&lt;/p&gt;
</comment>
                            <comment id="13194265" author="zhihyu@ebaysf.com" created="Thu, 26 Jan 2012 23:23:19 +0000"  >&lt;p&gt;I think both of them should be done.&lt;/p&gt;</comment>
                            <comment id="13194267" author="jmhsieh" created="Thu, 26 Jan 2012 23:23:53 +0000"  >&lt;p&gt;Oops &amp;#8211; wasn&apos;t looking at the comment tab.&lt;/p&gt;

&lt;p&gt;There is similar code in OnlineMerge and uber hbck.&lt;/p&gt;

&lt;p&gt;The code in uber hbck creates a new empty region, closes old regions,  moves data into the new empty region, and then activates the new now populated region.&lt;/p&gt;

&lt;p&gt;Beware &amp;#8211; I found just closing a region seems to have left data around in the HMaster&apos;s memory which cause disabling to have problems in the 0.90.x version.  I&apos;m in the process of porting to trunk/0.92 currently and am finding out if there are similar or different problems.  I think I saw something else in closeRegion recently that I need to try out &amp;#8211; don&apos;t remember which version that is however.&lt;/p&gt;</comment>
                            <comment id="13194282" author="zhihyu@ebaysf.com" created="Thu, 26 Jan 2012 23:38:27 +0000"  >&lt;p&gt;BTW OnlineMerger is in src/main/java/org/apache/hadoop/hbase/util/HMerge.java&lt;/p&gt;

&lt;p&gt;I think for this case we don&apos;t need to create an empty region because we would end up closing at least two regions. That may increase the downtime for the underlying table.&lt;/p&gt;</comment>
                            <comment id="13194517" author="mubarakseyed" created="Fri, 27 Jan 2012 06:36:24 +0000"  >&lt;p&gt;I think we can make use of &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; merge(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; HRegionInfo[] info) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((currentSize + nextSize) &amp;lt;= (maxFilesize / 2)) {
          &lt;span class=&quot;code-comment&quot;&gt;// We merge two adjacent regions &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; their total size is less than
&lt;/span&gt;          &lt;span class=&quot;code-comment&quot;&gt;// one half of the desired maximum size
&lt;/span&gt;          LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Merging regions &quot;&lt;/span&gt; + currentRegion.getRegionNameAsString() +
            &lt;span class=&quot;code-quote&quot;&gt;&quot; and &quot;&lt;/span&gt; + nextRegion.getRegionNameAsString());
          HRegion mergedRegion =
            HRegion.mergeAdjacent(currentRegion, nextRegion);
          updateMeta(currentRegion.getRegionName(), nextRegion.getRegionName(),
              mergedRegion);
          &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;what happens if sum(previous_region_size and next_region_size ) &amp;gt; maxFileSize when we try to merge adjacent regions (to bridge the hole)?&lt;/p&gt;</comment>
                            <comment id="13194518" author="zhihyu@ebaysf.com" created="Fri, 27 Jan 2012 06:47:19 +0000"  >&lt;p&gt;Good point.&lt;br/&gt;
As I outlined @ 26/Jan/12 23:38, we don&apos;t need to create empty region. Therefore we don&apos;t merge regions.&lt;br/&gt;
For successive regions R1, R2 and R3, if we delete R2, we can change the end key of R1 to be the original end key of R2 and drop region R2 directly.&lt;/p&gt;</comment>
                            <comment id="13194967" author="zhihyu@ebaysf.com" created="Fri, 27 Jan 2012 18:11:00 +0000"  >&lt;p&gt;Considering various failure cases, I think we need to store the state of region deletion progress in zookeeper (under /hbase/fast-delete, e.g.).&lt;br/&gt;
This is needed because we should be prepared that update of R1 in the above case may fail.&lt;br/&gt;
You can find an example in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4213&quot; title=&quot;Support for fault tolerant, instant schema updates with out master&amp;#39;s intervention (i.e with out enable/disable and bulk assign/unassign) through ZK.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4213&quot;&gt;&lt;del&gt;HBASE-4213&lt;/del&gt;&lt;/a&gt; where SchemaChangeTracker tracks the state transitions.&lt;/p&gt;</comment>
                            <comment id="13194988" author="zhihyu@ebaysf.com" created="Fri, 27 Jan 2012 18:32:48 +0000"  >&lt;p&gt;As what is done in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4213&quot; title=&quot;Support for fault tolerant, instant schema updates with out master&amp;#39;s intervention (i.e with out enable/disable and bulk assign/unassign) through ZK.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4213&quot;&gt;&lt;del&gt;HBASE-4213&lt;/del&gt;&lt;/a&gt;, we should also disable region splitting at the beginning of the operation and re-enable splitting at the end.&lt;/p&gt;</comment>
                            <comment id="13194994" author="ram_krish" created="Fri, 27 Jan 2012 18:34:54 +0000"  >&lt;p&gt;+1 on feature.  We need to take care of race conditions also, just in case if any.&lt;/p&gt;</comment>
                            <comment id="13195136" author="stack" created="Fri, 27 Jan 2012 22:04:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;For successive regions R1, R2 and R3, if we delete R2, we can change the end key of R1 to be the original end key of R2 and drop region R2 directly.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Changing the end key of R1 to be the end key of R2 will require creating a new region R1&apos;; we&apos;ll have to close R1 and R2 and delete both (after moving the R1 data to R1&apos;).&lt;/p&gt;</comment>
                            <comment id="13195145" author="zhihyu@ebaysf.com" created="Fri, 27 Jan 2012 22:13:13 +0000"  >&lt;p&gt;Forgot to mention in my comment @ 27/Jan/12 18:32:&lt;br/&gt;
Load balancing should be disabled at the beginning of operation and enabled at the end of operation.&lt;/p&gt;</comment>
                            <comment id="13195304" author="zhihyu@ebaysf.com" created="Sat, 28 Jan 2012 00:56:02 +0000"  >&lt;p&gt;I am thinking in the new API we&apos;ll be adding we should allow the specification of more than one region to be dropped. Presumably the regions should be adjacent.&lt;/p&gt;

&lt;p&gt;This would be useful when, say, the cron job that calls this new API to clean up obsolete data got interrupted (server down time, etc) and there is a need to catch up with data cleansing.&lt;/p&gt;</comment>
                            <comment id="13197647" author="mubarakseyed" created="Wed, 1 Feb 2012 07:43:44 +0000"  >

&lt;p&gt;1. HBaseAdmin needs to have deleteRegion(byte[] encodedRegionName), which invokes getMaster().deleteRegion(encodedRegionName)&lt;br/&gt;
   (HMasterInterface will have deleteRegion(byte[] encodedRegionName))&lt;/p&gt;

&lt;p&gt;2. HMaster needs to have deleteRegion(byte[] encodedRegionName).&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Do we need pre/post CP here?&lt;/li&gt;
	&lt;li&gt;Need DeleteRegionHandler, need to check whether specified region belongs to user regions (shouldn&apos;t be ROOT or META),   turn off load balancer.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;3. MasterDeleteRegionTracker (new class) will create deleteRegionNode (under &amp;lt;zookeeper.znode.parent&amp;gt;/delete-region) and processing steps are almost like MasterSchemaChangeTracker&lt;/p&gt;

&lt;p&gt;4. DeleteRegionTracker (new class in RS side) will process nodeChildrenChanged(), get the list of regions_to_be_deleted, check that those regions are being hosted by the RS, if yes then&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;doDeleteRegion
	&lt;ul&gt;
		&lt;li&gt;call deleteRegion() in HRegionServer
		&lt;ul&gt;
			&lt;li&gt;disable the region split&lt;/li&gt;
			&lt;li&gt;close the region&lt;/li&gt;
			&lt;li&gt;remove from META&lt;/li&gt;
			&lt;li&gt;bridge the whole in META (extending the span of before or after region)&lt;/li&gt;
			&lt;li&gt;remove region directory from HDFS&lt;/li&gt;
		&lt;/ul&gt;
		&lt;/li&gt;
		&lt;li&gt;update state in ZK (&amp;lt;zookeeper.znode.parent&amp;gt;/delete-region/&amp;lt;encoded-region-name&amp;gt;)&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;5. MasterDeleteRegionTracker gets nodeDataChanged() Zk event, process the new state and clean the znode (if region is deleted successfully) otherwise log the debug message&lt;/p&gt;

&lt;p&gt;I think i am missing some of the failure cases:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;update of before or after region&lt;/li&gt;
	&lt;li&gt;Master fail-over&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="13202736" author="mubarakseyed" created="Tue, 7 Feb 2012 20:23:43 +0000"  >&lt;p&gt;Waiting for corporate approval to contribute this patch. Thanks.&lt;/p&gt;</comment>
                            <comment id="13208695" author="jiraposter@reviews.apache.org" created="Wed, 15 Feb 2012 19:16:57 +0000"  >&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/3917/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3917/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2012-02-15 19:16:37.200644)&lt;/p&gt;


&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Removing &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4991&quot; title=&quot;Provide capability to delete named region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4991&quot;&gt;&lt;del&gt;HBASE-4991&lt;/del&gt;&lt;/a&gt; from bugs field. Thanks.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Code review request for &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4991&quot; title=&quot;Provide capability to delete named region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4991&quot;&gt;&lt;del&gt;HBASE-4991&lt;/del&gt;&lt;/a&gt; (Provide capability to delete named region).&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  /src/main/java/org/apache/hadoop/hbase/catalog/MetaEditor.java 1236386 &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/client/HBaseAdmin.java 1236386 &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/ipc/HMasterInterface.java 1236386 &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/ipc/HRegionInterface.java 1236386 &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/master/HMaster.java 1236386 &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/master/MasterServices.java 1236386 &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/master/handler/DeleteRegionHandler.java PRE-CREATION &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 1236386 &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java 1236386 &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/regionserver/OnlineRegions.java 1236386 &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/zookeeper/MasterDeleteRegionTracker.java PRE-CREATION &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/zookeeper/RegionServerDeleteRegionTracker.java PRE-CREATION &lt;br/&gt;
  /src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWatcher.java 1241350 &lt;br/&gt;
  /src/main/ruby/hbase/admin.rb 1236386 &lt;br/&gt;
  /src/main/ruby/shell.rb 1236386 &lt;br/&gt;
  /src/main/ruby/shell/commands/delete_region.rb PRE-CREATION &lt;br/&gt;
  /src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java 1236386 &lt;br/&gt;
  /src/test/java/org/apache/hadoop/hbase/client/TestDeleteRegion.java PRE-CREATION &lt;br/&gt;
  /src/test/java/org/apache/hadoop/hbase/master/TestCatalogJanitor.java 1236386 &lt;br/&gt;
  /src/test/java/org/apache/hadoop/hbase/util/MockRegionServerServices.java 1236386 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/3917/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3917/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Unit tests are passed. Tested in 5 node dev cluster. &lt;/p&gt;

&lt;p&gt;Test case: src/test/java/org/apache/hadoop/hbase/client/TestDeleteRegion.java&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Mubarak&lt;/p&gt;
</comment>
                            <comment id="13209463" author="hadoopqa" created="Thu, 16 Feb 2012 15:55:11 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12514800/HBASE-4991.trunk.v2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12514800/HBASE-4991.trunk.v2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 12 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 javadoc.  The javadoc tool appears to have generated -134 warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 171 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestShell&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestImportTsv&lt;br/&gt;
                  org.apache.hadoop.hbase.mapred.TestTableMapReduce&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestHFileOutputFormat&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/970//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/970//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/970//artifact/trunk/patchprocess/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/970//artifact/trunk/patchprocess/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/970//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/970//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13209661" author="tlipcon" created="Thu, 16 Feb 2012 19:46:13 +0000"  >&lt;p&gt;Maybe I&apos;m misunderstanding the use case, but I&apos;m slightly skeptical that there isn&apos;t a simpler way of solving the same thing.&lt;/p&gt;

&lt;p&gt;It seems like this conflates two operations: 1) delete a bunch of data within a range, and 2) merge a region back with its neighbors. #2 is a more general &quot;merge small regions&quot; operation, which I think should be attacked orthogonally to the issue of #1 (bulk range delete).&lt;br/&gt;
My other concern is that the API here exposes the concept of regions. A better API would be deleteRange(startKey, endKey). It might be implemented underneath by splitting the table such that startKey is the first key in some region, and endKey is the last key in another, and then deleting the underlying regions. See &lt;a href=&quot;http://incubator.apache.org/accumulo/user_manual_1.4-incubating/Table_Configuration.html#Delete_Range&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://incubator.apache.org/accumulo/user_manual_1.4-incubating/Table_Configuration.html#Delete_Range&lt;/a&gt; for example&lt;/p&gt;</comment>
                            <comment id="13209666" author="tlipcon" created="Thu, 16 Feb 2012 19:49:55 +0000"  >&lt;p&gt;Note also the comment in the Lily thread referenced:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;He he, cool. Unfortunately we will not be able to use a HBase feature where you can quickly delete named regions&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Maybe some others can explain their use cases here?&lt;/p&gt;</comment>
                            <comment id="13209897" author="zhihyu@ebaysf.com" created="Thu, 16 Feb 2012 23:53:03 +0000"  >&lt;p&gt;@Todd:&lt;br/&gt;
In HMasterInterface, there is already API exposing the concept of regions:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void move(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] encodedRegionName, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] destServerName)
  &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; UnknownRegionException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this regard, the new API doesn&apos;t expose newer concept:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void deleteRegion(List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[]&amp;gt; encodedRegionNameList)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above is, I think, equivalent to deleteRange() you proposed. Maybe the above is better in that we don&apos;t need to validate that startKey is the first key of some region, etc.&lt;br/&gt;
I think splitting the underlying region(s) of specified table in case startKey is not the first key is outside the scope of this JIRA.&lt;/p&gt;

&lt;p&gt;For use case, we have an internal team which requests this feature. They can manage to age the data in selected regions such that they can drop whole region(s) quickly.&lt;/p&gt;</comment>
                            <comment id="13209911" author="tlipcon" created="Fri, 17 Feb 2012 00:19:58 +0000"  >&lt;p&gt;The difference is that &lt;tt&gt;move&lt;/tt&gt; is an operational thing affecting load balancing. The data in the database stays the same. &lt;tt&gt;deleteRegion&lt;/tt&gt; leaks the concept of regions into the data model itself, since it affects what&apos;s stored.&lt;/p&gt;</comment>
                            <comment id="13209921" author="zhihyu@ebaysf.com" created="Fri, 17 Feb 2012 00:28:48 +0000"  >&lt;p&gt;Hmm, maybe I am a bit slow: in both cases the data of the named region wouldn&apos;t exist any more on the original region server.&lt;/p&gt;

&lt;p&gt;However, in order to move this feature forward, I am fine with changing the API to deleteRange(startKey, endKey).&lt;br/&gt;
In this JIRA, we can check that (startKey, endKey) actually form the boundary of an existing region. We can cover other scenarios in future JIRAs.&lt;/p&gt;</comment>
                            <comment id="13209924" author="tlipcon" created="Fri, 17 Feb 2012 00:32:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hmm, maybe I am a bit slow: in both cases the data of the named region wouldn&apos;t exist any more on the original region server.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;But region servers are also not part of the &lt;b&gt;data model&lt;/b&gt;.&lt;br/&gt;
There&apos;s the implementation (region servers, regions, etc) and the data model (rows, columns, etc). &lt;tt&gt;move&lt;/tt&gt; is an administrative/operational thing (like turning on/off load balancer or gathering metrics). {{delete...} is a data model thing (it affects what&apos;s stored). Having APIs that mix the two is messy.&lt;/p&gt;</comment>
                            <comment id="13209931" author="tlipcon" created="Fri, 17 Feb 2012 00:37:34 +0000"  >&lt;p&gt;(btw, I am OK with the API that takes a key range and requires that the key range map to a region initially).&lt;/p&gt;

&lt;p&gt;But the above comments about implementation stand - can this be done in such a way that it shares code with &quot;merge&quot;? i.e that it&apos;s a two step process: step 1 is to clear the memstore + delete hfiles in a region (so the region still exists and is empty), and step 2 being that we initiate a merge to kill the now-empty one? The first step would then be RS-local, which makes it simpler, and the second step would cover other use cases as well&lt;/p&gt;</comment>
                            <comment id="13209934" author="zhihyu@ebaysf.com" created="Fri, 17 Feb 2012 00:47:00 +0000"  >&lt;p&gt;Mubarak did borrow some code from merge()&lt;br/&gt;
We&apos;ll continually refactor the code in this patch to reduce overlap.&lt;/p&gt;

&lt;p&gt;If you look at the flow in current patch, there&apos;re multiple steps involved. We need to prepare for failure of every step.&lt;/p&gt;</comment>
                            <comment id="13210091" author="nspiegelberg" created="Fri, 17 Feb 2012 06:10:29 +0000"  >&lt;p&gt;I agree with Todd&apos;s comments.  This problem doesn&apos;t seem to be solved at the correct layer.  A more natural fit would be to add a range delete marker and optimize the scanner code on compaction.  Adding a range delete seems more natural than an explicit region delete &amp;amp; can be used at the client level.&lt;/p&gt;</comment>
                            <comment id="13210098" author="lhofhansl" created="Fri, 17 Feb 2012 06:29:17 +0000"  >&lt;p&gt;I had thought of something similar in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5268&quot; title=&quot;Add delete column prefix delete marker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5268&quot;&gt;&lt;del&gt;HBASE-5268&lt;/del&gt;&lt;/a&gt;, but it turns out that is not so simple. Maybe a range delete marker is easier to implement as the beginning is a known point; still how would a scan know what deleted markers would be in effect?&lt;br/&gt;
We&apos;d have to store all range delete markers at the beginning of the file, and then seek there on every scan. There&apos;s there question about when it is safe to collect the range marker, etc.&lt;/p&gt;

&lt;p&gt;I agree with Todd on the API as well. At the same time I agree with Ted &amp;amp; co. Being able to delete an entire region is powerful (especially with pluggable RegionSplitPolicies - &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5304&quot; title=&quot;Pluggable split key policy&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5304&quot;&gt;&lt;del&gt;HBASE-5304&lt;/del&gt;&lt;/a&gt;).&lt;br/&gt;
So generally I&apos;d prefer an implementation that either enforces start-range and end-range to coincide with the a region (although that is awkward), or have logic that splits the two adjacent regions and deletes the whole range by removing a range of regions (including the newly created partial regions).&lt;/p&gt;</comment>
                            <comment id="13210680" author="zhihyu@ebaysf.com" created="Sat, 18 Feb 2012 00:00:16 +0000"  >&lt;p&gt;The introduction of new (range) delete marker should be considered carefully, as Lars mentioned.&lt;br/&gt;
It has been 2 weeks since Mubarak outlined skeleton for current solution. It would be nice if questions about the approach were raised earlier.&lt;br/&gt;
So far, feedback from Stack, Todd and Lars seem to align with the current solution, with changes to the specification of start and end keys.&lt;/p&gt;

&lt;p&gt;I think Mubarak can go ahead and make corresponding changes.&lt;/p&gt;</comment>
                            <comment id="13211169" author="mubarakseyed" created="Sun, 19 Feb 2012 00:49:26 +0000"  >&lt;p&gt;@Todd, @Nicolas&lt;br/&gt;
Can i go ahead with changes or we need more time for brainstorming? Thanks.&lt;/p&gt;
</comment>
                            <comment id="13212228" author="tlipcon" created="Mon, 20 Feb 2012 23:57:05 +0000"  >&lt;p&gt;I&apos;m cool with the API now. I&apos;m a bit nervous about the complexity of the implementation - the fact that this (and the online schema change) have to do things like disable splits and disable balancing is a little &quot;smelly&quot; to me. But, I don&apos;t necessarily have a better idea.&lt;/p&gt;

&lt;p&gt;In terms of testing before commit, I&apos;d like to see a kind of stress test which can be run continuously that does something like the following in a loop:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;create a table with 10 regions&lt;/li&gt;
	&lt;li&gt;insert 10 rows into each region&lt;/li&gt;
	&lt;li&gt;pick a random order to delete the regions&lt;/li&gt;
	&lt;li&gt;start some threads which perform full table scans to count rows. concurrently, delete each of the regions in the above random order&lt;/li&gt;
	&lt;li&gt;number of rows should drop 100-&amp;gt;90-&amp;gt;80, etc.&lt;/li&gt;
	&lt;li&gt;drop table&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If we can run this test continuously, and the test can still succeed even if we periodically kill the master or one of the RSes, it seems sufficient.&lt;/p&gt;</comment>
                            <comment id="13212231" author="mubarakseyed" created="Tue, 21 Feb 2012 00:00:49 +0000"  >&lt;p&gt;Thanks Todd. Will come up with testcases and run the stress test. Thanks.&lt;/p&gt;</comment>
                            <comment id="13213399" author="stack" created="Wed, 22 Feb 2012 06:43:11 +0000"  >&lt;p&gt;@Mubarak&lt;/p&gt;

&lt;p&gt;Do we need to add this method to the region server interface?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getRegionsCount(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] regionName) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can we not just count what comes back from the get on online regions?&lt;/p&gt;

&lt;p&gt;Do we have to run the region delete in the Master process?  Can the client not do it?&lt;/p&gt;

&lt;p&gt;Is it really necessary adding +  public MasterDeleteRegionTracker getDeleteRegionTracker(); to the MasterServices?  This will have a ripple effect through Tests and it seems like a bit of an exotic API to have in this basic Interface.&lt;/p&gt;

&lt;p&gt;I like the refactor in HRegion.&lt;/p&gt;

&lt;p&gt;Does all of this new code need to be in HRegionServer?  Can it live in a class of its own?&lt;/p&gt;

&lt;p&gt;There must be a million holes here (HRS crashes in middle of file moving or creation of the merged region, files partially moved or deleted....).&lt;/p&gt;

&lt;p&gt;Does this code all need to be in core?  Can we not make a few primitives and then run it all from outside in a tool or script w/ state recorded as we go so can resume if fail mid-way?  There are a bunch of moving pieces here.  Its all bundled up in core code so its going to be tough to test.&lt;/p&gt;

&lt;p&gt;Adding this to onlineregions, +  public void deleteRegion(String regionName) throws IOException, KeeperException;, do all removals from online regions now use this new API (Its probably good having it here... but just wondering about the places where regions currently get removed from online map, do they go a different route than this new one?)&lt;/p&gt;

&lt;p&gt;Hmmmm... looks like a bunch of state is being tracked in zk.  Thats good.  Its all custom to this feature.  How hard will it be to reuse parts to do say an online merge of a bunch of adjacent regions?&lt;/p&gt;

&lt;p&gt;Yeah, there is a lot of moving parts... a master delete tracker and a regionserver delete tracker...  I&apos;ve not done an extensive review of design but that seems pretty heavy going.&lt;/p&gt;

&lt;p&gt;Are the enums duplicated?&lt;/p&gt;

&lt;p&gt;Why does zookeeper package have classes particular to master and regionserver?&lt;/p&gt;
</comment>
                            <comment id="13214071" author="mubarakseyed" created="Wed, 22 Feb 2012 22:40:19 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
Thanks for the review&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Do we need to add this method to the region server interface?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getRegionsCount(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] regionName) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Can we not just count what comes back from the get on online regions?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We need to get the counts per table, &lt;em&gt;getOnlineRegions&lt;/em&gt; returns &lt;em&gt;List&amp;lt;HRegion&amp;gt;&lt;/em&gt; for a table but client does not know the &lt;em&gt;tableName&lt;/em&gt; for a &lt;em&gt;regionName&lt;/em&gt; in our case, either we can do two calls (one for getting &lt;em&gt;HRegionInfo&lt;/em&gt; and get &lt;em&gt;tableName&lt;/em&gt; from there and next one for getting &lt;em&gt;List&amp;lt;HRegion&amp;gt;&lt;/em&gt;). I thought we can simplify by adding a new interface.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getRegionsCount(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] regionName) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; getOnlineRegions(getRegionInfo(regionName).getTableName())
        .size();
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;&lt;p&gt;Do we have to run the region delete in the Master process? Can the client not do it?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Design choice is like &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4213&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HBASE-4213&lt;/a&gt;, meaning master create a znode under &lt;em&gt;&amp;lt;zookeeper.znode.parent&amp;gt;/delete-region&lt;/em&gt; then RS trackers are getting notified of children changed, then a RS which hosts the region to-be-deleted will process the delete-region request and update the state in&lt;br/&gt;
&lt;em&gt;&amp;lt;zookeeper.znode.parent&amp;gt;/delete-region/&amp;lt;encoded-region-name-to-be-deleted&amp;gt;&lt;/em&gt; znode.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is it really necessary adding + public MasterDeleteRegionTracker getDeleteRegionTracker(); to the MasterServices? This will have a ripple effect through Tests and it seems like a bit of an exotic API to have in this basic Interface.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Will think a bit more and update you&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Does all of this new code need to be in HRegionServer? Can it live in a class of its own?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Like to hear the comments from code review, we can refactor to helper class.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There must be a million holes here (HRS crashes in middle of file moving or creation of the merged region, files partially moved or deleted....).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I believe &lt;em&gt;delete-region&lt;/em&gt; state in ZK will help to recover from failures, need more testcases with individual failure scenarios such as HRS crash, failure of merged region, failure of file remove in HDFS, failure of new region directory creation in HDFS, partial files, etc, will add them when i do stress test for Todd&apos;s suggestion&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Does this code all need to be in core? Can we not make a few primitives and then run it all from outside in a tool or script w/ state recorded as we go so can resume if fail mid-way? There are a bunch of moving pieces here. Its all bundled up in core code so its going to be tough to test.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If we are considering &lt;em&gt;delete_region&lt;/em&gt; as a tool/util then we can refactor as a tool/util as like Online/Offline merge code.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Adding this to onlineregions, + public void deleteRegion(String regionName) throws IOException, KeeperException;, do all removals from online regions now use this new API (Its probably good having it here... but just wondering about the places where regions currently get removed from online map, do they go a different route than this new one?)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;New API &lt;em&gt;deleteRegion()&lt;/em&gt; does more than just removing from online region(s) map but other places we use &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; removeFromOnlineRegions(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; encodedName)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Its being called from &lt;em&gt;openRegion()&lt;/em&gt;, &lt;em&gt;refreshRegion()&lt;/em&gt;, &lt;em&gt;createDaughters()&lt;/em&gt; in &lt;em&gt;SplitTransaction&lt;/em&gt; and &lt;em&gt;CloseRegionHandler&lt;/em&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How hard will it be to reuse parts to do say an online merge of a bunch of adjacent regions?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Once Todd&apos;s proposal is implemented, will find out a way to do more refactoring (to cut down repeated code)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Are the enums duplicated?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, will take care of it in refactoring.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why does zookeeper package have classes particular to master and regionserver?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We do put all our ZK trackers in zookeeper package and this is how online schema change &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4213&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HBASE-4213&lt;/a&gt; was implemented.&lt;/p&gt;</comment>
                            <comment id="13214223" author="mubarakseyed" created="Thu, 23 Feb 2012 02:31:56 +0000"  >&lt;p&gt;If we specify only start and end key, what happens if multiple regions (belongs to mutiple tables) holds the same start/end key?&lt;/p&gt;

&lt;p&gt;For example: I have 3 tables =&amp;gt; table1, table2, table3&lt;br/&gt;
If i pre-split them using first two characters like &lt;span class=&quot;error&quot;&gt;&amp;#91;0-9&amp;#93;&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;a-z&amp;#93;&lt;/span&gt;=&amp;gt; we get 36 x 36 = 1296 regions =&amp;gt; 1296 x 3 = 3888 total regions (across all RSs), so key would look like&lt;/p&gt;

&lt;p&gt;a0.... to az.....&lt;br/&gt;
..&lt;br/&gt;
z0... to zz...&lt;br/&gt;
..&lt;br/&gt;
01... to 0z...&lt;/p&gt;

&lt;p&gt;so we end up&lt;/p&gt;

&lt;p&gt;table1,region1,start_key1,end_key1&lt;br/&gt;
table2,region1,start_key1,end_key1&lt;br/&gt;
table3,region1,start_key1,end_key1&lt;/p&gt;

&lt;p&gt;start_key1 and end_key1 needs to be resolved at input level unless fully qualified path of &lt;em&gt;table1,region1,start_key1&lt;/em&gt; and &lt;em&gt;table1,region1,end_key1&lt;/em&gt; is specified.&lt;/p&gt;</comment>
                            <comment id="13214224" author="mubarakseyed" created="Thu, 23 Feb 2012 02:33:39 +0000"  >&lt;p&gt;How about &lt;em&gt;deleteRegion(tableName, startKey, endKey)&lt;/em&gt;?&lt;/p&gt;</comment>
                            <comment id="13214239" author="mubarakseyed" created="Thu, 23 Feb 2012 02:43:29 +0000"  >&lt;p&gt;From the above discussions, this is what i am thinking to implement&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Shell command needs to be changed as &lt;em&gt;delete_region &amp;lt;table_name&amp;gt; &amp;lt;start_key&amp;gt; &amp;lt;end_key&amp;gt;&lt;/em&gt;&lt;/li&gt;
	&lt;li&gt;API will be changed to &lt;em&gt;deleteRegion(tableName, startKey, endKey)&lt;/em&gt; in HBaseAdmin&lt;/li&gt;
	&lt;li&gt;If there is no match for start/end key for the specified table then just error out&lt;/li&gt;
	&lt;li&gt;If start/end key for the specified table is spanned across multiple regions then it is out of scope of this JIRA (throw error).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13214325" author="stack" created="Thu, 23 Feb 2012 05:24:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;Shell command needs to be changed as delete_region &amp;lt;table_name&amp;gt; &amp;lt;start_key&amp;gt; &amp;lt;end_key&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;delete_region would go well w/ our current close_region.  Do you need tablename, startkey, endkey?  Can&apos;t you just pass region name?&lt;/p&gt;

&lt;p&gt;ditto for the deleteRegion call (though maybe I&apos;m missing the fact that you are trying to respect Todd&apos;s comments above that we not have region come up out of the API &amp;#8211; ignore this remark if so).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If start/end key for the specified table is spanned across multiple regions then it is out of scope of this JIRA (throw error).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, you can only do one region at a time?  Why would it be hard doing multiple given you are tracking?  Or is it that it makes the tracking yet more complicated?&lt;/p&gt;</comment>
                            <comment id="13214332" author="stack" created="Thu, 23 Feb 2012 05:39:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do you need tablename, startkey, endkey? Can&apos;t you just pass region name?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Again, you may be trying to not reveal region type in API but then delete_region would be different to close_region which takes a regionname IIRC?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;..but client does not know the tableName for a regionName in our case...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It does not know?  I may be missing context.  If I am, ignore this comment.  If it did know, could use:  &apos;List&amp;lt;HRegionInfo&amp;gt;	getOnlineRegions() &apos;  HRIs have tablename.  Could figure it client-side.  You can&apos;t use the List&amp;lt;HRegion&amp;gt; because we can&apos;t serialize HRegion to pass over connection... that call is if you are running in same context in JSP or in a unit test or something.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Design choice is like &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4213&quot; title=&quot;Support for fault tolerant, instant schema updates with out master&amp;#39;s intervention (i.e with out enable/disable and bulk assign/unassign) through ZK.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4213&quot;&gt;&lt;del&gt;HBASE-4213&lt;/del&gt;&lt;/a&gt;, meaning master create a znode under &amp;lt;zookeeper.znode.parent&amp;gt;/delete-region....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Fair enough.  Will we have a new dir in zk per cluster region operation we want to do?  Can we not exploit primitives added by hbase-4213?  Or do we need to refactor hbase-4213 to get you primitives you need to do this facility?  Or is there nothing in common w/ what hbase-4213 does (there is at least the closing of a region?)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...If we are considering delete_region as a tool/util then we can refactor as a tool/util as like Online/Offline merge code....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;online merge should have a bunch of overlap w/ this feature?  Would be great if they could share a bunch of code/primitives.  As has been suggested, rather than a /delete-region, instead we&apos;d have a log of intent+log of actions thing up in zk I suppose.  The log of intent would list the steps to be done and then the log of actions thingy would log how far the operation had gone (I should read up on the cited accumulo doo-hickey).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We do put all our ZK trackers in zookeeper package and this is how online schema change &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4213&quot; title=&quot;Support for fault tolerant, instant schema updates with out master&amp;#39;s intervention (i.e with out enable/disable and bulk assign/unassign) through ZK.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4213&quot;&gt;&lt;del&gt;HBASE-4213&lt;/del&gt;&lt;/a&gt; was implemented.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thats a bit broken in my opinion.  Its wonky having zk have reference out to other main packages.  Not your fault.  Should have caught that in review of hbase-4213.&lt;/p&gt;

&lt;p&gt;Good on you Mubarak.&lt;/p&gt;</comment>
                            <comment id="13214337" author="mubarakseyed" created="Thu, 23 Feb 2012 05:43:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;So, you can only do one region at a time? Why would it be hard doing multiple given you are tracking? Or is it that it makes the tracking yet more complicated?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As long as start/end keys are in region(s) boundary, we can do multiple regions, each region&apos;s encoded name will be added under &lt;em&gt;&amp;lt;zookeeper.znode.parent&amp;gt;/delete-region&lt;/em&gt; as one znode. &lt;/p&gt;

&lt;p&gt;For example, we have regions R1, R2, R3 and R4, what i meant was if startKey is startKey of R1, spans across R2, R3 and endKey is some value other than endKey of R4 then we will error out an entire task. I believe 4th point in my previous comment at 23/Feb/12 02:43 needs to be removed as 3rd point covers well. Sorry for the confusion.&lt;/p&gt;</comment>
                            <comment id="13215199" author="zhihyu@ebaysf.com" created="Thu, 23 Feb 2012 23:30:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;The log of intent would list the steps to be done&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This would introduce some kind of interpreter.&lt;br/&gt;
Is it Okay to do the above in another JIRA ?&lt;/p&gt;</comment>
                            <comment id="13215239" author="stack" created="Fri, 24 Feb 2012 00:09:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is it Okay to do the above in another JIRA ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As a prereq for this issue?  Yes.&lt;/p&gt;</comment>
                            <comment id="13215243" author="mubarakseyed" created="Fri, 24 Feb 2012 00:16:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;could use: &apos;List&amp;lt;HRegionInfo&amp;gt;	getOnlineRegions() &apos; HRIs have tablename. Could figure it client-side&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Make sense, will do it in client-side, i have tried with getting a List&amp;lt;HRegion&amp;gt;, got into serialization issue&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Will we have a new dir in zk per cluster region operation we want to do? Can we not exploit primitives added by hbase-4213? Or do we need to refactor hbase-4213 to get you primitives you need to do this facility? Or is there nothing in common w/ what hbase-4213 does (there is at least the closing of a region?)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We can certainly refactor &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4213&quot; title=&quot;Support for fault tolerant, instant schema updates with out master&amp;#39;s intervention (i.e with out enable/disable and bulk assign/unassign) through ZK.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4213&quot;&gt;&lt;del&gt;HBASE-4213&lt;/del&gt;&lt;/a&gt; MasterSchemaChangeTracker and SchemaChangeTracker, we can club them as single tracker on each side (Master and RS), will dig more.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;online merge should have a bunch of overlap w/ this feature? Would be great if they could share a bunch of code/primitives.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sure, more refactoring&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;As has been suggested, rather than a /delete-region, instead we&apos;d have a log of intent+log of actions thing up in zk I suppose. The log of intent would list the steps to be done and then the log of actions thingy would log how far the operation had gone&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We are using znode just to start the task and update the state only. If we keep track of intent vs action in same znode, considering the size of data in znode, we should not exceed&amp;gt; 1 MB as ZK admin guide says&lt;/p&gt;

&lt;div class=&quot;panel&quot; style=&quot;background-color: #FFFFCE;border-color: #ccc;border-style: dashed;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelHeader&quot; style=&quot;border-bottom-width: 1px;border-bottom-style: dashed;border-bottom-color: #ccc;background-color: #F7D6C1;&quot;&gt;&lt;b&gt;jute.maxbuffer&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;panelContent&quot; style=&quot;background-color: #FFFFCE;&quot;&gt;
&lt;p&gt;(Java system property: jute.maxbuffer)&lt;br/&gt;
This option can only be set as a Java system property. There is no zookeeper prefix on it. It specifies the maximum size of the data that can be stored in a znode. The default is 0xfffff, or just under 1M. If this option is changed, the system property must be set on all servers and clients otherwise problems will arise. This is really a sanity check. ZooKeeper is designed to store data on the order of kilobytes in size.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can we address it in another JIRA as we need to persist znode with Map&amp;lt;Intent, Action&amp;gt;? &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Thats a bit broken in my opinion. Its wonky having zk have reference out to other main packages. Not your fault. Should have caught that in review of hbase-4213.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Well, we can still refactor (club schema change trackers and delete-region trackers into one) and place them into appropriate package?&lt;/p&gt;</comment>
                            <comment id="13215258" author="stack" created="Fri, 24 Feb 2012 00:26:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;i have tried with getting a List&amp;lt;HRegion&amp;gt;, got into serialization issue&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah.  HRegion is not a Writable&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We are using znode just to start the task and update the state only. If we keep track of intent vs action in same znode, considering the size of data in znode, we should not exceed&amp;gt; 1 MB as ZK admin guide says&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oh, you are talking of writing actual data into zk?  I was just talking of intent, a bare mini language that outlines steps to complete an operation... something like your enums.  I&apos;d think this would be well under 1MB.&lt;/p&gt;

&lt;p&gt;Good stuff.  Might make sense to work on a bit of a design doc first?&lt;/p&gt;</comment>
                            <comment id="13215288" author="mubarakseyed" created="Fri, 24 Feb 2012 01:04:48 +0000"  >&lt;p&gt;@Stack,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The log of intent would list the steps to be done&lt;br/&gt;
Is it Okay to do the above in another JIRA ?&lt;br/&gt;
As a prereq for this issue? Yes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Please correct me if i am wrong, if we introduce prereq then we need to design (as you asked) the intent part (a bare mini language..) and actual delete_region implementation needs to interpret (as Ted mentioned) the steps from intent (from ZK). Do we need to design the intent part (and steps of an operation) as a generic framework for all the master-coordinated tasks?&lt;/p&gt;

&lt;p&gt;I thought we are only changing the API (with multiple region support) and focussing more on refactoring with good test/stress-test in this JIRA.&lt;/p&gt;

&lt;p&gt;Can we address intent/actions part out of scope of this JIRA?&lt;/p&gt;

&lt;p&gt;Thoughts?&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13215431" author="stack" created="Fri, 24 Feb 2012 06:36:00 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do we need to design the intent part (and steps of an operation) as a generic framework for all the master-coordinated tasks?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d think you could make it work for you but make it so it could be others.  How does Accumulo do it do you know?  You might get some ideas over there.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I thought we are only changing the API (with multiple region support) and focussing more on refactoring with good test/stress-test in this JIRA.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You mean to get this facility into core?&lt;/p&gt;

&lt;p&gt;My sense is that you could get this specialized lump into hbase to do this one facility if lots of tests but my fear is that if it does go in, it&apos;ll live forever as an awkward appendage.  Seems like we have an opportunity to add some base primitives that we can then build this feature on as well as others.  Pity to waste it (understood if you don&apos;t want to do the generalized system).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can we address intent/actions part out of scope of this JIRA?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m reluctant to because of the above &amp;#8211; we&apos;ll get a specialized lump of code that will live forever and we&apos;ll all be afraid to touch.&lt;/p&gt;

&lt;p&gt;Maybe others think different.&lt;/p&gt;</comment>
                            <comment id="13215482" author="mubarakseyed" created="Fri, 24 Feb 2012 08:12:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;How does Accumulo do it do you know? You might get some ideas over there.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Will take a look. Todd&apos;s preso highlights comparison of HBase vs Accumulo - &lt;a href=&quot;http://www.slideshare.net/cloudera/h-base-and-accumulo-todd-lipcom-jan-25-2012&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.slideshare.net/cloudera/h-base-and-accumulo-todd-lipcom-jan-25-2012&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Source:&lt;br/&gt;
&lt;a href=&quot;https://svn.apache.org/repos/asf/incubator/accumulo/branches/1.4/src/server/src/main/java/org/apache/accumulo/server/fate/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/incubator/accumulo/branches/1.4/src/server/src/main/java/org/apache/accumulo/server/fate/&lt;/a&gt;&lt;br/&gt;
(Master-coordinated tasks uses Fate, refer TStore.java) &lt;br/&gt;
&lt;a href=&quot;https://svn.apache.org/repos/asf/incubator/accumulo/branches/1.4/src/server/src/main/java/org/apache/accumulo/server/master/Master.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/incubator/accumulo/branches/1.4/src/server/src/main/java/org/apache/accumulo/server/master/Master.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notes from TStore.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/**
 * Transaction Store: a place to save transactions
 * 
 * A transaction consists of a number of operations. To use, first create a transaction id, and then seed the
 * transaction with an initial operation. An executor service can then execute the transaction&apos;s operation,
 * possibly pushing more operations onto the transaction as each step successfully completes.
 * If a step fails, the stack can be unwound, undoing each operation.
 */
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For example, delete-range operation in master uses fate to seed transaction with an DELETE_RANGE table operation, submit a task, executor service can then execute the op.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void executeTableOperation(TInfo tinfo, AuthInfo c, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; opid, org.apache.accumulo.core.master.thrift.TableOperation op, List&amp;lt;ByteBuffer&amp;gt; arguments, Map&amp;lt;&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;,&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;&amp;gt; options, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; autoCleanup){

&lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; DELETE_RANGE: {
          &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; tableName = ByteBufferUtil.toString(arguments.get(0));
          Text startRow = ByteBufferUtil.toText(arguments.get(1));
          Text endRow = ByteBufferUtil.toText(arguments.get(2));
          
          &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; tableId = checkTableId(tableName, TableOperation.DELETE_RANGE);
          checkNotMetadataTable(tableName, TableOperation.DELETE_RANGE);
          verify(c, tableId, TableOperation.DELETE_RANGE, check(c, SystemPermission.SYSTEM) || check(c, tableId, TablePermission.WRITE));
          
          fate.seedTransaction(opid, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TraceRepo&amp;lt;Master&amp;gt;(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; TableRangeOp(MergeInfo.Operation.DELETE, tableId, startRow, endRow)), autoCleanup);
          &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
        }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13215483" author="zhihyu@ebaysf.com" created="Fri, 24 Feb 2012 08:14:23 +0000"  >&lt;p&gt;I feel some of the recent proposals / requirements are far more complex than the one @ 09/Dec/11 16:48&lt;br/&gt;
There wasn&apos;t such requirement when Mubarak outlined his plan @ 01/Feb/12 07:43, either.&lt;/p&gt;

&lt;p&gt;Of course, having generic framework for all the master-coordinated tasks allows future additions to be concise. But I think that should have been outlined clearly in the early stage of development of a feature.&lt;/p&gt;

&lt;p&gt;Consider, that few of us know how Accumulo does similar tasks, we should plan / brainstorm / design carefully so that the generic framework comes up to our expectations. This would take a month, at least.&lt;br/&gt;
e.g. once an action fails, we need to decide whether we should retry or rollback. For retry, we need a method to specify timeout or the number of retries. For rollback, another action needs to be associated with the original action.&lt;/p&gt;

&lt;p&gt;Consider, that the refactoring Mubarak has agreed to do is on the common path of applying the generic framework. I think there is value following the plan specified @ 01/Feb/12 07:43&lt;/p&gt;

&lt;p&gt;Once the generic framework is developed, we can revisit this feature (and instant schema change). I would anticipate some refinement of the framework in the process of integration.&lt;/p&gt;

&lt;p&gt;@Stack, @Todd: what do you think ?&lt;/p&gt;</comment>
                            <comment id="13216019" author="stack" created="Fri, 24 Feb 2012 22:38:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;I feel some of the recent proposals / requirements are far more complex than the one&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah.  It seemed basic back in December.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There wasn&apos;t such requirement when Mubarak outlined his plan&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Pardon me.  I should have noticed the plan but did not.  Other priorities.  If I&apos;d seen the plan I&apos;d have blanched I think.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Of course, having generic framework for all the master-coordinated tasks allows future additions to be concise.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yep.  We&apos;d have tested, proven primitives to build stuff on rather than have to do it per feature&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But I think that should have been outlined clearly in the early stage of development of a feature.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;See above.  Pardon me for missing how involved this addition became.&lt;/p&gt;

&lt;p&gt;I don&apos;t see how plan of &apos; 01/Feb/12 07:43&apos; lays foundation for a generic framework.   Am I missing something?  It seems like its code for this feature only?&lt;/p&gt;

</comment>
                            <comment id="13216089" author="lhofhansl" created="Fri, 24 Feb 2012 23:20:45 +0000"  >&lt;p&gt;Maybe we should separate this feature from a generic framework?&lt;/p&gt;

&lt;p&gt;For this issue we could just have one API: deleteRange(table, startKey, endKey). Initially it could validate that the start and endKey coincide with exactly one region, that way we can extend this later, without having regions exposed in the API.&lt;br/&gt;
(still need to avoid races with splitting and balancing of course - makes it almost nicer to go back to the original approach of passing a region name).&lt;/p&gt;

&lt;p&gt;Just my $0.02.&lt;/p&gt;</comment>
                            <comment id="13216122" author="mubarakseyed" created="Fri, 24 Feb 2012 23:45:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t see how plan of &apos; 01/Feb/12 07:43&apos; lays foundation for a generic framework. Am I missing something? It seems like its code for this feature only?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;My initial skeleton was only limited to 4991 implementation, framework idea was not part of intent of 4991. Todd&apos;s comment in code review @ &apos;16/Feb/2012 7:42&apos; (&lt;a href=&quot;https://reviews.apache.org/r/3917/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/3917/&lt;/a&gt;) brought the idea of Accumulo&apos;s FATE and it turns out as generic framework.&lt;/p&gt;</comment>
                            <comment id="13216138" author="tlipcon" created="Fri, 24 Feb 2012 23:58:58 +0000"  >&lt;p&gt;Hey folks, sorry for being remiss in following this closely. Been a busy week! My thinking is that, while a FATE-like general framework would be nice, it&apos;s not a prerequisite for this feature.&lt;/p&gt;

&lt;p&gt;However, having this feature properly handle failure cases &lt;em&gt;is&lt;/em&gt; a prerequisite. I was thinking that, rather than handling it one-off for this feature, it might only be incrementally more work to do something like FATE and validate the new framework by developing this feature on top of it. It&apos;s a longer path to the end goal, but will result in something much more reusable for other similar features in the future (as well as some previous stuff being simplified).&lt;/p&gt;</comment>
                            <comment id="13216139" author="tlipcon" created="Fri, 24 Feb 2012 23:59:45 +0000"  >&lt;p&gt;BTW, I&apos;m also OK with the idea that the API be &quot;deleteRange()&quot; and the initial implementation be limited to only deleting an exact region, with the extension to automatically split and handle multiple regions becoming a followup.&lt;/p&gt;</comment>
                            <comment id="13217654" author="mubarakseyed" created="Mon, 27 Feb 2012 22:44:31 +0000"  >&lt;p&gt;@Stack,&lt;br/&gt;
Is there any update on this issue? Do i need to halt the progress of this issue until design is ironed out? Please let me know. Thanks.&lt;/p&gt;</comment>
                            <comment id="13219355" author="stack" created="Wed, 29 Feb 2012 17:43:32 +0000"  >&lt;p&gt;@Mubarak After looking at FATE and whats involved, I think it a bit much to expect that we build that as a prereq. for this facility.  At the same time, lets minimize custom code &amp;#8211; code that is particular to the addition of this feature only.  Let me do another review of your last patch w/ that in mind.&lt;/p&gt;</comment>
                            <comment id="13219375" author="zhihyu@ebaysf.com" created="Wed, 29 Feb 2012 18:11:08 +0000"  >&lt;p&gt;@Todd:&lt;br/&gt;
Do you agree with what Stack said above ?&lt;br/&gt;
If so, I can start reviewing latest patch as well.&lt;/p&gt;</comment>
                            <comment id="13219380" author="stack" created="Wed, 29 Feb 2012 18:20:27 +0000"  >&lt;p&gt;Reviewing this patch again, could we not obtain this patches&apos;s objective with merge?  Merge could take a flag which said &quot;True/false copy the data from old regions into the new merge region&quot;&lt;/p&gt;


</comment>
                            <comment id="13219395" author="zhihyu@ebaysf.com" created="Wed, 29 Feb 2012 18:39:17 +0000"  >&lt;p&gt;Are we going to enhance Merge by allowing to discard data belonging to one of the regions ?&lt;br/&gt;
How should we deal with various failure scenarios in the process of merging ?&lt;/p&gt;</comment>
                            <comment id="13219412" author="stack" created="Wed, 29 Feb 2012 18:59:43 +0000"  >&lt;p&gt;After looking again too at the patch, it has too much custom code that is all about region delete.&lt;/p&gt;

&lt;p&gt;It should take a range as Todd suggests earlier rather than list of regions.  This means you can not pass a list of discontinuous regions but thats ok I think; just do multiple invocations.&lt;/p&gt;

&lt;p&gt;This seems to have wrong param name and javadoc:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  /**
+   * Gets the count of online regions of the table in a region server.
+   * This method looks at the in-memory onlineRegions.
+   * @param regionName
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; regions count
+   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getRegionsCount(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] regionName) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When I see MasterDeleteRegionTracker, and the equivalent for regionservers, it makes me yearn for a generic framework that these things could run on; it strikes me as too much custom code and custom handlers.  This we should fix.  We should come up w/ generics that can be customized to do feature specifics.&lt;/p&gt;

&lt;p&gt;Why are we using a janitor to do the delete of regions rather than an executor?&lt;/p&gt;

&lt;p&gt;Why we have this getDeleteRegionTracker ?&lt;/p&gt;

&lt;p&gt;The generic soln Interface would have a method the balancer would check...&lt;/p&gt;

&lt;p&gt;+      if (deleteRegionTracker.isDeleteRegionInProgress()) {&lt;/p&gt;

&lt;p&gt;Rather than do the above for every feature we add.&lt;/p&gt;

&lt;p&gt;Should this getDeleteRegionStatusFromDeleteRegionTracker be in the DeleteRegionTracker?  And should it be something that is apart from the Master rather than in the master?&lt;/p&gt;

&lt;p&gt;This seems wrong: getDeleteRegionTracker in the MasterServices Interface.&lt;/p&gt;

&lt;p&gt;Why we add it there?  Why can&apos;t it be independent of Master?  Having to have a Master makes it harder to test I&apos;m sure.&lt;/p&gt;

&lt;p&gt;DeleteRegionHandler should not be dealing w/ balancer.  That seems dirty.&lt;/p&gt;

&lt;p&gt;This seems racy: waitForInflightSplit&lt;/p&gt;

&lt;p&gt;Do we do this every time?  +    moveStoreFilesToNewRegionDir(byFamily, fs, tableDir, newRegionInfo);&lt;/p&gt;

&lt;p&gt;If so, is this actually a merge and not a delete?&lt;/p&gt;

&lt;p&gt;Do these methods need to be in HREgionInfo?&lt;/p&gt;

&lt;p&gt;moveDataFromAdjacentRegionToNewRegion&lt;br/&gt;
createNewRegionFromAdjacentRegion&lt;/p&gt;

&lt;p&gt;Could be in HRegion or in a RegionUtil class?  RS is already bloated.&lt;/p&gt;

&lt;p&gt;A bunch of these other methods ... adding new region and deleting old region ... would seem to have overlap with existing code where we add regions to meta after open and also w/ merge code?&lt;/p&gt;

&lt;p&gt;We can&apos;t have master package refernced in zookeeper package; i.e. see MasterDeleteRegionTracker.&lt;/p&gt;

&lt;p&gt;I&apos;ve already commented on other stuff in this patch.&lt;/p&gt;

&lt;p&gt;In general the patch is well done.  It just adds a bunch of custom facility w/o genericizing at least some aspects so could be used by other features yet to come.  In particular, this looks to be a specialization on merge.  If so, lets go for merge altogether.&lt;/p&gt;


</comment>
                            <comment id="13219421" author="stack" created="Wed, 29 Feb 2012 19:11:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;Are we going to enhance Merge by allowing to discard data belonging to one of the regions ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This feature looks to be adding online merge to me.  I need clarification from Mubarak that that is indeed the case.  If so, this issue is mislabeled and the patch needs redoing.&lt;/p&gt;

&lt;p&gt;I was just suggesting that if you want to actually drop a regions data, you could pass a flag to merge and it would not bother copying over the files from old regions.  That would be an option.  This patch as is does not do that.  It seems to copy old region data into new regions.  Was just a suggestion.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How should we deal with various failure scenarios in the process of merging ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Eh... in a manner which is resilient against failures, TBD.  I don&apos;t get your question Ted.  Are you asking me or the Author of this patch?&lt;/p&gt;</comment>
                            <comment id="13219423" author="mubarakseyed" created="Wed, 29 Feb 2012 19:14:27 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
Thanks for the review&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It just adds a bunch of custom facility w/o genericizing at least some aspects so could be used by other features yet to come.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;True, i never put much thought into generalization as i had focused only for delete-region. When we talk about other features yet to come, can&apos;t we leverage new generic framework (yet to come) and revisit this feature?&lt;/p&gt;</comment>
                            <comment id="13219431" author="zhihyu@ebaysf.com" created="Wed, 29 Feb 2012 19:20:55 +0000"  >&lt;p&gt;For:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getRegionsCount(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] regionName) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;regionName is used to extract table name. We should rename the method to, e.g. getRegionsCountForTable().&lt;/p&gt;

&lt;p&gt;w.r.t. utilizing code from Merge, I looked at Merge.mergeTwoRegions() and saw no fault handling code.&lt;br/&gt;
I think if we add fault-tolerant code to Merge, it might look similar to what Mubarak has now.&lt;/p&gt;</comment>
                            <comment id="13219436" author="mubarakseyed" created="Wed, 29 Feb 2012 19:28:02 +0000"  >&lt;p&gt;We are going to remove&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; getRegionsCount(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] regionName) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;as we will use getOnlineRegions() and process them in client-side, please refer my comment @ 24/Feb/12 00:16&lt;/p&gt;

&lt;p&gt;Will read the onlineMerge code.&lt;/p&gt;</comment>
                            <comment id="13219477" author="mubarakseyed" created="Wed, 29 Feb 2012 20:04:52 +0000"  >&lt;p&gt;@Stack&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;This feature looks to be adding online merge to me. I need clarification from Mubarak that that is indeed the case. If so, this issue is mislabeled and the patch needs redoing.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Online merge requires table needs to be disabled but deleteRegion (deleteRange) does not require table needs to be disabled.&lt;br/&gt;
We were discussing about making use of HMerge.merge() (please refer my comment @ 27/Jan/12 06:36) but it checks for half of region-size&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.maxFilesize = conf.getLong(HConstants.HREGION_MAX_FILESIZE,
          HConstants.DEFAULT_MAX_FILE_SIZE);
..
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((currentSize + nextSize) &amp;lt;= (maxFilesize / 2)) {
          &lt;span class=&quot;code-comment&quot;&gt;// We merge two adjacent regions &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; their total size is less than
&lt;/span&gt;          &lt;span class=&quot;code-comment&quot;&gt;// one half of the desired maximum size&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;so, in this case an adjacent region size can be &amp;gt; half of max of region-size? &lt;/p&gt;



</comment>
                            <comment id="13219511" author="stack" created="Wed, 29 Feb 2012 20:28:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;Online merge requires table needs to be disabled but deleteRegion (deleteRange) does not require table needs to be disabled.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We&apos;ve had ongoing conversation &amp;#8211; before your time so you are not expected to have known about it &amp;#8211; on our doing an online merge.  Its actually pretty critical need.   See &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1621&quot; title=&quot;merge tool should work on online cluster&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1621&quot;&gt;&lt;del&gt;HBASE-1621&lt;/del&gt;&lt;/a&gt; for some history (Ignore its title where it says table should be offline &amp;#8211; it should be online).&lt;/p&gt;

&lt;p&gt;FYI, the current merge code is broke and unused.  It works for a unit test but I&apos;d say its years since anyone tried to use it to actually do anything useful.&lt;/p&gt;

&lt;p&gt;So, we are agreed that conceptually, whats going on here is region merging?  If so, that helps understanding around whats going on here.  We should also likely rename what this issue does to be about merging since thats how we&apos;ve been describing this operation over the years.&lt;/p&gt;</comment>
                            <comment id="13219568" author="lhofhansl" created="Wed, 29 Feb 2012 21:24:06 +0000"  >&lt;p&gt;I have not been following this too closely, so pardon my ignorance... But it seems we&apos;re going off in a tangent.&lt;/p&gt;

&lt;p&gt;This is not the same as merge, right? The region&apos;s data will be gone, we just need to plug the .META. hole (hbck, could even do that for us).&lt;br/&gt;
Or maybe we don&apos;t even touch .META. and just delete the DFS files.&lt;/p&gt;

&lt;p&gt;1. close/unassign the region&lt;br/&gt;
2. remove the region&apos;s files&lt;br/&gt;
3. either&lt;br/&gt;
   o re-open the region, i.e. keep the .META. entry for the empty region, and merge later when convenient&lt;br/&gt;
   or&lt;br/&gt;
   o remove the region&apos;s .META. entry&lt;br/&gt;
4. done &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Maybe I&apos;m just talking nonsense, but does it have to be much more complicated than this?&lt;/p&gt;</comment>
                            <comment id="13219575" author="mubarakseyed" created="Wed, 29 Feb 2012 21:46:46 +0000"  >&lt;blockquote&gt;&lt;p&gt;So, we are agreed that conceptually, whats going on here is region merging?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Merge with two-regions-data Vs Merge-with-one-region-data&lt;/p&gt;

&lt;p&gt;We do merge just to cover META hole, isn&apos;t? IMO deleteRange is a task/function from cmdLine/API and we do use merge for an implementation (as part of the task)&lt;/p&gt;</comment>
                            <comment id="13219638" author="stack" created="Wed, 29 Feb 2012 23:07:02 +0000"  >&lt;p&gt;@Lars&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This is not the same as merge, right?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds like it is.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The region&apos;s data will be gone&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This patch seems to copy the data from the deleted region up into the new hole-plugging region.  It doesn&apos;t seem to delete it.&lt;/p&gt;

&lt;p&gt;As to your 1., 2., 3... yes, thats what this patch does only the operators and the classes are all named DeleteRegion* blah when what is happening is region merging.&lt;/p&gt;

&lt;p&gt;I think its important to get the concept right else its going to confuse for ever after.&lt;/p&gt;

&lt;p&gt;@Mubarak So, sounds like the command/api could also be named merge rather than deleteRegion (You are not actually deleting the data, is that right?)?&lt;/p&gt;</comment>
                            <comment id="13219646" author="zhihyu@ebaysf.com" created="Wed, 29 Feb 2012 23:22:12 +0000"  >&lt;p&gt;The data for specified region is deleted. See the following in HRegionServer.java:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+         &lt;span class=&quot;code-comment&quot;&gt;// delete the dest region in FS
&lt;/span&gt;+         deleteRegionFromFs(regionName,
+             hRegion,
+         RegionDeletionStatus.RegionDeletionState.DEST_REGION_DELETION_FROM_FS,
+         RegionDeletionStatus.RegionDeletionState.DEST_REGION_DELETION_FROM_FS_FAILED);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13219649" author="mubarakseyed" created="Wed, 29 Feb 2012 23:26:49 +0000"  >&lt;p&gt;@Stack&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;sounds like the command/api could also be named merge rather than deleteRegion (You are not actually deleting the data, is that right?)?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We do delete the data of region (to be deleted)&amp;gt; The real confusion with the terminology here is that merge makes 2 or more regions into one with data remains same (but the start/end keys are different after the merge) but deleteRegion makes one region (or multiple regions) data will be deleted from HDFS (and make a single region in meta with modified start/end key).&lt;/p&gt;

&lt;p&gt;For example:&lt;br/&gt;
We have three regions namely R1, R2, and R3&lt;/p&gt;

&lt;p&gt;When we do merge R2 with R3 -&amp;gt; new region would be (R2R3)&apos; and data of R2 and R3 will be moved to (R2R3)&apos;&lt;br/&gt;
so, in META it would look like&lt;/p&gt;

&lt;p&gt;R1 -&amp;gt; start/end key, location&lt;br/&gt;
(R2R3)&apos; -&amp;gt; modified start/end key, location&lt;br/&gt;
r4 -&amp;gt; start/end key, location&lt;/p&gt;

&lt;p&gt;When we do deleteRange of single region (R2) -&amp;gt; new region would be (R1)&apos;, meaning R1 end key be R2s end key, data of R2 will be deleted, and R1 data will be merged with R1&apos;&lt;br/&gt;
so, in META it would look like&lt;/p&gt;

&lt;p&gt;(R1)&apos; -&amp;gt; modified start/end key, location&lt;br/&gt;
R3 -&amp;gt; start/end key, location&lt;/p&gt;

&lt;p&gt;Make sense?&lt;/p&gt;</comment>
                            <comment id="13219678" author="stack" created="Thu, 1 Mar 2012 00:26:55 +0000"  >&lt;p&gt;Implementation-wise, this is a merge with the added option that we not copy the data of the regions we are merging.&lt;/p&gt;</comment>
                            <comment id="13219685" author="mubarakseyed" created="Thu, 1 Mar 2012 00:39:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;Implementation-wise, this is a merge with the added option that we not copy the data of the regions we are merging.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed but if we name the command like&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
merge &amp;lt;table_name&amp;gt; &amp;lt;start_key&amp;gt; &amp;lt;end_key&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;then it means that clubbing multiple (2 or more) to a single region (provided data remains same)&lt;/p&gt;</comment>
                            <comment id="13219686" author="stack" created="Thu, 1 Mar 2012 00:42:02 +0000"  >&lt;p&gt;Looking at the patch again, yeah, we should expose deleteRegion apis, but it should all run on a merge engine, not this specialization on merge, a &apos;delete region engine&apos;&lt;/p&gt;

&lt;p&gt;Looking at the design:&lt;/p&gt;

&lt;p&gt;+ What do we have the regionserver do anything but close of the region?  Why do we delegate to it the deletion?  Why not have it done by the master?  Or a client script?  Have it remove the region from .META. and from the fs?  And bridge the hole in .META.?   Isn&apos;t that less complicated?&lt;/p&gt;
</comment>
                            <comment id="13219706" author="mubarakseyed" created="Thu, 1 Mar 2012 01:32:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;What do we have the regionserver do anything but close of the region? Why do we delegate to it the deletion? Why not have it done by the master? Or a client script? Have it remove the region from .META. and from the fs? And bridge the hole in .META.? Isn&apos;t that less complicated?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Well, client&apos;s deleteRegion call is asynchronous so no fail-over if client has to do the business.&lt;br/&gt;
Regarding master, it acts as a coordinator between client and RS, meaning it is like move() region task (but split() goes from client to RS). Master does the cleanup job of deleting the failed delete-region znodes if they exceeds the configured timeout value (30 minutes)&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.deleteRegionTracker = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; MasterDeleteRegionTracker(getZooKeeper(),
        &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;,&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, conf.getInt(&lt;span class=&quot;code-quote&quot;&gt;&quot;hbase.delete.region.timeout&quot;&lt;/span&gt;, 1800000));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If we have to make client call to RS (as like compact or split) for deleteRegion then how do we do clean-up? How about master-failover?&lt;/p&gt;</comment>
                            <comment id="13219785" author="jeason" created="Thu, 1 Mar 2012 04:22:52 +0000"  >&lt;p&gt;We also have this requirement: delete some specified regions, specillaly about the data in HDFS, and merge those regions. We do it after diable the table. So it seems very simple:&lt;br/&gt;
1. Ensure the table has been disabled.&lt;br/&gt;
2. Scan META, and find our all the regions should be deleted.&lt;br/&gt;
3. Delete information from .META.&lt;br/&gt;
4. Delete Region directory in HDFS.&lt;br/&gt;
5. Add a new empty region to avoid region hole in .META.&lt;br/&gt;
6. enable table.&lt;/p&gt;</comment>
                            <comment id="13219805" author="stack" created="Thu, 1 Mar 2012 04:47:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;Well, client&apos;s deleteRegion call is asynchronous so no fail-over if client has to do the business.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Fair enough.  I was suggesting doing it as a client script because then it&apos;d be outside of the servers and easier to test.  If client dies, restart it, it looks in zk for work to do and carries on from where the last client was.  But no biggie.&lt;/p&gt;

&lt;p&gt;What about my question about why we delegate merge/delete out to the regionservers?  Why not have them do nothing but the close and then have the master do the remove or merging of fs content and fixup in meta?  Would that be less moving parts?&lt;/p&gt;

&lt;p&gt;Let me give some higher level feedback in a sec.&lt;/p&gt;

&lt;p&gt;@Jieshan Yes that&apos;ll work.  How you do it?  You have a patch?&lt;/p&gt;</comment>
                            <comment id="13219839" author="stack" created="Thu, 1 Mar 2012 06:34:51 +0000"  >&lt;p&gt;@Mubarak I see that this patch is modeled on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4213&quot; title=&quot;Support for fault tolerant, instant schema updates with out master&amp;#39;s intervention (i.e with out enable/disable and bulk assign/unassign) through ZK.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4213&quot;&gt;&lt;del&gt;HBASE-4213&lt;/del&gt;&lt;/a&gt;, the online schema-edit patch.  I&apos;m not sure that is a good model to follow in the first place &amp;#8211; its disabled because it does not currently work in the face of splits though it has handler code supposedly to manage this and secondly, its a bunch of custom code specific to the schema change only.  Your patch does a bunch of copy/paste from the schema patch duplicating the model and then also repeating code except for some changes in method names and the znodes we wait on up in zk.  Rather don&apos;t you think we should be generalizing the common facility and having these two features share its use rather than making a copy, especially since we now we have two clients in need (Its actually three if you count merge, which IMO, this feature should be built on).  For example, in both cases we need to disable table splitting.  In the schema patch it does this with a waitForInflightSchemaChange check that looks at state in zk and then in the splitRegion code, we wait by invoking the below:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
waitForSchemaChange(Bytes.toString(regionInfo.getTableName()));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You come along and do a repeat. You add to the splitRegion code:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+   waitForDeleteRegion(regionInfo.getEncodedName());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The list of things to check before we go ahead and split could get pretty long if we keep on down this route.&lt;/p&gt;

&lt;p&gt;Instead we should have a generic disable splitting function that both schema edit and this patch could use.&lt;/p&gt;

&lt;p&gt;Going back to your design, I see this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
4. DeleteRegionTracker (&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; class in RS side) will process nodeChildrenChanged(), get the list of regions_to_be_deleted, check that those regions are being hosted by the RS, &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; yes then

doDeleteRegion
call deleteRegion() in HRegionServer
disable the region split
close the region
remove from META
bridge the whole in META (extending the span of before or after region)
remove region directory from HDFS
update state in ZK (&amp;lt;zookeeper.znode.parent&amp;gt;/delete-region/&amp;lt;encoded-region-name&amp;gt;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Does the above presume all regions for a range are on a single regionserver (If not, how is the meta editing done &amp;#8211; in particular the bridging of the hole in .META.?).&lt;/p&gt;

&lt;p&gt;I&apos;m asking because I think its not a good design asking regionservers to do the merge; it makes this patch more complicated than it need be IMO.&lt;/p&gt;

&lt;p&gt;I suggest we go back to the design and work forward from there.  Your patch is fat and has a bunch of good stuff that we can repurpose once we have the design done.&lt;/p&gt;

&lt;p&gt;I suggest a design below.  It has some prerequisites, some general function that this feature could use (and others).  The prereqs if you think them good, could be done outside of this JIRA.&lt;/p&gt;

&lt;p&gt;Here&apos;s a suggested rough outline of how I think this feature should run.  The feature I&apos;m describing below is merge and deleteRegion for I see them as in essence the same thing.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;Client calls merge or deleteRegion API.  API is a range of rows.&lt;/li&gt;
	&lt;li&gt;Master gets call.&lt;/li&gt;
	&lt;li&gt;Master obtains a write lock on table so it can&apos;t be disabled from under us.  The write lock will also disable splitting. This is one of the prereqs I think.  Its &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; (Or we could just do something simpler where we have a flag up in zk that splitRegion checks but thats less useful I think; OR we do the dynamic configs issue and set splits to off via a config. change).  There&apos;d be a timer for how long we wait on the table lock.&lt;/li&gt;
	&lt;li&gt;If we get the lock, write intent to merge a range up into zk.  It also hoists into zk if its a pure merge or a merge that drops the region data (a deleteRegion call)&lt;/li&gt;
	&lt;li&gt;Return to the client either our failed attempt at locking the table or an id of some sort used identifying this running operation; can use it querying status.&lt;/li&gt;
	&lt;li&gt;Turn off balancer.  TODO/prereq: Do it in a way that is persisted.  Balancer switch currently in memory only so if master crashes, new master will come up in balancing mode # (If we had dynamic config. could hoist up to zk a config. that disables the balancer rather than have a balancer-specific flag/znode OR if a write lock outstanding on a table, then the balancer does not balance regions in the locked table &amp;#8211; this latter might be the easiest to do)&lt;/li&gt;
	&lt;li&gt;Write into zk that just turned off the balancer (If it was on)&lt;/li&gt;
	&lt;li&gt;Get regions that are involved in the span&lt;/li&gt;
	&lt;li&gt;Hoist the list up into zk.&lt;/li&gt;
	&lt;li&gt;Create region to span the range.&lt;/li&gt;
	&lt;li&gt;Write that we did this up into zk.&lt;/li&gt;
	&lt;li&gt;Close regions in parallel.  Confirm close in parallel.&lt;/li&gt;
	&lt;li&gt;Write up into zk regions closed (This might not be necessary since can ask if region is open).&lt;/li&gt;
	&lt;li&gt;If a merge and not a delete region, move files under new region.  Might multithread this (moves should go pretty fast). If a deleteregion, we skip this step.&lt;/li&gt;
	&lt;li&gt;On completion mark zk (though may not be necessary since its easy to look in fs to see state of move).&lt;/li&gt;
	&lt;li&gt;Edit .META.&lt;/li&gt;
	&lt;li&gt;Confirm edits went in.&lt;/li&gt;
	&lt;li&gt;Move old regions to hbase trash folder TODO: There is no trash folder under /hbase currently.  We should add one.&lt;/li&gt;
	&lt;li&gt;Enable balancer (if it was off)&lt;/li&gt;
	&lt;li&gt;Unlock table&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Done&lt;/p&gt;

&lt;p&gt;Above is a suggestion.  It&apos;d get us merge and your deleteRegion.&lt;/p&gt;
</comment>
                            <comment id="13219840" author="mubarakseyed" created="Thu, 1 Mar 2012 06:36:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;I was suggesting doing it as a client script because then it&apos;d be outside of the servers and easier to test. If client dies, restart it, it looks in zk for work to do and carries on from where the last client was. But no biggie.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Is it something like jruby script (like region_mover.rb) in HBASE_HOME/bin dir? What happens if balancer is running or split is in middle for that region? I guess the script should check to see if there is a &amp;lt;zookeeper.znode.parent&amp;gt;/unassigned/&amp;lt;region-to-be-deleted&amp;gt; and RS should ignore split request if the region is in middle of deletion (by looking at &amp;lt;zookeeper.znode.parent&amp;gt;/delete-region/&amp;lt;region-to-be-deleted&amp;gt;)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What about my question about why we delegate merge/delete out to the regionservers? Why not have them do nothing but the close and then have the master do the remove or merging of fs content and fixup in meta? Would that be less moving parts?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Master delegate tasks to RS (eg: openRegion for assignment, closeRegion for move), are you asking something like a handler in master side to do the remove or merging of fs content and fixup in meta? We can as long as required methods are public in HRegionInterface (How about HRegion as we can&apos;t serialize it?)&lt;/p&gt;</comment>
                            <comment id="13219843" author="stack" created="Thu, 1 Mar 2012 06:37:38 +0000"  >&lt;p&gt;Oh, I forgot to mention that each step in the above should be repickupable &amp;#8211; i.e. if the process running the above crashes, on restart it should continue where the previous left off &amp;#8211; up until .META. edits (even here, we should make it so we can repair).  We should include a cancel facility.  Anything we develop would have to be testable; both the individual steps and then the process as a whole.&lt;/p&gt;</comment>
                            <comment id="13219845" author="stack" created="Thu, 1 Mar 2012 06:40:02 +0000"  >&lt;p&gt;One more thing, it would be sweet if the above were not hardcoded but instead was a set of steps described elsewhere and malleable or even better, if we could describe the steps to run on top of some generic operations framework as per FATE, but that would be a bunch more work.&lt;/p&gt;

&lt;p&gt;How many regions are we talking of merging/deleting at any one time? I think above should work for a big table as long was we did stuff in parallel; closes and file moving.  To be confirmed.&lt;/p&gt;</comment>
                            <comment id="13219846" author="stack" created="Thu, 1 Mar 2012 06:40:06 +0000"  >&lt;p&gt;One more thing, it would be sweet if the above were not hardcoded but instead was a set of steps described elsewhere and malleable or even better, if we could describe the steps to run on top of some generic operations framework as per FATE, but that would be a bunch more work.&lt;/p&gt;

&lt;p&gt;How many regions are we talking of merging/deleting at any one time? I think above should work for a big table as long was we did stuff in parallel; closes and file moving.  To be confirmed.&lt;/p&gt;</comment>
                            <comment id="13219849" author="stack" created="Thu, 1 Mar 2012 06:43:43 +0000"  >&lt;p&gt;@Mubarak Our comments crossed.  See further up in this issue for more on what I&apos;m thinking; it should answer the questions you pose.&lt;/p&gt;</comment>
                            <comment id="13219856" author="mubarakseyed" created="Thu, 1 Mar 2012 06:53:54 +0000"  >&lt;p&gt;Thanks Stack for your suggestions. Will think a bit.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How many regions are we talking of merging/deleting at any one time? I think above should work for a big table as long was we did stuff in parallel; closes and file moving. To be confirmed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I have tested for one region at a time but if i change the code for multiple regions then it will work in parallel as each RS will do process as long as regions-to-be-deleted are part of online regions list.&lt;/p&gt;</comment>
                            <comment id="13219876" author="mubarakseyed" created="Thu, 1 Mar 2012 07:24:41 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
In your proposal, 2 to 4 are synchronous (client gets blocked) in master side, 5 returns the task id (Or error) to client, 6 to 9 are again in master side, 10 to 18 goes to RS side, and 19 to 20 in master side&lt;/p&gt;

&lt;p&gt;We need ZK trackers in both sides, isn&apos;t?&lt;/p&gt;</comment>
                            <comment id="13219882" author="mubarakseyed" created="Thu, 1 Mar 2012 07:33:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;Does the above presume all regions for a range are on a single regionserver (If not, how is the meta editing done &#8211; in particular the bridging of the hole in .META.?).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No, the design was intended for a single region&lt;/p&gt;</comment>
                            <comment id="13219951" author="jeason" created="Thu, 1 Mar 2012 10:13:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;Yes that&apos;ll work. How you do it? You have a patch?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;@Stack:&lt;br/&gt;
I have written a client tool to do this for 90. Only delete the specified regions. I will modify it and submit a patch if this tool is necessary.&lt;/p&gt;</comment>
                            <comment id="13220162" author="zhihyu@ebaysf.com" created="Thu, 1 Mar 2012 17:06:18 +0000"  >&lt;p&gt;@Stack, @Mubarak:&lt;br/&gt;
Do you think we should continue discussion on the new framework under &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5487&quot; title=&quot;Generic framework for Master-coordinated tasks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5487&quot;&gt;HBASE-5487&lt;/a&gt; ?&lt;br/&gt;
This JIRA has become a novel - it is hard for other people to read.&lt;/p&gt;

&lt;p&gt;@Jieshan:&lt;br/&gt;
Please publish your tool under a separate JIRA.&lt;/p&gt;</comment>
                            <comment id="13220165" author="stack" created="Thu, 1 Mar 2012 17:17:43 +0000"  >&lt;p&gt;@Ted&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do you think we should continue discussion on the new framework under &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5487&quot; title=&quot;Generic framework for Master-coordinated tasks&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5487&quot;&gt;HBASE-5487&lt;/a&gt; ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It might be time to kill this issue and start up a new one.  Not under 5487 though.  What you think Mubarak?  I&apos;d think that if we started a new issue, it&apos;d be called online merge and would first work out the design.&lt;/p&gt;

&lt;p&gt;@Mubarak&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;10 to 18 goes to RS side....We need ZK trackers in both sides, isn&apos;t?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think so.  Master is just asking the regionservers to close regions.  Master can create regions and do the moving of data from old regions into new.  Its just fs operations.  No need of regionserver context, especially not live regionserver context.&lt;/p&gt;</comment>
                            <comment id="13220170" author="zhihyu@ebaysf.com" created="Thu, 1 Mar 2012 17:28:07 +0000"  >&lt;p&gt;We should consider extensibility of our design.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Master is just asking the regionservers to close regions&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Since we&apos;re going to permit the deletion of multiple regions, the above operation may take some time. Especially when cluster is under load.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Master can create regions and do the moving of data from old regions into new&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;One optimization we&apos;re doing w.r.t. distributed log splitting is to move certain step from master to region server. The above may not scale when multiple regions are requested to be deleted.&lt;/p&gt;</comment>
                            <comment id="13220199" author="stack" created="Thu, 1 Mar 2012 18:08:54 +0000"  >&lt;p&gt;Ted: This has been raised already above as a concern and some suggestions have been made that we // certain ops.  Your suggestion that we farm out the closing of regions to the regionservers themselves will make no difference regards how fast regions close and ditto regards deletes.&lt;/p&gt;</comment>
                            <comment id="13220205" author="zhihyu@ebaysf.com" created="Thu, 1 Mar 2012 18:19:14 +0000"  >&lt;p&gt;When we change the location of rename() call from master to region server for distributed log splitting, the duration was shortened from 22 minutes to 7 minutes for the same dataset.&lt;br/&gt;
I wonder if you have statistics showing that master-side operation (for moving/deleting data of old regions) makes no difference in performance w.r.t. distributed operations.&lt;/p&gt;</comment>
                            <comment id="13220220" author="tlipcon" created="Thu, 1 Mar 2012 18:33:32 +0000"  >&lt;p&gt;How is this a performance-critical path? Most of the use cases are around things like aging off old data, which isn&apos;t perf-critical at all. We should aim for simplicity rather than performance when things aren&apos;t in a hot path or in a time-to-recovery path.&lt;/p&gt;</comment>
                            <comment id="13220345" author="stack" created="Thu, 1 Mar 2012 20:46:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;When we change the location of rename() call from master to region server for distributed log splitting, the duration was shortened from 22 minutes to 7 minutes for the same dataset.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Because rename was done via multiple clients rather than in parallel on master?  You sure it wasn&apos;t because of something else? (Distributed splitting is a different type of process to what is going on here)&lt;/p&gt;

&lt;p&gt;What do you want to farm out to the regionservers?  We are already farming out work in the design above.  We ask the regionservers to close regions for us.  You want to farm out more than this?  Control?  To what end other than complicating the design?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I wonder if you have statistics showing that master-side operation (for moving/deleting data of old regions) makes no difference in performance w.r.t. distributed operations.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, stands to reason I&apos;d think.  I&apos;d put it on you to come up w/ proof that what seems reasonable actually isn&apos;t, at least when talking about the tens of regions at most which is what I think this issue is about.&lt;/p&gt;</comment>
                            <comment id="13220365" author="zhihyu@ebaysf.com" created="Thu, 1 Mar 2012 21:11:59 +0000"  >&lt;p&gt;Revisiting the flow outlined @ 01/Mar/12 06:34, Mubarak was saying &apos;10 to 18 goes to RS side&apos;&lt;br/&gt;
Can this be clarified ?&lt;/p&gt;

&lt;p&gt;It would be nice to mark each step with Master or RS (for region server)&lt;/p&gt;

&lt;p&gt;I agree distributed log splitting is a different type of process.&lt;/p&gt;</comment>
                            <comment id="13220377" author="stack" created="Thu, 1 Mar 2012 21:25:54 +0000"  >&lt;p&gt;I did already at &apos;01/Mar/12 17:17&apos;&lt;/p&gt;</comment>
                            <comment id="13220417" author="mubarakseyed" created="Thu, 1 Mar 2012 22:06:40 +0000"  >&lt;p&gt;@Stack&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;It might be time to kill this issue and start up a new one. Not under 5487 though. What you think Mubarak? I&apos;d think that if we started a new issue, it&apos;d be called online merge and would first work out the design.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Fine, let us start a new issue and keep brainstorming on design (until get a logical point)&lt;/p&gt;</comment>
                            <comment id="13220486" author="mubarakseyed" created="Thu, 1 Mar 2012 23:35:39 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5504&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HBASE-5504&lt;/a&gt; will be used for new design and brainstorming. Thanks.&lt;/p&gt;</comment>
                            <comment id="13220699" author="stack" created="Fri, 2 Mar 2012 05:55:38 +0000"  >&lt;p&gt;@Mubarak Should we then close this issue as subsumed by the new issue (we can reuse your code pasted here over in the new issue after we work through design).  Good stuff.&lt;/p&gt;</comment>
                            <comment id="13234603" author="lhofhansl" created="Wed, 21 Mar 2012 17:58:46 +0000"  >&lt;p&gt;Pushing to 0.96, but maybe we should just close this.&lt;/p&gt;</comment>
                            <comment id="13234721" author="mubarakseyed" created="Wed, 21 Mar 2012 18:09:00 +0000"  >&lt;p&gt;Please close this one. Thanks.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12544478">HBASE-5487</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12429691">HBASE-1621</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12514612" name="HBASE-4991.trunk.v1.patch" size="102277" author="mubarakseyed" created="Wed, 15 Feb 2012 09:29:27 +0000"/>
                            <attachment id="12514800" name="HBASE-4991.trunk.v2.patch" size="102088" author="zhihyu@ebaysf.com" created="Thu, 16 Feb 2012 14:22:12 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 9 Dec 2011 16:48:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>220210</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 39 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hsn3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>101902</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>