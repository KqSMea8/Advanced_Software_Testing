<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:52:00 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-1252/HBASE-1252.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-1252] Make atomic increment perform a binary increment</title>
                <link>https://issues.apache.org/jira/browse/HBASE-1252</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;A few issues related to recently committed &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-803&quot; title=&quot;Atomic increment operations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-803&quot;&gt;&lt;del&gt;HBASE-803&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The HTable api still takes an integer amount rather than long, mismatching HRI.&lt;/li&gt;
	&lt;li&gt;Binary increments are 10 times faster for small amounts than going Bytes.toLong, += amount, Bytes.toBytes.  Twice as fast for large amounts (binary incrementor just loops a bunch of single increments, though there is plenty of room for optimizations in my current implementation)&lt;/li&gt;
	&lt;li&gt;Using a binary increment means we don&apos;t have to worry about the size of the value.  If someone wants a 16 byte value they can have it, just have to initialize as such.  If no existing value exists, will default to long/8 bytes.  Only odd behavior will be what happens when you are at the max value, currently will just stay at all 11111 binary.  Could actually grow the byte[] but then we can&apos;t do things in place. I&apos;m okay with leaving it like that, not exactly sure what the current implementation would do, throw an exception or wrap?&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Using binary incrementing, we can directly manipulate values in the memcache rather than sending updates with the same timestamp.  I think we should hold off on doing this until &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1234&quot; title=&quot;Change HBase StoreKey format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1234&quot;&gt;&lt;del&gt;HBASE-1234&lt;/del&gt;&lt;/a&gt; goes in.  We&apos;ll then have to deal directly with hlog.  (this issue is not going to address this)&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12416573">HBASE-1252</key>
            <summary>Make atomic increment perform a binary increment</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="streamy">Jonathan Gray</assignee>
                                    <reporter username="streamy">Jonathan Gray</reporter>
                        <labels>
                    </labels>
                <created>Tue, 10 Mar 2009 19:04:07 +0000</created>
                <updated>Sun, 13 Sep 2009 22:24:28 +0000</updated>
                            <resolved>Tue, 10 Mar 2009 22:22:18 +0000</resolved>
                                    <version>0.19.0</version>
                                    <fixVersion>0.19.1</fixVersion>
                    <fixVersion>0.20.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12680589" author="streamy" created="Tue, 10 Mar 2009 19:07:04 +0000"  >&lt;p&gt;Benchmarking results:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
incrementAsLong : Incremented 100000 times by 1 in 99 ms (current value is 100000)
incrementAsBytes : Incremened 100000 times by 1 in 9 ms (current value is 200000)

incrementAsLong : Incremented 100000 times by 100 in 100 ms (current value is 10000000)
incrementAsBytes : Incremened 100000 times by 100 in 46 ms (current value is 20000000)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the number gets over 500 or so, the byte increment gets slower.  Going to work on an optimization to try and make them at least approx the same for high incrementing values.&lt;/p&gt;</comment>
                            <comment id="12680591" author="streamy" created="Tue, 10 Mar 2009 19:33:10 +0000"  >&lt;p&gt;Trying my best to get compiler optimizations out the way... Anyways, the binary increment means we can do things in place down the road and also that we don&apos;t have to care about the size of the existing value.&lt;/p&gt;

&lt;p&gt;Current results with optimizations for larger incrementing amounts:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
incrementAsLong : Incremented 100000 times by 1 in 92 ms (current value is 100000)
incrementAsBytes : Incremened 100000 times by 1 in 11 ms (current value is 100000)

incrementAsLong : Incremented 100000 times by 10 in 90 ms (current value is 1000000)
incrementAsBytes : Incremened 100000 times by 10 in 15 ms (current value is 1000000)

incrementAsLong : Incremented 100000 times by 100 in 91 ms (current value is 10000000)
incrementAsBytes : Incremened 100000 times by 100 in 47 ms (current value is 10000000)

incrementAsLong : Incremented 100000 times by 1000 in 91 ms (current value is 100000000)
incrementAsBytes : Incremened 100000 times by 1000 in 98 ms (current value is 100000000)

incrementAsLong : Incremented 100000 times by 10000 in 90 ms (current value is 1000000000)
incrementAsBytes : Incremened 100000 times by 10000 in 35 ms (current value is 1000000000)

incrementAsLong : Incremented 100000 times by 100000 in 91 ms (current value is 10000000000)
incrementAsBytes : Incremened 100000 times by 100000 in 136 ms (current value is 10000000000)

incrementAsLong : Incremented 100000 times by 1000000 in 90 ms (current value is 100000000000)
incrementAsBytes : Incremened 100000 times by 1000000 in 75 ms (current value is 100000000000)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12680604" author="streamy" created="Tue, 10 Mar 2009 20:35:41 +0000"  >&lt;p&gt;Okay.  Got a far more optimized binary increment written now.  Beats long method across the board.  Two methods of benchmarking, one which just runs a bunch of tests in succession, the other includes my attempts at trying to prevent optimizations (especially starting a new jvm for each test).  It made no difference in timings which order I tested them in.&lt;/p&gt;

&lt;p&gt;4-10X performance improvement across the board now.&lt;/p&gt;

&lt;p&gt;Doing my best to reduce optimizations:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[hbase@mb0 src]$ java IncrementTest 1000000 1
incrementAsLong : Incremented 1000000 times by 1 in 209 ms (current value is 1000000)
incrementAsBytes : Incremened 1000000 times by 1 in 20 ms (current value is 1000000)
[hbase@mb0 src]$ java IncrementTest 1000000 10
incrementAsLong : Incremented 1000000 times by 10 in 210 ms (current value is 10000000)
incrementAsBytes : Incremened 1000000 times by 10 in 20 ms (current value is 10000000)
[hbase@mb0 src]$ java IncrementTest 1000000 100
incrementAsLong : Incremented 1000000 times by 100 in 210 ms (current value is 100000000)
incrementAsBytes : Incremened 1000000 times by 100 in 26 ms (current value is 100000000)
[hbase@mb0 src]$ java IncrementTest 1000000 1000
incrementAsLong : Incremented 1000000 times by 1000 in 209 ms (current value is 1000000000)
incrementAsBytes : Incremened 1000000 times by 1000 in 30 ms (current value is 1000000000)
[hbase@mb0 src]$ java IncrementTest 1000000 10000
incrementAsLong : Incremented 1000000 times by 10000 in 211 ms (current value is 10000000000)
incrementAsBytes : Incremened 1000000 times by 10000 in 31 ms (current value is 10000000000)
[hbase@mb0 src]$ java IncrementTest 1000000 100000
incrementAsLong : Incremented 1000000 times by 100000 in 211 ms (current value is 100000000000)
incrementAsBytes : Incremened 1000000 times by 100000 in 41 ms (current value is 100000000000)
[hbase@mb0 src]$ java IncrementTest 1000000 1000000
incrementAsLong : Incremented 1000000 times by 1000000 in 209 ms (current value is 1000000000000)
incrementAsBytes : Incremened 1000000 times by 1000000 in 37 ms (current value is 1000000000000)
[hbase@mb0 src]$ java IncrementTest 1000000 10000000
incrementAsLong : Incremented 1000000 times by 10000000 in 213 ms (current value is 10000000000000)
incrementAsBytes : Incremened 1000000 times by 10000000 in 46 ms (current value is 10000000000000)
[hbase@mb0 src]$ java IncrementTest 1000000 100000000
incrementAsLong : Incremented 1000000 times by 100000000 in 213 ms (current value is 100000000000000)
incrementAsBytes : Incremened 1000000 times by 100000000 in 43 ms (current value is 100000000000000)
[hbase@mb0 src]$ java IncrementTest 1000000 1000000000
incrementAsLong : Incremented 1000000 times by 1000000000 in 211 ms (current value is 1000000000000000)
incrementAsBytes : Incremened 1000000 times by 1000000000 in 55 ms (current value is 1000000000000000)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just a big sequence of tests in a single method:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
incrementAsLong : Incremented 100000 times by 1 in 91 ms (current value is 100000)
incrementAsBytes : Incremened 100000 times by 1 in 11 ms (current value is 100000)
incrementAsLong : Incremented 100000 times by 10 in 26 ms (current value is 1000000)
incrementAsBytes : Incremened 100000 times by 10 in 1 ms (current value is 1000000)
incrementAsLong : Incremented 100000 times by 100 in 19 ms (current value is 10000000)
incrementAsBytes : Incremened 100000 times by 100 in 1 ms (current value is 10000000)
incrementAsLong : Incremented 100000 times by 1000 in 19 ms (current value is 100000000)
incrementAsBytes : Incremened 100000 times by 1000 in 1 ms (current value is 100000000)
incrementAsLong : Incremented 100000 times by 10000 in 20 ms (current value is 1000000000)
incrementAsBytes : Incremened 100000 times by 10000 in 1 ms (current value is 1000000000)
incrementAsLong : Incremented 100000 times by 100000 in 9 ms (current value is 10000000000)
incrementAsBytes : Incremened 100000 times by 100000 in 2 ms (current value is 10000000000)
incrementAsLong : Incremented 100000 times by 1000000 in 9 ms (current value is 100000000000)
incrementAsBytes : Incremened 100000 times by 1000000 in 2 ms (current value is 100000000000)
incrementAsLong : Incremented 100000 times by 10000000 in 9 ms (current value is 1000000000000)
incrementAsBytes : Incremened 100000 times by 10000000 in 4 ms (current value is 1000000000000)
incrementAsLong : Incremented 100000 times by 100000000 in 9 ms (current value is 10000000000000)
incrementAsBytes : Incremened 100000 times by 100000000 in 3 ms (current value is 10000000000000)
incrementAsLong : Incremented 100000 times by 1000000000 in 10 ms (current value is 100000000000000)
incrementAsBytes : Incremened 100000 times by 1000000000 in 4 ms (current value is 100000000000000)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12680623" author="streamy" created="Tue, 10 Mar 2009 21:20:04 +0000"  >&lt;p&gt;Changes HTable to take a long.  Also changes implementation of increment to work on bytes directly rather than creating new long and incrementing it.  Probably will not see performance improvement from client POV because the actual increment is orders of magnitude faster than the network latency.  Just wanted to move to binary incrementing so we could do it in place down the road, and we can do it on any size column value rather than just 8 byte longs.&lt;/p&gt;</comment>
                            <comment id="12680624" author="streamy" created="Tue, 10 Mar 2009 21:23:57 +0000"  >&lt;p&gt;removed an unused variable.&lt;/p&gt;</comment>
                            <comment id="12680627" author="streamy" created="Tue, 10 Mar 2009 21:31:38 +0000"  >&lt;p&gt;Applies to 0.19 branch and 0.20 trunk.&lt;/p&gt;</comment>
                            <comment id="12680652" author="stack" created="Tue, 10 Mar 2009 22:22:18 +0000"  >&lt;p&gt;Committed branch and trunk.  Thanks for the patch Jon.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12401863" name="hbase-1252-v1.patch" size="3018" author="streamy" created="Tue, 10 Mar 2009 21:20:04 +0000"/>
                            <attachment id="12401865" name="hbase-1252-v2.patch" size="2977" author="streamy" created="Tue, 10 Mar 2009 21:25:25 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 10 Mar 2009 22:22:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32064</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 41 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hc7z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>99242</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>