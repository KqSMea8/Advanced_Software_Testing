<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:49:48 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7868/HBASE-7868.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7868] HFile performance regression between 0.92 and 0.94</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7868</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;By HFilePerformanceEvaluation seems that 0.94 is slower then 0.92&lt;/p&gt;

&lt;p&gt;Looking at the profiler for the Scan path, seems that most of the time, compared to 92, is spent in the metrics dictionary lookup. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; pointed out the new per family/block metrics.&lt;/p&gt;

&lt;p&gt;By commenting the metrics call in HFileReaderV2, the performance seems to get better, but maybe metrics is not the only problem.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12632745">HBASE-7868</key>
            <summary>HFile performance regression between 0.92 and 0.94</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="mbertozzi">Matteo Bertozzi</assignee>
                                    <reporter username="mbertozzi">Matteo Bertozzi</reporter>
                        <labels>
                    </labels>
                <created>Sun, 17 Feb 2013 10:35:45 +0000</created>
                <updated>Mon, 6 Apr 2015 19:22:10 +0000</updated>
                            <resolved>Mon, 6 Apr 2015 19:22:10 +0000</resolved>
                                    <version>0.94.5</version>
                                                    <component>io</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>16</watches>
                                                                <comments>
                            <comment id="13580161" author="mbertozzi" created="Sun, 17 Feb 2013 10:37:41 +0000"  >&lt;p&gt;attached a graph extracted from HFilePerformanceEvaluation. Aside from strange runs the average seems to say that 92 is still faster than 94 and 94 with metrics commented out from HFileReaderV2, is way faster then 94&lt;/p&gt;</comment>
                            <comment id="13580180" author="jmspaggi" created="Sun, 17 Feb 2013 12:48:45 +0000"  >&lt;p&gt;Hi Matteo,&lt;/p&gt;

&lt;p&gt;Which 0.94.x version did you used for this test?&lt;/p&gt;

&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;JM&lt;/p&gt;</comment>
                            <comment id="13580183" author="mbertozzi" created="Sun, 17 Feb 2013 13:49:19 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmspaggi&quot; class=&quot;user-hover&quot; rel=&quot;jmspaggi&quot;&gt;Jean-Marc Spaggiari&lt;/a&gt; the latest one (bench done this morning, git pull)&lt;br/&gt;
but since, the hotspot is SchemaMetrics and the performance regression can be seen just by looking at hfile, my guess is that is all 0.94.&lt;/p&gt;

&lt;p&gt;Anyway if you want you can start looking at the performances pre &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13580195" author="yuzhihong@gmail.com" created="Sun, 17 Feb 2013 15:10:54 +0000"  >&lt;p&gt;Looking at the graph, 0.94 without metrics was faster than stock 0.94 in most of the samples.&lt;/p&gt;</comment>
                            <comment id="13580196" author="mbertozzi" created="Sun, 17 Feb 2013 15:16:17 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ted_yu&quot; class=&quot;user-hover&quot; rel=&quot;ted_yu&quot;&gt;Ted Yu&lt;/a&gt; graph 8 is the average of the 7 runs&lt;/p&gt;

&lt;p&gt;This graphs were done this morning on my machines, so I expect weird runs.&lt;br/&gt;
but you can get the same results on a proper machine.&lt;br/&gt;
(I&apos;ve started benchmarking this stuff days ago, and I always got the same avg results)&lt;/p&gt;</comment>
                            <comment id="13580199" author="yuzhihong@gmail.com" created="Sun, 17 Feb 2013 15:46:25 +0000"  >&lt;p&gt;For sequential write, average performance 0.94 without metrics is a bit slower compared to that of 0.92&lt;/p&gt;</comment>
                            <comment id="13580218" author="jmspaggi" created="Sun, 17 Feb 2013 17:03:01 +0000"  >&lt;p&gt;I have a script which is running all the PerformanceEvaluationTests for all HBase 0.94.x version.&lt;/p&gt;

&lt;p&gt;I will download all the 0.92.x version too and restart it. I will publish what I found. The goal was to PerformanceTest the new releases, but I can stil run that for past versions.&lt;/p&gt;</comment>
                            <comment id="13580311" author="lhofhansl" created="Sun, 17 Feb 2013 22:33:10 +0000"  >&lt;p&gt;Interesting. This did not come up in any of the scan profiling I did in the past.&lt;br/&gt;
But it looks like we can get another boost from fixing this!&lt;/p&gt;</comment>
                            <comment id="13580312" author="lhofhansl" created="Sun, 17 Feb 2013 22:36:20 +0000"  >&lt;p&gt;You&apos;re not saying this is caused by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt;, right?&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; should make this better, but did not eliminate the overhead completely.&lt;/p&gt;</comment>
                            <comment id="13580329" author="lhofhansl" created="Sun, 17 Feb 2013 23:49:30 +0000"  >&lt;p&gt;On my machine I only find about a 4% difference between stock 0.94 and a version with all schemaMetric commented out in HFileReaderV2. My guess is that that will translate to less then 0.5% of actual Scan or Get performance.&lt;/p&gt;</comment>
                            <comment id="13580333" author="apurtell" created="Sun, 17 Feb 2013 23:57:39 +0000"  >&lt;p&gt;Thought this issue might be a dup of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; too.&lt;/p&gt;

&lt;p&gt;As for per-CF metrics, we need something like this for things like &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4147&quot; title=&quot;StoreFile query usage report&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4147&quot;&gt;HBASE-4147&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6572&quot; title=&quot;Tiered HFile storage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6572&quot;&gt;HBASE-6572&lt;/a&gt;, but perhaps more lazy and/or approximate and/or out of line than current.&lt;/p&gt;</comment>
                            <comment id="13580346" author="eclark" created="Mon, 18 Feb 2013 00:51:48 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; is for the cache hit branch.  For cache misses (all of the hfile perf runs have caching off) we still do the full concurrent hashmap lookup.  That part is slow.&lt;/p&gt;

&lt;p&gt;We can get some perf by just following what cache hit does (an array of atomic longs) that are looked up by index.  There may still be other things that need to get faster, or better ways that was just my first thought.&lt;/p&gt;

&lt;p&gt;Also it would be nice if we could turn the per cf metrics off for people that are very perf conscience. &lt;/p&gt;</comment>
                            <comment id="13580347" author="lhofhansl" created="Mon, 18 Feb 2013 01:02:09 +0000"  >&lt;p&gt;Did some scan testing... Scanning 20m KVs through the highlevel scan api, such that all KVs are touched but filtered by a Filter at the server and all data in the block cache (so we can test tight scan performance).&lt;/p&gt;

&lt;p&gt;I do see an improvement when the schemaMetrics calls are commented out in HFileReaderV2.&lt;br/&gt;
The scan time when from ~11.9 to ~11.6, so about a 2.5% improvement.&lt;/p&gt;

&lt;p&gt;As Andy points out, we need to keep these metrics around and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt; improved things (cache hits are maintained lazily), there might be further improvements that we can do.&lt;/p&gt;</comment>
                            <comment id="13580350" author="lhofhansl" created="Mon, 18 Feb 2013 01:05:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; Presumably the overhead of the metric update would be negligible compared to the time/effort it takes to actually load the block. At least that was my assumption when reviewing &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6852&quot; title=&quot;SchemaMetrics.updateOnCacheHit costs too much while full scanning a table with all of its fields&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6852&quot;&gt;&lt;del&gt;HBASE-6852&lt;/del&gt;&lt;/a&gt;. Maybe I assumed incorrectly.&lt;/p&gt;</comment>
                            <comment id="13580353" author="jmspaggi" created="Mon, 18 Feb 2013 01:08:18 +0000"  >&lt;p&gt;Attached is the FilteredScan test restuls from PerformanceTest. There is only 0.94.x for now but 0.92.x is coming soon. As you can see, there is also some perfs impacts between 0.94.0 and 0.94.5 (about 1%).&lt;/p&gt;</comment>
                            <comment id="13580355" author="lhofhansl" created="Mon, 18 Feb 2013 01:16:06 +0000"  >&lt;p&gt;Did the same scan test with cacheBlocks disabled for the scan. All data is in the OS cache (no actual disk reads). With that I can not discern any changes between commenting the schemaMetrics stuff, vs not.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmspaggi&quot; class=&quot;user-hover&quot; rel=&quot;jmspaggi&quot;&gt;Jean-Marc Spaggiari&lt;/a&gt; What are you plotting? Time or number of ops? I assume it&apos;s time, since all of my perf improvements went into 0.94.4.&lt;/p&gt;</comment>
                            <comment id="13580358" author="jmspaggi" created="Mon, 18 Feb 2013 01:24:03 +0000"  >&lt;p&gt;Rows per seconds.&lt;/p&gt;

&lt;p&gt;Results are quite interesting. Like for RandomWriteTest, there is a huge improvement between 0.94.2 and and 0.94.3. &lt;/p&gt;

&lt;p&gt;When all the tests will be done for 0.94 I will add 0.92 on the list. &lt;/p&gt;</comment>
                            <comment id="13580373" author="lhofhansl" created="Mon, 18 Feb 2013 02:26:19 +0000"  >&lt;p&gt;Hmmm... Interesting. So with each point release 0.94 has become slower? With the biggest drop in 0.94.4?&lt;br/&gt;
This is not what my testing bore out (and we also had our Phoenix team test the releases).&lt;/p&gt;

&lt;p&gt;Are you 100% sure you did not invert the axis?&lt;/p&gt;</comment>
                            <comment id="13580376" author="lhofhansl" created="Mon, 18 Feb 2013 02:37:15 +0000"  >&lt;p&gt;I did some admittedly unscientific benchmarking here: &lt;a href=&quot;http://hadoop-hbase.blogspot.com/2012/12/hbase-profiling.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hadoop-hbase.blogspot.com/2012/12/hbase-profiling.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13580378" author="jmspaggi" created="Mon, 18 Feb 2013 02:38:36 +0000"  >&lt;p&gt;Attached is the file with the values. I can also uploade the entire spreadsheet with all the formulas if required. anyway I will share it when I will have all the 0.94.x numbers. I ran those tests from HBase distrib directly out of the box. No configuration, no tweeking, nothing. On a 4 cores laptop with only 2GB RAM. I can try the same script and produce the same report on another hardware if that helps.&lt;/p&gt;</comment>
                            <comment id="13580379" author="lhofhansl" created="Mon, 18 Feb 2013 02:43:05 +0000"  >&lt;p&gt;I&apos;d be interested in the test code.&lt;/p&gt;</comment>
                            <comment id="13580380" author="jmspaggi" created="Mon, 18 Feb 2013 02:56:43 +0000"  >&lt;p&gt;I&apos;m using the PerformanceEvaluation class coming with HBase...&lt;/p&gt;

&lt;p&gt;And then simply loop over all my HBase folders.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
#!/bin/bash
export JAVA_HOME=/usr/local/jdk1.7.0_05/
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in `ls | grep hbase-`; &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt;
cd $i
echo `date` Starting tests &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; `pwd`
rm -f output.txt

echo Test starting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; filterScan
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in {1..10}; &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; rm -rf /tmp/*; bin/start-hbase.sh; sleep 60; bin/hbase org.apache.hadoop.hbase.PerformanceEvaluation --rows=100000 filterScan 1; bin/stop-hbase.sh; done &amp;amp;&amp;gt;&amp;gt; output.txt

echo Test starting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; randomRead
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i in {1..10}; &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; rm -rf /tmp/*; bin/start-hbase.sh; sleep 60; bin/hbase org.apache.hadoop.hbase.PerformanceEvaluation randomRead 1; bin/stop-hbase.sh; done &amp;amp;&amp;gt;&amp;gt; output.txt

# And so on...

echo Done with tests &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; `pwd`
cd ..
done
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;m running that on a dedicated laptop where there is absolutly nothing else running. X environment is down, cups, exim, etc. all down too.&lt;/p&gt;</comment>
                            <comment id="13580387" author="yuzhihong@gmail.com" created="Mon, 18 Feb 2013 03:43:32 +0000"  >&lt;p&gt;How about making schemaMetrics dynamically configurable ?&lt;br/&gt;
When people want to investigate issues with their cluster, they can enable it without restarting region server.&lt;/p&gt;</comment>
                            <comment id="13580410" author="lhofhansl" created="Mon, 18 Feb 2013 04:44:32 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmspaggi&quot; class=&quot;user-hover&quot; rel=&quot;jmspaggi&quot;&gt;Jean-Marc Spaggiari&lt;/a&gt; &lt;tt&gt;PerformanceEvaluation --rows=100000 filterScan 1&lt;/tt&gt; run the filterScan test 100000, not as you might expect tests with 100000 rows.&lt;/p&gt;

&lt;p&gt;When I seed the table with 100000 rows and then run  &lt;tt&gt;PerformanceEvaluation --rows=20 filterScan 1&lt;/tt&gt; it takes ~4100ms in 0.94.0 and ~2900ms in 0.94.5.&lt;/p&gt;
</comment>
                            <comment id="13580421" author="lhofhansl" created="Mon, 18 Feb 2013 05:14:37 +0000"  >&lt;p&gt;Looking at the other tests in PerformanceEvaluation I don&apos;t get what it is actually useful for. The RandomReadTest send single Gets to the server(s) so it is mostly the network RTT. Similarly scanner cache is set to 30, which also means that for the scan tests we&apos;re mostly measuring the network.&lt;/p&gt;

&lt;p&gt;OK... I am less worried now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=yuzhihong%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;yuzhihong@gmail.com&quot;&gt;Ted Yu&lt;/a&gt; That might be a good idea. In the end I am not sure it is worth it, though. For most folks these metrics will (IMHO) more important than a 2.5% performance gain (and it&apos;s only 2.5% if all rows are filtered out at the server, much less percentage-wise if we actually returned data to the client).&lt;br/&gt;
That said, we should try to make collection of these metrics better (lazy or approximate as Andy also suggests).&lt;/p&gt;</comment>
                            <comment id="13580582" author="jmspaggi" created="Mon, 18 Feb 2013 12:38:48 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; Lars, I&apos;m running in standalone mode for those tests, so I don&apos;t think the network is really impacting the restuls. Also, HBase is stopped between each iteration, so cache is not really helping one iteration versus another one. And last, I&apos;m deleting zll ZooKeeper and HBase data between each iteration too. I have attached an updated report with more results. I&apos;m currently running each test 10 times and taking the 80th percentil, but I can increase that and run each test 20 or 50 times if that helps. I&apos;m now running randomSeekScan. Results will come over the day.&lt;/p&gt;</comment>
                            <comment id="13580702" author="lhofhansl" created="Mon, 18 Feb 2013 16:35:30 +0000"  >&lt;p&gt;JM, what I am saying is that&lt;br/&gt;
&lt;tt&gt;bin/hbase org.apache.hadoop.hbase.PerformanceEvaluation --rows=100000 filterScan 1&lt;/tt&gt;&lt;br/&gt;
opens 100000 scanners and calls next until there are no more rows. That would &quot;never&quot; finish unless your each scan returns almost no data. You are not testing scan performance with that, but RPC/Network performance (if you&apos;re testing locally you&apos;re testing context switch performance through the lo interface).&lt;/p&gt;

&lt;p&gt;Do you seed the table with by calling SequentialWriteTest before running each read test?&lt;br/&gt;
(I find that I have to do that, and otherwise there is just an empty test table)&lt;/p&gt;

&lt;p&gt;The performance improvement after 0.94.0 that I measure this way is in line with other tests I did before.&lt;/p&gt;</comment>
                            <comment id="13580710" author="jmspaggi" created="Mon, 18 Feb 2013 16:53:32 +0000"  >&lt;p&gt;Hi Lars,&lt;/p&gt;

&lt;p&gt;I see your point! I looked at the table while the test was running and it&apos;s empty. I was relying on the PerformanceEvaluation class to create the data it needs for its tests... Which is not the case. Now --rows=100 is running way slower, more realistic. Thanks for correting me. I will update my script to make sure SequentialWriteTest is called before all read/scan tests...&lt;/p&gt;</comment>
                            <comment id="13580721" author="lhofhansl" created="Mon, 18 Feb 2013 17:23:14 +0000"  >&lt;p&gt;I think PE needs some TLC.&lt;/p&gt;

&lt;p&gt;In it&apos;s current form it is not that useful (to say it bluntly), and it is 100% not obvious how to use it (I had to look at the source code to figure out what the filterScan test is supposed to do).&lt;/p&gt;

&lt;p&gt;At the very least we should add to the help text that one should seed the table first with a SequentialWriteTest picking the right of rows. The HBase wiki seems to imply that SequentialWriteTest is automatically run unless we run it in M/R mode, but it looks like that is not true.&lt;/p&gt;

&lt;p&gt;The help text does say to run FilterScanTest with --rows=20, not entirely sure why.&lt;/p&gt;</comment>
                            <comment id="13580726" author="apurtell" created="Mon, 18 Feb 2013 17:30:14 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think PE needs some TLC.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve been using TestHFilePerformance for HFile microbenchmarking. It&apos;s passable but could use some TLC too. For minicluster &quot;full system tests&quot;, variations on extensions to TestMiniClusterLoadXXX. &lt;/p&gt;</comment>
                            <comment id="13580727" author="jmspaggi" created="Mon, 18 Feb 2013 17:34:29 +0000"  >&lt;p&gt;Regarding --rows=20 it&apos;s because default value is 10240x1024... Which will take forever. 20 is a bit small. I&apos;m using 100 now and test is running about 9 minutes. Which is correct. I agree that PE should be updated to call SequentialWriteTest first when required, or at least this should be specified in the documentation.&lt;/p&gt;

&lt;p&gt;I never looked at TestHFilePerformance... But I will &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13580743" author="mcorgan" created="Mon, 18 Feb 2013 18:05:24 +0000"  >&lt;p&gt;I have a decent start on a benchmark that tests many different combinations of inputs like blockSize, encoding, compression, keyLength, commonPrefixLength, valueLength.  You can either generate fake test data or provide an existing HFile.  It tests scans and seeks and outputs a summary of performance and memory/disk usage at the end so you can find the best settings for your use case.&lt;/p&gt;

&lt;p&gt;It&apos;s lurking somewhere in my git repo.  I was planning to dig it up at the meetup tomorrow and get it working again.  Maybe we can combine all these benchmarks somehow.&lt;/p&gt;</comment>
                            <comment id="13586713" author="lhofhansl" created="Tue, 26 Feb 2013 04:01:26 +0000"  >&lt;p&gt;Any suggestions for a fix?&lt;br/&gt;
Moving this to 0.94.7 for now.&lt;/p&gt;</comment>
                            <comment id="13591481" author="jmspaggi" created="Sat, 2 Mar 2013 19:13:59 +0000"  >&lt;p&gt;Matteo, can you retry?&lt;/p&gt;

&lt;p&gt;Attached is the logs logs for the HFilePerformanceEvaluation. I have not found any noticable degradation of the performances between any of the releases. &lt;/p&gt;

&lt;p&gt;I have not done the charts and only looked at the values (greped by test name), but it seems to be pretty stable. Anything I missed?&lt;/p&gt;</comment>
                            <comment id="13591485" author="mbertozzi" created="Sat, 2 Mar 2013 19:23:06 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jmspaggi&quot; class=&quot;user-hover&quot; rel=&quot;jmspaggi&quot;&gt;Jean-Marc Spaggiari&lt;/a&gt; Take a look at UniformRandomSmallScan you start with 4000ms and you keep increasing each release to 4330ms.&lt;/p&gt;</comment>
                            <comment id="13618229" author="lhofhansl" created="Sun, 31 Mar 2013 03:59:59 +0000"  >&lt;p&gt;Since there is no patch, I am removing this from 0.94.&lt;br/&gt;
Feel free to re-add.&lt;/p&gt;</comment>
                            <comment id="13618311" author="jmspaggi" created="Sun, 31 Mar 2013 12:05:17 +0000"  >&lt;p&gt;I still have on my ToDo to build more granular tests to figure where the performances are impacted between 0.92 and 0.94, but I&apos;m lacking some free time to complete that &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Based on Matteo&apos;s tests, it seems to be metrics related. Were the metrics there in 0.92?&lt;/p&gt;

&lt;p&gt;BTW, I&apos;m fine to remove this JIRA from 0.94 until we have a plan for it.&lt;/p&gt;</comment>
                            <comment id="14481663" author="stack" created="Mon, 6 Apr 2015 19:22:10 +0000"  >&lt;p&gt;Stale&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12569743" name="FilteredScan.png" size="25044" author="jmspaggi" created="Mon, 18 Feb 2013 01:08:18 +0000"/>
                            <attachment id="12571751" name="HFilePerformanceEvaluation.txt" size="57818" author="jmspaggi" created="Sat, 2 Mar 2013 19:13:59 +0000"/>
                            <attachment id="12569715" name="hfileperf-graphs.png" size="59030" author="mbertozzi" created="Sun, 17 Feb 2013 10:37:41 +0000"/>
                            <attachment id="12569806" name="performances.pdf" size="22484" author="jmspaggi" created="Mon, 18 Feb 2013 12:35:23 +0000"/>
                            <attachment id="12569748" name="performances.pdf" size="15985" author="jmspaggi" created="Mon, 18 Feb 2013 02:38:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 17 Feb 2013 12:48:45 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>313241</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 36 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1i20n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>313586</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>