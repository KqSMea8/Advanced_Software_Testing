<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:58:58 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-8836/HBASE-8836.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-8836] Separate reader and writer thread pool in RegionServer, so that write throughput will not be impacted when the read load is very high</title>
                <link>https://issues.apache.org/jira/browse/HBASE-8836</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;We found that when the read load on a specific RS is high, the write throughput also get impacted dramatically, and even cause write data loss sometimes. We want to prioritize the write by putting them in a separate queue from the read request, so that slower read will not make fast write wait nu-necessarily long.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12655426">HBASE-8836</key>
            <summary>Separate reader and writer thread pool in RegionServer, so that write throughput will not be impacted when the read load is very high</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="3" iconUrl="https://issues.apache.org/jira/images/icons/statuses/inprogress.png" description="This issue is being actively worked on at the moment by the assignee.">In Progress</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="tychang">Tianying Chang</assignee>
                                    <reporter username="tychang">Tianying Chang</reporter>
                        <labels>
                    </labels>
                <created>Fri, 28 Jun 2013 21:26:34 +0000</created>
                <updated>Wed, 27 Nov 2013 23:18:20 +0000</updated>
                                            <version>0.94.8</version>
                                                    <component>Performance</component>
                    <component>regionserver</component>
                        <due>Fri, 17 Jul 2015 00:00:00 +0000</due>
                            <votes>0</votes>
                                    <watches>19</watches>
                                                                <comments>
                            <comment id="13695819" author="tychang" created="Fri, 28 Jun 2013 21:27:49 +0000"  >&lt;p&gt;I will upload my patch later today when I have better internet connection. &lt;/p&gt;</comment>
                            <comment id="13695924" author="otis" created="Fri, 28 Jun 2013 23:38:24 +0000"  >&lt;p&gt;Have you run any test and have any numbers to show how much impact this has?&lt;br/&gt;
I&apos;m wondering how well this works if the underlying server/IO is actually maxed out.  In such situation, can separating writes from reads help?&lt;/p&gt;</comment>
                            <comment id="13696059" author="tychang" created="Sat, 29 Jun 2013 06:09:15 +0000"  >&lt;p&gt;Yes, I have run PerformancEvaluation on real cluster. Without my fix, the write throughput drops a lot when the read request load is high. With my fix, the write throughput stay in a very good level. I will also upload the performance number file. &lt;/p&gt;</comment>
                            <comment id="13696064" author="tychang" created="Sat, 29 Jun 2013 06:28:58 +0000"  >&lt;p&gt;This is the first draft, with some unnecessary LOG.info and so on still there. I want to upload this first version to get some feedback before I make refinement of the code. I also have Performance Evaluation number from running on a real cluster, which meet my expectation for improving the write throughput. I will upload the data later also. &lt;/p&gt;</comment>
                            <comment id="13696109" author="lhofhansl" created="Sat, 29 Jun 2013 12:28:17 +0000"  >&lt;p&gt;Interesting. Could you post some numbers &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tychang&quot; class=&quot;user-hover&quot; rel=&quot;tychang&quot;&gt;Tianying Chang&lt;/a&gt;?&lt;br/&gt;
Skimmed the patch. A few high level comments:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Is there a better way to detect write actions?&lt;/li&gt;
	&lt;li&gt;Do you really want to tease apart a &quot;multi&quot; action and enqueue the parts individually?&lt;/li&gt;
	&lt;li&gt;We can do this with less code duplication I think.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13696232" author="yuzhihong@gmail.com" created="Sun, 30 Jun 2013 01:26:51 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+                &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (action &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; Delete || action &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; Put || action &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; Increment
+                    || action &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; Append || action &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; RowMutations) {
...
+            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (methodName.contains(&lt;span class=&quot;code-quote&quot;&gt;&quot;put&quot;&lt;/span&gt;) || methodName.contains(&lt;span class=&quot;code-quote&quot;&gt;&quot;mutate&quot;&lt;/span&gt;) || methodName.contains(&lt;span class=&quot;code-quote&quot;&gt;&quot;increment&quot;&lt;/span&gt;)
+                || methodName.contains(&lt;span class=&quot;code-quote&quot;&gt;&quot;delete&quot;&lt;/span&gt;))
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Is append missing from the second if statement above ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; getServer(instance.getClass(), instance, ifaces, bindAddress, port, numHandlers, metaHandlerCount, verbose, conf, highPriorityLevel);
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; getServer(instance.getClass(), instance, ifaces, bindAddress, port, numHandlers, metaHandlerCount, readerHandlerCount, verbose, conf, highPriorityLevel);
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Wrap long line.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.readCallQueue  = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; LinkedBlockingQueue&amp;lt;Call&amp;gt;(maxQueueLength);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Should reader queue have its own max length ?&lt;/p&gt;

&lt;p&gt;SecureServer extends HBaseServer. As Lars said, code duplication should be minimized.&lt;/p&gt;</comment>
                            <comment id="13699253" author="tychang" created="Wed, 3 Jul 2013 17:53:49 +0000"  >
&lt;p&gt;  &amp;gt;&amp;gt;  Is there a better way to detect write actions?&lt;br/&gt;
Lars, do you have some suggestion? I also feel this is a little too clumsy. This was the most straightforward way I can think of when I start coding for my POC. Anyone can suggest some other way? I would love to try that.  &lt;/p&gt;

&lt;p&gt;  &amp;gt;&amp;gt;  Do you really want to tease apart a &quot;multi&quot; action and enqueue the parts individually?&lt;br/&gt;
Good point. When I run the test, I found that even single &quot;Put&quot;(and some other method) was actually wrapped into the &quot;multi&quot;, instead of the Put method directly, so I have to parse through the argument of the &quot;multi&quot; method so that I can make it functionally correct. But this is not a very clean way. I really appreciate it if someone can give me some hint of a better way to detect this. &lt;/p&gt;

&lt;p&gt;  &amp;gt;  We can do this with less code duplication I think.&lt;br/&gt;
Sure. I was working on the non-secure version first, and test on my dev VM cluster which is not secure version. Later on, when I move to test on our testing cluster (50+ nodes) which is a secure enabled, I found my change is not being executed, and realized that it calls the secure path of RPC. To quickly unblock myself and get a perf result on the testing cluster, I just copy/paste my change into the SecureServer.java. I will remove the duplicate later.  &lt;/p&gt;</comment>
                            <comment id="13699400" author="tychang" created="Wed, 3 Jul 2013 20:29:54 +0000"  >&lt;p&gt;Attached the write throughput number for original case and after fix case. It is measured against with and without read traffic so that we can see how the write throughput is impacted by the heavy read request. &lt;/p&gt;</comment>
                            <comment id="13699516" author="lhofhansl" created="Wed, 3 Jul 2013 22:12:58 +0000"  >&lt;p&gt;How was the read performance impacted during your test and after the fix?&lt;/p&gt;</comment>
                            <comment id="13704378" author="lhofhansl" created="Wed, 10 Jul 2013 09:50:41 +0000"  >&lt;p&gt;I am a bit skeptical about adding this to 0.94.&lt;br/&gt;
You need this in 0.94 &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tychang&quot; class=&quot;user-hover&quot; rel=&quot;tychang&quot;&gt;Tianying Chang&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="13706101" author="tychang" created="Thu, 11 Jul 2013 18:44:26 +0000"  >&lt;p&gt;I did a little read performance at the beginning, seems not much impact. I am going to collect more read performance data and post here. &lt;/p&gt;</comment>
                            <comment id="13706102" author="tychang" created="Thu, 11 Jul 2013 18:46:54 +0000"  >&lt;p&gt;ideally in 94 since our cluster is running on 94. But if the risk is too high, we can discuss more. &lt;/p&gt;</comment>
                            <comment id="13710703" author="lhofhansl" created="Wed, 17 Jul 2013 05:07:14 +0000"  >&lt;p&gt;Moving to 0.94.11 for now.&lt;/p&gt;</comment>
                            <comment id="13727362" author="lhofhansl" created="Fri, 2 Aug 2013 05:41:36 +0000"  >&lt;p&gt;Moving on to 0.94.12. We need to maintain the batch nature &lt;b&gt;especially&lt;/b&gt; for update (so that they go in batch through doMiniBatchMutation).&lt;/p&gt;</comment>
                            <comment id="13728629" author="stack" created="Sat, 3 Aug 2013 20:23:05 +0000"  >&lt;p&gt;Moving new feature out of 0.95/0.96&lt;/p&gt;</comment>
                            <comment id="13733797" author="devaraj" created="Thu, 8 Aug 2013 18:16:28 +0000"  >&lt;p&gt;Overall, seems like a good improvement. Some high level comments.&lt;br/&gt;
1. We need a patch for trunk before we can commit this in 0.94.x&lt;br/&gt;
2. Can we look at annotations (similar to QoS annotation) for marking which methods should be treated as READ vs WRITE. That way we can keep the RPC code intact and have to only play with annotations on methods in the future.&lt;br/&gt;
3. Other comments are around code duplication that others have talked about already (in trunk it&apos;s better since the SecureRPCEngine doesn&apos;t exist there), and maybe we should keep the original getServer method, and it should do what it does currently (without the patch).&lt;/p&gt;</comment>
                            <comment id="13733970" author="tychang" created="Thu, 8 Aug 2013 20:56:51 +0000"  >&lt;p&gt;Devaraj, Thanks for the #2 suggestion. I will explore the annotation option. One special case is the method of multi() which wraps around other read/write method into its argument. So I have to analyze the argument to tell if it is read or write. not sure if the annotation have some way to address this.&lt;/p&gt;</comment>
                            <comment id="13758532" author="lhofhansl" created="Wed, 4 Sep 2013 23:53:18 +0000"  >&lt;p&gt;Let me remove this from the 0.94 schedule for now.&lt;/p&gt;</comment>
                            <comment id="13758918" author="nkeywal" created="Thu, 5 Sep 2013 09:12:29 +0000"  >&lt;p&gt;It&apos;s very interesting. Could you give some details on the issue itself?&lt;br/&gt;
You say: writes are getting slow because they have to wait for slow get. Could it be that we cannot have a lot of threads writing because there is a single WAL, so we should have 2 threads for writing, and the other for reading? How does it work if the put don&apos;t write into the WAL for example? &lt;br/&gt;
I mean, if the operations have an immutable fixed time, whatever the order the final throughput (time to execute all the operations) won&apos;t change. So I would like to understand where you make the money here &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;, and if it&apos;s a general improvement or specific to a load (you seem to say it&apos;s for cheap puts, expensive gets)&lt;/p&gt;

&lt;p&gt;+1 to what Lars said as well on batch mutation and patch globally (it needs a little bit of rework &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).&lt;br/&gt;
Note that the implementation should be much easier to do in trunk because of the pluggable scheduler.&lt;/p&gt;

&lt;p&gt;As I said above, I think it&apos;s quite interesting, there is likely something to improve here.&lt;/p&gt;</comment>
                            <comment id="13772444" author="tychang" created="Thu, 19 Sep 2013 23:12:29 +0000"  >&lt;p&gt;Hi, Nicolas, my patch is trying to improve the write latency/throughput when there are heavy read. My current understaning is read takes much longer than write. (Note, I don&apos;t know the exact latency difference, but my understanding is that write should be a lot faster than read. If this assumption is wrong, then this patch has not value) My goal is the write latency/throughput should be almost same when either there are 10,000 write-requests/sec or 5000 read-request + 5000 write-request. The short job should  not wait behind a long job if possible. &lt;/p&gt;

&lt;p&gt;When there are heavy read load. E.g. more than 50% of all requests in the queue are for read, then the write latency/throughput could be badly impact because a thread who is handling the read request won&apos;t return back as fast compared with if the thread is handling a write request. Separating the read and write into two queues can make sure short job does not wait behind long job. &lt;/p&gt;

&lt;p&gt;I will test the performance as WAL turned off as you suggested. I think that could give us some more insight. &lt;/p&gt;</comment>
                            <comment id="13772475" author="tychang" created="Thu, 19 Sep 2013 23:37:48 +0000"  >&lt;p&gt;update the patch with QoS Anotation. &lt;/p&gt;</comment>
                            <comment id="13780495" author="devaraj" created="Fri, 27 Sep 2013 22:11:32 +0000"  >&lt;p&gt;Will take a look. Meanwhile I&apos;d suggest you look at the RPC in trunk. It has changed vastly. One more thing - should we make the handler threads a percentage out of the total handler count. For example, 10% of the total handler count handles writes.&lt;/p&gt;</comment>
                            <comment id="13806615" author="varunsharma" created="Mon, 28 Oct 2013 08:06:52 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;We suffered from the same issue. However, in our case there were too many writes compared to reads. Basically the writes starved all the handlers, the reads as such executed fast but ended up getting queued. We really cared about the reads and so hacked a change to our HBase binary to build a separate pool for Get(s) (We do Gets for our reads). That improved the read latencies vastly - p99 went down from 500ms down to &amp;lt; 100ms. We did not raise a JIRA since we thought that the change would not be accepted.&lt;/p&gt;

&lt;p&gt;This patch is very similar to what we are doing (a pool of GET Handlers with QoS annotations), so it would be great if this could be patched in.&lt;/p&gt;

&lt;p&gt;Thanks&lt;br/&gt;
Varun&lt;/p&gt;</comment>
                            <comment id="13806937" author="stack" created="Mon, 28 Oct 2013 17:09:01 +0000"  >&lt;p&gt;In trunk, there is an rpc scheduler&lt;/p&gt;</comment>
                            <comment id="13834314" author="apurtell" created="Wed, 27 Nov 2013 23:18:20 +0000"  >&lt;p&gt;Moving out of 0.98&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12656487">HBASE-8884</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12604158" name="HBase-8836-QosAnotation.patch" size="28147" author="tychang" created="Thu, 19 Sep 2013 23:37:48 +0000"/>
                            <attachment id="12590709" name="Hbase-8836-perfNumber.pdf" size="198503" author="tychang" created="Wed, 3 Jul 2013 20:28:43 +0000"/>
                            <attachment id="12590156" name="hbase-8836.patch" size="27098" author="tychang" created="Sat, 29 Jun 2013 06:28:58 +0000"/>
                            <attachment id="12605608" name="threadPool-write-NoWAL.png" size="12734" author="tychang" created="Sat, 28 Sep 2013 00:04:54 +0000"/>
                            <attachment id="12605609" name="threadPool-write-WithWAL.png" size="13503" author="tychang" created="Sat, 28 Sep 2013 00:05:09 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 28 Jun 2013 23:38:24 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>335701</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 3 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1lwmv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>336025</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>