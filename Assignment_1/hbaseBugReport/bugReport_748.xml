<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:47:09 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-748/HBASE-748.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-748] Add an efficient way to batch update many rows</title>
                <link>https://issues.apache.org/jira/browse/HBASE-748</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-747&quot; title=&quot;Add a simple way to do batch updates of many rows&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-747&quot;&gt;&lt;del&gt;HBASE-747&lt;/del&gt;&lt;/a&gt; introduced a simple way to batch update many rows. The goal of this issue is to have an enhanced version that will send many rows in a single RPC to each region server. To do this, the client code will have to figure which rows goes to which server, group them accordingly and then send them.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12400417">HBASE-748</key>
            <summary>Add an efficient way to batch update many rows</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jdcryans">Jean-Daniel Cryans</assignee>
                                    <reporter username="jdcryans">Jean-Daniel Cryans</reporter>
                        <labels>
                    </labels>
                <created>Wed, 16 Jul 2008 21:31:53 +0000</created>
                <updated>Thu, 2 May 2013 02:29:16 +0000</updated>
                            <resolved>Fri, 17 Oct 2008 22:04:49 +0000</resolved>
                                    <version>0.1.3</version>
                    <version>0.2.0</version>
                                    <fixVersion>0.19.0</fixVersion>
                                    <component>Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12620463" author="stack" created="Wed, 6 Aug 2008 22:43:52 +0000"  >&lt;p&gt;Do you think the HTable client should do the sorting and organizing of edits into batches or should that be done by the calling application?  Hypertable would seem to do the former.  Reading Hypertable user list, it looks like they have a mechanism for buffering up edits in the client.  When the client update buffer is full, it flushes the edits sending in batches with each batch going to the appropriate rangeserver.  There is also an explicit flush which you can call to send the current set of edits.&lt;/p&gt;</comment>
                            <comment id="12623159" author="apurtell" created="Sat, 16 Aug 2008 20:13:17 +0000"  >&lt;p&gt;In addition to updates, gets can be batched this way as well for performance if a client has a list of row keys available and would like to retrieve them in a group.&lt;/p&gt;

&lt;p&gt;Christian Hvitved wrote on hbase-user@&lt;/p&gt;

&lt;p&gt;&amp;gt; I was thinking of a method that given an array of keys&lt;br/&gt;
&amp;gt; could fetch the rows efficiently. For example by finding&lt;br/&gt;
&amp;gt; out which regions and regionservers the keys are located at&lt;br/&gt;
&amp;gt; using the metadata. Then concurrently a thread could be&lt;br/&gt;
&amp;gt; started for each regionserver containing the keys, and the&lt;br/&gt;
&amp;gt; regionserver could find all the rows in one method call. &lt;/p&gt;

&lt;p&gt;This could be done client side with Futures and Callables I expect.&lt;/p&gt;</comment>
                            <comment id="12629637" author="jdcryans" created="Tue, 9 Sep 2008 22:26:03 +0000"  >&lt;p&gt;If we are to batch any row operation, I think we will need to create a new class for gets. I don&apos;t think a signature like that is what we want:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; RowResult getRow(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [][] row, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [][][] columns, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;[] ts, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; RowLock[] rl) 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In fact, a class that looks like BatchUpdate would be what we need. Thinking of it, we could drop many of the ever expanding client API methods using such a class. I would also put the row lock inside that class.&lt;/p&gt;

&lt;p&gt;Finally, it would be used by the row-batching logic (which is worst to design than I thought it was at first) as a generic row operation.&lt;/p&gt;</comment>
                            <comment id="12631769" author="jdcryans" created="Wed, 17 Sep 2008 13:24:50 +0000"  >&lt;p&gt;I gave more thought to st^ack&apos;s idea of buffering the edits and I think it would be nice to implement it. This is how I see it.&lt;/p&gt;

&lt;p&gt;We keep an ArrayList of RowUpdates in HTable so that we have a cache per table. It should be of a configurable maximum size in bytes. Maybe a default of 64M? It should also be configurable when creating a HTable.&lt;/p&gt;

&lt;p&gt;The RowUpdate class should be able to give us the size of all the BatchOperation it contains. It should fairly easy to do by asking each BO their value&apos;s length.&lt;/p&gt;

&lt;p&gt;We can compute the size of the RowUpdate either at commit time or we can do it after each put. I would prefer after each put so we skip the iteration.&lt;/p&gt;

&lt;p&gt;In the case of auto-flushing, I see two ways to detect that the buffer is full. Either at commit time or in a separate thread like the Flusher currently works. The first is very easy to implement but blocks the commits. The second is harder to implement but doesn&apos;t block the commits. I think that for 0.19.0 we could implement the first one. &lt;/p&gt;

&lt;p&gt;The other case is that auto-flushing is disabled and then it is the user&apos;s responsibility to call something like HTable.flushEdits().&lt;/p&gt;

&lt;p&gt;Any comments?&lt;/p&gt;</comment>
                            <comment id="12632727" author="jdcryans" created="Fri, 19 Sep 2008 15:30:43 +0000"  >&lt;p&gt;Here is how I plan to implement the &quot;many rows to many regions&quot; logic.&lt;/p&gt;

&lt;p&gt;In HRS, add a new version of batchUpdate that takes an array of RowUpdate (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-880&quot; title=&quot;Improve the current client API by creating new container classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-880&quot;&gt;&lt;del&gt;HBASE-880&lt;/del&gt;&lt;/a&gt;). For this version, it will only iterate over the array and call the current batchUpdate. A bit of logic will be added so that if an WRE gets thrown, we return what was the index of the last inserted row.&lt;/p&gt;

&lt;p&gt;In HTable, when the flushing is called, it calls a method that takes an ArrayList of unsorted RowOperation (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-880&quot; title=&quot;Improve the current client API by creating new container classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-880&quot;&gt;&lt;del&gt;HBASE-880&lt;/del&gt;&lt;/a&gt;). Following pseudo code does the rest:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
sort the row operations (called ops)
create a temporary empty list of ops
retrieve the cached region of the first op and mark it as &lt;span class=&quot;code-quote&quot;&gt;&quot;current&quot;&lt;/span&gt;
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; i = 0; i &amp;lt; number of ops; i++
  current op is at index i of the array of ops
  add the op to the temporary list
  retrieve the cached region of the following op (&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; any)
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; current region not equals retrieved region or current op is the last one
    &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; the operation on region server of current region
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; an WRE is thrown
      retrieve the real region of the op at the index in WRE (becomes the retrieved region)
      reset i to the index of the returned row - 1 in WRE
    the retrieved region is now the current region
    clear the temporary list
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The big trade-off in this algo is that I try to limit the number of queries to .META. by using the cache at the expense of moving potentially big chunks of rows back an forth if the cache is stale. This impact could be diminished if we fetched more .META. rows at each locateRegionInMeta using &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-887&quot; title=&quot;Fix a hotspot in scanners&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-887&quot;&gt;&lt;del&gt;HBASE-887&lt;/del&gt;&lt;/a&gt; instead of using getClosestRowBefore (just a thought). That&apos;s what Bigtable does.&lt;/p&gt;

&lt;p&gt;Any comments?&lt;/p&gt;</comment>
                            <comment id="12632826" author="jdcryans" created="Fri, 19 Sep 2008 21:19:43 +0000"  >&lt;p&gt;Some tests a did with a dirty patch:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
auto-flush  Finished sequentialWrite in 304015ms at offset 0 &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; 1048576 rows
1MB  buffer Finished sequentialWrite in 152825ms at offset 0 &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; 1048576 rows
16MB buffer Finished sequentialWrite in 151969ms at offset 0 &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; 1048576 rows
32MB buffer Finished sequentialWrite in 171990ms at offset 0 &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; 1048576 rows
64MB buffer Finished sequentialWrite in 209194ms at offset 0 &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; 1048576 rows
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12633891" author="jdcryans" created="Tue, 23 Sep 2008 20:56:49 +0000"  >&lt;p&gt;Current status of this issue:&lt;/p&gt;

&lt;p&gt;1- The way retries are handled client-side is ugly, cannot be reused for other operations (so &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-880&quot; title=&quot;Improve the current client API by creating new container classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-880&quot;&gt;&lt;del&gt;HBASE-880&lt;/del&gt;&lt;/a&gt; wouldn&apos;t fit in).&lt;br/&gt;
2- There is duplicated code in the two HTable.commit and HRS.batchUpdate.&lt;br/&gt;
3- WRE and NSRE maybe should share a common super class.&lt;br/&gt;
4- If any exception is thrown server-side, like values are too long or columns in the wrong format, the state of the whole transaction will be unknown to the user.&lt;/p&gt;

&lt;p&gt;But it does give a 2x boost when autoFlush is disabled.&lt;/p&gt;</comment>
                            <comment id="12634305" author="jimk" created="Wed, 24 Sep 2008 21:28:48 +0000"  >&lt;p&gt;Review of hbase-748-v1.patch&lt;/p&gt;

&lt;p&gt;Shouldn&apos;t HRS.batchUpdate(final byte[] regionName, BatchUpdate[] b) return &quot;i&quot; if it falls out of the try/catch block?&lt;br/&gt;
Currently it returns -1 which indicates (as I understand it) that the request was unsuccessful.&lt;/p&gt;

&lt;p&gt;I do not understand how these changes implement retries since getRegionServerForManyRows does not implement them nor does it call getRegionServerWithRetries which does.&lt;/p&gt;
</comment>
                            <comment id="12634334" author="jdcryans" created="Wed, 24 Sep 2008 22:59:34 +0000"  >&lt;blockquote&gt;&lt;p&gt;Shouldn&apos;t HRS.batchUpdate(final byte[] regionName, BatchUpdate[] b) return &quot;i&quot; if it falls out of the try/catch block?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would return the size of the array which we can compare back in the client. Good idea.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I do not understand how these changes implement retries since getRegionServerForManyRows does not implement them nor does it call getRegionServerWithRetries which does.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Like I said in my sept 23 comment, this part is ugly and needs more work. It implements retries in the way that it retries rows that didn&apos;t get processed. For example :&lt;/p&gt;

&lt;p&gt;HTable commits 23 rows to HRS against a region. Let&apos;s say that the the first one in the 23 is the 1000th in the whole batch to commit.&lt;br/&gt;
The region gets split after 10 rows.&lt;br/&gt;
At row 11, HRS will handle a NSRE.&lt;br/&gt;
HRS returns index 10&lt;br/&gt;
Back in client, the current index in the batch was at 23.&lt;br/&gt;
It receives 10 from HRS so it backs the index to the row that failed (index = 1010).&lt;br/&gt;
Client refreshes cache for that row.&lt;br/&gt;
Process resumes at that index eg. rows from 1010 to 1022 will be retried using a fresh location.&lt;/p&gt;

&lt;p&gt;This actually works really well but it&apos;s not atomic if a row fails, for example, if a value was too long.&lt;/p&gt;</comment>
                            <comment id="12634344" author="stack" created="Wed, 24 Sep 2008 23:30:29 +0000"  >&lt;p&gt;On the design outlined in &apos;Jean-Daniel Cryans - 17/Sep/08 06:24 AM&apos;, +1.&lt;/p&gt;

&lt;p&gt;On the outline in &apos;Jean-Daniel Cryans - 19/Sep/08 08:30 AM&apos;, would suggest that the index be thrown for any exception, not just WRE (though, yes WRE is probably only Exception that would make use of it).  On the sort of RowOperation, does RO implement Comparator?  Should it?  Otherwise +1 on pseudo-code.&lt;/p&gt;

&lt;p&gt;Regards &apos;Jean-Daniel Cryans - 19/Sep/08 02:19 PM&apos;, whats the data saying?  That flushing at 1MB is better than flushing at 64MB?  Whats auto-flush set to or is this the number when auto-flushing is disabled?&lt;/p&gt;


</comment>
                            <comment id="12634346" author="jdcryans" created="Wed, 24 Sep 2008 23:40:56 +0000"  >&lt;p&gt;Regards WRE, in the patch it is thrown for NSRE and WRE. RowOperation is from 880, and it does.&lt;/p&gt;

&lt;p&gt;Yes, flushing at 1MB is better than 64MB on my machine. Auto-flush is boolean, false means buffering if the commits.&lt;/p&gt;</comment>
                            <comment id="12634348" author="stack" created="Thu, 25 Sep 2008 00:03:30 +0000"  >&lt;p&gt;On the patch:&lt;/p&gt;

&lt;p&gt;I see you&apos;ve made BatchUpdate comparable already.  Scratch my suggestion above.  I like the fact that you can ask a BatchUpdate its size.  Should size include row and column sizes too to cover the case where they are really large?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The region gets split after 10 rows... (From &apos;Jean-Daniel Cryans - 24/Sep/08 03:59 PM - edited&apos;)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d been thinking that doing batch updates, we&apos;d take out the splitsAndClosesLock so splits wouldn&apos;t happen.  Would this be easier if you moved the array of batch update handlings down into HRegion rather than run it in HRS?&lt;/p&gt;

&lt;p&gt;Minor nitpick: Put declaration and this line &amp;#8211; &apos;+    this.writeBuffer = new ArrayList&amp;lt;BatchUpdate&amp;gt;();&apos; &amp;#8211; together and then add final keywork (not important... but if you are revising anyways).  Similarily for this line &amp;#8211; +    this.currentWriteBufferSize = 0;... why not declare and do initial assign in the one line rather than have it split with assignment down in constructor?&lt;/p&gt;

&lt;p&gt;More nitpicks:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (bu.getRow() == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-quote&quot;&gt;&quot;update has &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; row&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In hadoop coding, folks supply the parens as in:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (bu.getRow() == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span class=&quot;code-quote&quot;&gt;&quot;update has &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; row&quot;&lt;/span&gt;);
+     }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Just FYI.&lt;/p&gt;

&lt;p&gt;Here&apos;s a style comment:  Rather than do this in fflushCommits:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!writeBuffer.isEmpty()) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... instead do&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (writeBuffer.isEmpty()) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
+   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then you don&apos;t have whole method body indented.  Gives you more room on a line.  Deals with the isEmpty immediately rather than let it last the length of the method body.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;1- The way retries are handled client-side is ugly, cannot be reused for other operations (so &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-880&quot; title=&quot;Improve the current client API by creating new container classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-880&quot;&gt;&lt;del&gt;HBASE-880&lt;/del&gt;&lt;/a&gt; wouldn&apos;t fit in).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t follow the above J-D?  Are you saying that we can&apos;t do batching with 880?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;3- WRE and NSRE maybe should share a common super class.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thats fine by me.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;4- If any exception is thrown server-side, like values are too long or columns in the wrong format, the state of the whole transaction will be unknown to the user.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Could we iterate the BatchUpdate array first before committing to check its wholesomeness so if problem, user knows that nothing was committed?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...but it&apos;s not atomic if a row fails, for example, if a value was too long.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What you mean by the above?  That if we have none-WRE or none-NSRE-like exception, then batch is dropped?&lt;/p&gt;

&lt;p&gt;Good stuff J-D.&lt;/p&gt;







</comment>
                            <comment id="12634501" author="jdcryans" created="Thu, 25 Sep 2008 14:48:55 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I see you&apos;ve made BatchUpdate comparable already. Scratch my suggestion above. I like the fact that you can ask a BatchUpdate its size. Should size include row and column sizes too to cover the case where they are really large?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&apos;d been thinking that doing batch updates, we&apos;d take out the splitsAndClosesLock so splits wouldn&apos;t happen. Would this be easier if you moved the array of batch update handlings down into HRegion rather than run it in HRS?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ve been thinking about this too, glad to know you see it like that. Yeah, I should change that.&lt;/p&gt;

&lt;p&gt;Regards the parens nitpick, sorry it was a mindless copy/paste on my part (look at the trunk version of commit with a single BU).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I don&apos;t follow the above J-D? Are you saying that we can&apos;t do batching with 880?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It is not in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-880&quot; title=&quot;Improve the current client API by creating new container classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-880&quot;&gt;&lt;del&gt;HBASE-880&lt;/del&gt;&lt;/a&gt; scope to add batching, it&apos;s only to provide a more modifiable API to later add batching (this jira). Current patch needs refactoring to abstract the code in flush so that we can give it a get/delete/commit/etc.&lt;/p&gt;

&lt;p&gt;Your two last comments are related. Currently we do most of the validation server-side, moving this in the client uncovers the problem that HTable doesn&apos;t know anything about the table it handles. So this is a design issue, where should we do all validations? My proposition: do it client-side, maybe in a helper class. Then the code in the server-side will be cleaner and we won&apos;t do RPCs for nothing and multiple validations in the case of retries. This should be in another jira.&lt;/p&gt;</comment>
                            <comment id="12634658" author="jimk" created="Thu, 25 Sep 2008 22:16:14 +0000"  >&lt;p&gt;Jean-Daniel Cryans - 24/Sep/08 03:59 PM&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HTable commits 23 rows to HRS against a region. Let&apos;s say that the the first one in the 23 is the 1000th in the whole batch to commit.&lt;br/&gt;
The region gets split after 10 rows.&lt;br/&gt;
At row 11, HRS will handle a NSRE.&lt;br/&gt;
HRS returns index 10&lt;br/&gt;
Back in client, the current index in the batch was at 23.&lt;br/&gt;
It receives 10 from HRS so it backs the index to the row that failed (index = 1010).&lt;br/&gt;
Client refreshes cache for that row.&lt;br/&gt;
Process resumes at that index eg. rows from 1010 to 1022 will be retried using a fresh location.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ok, now I get it. I missed that part. Sorry for being dense.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This actually works really well but it&apos;s not atomic if a row fails, for example, if a value was too long.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, aside from the transactional region server, I would not expect it to be atomic across rows.&lt;br/&gt;
Were you thinking that there may be multiple BatchUpdates for the same row? Not the best way for a client to behave in my opinion.&lt;/p&gt;

&lt;p&gt;A couple of comments though.&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HTable.flushCommits() seems to ignore the row lock that can be passed to HTable.commit(BatchUpdate, RowLock)&lt;/li&gt;
	&lt;li&gt;Should the RowLock be associated with the BatchUpdate rather than being supplied on commit? That would allow us to remove one commit overload, and allow the client to associate the row lock with multiple BatchUpdates for the same row.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;+1 on moving checks into commit (or flushCommits). We still fail early, although not as early as we would if the checks were done in BatchUpdate. But as Stack points out, having BatchUpdate require a HTable or HTD would be ugly. At least the request won&apos;t be partially processed before failing.&lt;/p&gt;

&lt;p&gt;Last comment on patch. Remove code that is commented out in HTable.commit(BatchUpdate, RowLock)&lt;/p&gt;</comment>
                            <comment id="12634884" author="jdcryans" created="Fri, 26 Sep 2008 14:45:58 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Should the RowLock be associated with the BatchUpdate rather than being supplied on commit? That would allow us to remove one commit overload, and allow the client to associate the row lock with multiple BatchUpdates for the same row.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is in the scope of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-880&quot; title=&quot;Improve the current client API by creating new container classes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-880&quot;&gt;&lt;del&gt;HBASE-880&lt;/del&gt;&lt;/a&gt;. Glad to see that I&apos;m not the only one who saw that problem.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;+1 on moving checks into commit (or flushCommits).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would be in commit since in flush it&apos;s too late IMO.&lt;/p&gt;</comment>
                            <comment id="12635816" author="jdcryans" created="Tue, 30 Sep 2008 19:17:37 +0000"  >&lt;p&gt;Latest version of this patch, if someone wants to try it with some different buffering values, I would be glad. For the moment 12MB seems like a nice one.&lt;/p&gt;</comment>
                            <comment id="12636112" author="jimk" created="Wed, 1 Oct 2008 18:12:25 +0000"  >&lt;p&gt;Reviewed patch:&lt;/p&gt;

&lt;p&gt;No javadoc for HConnection.getRegionServerForManyRows&lt;/p&gt;

&lt;p&gt;Javadoc for HTable.getWriteBuffer, HRegionInterface.batchUpdate(final byte[] regionName, final BatchUpdate[] b), HRegion.batchUpdate(BatchUpdate[]), BatchUpdate.getSize are incomplete&lt;/p&gt;

&lt;p&gt;Do HTable.flushCommits and HTable$ClientScanner.initialize need to be public? Can&apos;t they just be protected?&lt;/p&gt;</comment>
                            <comment id="12636119" author="jdcryans" created="Wed, 1 Oct 2008 18:25:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;No javadoc for HConnection.getRegionServerForManyRows&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;On that particular part I still need to do some work so I didn&apos;t freeze it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do HTable.flushCommits and HTable$ClientScanner.initialize need to be public? Can&apos;t they just be protected?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We need to be able to flushCommits if auto-commit is off. Regards HTable$ClientScanner.initialize, well it&apos;s not this in my patch but from what I see TransactionalTable needs it so it cannot be protected nor private.&lt;/p&gt;</comment>
                            <comment id="12636130" author="jimk" created="Wed, 1 Oct 2008 19:24:23 +0000"  >&lt;p&gt;Ok, if flushCommits and initialize need to be public, they need javadoc.&lt;/p&gt;</comment>
                            <comment id="12638627" author="jdcryans" created="Fri, 10 Oct 2008 18:58:32 +0000"  >&lt;p&gt;Patch for latest trunk. Seems to fail with RPCing.&lt;/p&gt;</comment>
                            <comment id="12638696" author="stack" created="Sat, 11 Oct 2008 00:53:23 +0000"  >&lt;p&gt;Problem was deserializing the BatchUpdate, we&apos;d use the no-arg BatchUpdate constructor.  The no-arg BatchUpdate waterfalls down to the constructor that takes all arguments.  It did this:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.size = row.length;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If no-arg constructor, row was null.  The NPE wasn&apos;t making it out during deserialization.&lt;/p&gt;

&lt;p&gt;This attached patch includes fix and some little cleanup.&lt;/p&gt;</comment>
                            <comment id="12640578" author="jdcryans" created="Fri, 17 Oct 2008 17:00:35 +0000"  >&lt;p&gt;This patch has a problem with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-919&quot; title=&quot;Master and Region Server need to provide root region location if they are using HTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-919&quot;&gt;&lt;del&gt;HBASE-919&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12640648" author="jdcryans" created="Fri, 17 Oct 2008 20:18:26 +0000"  >&lt;p&gt;This patch passes all tests and adds some. Generating javadoc gives no warning. Please review.&lt;/p&gt;</comment>
                            <comment id="12640681" author="stack" created="Fri, 17 Oct 2008 21:56:27 +0000"  >&lt;p&gt;+1 on patch. Just remove the &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-919&quot; title=&quot;Master and Region Server need to provide root region location if they are using HTable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-919&quot;&gt;&lt;del&gt;HBASE-919&lt;/del&gt;&lt;/a&gt; workaround 5 second pause before committing.&lt;/p&gt;</comment>
                            <comment id="12640683" author="jdcryans" created="Fri, 17 Oct 2008 22:04:49 +0000"  >&lt;p&gt;Committed to trunk without the fix. PE on my machine scores 128 sec. Thanks to everyone that helped in making this sweet optimization!&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                                                <inwardlinks description="is blocked by">
                                        <issuelink>
            <issuekey id="12405162">HBASE-901</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12404084">HBASE-880</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12390787" name="hbase-748-v1.patch" size="13461" author="jdcryans" created="Tue, 23 Sep 2008 20:56:49 +0000"/>
                            <attachment id="12391229" name="hbase-748-v2.patch" size="16082" author="jdcryans" created="Tue, 30 Sep 2008 19:17:37 +0000"/>
                            <attachment id="12391897" name="hbase-748-v3.patch" size="18364" author="jdcryans" created="Fri, 10 Oct 2008 18:58:32 +0000"/>
                            <attachment id="12391923" name="hbase-748-v4.patch" size="18472" author="stack" created="Sat, 11 Oct 2008 00:53:23 +0000"/>
                            <attachment id="12392356" name="hbase-748-v5.patch" size="18958" author="jdcryans" created="Fri, 17 Oct 2008 17:00:35 +0000"/>
                            <attachment id="12392377" name="hbase-748-v6.patch" size="23244" author="jdcryans" created="Fri, 17 Oct 2008 20:18:26 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 6 Aug 2008 22:43:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31835</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 9 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0h97j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98754</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>