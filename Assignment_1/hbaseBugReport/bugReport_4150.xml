<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:16:21 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-4150/HBASE-4150.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-4150] Potentially too many connections may be opened if ThreadLocalPool or RoundRobinPool is used</title>
                <link>https://issues.apache.org/jira/browse/HBASE-4150</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;See &apos;Problem with hbase.client.ipc.pool.type=threadlocal in trunk&apos; discussion started by Lars George.&lt;/p&gt;

&lt;p&gt;From Lars Hofhansl:&lt;br/&gt;
Looking at HBaseClient.getConnection(...) I see this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (connections) {
       connection = connections.get(remoteId);
       &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (connection == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
         connection = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Connection(remoteId);
         connections.put(remoteId, connection);
       }
     }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At the same time PoolMap.ThreadLocalPool.put is defined like this:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; R put(R resource) {
     R previousResource = get();
     &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (previousResource == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
...
       &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (poolSize.intValue() &amp;gt;= maxSize) {
         &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
       }
...
   }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So... If the ThreadLocalPool reaches its capacity it always returns null and hence all new threads will create a&lt;br/&gt;
new connection every time getConnection is called!&lt;/p&gt;

&lt;p&gt;I have also verified with a test program that works fine as long as the number of client threads (which include&lt;br/&gt;
the threads in HTable&apos;s threadpool of course) is &amp;lt; poolsize. Once that is no longer the case the number of&lt;br/&gt;
connections &quot;explodes&quot; and the program dies with OOMEs (mostly because each Connection is associated with&lt;br/&gt;
yet another thread).&lt;/p&gt;

&lt;p&gt;It&apos;s not clear what should happen, though. Maybe (1) the ThreadLocalPool should not have a limit, or maybe&lt;br/&gt;
(2) allocations past the pool size should throw an exception (i.e. there&apos;s a hard limit), or maybe (3) in that case&lt;br/&gt;
a single connection is returned for all threads while the pool it over its limit or (4) we start round robin with the other&lt;br/&gt;
connection in the other thread locals.&lt;/p&gt;

&lt;p&gt;For #1 means that the number of client threads needs to be more carefully managed by the client app.&lt;br/&gt;
In this case it would also be somewhat pointless that Connection have their own threads, we just pass stuff&lt;br/&gt;
between threads.&lt;br/&gt;
#2 would work, but puts more logic in the client.&lt;br/&gt;
#3 would lead to hard to debug performance issues.&lt;br/&gt;
And #4 is messy &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;From Ted Yu:&lt;br/&gt;
For HBaseClient, at least the javadoc doesn&apos;t match:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   * @param config configuration
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; either a {@link PoolType#Reusable} or {@link PoolType#ThreadLocal}
   */
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; PoolType getPoolType(Configuration config) {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; PoolType.valueOf(config.get(HConstants.HBASE_CLIENT_IPC_POOL_TYPE),
        PoolType.RoundRobin, PoolType.ThreadLocal);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I think for RoundRobinPool, we shouldn&apos;t allow maxSize to be Integer#MAX_VALUE. Otherwise connection explosion described by Lars may incur.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12515879">HBASE-4150</key>
            <summary>Potentially too many connections may be opened if ThreadLocalPool or RoundRobinPool is used</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="karthick">Karthick Sankarachary</assignee>
                                    <reporter username="yuzhihong@gmail.com">Ted Yu</reporter>
                        <labels>
                    </labels>
                <created>Sun, 31 Jul 2011 21:35:42 +0000</created>
                <updated>Fri, 20 Nov 2015 11:52:06 +0000</updated>
                            <resolved>Sat, 13 Aug 2011 12:50:27 +0000</resolved>
                                                    <fixVersion>0.92.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13078491" author="karthick" created="Tue, 2 Aug 2011 23:09:49 +0000"  >&lt;p&gt;I agree that if we don&apos;t somehow cap the pool size, we could potentially run into connection overload issues. &lt;/p&gt;

&lt;p&gt;How about if we enforce a hard limit on the pool size? For instance, we could use &quot;hbase.regionserver.handler.count&quot;, for lack of a better variable, as the cap for the pool size. &lt;/p&gt;

&lt;p&gt;Further, in the case of a thread-local pool, we might be better off not enforcing that limit at all. If the number of threads goes over the pool size, then we could log a warning message that asks the user to switch to a round-robin pool. If that doesn&apos;t help, then we might want to consider throwing an exception, making sure to skip all of the retry logic as it bubbles up.&lt;/p&gt;</comment>
                            <comment id="13078498" author="yuzhihong@gmail.com" created="Tue, 2 Aug 2011 23:23:07 +0000"  >&lt;p&gt;&quot;hbase.regionserver.handler.count&quot; is server side config. Configuration object on client side may not have it.&lt;/p&gt;

&lt;p&gt;I am in favor of throwing exception in the case of a thread-local pool to inform user that they should honor the limit.&lt;/p&gt;</comment>
                            <comment id="13078509" author="ghelmling" created="Tue, 2 Aug 2011 23:39:29 +0000"  >&lt;p&gt;Hmm, maybe I don&apos;t understand the context, but shouldn&apos;t a thread-local pool expand to have one instance per calling thread?  I wouldn&apos;t expect any hard limit to be imposed.  Why would you want a limit in this case?  Imposing a pool size limit here is effectively just limiting number of allowed threads, but as a side effect.  Am I missing something?&lt;/p&gt;

&lt;p&gt;It seems to me if you hit an OOME due to creating too many threads you shouldn&apos;t create so many threads.&lt;/p&gt;</comment>
                            <comment id="13078571" author="lhofhansl" created="Wed, 3 Aug 2011 03:49:51 +0000"  >&lt;p&gt;The original post was from me actually (not Lars George)...&lt;/p&gt;

&lt;p&gt;I agree that no limit for threadlocal pool is also a good option (my #1 above).&lt;br/&gt;
The actual number of threads is actually a bit hard to predict because of the thread pool in HTable (and even harder when using HTablePool), though.&lt;/p&gt;</comment>
                            <comment id="13078574" author="yuzhihong@gmail.com" created="Wed, 3 Aug 2011 04:21:31 +0000"  >&lt;p&gt;Looks like we should describe the above scenario in javadoc and book.&lt;/p&gt;</comment>
                            <comment id="13079073" author="karthick" created="Wed, 3 Aug 2011 22:18:29 +0000"  >&lt;p&gt;If we decide to leave things as they are, then as Ted suggested, we should describe the best practices in the javadoc and the book. If the client application comprises a small number of threads that perform a lot of scan- or batch-intensive operations, then you may want to consider using thread-local pools. For applications with a large number of threads, you may want to use a bounded round-robin pool, which will require you to fine-tune its size (a number between 5 and 10 might serve as a good starting point). At any rate, the total number of connections should not exceed the hard limits set on the underlying operating system resources. For instance, on *nix systems, the pool size should be lower than the maximum number of open file descriptors (`ulimit -n`).&lt;/p&gt;</comment>
                            <comment id="13079101" author="yuzhihong@gmail.com" created="Wed, 3 Aug 2011 22:53:39 +0000"  >&lt;p&gt;Doug, our doc master, agrees to take over this task.&lt;/p&gt;</comment>
                            <comment id="13079195" author="lhofhansl" created="Thu, 4 Aug 2011 03:39:12 +0000"  >&lt;p&gt;I don&apos;t think we can leave it the way it is for the threadlocal pool.&lt;/p&gt;

&lt;p&gt;The behavior now is worse than having no limit at all.&lt;br/&gt;
Currently, if the number of threads is greater than than the pool-size a new connection will be created for every &lt;b&gt;request&lt;/b&gt; (see the code snippet above). That is clearly not what was intended with this.&lt;/p&gt;

&lt;p&gt;So either threadlocal pool should have no limit (at least then we only have one connection per thread), or the it should fail when it gets past the limit.&lt;/p&gt;</comment>
                            <comment id="13079202" author="yuzhihong@gmail.com" created="Thu, 4 Aug 2011 03:54:41 +0000"  >&lt;p&gt;Does this look good to you Lars ?&lt;/p&gt;</comment>
                            <comment id="13079209" author="lhofhansl" created="Thu, 4 Aug 2011 04:09:31 +0000"  >&lt;p&gt;Yep... That stops the unbounded growth of the pool. And if somebody wants a connection per thread they can set the size to Integer.MAX_VALUE.&lt;/p&gt;

&lt;p&gt;Thanks Ted!&lt;/p&gt;

&lt;p&gt;Is this needed:&lt;br/&gt;
if (maxSize != Integer.MAX_VALUE)&lt;br/&gt;
?&lt;br/&gt;
(I don&apos;t think poolSize.intValue() &amp;gt;= Integer.MAX_VALUE is ever true. And hence if maxSize was Integer.MAX_VALUE the 2nd if would never be reached anyway.)&lt;/p&gt;

&lt;p&gt;I guess the documentation should state something the extend that a round-robin pool will always grow to the pool-size (at which point the connections will round-robin between threads),&lt;br/&gt;
and the thread-local pool will at most grow to that size (at which point further threads will fail).&lt;br/&gt;
Hence it makes sense to set the size of a threadlocal pool to Integer.MAX_VALUE and then control the number of threads, but the size of a round-robin pool should never be set to Integer.MAX_VALUE.&lt;/p&gt;</comment>
                            <comment id="13079211" author="lhofhansl" created="Thu, 4 Aug 2011 04:18:38 +0000"  >&lt;p&gt;I.e. this...&lt;/p&gt;</comment>
                            <comment id="13079212" author="lhofhansl" created="Thu, 4 Aug 2011 04:20:13 +0000"  >&lt;p&gt;I guess poolSize.intValue() &amp;gt;= Integer.MAX_VALUE is true if you have Integer.MAX_VALUE connections (which means you also have Integer.MAX_VALUE threads, so that won&apos;t happen).&lt;/p&gt;</comment>
                            <comment id="13079213" author="yuzhihong@gmail.com" created="Thu, 4 Aug 2011 04:26:35 +0000"  >&lt;p&gt;Please grant license to ASF in the future.&lt;br/&gt;
I will wait for a day before committing this change, wrapping the long line.&lt;/p&gt;</comment>
                            <comment id="13079214" author="lhofhansl" created="Thu, 4 Aug 2011 04:33:42 +0000"  >&lt;p&gt;Sorry, missed the checkbox (this is my first submission).&lt;/p&gt;</comment>
                            <comment id="13079221" author="ghelmling" created="Thu, 4 Aug 2011 05:07:37 +0000"  >&lt;blockquote&gt;
&lt;p&gt;The behavior now is worse than having no limit at all.&lt;br/&gt;
Currently, if the number of threads is greater than than the pool-size a new connection will be created for every request (see the code snippet above). That is clearly not what was intended with this.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That certainly seems broken.&lt;/p&gt;

&lt;p&gt;Personally I think it&apos;s a bit odd to have a limit apply to a thread local implementation, since &lt;tt&gt;ThreadLocal&lt;/tt&gt; typically means I want one instance per thread.  &lt;tt&gt;ThreadLocal&lt;/tt&gt; usage performs its own natural limiting, so I&apos;d be more inclined to just remove the limit checking from &lt;tt&gt;ThreadLocalPool&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I also don&apos;t understand why the &lt;tt&gt;poolSizes&lt;/tt&gt; variable is a static &lt;tt&gt;Map&amp;lt;ThreadLocalPool&amp;lt;?&amp;gt;,AtomicInteger&amp;gt;&lt;/tt&gt;, instead of just an instance &lt;tt&gt;AtomicInteger&lt;/tt&gt; variable.&lt;/p&gt;</comment>
                            <comment id="13079224" author="yuzhihong@gmail.com" created="Thu, 4 Aug 2011 05:20:13 +0000"  >&lt;p&gt;Considering what Lars said @ 04/Aug/11 04:09, it seems that ThreadLocalPool doesn&apos;t need to honor maxSize. Hence maxSize member variable can be removed.&lt;/p&gt;

&lt;p&gt;Let&apos;s see what Karthick says.&lt;/p&gt;</comment>
                            <comment id="13079242" author="lhofhansl" created="Thu, 4 Aug 2011 05:57:26 +0000"  >&lt;p&gt;Having an upper safety limit on the number connections (and the accompanying threads) created is not necessarily bad; that is especially true when the number of threads is somewhat hard to predict, for example when using HTablePool and HTables.&lt;/p&gt;

&lt;p&gt;The size for the threadlocal pool should just be &quot;reasonably large&quot; and for the round-robin pool it should be &quot;reasonably small&quot;.&lt;/p&gt;

&lt;p&gt;Also, isn&apos;t PoolMap also used in HTablePool now (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2938&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HBASE-2938&lt;/a&gt;)? Do we want the exact same behavior there?&lt;/p&gt;</comment>
                            <comment id="13079348" author="dmeil" created="Thu, 4 Aug 2011 12:16:38 +0000"  >&lt;p&gt;A matter of coordination, this ticket is currently assigned to me but I&apos;m going to wait on any doc-changes until you guys figure out what you want to do.&lt;/p&gt;</comment>
                            <comment id="13079486" author="yuzhihong@gmail.com" created="Thu, 4 Aug 2011 17:26:43 +0000"  >&lt;p&gt;Removing maxSize from ThreadLocalPool is a big change.&lt;br/&gt;
I applied the 4150.txt to TRUNK.&lt;/p&gt;

&lt;p&gt;@Doug:&lt;br/&gt;
Please continue with javadoc changes.&lt;/p&gt;

&lt;p&gt;Thanks Lars.&lt;/p&gt;</comment>
                            <comment id="13079499" author="ghelmling" created="Thu, 4 Aug 2011 17:46:38 +0000"  >&lt;p&gt;Throwing a RuntimeException where it was not thrown before in a way that could be disruptive to clients is IMO an even bigger change.  Especially in this case, this is relatively likely to occur if careful attention is not paid to aligning pool size with thread allocations.&lt;/p&gt;

&lt;p&gt;I also don&apos;t think it&apos;s reasonable to commit a change like this when there is ongoing debate about the correct approach.  I&apos;m willing to be convinced of alternatives, but I&apos;m not convinced this is currently the correct approach.&lt;/p&gt;

&lt;p&gt;-1 to this change.&lt;/p&gt;
</comment>
                            <comment id="13079504" author="yuzhihong@gmail.com" created="Thu, 4 Aug 2011 17:57:27 +0000"  >&lt;p&gt;Patch reversed.&lt;/p&gt;

&lt;p&gt;@Lars:&lt;br/&gt;
What do you think of removing the limit checking from ThreadLocalPool ?&lt;br/&gt;
Effectively, maxSize would be Interger.MAX_VALUE&lt;/p&gt;</comment>
                            <comment id="13079521" author="yuzhihong@gmail.com" created="Thu, 4 Aug 2011 18:39:49 +0000"  >&lt;p&gt;Gary agrees to obtain consensus from related parties and finish code change.&lt;/p&gt;</comment>
                            <comment id="13079552" author="hudson" created="Thu, 4 Aug 2011 20:00:50 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #2082 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/2082/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/2082/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4150&quot; title=&quot;Potentially too many connections may be opened if ThreadLocalPool or RoundRobinPool is used&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4150&quot;&gt;&lt;del&gt;HBASE-4150&lt;/del&gt;&lt;/a&gt; reverse patch&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4150&quot; title=&quot;Potentially too many connections may be opened if ThreadLocalPool or RoundRobinPool is used&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4150&quot;&gt;&lt;del&gt;HBASE-4150&lt;/del&gt;&lt;/a&gt;  Potentially too many connections may be opened if ThreadLocalPool&lt;br/&gt;
               or RoundRobinPool is used&lt;/p&gt;

&lt;p&gt;tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/util/PoolMap.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/CHANGES.txt&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/util/PoolMap.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/CHANGES.txt&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13079575" author="karthick" created="Thu, 4 Aug 2011 20:32:09 +0000"  >&lt;p&gt;I tend to agree with Gary in that it doesn&apos;t really make sense to cap the thread-local pool. Having the &lt;tt&gt;PoolMap&lt;/tt&gt; throw an exception seems a little too disruptive. I&apos;ve attached a &lt;span class=&quot;error&quot;&gt;&amp;#91;patch|^4150-2.txt&amp;#93;&lt;/span&gt; that removes the limit check from &lt;tt&gt;ThreadLocalPool&lt;/tt&gt; and fixes the javadoc in &lt;tt&gt;HBaseClient&lt;/tt&gt;. This way, we at least ensure that the client will create as many &lt;tt&gt;Connection&lt;/tt&gt; objects as threads, no more no less.&lt;/p&gt;

&lt;p&gt;Note that in the &lt;tt&gt;PoolMap&lt;/tt&gt;, we associate a resource &lt;tt&gt;Pool&lt;/tt&gt; with every key, ergo the need for using a map instead of a number for the type for the &lt;tt&gt;poolSizes&lt;/tt&gt; variable. So, in the case of &lt;tt&gt;HBaseClient#connections&lt;/tt&gt;, we&apos;ll essentially create a &lt;tt&gt;Pool&lt;/tt&gt; of &lt;tt&gt;Connection}}s for every {{ConnectionId&lt;/tt&gt;, which denotes a region server. While the &lt;tt&gt;ThreadLocal&lt;/tt&gt; class, which &lt;tt&gt;ThreadLocalPool&lt;/tt&gt; extends, does maintain the size in &lt;tt&gt;ThreadLocalMap&lt;/tt&gt;, it is unfortunately not visible to us. &lt;/p&gt;</comment>
                            <comment id="13079619" author="ghelmling" created="Thu, 4 Aug 2011 21:43:33 +0000"  >&lt;p&gt;Thanks for the updated patch Karthick.&lt;/p&gt;

&lt;p&gt;One additional question on how this interacts with HTablePool.  In HTablePool, when obtaining a table:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; HTableInterface findOrCreateTable(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; tableName) {
    HTableInterface table = tables.get(tableName);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (table == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      table = createHTable(tableName);
    }
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; table;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the case of &lt;tt&gt;ThreadLocalPool&lt;/tt&gt;, it seems like there&apos;s an exposure here between when the table is created initially and when &lt;tt&gt;ThreadLocalPool.put()&lt;/tt&gt; is called to set the thread local variable (on &lt;tt&gt;PooledHTable.close()&lt;/tt&gt;).  This is independent of the issue here, so I can open a separate JIRA, just wanted to get your thoughts on if this is a potential leak.&lt;/p&gt;

&lt;p&gt;I&apos;ll run the updated patch through tests and commit if all passes (relative to any current trunk breakage).&lt;/p&gt;</comment>
                            <comment id="13079640" author="yuzhihong@gmail.com" created="Thu, 4 Aug 2011 22:13:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;relative to any current trunk breakage&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&apos;s a bit hard to predict after &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4158&quot; title=&quot;Upgrade pom.xml to surefire 2.9&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4158&quot;&gt;&lt;del&gt;HBASE-4158&lt;/del&gt;&lt;/a&gt; went in - just look at recent TRUNK builds&lt;/p&gt;</comment>
                            <comment id="13079643" author="lhofhansl" created="Thu, 4 Aug 2011 22:16:20 +0000"  >&lt;p&gt;+1 to removing the limit for thread local pool.&lt;/p&gt;</comment>
                            <comment id="13079664" author="karthick" created="Thu, 4 Aug 2011 22:58:24 +0000"  >&lt;p&gt;Yes, I think there may be a potential leak in &lt;tt&gt;HTablePool&lt;/tt&gt;, and we could open a separate issue for that, or do it as part of this issue. &lt;/p&gt;

&lt;p&gt;For one thing, we might want to clear the &lt;tt&gt;tables&lt;/tt&gt; variable when the &lt;tt&gt;HTablePool&lt;/tt&gt; is closed (as shown below). For another, we should override &lt;tt&gt;ThreadLocalPool#get&lt;/tt&gt; method so that it removes the resource, otherwise it might end up referencing a &lt;tt&gt;HTableInterface&lt;/tt&gt; that&apos;s has been released.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      1 diff --git a/src/main/java/org/apache/hadoop/hbase/client/HTablePool.java b/src/main/java/org/apache/hadoop/hbase/client/HTablePool.java
      2 index 952a3aa..c198f15 100755
      3 --- a/src/main/java/org/apache/hadoop/hbase/client/HTablePool.java
      4 +++ b/src/main/java/org/apache/hadoop/hbase/client/HTablePool.java
     13 @@ -309,6 +310,7 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class HTablePool &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Closeable {
     14      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; tableName : tables.keySet()) {
     15        closeTablePool(tableName);
     16      }
     17 +    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.tables.clear();
     18    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13079669" author="ghelmling" created="Thu, 4 Aug 2011 23:05:38 +0000"  >&lt;p&gt;Cool, thanks for the confirmation Karthick.  I created &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4167&quot; title=&quot;Potential leak of HTable instances when using HTablePool with PoolType.ThreadLocal&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4167&quot;&gt;&lt;del&gt;HBASE-4167&lt;/del&gt;&lt;/a&gt; to continue the discussion on HTablePool. &lt;/p&gt;</comment>
                            <comment id="13079670" author="ghelmling" created="Thu, 4 Aug 2011 23:08:49 +0000"  >&lt;p&gt;Committed this patch (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4150&quot; title=&quot;Potentially too many connections may be opened if ThreadLocalPool or RoundRobinPool is used&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4150&quot;&gt;&lt;del&gt;HBASE-4150&lt;/del&gt;&lt;/a&gt;_final.patch) to trunk.&lt;/p&gt;

&lt;p&gt;This is based on 5140-2.patch, plus a fix for TestPoolMap to reflect the non-enforcement of limit with ThreadLocalPool.&lt;/p&gt;

&lt;p&gt;So this removes use of pool max size when using ThreadLocalPool.&lt;/p&gt;</comment>
                            <comment id="13079671" author="ghelmling" created="Thu, 4 Aug 2011 23:10:16 +0000"  >&lt;p&gt;Doug, over to you for any doc updates you wanted to make clarifying that pool max size configuration does not apply to ThreadLocalPool.&lt;/p&gt;</comment>
                            <comment id="13079718" author="hudson" created="Fri, 5 Aug 2011 01:10:44 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #2084 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/2084/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/2084/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4150&quot; title=&quot;Potentially too many connections may be opened if ThreadLocalPool or RoundRobinPool is used&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4150&quot;&gt;&lt;del&gt;HBASE-4150&lt;/del&gt;&lt;/a&gt;  Don&apos;t enforce pool size limit with ThreadLocalPool&lt;/p&gt;

&lt;p&gt;garyh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/util/PoolMap.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/util/TestPoolMap.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/ipc/HBaseClient.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13079739" author="yuzhihong@gmail.com" created="Fri, 5 Aug 2011 01:45:38 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; ThreadLocalPool(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; maxSize) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Since maxSize is no longer used and ThreadLocalPool isn&apos;t exposed outside PoolMap, I think the ctor shouldn&apos;t take such parameter.&lt;/p&gt;</comment>
                            <comment id="13083883" author="karthick" created="Fri, 12 Aug 2011 02:59:12 +0000"  >&lt;p&gt;Updated the javadoc in &lt;tt&gt;HBaseClient&lt;/tt&gt; and &lt;tt&gt;PoolMap&lt;/tt&gt; as per the comments above.&lt;/p&gt;</comment>
                            <comment id="13083910" author="yuzhihong@gmail.com" created="Fri, 12 Aug 2011 04:14:07 +0000"  >&lt;p&gt;+1 on the javadoc patch.&lt;br/&gt;
Minor comment, please put the following on one line (can be done at time of commit):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+   * @param config
+   *          configuration
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13084514" author="yuzhihong@gmail.com" created="Sat, 13 Aug 2011 02:42:28 +0000"  >&lt;p&gt;Integrate to TRUNK.&lt;/p&gt;

&lt;p&gt;Thanks for the continued effort, Karthick.&lt;/p&gt;</comment>
                            <comment id="13084518" author="lhofhansl" created="Sat, 13 Aug 2011 02:55:55 +0000"  >&lt;p&gt;Thanks for the doc patch Karthick, it explains trade-offs very nicely.&lt;/p&gt;</comment>
                            <comment id="13084540" author="stack" created="Sat, 13 Aug 2011 05:16:14 +0000"  >&lt;p&gt;+1 on doc patch.&lt;/p&gt;</comment>
                            <comment id="13084734" author="hudson" created="Sat, 13 Aug 2011 22:52:47 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #2113 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/2113/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/2113/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4150&quot; title=&quot;Potentially too many connections may be opened if ThreadLocalPool or RoundRobinPool is used&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4150&quot;&gt;&lt;del&gt;HBASE-4150&lt;/del&gt;&lt;/a&gt; update to javadoc (Karthick Sankarachary)&lt;/p&gt;

&lt;p&gt;tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/util/PoolMap.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/ipc/HBaseClient.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15015669" author="lars_francke" created="Fri, 20 Nov 2015 11:52:06 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12489308" name="4150-1.txt" size="614" author="lhofhansl" created="Thu, 4 Aug 2011 04:18:38 +0000"/>
                            <attachment id="12489369" name="4150.txt" size="630" author="yuzhihong@gmail.com" created="Thu, 4 Aug 2011 17:25:06 +0000"/>
                            <attachment id="12489392" name="5140-2.txt" size="1617" author="karthick" created="Thu, 4 Aug 2011 20:14:04 +0000"/>
                            <attachment id="12490208" name="HBASE-4150-DOC.patch" size="3918" author="karthick" created="Fri, 12 Aug 2011 02:59:12 +0000"/>
                            <attachment id="12489419" name="HBASE-4150_final.patch" size="3064" author="ghelmling" created="Thu, 4 Aug 2011 23:08:49 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 2 Aug 2011 23:09:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27193</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hplz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>101411</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>