<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:13:36 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3842/HBASE-3842.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3842] Refactor Coprocessor Compaction API</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3842</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;After &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3797&quot; title=&quot;StoreFile Level Compaction Locking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3797&quot;&gt;&lt;del&gt;HBASE-3797&lt;/del&gt;&lt;/a&gt;, the compaction logic flow has been significantly altered.  Because of this, the current compaction coprocessor API is insufficient for gaining full insight into compaction requests/results.  Refactor coprocessor API after &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3797&quot; title=&quot;StoreFile Level Compaction Locking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3797&quot;&gt;&lt;del&gt;HBASE-3797&lt;/del&gt;&lt;/a&gt; is committed to be more extensible and increase visibility.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12505880">HBASE-3842</key>
            <summary>Refactor Coprocessor Compaction API</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ghelmling">Gary Helmling</assignee>
                                    <reporter username="nspiegelberg">Nicolas Spiegelberg</reporter>
                        <labels>
                            <label>compaction</label>
                    </labels>
                <created>Sun, 1 May 2011 20:41:51 +0000</created>
                <updated>Fri, 20 Nov 2015 12:43:30 +0000</updated>
                            <resolved>Tue, 6 Sep 2011 19:22:22 +0000</resolved>
                                    <version>0.92.0</version>
                                    <fixVersion>0.92.0</fixVersion>
                                    <component>Coprocessors</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13027498" author="nspiegelberg" created="Sun, 1 May 2011 20:48:49 +0000"  >&lt;p&gt;Talked a little with Gary Helmling about this.  The main points are:&lt;/p&gt;

&lt;p&gt;1. Selection of files for compaction will be decoupled from the actual compaction/merge itself&lt;br/&gt;
2. Splits will be completely decoupled from compactions&lt;br/&gt;
3. Since we&apos;re making all these changes, it would be nice to add the ability to short-circuit &amp;amp; instead use custom compaction algorithms.&lt;/p&gt;

&lt;p&gt;Here is an initial proposal for the new API.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/* Called before selecting what files to compact.  An sorted candidate set &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; compaction is given 
and the compaction algorithm will use the remaining contents of the candidate set (after coprocessor) 
as input to the compaction algorithm.
 * @param candidates : a mutable copy of StoreFile candidates &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; Store.  add/remove within the 
coprocessor will affect the candidate set
 * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; to skip &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; selection algorithm and use all files still in candidates
 *         &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt; will use the &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; selection algorithm, using the current content of candidates as input
 */
&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; preCompactSelection(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] store, List&amp;lt;StoreFile&amp;gt; candidates);  

/* Called after selecting what files to compact.  Mostly &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; notification purposes
 * @param candidates : StoreFiles selected &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; compaction
 */
void postCompactSelection(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] store, ImmutableList&amp;lt;StoreFile&amp;gt; selected);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/* Called before the compaction merge algorithm should commence.  Note that the coprocessor user can 
implement his custom merge algorithm at &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; point.  If you wish to alter the candidate set, &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; should 
be done in {@link preCompactSelection}.
 * @param toCompact : StoreFiles that will be compacted.
 * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; == &lt;span class=&quot;code-keyword&quot;&gt;continue&lt;/span&gt; with &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; compaction algorithm
 * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; not &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, assumes a custom compaction algorithm was used and adds resulting StoreFiles to the Store
 */
List&amp;lt;StoreFile&amp;gt; preCompaction(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] store, ImmutableList&amp;lt;StoreFile&amp;gt; toCompact);

/* Called after selecting what files to compact.  Mostly &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; notification purposes
 * @param newFiles : StoreFiles made by &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; compaction
 */
void postCompaction(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] store, ImmutableList&amp;lt;StoreFile&amp;gt; newFiles);

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13027746" author="stack" created="Mon, 2 May 2011 18:02:56 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;In postCompactSelection, do you need to know if you have all files or not (So you can figure if its a major or not)? &lt;/p&gt;

&lt;p&gt;Also, don&apos;t you want to pass the memstore to the preCompaction so we can implement the flushing compaction where we weave a flush into a compaction result so we don&apos;t always create new file on flush?&lt;/p&gt;</comment>
                            <comment id="13027792" author="nspiegelberg" created="Mon, 2 May 2011 19:35:22 +0000"  >&lt;p&gt;@stack: That&apos;s a good point about major compaction.  Maybe I should have the input param be CompactionRequest, which contains the Store, File list, and isMajor.  Would there be a problem with giving the user direct access to the Store?  I was a little worried about giving that unless someone else concurred.  Maybe make a separate ICompactionRequest &amp;amp; IStore API for coprocessor contracts?&lt;/p&gt;

&lt;p&gt;If I passed the CompactionRequest object - which contains a Store - to the user, then the coprocessor client could access the MemStore through some Store API?&lt;/p&gt;</comment>
                            <comment id="13027794" author="apurtell" created="Mon, 2 May 2011 19:40:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;If I passed the CompactionRequest object - which contains a Store - to the user, then the coprocessor client could access the MemStore through some Store API?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1 passing Store instead of merely the byte[] store name&lt;/p&gt;</comment>
                            <comment id="13027795" author="stack" created="Mon, 2 May 2011 19:44:26 +0000"  >&lt;p&gt;I like passing CompactionRequest notion (and it gives you access to Store if you need it).&lt;/p&gt;

&lt;p&gt;You could do an Interface to narrow what CPs can access.  There may be concurrency/perf reasons for not letting CPs have direct access. &lt;/p&gt;

&lt;p&gt;I have no strong opinion on it N.&lt;/p&gt;</comment>
                            <comment id="13047711" author="stack" created="Fri, 10 Jun 2011 22:58:25 +0000"  >&lt;p&gt;Moving out of 0.92.  Move it back in if you think differently.&lt;/p&gt;</comment>
                            <comment id="13047723" author="stack" created="Fri, 10 Jun 2011 22:58:27 +0000"  >&lt;p&gt;Moving out of 0.92.  Move it back in if you think differently.&lt;/p&gt;</comment>
                            <comment id="13047747" author="stack" created="Fri, 10 Jun 2011 23:08:21 +0000"  >&lt;p&gt;Do we have a patch for this?  Would like to get 0.92.0 soon.  I&apos;d think that API change should be done before we make our first release with coprocessors.  Let me raise this to critical for 0.92.0  We can change it back down later if it does not look like its going to happen.&lt;/p&gt;</comment>
                            <comment id="13061614" author="apurtell" created="Thu, 7 Jul 2011 21:44:17 +0000"  >&lt;p&gt;Additionally I propose the addition of a new coprocessor observer type, &lt;tt&gt;CompactionObserver&lt;/tt&gt;, with the following interface:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
/**
 * Notification that compaction is about to begin.
 * @param context Observer context
 * @param store the Store that is about to be compacted
 * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt; to skip compaction
 */
&lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; preCompact(ObserverContext&amp;lt;~&amp;gt; context, Store store);

/**
 * Notification that compaction completed
 * @param context Observer context
 * @param store the Store that was compacted
 */
void postCompact(ObserverContext&amp;lt;~&amp;gt; context, Store store);

/**
 * Called before a KV is written to the &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; store file.
 * &amp;lt;p&amp;gt;
 * WARNING: It is only safe, unless you &amp;lt;i&amp;gt;really&amp;lt;/i&amp;gt; know what you are doing,
 * to signal the KV should be dropped by returning {{&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;}} or to &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; a KV
 * with only the value changed somehow.
 * @param context Observer context
 * @param store the Store that is being compacted
 * @param kv the KeyValue
 * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the KeyValue to write, or &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; none
 */
KeyValue preCompactWrite(ObserverContext&amp;lt;~&amp;gt; context, Store store, KeyValue kv);

/**
 * Called after a KV is written to the &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; store file.
 * @param context Observer context
 * @param store the Store that is being compacted
 * @param kv the KeyValue
 */
void postCompactWrite(ObserverContext&amp;lt;~&amp;gt; context, Store store, KeyValue kv);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the coprocessor implements this interface, it is hooked into the compaction process such that it can operate on every KV. This is the same model we use for WAL observers.&lt;/p&gt;</comment>
                            <comment id="13061619" author="nspiegelberg" created="Thu, 7 Jul 2011 21:50:03 +0000"  >&lt;p&gt;@Andrew: do we really want to call this in an inner loop?  Wouldn&apos;t you accomplish the same thing by:&lt;/p&gt;

&lt;p&gt;1. passing in the scanner that we&apos;ll use for compaction preCompact() so you can write your own StoreFile and mutate KVs&lt;br/&gt;
2. synchronously reading the StoreFile postCompact()&lt;/p&gt;</comment>
                            <comment id="13061624" author="apurtell" created="Thu, 7 Jul 2011 22:00:38 +0000"  >&lt;p&gt;@Nicholas: So then stacking would work like: The first coprocessor in the chain writes its own StoreFile entirely from the preCompact() hook and then swaps out the scanner for one over the result, the next coprocessor in the chain writes its own StoreFile and then swaps out the scanner for one over the result, and so on. Correct?&lt;/p&gt;</comment>
                            <comment id="13075985" author="ghelmling" created="Tue, 2 Aug 2011 00:55:06 +0000"  >&lt;p&gt;I think the stacking issue is key here:  are we expecting the common case to be loading a single &quot;CompactionObserver&quot; that overrides the compaction implementation, or loading multiple that each override/customize compaction policy but not necessarily behavior?&lt;/p&gt;

&lt;p&gt;I agree on the one hand that having a &lt;tt&gt;KeyValue&lt;/tt&gt; oriented interface for &lt;tt&gt;preCompactWrite()&lt;/tt&gt; and &lt;tt&gt;postCompactWrite()&lt;/tt&gt; may not be sufficient.  At the same time, I don&apos;t think we want to force the implementations to write their own &lt;tt&gt;StoreFiles&lt;/tt&gt; though, as that will be massively inefficient &amp;#8211; for N loaded coprocessors this becomes N compactions being written (assuming we bypass the core compaction code at the end of chaining).&lt;/p&gt;

&lt;p&gt;One alternative would be to have &lt;tt&gt;preCompact&lt;/tt&gt; take the scanner to be used as a parameter, as suggested, and return a scanner instance that would allow overriding policy and mutating KVs, while still relying on the core writer functionality.  This would allow wrapping the store scanner with a custom scanner that inspects and emits KVs as needed on the fly.  In this case, &lt;tt&gt;preCompact&lt;/tt&gt; would look like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
StoreScanner preCompact(ObserverContext&amp;lt;~&amp;gt; context, Store store, StoreScanner scanner);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wrapping the scanner seems much easier for chaining multiple observers.  On the other hand we lose the clean &lt;tt&gt;boolean&lt;/tt&gt; return to indicate that core compaction processing should be skipped.  Are there cases that would still want to handling the store file writing portion of the implementation entirely in the coprocessor?  If so, can we still emit a flag to skip normal processing another way?  We could skip normal processing if &lt;tt&gt;null&lt;/tt&gt; is returned.  Seems a little clunky, but it could work with appropriate documentation.&lt;/p&gt;</comment>
                            <comment id="13076296" author="apurtell" created="Tue, 2 Aug 2011 16:29:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;are we expecting the common case to be loading a single &quot;CompactionObserver&quot; that overrides the compaction implementation, or loading multiple that each override/customize compaction policy but not necessarily behavior?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I believe in general Coprocessors will not usually be used to wholesale replace anything. People have that option, but the design rationale is about supporting point changes and enhancements. If we do it right, the interception points are designed so the CP implementer needs do only the minimum work necessary to achieve their aims. So I think we will see extensions that in this case here filter out or rewrite specific sets of KVs during compaction, as part of a larger set of smallish changes to other functions that also do something different for specific sets of KVs, or a particular key pattern meaningful to the CP application, etc. We need an API that allows the CP implementer to remain concerned only with their application/extension, not be required to reimplement compaction and understand all the hairy details if they want to alter it even slightly.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;One alternative would be to have preCompact take the scanner to be used as a parameter, as suggested, and return a scanner instance that would allow overriding policy and mutating KVs, while still relying on the core writer functionality. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;But we must not have behind the scenes a stacked coprocessor configuration resulting in rewriting store files over and over, if three stacked coprocessors running compaction three (or four!) times over.&lt;/p&gt;</comment>
                            <comment id="13082719" author="stack" created="Wed, 10 Aug 2011 22:26:48 +0000"  >&lt;p&gt;Allowing scanner wrapping with the &apos;clunky&apos; null return means done seems fine to me.&lt;/p&gt;</comment>
                            <comment id="13088907" author="ghelmling" created="Mon, 22 Aug 2011 18:36:22 +0000"  >&lt;p&gt;We have a need for this internally, so I&apos;ll be working up a patch this week.  As part of the coprocessor API, I think it&apos;s critical to get this in 0.92.&lt;/p&gt;</comment>
                            <comment id="13095084" author="jiraposter@reviews.apache.org" created="Thu, 1 Sep 2011 02:37:09 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/1686/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;This patch adds two new hooks to wrap the selection process for store files to compact:&lt;/p&gt;

&lt;p&gt;  void preCompactSelection(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;br/&gt;
      final Store store, final List&amp;lt;StoreFile&amp;gt; candidates);&lt;/p&gt;

&lt;p&gt;  void postCompactSelection(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;br/&gt;
      final Store store, final ImmutableList&amp;lt;StoreFile&amp;gt; selected);&lt;/p&gt;

&lt;p&gt;In addition, the existing preCompact and postCompact methods have been refactored as described in JIRA:&lt;/p&gt;

&lt;p&gt;  InternalScanner preCompact(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;br/&gt;
    final Store store, final InternalScanner scanner);&lt;/p&gt;

&lt;p&gt;  void postCompact(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;br/&gt;
    final Store store, StoreFile resultFile);&lt;/p&gt;

&lt;p&gt;Coprocessors that wish to override compaction behavior can wrap the provided InternalScanner in preCompact and return their own implementation.  They can then apply custom policy on the fly before returning KeyValues from the scanner.  Alternately, the coprocessor could set the &quot;bypass&quot; flag in preCompact, which will skip the normal process of writing out a new store file.  In this case, the coprocessor is indicating that it will handle the store file writing itself.  Once the coprocessor has written a new store file, it will need to explicitly tell the Store instance to load it using bulkLoadHFile().&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3842&quot; title=&quot;Refactor Coprocessor Compaction API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3842&quot;&gt;&lt;del&gt;HBASE-3842&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3842&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-3842&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.java d473ba7 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java 008d027 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 30c9d69 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java 53645ce &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 655db7d &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java c0b7267 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java c2af6a1 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java a8edb42 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java b370ff0 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/1686/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Added a new test case &amp;#8211; TestRegionObserverInterface#testCompactionOverride &amp;#8211; to verify custom compaction handling using an InternalScanner implementation.&lt;/p&gt;

&lt;p&gt;All additional coprocessor related tests pass.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Gary&lt;/p&gt;
</comment>
                            <comment id="13095109" author="jiraposter@reviews.apache.org" created="Thu, 1 Sep 2011 04:23:09 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/1686/#review1713&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/#review1713&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/1686/#comment3887&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/#comment3887&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Should this be in its own change set?&lt;/p&gt;



&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/1686/#comment3888&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/#comment3888&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Nice test.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Andrew&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-09-01 02:35:36, Gary Helmling wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/1686/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-09-01 02:35:36)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This patch adds two new hooks to wrap the selection process for store files to compact:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void preCompactSelection(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final List&amp;lt;StoreFile&amp;gt; candidates);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void postCompactSelection(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final ImmutableList&amp;lt;StoreFile&amp;gt; selected);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In addition, the existing preCompact and postCompact methods have been refactored as described in JIRA:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;InternalScanner preCompact(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final InternalScanner scanner);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void postCompact(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, StoreFile resultFile);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Coprocessors that wish to override compaction behavior can wrap the provided InternalScanner in preCompact and return their own implementation.  They can then apply custom policy on the fly before returning KeyValues from the scanner.  Alternately, the coprocessor could set the &quot;bypass&quot; flag in preCompact, which will skip the normal process of writing out a new store file.  In this case, the coprocessor is indicating that it will handle the store file writing itself.  Once the coprocessor has written a new store file, it will need to explicitly tell the Store instance to load it using bulkLoadHFile().&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3842&quot; title=&quot;Refactor Coprocessor Compaction API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3842&quot;&gt;&lt;del&gt;HBASE-3842&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3842&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-3842&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.java d473ba7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java 008d027 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 30c9d69 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java 53645ce &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 655db7d &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java c0b7267 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java c2af6a1 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java a8edb42 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java b370ff0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/1686/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Added a new test case &amp;#8211; TestRegionObserverInterface#testCompactionOverride &amp;#8211; to verify custom compaction handling using an InternalScanner implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;All additional coprocessor related tests pass.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Gary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13095124" author="jiraposter@reviews.apache.org" created="Thu, 1 Sep 2011 05:18:10 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/1686/#review1714&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/#review1714&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;


&lt;p&gt;API looks good to me.  Ship it.&lt;/p&gt;


&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/1686/#comment3889&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/#comment3889&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Nice doc.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Michael&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-09-01 02:35:36, Gary Helmling wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/1686/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-09-01 02:35:36)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This patch adds two new hooks to wrap the selection process for store files to compact:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void preCompactSelection(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final List&amp;lt;StoreFile&amp;gt; candidates);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void postCompactSelection(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final ImmutableList&amp;lt;StoreFile&amp;gt; selected);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In addition, the existing preCompact and postCompact methods have been refactored as described in JIRA:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;InternalScanner preCompact(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final InternalScanner scanner);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void postCompact(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, StoreFile resultFile);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Coprocessors that wish to override compaction behavior can wrap the provided InternalScanner in preCompact and return their own implementation.  They can then apply custom policy on the fly before returning KeyValues from the scanner.  Alternately, the coprocessor could set the &quot;bypass&quot; flag in preCompact, which will skip the normal process of writing out a new store file.  In this case, the coprocessor is indicating that it will handle the store file writing itself.  Once the coprocessor has written a new store file, it will need to explicitly tell the Store instance to load it using bulkLoadHFile().&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3842&quot; title=&quot;Refactor Coprocessor Compaction API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3842&quot;&gt;&lt;del&gt;HBASE-3842&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3842&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-3842&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.java d473ba7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java 008d027 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 30c9d69 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java 53645ce &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 655db7d &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java c0b7267 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java c2af6a1 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java a8edb42 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java b370ff0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/1686/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Added a new test case &amp;#8211; TestRegionObserverInterface#testCompactionOverride &amp;#8211; to verify custom compaction handling using an InternalScanner implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;All additional coprocessor related tests pass.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Gary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13095464" author="jiraposter@reviews.apache.org" created="Thu, 1 Sep 2011 17:43:09 +0000"  >

&lt;blockquote&gt;&lt;p&gt;On 2011-09-01 04:21:24, Andrew Purtell wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java, line 146&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/1686/diff/2/?file=37163#file37163line146&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/diff/2/?file=37163#file37163line146&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Should this be in its own change set?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Adding ImmutableList from Google Guava to the RegionObserver.postCompactSelection() signature broke the CP class compilation being done internally here, so I wanted to include a fix.  This seemed the cleanest way.  Alternately, we could change the method signature to use just List, but I do like making the immutability explicit.  It&apos;s more self-documenting that way.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Gary&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/1686/#review1713&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/#review1713&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2011-09-01 02:35:36, Gary Helmling wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/1686/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-09-01 02:35:36)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This patch adds two new hooks to wrap the selection process for store files to compact:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void preCompactSelection(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final List&amp;lt;StoreFile&amp;gt; candidates);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void postCompactSelection(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final ImmutableList&amp;lt;StoreFile&amp;gt; selected);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In addition, the existing preCompact and postCompact methods have been refactored as described in JIRA:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;InternalScanner preCompact(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final InternalScanner scanner);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void postCompact(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, StoreFile resultFile);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Coprocessors that wish to override compaction behavior can wrap the provided InternalScanner in preCompact and return their own implementation.  They can then apply custom policy on the fly before returning KeyValues from the scanner.  Alternately, the coprocessor could set the &quot;bypass&quot; flag in preCompact, which will skip the normal process of writing out a new store file.  In this case, the coprocessor is indicating that it will handle the store file writing itself.  Once the coprocessor has written a new store file, it will need to explicitly tell the Store instance to load it using bulkLoadHFile().&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3842&quot; title=&quot;Refactor Coprocessor Compaction API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3842&quot;&gt;&lt;del&gt;HBASE-3842&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3842&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-3842&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.java d473ba7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java 008d027 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 30c9d69 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java 53645ce &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 655db7d &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java c0b7267 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java c2af6a1 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java a8edb42 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java b370ff0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/1686/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Added a new test case &amp;#8211; TestRegionObserverInterface#testCompactionOverride &amp;#8211; to verify custom compaction handling using an InternalScanner implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;All additional coprocessor related tests pass.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Gary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13095692" author="jiraposter@reviews.apache.org" created="Fri, 2 Sep 2011 00:28:09 +0000"  >

&lt;blockquote&gt;&lt;p&gt;On 2011-09-01 04:21:24, Andrew Purtell wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java, line 146&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; &amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/1686/diff/2/?file=37163#file37163line146&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/diff/2/?file=37163#file37163line146&lt;/a&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt;     Should this be in its own change set?&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Gary Helmling wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Adding ImmutableList from Google Guava to the RegionObserver.postCompactSelection() signature broke the CP class compilation being done internally here, so I wanted to include a fix.  This seemed the cleanest way.  Alternately, we could change the method signature to use just List, but I do like making the immutability explicit.  It&apos;s more self-documenting that way.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Makes sense, thanks.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Andrew&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/1686/#review1713&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/#review1713&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2011-09-01 02:35:36, Gary Helmling wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/1686/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-09-01 02:35:36)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This patch adds two new hooks to wrap the selection process for store files to compact:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void preCompactSelection(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final List&amp;lt;StoreFile&amp;gt; candidates);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void postCompactSelection(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final ImmutableList&amp;lt;StoreFile&amp;gt; selected);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;In addition, the existing preCompact and postCompact methods have been refactored as described in JIRA:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;InternalScanner preCompact(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, final InternalScanner scanner);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;void postCompact(final ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;final Store store, StoreFile resultFile);&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Coprocessors that wish to override compaction behavior can wrap the provided InternalScanner in preCompact and return their own implementation.  They can then apply custom policy on the fly before returning KeyValues from the scanner.  Alternately, the coprocessor could set the &quot;bypass&quot; flag in preCompact, which will skip the normal process of writing out a new store file.  In this case, the coprocessor is indicating that it will handle the store file writing itself.  Once the coprocessor has written a new store file, it will need to explicitly tell the Store instance to load it using bulkLoadHFile().&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3842&quot; title=&quot;Refactor Coprocessor Compaction API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3842&quot;&gt;&lt;del&gt;HBASE-3842&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3842&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-3842&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.java d473ba7 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java 008d027 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 30c9d69 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java 53645ce &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 655db7d &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java c0b7267 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java c2af6a1 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java a8edb42 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java b370ff0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/1686/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/1686/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Added a new test case &amp;#8211; TestRegionObserverInterface#testCompactionOverride &amp;#8211; to verify custom compaction handling using an InternalScanner implementation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;All additional coprocessor related tests pass.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Gary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13098288" author="ghelmling" created="Tue, 6 Sep 2011 19:21:47 +0000"  >&lt;p&gt;Final patch committed to trunk.&lt;/p&gt;</comment>
                            <comment id="13098289" author="ghelmling" created="Tue, 6 Sep 2011 19:22:22 +0000"  >&lt;p&gt;Committed to trunk.&lt;/p&gt;</comment>
                            <comment id="13098407" author="hudson" created="Tue, 6 Sep 2011 22:02:22 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #2178 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/2178/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/2178/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3842&quot; title=&quot;Refactor Coprocessor Compaction API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3842&quot;&gt;&lt;del&gt;HBASE-3842&lt;/del&gt;&lt;/a&gt;  Refactor RegionObserver compaction API for easier overriding of policy&lt;/p&gt;

&lt;p&gt;garyh : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/CHANGES.txt&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserver.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/coprocessor/TestClassLoading.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverInterface.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15017538" author="lars_francke" created="Fri, 20 Nov 2015 12:43:30 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12513076">HBASE-4071</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12503555">HBASE-3745</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                            <outwardlinks description="requires">
                                        <issuelink>
            <issuekey id="12504602">HBASE-3797</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12493196" name="HBASE-3842_final.patch" size="26575" author="ghelmling" created="Tue, 6 Sep 2011 19:21:47 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 2 May 2011 18:02:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33230</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0ho5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>101174</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>