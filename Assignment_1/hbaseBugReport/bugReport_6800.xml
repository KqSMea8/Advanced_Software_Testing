<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:39:58 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-6800/HBASE-6800.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-6800] Build a Document Store on HBase for Better Query Processing</title>
                <link>https://issues.apache.org/jira/browse/HBASE-6800</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;In the last couple of years, increasingly more people begin to stream data into HBase in near time, and &lt;br/&gt;
use high level queries (e.g., Hive) to analyze the data in HBase directly. While HBase already has very effective MapReduce integration with its good scanning performance, query processing using MapReduce on HBase still has significant gaps compared to HDFS: ~3x space overheads and 3~5x performance overheads according to our measurement.&lt;/p&gt;

&lt;p&gt;We propose to implement a document store on HBase, which can greatly improve query processing on HBase (by leveraging the relational model and read-mostly access patterns). According to our prototype, it can reduce space usage by up-to ~3x and speedup query processing by up-to ~1.8x.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12607876">HBASE-6800</key>
            <summary>Build a Document Store on HBase for Better Query Processing</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jason.dai">Jason Dai</reporter>
                        <labels>
                    </labels>
                <created>Mon, 17 Sep 2012 08:46:11 +0000</created>
                <updated>Wed, 19 Sep 2012 00:41:28 +0000</updated>
                                            <version>0.95.2</version>
                                                    <component>Coprocessors</component>
                    <component>Performance</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>30</watches>
                                                                                                            <comments>
                            <comment id="13457242" author="apurtell" created="Mon, 17 Sep 2012 19:20:04 +0000"  >&lt;p&gt;Thank you for your interest in contributing to the HBase project. I have two initial comments/suggestions:&lt;/p&gt;

&lt;p&gt;1) From the attached document, it appears that the existing coprocessor framework was sufficient for the implementation of the DOT system on top, which is great to see. There has been some discussion in the HBase PMC, documented in the archives of the dev@hbase.apache.org mailing list, that coprocessor based applications should begin as independent code contributions, perhaps hosted in a GitHub repository. In your announcement on general@ I see you have sort-of done this already at: &lt;a href=&quot;https://github.com/intel-hadoop/hbase-0.94-panthera&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/intel-hadoop/hbase-0.94-panthera&lt;/a&gt; , except this is a full fork of the HBase source tree with all history of individual changes lost (a single commit of a source drop). It would be helpful if only the changes on top of stock HBase code appear here. Otherwise, what you have done is in effect forked the HBase project, which is not conducive to contribution. &lt;/p&gt;

&lt;p&gt;2) From the design document: &quot;The co-processor framework needs to be extended to provide observers for the filter operations, similar to the observers of the data access operations.&quot; We would be delighted to work with you on the necessary coprocessor framework extensions. I&apos;d recommend a separate JIRA specifically for this. Let&apos;s discuss what Coprocessor API extensions or additions are necessary. Do you have a proposal?&lt;/p&gt;</comment>
                            <comment id="13457508" author="jason.dai" created="Tue, 18 Sep 2012 00:40:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;coprocessor based applications should begin as independent code contributions, perhaps hosted in a GitHub repository&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;It would be helpful if only the changes on top of stock HBase code appear here.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This could work, though I think we need to figure out how to address several implications brought by the proposal, such as:&lt;br/&gt;
(1) How do the users figure out what co-processor applications are stable, so that they can use in their production deployment?&lt;br/&gt;
(2) How do we ensure the co-processor applications continue to be compatible with the changes in the HBase project, and compatible with each other?&lt;br/&gt;
(3) How do the users get the co-processor applications? They can no longer get these from the Apache HBase release, and may need to perform manual integrations - not something average business users will do, and the main reason that we put the full HBase source tree out (several of our users and customers want to get a prototype of DOT to try it out).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We would be delighted to work with you on the necessary coprocessor framework extensions. I&apos;d recommend a separate JIRA specifically for this.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, we do plan to submit the proposal for observers for the filter operations as a separate JIRA (the original plan was to make it a sub task of this JIRA).&lt;/p&gt;
</comment>
                            <comment id="13457527" author="yuzhihong@gmail.com" created="Tue, 18 Sep 2012 01:22:50 +0000"  >&lt;p&gt;@Jason:&lt;br/&gt;
You raised some interesting questions.&lt;/p&gt;

&lt;p&gt;I think you may be aware of the modularization effort in trunk. Matt Corgan is submitting his contribution as a separate module.&lt;br/&gt;
This model may be the answer to some of your questions.&lt;/p&gt;</comment>
                            <comment id="13457564" author="apurtell" created="Tue, 18 Sep 2012 02:54:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;(1) How do the users figure out what co-processor applications are stable, so that they can use in their production deployment?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is exactly the motivation for starting all coprocessor based applications/contributions as external projects. We will have no registry of &quot;approved&quot; or &quot;stable&quot; coprocessor applications. I&apos;d imagine users would expect all such apps in the HBase distribution proper to be in such a state. Beyond that, I don&apos;t think the project can have the bandwidth to track a number of ideas in development. We can&apos;t know in advance what support, interest, or stability any given contribution would have, so starting as an external project establishes this on its own merit. A popular and well cared for contribution would eventually be candidate for inclusion into the HBase source distribution proper. This is my characterization of what has been discussed and the consensus reached by the PMC. If others feel this in error, or if we should do something differently here, please speak up.&#160;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&#160;(2) How do we ensure the co-processor applications continue to be compatible with the changes in the HBase project, and compatible with each other?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We don&apos;t. The onus is on the contributor. If at some point the consensus of the project is to bring in a particular contribution into the ASF HBase source distribution, then at that point we must insure these things... But only with what is in the source distribution.&#160;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&#160;(3) How do the users get the co-processor applications? They can no longer get these from the Apache HBase release, and may need to perform manual integrations - not something average business users will do, and the main reason that we put the full HBase source tree out&#160;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;HBase is a mavenized project and your DOT system is a coprocessor application. There is no technical reason, barring issues with the CP framework itself, I can see why you have to include and maintain a full fork of HBase. Simply depend on HBase project artifacts and the complete DOT application can be compiled as a jar to drop on the classpath of a HBase installation. Where the CP framework may be insufficient, we can address that. Or, if there is some other technical reason (like a patch to core HBase), please list those so we can look at addressing it.&#160;&lt;/p&gt;

&lt;p&gt;Like Ted says also, the modularization of HBase means we could accept a mavenized project that depends on HBase core artifacts pretty easily.&#160;&lt;/p&gt;</comment>
                            <comment id="13457664" author="eric14" created="Tue, 18 Sep 2012 07:24:50 +0000"  >&lt;p&gt;If moving your code into Apache is a goal, you could also start the co-processor project in the apache incubator.  You could do that while being consistent with andrew&apos;s suggested methodology (not forking HBase, mavenized integration...).&lt;/p&gt;

&lt;p&gt;In terms of dealing with the synchronization issue, you can work with orgs / projects that bundle distributions for business users.  Apache BigTop being an example of such a group.&lt;/p&gt;</comment>
                            <comment id="13457770" author="jason.dai" created="Tue, 18 Sep 2012 12:25:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;If moving your code into Apache is a goal, you could also start the co-processor project in the apache incubator. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This sounds like an interesting idea. A potential objective of the project is to provide a full-fledged document store on HBase - in addition to the analytic improvements demonstrated by DOT, it can also provide support for update of individual fields, nested documents,  flexible document schema, columnar document storage, etc.&lt;/p&gt;</comment>
                            <comment id="13457902" author="yuzhihong@gmail.com" created="Tue, 18 Sep 2012 16:07:28 +0000"  >&lt;p&gt;@Jason:&lt;br/&gt;
In the description of this JIRA, you mentioned that DOT serves &apos;read-mostly access patterns&apos;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;it can also provide support for update of individual fields&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I want to get your opinion on how the above can be achieved. Considering that the relative size of individual field(s) in the document can be small, the cost of update would be comparatively higher than a fully de-normalized schema.&lt;/p&gt;</comment>
                            <comment id="13457945" author="apurtell" created="Tue, 18 Sep 2012 16:51:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;&#160;If moving your code into Apache is a goal, you could also start the co-processor project in the apache incubator. &#160;You could do that while being consistent with andrew&apos;s suggested methodology (not forking HBase, mavenized integration...).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a good suggestion. Panthera isn&apos;t so much an enhancement to HBase but rather a full application on top, and with wider scope than just HBase &amp;#8211; also Hive, and additional new components. In the scope of the HBase project alone, API changes, core changes, and (incorporating my earlier comment) utility coprocessors of sufficient generality make a lot of sense, as well as addressing the meta issues raised (I.e. should HBase have Eclipse plugin like tooling for getting and installing CPs). HBase should be a good platform for your work, let us know what you need.&lt;/p&gt;</comment>
                            <comment id="13458331" author="jason.dai" created="Wed, 19 Sep 2012 00:41:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;Considering that the relative size of individual field(s) in the document can be small, the cost of update would be comparatively higher than a fully de-normalized schema.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;One option is to take the similar approach as HBaseHUT (&lt;a href=&quot;https://github.com/sematext/HBaseHUT&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/sematext/HBaseHUT&lt;/a&gt;), which converts RMW to updates, and constructs the up-to-date value on the fly. &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12608050">HBASE-6805</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12545380" name="dot-deisgn.pdf" size="361559" author="jason.dai" created="Mon, 17 Sep 2012 08:46:58 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12608050">HBASE-6805</subtask>
                            <subtask id="12624579">HBASE-7387</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 17 Sep 2012 19:20:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>242458</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 13 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02v1j:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14630</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>