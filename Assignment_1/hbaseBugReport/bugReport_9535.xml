<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:05:21 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-9535/HBASE-9535.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-9535] Try a pool of direct byte buffers handling incoming ipc requests</title>
                <link>https://issues.apache.org/jira/browse/HBASE-9535</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;ipc takes in a query by allocating a ByteBuffer of the size of the request and then reading off the socket into this on-heap BB.&lt;/p&gt;

&lt;p&gt;Experiment with keeping a pool of BBs so we have some buffer reuse to cut on garbage generated.  Could checkout from pool in RpcServer#Reader.  Could check back into the pool when Handler is done just before it queues the response on the Responder&apos;s queue.  We should be good since, at least for now, kvs get copied up into MSLAB (not references) when data gets stuffed into MemStore; this should make it so no references left over when we check the BB back into the pool for use next time around.&lt;/p&gt;

&lt;p&gt;If on-heap BBs work, we could then try direct BBs (Allocation of DBBs takes time so if already allocated, should be good.  GC of DBBs is a pain but if in a pool, we shouldn&apos;t be wanting this to happen).  The copy from socket to the DBB will be off-heap (should be fast).&lt;/p&gt;

&lt;p&gt;Could start w/ the HDFS DirectBufferPool.  It is unbounded and keeps items by size (we might want to bypass the pool if an object is &amp;gt; size N).&lt;/p&gt;

&lt;p&gt;DBBs for this task would contend w/ offheap BBs used in BlockReadLocal when short-circuit reading.  It&apos;d be a bummer if we had to allocate big objects on-heap.  Would still be an improvement.&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12668663">HBASE-9535</key>
            <summary>Try a pool of direct byte buffers handling incoming ipc requests</summary>
                <type id="13" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/genericissue.png">Brainstorming</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="10">Implemented</resolution>
                                        <assignee username="nkeywal">Nicolas Liochon</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Sun, 15 Sep 2013 04:30:49 +0000</created>
                <updated>Thu, 19 Mar 2015 17:57:20 +0000</updated>
                            <resolved>Thu, 19 Mar 2015 17:57:20 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>16</watches>
                                                                <comments>
                            <comment id="13767875" author="vrodionov" created="Sun, 15 Sep 2013 18:25:05 +0000"  >&lt;p&gt;ThreadLocals won&apos;t work? I mean, instead of pool we can keep BB in ThreadLocal variables. I suppose all incoming RPC requests are served already by a fixed pool of threads? &lt;/p&gt;</comment>
                            <comment id="13767927" author="stack" created="Sun, 15 Sep 2013 21:55:10 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;  Thread local could work.  There is a bit of a mismatch though since we read in one thread and the processing is done in another altogether (There are 10 Reader threads.  We&apos;d need the buffer available at read time.  They read the request, put it on a queue from which the Handler threads pick it up.  There are usually many more handlers than Readers (50 Handlers by default but could be hundreds).  Maybe we should purge the Reader+queuing step and just have Handlers do the read (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkeywal&quot; class=&quot;user-hover&quot; rel=&quot;nkeywal&quot;&gt;Nicolas Liochon&lt;/a&gt; what you think?)&lt;/p&gt;</comment>
                            <comment id="13767931" author="vrodionov" created="Sun, 15 Sep 2013 22:11:57 +0000"  >&lt;p&gt;Nope, I was wrong ThreadLocals will work only if read/handle are in the same thread. Three different pools (Readers, Handlers and Senders) in HBase RPC seem like an old legacy. NIO, Netty? &lt;/p&gt;</comment>
                            <comment id="13767968" author="stack" created="Mon, 16 Sep 2013 00:42:19 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt; Yeah, legacy.  Yeah to trying Netty.&lt;/p&gt;</comment>
                            <comment id="13768128" author="nkeywal" created="Mon, 16 Sep 2013 07:29:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;Maybe we should purge the Reader+queuing step and just have Handlers do the read (Nicolas Liochon what you think?)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;ve tried something similar (I removed the handlers and kept the readers), but the performance was not visible.&lt;br/&gt;
The responder seemed to be a bottleneck. But it was not the only issue: we also want to manage priorities between the tasks, but we need to read them to get enough information to make the right priorities.&lt;/p&gt;</comment>
                            <comment id="13768215" author="xieliang007" created="Mon, 16 Sep 2013 10:31:18 +0000"  >&lt;p&gt;i have some times these days, will work(test) it from tomorrow and give some perf number if available, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13768485" author="stack" created="Mon, 16 Sep 2013 16:55:07 +0000"  >&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;~liochon&amp;#93;&lt;/span&gt; It&apos;d be simpler getting rid of Handler &amp;#8211; or rather have Handler do the read.  Could park itself if priority was inappropriate at time of read?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=xieliang007&quot; class=&quot;user-hover&quot; rel=&quot;xieliang007&quot;&gt;Liang Xie&lt;/a&gt; Excellent.&lt;/p&gt;</comment>
                            <comment id="13770622" author="xieliang007" created="Wed, 18 Sep 2013 09:53:24 +0000"  >&lt;p&gt;to me, seems the RPC&apos;s &quot;ByteBuffer.allocate&quot; is not in the top contributor list for gc.&lt;/p&gt;

&lt;p&gt;I added logs below&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
data = ByteBuffer.allocate(dataLength);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in SecureServer.java (my test env is security enabled)&lt;/p&gt;

&lt;p&gt;for a 100%read ycsb scenario, yes, this log shows the data lengths are similar with each other(that means it&apos;s very easier to reuse/pool the byte buffers), but after a raw estimation:&lt;/p&gt;

&lt;p&gt;my config: Xmn512m Xmx4096m&lt;br/&gt;
my result: SecureServer.readAndProcess, dataLength:162;read throughput 7000ops;&lt;br/&gt;
&quot;jstat -gcutil&quot; shows about 5ygc per second&lt;/p&gt;

&lt;p&gt;&quot;7000 * 162&quot; is just 1MB more or less, is just a little portion of Xmn size, so per my view, seems it doesn&apos;t very helpful to improve gc...&lt;/p&gt;</comment>
                            <comment id="13771609" author="stack" created="Thu, 19 Sep 2013 05:44:31 +0000"  >&lt;p&gt;Thanks for doing a bit of math &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=xieliang007&quot; class=&quot;user-hover&quot; rel=&quot;xieliang007&quot;&gt;Liang Xie&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;d say 162 bytes is unusually small for a request as is the ycsb workload where queries are all the same size.  What if the requests were bigger, say 1-100k and we were doing 2-5k requests a second?  Lets say 5k * 10k for easy calc.  That&apos;d be 50MB a second in the YG not counting any other creations.  Some of these items could get promoted if there were pressure in YG.  What if server was getting up to 1MB cells and we were doing 1k or more hits a second.&lt;/p&gt;

&lt;p&gt;The alternative is that these items would not go through the YG at all.&lt;/p&gt;

&lt;p&gt;How long did you run your test for?  How long were the ygcs each second?&lt;/p&gt;

&lt;p&gt;I&apos;d still be interested in trying this out since seems easy enough to do.   Thanks boss.&lt;/p&gt;</comment>
                            <comment id="13771920" author="xieliang007" created="Thu, 19 Sep 2013 14:14:58 +0000"  >&lt;p&gt;If i remembered correctly, in my test result, the avg ygct is 0.2s per one sec, means the avg each ygc costs 200ms/5 = 40ms.&lt;/p&gt;

&lt;p&gt;good on you, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, hope you can get a better result&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;</comment>
                            <comment id="13832703" author="nkeywal" created="Tue, 26 Nov 2013 15:53:03 +0000"  >&lt;p&gt;fwiw, I&apos;m trying some stuff around this currently.&lt;/p&gt;</comment>
                            <comment id="13832853" author="nkeywal" created="Tue, 26 Nov 2013 18:37:34 +0000"  >&lt;p&gt;work in progress. This passes the TestHCM.&lt;/p&gt;

&lt;p&gt;One of the difficult point is that we need to have a pool for the ByteBuffer, but it&apos;s difficult to know when we can give back the buffer to the pool. If we give it back at the end of the readAndProcess, the rpc doesn&apos;t workanymore, so someone must depend on it somewhere. That&apos;s not bad in theory, because if we keep the request until the end we could save some array copy (protobuf does copy all the time today, so we would need to bypass it in a way or another)&lt;/p&gt;

</comment>
                            <comment id="13832920" author="stack" created="Tue, 26 Nov 2013 19:25:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;One of the difficult point is that we need to have a pool for the ByteBuffer&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;... yeah.  And this pool will contend w/ the unbounded one we have in place doing SSR.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we give it back at the end of the readAndProcess, the rpc doesn&apos;t workanymore, so someone must depend on it somewhere. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What do you mean when you say &quot;rpc doesn&apos;t work anymore&quot;?  Oh, you are saying it is being held on to past readAndProcess?  Yeah, would be coolio to have a DBB per inbound-request.&lt;/p&gt;

&lt;p&gt;Good on you N.&lt;/p&gt;

&lt;p&gt;On patch, you pull in classes just for your test?&lt;/p&gt;

&lt;p&gt;Looks good so far&lt;/p&gt;




</comment>
                            <comment id="13833023" author="nkeywal" created="Tue, 26 Nov 2013 20:36:06 +0000"  >&lt;blockquote&gt;&lt;p&gt;What do you mean when you say &quot;rpc doesn&apos;t work anymore&quot;?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The server gets stuck somewhere. I don&apos;t really know where nor why.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;On patch, you pull in classes just for your test?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I plan to keep them. The pool is only in hadoop 2, so we need it for hadoop 1 compat. The ByteBufferInputStream is a technical class. It&apos;s public in ZK, but not really part of their API... And I&apos;ve done some changes already.&lt;/p&gt;</comment>
                            <comment id="13833036" author="stack" created="Tue, 26 Nov 2013 20:46:25 +0000"  >&lt;p&gt;ok.  We need to put any bounded DBB pool back in hdfs when we have a working one... later.  Good on you N.&lt;/p&gt;</comment>
                            <comment id="13833407" author="xieliang007" created="Wed, 27 Nov 2013 03:21:42 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkeywal&quot; class=&quot;user-hover&quot; rel=&quot;nkeywal&quot;&gt;Nicolas Liochon&lt;/a&gt;, do you have any gc perf numbers before and after the patch? I am interesting to know is there any scenarios existing could observe the gc improvement after pooling ipc memory. &lt;/p&gt;</comment>
                            <comment id="13833526" author="lhofhansl" created="Wed, 27 Nov 2013 06:42:38 +0000"  >&lt;p&gt;Do we need a BB of the size of the request? Would be better if we allocated fix sized small&apos;ish (8-128k) BBs and read in chunks. In that case I would posit that we won&apos;t need a pool.&lt;/p&gt;</comment>
                            <comment id="13833622" author="nkeywal" created="Wed, 27 Nov 2013 10:00:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;do you have any gc perf numbers before and after the patch? I am interesting to know is there any scenarios existing could observe the gc improvement after pooling ipc memory. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will do a test... when it works &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I&apos;m aiming more at the array copy here. But it could have a nice effect on the gc as well when the system is loaded; the query could get promoted to older generations (may be).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do we need a BB of the size of the request? Would be better if we allocated fix sized small&apos;ish (8-128k) BBs and read in chunks.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t know actually. I&apos;m trying to minimize the changes. I suppose I would have to create a specific InputStream to hide this for the prototobuf parser.&lt;br/&gt;
The idea is nice. I don&apos;t know if we have lock issues,  that would justify doing a single read to help to free the lock sooner.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In that case I would posit that we won&apos;t need a pool.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Do you have some insight on this: there is a lot of &quot;it depends on the jvm and the hardware&quot; when it comes to the cost of doing a direct allocate. If we can make more assumptions on the allocation speed on &quot;jvm 1.7+ on modern hardware&quot;, it would help for sure. &lt;/p&gt;</comment>
                            <comment id="13833641" author="nkeywal" created="Wed, 27 Nov 2013 10:49:44 +0000"  >&lt;p&gt;fwiw, it looked at the code called when you&apos;re doing a direct allocate, and I saw, in java.nio.Bits&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-comment&quot;&gt;// These methods should be called whenever direct memory is allocated or
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// freed.  They allow the user to control the amount of direct memory
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// which a process may access.  All sizes are specified in bytes.
&lt;/span&gt;    &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void reserveMemory(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; size) {

	&lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (Bits.class) { &amp;lt;================================ hum
	    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!memoryLimitSet &amp;amp;&amp;amp; VM.isBooted()) {
		maxMemory = VM.maxDirectMemory();
		memoryLimitSet = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
	    }
	    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (size &amp;lt;= maxMemory - reservedMemory) {
		reservedMemory += size;
		&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
	    }
	}

	&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.gc();  &amp;lt;============================================= ok...
	&lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
	    &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.sleep(100); &amp;lt;============================================= wow
	} &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException x) {
	    &lt;span class=&quot;code-comment&quot;&gt;// Restore interrupt status
&lt;/span&gt;	    &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.currentThread().interrupt();
	}
	&lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; (Bits.class) {
	    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (reservedMemory + size &amp;gt; maxMemory)
		&lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; OutOfMemoryError(&lt;span class=&quot;code-quote&quot;&gt;&quot;Direct buffer memory&quot;&lt;/span&gt;);
	    reservedMemory += size;
	}

    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13834018" author="lhofhansl" created="Wed, 27 Nov 2013 18:33:30 +0000"  >&lt;p&gt;Meh... &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
DBBs are hard to get right. The JDK makes DBBs for BBs, when used in IO, under the hood, though. For each requested size it makes a new one and (in JDK6 at least) keeps 3 of them around. So it is quite important to use BBs of the same size only.&lt;/p&gt;

&lt;p&gt;You&apos;re right we should measure it.&lt;/p&gt;</comment>
                            <comment id="13834219" author="nkeywal" created="Wed, 27 Nov 2013 22:10:58 +0000"  >&lt;p&gt;v2 is still incomplete, but does work now. I think I have to use some guava stuff to use a fifo policy on the pool however.&lt;br/&gt;
I&apos;ve got a 7% improvement on this one, with my YCSB + empty table test. It&apos;s not bad, and there is another advantage: as we allocate the memory off heap, it does not interfere with the GC, so it&apos;s good when we have a server with a lot of memory that is so difficult to use in Java.&lt;br/&gt;
It&apos;s not a full test, I need to look more at what the gc is doing.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So it is quite important to use BBs of the same size only.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The hadoop pool has a very simple policy for this: it takes the first buffer &quot;big enough&quot; instead of &quot;at the same size&quot;. This seems smart. It could be even smarter to use the &quot;smallest big enough one&quot;.&lt;/p&gt;</comment>
                            <comment id="13834443" author="xieliang007" created="Thu, 28 Nov 2013 01:43:49 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkeywal&quot; class=&quot;user-hover&quot; rel=&quot;nkeywal&quot;&gt;Nicolas Liochon&lt;/a&gt;, good to see there&apos;s an improvement !  I am planning to take a look at your patch to learn today&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13834693" author="xieliang007" created="Thu, 28 Nov 2013 10:17:46 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkeywal&quot; class=&quot;user-hover&quot; rel=&quot;nkeywal&quot;&gt;Nicolas Liochon&lt;/a&gt; It would be great to add some mem used counters arond ElasticByteBufferPool, that will be useful while we encourntered a OOM&lt;/p&gt;</comment>
                            <comment id="13834707" author="nkeywal" created="Thu, 28 Nov 2013 10:39:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;It would be great to add some mem used counters arond ElasticByteBufferPool, that will be useful while we encourntered a OOM&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah, I agree. I&apos;m actually wondering if I have to integrate it to the metrics from day one or if I can wait.&lt;/p&gt;

&lt;p&gt;Thanks for looking at the patch. It&apos;s still early stage, yes. If you can try it from a performance point of view, I&apos;m interested.&lt;/p&gt;

&lt;p&gt;I would like to have a &quot;good enough&quot;  (i.e. fully implemented with the right configuration parameters available) version for tomorrow.&lt;/p&gt;
</comment>
                            <comment id="13835020" author="hadoopqa" created="Thu, 28 Nov 2013 18:10:38 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12616295/9535.v3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12616295/9535.v3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8026//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8026//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13835330" author="hadoopqa" created="Fri, 29 Nov 2013 11:41:36 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12616360/9535.v2-trunk.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12616360/9535.v2-trunk.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.ipc.TestIPC&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8029//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13835487" author="nkeywal" created="Fri, 29 Nov 2013 18:21:21 +0000"  >&lt;p&gt;My tests shows a ~4% improvement with the last version. I will need to check why we lost 3 points.&lt;/p&gt;

&lt;p&gt;the test with ycsb and and empty table, on the same machine, shows:&lt;br/&gt;
trunk: 165K/s&lt;br/&gt;
trunk with patch: 173K/s&lt;br/&gt;
0.96: 172K/s&lt;br/&gt;
0.96 with patch: 178K/s&lt;/p&gt;

&lt;p&gt;It&apos;s not a huge difference. In a real cluster, it should be even less important: ycsb sends huge messages (6 mb), and we have a 100% hit ratio on the pool. But it&apos;s a step in the good direction I would say.&lt;/p&gt;</comment>
                            <comment id="13835535" author="stack" created="Fri, 29 Nov 2013 20:25:31 +0000"  >&lt;p&gt;You have diff of GC use?&lt;/p&gt;</comment>
                            <comment id="13836022" author="nkeywal" created="Sun, 1 Dec 2013 13:09:38 +0000"  >&lt;blockquote&gt;&lt;p&gt;You have diff of GC use?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Not really. I&apos;ve looked at the gc through the profile, it was around 4 minor gc/s with CMS, 1/s with G1, w/ or w/o the patch. I don&apos;t think the patch makes a difference in this scenario, as with YCSB puts we have a few large allocations, instead of ismultiple tiny ones. So for this scenario I think the benefit comes from the array copy suppressed. &lt;/p&gt;</comment>
                            <comment id="14369807" author="stack" created="Thu, 19 Mar 2015 17:57:20 +0000"  >&lt;p&gt;Closing as &apos;implemented&apos; by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13142&quot; title=&quot;[PERF] Reuse the IPCUtil#buildCellBlock buffer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13142&quot;&gt;&lt;del&gt;HBASE-13142&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The approach in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13142&quot; title=&quot;[PERF] Reuse the IPCUtil#buildCellBlock buffer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13142&quot;&gt;&lt;del&gt;HBASE-13142&lt;/del&gt;&lt;/a&gt; differs from what is here in that rather than have a pool of buffers of various sizes, instead we have a pool of buffers whose sizes all climb to some upper bound. If the RPC is of a size beyond this buffer size, we allocate a buffer just for this rpc.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13142&quot; title=&quot;[PERF] Reuse the IPCUtil#buildCellBlock buffer&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13142&quot;&gt;&lt;del&gt;HBASE-13142&lt;/del&gt;&lt;/a&gt; has numbers on benefit most apparent in CPU and GC when rowsize is 10s of ks.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12637700">HBASE-8143</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12679978">HBASE-10002</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12615873" name="9535.v1.patch" size="28062" author="nkeywal" created="Tue, 26 Nov 2013 18:37:34 +0000"/>
                            <attachment id="12616360" name="9535.v2-trunk.patch" size="34622" author="nkeywal" created="Fri, 29 Nov 2013 11:07:15 +0000"/>
                            <attachment id="12616138" name="9535.v2.patch" size="24667" author="nkeywal" created="Wed, 27 Nov 2013 21:59:26 +0000"/>
                            <attachment id="12616295" name="9535.v3.patch" size="35652" author="nkeywal" created="Thu, 28 Nov 2013 17:56:19 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 15 Sep 2013 18:25:05 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>348597</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 39 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1o3xb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>348894</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>