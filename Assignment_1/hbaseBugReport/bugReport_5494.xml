<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:28:15 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-5494/HBASE-5494.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-5494] Introduce a zk hosted table-wide read/write lock so only one table operation at a time</title>
                <link>https://issues.apache.org/jira/browse/HBASE-5494</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I saw this facility over in the accumulo code base.&lt;/p&gt;

&lt;p&gt;Currently we just try to sort out the mess when splits come in during an online schema edit; somehow we figure we can figure all possible region transition combinations and make the right call.&lt;/p&gt;

&lt;p&gt;We could try and narrow the number of combinations by taking out a zk table lock when doing table operations.&lt;/p&gt;

&lt;p&gt;For example, on split or merge, we could take a read-only lock meaning the table can&apos;t be disabled while these are running.&lt;/p&gt;

&lt;p&gt;We could then take a write only lock if we want to ensure the table doesn&apos;t change while disabling or enabling process is happening.&lt;/p&gt;

&lt;p&gt;Shouldn&apos;t be too hard to add.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12544674">HBASE-5494</key>
            <summary>Introduce a zk hosted table-wide read/write lock so only one table operation at a time</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="avf">Alex Feinberg</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Wed, 29 Feb 2012 21:25:47 +0000</created>
                <updated>Thu, 2 May 2013 02:29:50 +0000</updated>
                            <resolved>Sat, 12 May 2012 04:16:59 +0000</resolved>
                                                    <fixVersion>0.89-fb</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13220585" author="mubarakseyed" created="Fri, 2 Mar 2012 01:35:52 +0000"  >&lt;p&gt;We can store &amp;lt;zookeeper.znode.parent&amp;gt;/locks/&amp;lt;table_name&amp;gt;&lt;/p&gt;

&lt;p&gt;and data could be&lt;br/&gt;
txId (lock held by a transaction id)&lt;br/&gt;
Mode (W or R)&lt;br/&gt;
State&lt;/p&gt;</comment>
                            <comment id="13220591" author="tlipcon" created="Fri, 2 Mar 2012 01:45:25 +0000"  >&lt;p&gt;Might be worth considering region-specific locks as well? Or is that too much scope creep? (of course we&apos;d need to ensure a locking order to avoid deadlock)&lt;/p&gt;</comment>
                            <comment id="13220680" author="stack" created="Fri, 2 Mar 2012 05:28:48 +0000"  >&lt;p&gt;I think maybe region locks is for later.  Meantime, getting a read lock on the table when doing a split or merge might carry us a long way.....before we need region specific locks.&lt;/p&gt;

&lt;p&gt;@Mubarak Todd has a good point that respecting locking order is important.  Maybe we should use the facility where zk can add the seqid to the name?  So maybe locks are named:&lt;/p&gt;

&lt;p&gt;&amp;lt;zookeeper.znode.parent&amp;gt;/locks/&amp;lt;table_name&amp;gt;/r-seqid&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;&amp;lt;zookeeper.znode.parent&amp;gt;/locks/&amp;lt;table_name&amp;gt;/w-seqid&lt;/p&gt;

&lt;p&gt;where the data then is details on who took the lock?&lt;/p&gt;

&lt;p&gt;And you can&apos;t take a write lock if any instances of read lock outstanding?&lt;/p&gt;

&lt;p&gt;I was thinking that maybe clients would be prepared to wait some time obtaining a read lock but that they might fail fast if they could not get a read lock?&lt;/p&gt;</comment>
                            <comment id="13223343" author="ram_krish" created="Tue, 6 Mar 2012 15:50:15 +0000"  >&lt;p&gt;Is this similar to &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5373&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-5373&lt;/a&gt; ?&lt;/p&gt;</comment>
                            <comment id="13223350" author="stack" created="Tue, 6 Mar 2012 15:55:35 +0000"  >&lt;p&gt;@Ram Yes sir.  Thanks.  Resolved hbase-5373 as duplicate of this.&lt;/p&gt;</comment>
                            <comment id="13236857" author="stack" created="Fri, 23 Mar 2012 18:02:16 +0000"  >&lt;p&gt;Thinking on this, I started to sketch a scheme where /unassigned in zk became instead /regions and under /regions there&apos;d be a subdir per table and then under each table, you&apos;d do something like what is described here &lt;a href=&quot;http://zookeeper.apache.org/doc/r3.1.2/recipes.html#Shared+Locks&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://zookeeper.apache.org/doc/r3.1.2/recipes.html#Shared+Locks&lt;/a&gt; only instead of read/write we&apos;d have a sort of exclusive-access vs non-exclusive-access.&lt;/p&gt;

&lt;p&gt;Already the above would be a massive refactor not to mind compounding it with the fact that doing an exclusive-operation, you&apos;ll usually want to do something like close all regions on a table (disabling) and to do that you&apos;d need to be able to do non-exclusive operations...&lt;/p&gt;

&lt;p&gt;Let me start over and make a little grid of what operations we do not want to run concurrently.  Will post here.   Might be able to get away w/ something less disruptive and more basic.&lt;/p&gt;</comment>
                            <comment id="13236943" author="stack" created="Fri, 23 Mar 2012 18:59:06 +0000"  >&lt;p&gt;Hmm... NVM.  First I need to figure out complete set of zk states and operations they trigger.  Making a start up here: &lt;a href=&quot;https://docs.google.com/spreadsheet/ccc?key=0Aoa3E58mCyOfdFFCY3RmMW9ZeEliTndLNGRNWVBCZkE&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/spreadsheet/ccc?key=0Aoa3E58mCyOfdFFCY3RmMW9ZeEliTndLNGRNWVBCZkE&lt;/a&gt; Don&apos;t look yet.  It has nothing in it yet.&lt;/p&gt;</comment>
                            <comment id="13237789" author="stack" created="Sun, 25 Mar 2012 06:23:03 +0000"  >&lt;p&gt;Instead, doing &lt;a href=&quot;https://docs.google.com/document/d/1oqEmR35rDfp3OmGxymhWiwdea9mdKo4cZs_xSCg6yOw/edit&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/document/d/1oqEmR35rDfp3OmGxymhWiwdea9mdKo4cZs_xSCg6yOw/edit&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267658" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 18:20:49 +0000"  >&lt;p&gt;avf requested code review of &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;br/&gt;
Reviewers: Kannan, mbautin, Liyin, JIRA&lt;/p&gt;

&lt;p&gt;  Since concurrent modification (e.g., disabling and dropping a table under&lt;br/&gt;
  creation) could leave a cluster in an inconsistent state, we need table-level&lt;br/&gt;
  locks for schema changing operations.&lt;/p&gt;

&lt;p&gt;  A ZooKeeper-based distributed lock has been implemented that&lt;br/&gt;
  attempts to create a persistent ZNode (one ZNode per entity being locked, i.e.,&lt;br/&gt;
  one per table) if one does not exist. Currently in case a master crashes while&lt;br/&gt;
  holding the lock, the lock must be manually removed using the ZooKeeper command&lt;br/&gt;
  line (locks being stored in &quot;/hbase/tableLock/&quot;).&lt;/p&gt;

&lt;p&gt;  The locks implemented are not fair or re-entrant. RecoverableZooKeeper is used&lt;br/&gt;
  to correctly handle connection loss.&lt;/p&gt;

&lt;p&gt;  To test the locks, InjectionHandler and InjectionEvent have been introduced,&lt;br/&gt;
  allowing for injection of arbitrary events, in this case adding delays during&lt;br/&gt;
  schema changing operations as to induce a race condition.&lt;/p&gt;

&lt;p&gt;  Future work involves automatically deleting stale lock ZNodes upon server&lt;br/&gt;
  recovery (providing the attempted operations are not resumed), adding metrics&lt;br/&gt;
  around locks (e.g., list all locks held).&lt;/p&gt;

&lt;p&gt;TEST PLAN&lt;br/&gt;
  Since concurrent modification (e.g., disabling and dropping a table&lt;br/&gt;
  under creation) could leave a cluster in an inconsistent state, we&lt;br/&gt;
  need table-level locks for schema changing operations.&lt;/p&gt;

&lt;p&gt;  A ZooKeeper-based distributed lock has been implemented that attempts&lt;br/&gt;
  to create a persistent ZNode (one ZNode per entity being locked, i.e.,&lt;br/&gt;
  one per table) if one does not exist. Currently in case a master&lt;br/&gt;
  crashes while holding the lock, the lock must be manually removed&lt;br/&gt;
  using the ZooKeeper command line (locks being stored in&lt;br/&gt;
  &quot;/hbase/tableLock/&quot;).&lt;/p&gt;

&lt;p&gt;  The locks implemented are not fair or re-entrant. RecoverableZooKeeper&lt;br/&gt;
  is used to correctly handle connection loss.&lt;/p&gt;

&lt;p&gt;  To test the locks, InjectionHandler and InjectionEvent have been&lt;br/&gt;
  introduced, allowing for injection of arbitrary events, in this case&lt;br/&gt;
  adding delays during schema changing operations as to induce a race&lt;br/&gt;
  condition.&lt;/p&gt;

&lt;p&gt;  Future work involves automatically deleting stale lock ZNodes upon&lt;br/&gt;
  server recovery (providing the attempted operations are not resumed),&lt;br/&gt;
  adding metrics around locks (e.g., list all locks held).&lt;/p&gt;


&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AFFECTED FILES&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/HConstants.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/TableLockTimeoutException.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/InjectionEvent.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/InjectionHandler.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/master/TestSchemaModificationLocks.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/zookeeper/TestDistributedLock.java&lt;/p&gt;</comment>
                            <comment id="13267681" author="avf" created="Thu, 3 May 2012 18:54:03 +0000"  >&lt;p&gt;This patch implements a ZK-hosted mutual exclusion lock (DistributedLock), and table level locks (TableLockManager), and ensures that all schema changing operations are serialized. Further work would be needed to add read-write locks to handle region splitting and merges.&lt;/p&gt;</comment>
                            <comment id="13267689" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 18:58:45 +0000"  >&lt;p&gt;tedyu has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  I only reviewed part of the patch.&lt;/p&gt;

&lt;p&gt;  Would this feature be refined in 0.89-fb branch before being ported to Apache HBase trunk ?&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/HConstants.java:98 Schema changes would always involve master.&lt;br/&gt;
  &apos;master.&apos; can be omitted.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/HConstants.java:108 Is this value big enough in cluster testing ?&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/TableLockTimeoutException.java:2 No year is needed.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java:1353 This lock is used to prevent two concurrent table creation attempts.&lt;br/&gt;
  tryLockTable() is more desirable here.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java:1310 Can we add tryLockTable() ?&lt;br/&gt;
  It would be useful for the non-winning thread to exit quickly.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:2 No year, please.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:47 Should Bytes.toStringBinary() be used here ?&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:53 Add &apos;be &apos; before &apos;released&apos;&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:137 What if lock release fails ?&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:27 Can you tell me which zookeeper branch provides this lock ?&lt;br/&gt;
  In &lt;a href=&quot;http://svn.apache.org/repos/asf/zookeeper/trunk&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/repos/asf/zookeeper/trunk&lt;/a&gt;, I don&apos;t seem to find this class.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267728" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 19:28:45 +0000"  >&lt;p&gt;avf has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  Thanks for the inline comments, @tedyu &amp;#8211; I&apos;ve replied to a few quick ones inline.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:27 DistributedLock is implemented as part of the patch (see DistributedLock.java)&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:47 Metadata for table level locks is stored as plain text &amp;#8211; this is to allow operations to view lock information from the zookeeper CLI: toStringBinary() would not be needed here.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:137 In this case, an IOException is thrown up to the caller: this is to indicate a non-recoverable ZooKeeper error (DistributedLock uses RecoverableZooKeeper class under the covers). .release() may also throw an IllegalStateException &amp;#8211; but this is essentially used an assertion in this case (releasing a lock that isn&apos;t held).&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267771" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 20:20:47 +0000"  >&lt;p&gt;tedyu has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:137 Is there a chance that acquiredTableLocks is out of sync with the lock status up in zk ?&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:87 Add a space after &apos;wait&apos;&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:104 Do we really need this exception ?&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:111 Please include lockZNodeVersion here.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:180 fullyQualifiedZNode should be included.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:292 Please include fullyQualifiedZNode&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java:1310 Please make the second part of the sentence correct&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/InjectionHandler.java:144 Can this method be made non-public ?&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267802" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 21:06:49 +0000"  >&lt;p&gt;Kannan has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java:75 It is not clear why we need eventsToWaitFor structure at all.&lt;/p&gt;

&lt;p&gt;  For events that a test is not interested in, it seems odd that we are putting those in the eventsToWaitFor structure.&lt;/p&gt;

&lt;p&gt;  eventToDelayTimeMS seems sufficient.&lt;/p&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java:1321 spoke with Alex offline.&lt;/p&gt;

&lt;p&gt;  We need to handle the case where after the create failed (because the node already exists), but before we could set a watch on this, if the znode was deleted, then we should handle that case correctly. Currently, we&apos;ll return false even in that case, and the caller will wait for CountDownLatch to reach 0, but it&apos;ll never reach zero since we missed the delete event.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267820" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 21:32:47 +0000"  >&lt;p&gt;tedyu has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java:1321 Another option is to leave the lock znode at time of lock release instead of calling zkWrapper.deleteZNode() every time.&lt;br/&gt;
  We can use the znode version and data for the node to distinguish who is the winner trying to acquire the lock.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267833" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 21:40:46 +0000"  >&lt;p&gt;stack has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  This is great stuff.  I can help port to trunk (will need to add test size on new tests, annotations to classes for audience, and zk persistence needs to be protobuf&apos;d &amp;#8211; I can help here np).&lt;/p&gt;

&lt;p&gt;  One thing we&apos;d like to prevent is a table being disabled while splits (or merges) are going on.  How hard would it be to add this facility (in another jira?).  One way of doing it would be that a regionserver before splitting, it&apos;d take out the table lock.  That would prevent the table from being disabled.  But what about the case if two regionservers try to split a region from the same table at the one time?  Or, what if the regionserver dies mid-split; the lock will be stuck in place.&lt;/p&gt;

&lt;p&gt;  Do you see our extending this system to deal w/ the above or do you think that another system altogether?&lt;/p&gt;

&lt;p&gt;  Good stuff A.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java:1315 If client asks to lock a table on cluster where this feature is not enabled, they get same response as when they successfully lock a table?  Should they be different?&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java:1322 ditto&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java:1353 Would a tryLock make a difference here?&lt;/p&gt;

&lt;p&gt;  When no trylock, the second thread through will fail with table already created.&lt;/p&gt;

&lt;p&gt;  With trylock, client will get &quot;Failed to get lock&quot; which is pretty useless.  It might have the client return faster which could be good but these events are rare so probably something we don&apos;t need to sweat.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:67 This is not exclusive, right?  The lock taker does not have to be the lock undoer?&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:111 Add content of acquiredTableLocks to help debug?&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267887" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 22:28:46 +0000"  >&lt;p&gt;Kannan has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  @ Alex: really nice tests!&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/InjectionHandler.java:144 @Ted: This method is meant to be public. That&apos;s how different tests can &quot;inject&quot; their handlers.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267905" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 22:46:46 +0000"  >&lt;p&gt;avf has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  @stack Thanks for the comments! If we convert ZNode contents for this to protobufs, we should also add a commands to the HBase shell (I&apos;ll be willing to help with that) to list currently held locks (who they are held by, for what purpose, and by whom) and delete them &amp;#8211; the reason they&apos;re in plain text in the current code is to allow operations to use the ZK CLI to do so.&lt;/p&gt;

&lt;p&gt;  I agree that using protobufs would be more appropriate for this purpose, as long as there&apos;s a way for operators to view this data without having to write code.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java:1315 Right now locking is not exposed in the client APIs, so essentially if locks are disabled schema changes (the only part where locks are currently used) behave as they would prior to the patch.&lt;/p&gt;

&lt;p&gt;  Should I, perhaps, add a warning in this case? (&quot;warning: schema modification locks are disabled, concurrent schema changes may result in corruption&quot;)&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:67 No, in this case I enforce (with an IllegalStateException) that locks can only be released by their owners. Currently, stale locks (locks after a &quot;hard&quot; server crash) would be removed using the ZooKeeper CLI.&lt;/p&gt;

&lt;p&gt;  It would probably make sense to add a command to the HBase shell to list all locks currently held (and when they acquired), and then release them.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:111 Thanks, will do.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:137 I am using an IllegalStateException to enforce this as an invariant (if a lock was acquired in ZooKeeper, it should not be in acquiredTableLock &amp;#8211; and vice versa).&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267948" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 23:42:45 +0000"  >&lt;p&gt;mbautin has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  A few more comments, but everything looks good in general. I will accept once all major comments are addressed.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java:1353 Maybe checking if the table exists before trying to get the lock might provide more useful feedback to the user. Obviously, this will need to be checked again with the lock held.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:129 Might be useful to use EnvironmentEdgeManager.currentTimeMillis() for testability.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:143 The same here&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:123 javadoc: return value (false on timeout?)&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:38 More method javadocs in this class would be nice&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java:1321 We could also set the watch before trying to create the node.&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java:75 @Kannan: are you talking about using wait/notify on the Long object in eventToDelayTimeMs instead of using a CountDownLatch?&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java:57 Is it possible to wait for an event more than once? As it is currently implemented, once we count down the latch, all subsequent awaitEvent() calls will return instantly, because the old latch will still be in the map. How would we wait for another occurrence of the same event type?&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267957" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 23:54:45 +0000"  >&lt;p&gt;tedyu has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java:57 Good finding.&lt;br/&gt;
  Maybe remove the latch after line 60 before returning ?&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/zookeeper/TestDistributedLock.java:2 No year is needed.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267958" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 23:54:46 +0000"  >&lt;p&gt;avf has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java:57 Good question. One drawback to adding a CountDownLatch for each event might be:&lt;/p&gt;

&lt;p&gt;  1) Thread A waits for CountDownLatch, for the same event. Thread B comes along and counts its down.&lt;/p&gt;

&lt;p&gt;  2) Thread C also wants to wait for the instance of the event &amp;#8211; but in this case, the CountDownLatch will be incremented and thread C will have to wait for the next version of the event.&lt;/p&gt;

&lt;p&gt;  Essentially we should make a call if we allow multiple threads to wait for the same event &lt;b&gt;or&lt;/b&gt; if we allow a thread to wait for multiple instance of the same event.&lt;/p&gt;

&lt;p&gt;  I am actually leaning in favour of the latter now, and can change this (in our case, we only have one thread waiting for an event).&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java:75 @mbautin I discussed this offline with Kannan, and he agreed with my use of this structure, but just asked me to use the &quot;create CountDownLatch if one doesn&apos;t exist and then call .countDown&quot; inside the if loop (if eventToDelayTimeMs contains the key).&lt;/p&gt;

&lt;p&gt;  Wait/notify would work, but might be more cumbersome to implement than just using CountDownLatch.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13267959" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 23:54:47 +0000"  >&lt;p&gt;Kannan has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java:75 Alex clarified the use of the CountDownLatch, and I am fine with that.&lt;/p&gt;

&lt;p&gt;  My other point was that this whole thing needs to be done only if this event is present in eventToDelayTimeMs(). So it should move inside the if block at line 79. Because no point doing all this for events that this test is not interested in. Overtime, the inject handler will get called for all kinds of unrelated events as people start adding new uses of the Injection mechanism to test various parts of the code. Alex said he&apos;ll take care of that in the next update to the diff.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13268004" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 01:10:45 +0000"  >&lt;p&gt;stack has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  Any comment on the below Alex?&lt;/p&gt;

&lt;p&gt;  &quot;One thing we&apos;d like to prevent is a table being disabled while splits (or merges) are going on. How hard would it be to add this facility (in another jira?). One way of doing it would be that a regionserver before splitting, it&apos;d take out the table lock. That would prevent the table from being disabled. But what about the case if two regionservers try to split a region from the same table at the one time? Or, what if the regionserver dies mid-split; the lock will be stuck in place.&quot;&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13268007" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 01:14:46 +0000"  >&lt;p&gt;avf has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  @stack I&apos;m currently thinking over this. I think it makes sense to have a separate JIRA (or perhaps another patch for the same JIRA?) to address this &amp;#8211; acquiring a table lock for merges and splits makes sense to me. Since a table lock would only serve to prevent table schema modifications (disabling/enabling schemas), it would be okay if the lock remains &quot;stuck&quot; during a split &amp;#8211; as long as there is a way to recover from this.&lt;/p&gt;

&lt;p&gt;  I am thinking of the right way to remove persistent locks in general from a crash &amp;#8211; will get back to you with some thoughts on the matter.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13268017" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 01:22:46 +0000"  >&lt;p&gt;avf updated the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;br/&gt;
Reviewers: Kannan, mbautin, Liyin, JIRA&lt;/p&gt;

&lt;p&gt;  Incorporate review feedback: fixed another potential race condition in checkExistsAndCreates, and miscellaneous other changes (Javadoc, use EnvironmentEdgeManager, changes to DelayInducingInjectionHandler, and other).&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AFFECTED FILES&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/HConstants.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/TableLockTimeoutException.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/InjectionEvent.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/InjectionHandler.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/master/TestSchemaModificationLocks.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/zookeeper/TestDistributedLock.java&lt;/p&gt;</comment>
                            <comment id="13268042" author="avf" created="Fri, 4 May 2012 02:15:09 +0000"  >&lt;p&gt;Re: &quot;One thing we&apos;d like to prevent is a table being disabled while splits (or merges) are going on. How hard would it be to add this facility (in another jira?). One way of doing it would be that a regionserver before splitting, it&apos;d take out the table lock. That woul prevent the table from being disabled. But what about the case if two regionservers try to split a region from the same table at the one time? Or, what if the regionserver dies mid-split; the lock will be stuck in place.&quot;&lt;/p&gt;

&lt;p&gt;This is an interesting question. I think one approach may be to create a region level lock manager, and to convert the table-level lock manager to support read-write locks. Schema modifications (create/disable/alter/delete/) would acquire a table-wide read lock (as now). For splits and merges, region servers would acquire a table wide &lt;em&gt;read lock&lt;/em&gt; (to allow two regionserves to split differnet regions of a table at the same time, but prevent schema modifications during a split/merge), and a write lock (i.e., a usual lock) over the regions that are being split (I&apos;m not even sure if this step is even needed at this point).&lt;/p&gt;

&lt;p&gt;We also need a way to handle stuck locks (currently DistributedLock uses persistent ZNodes) after crashes with minimal (if any) manual intervention (key thing being that whatever schema-modification was started prior to the crash is safely rolled back &amp;#8211; which may be non-trivial, as I would guess it would more complex than just keeping a txn id in the log and then reading through the HLog for META). &lt;/p&gt;</comment>
                            <comment id="13268059" author="zhihyu@ebaysf.com" created="Fri, 4 May 2012 02:58:15 +0000"  >&lt;p&gt;Introducing region-level locks requires careful consideration of various scenarios.&lt;br/&gt;
e.g. consider consecutive regions R1, R2 and R3. User A wants to split R2 while user B wants to merge the three regions, at the same time.&lt;br/&gt;
They both acquire table lock. Then B acquires write lock on R1 and tries to lock R2, however A has acquired write lock on R2 at this moment. B should release lock on R1 and retry later - otherwise R2 would not exist by the time A completes the splitting.&lt;/p&gt;</comment>
                            <comment id="13268102" author="stack" created="Fri, 4 May 2012 04:05:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think it makes sense to have a separate JIRA (or perhaps another patch for the same JIRA?) to address this...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes. Would be a separate JIRA.  I&apos;m just trying to have it so it is a continuation of the work done here rather than a different table locking facility that runs beside this one because we need read/writes and that there can be multiple read locks outstanding at anyone time; one per region currently splitting/merging.&lt;/p&gt;

&lt;p&gt;On region-level locks, we do not need this I&apos;d say (Already, region changes go via zk and there&apos;ll be failed transitions if concurrent operators try manipulate a single region given we usually check znode sequence id before we go forward moving a region to a new state).&lt;/p&gt;

&lt;p&gt;You thought this overkill for your case?   &lt;a href=&quot;http://zookeeper.apache.org/doc/r3.1.2/recipes.html#Shared+Locks&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://zookeeper.apache.org/doc/r3.1.2/recipes.html#Shared+Locks&lt;/a&gt;  That is fine.  Do you think we could backfill it later underneath the patch attached here?&lt;/p&gt;

&lt;p&gt;On the lock being left in place on master crash, whats wrong w/ that?  Thats sort of what we want I&apos;d say.  Or more, what we really want is that when the new master comes up, he finishes off what the previous master was at.  To that end, should lock and unlock be public apis on the master at all, but rather just internal primitives used by the master doing disable/enable?  If you disable a table, the first think you do is obtain a lock and then when done, you let it go on completion.   A new master that comes up after a previous master has crashed and sees a table in disabling state should go ahead and complete the disable moving the table state to disabled and when done, then it undoes the unlock to finish the schema change transaction; you&apos;d have to let the second master be able to undo the lock (Over in accumulo they have a system where they allow describing a macro change in terms of distinct steps; the steps are posted to zk and then acted on.  We don&apos;t have to be that smart just yet... we can hardcode disable/enable for now).&lt;/p&gt;

&lt;p&gt;Good stuff Alex.&lt;/p&gt;


</comment>
                            <comment id="13268106" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 04:15:09 +0000"  >&lt;p&gt;Kannan has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java:111 logs -&amp;gt; locks&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java:61 putIfAbsent is needed here I think. Otherwise, say the other place (line 76) runs first, and does putIfAbsent and count down on the inserted item, and this location overwrites that put, then we&apos;ll wait here for on a latch that&apos;ll never be counted down.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13268107" author="avf" created="Fri, 4 May 2012 04:16:08 +0000"  >&lt;p&gt;.bq You thought this overkill for your case? &lt;a href=&quot;http://zookeeper.apache.org/doc/r3.1.2/recipes.html#Shared+Locks&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://zookeeper.apache.org/doc/r3.1.2/recipes.html#Shared+Locks&lt;/a&gt; That is fine. Do you think we could backfill it later underneath the patch attached here?&lt;/p&gt;

&lt;p&gt;I went down the non-sequential route (as you said, thinking it was over-kill and simple &quot;create if not exist&quot; approach would work), although I later realized that some of the potential race conditions would likely not happen if I went with their approach. I think we could backfill it later once we create read-write locks. &lt;/p&gt;

&lt;p&gt;I do like the idea of a new master coming up to finish previous work. If we make the ZNode data more machine parseable (e.g., convert it to protobuf in trunk) than this would be feasible to do (when a new master is brought up, the master scans the lock to see if there were any operations in progress when the previous master died). &lt;/p&gt;

&lt;p&gt;I agree that lock and unlock shouldn&apos;t really be public APIs (in the sense of being directly accessible to end developers) &amp;#8211; I&apos;ll make lockTable() and unlockTable() be package-local methods then, to that end. &lt;/p&gt;</comment>
                            <comment id="13268113" author="stack" created="Fri, 4 May 2012 04:21:29 +0000"  >&lt;p&gt;@Alex Sounds good.  I can help out getting this into trunk w/ the pb-ing and putting it up on the zk shared+locks pattern so we can do read/write locking.  Good stuff.&lt;/p&gt;</comment>
                            <comment id="13268118" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 04:36:48 +0000"  >&lt;p&gt;avf has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  Thanks @Kannan, I&apos;ll implement these suggestions right now.  I&apos;m also going to make lockTable() and unlockTable() package-local methods for now, to encourage indicate that they are (as @stack puts it) internal to the schema changing operations, rather than general purpose.&lt;/p&gt;

&lt;p&gt;  I&apos;m also trying out @mbautin&apos;s suggestion of 1) checking that table doesn&apos;t already exist before acquiring the lock in createTable(), 2) then checking that the table doesn&apos;t exist again after acquiring the lock.&lt;/p&gt;

&lt;p&gt;  Will put up an updated diff.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13268198" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 08:04:49 +0000"  >&lt;p&gt;avf updated the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;br/&gt;
Reviewers: Kannan, mbautin, Liyin, JIRA&lt;/p&gt;

&lt;p&gt;  Stylistic changes, using putIfAbsent in DelayInducingInjectionHandler.awaitEvent(). Implemented Mikhail&apos;s suggestions regarding createTable: check that a table exists before acquiring the lock, acquire the lock, and then check if a table exists again &amp;#8211; in order to handle common scenarios more efficiently.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AFFECTED FILES&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/HConstants.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/TableLockTimeoutException.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/InjectionEvent.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/InjectionHandler.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/master/TestSchemaModificationLocks.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/zookeeper/TestDistributedLock.java&lt;/p&gt;</comment>
                            <comment id="13268412" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 14:54:47 +0000"  >&lt;p&gt;tedyu has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  I think this feature should leave ample room for region level lock, to be developed in the future.&lt;br/&gt;
  Meaning, znode for table level lock would always exist because it has children znodes which represent region locks.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:147 Can this assumption be elaborated some more ?&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13268541" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 17:06:45 +0000"  >&lt;p&gt;Kannan has accepted the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  Looks good! One minor comment.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java:1391 for symmetry with other operations (like disable/enable/etc.), should we do this injection after acquiring the lock? With the latest update to the diff this order has changed.&lt;/p&gt;

&lt;p&gt;  If we do want events before lock acquisition, we could introduce new ones in the future like HMASTER_BEFORE_CREATE_LOCK or something like that.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BRANCH&lt;br/&gt;
  table_level_ddl_locks&lt;/p&gt;</comment>
                            <comment id="13268546" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 17:20:46 +0000"  >&lt;p&gt;avf has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java:1391 Great catch. I mentally thought I did this, but I did not. For operations that do non-trivial work before locking, I think it makes sense to have BEFORE_LOCK events as well. Will do this.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BRANCH&lt;br/&gt;
  table_level_ddl_locks&lt;/p&gt;</comment>
                            <comment id="13268613" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 18:40:45 +0000"  >&lt;p&gt;avf updated the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;br/&gt;
Reviewers: Kannan, mbautin, Liyin, JIRA&lt;/p&gt;

&lt;p&gt;  Move InjectionEventHandler.processEvent() call after lock acquisition in createTable(), explain the way &quot;node is deleted before watch is set&quot; race condition is handled in more detail.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AFFECTED FILES&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/HConstants.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/TableLockTimeoutException.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/HMaster.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/TableLockManager.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/InjectionEvent.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/util/InjectionHandler.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/master/TestSchemaModificationLocks.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/util/DelayInducingInjectionHandler.java&lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/zookeeper/TestDistributedLock.java&lt;/p&gt;</comment>
                            <comment id="13268625" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 19:04:45 +0000"  >&lt;p&gt;Kannan has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  lgtm!&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BRANCH&lt;br/&gt;
  table_level_ddl_locks&lt;/p&gt;</comment>
                            <comment id="13268722" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 21:31:48 +0000"  >&lt;p&gt;mbautin has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  Discussed offline with Alex. Changes to createTable (double-checked locking) look good to me.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BRANCH&lt;br/&gt;
  table_level_ddl_locks&lt;/p&gt;</comment>
                            <comment id="13269110" author="phabricator@reviews.facebook.net" created="Sun, 6 May 2012 03:51:49 +0000"  >&lt;p&gt;khemani has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:294 Should you check the return value of this method to ensure that the node still exists?&lt;/p&gt;

&lt;p&gt;  Say checkExistsAndCreate set the watch because the znode existed.&lt;/p&gt;

&lt;p&gt;  Now the watch fires because the lock-owner changes the znode data.&lt;/p&gt;

&lt;p&gt;  By the time you reset the watch here the owner releases the lock. watchAndCheckExists() will return false and you should then trigger the latch.&lt;/p&gt;


&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java:1336 The zookeeper disconnect error should be specially handled - because the znode might have already been created.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:112 Will lockZNodeVersion always be 0 because this znode has just been created?&lt;/p&gt;

&lt;p&gt;  Why should release() need lockZNodeVersion? it should be OK to blindly delete the znode?&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BRANCH&lt;br/&gt;
  table_level_ddl_locks&lt;/p&gt;</comment>
                            <comment id="13269113" author="phabricator@reviews.facebook.net" created="Sun, 6 May 2012 04:03:52 +0000"  >&lt;p&gt;avf has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  Hi Prakash.&lt;/p&gt;

&lt;p&gt;  Thanks for the comments! I&apos;ll chat with you on Monday about the potential issue around handling connection loss (I was under impression that RecoverableZookeeper handles that).&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/ZooKeeperWrapper.java:1336 Isn&apos;t this handled by RecoverableZooKeeper?&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:112 This is to verify that we are only releasing a lock that we ourselves acquire, and that code doesn&apos;t (accidentally) release lock acquired by other threads/processes.&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:294 Good catch, will handle this.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BRANCH&lt;br/&gt;
  table_level_ddl_locks&lt;/p&gt;</comment>
                            <comment id="13269119" author="phabricator@reviews.facebook.net" created="Sun, 6 May 2012 04:52:00 +0000"  >&lt;p&gt;tedyu has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;INLINE COMMENTS&lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/zookeeper/DistributedLock.java:294 What action of the lock-owner is associated with znode data change ?&lt;br/&gt;
  I see znode creation and deletion, not data change.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BRANCH&lt;br/&gt;
  table_level_ddl_locks&lt;/p&gt;</comment>
                            <comment id="13269825" author="phabricator@reviews.facebook.net" created="Mon, 7 May 2012 18:02:47 +0000"  >&lt;p&gt;avf has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  Discussed Prakash&apos;s comments offline: since having thread id, host name, and operation in the lock name takes advantage of RecoverableZooKeeper accidentally re-entering a lock. Having a separate map in TableLockManager for all locks held, also serves as an additional guard.&lt;/p&gt;

&lt;p&gt;  However, per further discussions with @stack, Kannan, and Prakash we&apos;ve decided that we should create another JIRA to convert the locks to use sequential ZNodes (which allow reader/writer locks to be implemented as well as avoid many of the race conditions). I will create the said JIRA.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BRANCH&lt;br/&gt;
  table_level_ddl_locks&lt;/p&gt;</comment>
                            <comment id="13273481" author="phabricator@reviews.facebook.net" created="Fri, 11 May 2012 18:16:45 +0000"  >&lt;p&gt;avf has closed the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To: Kannan, mbautin, Liyin, JIRA, avf&lt;br/&gt;
Cc: avf, tedyu, stack, khemani&lt;/p&gt;</comment>
                            <comment id="13273486" author="phabricator@reviews.facebook.net" created="Fri, 11 May 2012 18:22:47 +0000"  >&lt;p&gt;avf has commented on the revision &quot;&lt;span class=&quot;error&quot;&gt;&amp;#91;jira&amp;#93;&lt;/span&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5494&quot; title=&quot;Introduce a zk hosted table-wide read/write lock so only one table operation at a time&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5494&quot;&gt;&lt;del&gt;HBASE-5494&lt;/del&gt;&lt;/a&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;89-fb&amp;#93;&lt;/span&gt; Table-level locks for schema changing operations.&quot;.&lt;/p&gt;

&lt;p&gt;  Committed to 89-fb: &lt;a href=&quot;http://svn.apache.org/viewvc?view=revision&amp;amp;sortby=log&amp;amp;revision=1334557&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://svn.apache.org/viewvc?view=revision&amp;amp;sortby=log&amp;amp;revision=1334557&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;REVISION DETAIL&lt;br/&gt;
  &lt;a href=&quot;https://reviews.facebook.net/D2997&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.facebook.net/D2997&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To: Kannan, mbautin, Liyin, JIRA, avf&lt;br/&gt;
Cc: avf, tedyu, stack, khemani&lt;/p&gt;</comment>
                            <comment id="13273558" author="avf" created="Fri, 11 May 2012 19:57:05 +0000"  >&lt;p&gt;Created &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5991&quot; title=&quot;Introduce sequential ZNode based read/write locks &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5991&quot;&gt;&lt;del&gt;HBASE-5991&lt;/del&gt;&lt;/a&gt; for implementation of sequential znode based read/write locks.&lt;/p&gt;</comment>
                            <comment id="13273566" author="stack" created="Fri, 11 May 2012 20:07:36 +0000"  >&lt;p&gt;@Mighty Alex.  Should we close this one?&lt;/p&gt;</comment>
                            <comment id="13273756" author="avf" created="Sat, 12 May 2012 00:42:26 +0000"  >&lt;p&gt;Yeah, you can go ahead and close out.&lt;/p&gt;</comment>
                            <comment id="13273827" author="stack" created="Sat, 12 May 2012 04:17:00 +0000"  >&lt;p&gt;Alex&apos;s patch committed to 0.89fb.  Thanks for the patch Alex (added you as hbase contributor and assigned you this issue).  We&apos;ll do up a trunk version of this patch over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5991&quot; title=&quot;Introduce sequential ZNode based read/write locks &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5991&quot;&gt;&lt;del&gt;HBASE-5991&lt;/del&gt;&lt;/a&gt; where we base it on read/write zk locks.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12622994">HBASE-7305</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12544478">HBASE-5487</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12544858">HBASE-5504</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12525488" name="ASF.LICENSE.NOT.GRANTED--D2997.3.patch" size="56390" author="phabricator@reviews.facebook.net" created="Thu, 3 May 2012 18:20:49 +0000"/>
                            <attachment id="12525546" name="ASF.LICENSE.NOT.GRANTED--D2997.4.patch" size="57589" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 01:22:48 +0000"/>
                            <attachment id="12525577" name="ASF.LICENSE.NOT.GRANTED--D2997.5.patch" size="61583" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 08:04:51 +0000"/>
                            <attachment id="12525662" name="ASF.LICENSE.NOT.GRANTED--D2997.6.patch" size="61718" author="phabricator@reviews.facebook.net" created="Fri, 4 May 2012 18:40:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 2 Mar 2012 01:35:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>229860</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 31 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i016cn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4798</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>