<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:13:08 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3787/HBASE-3787.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3787] Increment is non-idempotent but client retries RPC</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3787</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The HTable.increment() operation is non-idempotent. The client retries the increment RPC a few times (as specified by configuration) before throwing an error to the application. This makes it possible that the same increment call be applied twice at the server.&lt;/p&gt;

&lt;p&gt;For increment operations, is it better to use HConnectionManager.getRegionServerWithoutRetries()? Another  option would be to enhance the IPC module to make the RPC server correctly identify if the RPC is a retry attempt and handle accordingly.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12504342">HBASE-3787</key>
            <summary>Increment is non-idempotent but client retries RPC</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sershe">Sergey Shelukhin</assignee>
                                    <reporter username="dhruba">dhruba borthakur</reporter>
                        <labels>
                    </labels>
                <created>Fri, 15 Apr 2011 07:55:39 +0000</created>
                <updated>Sat, 21 Feb 2015 23:33:14 +0000</updated>
                            <resolved>Fri, 6 Dec 2013 22:15:05 +0000</resolved>
                                    <version>0.94.4</version>
                    <version>0.95.2</version>
                                    <fixVersion>0.98.0</fixVersion>
                    <fixVersion>0.99.0</fixVersion>
                                    <component>Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>23</watches>
                                                                <comments>
                            <comment id="13455384" author="lhofhansl" created="Thu, 13 Sep 2012 22:41:36 +0000"  >&lt;p&gt;This is an interesting one.&lt;br/&gt;
To me the main goal of retries is to ride over a split or region move. If we can isolate that condition and avoid retrying for all &quot;undecided&quot; conditions (the various timeouts) we should be OK.&lt;/p&gt;</comment>
                            <comment id="13566821" author="apurtell" created="Wed, 30 Jan 2013 19:35:13 +0000"  >&lt;p&gt;I think this has come up again on the user list. See &lt;a href=&quot;http://search-hadoop.com/m/3naHBtQZV51/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://search-hadoop.com/m/3naHBtQZV51/&lt;/a&gt;. Since we can easily change the on wire RPC format of various operations for 0.96, now is a good time to look at this. A solution might be to introduce a nonce (generated internally by the client) on non-idempotent operations to convert them into idempotent ones. Not sure exactly how that would work server side.&lt;/p&gt;</comment>
                            <comment id="13566840" author="yuzhihong@gmail.com" created="Wed, 30 Jan 2013 19:49:55 +0000"  >&lt;p&gt;So the server would apply Increment requests with the same nounce only once ?&lt;/p&gt;</comment>
                            <comment id="13566847" author="apurtell" created="Wed, 30 Jan 2013 19:55:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;So the server would apply Increment requests with the same nounce only once ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Obviously.&lt;/p&gt;</comment>
                            <comment id="13566915" author="enis" created="Wed, 30 Jan 2013 21:19:49 +0000"  >&lt;p&gt;This is a bit orthogonal, but we need a nounce-like mechanism for client -&amp;gt; master RPC&apos;s as well. Currently most of the master operations are semi-async, meaning that they initiate a task (disable table), but have no way of asking the master later, about the status of the request. This is different than using RPC callId, because the RPC call itself finishes, but not the side effect of the operation. &lt;/p&gt;</comment>
                            <comment id="13566936" author="apurtell" created="Wed, 30 Jan 2013 21:47:14 +0000"  >&lt;p&gt;If we define the nonce as per-op instead of per-RPC nonce then it&apos;s no longer an orthogonal problem.&lt;/p&gt;</comment>
                            <comment id="13567136" author="yuzhihong@gmail.com" created="Thu, 31 Jan 2013 00:18:32 +0000"  >&lt;p&gt;On region server, we need to keep a map from row key to set of nonce&apos;s, per table, which reflect client requests the server has seen.&lt;br/&gt;
We can set time bound on how long such mapping should be kept so that this map doesn&apos;t consume too much heap. This implies associating nonce with the timestamp when request containing the nonce was received.&lt;/p&gt;</comment>
                            <comment id="13567154" author="enis" created="Thu, 31 Jan 2013 00:32:38 +0000"  >&lt;p&gt;This is also the related to the problem we encountered during NN failover testing, where NN does not do create file operation in an idempotent way. If the create block succeeds, but response is lost due to NN crash, next RPC from retry will fail. Linking the Hadoop issue. &lt;/p&gt;</comment>
                            <comment id="13567168" author="apurtell" created="Thu, 31 Jan 2013 00:41:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;On region server, we need to keep a map from row key to set of nounce&apos;s, per table, which reflect client requests the server has seen.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Don&apos;t see the need for row key or per table state. Something like (client-address, nonce, timestamp) should be sufficient, right? Entry would be unique enough. Add the entry when op processing starts, remove it when finished or failed, refuse to process an op twice by sending back a DoNotRetryException.&lt;/p&gt;

&lt;p&gt;As for minimizing heap, expired entries could be lazily collected during add or remove of new entries or reaped by a chore.&lt;/p&gt;</comment>
                            <comment id="13567177" author="yuzhihong@gmail.com" created="Thu, 31 Jan 2013 00:50:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;(client-address, nonce, timestamp) should be sufficient, right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We haven&apos;t discussed how the nonce would be generated on client-side. Is it possible that same client generates the same nonce for different rows ? We should tell user not to do that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;remove it when finished or failed&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;When operation fails, do we need to keep the entry a bit longer ? Just in case client retries (and the retry succeeds).&lt;/p&gt;

&lt;p&gt;I agree with the strategy for expiring entries.&lt;/p&gt;</comment>
                            <comment id="13567180" author="stack" created="Thu, 31 Jan 2013 00:51:11 +0000"  >&lt;p&gt;I like this idea.&lt;/p&gt;</comment>
                            <comment id="13567183" author="apurtell" created="Thu, 31 Jan 2013 00:53:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;We haven&apos;t discussed how the nonce would be generated on client-side.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;True, but I did say internally generated by the HBase client. I was thinking hash(IP address, row, timestamp).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When operation fails, do we need to keep the entry a bit longer ? Just in case client retries (and the retry succeeds).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No, because a retry is a new op, so a new nonce. &lt;/p&gt;</comment>
                            <comment id="13567257" author="yuzhihong@gmail.com" created="Thu, 31 Jan 2013 02:22:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;I was thinking hash(IP address, row, timestamp).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Should table name be included in the hash ?&lt;/p&gt;</comment>
                            <comment id="13567322" author="anoopsamjohn" created="Thu, 31 Jan 2013 03:42:54 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6390&quot; title=&quot;append() and increment() may result in inconsistent result on retries.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6390&quot;&gt;&lt;del&gt;HBASE-6390&lt;/del&gt;&lt;/a&gt; is the same issue.&lt;/p&gt;</comment>
                            <comment id="13567338" author="apurtell" created="Thu, 31 Jan 2013 04:14:12 +0000"  >&lt;p&gt;Closed &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6390&quot; title=&quot;append() and increment() may result in inconsistent result on retries.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6390&quot;&gt;&lt;del&gt;HBASE-6390&lt;/del&gt;&lt;/a&gt;, older one wins.&lt;/p&gt;</comment>
                            <comment id="13567382" author="anoopsamjohn" created="Thu, 31 Jan 2013 05:49:19 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;&lt;br/&gt;
I am trying to understand the idea and try out implementing.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Add the entry when op processing starts, remove it when finished or failed, refuse to process an op twice by sending back a DoNotRetryException.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes a retry from client side while in progress can be DNREed. What if the operation at server just completed and removed the entry and then a retry request comes from client. &lt;span class=&quot;error&quot;&gt;&amp;#91;Client has not received the response yet&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=yuzhihong%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;yuzhihong@gmail.com&quot;&gt;Ted Yu&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Should table name be included in the hash ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Depends on what layer we keep nonce info. If it is at the HRS level we might need table name also I think.&lt;/p&gt;</comment>
                            <comment id="13567401" author="enis" created="Thu, 31 Jan 2013 06:24:23 +0000"  >&lt;p&gt;BTW, having an in-memory windowing view of latest nonces only solves most of the issues. But imagine the case, where client does increment, it is processed successfully in region, appended to WAL, but server failed before returning response. Client retries on the new server, which does not know about this nonce, so happily accepts the duplicate increment. To do true idempotency, we should append the nonce to the WALEdit. &lt;/p&gt;</comment>
                            <comment id="13567410" author="anoopsamjohn" created="Thu, 31 Jan 2013 06:58:04 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; Yes you bring out an extreme case. We can decide upto what level we will make this idempotent.&lt;/p&gt;</comment>
                            <comment id="13567413" author="anoopsamjohn" created="Thu, 31 Jan 2013 07:00:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;To do true idempotency, we should append the nonce to the WALEdit.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We should append the nonce to the WALEdit as well. (+ the in memory tracking) correct?&lt;/p&gt;</comment>
                            <comment id="13567807" author="yuzhihong@gmail.com" created="Thu, 31 Jan 2013 17:00:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;but server failed before returning response. Client retries on the new server&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;HBaseClient should generate a new nonce when request is sent to new server.&lt;/p&gt;</comment>
                            <comment id="13567864" author="apurtell" created="Thu, 31 Jan 2013 17:49:00 +0000"  >&lt;p&gt;I think the above comments all taken together are a reasonable thing to try:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Introduce a nonce (generated internally by the client) on non-idempotent operations to convert them into idempotent ones.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;nonce = hash(client address, table, row, timestamp)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HBaseClient should generate a new nonce whenever a new op is sent to new server. Reuse the nonce for any retry.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Server tracks nonces by (client address, nonce, timestamp). Expire entries after some grace period. Restart the expiration timer whenever the nonce is checked as part of op processing. Lazily clean up expired entries either as part of add/remove or via a chore.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Add the entry when op processing starts, remove it when finished or failed, refuse to process an op twice by sending back a DoNotRetryException. Perhaps we introduce a new exception type like OperationInProgressException which inherits from DoNotRetryException so the client understands the retry operation was failed because the previous attempt is still pending server side.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;We should append the nonce to the WALEdit, and recover them along with the entry data.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13567872" author="yuzhihong@gmail.com" created="Thu, 31 Jan 2013 17:51:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;We should append the nonce to the WALEdit, and recover them along with the entry data.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Is the above needed ?&lt;/p&gt;</comment>
                            <comment id="13567874" author="apurtell" created="Thu, 31 Jan 2013 17:54:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is the above needed ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think Enis is right. A server accepts an op, it goes down mid flight, another takes over and is processing WAL entries, the client retries and is relocated to the new server, without having a nonce the increment would be accepted twice.&lt;/p&gt;</comment>
                            <comment id="13567877" author="yuzhihong@gmail.com" created="Thu, 31 Jan 2013 17:57:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;without having a nonce the increment would be accepted twice&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;But there is this assumption:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;HBaseClient should generate a new nonce whenever a new op is sent to new server&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="13567890" author="apurtell" created="Thu, 31 Jan 2013 18:11:24 +0000"  >&lt;p&gt;Good point Ted. So then the client should not retry an increment or append (or other nonidempotent op) if it has been relocated. See LarsH&apos;s comment at the top of this issue, sorry I missed it. And follows the rest of your comment is valid too.&lt;/p&gt;</comment>
                            <comment id="13567896" author="yuzhihong@gmail.com" created="Thu, 31 Jan 2013 18:17:25 +0000"  >&lt;p&gt;If client retries on region move, that would allow skipping the append of nonce to the WALEdit.&lt;/p&gt;

&lt;p&gt;I think that would reduce the complexity of the implementation.&lt;/p&gt;</comment>
                            <comment id="13567897" author="apurtell" created="Thu, 31 Jan 2013 18:17:51 +0000"  >&lt;p&gt;What we really need as a different model for interaction. A bidirectional event stream between clients and servers. Clients issue requests. Servers (any server) acknowledges completion. Implies an async client. &lt;/p&gt;

&lt;p&gt;In the absence of that we can at least give the client an indication the op has been processed even through a retry as long as the region doesn&apos;t move. (Add to my OperationInProgressException also OperationAlreadyCompletedException.) &lt;/p&gt;

&lt;p&gt;If the region relocates, then we expose some uncertainty to the application by failing any additional retries. This will be less surprising than current behavior because we won&apos;t have silent application of the same op more than once, but punts to the app which isn&apos;t great either.&lt;/p&gt;</comment>
                            <comment id="13567930" author="apurtell" created="Thu, 31 Jan 2013 18:47:30 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ted_yu&quot; class=&quot;user-hover&quot; rel=&quot;ted_yu&quot;&gt;Ted Yu&lt;/a&gt; From the client&apos;s point of view, it is still retrying the op even though the server handling the region has changed. So&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HBaseClient should generate a new nonce for each op. Reuse the nonce for any retry.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Therefore if nonces are persisted to the WAL and recovered from it, the server will still do the right thing. Your concern is implementation complexity on the server. I think it is valid, but do you think this outweighs the application level uncertainty that would happen if a request fails because of a region relocation? Would the app know if the op applied or not?&lt;/p&gt;</comment>
                            <comment id="13567944" author="yuzhihong@gmail.com" created="Thu, 31 Jan 2013 18:56:15 +0000"  >&lt;p&gt;For statement #1:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;HBaseClient should generate a new nonce for each op. Reuse the nonce for any retry.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;this outweighs the application level uncertainty that would happen if a request fails because of a region relocation?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think statement #1 already achieves what persistence to WAL would achieve.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Would the app know if the op applied or not?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The app would know when the response for operation is not IOException.&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="13568022" author="apurtell" created="Thu, 31 Jan 2013 19:41:52 +0000"  >&lt;p&gt;How does the client know if the op failed before or after it was persisted to the WAL without a way to check? &lt;/p&gt;</comment>
                            <comment id="13568043" author="yuzhihong@gmail.com" created="Thu, 31 Jan 2013 19:58:37 +0000"  >&lt;p&gt;clarification:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;HBaseClient should generate a new nonce for each op. Reuse the nonce for any retry.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Here the nonce is reused when retrying against new region server, right ?&lt;/p&gt;

&lt;p&gt;If so, we&apos;re on the same page - WALEdit needs to accommodate nonce.&lt;/p&gt;</comment>
                            <comment id="13568926" author="yuzhihong@gmail.com" created="Fri, 1 Feb 2013 18:11:05 +0000"  >&lt;p&gt;Maybe we can create subtasks for this JIRA, beginning with RPC and WALEdit changes.&lt;/p&gt;

&lt;p&gt;That way, 0.96 RC0 doesn&apos;t have to wait for the full implementation.&lt;/p&gt;</comment>
                            <comment id="13568970" author="apurtell" created="Fri, 1 Feb 2013 18:58:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;Maybe we can create subtasks for this JIRA, beginning with RPC and WALEdit changes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;IMO, those changes don&apos;t make sense independent of each other. &lt;/p&gt;

&lt;p&gt;Who is doing the implementation? Are you volunteering?&lt;/p&gt;</comment>
                            <comment id="13569160" author="yuzhihong@gmail.com" created="Fri, 1 Feb 2013 22:17:05 +0000"  >&lt;p&gt;I am currently looking into test failures first reported by Jon in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7290&quot; title=&quot;Online snapshots &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7290&quot;&gt;&lt;del&gt;HBASE-7290&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I don&apos;t know how long this will take.&lt;/p&gt;</comment>
                            <comment id="13569441" author="anoopsamjohn" created="Sat, 2 Feb 2013 05:56:13 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt; I will try with this on weekend.. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  Let me see how it go about.&lt;/p&gt;</comment>
                            <comment id="13569451" author="lhofhansl" created="Sat, 2 Feb 2013 06:35:44 +0000"  >&lt;p&gt;The discussions here all imply an RPC and WAL protocol/format change, so they are 0.96 only.&lt;br/&gt;
Can we do something simpler in meantime for 0.94. For example:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;never retry an Increment/Append&lt;/li&gt;
	&lt;li&gt;retry only if we get NSRE, to ride over a region-move/split&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;?&lt;/p&gt;</comment>
                            <comment id="13569584" author="anoopsamjohn" created="Sat, 2 Feb 2013 16:37:20 +0000"  >&lt;p&gt;+1 on above suggestion. &lt;/p&gt;</comment>
                            <comment id="13570083" author="anoopsamjohn" created="Mon, 4 Feb 2013 09:21:44 +0000"  >&lt;p&gt;Some questions on how it will behave&lt;br/&gt;
1. When we get a request from client(retry) and old request is in progress, if we throw exception how the user will know whether the opeartion was success or not?&lt;br/&gt;
2. When we get a request from client(retry) and old request is already completed and operation was successful, I think we need to make that request a successful one. Ultimately the operation was successful and the client has no knowledge abt that.&lt;br/&gt;
3. When we get a request from client(retry) and old request is already completed and operation failed, we can go ahead with this retry request? Failure would have been because of some thing like WAL write failure etc which can be retried any way. So this way there is no need to keep the nonce for grace period when the operation failed.&lt;br/&gt;
When it was success we need to keep for a grace period and then expire.&lt;/p&gt;</comment>
                            <comment id="13570356" author="apurtell" created="Mon, 4 Feb 2013 16:13:26 +0000"  >&lt;p&gt;Hey, Anoop, great!&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When we get a request from client(retry) and old request is in progress, if we throw exception how the user will know whether the operation was success or not?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I suggest something like OperationInProgressException and OperationAlreadyCompletedException. The latter at least should inherit from DoNotRetryException. In lieu of a different protocol for client&amp;lt;-&amp;gt;server communication.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When we get a request from client(retry) and old request is already completed and operation was successful, I think we need to make that request a successful one. Ultimately the operation was successful and the client has no knowledge abt that.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;See above. The client will have enough knowledge to return success to the application.&lt;/p&gt;</comment>
                            <comment id="13570357" author="apurtell" created="Mon, 4 Feb 2013 16:15:16 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Can we do something simpler in meantime for 0.94. For example:&lt;br/&gt;
1. never retry an Increment/Append&lt;br/&gt;
2. retry only if we get NSRE, to ride over a region-move/split&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds good: in 0.94, never retry a nonidempotent operation except in the case of NSRE.&lt;/p&gt;</comment>
                            <comment id="13570380" author="ram_krish" created="Mon, 4 Feb 2013 16:51:48 +0000"  >&lt;p&gt;@Anoop&lt;br/&gt;
Can you explain why you feel client does not know that the operation is successful in #2.&lt;br/&gt;
May be you had some scenario in mind?&lt;br/&gt;
Is it like before the expiry time the client retries without knowing that the previous operation was successful?  &lt;br/&gt;
The usage of nonce should solve the problem right.  &lt;/p&gt;</comment>
                            <comment id="13570831" author="enis" created="Tue, 5 Feb 2013 01:21:39 +0000"  >&lt;p&gt;+1 to doing it with nonce + WAL change + temp window for nonces to the region in trunk. One question remains is that should we expose nonces to the client, and whether we accept custom defined nonces. The use case is smt like this: &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Client picks up events from a reliable event queue, processes it and increments the counter. After the increment, we release the event, so that the queue will not schedule this again.&lt;/li&gt;
	&lt;li&gt;In case, the client fails after increment, but before releasing the event, the incr will happen, but the event queue will give time event to some other client after it detects that the client failed. Then for the same event, we will do another increment.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For the above scenario, HBase is not at fault, but without allowing the client to provide the nonce, there is no easy solution to this. &lt;/p&gt;

&lt;p&gt;For 0.94, let&apos;s do not retry approach. Although this still won&apos;t solve the problem completely. &lt;/p&gt;</comment>
                            <comment id="13571023" author="anoopsamjohn" created="Tue, 5 Feb 2013 04:14:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can you explain why you feel client does not know that the operation is successful in #2.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You can see the incrementColumnValue operation returns the new value of the column and increment() returns a Result. So in this case how we can do this? The 1st trial was timed out at client side and retry request is generated. At server then 1st trial become successful and we wont allow the second operation to happen but throw a OperationAlreadyCompletedException. Based on the exception this time reached at client it can know the operation status but can not know the result which it need to return to app.  This was my doubting point. Am I making it clear now.&lt;/p&gt;</comment>
                            <comment id="13571028" author="yuzhihong@gmail.com" created="Tue, 5 Feb 2013 04:24:48 +0000"  >&lt;p&gt;I think this implies that OperationAlreadyCompletedException needs to carry the result of the completed operation.&lt;/p&gt;</comment>
                            <comment id="13571069" author="anoopsamjohn" created="Tue, 5 Feb 2013 05:47:22 +0000"  >&lt;p&gt;Another option would be to make the 2nd attempt a success and just return the Result, without doing the operation.&lt;/p&gt;

&lt;p&gt;Also wrt OperationInProgress, we can throw the Exception but what the client need to do.(HBase client not the app). Still it is not sure abt the status of the operation , whether it will be success or failure.&lt;/p&gt;

&lt;p&gt;The whole point here coming is how to query, from client, the result of an old operation happened in server. &lt;/p&gt;</comment>
                            <comment id="13571667" author="enis" created="Tue, 5 Feb 2013 19:52:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;The whole point here coming is how to query, from client, the result of an old operation happened in server.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That is why I advocate above whether we should make nonces visible to the client, and enable accepting client-defined nonces.&lt;/p&gt;</comment>
                            <comment id="13571709" author="yuzhihong@gmail.com" created="Tue, 5 Feb 2013 20:39:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;enable accepting client-defined nonces&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1 on above.&lt;/p&gt;

&lt;p&gt;We&apos;re expecting C++ based client(s) to be developed, right ?&lt;/p&gt;</comment>
                            <comment id="13620591" author="anoopsamjohn" created="Wed, 3 Apr 2013 04:23:18 +0000"  >&lt;blockquote&gt;&lt;p&gt;That is why I advocate above whether we should make nonces visible to the client, and enable accepting client-defined nonces.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You mean the client app right?&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;The whole point here coming is how to query, from client, the result of an old operation happened in server.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For this what do you say? Expose APIs? I got your point with the events queue use case.&lt;/p&gt;</comment>
                            <comment id="13625995" author="sershe" created="Mon, 8 Apr 2013 23:53:25 +0000"  >&lt;p&gt;One point: assuming client doesn&apos;t retry across complete client failures (where client memory is lost), can we make the default nonce the atomically incrementing number? &lt;br/&gt;
Fuzzy idea; client sends this int.&lt;br/&gt;
The server structure is - lower bound of operations per client that succeeded; list of operations that succeeded after that after some gaps in the sequence (or last nonce received from client + list of operations that failed and could be retries, and those that are in progress).&lt;br/&gt;
The lower bound moves up as operations succeed. Gaps are recycled after some time by a chore. WAL has the ID of the nonce + client ID, so that the structure could be restored after restarts.&lt;br/&gt;
Client has to change ID on restarts.&lt;/p&gt;</comment>
                            <comment id="13626024" author="sershe" created="Tue, 9 Apr 2013 00:34:12 +0000"  >&lt;p&gt;Other comments after discussion:&lt;br/&gt;
1) Note that this scheme has different behavior in case of nonces collected by timeout chore - the hash one will make nonce available again, whereas this one will make nonce unavailable (which is probably better, especially when there&apos;s a possibility of very delayed &quot;retry&quot;, such as during replication).&lt;br/&gt;
2) Storage of gaps could be optimized by storing number ranges [from, to) instead of individual ops.&lt;br/&gt;
3) With regard to what result to return - it depends a lot on whether we think &quot;atomic return value&quot; is important. I.e. should increment strictly return the incremented value, like AtomicLong, or is it allowed to return some value in future? Ditto for append. I&apos;d argue that for the former case it will be an overkill to store return values of all append/increment operations in memory for minutes, so the server should respond something to the effect of &quot;the operation succeeded, but I don&apos;t know what the result is&quot;. In the latter case the current value can be returned, so only &quot;get&quot; part of increment/append is done. Perhaps the operation should have a flag that determined which semantic to use.&lt;/p&gt;</comment>
                            <comment id="13626080" author="enis" created="Tue, 9 Apr 2013 01:31:22 +0000"  >&lt;p&gt;@Anoop, &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;You mean the client app right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, the client app. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;For this what do you say? Expose APIs? I got your point with the events queue use case.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The client will be able to pass a custom nonce to the Mutate object. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;so the server should respond something to the effect of &quot;the operation succeeded, but I don&apos;t know what the result is&quot;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t think we should bubble up this specific case to the client app unless we have a valid use case. As long as we document the semantics, it should be good. &lt;/p&gt;</comment>
                            <comment id="13626099" author="sershe" created="Tue, 9 Apr 2013 01:47:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t think we should bubble up this specific case to the client app unless we have a valid use case. As long as we document the semantics, it should be good. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Currently, the book sayeth &quot;See Increment in HTable.&quot;, with a link to javadoc, and javadoc says: &quot;values of columns after the increment&lt;span class=&quot;error&quot;&gt;&amp;#91;/append&amp;#93;&lt;/span&gt; operation&quot;, which is subject to interpretation (but I&apos;d read it as &quot;after the operation and before any other operation&quot;).&lt;br/&gt;
Granted, I cannot come up with non-stretch use case for AtomicLong-like return value semantics in HBase. &lt;br/&gt;
I wonder what other people here think. &lt;br/&gt;
Implementation would be simpler with no guarantees... &lt;/p&gt;</comment>
                            <comment id="13629330" author="sershe" created="Thu, 11 Apr 2013 20:36:36 +0000"  >&lt;p&gt;Here&apos;s a partial patch for an example. The nonce manager on server side is not implemented but operations are clear. &lt;br/&gt;
WAL replay is not there, and it&apos;s going to be tricky (for any nonce scheme). We only replay WAL that is not already in store, and nonces will not be in store, so the state of the nonce cannot be reliably restored with regular WAL replay. It is especially interesting for new remote request based faster log replay, haven&apos;t checked yet how it works. Not yet exactly sure what to do about it without incurring too much overhead.&lt;br/&gt;
I don&apos;t think not retrying to different server from client is a solution, too. If we don&apos;t retry when this problem arises what is the user supposed to do, how do they know if increment happened? They will probably retry too and get into the same situation.&lt;br/&gt;
I wonder if we should have some system CFs for nonces almost...&lt;/p&gt;</comment>
                            <comment id="13629790" author="ram_krish" created="Fri, 12 Apr 2013 04:51:31 +0000"  >&lt;p&gt;I think if we use WALEdit here, we should store the nonce and also the incremented value.&lt;br/&gt;
If the RS goes down after adding this WALEdit, we should be able to just replay the edit and use the value from this Edit. And i think before the client retries using the same nonce we should ensure if that RS to which the previous nonce was issued was down.&lt;/p&gt;

&lt;p&gt;If this is the case the client&apos;s retry can be ignored.&lt;/p&gt;
</comment>
                            <comment id="13629812" author="stack" created="Fri, 12 Apr 2013 05:36:10 +0000"  >&lt;p&gt;Patch looking good.&lt;/p&gt;

&lt;p&gt;Add a comment that says what the result looks like when:&lt;/p&gt;

&lt;p&gt;generateClientId&lt;/p&gt;

&lt;p&gt;happens.&lt;/p&gt;

&lt;p&gt;Why not just a UUID rather than all these gyrations?  Or do you want to make it so that looking at id, you can tell what client it came from?  It looks like you throw away all this info when you create the SecureRandom?  Creating a SecureRandom for this one time use is expensive.&lt;/p&gt;

&lt;p&gt;Client id should be long since in proto is uint64 in proto?&lt;/p&gt;

&lt;p&gt;Does ClientNonceManager have to be in top-level?  Can it not be in client package and be made package private?&lt;/p&gt;

&lt;p&gt;Does it make sense putting clientid together w/ nonce making?  Could you have a class that does noncemaking and then another to hold the clientid?  Is clientid tied to Connection?  Can you get connectionid?  Or make a connectionid?  Connections are keyed by Configuration already?  Would the Connection key do as a clientid?&lt;/p&gt;

&lt;p&gt;Would it be easier or make it so you could shut down access on ClientNonceManager by passing in the id only rather than the whole nonce when you do this:&lt;/p&gt;

&lt;p&gt;               MutateRequest request = RequestConverter.buildMutateRequest(&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;location.getRegionInfo().getRegionName(), append);&lt;br/&gt;
+                location.getRegionInfo().getRegionName(), append, clientId, nonce);&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;So, you decided to not pass nonce in here:&lt;/p&gt;

&lt;p&gt;+        r = region.append(append, append.getWriteToWAL()/&lt;b&gt;, clientId2, nonce&lt;/b&gt;/);&lt;/p&gt;

&lt;p&gt;I like the way this works over on the server side.&lt;/p&gt;

&lt;p&gt;You dup code in append and increment.&lt;/p&gt;

&lt;p&gt;Good stuff Sergey.&lt;/p&gt;</comment>
                            <comment id="13630454" author="sershe" created="Fri, 12 Apr 2013 18:34:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think if we use WALEdit here, we should store the nonce and also the incremented value.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;If the RS goes down after adding this WALEdit, we should be able to just replay the edit and use the value from this Edit. And i think before the client retries using the same nonce we should ensure if that RS to which the previous nonce was issued was down.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;If this is the case the client&apos;s retry can be ignored.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Under current (and good) logic if edit went to the store, we will not see the WAL edit (again especially when the log replay is remote w/o recovered edits).&lt;br/&gt;
For standard nonces, it would mean that nonce would not be there on new server unless we widen WAL replay significantly and recover nonces for entries that are already in store.&lt;br/&gt;
For incremental nonces, we could do the same, or we could play it safe and assume everything before the lowest nonce we see at replay is already in store, but I wonder how well this will actually work.&lt;br/&gt;
It may happen that because successful operations take less than failed one, any client with more than one thread (or async APIs that may exist later) would be almost guaranteed to fail all such retries (because non-failing threads may have successes after the failing thread,&lt;br/&gt;
and any success with higher nonce will invalidate the lower nonce during recovery). Perhaps that approach is feasible still, at least it won&apos;t produce dups.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why not just a UUID rather than all these gyrations? Or do you want to make it so that looking at id, you can tell what client it came from? It looks like you throw away all this info when you create the SecureRandom? Creating a SecureRandom for this one time use is expensive.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Interesting question... Java UUIDs are just random numbers. To keep reasonable size we could just generate secure random long then; do you think that would be sufficient?&lt;br/&gt;
I wanted the result to have deterministic and random part, so that for random number collision the additional condition would be either unrelated hash collision, or generating the same secure number at exact same IP, PID, TID and time &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Client id should be long since in proto is uint64 in proto?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It is... the generated part is actually base for client id, renamed it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Does ClientNonceManager have to be in top-level? Can it not be in client package and be made package private?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It has a constant that is used all over the place. Let me see if I can put it elsewhere...&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Does it make sense putting clientid together w/ nonce making? Could you have a class that does noncemaking and then another to hold the clientid?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yeah, that could be done... nonce-making class then would be just wrapper around atomiclong though &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is clientid tied to Connection? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It is static on connectionmanager. The only reason to not have less clientIds than any given number is if it makes it hard to control the incrementing number, so there&apos;s one per process.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Can you get connectionid? Or make a connectionid? Connections are keybqed by Configuration already? Would the Connection key do as a clientid?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t think so, they can be repeated (in fact probably will be) between restarts.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;So, you decided to not pass nonce in here:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;+ r = region.append(append, append.getWriteToWAL()/, clientId2, nonce/);&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is temporary, will be uncommented to write it into WAL.&lt;/p&gt;</comment>
                            <comment id="13630658" author="sershe" created="Fri, 12 Apr 2013 21:35:50 +0000"  >&lt;p&gt;Need to make WAL PB. Doesn&apos;t strictly speaking block this, because given current WALEdit readFields code, old-code - new-wal compat will be broken by almost any change (other than extremely hacky one of hiding new fields in replication scope byte array that normally has cf, and detecting that magically, because version cannot be changed at all). If we do not do the hack and break compat, might as well go to PB.&lt;/p&gt;</comment>
                            <comment id="13630692" author="yuzhihong@gmail.com" created="Fri, 12 Apr 2013 22:22:08 +0000"  >&lt;blockquote&gt;&lt;p&gt;Need to make WAL PB&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1.&lt;/p&gt;</comment>
                            <comment id="13631649" author="anoop.hbase" created="Mon, 15 Apr 2013 11:00:25 +0000"  >&lt;p&gt;How the exception like OperationConflictException will be handled at client side?&lt;br/&gt;
Have we concluded what we will do at different situations (like op in progress already at RS, op already over at RS).. Sorry I am not able to find any such conclusion comments above. &lt;/p&gt;</comment>
                            <comment id="13631958" author="sershe" created="Mon, 15 Apr 2013 18:12:05 +0000"  >&lt;p&gt;That is an interesting question. Ideally we want to be able to respond for sure if operation completed successfully or not, to make the client sure he can (or cannot) retry; but this is not achievable unless we store all nonce-s and also recover them between restarts.&lt;br/&gt;
So there will be some ambiguity.&lt;br/&gt;
It also depends, as mentioned above, on whether client needs the answer to increment or append that is exactly after the op or at any time after the op.&lt;br/&gt;
So there can be multiple outcomes when client sends retry:&lt;br/&gt;
0. Nonce is marked as last attempt failed, or doesn&apos;t exist on server - normal retry.&lt;br/&gt;
1. Nonce has been recycled due to age, or operation succeeded:&lt;br/&gt;
  a) Client needs &quot;consistent&quot; answer - exception that operation succeeded but no answer can be provided, no retry.&lt;br/&gt;
  b) Client doesn&apos;t need &quot;consistent&quot; answer - request does a &quot;get&quot; and client receives the answer.&lt;br/&gt;
2. Nonce has not been seen during latest recovery but is before latest nonce seen - unknown result, retry at client&apos;s discretion.&lt;br/&gt;
By making WAL recovery include more records, or some separate processing for nonces inside WAL records already in store, we can alleviate that.&lt;br/&gt;
3. Nonce is marked as operation in progress. Wait on some sort of waiting construct attached, then 0 or 1.&lt;/p&gt;

</comment>
                            <comment id="13631961" author="sershe" created="Mon, 15 Apr 2013 18:13:46 +0000"  >&lt;p&gt;With purely hash nonces, case 1  &quot;recycled due to age&quot; part, as well as case 2, become &quot;there&apos;s duplicate operation&quot;, otherwise it&apos;s more or less unchanged. &lt;/p&gt;</comment>
                            <comment id="13632534" author="anoop.hbase" created="Tue, 16 Apr 2013 03:32:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;b) Client doesn&apos;t need &quot;consistent&quot; answer - request does a &quot;get&quot; and client receives the answer.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This should be fine I guess.&lt;/p&gt;</comment>
                            <comment id="13635960" author="sershe" created="Fri, 19 Apr 2013 02:15:29 +0000"  >&lt;p&gt;Well, I&apos;ve spent today writing some code, and then we discussed it with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt;. There is a huge number of special cases all over the place...&lt;/p&gt;

&lt;p&gt;First, on which nonces to use. Unfortunately my proposed approach is not as simple as it seems due to special cases &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
In case of hash nonces:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;you have an epic hashmap of all nonces over the past expiration interval (say, one hour)&lt;/li&gt;
	&lt;li&gt;on common successful operation path, for every op you do a putIfAbsent into this map, and later take an uncontested lock to check for waiting conflicts&lt;/li&gt;
	&lt;li&gt;cleanup iterates the map and removes expired entries&lt;/li&gt;
	&lt;li&gt;code is simple&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;retries over expiration time will result in duplicate operations&lt;/b&gt;&lt;/li&gt;
	&lt;li&gt;increasing expiration time is limited by total (map) size&lt;br/&gt;
In case of sequential nonces:&lt;/li&gt;
	&lt;li&gt;you have a small map by client, some smaller nonce structures inside; easier to cleanup so probably smaller/much smaller in total&lt;/li&gt;
	&lt;li&gt;however, in common path, you do small hashmap lookup, one smaller structure (say another hashmap) putIfAbsent, take the same uncontested lock as in case 1, and do 2 interlocked ops&lt;/li&gt;
	&lt;li&gt;cleanup is still very simple&lt;/li&gt;
	&lt;li&gt;however, to make cleanup and main path simple, the code for starting/ending nonce operation has to have a lot of interlocked/volatile/etc. cleverness which will almost never execute, to handle special cases&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;retries over expiration time #1 will result in rejection - no dup, /importance of which depends on WAL design below/&lt;/b&gt;&lt;/li&gt;
	&lt;li&gt;increasing expiration time #1 is limited by total size&lt;/li&gt;
	&lt;li&gt;&lt;b&gt;retries over expiration time #2 will result in duplicate change&lt;/b&gt;&lt;/li&gt;
	&lt;li&gt;increasing expiration time #2 is only limited by number of &lt;b&gt;clients&lt;/b&gt; (not nonces), so it&apos;s a much larger margin of safety (which may or may not be worth it)&lt;br/&gt;
Finally, to make full use of range collapsing as suggested above, you need to factor region into clientId on client (not on server, for server clientId is opaque), so that the sequence of numbers following each other goes into the same region.&lt;br/&gt;
That will allow one to use structure better than hashmap for nonces above, reduce memory footprint a lot, and increase the time for nonce expiration.&lt;/li&gt;
&lt;/ul&gt;


&lt;h5&gt;&lt;a name=&quot;TL%3BDR1Iamnotsurethecomplexityofthesequentialnoncesisworthit%2Catleastforthefirstcut.&quot;&gt;&lt;/a&gt;TL;DR1 I am not sure the complexity of the sequential nonces is worth it, at least for the first cut.&lt;/h5&gt;

&lt;p&gt;Then; there are some easy-to-handle special cases like splits and merges.&lt;/p&gt;

&lt;p&gt;Main problem for any case is WAL recovery. First, we will have to read nonces from entire WAL, not just the records we recover, because otherwise nonces won&apos;t work for records that got flushed (we don&apos;t recover WAL below some watermark, for records are already in store).&lt;br/&gt;
Second, even if we do read records for entire WAL, WAL can go away very quickly after all records make it to FS, so we won&apos;t have nonces from it, at all.&lt;br/&gt;
One option is to have is to keep WAL around for nonce recovery period.&lt;br/&gt;
Alternatively, we can have separate additional &quot;log&quot; file for nonces. It will just contain bunch of numbers. Flushing it will not be on main path - because WAL itself also needs to contain nonces (for replication at least), we can flush the nonce log only before memstore flush.&lt;br/&gt;
So when we recover, for a given nonce we will either see it in the WAL (if it was never flushed to disk, it will be part of recovery), or we&apos;ll see it as part of the nonce log (or both occasionally, which doesn&apos;t matter).&lt;br/&gt;
Nonce log can be rolled independently and nuked after a file is at least expiration-time old.&lt;/p&gt;

&lt;p&gt;A radically different solution that &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; proposed is to output increments and appends as separate markers (like delete markers), containing nonces as Cell tags or shadow columns, and coalesce them on reads, and during compactions after some time.&lt;br/&gt;
When we coalesce them to get final value we will throw away the extra ones.&lt;br/&gt;
This way we get rid of all the above complexity because the nonce management is just part of normal KV management.&lt;br/&gt;
However, we may introduce a lot of other special case around out of order puts/deletes, number of versions to keep (increments/appends will need special accounting to keep version semantics). Plus coalescing the value from some often-incremented field may be expensive.&lt;br/&gt;
It will also allow us to support out-of-order increments and appends! Just kidding.&lt;/p&gt;

&lt;h5&gt;&lt;a name=&quot;TL%3BDR2Mycurrentplanwillbeassuch.IwillwaituntilMonTueforfeedback%2Cdoingotherthings%28oruntilenoughfeedbackaccumulates%3A%29%29.Then%2CIwillstashmysequentialnoncescode%2Canddothesimplesthashnoncespatchpossible%2C...&quot;&gt;&lt;/a&gt;TL;DR2 My current plan will be as such. I will wait until Mon-Tue for feedback, doing other things (or until enough feedback accumulates &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;). Then, I will stash my sequential nonces code, and do the simplest hash nonces patch possible, including sending a summary of nonces to server during WAL recovery from whatever WAL we are currently reading, including below watermark, without actually replaying the KVs. It will not be bulletproof, but a first step if there are no objections &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/h5&gt;</comment>
                            <comment id="13636083" author="devaraj" created="Fri, 19 Apr 2013 05:30:37 +0000"  >&lt;p&gt;Hmm.... I wonder how much mileage will we get by just doing a simple implementation of handling the following exceptions:&lt;br/&gt;
&lt;blockquote&gt;&lt;p&gt; ConnectException, NoRouteToHostException, UnknownHostException &lt;/p&gt;&lt;/blockquote&gt; (similar to how Hadoop handles idempotent operations; look at RetryPolicies.FailoverOnNetworkExceptionRetry.shouldRetry in &lt;a href=&quot;http://bit.ly/10mc4PG&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://bit.ly/10mc4PG&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;In HDFS, methods are annotated with &quot;@Idempotent&quot; annotations, and client retries the operation when the above exceptions are encountered, and for other exceptions like RemoteException, the retry is conditional on the method being idempotent. In HBase, if we know that only a few methods are non-idempotent, we can further simplify the implementation by doing custom checks for only those methods (as opposed to introducing annotations).&lt;/p&gt;

&lt;p&gt;Maybe, this has been discussed before, but I have a feeling that this will solve the vast majority of the problem cases, without introducing a lot of complexity in the codebase.&lt;/p&gt;</comment>
                            <comment id="13638396" author="sershe" created="Mon, 22 Apr 2013 20:22:54 +0000"  >&lt;p&gt;Yeah, we could also just do this. This won&apos;t solve the JIRA as stated though... Maybe we can do that for 0.95 and keep this jira as major for future effort.&lt;/p&gt;</comment>
                            <comment id="13638441" author="enis" created="Mon, 22 Apr 2013 21:21:04 +0000"  >&lt;p&gt;So, Hadoop seems to be trying to solve the problem in some basic cases by inspecting the exceptions, but in the end, if it cannot reason about whether the operation has already succeeded it will throw the exception to the user. Basically, throwing ItsNotMyProblemItsYourProblemException&#8482;. &lt;br/&gt;
Depending on how critical to have correct idempotent semantics (especially for distributed counters), I would be ok with going with the basic hash, or not-retrying across-servers solution for 0.96, and implement one of the proposals above (or some other solution) on a longer timeframe. &lt;/p&gt;</comment>
                            <comment id="13641074" author="devaraj" created="Wed, 24 Apr 2013 22:27:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;Yeah, we could also just do this. This won&apos;t solve the JIRA as stated though... Maybe we can do that for 0.95 and keep this jira as major for future effort.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think this will address the vast majority of cases... I&apos;d say let&apos;s do this and see if we still see this issue.&lt;/p&gt;</comment>
                            <comment id="13647213" author="sershe" created="Thu, 2 May 2013 02:36:46 +0000"  >&lt;p&gt;Ok, finally I got around to this &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Preliminary patch, it&apos;s more or less ready but w/o any tests, I will add some once general approach is agreed upon.&lt;br/&gt;
I kept the nonce group-nonce distinction for future improvement if it were to come, however with hashes, group is never used and never serialized.&lt;br/&gt;
The server-side code is forward-compatible with groups, though.&lt;/p&gt;

&lt;p&gt;Added it to WAL replay, and it&apos;s replayed without regard to max store seqnums, only writeTime is taken into account.&lt;br/&gt;
Some changes will have to be made for improved remote-WAL-replay that is coming... some decoration on Increments and Appends to have them treated specially, so that some 2-hours-apart collision doesn&apos;t fail log replay.&lt;/p&gt;

&lt;p&gt;I will add tests tomorrow or later this week, feedback is appreciated.&lt;/p&gt;</comment>
                            <comment id="13650142" author="sershe" created="Mon, 6 May 2013 21:52:30 +0000"  >&lt;p&gt;added unittests and an case in TestMultiParallel. Also made OperationConflict DoNotRetryException&lt;/p&gt;</comment>
                            <comment id="13650145" author="sershe" created="Mon, 6 May 2013 21:54:12 +0000"  >&lt;p&gt;r at &lt;a href=&quot;https://reviews.apache.org/r/10965/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/10965/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13650355" author="hadoopqa" created="Tue, 7 May 2013 01:40:26 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12581965/HBASE-3787-v1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12581965/HBASE-3787-v1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 14 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): &lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5562//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13650443" author="yuzhihong@gmail.com" created="Tue, 7 May 2013 02:55:46 +0000"  >&lt;p&gt;@Sergey:&lt;br/&gt;
Can you give high level description for the role of nonce group ?&lt;/p&gt;

&lt;p&gt;Thanks&lt;/p&gt;</comment>
                            <comment id="13651031" author="sershe" created="Tue, 7 May 2013 16:38:49 +0000"  >&lt;p&gt;Nonce group is basically a client ID, where what client is, is not very well defined. It can be used as a separate field as suggested in some comments above, or for stuff like incrementing nonces it can be the id per client, or per region (for the cutoff to work better).&lt;/p&gt;</comment>
                            <comment id="13651074" author="sershe" created="Tue, 7 May 2013 17:11:03 +0000"  >&lt;p&gt;Address r feedback&lt;/p&gt;</comment>
                            <comment id="13651147" author="hadoopqa" created="Tue, 7 May 2013 18:26:12 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12582127/HBASE-3787-v2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12582127/HBASE-3787-v2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 14 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5578//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13651212" author="anoop.hbase" created="Tue, 7 May 2013 19:32:27 +0000"  >&lt;p&gt;When the retry request finds the op is already completed, the server throws OperationConflictException and client layer reports its a op error to user?  Actually the increment/append happened in the system. How user can know this?&lt;/p&gt;</comment>
                            <comment id="13651275" author="sershe" created="Tue, 7 May 2013 20:39:10 +0000"  >&lt;p&gt;It reports a very specific exception, which means op already completed. Do you think we should do get instead?&lt;/p&gt;</comment>
                            <comment id="13651478" author="sershe" created="Wed, 8 May 2013 00:17:38 +0000"  >&lt;p&gt;There are some design questions on r. Perhaps we should flesh out the design before I make any major changes.&lt;/p&gt;

&lt;p&gt;1) Should we add actual usage of nonceGroup/client ID?&lt;br/&gt;
We can do that. Depends also on (2). I will probably change the server manager to lump nonce group and nonce into array wrapper and store these in the map,&lt;br/&gt;
instead of using pair. Pair is simpler but worse, right now I only added it for forward compat.&lt;br/&gt;
Map of maps is pain to clean up without tricks or epic lock, I have added that for sequential nonces but I wonder if it&apos;s worth it for simple nonces.&lt;br/&gt;
Client ID, for now, will be produced from IP, process id, and thread id. It will be hashed to 8 bytes and written into nonceGroup.&lt;/p&gt;

&lt;p&gt;2) Is 8 bytes enough to avoid collisions?&lt;br/&gt;
The answer is &quot;maybe&quot;. It depends on the number of requests overall in the cluster and for how long we store nonces.&lt;br/&gt;
We can alleviate this by adding client ID I guess, which will make it 16 bytes, 8 unique per client and 8 random.&lt;/p&gt;

&lt;p&gt;3) What random should we use?&lt;br/&gt;
Java uses SecureRandom to generate UUIDs. We can use some other Random, they claim to produce uniformly distributed numbers.&lt;/p&gt;

&lt;p&gt;4) Will too many nonces be stored?&lt;br/&gt;
If we keep nonces for an hour, and do 10k increments per second per server, we will have stored 36000000 nonces on a server.&lt;br/&gt;
With map overhead, 2 object overheads, 2 primitive longs and an enum value, it&apos;s probably in excess of 120 bytes per entry (without clientId). So yeah it&apos;s a lot of memory.&lt;br/&gt;
Time to store nonces is configurable, though, and with default retry setting as little as 5 minutes could provide sufficient safety.&lt;br/&gt;
With 5 minutes we&apos;d have something like ~400Mb of RAM for hash table, which is not totally horrible (especially for 10k QPS &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;).&lt;br/&gt;
Some solutions were proposed in the r, such as storing the mutation creation time and rejecting after certain time.&lt;br/&gt;
However that relies on synchronized clocks, and also doesn&apos;t solve the problem in a sense that client has no idea about the original problem - should he retry?&lt;br/&gt;
What do you think?&lt;br/&gt;
If you think it&apos;s realistic workload I can rework the sequential nonce patch instead, and there nonces would be collapsed. If clientId is used and incorporates the region,&lt;br/&gt;
requests arriving for the same region will generally go to the same server for some time, and in sequential order so a lot can be collapsed.&lt;br/&gt;
However it will add complexity.&lt;br/&gt;
What do you think?&lt;/p&gt;</comment>
                            <comment id="13651528" author="sershe" created="Wed, 8 May 2013 01:20:49 +0000"  >&lt;p&gt;Here&apos;s the more simple CR feedback. Depending on feedback or lack thereof I will wait, or just make a patch deciding on the above, and update it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13651595" author="hadoopqa" created="Wed, 8 May 2013 03:37:04 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12582229/HBASE-3787-v3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12582229/HBASE-3787-v3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 14 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.TestZooKeeper&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5585//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13652248" author="stack" created="Wed, 8 May 2013 19:20:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;There are some design questions on r. Perhaps we should flesh out the design before I make any major changes.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sounds good.  Suggest doing it up in a one page doc rather than inline in issue in a comment field because will be hard to fine otherwise.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...I have added that for sequential nonces but I wonder if it&apos;s worth it for simple nonces.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What is the &apos;that&apos; in above (&apos;tricks or epic locks&apos;?)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Client ID, for now, will be produced from IP, process id, and thread id. It will be hashed to 8 bytes and written into nonceGroup.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If opaque, just uuid it?  You&apos;d still have to make a long of it.&lt;/p&gt;

&lt;p&gt;Aside: Reading, tripped over this comment on securerandom &quot;....initialize SecureRandom (this may be a lengthy operation)&quot; &amp;#8211; the lengthy operation part.&lt;/p&gt;

&lt;p&gt;There is also &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/rmi/server/UID.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/6/docs/api/java/rmi/server/UID.html&lt;/a&gt; which would be more lightweight than uuid.  Still &amp;gt; 64bits though.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;With 5 minutes we&apos;d have something like ~400Mb of RAM for hash table, which is not totally horrible (especially for 10k QPS ).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agree&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;However that relies on synchronized clocks....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah.  How bad is that though?  Currently if a regionserver clock is out of sync w/ master we&apos;ll reject it (IIRC).  We&apos;d do something similar for a client that is trying to do a nonce-operation?  If its mutation is outside of our nonce-keeping window (because we dropped our server-side record, we can&apos;t be sure it not a retry coming in outside of our bounds).  Would have to &amp;gt; long GC though (smile).&lt;/p&gt;

&lt;p&gt;Is the attempt at sequential ids attached here?&lt;/p&gt;

&lt;p&gt;Good stuff Sergey.&lt;/p&gt;


</comment>
                            <comment id="13652391" author="sershe" created="Wed, 8 May 2013 21:50:00 +0000"  >
&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;...I have added that for sequential nonces but I wonder if it&apos;s worth it for simple nonces.&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;What is the &apos;that&apos; in above (&apos;tricks or epic locks&apos;?)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If you have map, by client ID, of structures (say, containing nonce hashmap), you have to clean up parent map when the clients go away, presumably on timer.&lt;br/&gt;
However what if some request arrives for the client you are about to remove and grabs it from the map, to use?&lt;br/&gt;
Either global R/W lock is needed that will block requests for cleanup, or, for example, DrainBarrier in each client record, so in request code op will be started and ended (2 interlocked ops),&lt;br/&gt;
and in cleanup it will &quot;stop&quot; client before removal. If request gets client record and fails to start op due to cleanup it will just retry getting/creating client record.&lt;/p&gt;


&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Client ID, for now, will be produced from IP, process id, and thread id. It will be hashed to 8 bytes and written into nonceGroup.&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;If opaque, just uuid it? You&apos;d still have to make a long of it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;blockquote&gt;&lt;p&gt;Aside: Reading, tripped over this comment on securerandom &quot;....initialize SecureRandom (this may be a lengthy operation)&quot; &#8211; the lengthy operation part.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&apos;s only done once.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There is also &lt;a href=&quot;http://docs.oracle.com/javase/6/docs/api/java/rmi/server/UID.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://docs.oracle.com/javase/6/docs/api/java/rmi/server/UID.html&lt;/a&gt; which would be more lightweight than uuid. Still &amp;gt; 64bits though.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That is actually a deterministic value which can easily be duplicated by moving system clock back as far as I see &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I will resurrect the client hash generation code.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;Yeah. How bad is that though? Currently if a regionserver clock is out of sync w/ master we&apos;ll reject it (IIRC). We&apos;d do something similar for a client that is trying to do a nonce-operation? If its mutation is outside of our nonce-keeping window (because we dropped our server-side record, we can&apos;t be sure it not a retry coming in outside of our bounds). Would have to &amp;gt; long GC though (smile).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Hmm... that is possible, however still leaves the client guessing with regard to operation&apos;s success.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is the attempt at sequential ids attached here?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No.&lt;/p&gt;</comment>
                            <comment id="13652453" author="stack" created="Wed, 8 May 2013 22:46:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hmm... that is possible, however still leaves the client guessing with regard to operation&apos;s success.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How? We reject on the way in before any operation has happened so client knows its attempt failed?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;That is actually a deterministic value which can easily be duplicated by moving system clock back as far as I see&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.  Presumes non-malicious clients.&lt;/p&gt;

&lt;p&gt;Good on you Sergey.&lt;/p&gt;</comment>
                            <comment id="13652498" author="sershe" created="Wed, 8 May 2013 23:12:55 +0000"  >&lt;p&gt;added usage of clientId and using bytes instead of Pair as hashmap key; some CR feedback from r and some minor changes&lt;/p&gt;</comment>
                            <comment id="13656514" author="sershe" created="Mon, 13 May 2013 23:23:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;How? We reject on the way in before any operation has happened so client knows its attempt failed?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If the client keeps retrying without response, and eventually server says &quot;your timestamp is too old&quot;, it is equivalent to the original problem where client doesn&apos;t know if he should retry more after retrying once without response, just that there were more retries.&lt;/p&gt;</comment>
                            <comment id="13656519" author="sershe" created="Mon, 13 May 2013 23:28:12 +0000"  >&lt;p&gt;I actually just realized that this model doesn&apos;t appear to work for normal region move (and none would, in fact), because there&apos;s no WAL replay in that case.&lt;br/&gt;
The more I think about it the more I wonder if we should have separate nonce WAL with lazy sync for proper solution. It needs only be synced on memstore flush; if memstore wasn&apos;t flushed, the data recovery will happen and nonces will be picked from regular WAL.&lt;br/&gt;
This patch is better than nothing I guess, for errors against single server of failing server. I will address little feedback remaining on r...&lt;/p&gt;</comment>
                            <comment id="13656523" author="yuzhihong@gmail.com" created="Mon, 13 May 2013 23:32:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;if we should have separate nonce WAL with lazy sync for proper solution.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We should do the above.&lt;/p&gt;</comment>
                            <comment id="13656637" author="sershe" created="Tue, 14 May 2013 02:05:13 +0000"  >&lt;p&gt;Feedback from r, made configurable (on by default). About nonce WAL - I do not have information about how important this JIRA is. It seems like a lot of moving parts for such a rare occurance. I&apos;d like 2nd opinion (or more than one &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;). &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; what do you think&lt;/p&gt;</comment>
                            <comment id="13657534" author="stack" created="Tue, 14 May 2013 21:34:51 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sershe&quot; class=&quot;user-hover&quot; rel=&quot;sershe&quot;&gt;Sergey Shelukhin&lt;/a&gt; Duh.  I should have caught that in review if I was any good.  Agree a nonce WAL is OTT.  Been trying to think through this and chatted some w/ Elliott but it is a thorny issue.&lt;/p&gt;

&lt;p&gt;Nonce should be a primitive in our rpc &amp;#8211; all you should have to do is say if it an idempotent or not.&lt;/p&gt;

&lt;p&gt;Would a nonce having a &apos;mint&apos; time &amp;#8211; the time of creation help?  If nonce is N ms old &amp;#8211; server could do relative time? &amp;#8211; then we fail the operation.&lt;/p&gt;

&lt;p&gt;Does nonce have to have a destination server stamped on it?  It is only good for a particular server and if it shows up on another server because region moved, again we fail the op.&lt;/p&gt;

&lt;p&gt;Elliott was talking about a region not moving till outstanding requests are handled and no new ones are accepted in the meantime (We then went off into the weeds where the region that is closing could still take reads... and even more extreme... we could open the region in the new location and it could take writes... just not reads..... We stopped before going any further because we thought you&apos;d just slap us).&lt;/p&gt;</comment>
                            <comment id="13657671" author="sershe" created="Tue, 14 May 2013 23:20:21 +0000"  >&lt;p&gt;The mint time I commented above... we could do this via sequential nonces actually, server would just gradually roll the sequence up. But they will need to be per-region to ensure gaps don&apos;t exist.&lt;br/&gt;
The server name in nonce is equivalent to &quot;never retry on different server&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; There will be many op failures with this approach and user code will probably add retries.&lt;/p&gt;</comment>
                            <comment id="13659082" author="sershe" created="Thu, 16 May 2013 00:31:47 +0000"  >&lt;p&gt;Actually with new distributed log replay situation is even worse because nonces for things after cutoff will not be sent to remote server, so they won&apos;t be replayed. Perhaps nonce WAL-like recorder is actually the simplest solution to both...&lt;/p&gt;</comment>
                            <comment id="13659164" author="apurtell" created="Thu, 16 May 2013 02:46:24 +0000"  >&lt;p&gt;There are tough issues here and I haven&apos;t thought them through nearly as much as Sergey. My advice nonetheless is to be as simple as possible and focus on the core problem: We don&apos;t want clients to accidentally (from their perspective) submit and execute a non idempotent op more than once. Having a nonce capability in our RPC that handles all of the corner cases would be awesome but that wide scope strikes me as follow on work after solving the immediate issue at hand? If the client gets a failure (even if more often and if a region moves normally) instead of an accidentally duplicated non idempotent op, we have made progress. &lt;/p&gt;</comment>
                            <comment id="13663197" author="sershe" created="Tue, 21 May 2013 18:05:33 +0000"  >&lt;p&gt;We can do that... the problem with the approach is that region move is the normal occurence so if users get these failures frequently they will probably retry in their own code instead.&lt;/p&gt;</comment>
                            <comment id="13663216" author="apurtell" created="Tue, 21 May 2013 18:24:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;the problem with the approach is that region move is the normal occurence so if users get these failures frequently they will probably retry in their own code instead.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right, that&apos;s implied, the tradeoff I see is basically between pushing retries up to the client or taking on a lot of corner cases. Either is fine. The former seems simpler to do as the first step.&lt;/p&gt;</comment>
                            <comment id="13663383" author="sershe" created="Tue, 21 May 2013 20:42:13 +0000"  >&lt;p&gt;Sorry, got distracted and didn&apos;t post continuation comment.&lt;br/&gt;
Another concern is that if you receive smth like a network timeout you don&apos;t know whether it&apos;s safe to retry even to the same server, the server could have processed the request after all. With memory-only nonces I guess we could retry to the same server and significantly reduce the potential of duplicates. Otherwise on some errors we cannot retry at all.&lt;br/&gt;
But it will be much simpler, no WAL involved. For proper implementation it seems we&apos;d need separate WAL-like thingie for nonces and all this stuff.&lt;br/&gt;
As I said it&apos;s hard for me to judge because I don&apos;t know how important or prevalent the problem is. It doesn&apos;t seem like it would be very frequent. Maybe then we could indeed just say &quot;(almost) no retries for increment/append&quot;&lt;/p&gt;

&lt;p&gt;By the way, I just had the random idea that we could use instead. Please shoot it down or expand it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Keep current increment as is. Add idempotent(atomic? checked?)Increment for those who want it...&lt;br/&gt;
First, send a request to the server that creates a nonce on server-side, stores it (in-memory only) and returns it.&lt;br/&gt;
Then, send increment with the nonce; server-side, that removes the nonce and does the increment.&lt;br/&gt;
If increment arrives and nonce is not there the server responds that the operation is done (or expired).&lt;br/&gt;
If getting nonce fails non-trivially, it can be retried with no harm, old nonce will be expired by the server (see below).&lt;br/&gt;
If increment fails with trivial error (region moved/not there etc.), nonce is removed from server and retries are unrestricted; client has to go back to requesting nonce.&lt;br/&gt;
If increment fails non-trivially, we cannot go to a different server unless we get some definite error from current one later, after which retries are unrestricted again; or unless we preserve the nonces in-flight during recovery (which is less data than nonces of successful operations and can be added later). However we can still retry to the same server safely.&lt;br/&gt;
Requested nonces are expired by time.&lt;br/&gt;
Because server does nonce issuing sequential nonces per region the old ones can be stored for longer, they are easy to roll.&lt;/p&gt;</comment>
                            <comment id="13663862" author="anoop.hbase" created="Wed, 22 May 2013 06:51:09 +0000"  >&lt;p&gt;Interesting Sergey..&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If increment arrives and nonce is not there the server responds that the operation is done (or expired).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;How we can distinguish btw done or expired case? This will be needed back at client/app side.&lt;/p&gt;</comment>
                            <comment id="13664356" author="sershe" created="Wed, 22 May 2013 18:06:29 +0000"  >&lt;p&gt;Without storing things forever there&apos;s no way to tell them apart in any scheme. So the question is about storing for some period of time efficiently. &lt;/p&gt;</comment>
                            <comment id="13664358" author="sershe" created="Wed, 22 May 2013 18:07:40 +0000"  >&lt;p&gt;(by any scheme I mean any nonce or similar scheme, not say if operations are made intrinsically idempotent or proper transactions are implemented...)&lt;/p&gt;</comment>
                            <comment id="13668808" author="ndimiduk" created="Tue, 28 May 2013 23:30:07 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sershe&quot; class=&quot;user-hover&quot; rel=&quot;sershe&quot;&gt;Sergey Shelukhin&lt;/a&gt; I like the idea of giving users the option to sacrifice throughput in exchange for reliability.&lt;/p&gt;</comment>
                            <comment id="13670286" author="stack" created="Thu, 30 May 2013 12:22:23 +0000"  >&lt;p&gt;HDFS trying to solve similar issue &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-4849&quot; title=&quot;Enable retries for create and append operations.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-4849&quot;&gt;&lt;del&gt;HDFS-4849&lt;/del&gt;&lt;/a&gt;.  Sergey, you are not first to have this issue it seems (smile).  It even has a &apos;name&apos; &lt;a href=&quot;http://www.freesoft.org/CIE/RFC/1813/47.htm&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.freesoft.org/CIE/RFC/1813/47.htm&lt;/a&gt; (via our Todd).  Some &quot;ok&quot; suggested improvements in here: &lt;a href=&quot;https://www.kernel.org/doc/ols/2009/ols2009-pages-95-100.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://www.kernel.org/doc/ols/2009/ols2009-pages-95-100.pdf&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13678414" author="sershe" created="Fri, 7 Jun 2013 20:45:40 +0000"  >&lt;p&gt;MRU XID list in the paper actually looks somewhat similar to incrementing nonces above. We don&apos;t have the problem of clients with single vs. multiple threads etc. because we control the client, incrementing nonces would be per region per client to roll forward easier.&lt;br/&gt;
I&apos;d say response cache may not be feasible if response contains KVs, that&apos;s too much to cache imho, especially given the nature of distributed retries (they can take longer time between retries).&lt;br/&gt;
Main problem here as far as I see it is doing things between servers. For that, somewhat complicated things will have to happen. I don&apos;t see design consensus here... if we think this is important, after HBaseCon, based on current patch, I can implement one of the complex schemes to see what it looks like. What do you think it should be? Incrementing nonces + &quot;nonce WAL&quot; as described above sound good?&lt;/p&gt;</comment>
                            <comment id="13680709" author="stack" created="Tue, 11 Jun 2013 21:38:03 +0000"  >&lt;p&gt;Yeah, can&apos;t cache KV.&lt;/p&gt;

&lt;p&gt;Can we have something for one server first?&lt;/p&gt;</comment>
                            <comment id="13680751" author="sershe" created="Tue, 11 Jun 2013 22:09:09 +0000"  >&lt;p&gt;refer to the attached patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; I can remove the WAL part&lt;/p&gt;</comment>
                            <comment id="13692563" author="enis" created="Mon, 24 Jun 2013 23:46:46 +0000"  >&lt;p&gt;Sergey asked me to elaborate a bit more on my earlier candidate proposal. This is still light on details, and just for some food for thought to be considered for later. &lt;/p&gt;

&lt;p&gt;The idea for this proposal will only work with append and increment type operations, since it will be operation specific rather than a generic solution. This also relies on assumptions that distributed counters are the main use case for increment operation, and these counters are mostly written to and less-frequently read. &lt;/p&gt;

&lt;p&gt;We will introduce two KeyValue.Type&apos;s: Put_Inc and Put_App, and rely on cell tags to keep nonces around. These sort before Puts. We can make the cell tag nonce a part of sort order as well, if it is set (otherwise we can append nonce to the row_key). With this we don&apos;t need any specific handling of nonces on the write side, since writes with the same nonce will eclipse each other since they will sort the same. Also we do not have to keep anything in memory, and regions can be moved freely in between servers. Put_Inc and Put_App will not count against version, so that we keep those around until they expire. &lt;/p&gt;

&lt;p&gt;We can build a grouping KV scanner which collapses Put_Inc&apos;s with the underlying Puts. Since every get is already a scan, when client wants to read the value back, it is computed on the fly (until we see a base Put, the versions will not increase, so we will keep on scanning and buffering up). On compactions, we can also use this grouping to collapse nonces that have been expired. &lt;/p&gt;

&lt;p&gt;The data might be sorted as:&lt;br/&gt;
Put,r1,cf1:q1,ts3,val4&lt;br/&gt;
Put_Inc,r1,cf1:q1,ts2,val3 (tag:nonce)&lt;br/&gt;
Put_Inc,r1,cf1:q1,ts1,val2 (tag:nonce)&lt;br/&gt;
Put_Inc,r1,cf1:q1,ts1,val2 (tag:nonce)  =&amp;gt; idempotent rpc, second try&lt;br/&gt;
Put,r1,cf1:q1,ts1,val1&lt;/p&gt;

&lt;p&gt;Get -&amp;gt; will return val4. &lt;br/&gt;
Get (ts &amp;lt;= ts2) will return val3 + val2 + val1&lt;/p&gt;</comment>
                            <comment id="13692595" author="sershe" created="Tue, 25 Jun 2013 00:03:43 +0000"  >&lt;p&gt;My 2 concerns about this are as follows.&lt;br/&gt;
First, if there are a lot of clients incrementing one counter, gets will have to read 100s-1000s-... KVs and will be slower.&lt;br/&gt;
Second, actually increments and appends are currently versions, because internally they are just puts. That, plus # of versions restriction, plus out-of-order puts and deletes, will make version management... interesting.&lt;/p&gt;

&lt;p&gt;However it does make operations inherently idempotent.&lt;/p&gt;</comment>
                            <comment id="13692603" author="apurtell" created="Tue, 25 Jun 2013 00:07:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;We can make the cell tag nonce a part of sort order as well,&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Cells can have arbitrary tags. Do we really want them to be part of the sort order of KeyValues? How does that work? Do we sort first by tag type, then by tag value? Really should avoid going this way if possible.&lt;/p&gt;</comment>
                            <comment id="13692669" author="enis" created="Tue, 25 Jun 2013 01:36:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;Cells can have arbitrary tags. Do we really want them to be part of the sort order of KeyValues? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed that we have to think carefully about this. Obviously, we do not want arbitrary tags to be part of sort order. AFAIK, accumulo&apos;s acl&apos;s are in sort order. We can have system level tags that are sortable vs user level tags, or a boolean per tag indicating whether the value is sortable. &lt;/p&gt;</comment>
                            <comment id="13692678" author="apurtell" created="Tue, 25 Jun 2013 01:47:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;accumulo&apos;s acl&apos;s are in sort order&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Accumulo has visibility expressions, not ACLs. &lt;/p&gt;

&lt;p&gt;Considering the visibility expression part of the KV was the cause of the data inflation discussed in Himanshu&apos;s proposal on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6222&quot; title=&quot;Add per-KeyValue Security&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6222&quot;&gt;&lt;del&gt;HBASE-6222&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We can have system level tags that are sortable vs user level tags, or a boolean per tag indicating whether the value is sortable.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How do we distinguish system level tags? I want my coprocessor to have system level tags. It will be registered dynamically on a per table basis.&lt;/p&gt;

&lt;p&gt;So if there&apos;s a boolean per tag, then the comparator is skipping a range, checking a byte, including a range, skipping another range, testing another byte, and so on.&lt;/p&gt;

&lt;p&gt;I don&apos;t think tags should be considered by KeyValue or Cell comparators at all.&lt;/p&gt;</comment>
                            <comment id="13697425" author="enis" created="Tue, 2 Jul 2013 02:29:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;I don&apos;t think tags should be considered by KeyValue or Cell comparators at all.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed. Thinking more about it that would be very complex in terms of semantics and implementation. &lt;br/&gt;
I guess we can alter my proposal above to make it so that Incr records count towards versions, but the cells should have unlimited number of versions to work. &lt;/p&gt;</comment>
                            <comment id="13702160" author="sershe" created="Mon, 8 Jul 2013 17:37:04 +0000"  >&lt;p&gt;FWIW: this paper (I don&apos;t remember where I obtained the pdf frankly, I cannot find it in normal access) &lt;a href=&quot;http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;amp;arnumber=5697970&amp;amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fiel5%2F5685607%2F5697799%2F05697970.pdf%3Farnumber%3D5697970&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://ieeexplore.ieee.org/xpl/login.jsp?tp=&amp;amp;arnumber=5697970&amp;amp;url=http%3A%2F%2Fieeexplore.ieee.org%2Fiel5%2F5685607%2F5697799%2F05697970.pdf%3Farnumber%3D5697970&lt;/a&gt; relies on well-defined return value for increments, as well as on tables with very large volume of increments to the same value (transaction ids of various sorts). Granted, HBase is probably not the best tool for the job in this case...&lt;/p&gt;</comment>
                            <comment id="13730364" author="stack" created="Tue, 6 Aug 2013 05:18:08 +0000"  >&lt;p&gt;What is current thinking on this one?&lt;/p&gt;

&lt;p&gt;I gave it a reskim.  It is straight-forward (even where we write the WAL).  It is off by default.  Should we commit or punt till later, till we have an interested user?&lt;/p&gt;</comment>
                            <comment id="13735995" author="stack" created="Sat, 10 Aug 2013 18:41:55 +0000"  >&lt;p&gt;Moving out.  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sershe&quot; class=&quot;user-hover&quot; rel=&quot;sershe&quot;&gt;Sergey Shelukhin&lt;/a&gt; has done bunch of research and has proposed patch up.  Needs more review and testing.  Won&apos;t make the 0.96 cut and can come in later anyways.&lt;/p&gt;</comment>
                            <comment id="13798468" author="sershe" created="Thu, 17 Oct 2013 21:41:22 +0000"  >&lt;p&gt;What is the future for this patch? If we want this feature I can rebase and commit in trunk&lt;/p&gt;</comment>
                            <comment id="13798488" author="stack" created="Thu, 17 Oct 2013 21:53:57 +0000"  >&lt;p&gt;I think we need this patch.  Just needs review before commit.&lt;/p&gt;</comment>
                            <comment id="13798503" author="sershe" created="Thu, 17 Oct 2013 22:08:08 +0000"  >&lt;p&gt;Volunteers to review? &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13798592" author="devaraj" created="Thu, 17 Oct 2013 23:26:03 +0000"  >&lt;p&gt;I&apos;ll get to it...&lt;/p&gt;</comment>
                            <comment id="13798841" author="devaraj" created="Fri, 18 Oct 2013 06:28:35 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sershe&quot; class=&quot;user-hover&quot; rel=&quot;sershe&quot;&gt;Sergey Shelukhin&lt;/a&gt;, please bear with me - (1) could you please upload a rebased patch. The patch is horribly out-of-date. (2) &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-4979&quot; title=&quot;Implement retry cache on the namenode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-4979&quot;&gt;&lt;del&gt;HDFS-4979&lt;/del&gt;&lt;/a&gt; introduced RetryCache in the NameNode. Not sure if it is reasonable - is it possible to use the classes from &lt;a href=&quot;https://issues.apache.org/jira/browse/HDFS-4979&quot; title=&quot;Implement retry cache on the namenode&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HDFS-4979&quot;&gt;&lt;del&gt;HDFS-4979&lt;/del&gt;&lt;/a&gt; here.&lt;/p&gt;</comment>
                            <comment id="13808637" author="sershe" created="Wed, 30 Oct 2013 00:56:10 +0000"  >&lt;p&gt;there&apos;s a monumental number of conflicts... let me try to rebase this.&lt;/p&gt;</comment>
                            <comment id="13809853" author="sershe" created="Thu, 31 Oct 2013 02:16:53 +0000"  >&lt;p&gt;trying to grok rpc changes, sent some email to Nicolas. Will maybe update by EOW&lt;/p&gt;</comment>
                            <comment id="13811804" author="sershe" created="Sat, 2 Nov 2013 00:29:39 +0000"  >&lt;p&gt;The rebased patch.&lt;br/&gt;
Given the new retry paths, the new batch RPC endpoints, and the new log replay large parts of the patch were rewritten.&lt;br/&gt;
The manager/generator obviously didn&apos;t change.&lt;/p&gt;

&lt;p&gt;There were some suggestions that may be added here or in separate jira:&lt;br/&gt;
1) Also use nonce in checkAndPut.&lt;br/&gt;
2) Look at HDFS stuff. That applies mostly to manager implementation, and is unlikely to affect RPC/HTable/etc. plumbing. It appeared later than the original patch here, so there was nothing to look at when this was first submitted. I talked a little bit to HDFS ppl here about it, will take a look next week. But the model is very similar so plumbing can be reviewed regardless.&lt;br/&gt;
3) Store MVCC and instead of throwing OpConflictEx, do a read with that mvcc. Will need to work w/low watermark to not discard MVCC below earliest stored nonce. Definitely separate JIRA.&lt;br/&gt;
4) Probably the HTable test needs to be extended to at least one batch op.&lt;/p&gt;

&lt;p&gt;Let me also run some larger scale tests on it...&lt;/p&gt;</comment>
                            <comment id="13811807" author="sershe" created="Sat, 2 Nov 2013 00:35:44 +0000"  >&lt;p&gt;Sorry, one thing missing is special handling for new wal recovery&lt;/p&gt;</comment>
                            <comment id="13811847" author="hadoopqa" created="Sat, 2 Nov 2013 02:37:16 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12611722/HBASE-3787-v6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12611722/HBASE-3787-v6.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 20 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.master.TestDistributedLogSplitting&lt;br/&gt;
                  org.apache.hadoop.hbase.coprocessor.TestRegionObserverInterface&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7709//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13811853" author="yuzhihong@gmail.com" created="Sat, 2 Nov 2013 02:58:22 +0000"  >&lt;p&gt;In all the failed tests, I saw:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2013-11-02 02:30:15,355 ERROR [RpcServer.handler=4,port=35527] ipc.RpcServer(2020): Unexpected throwable object 
java.lang.AssertionError
	at org.apache.hadoop.hbase.regionserver.HRegion$ReplayBatch.getMutationsForCoprocs(HRegion.java:1970)
	at org.apache.hadoop.hbase.regionserver.HRegion.doMiniBatchMutation(HRegion.java:2244)
	at org.apache.hadoop.hbase.regionserver.HRegion.batchMutate(HRegion.java:2040)
	at org.apache.hadoop.hbase.regionserver.HRegion.batchReplay(HRegion.java:2004)
	at org.apache.hadoop.hbase.regionserver.HRegionServer.doReplayBatchOp(HRegionServer.java:4234)
	at org.apache.hadoop.hbase.regionserver.HRegionServer.replay(HRegionServer.java:3915)
	at org.apache.hadoop.hbase.protobuf.generated.AdminProtos$AdminService$2.callBlockingMethod(AdminProtos.java:19809)
	at org.apache.hadoop.hbase.ipc.RpcServer.call(RpcServer.java:1983)
	at org.apache.hadoop.hbase.ipc.CallRunner.run(CallRunner.java:92)
	at org.apache.hadoop.hbase.ipc.SimpleRpcScheduler.consumerLoop(SimpleRpcScheduler.java:160)
	at org.apache.hadoop.hbase.ipc.SimpleRpcScheduler.access$000(SimpleRpcScheduler.java:38)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which was due to this in ReplayBatch:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Mutation[] getMutationsForCoprocs() {
+      &lt;span class=&quot;code-keyword&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RuntimeException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Should not be called &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; replay batch&quot;&lt;/span&gt;);
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13813103" author="sershe" created="Mon, 4 Nov 2013 18:47:01 +0000"  >&lt;p&gt;yeah, wrong value is passed from replaybatch. There is another issue, I need to look at behavior of nonces for new replay... for old one, the patch has special time handling, so that after replay you don&apos;t get bunch of replayed nonces stored as new, with full recovery period. Let me see how to do it for new one.&lt;/p&gt;</comment>
                            <comment id="13813410" author="sershe" created="Mon, 4 Nov 2013 23:31:25 +0000"  >&lt;p&gt;Fix the bug; finish support for distributed log replay, add test to ensure nonces work across log replay&lt;/p&gt;</comment>
                            <comment id="13813412" author="sershe" created="Mon, 4 Nov 2013 23:32:00 +0000"  >&lt;p&gt;Woops, forgot rb feedback. I will respond and make the requisite fixes in v8&lt;/p&gt;</comment>
                            <comment id="13813486" author="sershe" created="Tue, 5 Nov 2013 00:51:39 +0000"  >&lt;p&gt;RB feedback, a little bit space saving for nonces.&lt;br/&gt;
I looked at hadoop-common retrycache, it seems to be specific to hadoop RPC and depends on some static methods there. &lt;/p&gt;</comment>
                            <comment id="13813504" author="hadoopqa" created="Tue, 5 Nov 2013 01:04:53 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12612055/HBASE-3787-v7.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12612055/HBASE-3787-v7.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 23 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestHRegionBusyWait&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestAtomicOperation&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7730//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13813569" author="hadoopqa" created="Tue, 5 Nov 2013 02:24:45 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12612070/HBASE-3787-v8.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12612070/HBASE-3787-v8.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 23 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestHRegion&lt;br/&gt;
                  org.apache.hadoop.hbase.regionserver.TestHRegionBusyWait&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7731//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13814458" author="sershe" created="Wed, 6 Nov 2013 00:44:13 +0000"  >&lt;p&gt;btw, the patch is ready to review. I filed &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9899&quot; title=&quot;for idempotent operation dups, return the result instead of throwing conflict exception&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9899&quot;&gt;&lt;del&gt;HBASE-9899&lt;/del&gt;&lt;/a&gt; for follow-up work&lt;/p&gt;</comment>
                            <comment id="13816297" author="sershe" created="Thu, 7 Nov 2013 19:16:46 +0000"  >&lt;p&gt;any takers for review? This is a huge pita to rebase when it becomes stale&lt;/p&gt;</comment>
                            <comment id="13816366" author="stack" created="Thu, 7 Nov 2013 20:03:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sershe&quot; class=&quot;user-hover&quot; rel=&quot;sershe&quot;&gt;Sergey Shelukhin&lt;/a&gt; Is latest on RB boss?&lt;/p&gt;</comment>
                            <comment id="13816423" author="sershe" created="Thu, 7 Nov 2013 21:09:00 +0000"  >&lt;p&gt;yeah, I updated &lt;a href=&quot;https://reviews.apache.org/r/10965/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/10965/&lt;/a&gt; with latest patch&lt;/p&gt;</comment>
                            <comment id="13816873" author="sershe" created="Fri, 8 Nov 2013 01:05:24 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt; asked me... some review guideline (of course you can review in any order).&lt;br/&gt;
1) Client nonce generator, as well as additions to testMultiParallel and test log replay to get the idea of the feature.&lt;br/&gt;
2) Test of the nonce manager and nonce manager to see server nonce handling and how it works.&lt;br/&gt;
3) Plumbing (most of the patch), unfortunately there isn&apos;t any good order to review plumbing... perhaps:&lt;br/&gt;
a) protobuf and client changes.&lt;br/&gt;
b) server and log replay changes.&lt;/p&gt;</comment>
                            <comment id="13817993" author="sershe" created="Sat, 9 Nov 2013 03:47:11 +0000"  >&lt;p&gt;rebase the patch again, and address current CR feedback&lt;/p&gt;</comment>
                            <comment id="13818030" author="hadoopqa" created="Sat, 9 Nov 2013 05:52:01 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12612969/HBASE-3787-v9.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12612969/HBASE-3787-v9.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 23 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7805//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13819796" author="sershe" created="Tue, 12 Nov 2013 03:42:00 +0000"  >&lt;p&gt;some CR feedback, some comments. I saw some questions about the &quot;holes&quot; in the approach that were mentioned in the JIRA much earlier and someone couldn&apos;t find them, but I cannot find the question now &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
I put the details in comments in the code&lt;/p&gt;</comment>
                            <comment id="13820494" author="ndimiduk" created="Tue, 12 Nov 2013 21:27:44 +0000"  >&lt;p&gt;RB is broken today. Let me attempt to provide context and comment here.&lt;/p&gt;

&lt;p&gt;From NonceGenerator.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Random generation is just bunch of arithmetic and one CAS. Do you suspect there will be contention from many threads running the increments?&lt;br/&gt;
Can you provide more details for impact from benchmark?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m thinking less of contention and more about the CPU time necessary for the arithmetic. I haven&apos;t investigated the implementation to understand why, so perhaps my comment is ungrounded. Specifically I&apos;m referring to this comment in PerfEval#generateData method&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;  /*
   * This method takes some time and is done inline uploading data.  For
   * example, doing the mapfile test, generation of the key and value
   * consumes about 30% of CPU time.
   * @return Generated random value to insert into a table cell.
   */
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In that case, the system is generating ~1k random ints per loop iteration. You&apos;re generating far fewer, so maybe it&apos;s a non-issue?&lt;/p&gt;

&lt;p&gt;From TestMultiParallel.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;yes, they are. It&apos;s assertTrue(false) essentially&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Right. As I understand it, JUnit asserts are represented as thrown Exceptions. Because the source of the exception is within a running thread, those exceptions must be aggregated and re-thrown in order for the calling context to respect them.&lt;/p&gt;</comment>
                            <comment id="13820675" author="hadoopqa" created="Tue, 12 Nov 2013 23:44:33 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12613314/HBASE-3787-v10.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12613314/HBASE-3787-v10.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 23 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 2 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7824//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13820786" author="sershe" created="Wed, 13 Nov 2013 01:29:07 +0000"  >&lt;p&gt;changed to interface to separate client id impl from the interface; fixed tests. One question about perf remains on the JIRA. I don&apos;t think some arithmetic and CAS to generate 2 random ints (for a long) will have significant impact. CASes can have contention I guess if there are many threads, but other than a threadlocal there&apos;s no much better way to do it.&lt;/p&gt;</comment>
                            <comment id="13821087" author="hadoopqa" created="Wed, 13 Nov 2013 09:12:19 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12613489/HBASE-3787-v11.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12613489/HBASE-3787-v11.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 23 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 2 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 release audit&lt;/font&gt;.  The applied patch generated 1 release audit warnings (more than the trunk&apos;s current 0 warnings).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7834//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13821737" author="sershe" created="Wed, 13 Nov 2013 19:38:38 +0000"  >&lt;p&gt;I will be going off the grid next week... the patch is ready, if there&apos;s no other feedback it&apos;s ok if someone else commits then &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13821942" author="stack" created="Wed, 13 Nov 2013 22:47:20 +0000"  >&lt;p&gt;What is this change?&lt;/p&gt;

&lt;p&gt;&quot;...changed to interface to separate client id impl from the interface; &quot;&lt;/p&gt;

&lt;p&gt;I skimmed the patch (RB is down).  EIther you fixed it or I was confused.  I see a clientidnonce thingy now and it has mention of client id internal... that is fine (if that was how it always was, discount my RB comment .  If you changed stuff, thanks).&lt;/p&gt;

&lt;p&gt;+1 on commit.  Important fix.  Thanks for the persistence Sergey.  Work it out w/ &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt; so you can commit this before you leave so it doesn&apos;t rot again.&lt;/p&gt;</comment>
                            <comment id="13821975" author="ndimiduk" created="Wed, 13 Nov 2013 23:21:39 +0000"  >&lt;p&gt;I agree, this is a very important feature. I&apos;d rather have it and fix any perf impact later than let is get stale again.&lt;/p&gt;

&lt;p&gt;This review is based on `interdiff v10 v11`, so please pardon any confused that comes about from a rebase.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+    /** Dummy nonce generator for disabled nonces. */
+    private static class NoNonceGenerator implements NonceGenerator {
+      @Override
+      public long getNonceGroup() {
+        return HConstants.NO_NONCE;
+      }
+      @Override
+      public long newNonce() {
+        return HConstants.NO_NONCE;
+      }
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Love it. This is a great way to abstract this component.&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;+import java.sql.Date;
+import java.text.SimpleDateFormat;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Did you mean &lt;/p&gt;
{java.util.Date}
&lt;p&gt; ?&lt;/p&gt;

&lt;p&gt;TestRunnable is excellent.&lt;/p&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13822958" author="sershe" created="Thu, 14 Nov 2013 21:45:45 +0000"  >&lt;p&gt;rebase the patch yet again due to conflicts. Change date type. I would assume +1s stand unless there are objections, and will commit evening-ish&lt;/p&gt;</comment>
                            <comment id="13822981" author="ndimiduk" created="Thu, 14 Nov 2013 21:59:16 +0000"  >&lt;p&gt;Interdiff choked this time. Can we try RB once again?&lt;/p&gt;

&lt;p&gt;Anyway, if that&apos;s all you changed, I retain my +1.&lt;/p&gt;</comment>
                            <comment id="13823016" author="stack" created="Thu, 14 Nov 2013 22:16:47 +0000"  >&lt;p&gt;My +1 stands across a rebase.&lt;/p&gt;</comment>
                            <comment id="13823097" author="hadoopqa" created="Thu, 14 Nov 2013 23:21:00 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12613942/HBASE-3787-v12.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12613942/HBASE-3787-v12.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 23 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 release audit&lt;/font&gt;.  The applied patch generated 1 release audit warnings (more than the trunk&apos;s current 0 warnings).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7866//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13823103" author="yuzhihong@gmail.com" created="Thu, 14 Nov 2013 23:26:48 +0000"  >&lt;p&gt;PerClientRandomNonceGenerator.java needs license.&lt;/p&gt;</comment>
                            <comment id="13823271" author="sershe" created="Fri, 15 Nov 2013 04:38:32 +0000"  >&lt;p&gt;committed in 2 parts (added license)&lt;/p&gt;</comment>
                            <comment id="13824072" author="hudson" created="Fri, 15 Nov 2013 20:45:04 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #838 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/838/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/838/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3787&quot; title=&quot;Increment is non-idempotent but client retries RPC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3787&quot;&gt;&lt;del&gt;HBASE-3787&lt;/del&gt;&lt;/a&gt; Increment is non-idempotent but client retries RPC ADDENDUM add licence (sershe: rev 1542169)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/PerClientRandomNonceGenerator.java&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3787&quot; title=&quot;Increment is non-idempotent but client retries RPC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3787&quot;&gt;&lt;del&gt;HBASE-3787&lt;/del&gt;&lt;/a&gt; Increment is non-idempotent but client retries RPC (sershe: rev 1542168)&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Action.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncProcess.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ClientIdGenerator.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HConnection.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MultiAction.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MultiServerCallable.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/NonceGenerator.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/PerClientRandomNonceGenerator.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/exceptions/OperationConflictException.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/RequestConverter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Triple.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ClientProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/MultiRowMutationProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/RowProcessorProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/WALProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/protobuf/Client.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/protobuf/MultiRowMutation.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/protobuf/RowProcessor.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/protobuf/WAL.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/CoprocessorHConnection.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRowProcessorEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MultiRowMutationEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/ReplicationProtbufUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ServerNonceManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/FSHLog.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLog.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogKey.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogSplitter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/SnapshotLogSplitter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/MockRegionServerServices.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMultiParallel.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestDistributedLogSplitting.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/protobuf/TestProtobufUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestServerNonceManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/HLogPerformanceEvaluation.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13824378" author="hudson" created="Sat, 16 Nov 2013 04:05:43 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-TRUNK #4681 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/4681/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/4681/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3787&quot; title=&quot;Increment is non-idempotent but client retries RPC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3787&quot;&gt;&lt;del&gt;HBASE-3787&lt;/del&gt;&lt;/a&gt; Increment is non-idempotent but client retries RPC ADDENDUM add licence (sershe: rev 1542169)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/PerClientRandomNonceGenerator.java&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3787&quot; title=&quot;Increment is non-idempotent but client retries RPC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3787&quot;&gt;&lt;del&gt;HBASE-3787&lt;/del&gt;&lt;/a&gt; Increment is non-idempotent but client retries RPC (sershe: rev 1542168)&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/Action.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncProcess.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ClientIdGenerator.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HConnection.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/HTable.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MultiAction.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MultiServerCallable.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/NonceGenerator.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/client/PerClientRandomNonceGenerator.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/exceptions/OperationConflictException.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/ProtobufUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/protobuf/RequestConverter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-common/src/main/java/org/apache/hadoop/hbase/util/Triple.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ClientProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/MultiRowMutationProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/RowProcessorProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/java/org/apache/hadoop/hbase/protobuf/generated/WALProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/protobuf/Client.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/protobuf/MultiRowMutation.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/protobuf/RowProcessor.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-protocol/src/main/protobuf/WAL.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/CoprocessorHConnection.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRowProcessorEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/coprocessor/MultiRowMutationEndpoint.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/ReplicationProtbufUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ServerNonceManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/FSHLog.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLog.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogKey.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogSplitter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/HLogUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/snapshot/SnapshotLogSplitter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/MockRegionServerServices.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMultiParallel.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/MockRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestDistributedLogSplitting.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/protobuf/TestProtobufUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestServerNonceManager.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/HLogPerformanceEvaluation.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13841788" author="sershe" created="Fri, 6 Dec 2013 22:15:05 +0000"  >&lt;p&gt;This was actually committed some time ago (before branching 0.98 I think)&lt;/p&gt;</comment>
                            <comment id="14331068" author="enis" created="Sat, 21 Feb 2015 23:33:14 +0000"  >&lt;p&gt;Closing this issue after 0.99.0 release. &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12677693">HBASE-9899</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12455264">HBASE-2182</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12554961">HADOOP-8394</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="12310050">
                    <name>Regression</name>
                                            <outwardlinks description="breaks">
                                        <issuelink>
            <issuekey id="12682254">HBASE-10069</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                            <outwardlinks description="depends upon">
                                        <issuelink>
            <issuekey id="12624916">HBASE-7413</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12578276" name="HBASE-3787-partial.patch" size="65170" author="sershe" created="Thu, 11 Apr 2013 20:36:36 +0000"/>
                            <attachment id="12581464" name="HBASE-3787-v0.patch" size="95809" author="sershe" created="Thu, 2 May 2013 02:36:46 +0000"/>
                            <attachment id="12581965" name="HBASE-3787-v1.patch" size="110886" author="sershe" created="Mon, 6 May 2013 21:52:30 +0000"/>
                            <attachment id="12613314" name="HBASE-3787-v10.patch" size="208628" author="sershe" created="Tue, 12 Nov 2013 03:42:00 +0000"/>
                            <attachment id="12613489" name="HBASE-3787-v11.patch" size="213828" author="sershe" created="Wed, 13 Nov 2013 01:29:07 +0000"/>
                            <attachment id="12613942" name="HBASE-3787-v12.patch" size="214679" author="sershe" created="Thu, 14 Nov 2013 21:45:45 +0000"/>
                            <attachment id="12582127" name="HBASE-3787-v2.patch" size="113485" author="sershe" created="Tue, 7 May 2013 17:11:03 +0000"/>
                            <attachment id="12582229" name="HBASE-3787-v3.patch" size="113525" author="sershe" created="Wed, 8 May 2013 01:17:42 +0000"/>
                            <attachment id="12582375" name="HBASE-3787-v4.patch" size="119355" author="sershe" created="Wed, 8 May 2013 23:12:55 +0000"/>
                            <attachment id="12583060" name="HBASE-3787-v5.patch" size="122295" author="sershe" created="Tue, 14 May 2013 02:11:17 +0000"/>
                            <attachment id="12583058" name="HBASE-3787-v5.patch" size="122314" author="sershe" created="Tue, 14 May 2013 02:05:13 +0000"/>
                            <attachment id="12611722" name="HBASE-3787-v6.patch" size="194071" author="sershe" created="Sat, 2 Nov 2013 00:29:39 +0000"/>
                            <attachment id="12612055" name="HBASE-3787-v7.patch" size="203777" author="sershe" created="Mon, 4 Nov 2013 23:31:25 +0000"/>
                            <attachment id="12612070" name="HBASE-3787-v8.patch" size="205481" author="sershe" created="Tue, 5 Nov 2013 00:51:39 +0000"/>
                            <attachment id="12612969" name="HBASE-3787-v9.patch" size="206613" author="sershe" created="Sat, 9 Nov 2013 03:47:11 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>15.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 13 Sep 2012 22:41:36 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>27020</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 42 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02bfb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11452</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>