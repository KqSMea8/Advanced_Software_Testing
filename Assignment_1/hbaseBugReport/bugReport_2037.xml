<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:58:27 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2037/HBASE-2037.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2037] Alternate indexed hbase implementation; speeds scans by adding indexes to regions rather secondary tables</title>
                <link>https://issues.apache.org/jira/browse/HBASE-2037</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Purpose&lt;/p&gt;

&lt;p&gt;The goal of the indexed HBase contrib is to speed up scans by indexing HBase columns. Indexed HBase (IHbase) is different from the indexed tables in transactional HBase (ITHbase): while the indexes in ITHBase are, in fact, hbase tables using the indexed column&apos;s values as row keys, IHbase creates indexes at the region level. The differences are summarized in below.&lt;/p&gt;

&lt;p&gt;+ global ordering&lt;br/&gt;
ITHBase: yes&lt;br/&gt;
IHBase: no&lt;br/&gt;
Comment: IHBase has an index for each region. The flip side of not having global ordering is compatibility with the good old HRegion: results are coming back in row order (and not value order as in THBase)&lt;/p&gt;

&lt;p&gt;+ Full table scan?&lt;br/&gt;
ITHBase: no&lt;br/&gt;
IHBase: no&lt;br/&gt;
Comment: ITHbase does a partial scan on the index table. IHbase supports specifying start/end rows to limit the number of scanned regions&lt;/p&gt;

&lt;p&gt;+ Multiple Index Usage&lt;br/&gt;
ITHBase: no&lt;br/&gt;
IHBase: yes&lt;br/&gt;
Comment: IHBase can take advantage of multiple indexes in the same scan. IHBase IdxScan object accepts an Expression which allows intersection/ unison of several indexed &lt;br/&gt;
column criteria&lt;/p&gt;

&lt;p&gt;+ Extra disk storage&lt;br/&gt;
ITHBase: yes&lt;br/&gt;
IHBase: no&lt;br/&gt;
Comment: IHbase indexes are created when the region starts/flushes and do not require any extra storage&lt;/p&gt;

&lt;p&gt;+ Extra RAM&lt;br/&gt;
ITHBase: yes&lt;br/&gt;
IHBase: yes&lt;br/&gt;
Comment: IHbase indexes are in memory and hence increase the memory overhead. THbase indexes increase the number of regions each region server has to support thus costing memory too&lt;/p&gt;

&lt;p&gt;+ Parallel scanning support&lt;br/&gt;
ITHBase: no&lt;br/&gt;
IHBase: yes&lt;br/&gt;
In ITHbase the index table needs to be consulted and then GETs are issued for each matching row. The behavior of IHBase (as perceived by the client) is no different than a regular scan and hence supports parallel scanning seamlessly. parallel GET can be implemented to speedup ITHbase scans&lt;/p&gt;


&lt;p&gt;Why IHbase should outperform ITHBase&lt;br/&gt;
1. More flexible: a. Supports range queries and multi-index queries b. Supports different types - not only byte arrays&lt;br/&gt;
2. Less overhead: ITHbase pays at least two &apos;table roundtrips&apos; - one for the index table and the other for the main table&lt;br/&gt;
3. Quicker index expression evaluation: IHBase is using dedicated index data structures while ITHbase is using the regular HRegion scan facilities&lt;/p&gt;

&lt;p&gt;Implementation notes&lt;br/&gt;
&#8226; Only index Storefiles.Every index scan performs a full memstore scan. Indexing the memstore will be implemented only if scanning the memstore will prove to be a performance bottleneck&lt;br/&gt;
&#8226; Index expression evaluation is performed using bit sets.There are two types of bitsets: compressed and expanded. An index will typically store a compressed bitset while an expression evaluator will most probably use an expanded bitset&lt;br/&gt;
+ TODO&lt;/p&gt;

&lt;p&gt;This patch changes some some of hbase core so can instantiate other than default HRegion.  Fixes bugs in filter too.&lt;/p&gt;

&lt;p&gt;Would like to add this as a contrib. package on 0.20 branch in time for 0.20.3 if possible.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12443018">HBASE-2037</key>
            <summary>Alternate indexed hbase implementation; speeds scans by adding indexes to regions rather secondary tables</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stack">stack</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Dec 2009 19:26:48 +0000</created>
                <updated>Fri, 12 Oct 2012 06:14:16 +0000</updated>
                            <resolved>Thu, 7 Jan 2010 02:18:50 +0000</resolved>
                                                    <fixVersion>0.20.3</fixVersion>
                                    <component>Coprocessors</component>
                        <due></due>
                            <votes>2</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="12788860" author="stack" created="Thu, 10 Dec 2009 19:35:34 +0000"  >&lt;p&gt;This is a git patch.  Includes apache commons-lang 2.4 jar.  Used by the modified Pair class and by the some of the indexed classes&lt;/p&gt;

&lt;p&gt;Other changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;src/contrib/build-contrib.xml enabled assertions (-ea) on contrib tests&lt;/li&gt;
	&lt;li&gt;src/java/org/apache/hadoop/hbase/ HConstants.java Added a constant (REGION_IMPL) for the region implementation configuration&lt;/li&gt;
	&lt;li&gt;src/java/org/apache/hadoop/hbase/HMerge.java Replcaed region construction with factory method HRegion.newRegion&lt;/li&gt;
	&lt;li&gt;src/java /org/apache/hadoop/hbase/client/ Scan.java Added a &apos;values&apos; map to the scan object. Same purpose as HColumnDescriptor values.&lt;/li&gt;
	&lt;li&gt;src/java/org/apache/hadoop/hbase/filter/ FilterList.java Fixed a bug in the filterKeyValue method which prevented encapsulated filters from seeing the key-value when operator is MUST_PASS_ONE and a filter other than the last filter on the filter list asked to include the record.&lt;/li&gt;
	&lt;li&gt;src/java/org/apache/hadoop/hbase/regionserver/ HRegion.java&lt;br/&gt;
1. Added a static method newHRegion which takes the region class denoted by HConstants.REGION_IMPL into account when instantiating the region&lt;br/&gt;
2. Changed all the region instantiations to use the above method&lt;br/&gt;
3. Commented the HRegion constructor so that it won&apos;t be called directly from production code&lt;br/&gt;
4. Elevated the protection of internalFlushCache to protected&lt;br/&gt;
5. ChangedtheinternalFlushCachemethod implementation to use the StoreFlusher and block scans when a store flush is committed&lt;br/&gt;
6. Added a hook internalPreFlashcacheCommit which is used by the IdxRegion to rebuild the index&lt;br/&gt;
7. Deletes and puts are now blocking the creation of a new scanner (and vise versa). The need for this is demonstrated by a test method added to TestHRegion. Note that only scanner creation is blocked.&lt;br/&gt;
8. Added method RegionScanner.fillNextResults to allow the IdxRegionScanner to fast-forward the storeHeap after the results are read from the storeHeap.&lt;br/&gt;
9. Added a protected method instantiateInternalScanner and changed the instantiation in the getScanner method to use it&lt;br/&gt;
Document generated by Confluence on 09 Dec 2009, 16:41	Page 1&lt;/li&gt;
	&lt;li&gt;src/test/org/apache/hadoop/hbase/regionserver/ TestHRegion.java&lt;br/&gt;
1. Elevated the protection of the final table, qual, value and row final variables to protected&lt;br/&gt;
2. Broke the private initHRegion method to two protected methods. This change allows minimal code to inherit from this test and run all its tests on {{IdxRegion}}s&lt;br/&gt;
3. Added a bunch of tests most of them multi threaded to demonstrate/verify operation under concurrent writes/flushes/gets/scans. Most of the tests added fail if you don&apos;t apply the rest of the patch&lt;/li&gt;
	&lt;li&gt;src/java/org/apache/hadoop/hbase/regionserver/ HRegionServer.java Changed HRegion instantiation to use the static HRegion.newHRegion method&lt;/li&gt;
	&lt;li&gt;src/java/org/apache/hadoop/hbase/regionserver/ KeyValueSkipListSet.java Changed to be cloneable to support the new MemstoreScanner implementation&lt;/li&gt;
	&lt;li&gt;src/java/org/apache/hadoop/hbase/regionserver/ MemStore.java&lt;br/&gt;
1. Cancelled the observer pattern for scanners which causes on-going writes to slow down scans&lt;br/&gt;
2. Adjusted FIXED_OVERHEAD since the observer list was removed&lt;br/&gt;
3. Ripped out MemStoreScanner and put it in its own file&lt;br/&gt;
4. Some whitespace changes which I&apos;m too lazy to revert&lt;/li&gt;
	&lt;li&gt;src/java/org/apache/hadoop/hbase/regionserver/ MemStoreScanner.java MemStoreScanner completely re-implemented. It had a bug which prevented it from scanning correctly while a snapshot existed and it was reset every time the store was written. The price paid for making it independent of writes is cloning the kvset and snapshot when it&apos;s created. My calculation shows that this costs approx 4K for every clone. I have a note to add a test to verify that. The need to make changes to memstore scans arose from failing functional tests (added to TestHRegion). We didn&apos;t do any performance optimizations - only checked that it didn&apos;t make things worse.&lt;/li&gt;
	&lt;li&gt;src/java/org/apache/hadoop/hbase/regionserver/ ScanDeleteTracker.java Changed &amp;lt; to &amp;lt;=. A test was added to TestHRegion.&lt;/li&gt;
	&lt;li&gt;src/java/org/apache/hadoop/hbase/regionserver/ Store.java Store flushing broken out to a StoreFlusher (below). Need arose from functional test failures (TestHRegion) and from the need to add a hook for index recreation&lt;/li&gt;
	&lt;li&gt;src/test/org/apache/hadoop/hbase/regionserver/ TestStore.java Fixed to use the new implementation of&lt;br/&gt;
flushCache&lt;/li&gt;
	&lt;li&gt;src/java/org/apache/hadoop/hbase/regionserver/ StoreFlusher.java An interface used by HRegion to flush stores. the prepare() and commit() methods are hooks for quick switches:&lt;br/&gt;
&#8226; prepare() switches the MemStore&apos;s kvset to snapshot&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12788872" author="apurtell" created="Thu, 10 Dec 2009 19:49:19 +0000"  >&lt;p&gt;Maybe this can go in to 0.20.3 as-is but for 0.21 (or 0.22) we can do something else? Excepting the changes to core, this seems like something which should be implemented as a coprocessor. It would also serve as a goalpost for the coprocessor stuff. &lt;/p&gt;</comment>
                            <comment id="12788888" author="stack" created="Thu, 10 Dec 2009 20:13:50 +0000"  >&lt;p&gt;Yes, it seems like a good candidate to be done as coprocessor.  Let me see about including in 0.20.3.  Includes a few significant changes to core.&lt;/p&gt;</comment>
                            <comment id="12788895" author="apurtell" created="Thu, 10 Dec 2009 20:21:50 +0000"  >&lt;p&gt;Some of those changes, like MemStore refactoring and StoreFlusher, have a lot of merit in their own right. &lt;/p&gt;</comment>
                            <comment id="12796566" author="stack" created="Tue, 5 Jan 2010 07:06:29 +0000"  >&lt;p&gt;All tests pass but this one:&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;error&quot;&gt;&amp;#91;junit&amp;#93;&lt;/span&gt; Test org.apache.hadoop.hbase.regionserver.TestGetDeleteTracker FAILED is failing.  Otherwise all other core tests are passing.&lt;/p&gt;

&lt;p&gt;Looking into it.&lt;/p&gt;

&lt;p&gt;This new patch includes following:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Scan is now backward compatible...uses a negative number for the version instead of a Boolean overload. This change doesn&apos;t support a 0.20.3 scan being sent to a 0.20.2 region&lt;/li&gt;
	&lt;li&gt;Copyright fixes&lt;/li&gt;
	&lt;li&gt;More tests for heap usage&lt;/li&gt;
	&lt;li&gt;One more IdxRegion test&lt;/li&gt;
	&lt;li&gt;JMX Bean for the IdxRegion&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12796567" author="stack" created="Tue, 5 Jan 2010 07:13:13 +0000"  >&lt;p&gt;All contrib tests including all of these new ones are also passing and the above core test failure seems like a transient failure:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Testsuite: org.apache.hadoop.hbase.regionserver.TestGetDeleteTracker
Tests run: 7, Failures: 0, Errors: 0, Time elapsed: 0.056 sec
------------- Standard Output ---------------
Qf col, timestamp, 1262675527734260000, type Delete
Qf col, timestamp, 1262675527734259000, type DeleteColumn
Qf col2, timestamp, 1262675527734259000, type Delete
------------- ---------------- ---------------

Testcase: testUpdate_CompareDeletes took 0.003 sec
Testcase: testUpdate took 0.002 sec
Testcase: testIsDeleted_NotDeleted took 0 sec
Testcase: testIsDeleted_Delete took 0 sec
Testcase: testIsDeleted_DeleteColumn took 0 sec
Testcase: testIsDeleted_DeleteFamily took 0 sec
Testcase: testStackOverflow took 0.037 sec
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12796568" author="stack" created="Tue, 5 Jan 2010 07:14:14 +0000"  >&lt;p&gt;i want to run a few tests with this patch in place up on cluster to be sure its refactoring of such as the changing registry of store files under load hasn&apos;t broke anything.&lt;/p&gt;</comment>
                            <comment id="12796569" author="stack" created="Tue, 5 Jan 2010 07:19:26 +0000"  >&lt;p&gt;Here is an html file that needs to be converted into overview doc. for this new contribution.&lt;/p&gt;</comment>
                            <comment id="12796781" author="stack" created="Tue, 5 Jan 2010 17:37:33 +0000"  >&lt;p&gt;I committed this.  Will be testing the 0.20.3 RC anyways.  Can test this patch at that time.   I made hbase-2092 to make a version of this patch for TRUNK.&lt;/p&gt;</comment>
                            <comment id="12797032" author="bassam" created="Wed, 6 Jan 2010 08:42:09 +0000"  >&lt;p&gt;Not sure if this was intended or not, but commons-lang 2.4 jar must now be on the HADOOP_CLASSPATH in order to run HBase mapred jobs (like RowCounter).&lt;/p&gt;</comment>
                            <comment id="12797207" author="jdcryans" created="Wed, 6 Jan 2010 18:09:52 +0000"  >&lt;p&gt;So any client using getStartRows (creates a Pair object which uses HashCodeBuilder) will now need the new jar... this breaks compatibility.&lt;/p&gt;</comment>
                            <comment id="12797229" author="stack" created="Wed, 6 Jan 2010 18:34:54 +0000"  >&lt;p&gt;I&apos;m looking into it....  If I can&apos;t fix this, I think we should back out hbase-2037.&lt;/p&gt;</comment>
                            <comment id="12797266" author="stack" created="Wed, 6 Jan 2010 19:35:39 +0000"  >&lt;p&gt;I made hbase-2094 as blocker on 0.20.3. &lt;/p&gt;</comment>
                            <comment id="12797454" author="stack" created="Thu, 7 Jan 2010 02:18:50 +0000"  >&lt;p&gt;Committed to branch.  Opened another issue to apply to TRUNK.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12443023">HBASE-2038</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12427625" name="idx-hbase2.patch" size="2582027" author="stack" created="Thu, 10 Dec 2009 19:35:33 +0000"/>
                            <attachment id="12429425" name="idx-hbase3.patch" size="2654200" author="stack" created="Tue, 5 Jan 2010 07:06:29 +0000"/>
                            <attachment id="12429426" name="index.html" size="21543" author="stack" created="Tue, 5 Jan 2010 07:19:26 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 10 Dec 2009 19:49:19 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32379</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 years, 50 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i08t7b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>49331</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>