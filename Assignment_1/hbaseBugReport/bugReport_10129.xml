<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:10:44 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10129/HBASE-10129.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10129] support real time rpc invoke latency percentile statistics for methods of HRegionInterface </title>
                <link>https://issues.apache.org/jira/browse/HBASE-10129</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;It is important for applications to get latency statistics when invoking hbase apis. Currently, the average latency of methods in HRegionInterface will be computed in HBaseRpcMetrics. However, user might expect more detail latency statistics, such as 75% percentile latency, 95% percentile latency, etc. Therefore, will it be useful if we computing latency percentiles for rpc invoking of region server methods? &lt;/p&gt;</description>
                <environment></environment>
        <key id="12684026">HBASE-10129</key>
            <summary>support real time rpc invoke latency percentile statistics for methods of HRegionInterface </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="cuijianwei">Jianwei Cui</reporter>
                        <labels>
                    </labels>
                <created>Wed, 11 Dec 2013 13:02:32 +0000</created>
                <updated>Thu, 19 Dec 2013 03:57:52 +0000</updated>
                                            <version>0.94.14</version>
                                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13845377" author="cuijianwei" created="Wed, 11 Dec 2013 13:09:09 +0000"  >&lt;p&gt;This patch will computing real time rpc invoke latency percentiles for methods of HRegionInterface, including:&lt;br/&gt;
1. Based on MetricsHistogram, implement MetricsTimeVaryingHistogram which will compute real time percentiles for metric;&lt;br/&gt;
2. Add 999th percentile statistics for MetricsHistogram;&lt;br/&gt;
3. Extend HBaseRpcMetrics to compute rpc invoke real time latency percentiles based on MetricsTimeVaryingHistogram.&lt;/p&gt;</comment>
                            <comment id="13845487" author="ndimiduk" created="Wed, 11 Dec 2013 15:49:32 +0000"  >&lt;p&gt;Nice feature. Any chance of a patch for trunk?&lt;/p&gt;

&lt;p&gt;Skimmed the patch:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;   public void doUpdates(final MetricsContext context) {
+    for (Entry&amp;lt;String, MetricsTimeVaryingHistogram&amp;gt; entry : methodHistograms.entrySet()) {
+      MetricsTimeVaryingHistogram.registerTimeVaryingHistogramMetric(entry.getKey(),
+        entry.getValue(), this.registry);
+      entry.getValue().pushMetric(metricsRecord);
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can registration be handled once on initialization rather than with every call do doUpdates?&lt;/p&gt;</comment>
                            <comment id="13845570" author="eclark" created="Wed, 11 Dec 2013 17:42:56 +0000"  >&lt;p&gt;Most of this is already done in trunk (The most important HRegion have metrics).  I would be wary of this.  The old 0.94 metrics system is pretty prone to slow downs when adding metrics, and it looks like these will be hit a lot.  How much does this change the performance of HBase ?&lt;/p&gt;</comment>
                            <comment id="13846123" author="cuijianwei" created="Thu, 12 Dec 2013 07:41:11 +0000"  >&lt;p&gt;Thanks for your comment &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt;. I go through the metric implementation of trunk, the latency percentile of many methods in HRegionInterface has been computed. Therefore, this patch might aim to help 0.94 to contain this feature? The implementation of &apos;MetricsTimeVaryingHistogram.registerTimeVaryingHistogramMetric()&apos; will register a metrics for the first time and do updating after register. I think it might be more clear if we rename &apos;registerTimeVaryingHistogramMetric()&apos; to &apos;registerOrUpdateTimeVaryingHistogramMetric()&apos;.&lt;/p&gt;</comment>
                            <comment id="13846132" author="cuijianwei" created="Thu, 12 Dec 2013 07:52:56 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt;, I agree this feature should not affect hbase performance. I think we might add a configuration option such as &apos;regionserver.rpc.latency.percentile.enable&apos; to enable or disable this feature. Then, users can decide whether enable this feature according to their needs. We need to do some comparisons to efficiency change after enable this feature. Is there any benchmark when doing efficiency comparisons?&lt;/p&gt;</comment>
                            <comment id="13846476" author="ndimiduk" created="Thu, 12 Dec 2013 17:27:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;Is there any benchmark when doing efficiency comparisons?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Have a look at &lt;tt&gt;org.apache.hadoop.hbase.PerformanceEvaluation&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="13847067" author="cuijianwei" created="Fri, 13 Dec 2013 02:21:42 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ndimiduk&quot; class=&quot;user-hover&quot; rel=&quot;ndimiduk&quot;&gt;Nick Dimiduk&lt;/a&gt;, thanks, I will try the it.&lt;/p&gt;</comment>
                            <comment id="13852581" author="cuijianwei" created="Thu, 19 Dec 2013 03:57:52 +0000"  >&lt;p&gt;To evaluate the performance change, I use the test tool YCSB to put/get 10,000,000 records to a cluster containing 5 region servers, then I compare the average latency respectively. &lt;br/&gt;
For cluster without the patch, I get the put/get latency:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;PUT&amp;#93;&lt;/span&gt;, AverageLatency(us), 953.5947375&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;GET&amp;#93;&lt;/span&gt;, AverageLatency(us), 279.0727035&lt;br/&gt;
For cluster with the patch, I get the put/get latency:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;PUT&amp;#93;&lt;/span&gt;, AverageLatency(us), 954.3327765&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;GET&amp;#93;&lt;/span&gt;, AverageLatency(us), 248.4747838&lt;br/&gt;
It seems the performance change when applying the patch is not significant.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12618229" name="HBASE-10129-0.94-v1.patch" size="15874" author="cuijianwei" created="Wed, 11 Dec 2013 13:09:09 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 11 Dec 2013 15:49:32 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>363098</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ql7z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>363404</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>