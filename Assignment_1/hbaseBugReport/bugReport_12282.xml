<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:31:29 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-12282/HBASE-12282.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-12282] Ensure Cells and its implementations work with Buffers also</title>
                <link>https://issues.apache.org/jira/browse/HBASE-12282</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;This issue can be used to brainstorm and then do the necessary changes for the offheap work.  All impl of cells deal with byte[] but when we change the Hfileblocks/Readers to work purely with Buffers then the byte[] usage would mean that always the data is copied to the onheap.  Cell may need some interface change to implement this.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12748817">HBASE-12282</key>
            <summary>Ensure Cells and its implementations work with Buffers also</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12724166">HBASE-11425</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="6">Invalid</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ram_krish">ramkrishna.s.vasudevan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 17 Oct 2014 07:14:24 +0000</created>
                <updated>Tue, 23 Jun 2015 17:32:23 +0000</updated>
                            <resolved>Tue, 23 Jun 2015 17:32:23 +0000</resolved>
                                    <version>0.99.1</version>
                                                    <component>regionserver</component>
                    <component>Scanners</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="14174881" author="ram_krish" created="Fri, 17 Oct 2014 09:21:31 +0000"  >&lt;p&gt;Will come up with a patch as POC and from there we could continue the discussion.&lt;/p&gt;</comment>
                            <comment id="14178582" author="ram_krish" created="Tue, 21 Oct 2014 16:19:23 +0000"  >&lt;p&gt;This patch is like a POC and has some of the subtasks implemented at a high level. Includes Cell level interface changes, API needed for the trackers and how the CellComparator handles BBs and bytes[].&lt;br/&gt;
But this would not be the exact way how things will work but will give us an idea how things will shape up once all the subtasks are done.  The patch just deals with HFileReader and the StoreScanner.  Just ensures that all test cases in TestStore passes except one which needs a change in the bloom filter.&lt;br/&gt;
Discussing with Anoop on this and just noting down things as and when wanted to make changes were&lt;br/&gt;
-&amp;gt; We lose the optimization done by Vladimir - &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12090&quot; title=&quot;Bytes: more Unsafe, more Faster &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12090&quot;&gt;&lt;del&gt;HBASE-12090&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
-&amp;gt; BBs may have more index and position management internally.  BR may come handy here.&lt;br/&gt;
-&amp;gt; If we want to deal with BBs one issue in case of DBB is that max size of integer is the max size of a DBB that can be allocated.  How can that be addressed. Can our HFileBlock be bigger than that?&lt;br/&gt;
-&amp;gt; We may need to do some copy from the BB to a byte[] when we create some fake keys or keys like first on row, last on row etc.&lt;br/&gt;
-&amp;gt; We have to ensure that from the HFileREader onwards arrayOffset() should not be called if the BB is offheap.  (Not done)&lt;br/&gt;
-&amp;gt; Memstore and memstore impl should support BB. Already subtask raised for it.  Anoop&apos;s work would be of help here. Can disucss with him.&lt;br/&gt;
-&amp;gt; Write path also needs to handle these BBs in cases of Bloom filters. &lt;/p&gt;

&lt;p&gt;Some of the steps followed in the patch could be hacky but if we could find ways to address them then we can move towards the goal of BB in read path slowly.  Based on the feed back will work on the sub jira raised- from next week as am on vacation for the rest of the week.&lt;/p&gt;</comment>
                            <comment id="14178619" author="stack" created="Tue, 21 Oct 2014 16:48:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;BBs may have more index and position management internally. BR may come handy here.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What you thinking here?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can our HFileBlock be bigger than that?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;2G is max? int?  Else we need to do aggregate of BBs.&lt;/p&gt;

&lt;p&gt;Thanks for posting patch.  Looking at the Cell changes, my immediate thought is that a BB-backed Cell is just a particular implementation of Cell but I think what we are finding is that we are bumping into limitations of a byte-array only based Cell; it won&apos;t work if the Cell references DBBs?  Is that what you fellas are seeing?  And what about BR?  Where does it fall down?  What are limitations of BR over a BB.&lt;/p&gt;

&lt;p&gt;Can we write up a doc?  It is hard to keep account of all the issues around off-heaping at this stage.  Doc could be an offheap read-path and/or an off-heap write-path?&lt;/p&gt;

&lt;p&gt;Good work lads.&lt;/p&gt;
</comment>
                            <comment id="14180217" author="anoop.hbase" created="Wed, 22 Oct 2014 17:34:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;BBs may have more index and position management internally. BR may come handy here.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What we really need is to have a new impl of BB so that we can avoid overhead in read APIs. Also the changes can make sure that the inlining will be possible.  So change to BR alone won&apos;t really help us. And it will add extra overhead of BR to BB. Andy had done some testing for the inlining and we are not getting inlining for some of the APIs.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we want to deal with BBs one issue in case of DBB is that max size of integer is the max size of a DBB that can be allocated. How can that be addressed. Can our HFileBlock be bigger than that?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You mean the ByteBuffer#allocateDirect(int capacity) and int limitation? Any way that is there with byte[] also no? I think int max size is fair enough&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Some of the steps followed in the patch could be hacky but if we could find ways to address them then we can move towards the goal of BB &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes looks hacky. We can think to better it.&lt;/p&gt;

&lt;p&gt;We discussed abt having APIs in Cell to do the compares (like row compare) but the issue is within one Cell impl it knows abt itself but not about the incoming. If we continue to do this compares based on getxxxArray() APIs, we will end up in many times byte[] creation and data copy from buffer to this array. This is applicable in the Heap compares in Scanner as well as some of the Filters (like SCVF)&lt;/p&gt;</comment>
                            <comment id="14184111" author="anoop.hbase" created="Sat, 25 Oct 2014 14:22:05 +0000"  >&lt;p&gt;Instead of adding new buffer based APIs to Cell, we can have a new Interface extension to Cell and let server side Cells in read path implement this new interface. Add getxxxBuffer() APIs in new interface&lt;/p&gt;

&lt;p&gt;We should avoid adding new fields to KeyValue which increases the heap usage.&lt;/p&gt;

&lt;p&gt;getxxxBuffer() API returning the ref to actual buffer can be problematic. We might need to pass this to CP hooks even. Any op causing change in the position in buffer can be an issue. This buffer will be the same buffer HFileBlock backs. Every time we duplicate/slice the actual buffer can cause too many objects creation. So we can do one thing&lt;br/&gt;
Cell impl refers to a wrapper BB object which wraps the actual buffer. The wrapper should allow absolute positioned read only APIs only and other APIs should be Illegal ops.&lt;/p&gt;

&lt;p&gt;Based on the type of the Cell the CellComparator can use the buffer based APIs or array based APIs. &lt;/p&gt;</comment>
                            <comment id="14184865" author="ram_krish" created="Mon, 27 Oct 2014 05:50:54 +0000"  >&lt;p&gt;+1 for new Cell interface that extends current Cell but adds BB APIs to it. Every where in the comparator we will have a condition based check.  One thing to note is that for the compartors one cell can be the BB based cell and the other one can be byte[] array back.&lt;br/&gt;
Changes to KV is hacky but that is basically to make things work and ensure that we have a KV backed by buffer and byte[]. Atleast  the fake keys that we create could directlly be buffer based and so those comparisons can be buffer based only.&lt;/p&gt;</comment>
                            <comment id="14184869" author="anoop.hbase" created="Mon, 27 Oct 2014 05:59:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;KV backed by buffer and byte[]. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;IMO no need to have single Cell impl having both data structures. It is the responsibility of the comparators etc to get correctly the data.&lt;/p&gt;</comment>
                            <comment id="14184872" author="ram_krish" created="Mon, 27 Oct 2014 06:06:06 +0000"  >&lt;p&gt;Yes. It is just a hacky way as I said.  We have to ensure in the read path when we create a KV (Cell ) that has to be buffer backed only.&lt;/p&gt;</comment>
                            <comment id="14184875" author="anoop.hbase" created="Mon, 27 Oct 2014 06:12:19 +0000"  >&lt;p&gt;Yep.&lt;br/&gt;
When we have seeks we pass the SeekKey backed into a KeyOnlyKV now. May be that also we can pass in as BB backed Cell.  So in the Compare path we have BB Backed Cells alone. But the comparator need to make sure it can work with buffer backed also &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;   There is a bit challenge to make it perfect design.&lt;/p&gt;</comment>
                            <comment id="14188062" author="stack" created="Wed, 29 Oct 2014 06:25:21 +0000"  >&lt;p&gt;I took a look at this already up at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12282?focusedCommentId=14178619&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14178619&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-12282?focusedCommentId=14178619&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14178619&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here is some more comment:&lt;/p&gt;

&lt;p&gt;Looking again at Cell changes, rather than change Cell, could we do something like hasArray from BB in Cell and if it does not have array (because it DBB), then we do stuff like Anoop is doing to do compares of DBBs where unsafe or by offset into the DBB rather than array references?&lt;/p&gt;

&lt;p&gt;CellComparator is still byte [] based in this patch?  Still gets the arrays from Cell.&lt;/p&gt;

&lt;p&gt;Why would we do this:&lt;/p&gt;

&lt;p&gt;+      ByteBuffer wrapBuf = ByteBuffer.wrap(buf);&lt;br/&gt;
+      return ByteBufferUtils.equals(left.getValueBuffer(), left.getValueOffset(),&lt;br/&gt;
+          left.getValueLength(), wrapBuf, 0, wrapBuf.capacity());&lt;/p&gt;

&lt;p&gt;Why not pass in two BBs into BBU and let it figure it out?&lt;/p&gt;
</comment>
                            <comment id="14188074" author="ram_krish" created="Wed, 29 Oct 2014 06:38:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;then we do stuff like Anoop is doing to do compares of DBBs where unsafe or by offset into the DBB rather than array references?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These changes are all based on the BB that we currently have in refernce.  On the BB try to use unsafe or go without unsafe.  The util methods will check for hasArray or not.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;CellComparator is still byte [] based in this patch? Still gets the arrays from Cell.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The comparators are changed for few cases to make some specific cases to work.  Just to show how we need the changes and where we need the changes.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;ByteBuffer wrapBuf = ByteBuffer.wrap(buf);&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;They are all just hacks to get buff on a KV so that the comparators can be changed and made to work with buffers.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;rather than change Cell, could we do something like hasArray from BB in Cell and if it does not have array (because it DBB)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;How can we do this now? Already the cell API is accepting a byte[] and returning as byte[].  So currently all Cell are hasArray as true only right?  Unless Cell returns a BB or something other than byte[] we cannot use hasArray inside a Cell. &lt;/p&gt;</comment>
                            <comment id="14188157" author="anoop.hbase" created="Wed, 29 Oct 2014 09:13:44 +0000"  >&lt;p&gt;I think Stack suggestion is to&lt;br/&gt;
add hasArray() in Cell&lt;br/&gt;
We have new BBBackedCell which extending Cell. &lt;br/&gt;
In impl of BB backed let hasArray() return false.&lt;br/&gt;
In comparators, based on hasArray() use getxxxArray() or getxxxBuffer()&lt;br/&gt;
Correct Stack?&lt;/p&gt;</comment>
                            <comment id="14188180" author="ram_krish" created="Wed, 29 Oct 2014 09:38:49 +0000"  >&lt;blockquote&gt;&lt;p&gt;In comparators, based on hasArray() use getxxxArray() or getxxxBuffer()&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes true. This I agree.&lt;br/&gt;
So how should the cell be created?  So based on the buffer from the HFileBlock we wil decide if it is a direct BB or on heap BB and create KV based on that ? That KV is either a normal KV that we use now (create cell based on buffer.array) or it would be a new KV which will have buffer in it?&lt;/p&gt;</comment>
                            <comment id="14188181" author="ram_krish" created="Wed, 29 Oct 2014 09:43:06 +0000"  >&lt;p&gt;Another thing is if that is the case then all the new APIs that we add in ByteBufferUtils could just handle only the DBB cases (including the Unsafe cases for DBB). Not the cases of normal BB because in this case we could still work with byte[] inside the BB.&lt;/p&gt;</comment>
                            <comment id="14188184" author="anoop.hbase" created="Wed, 29 Oct 2014 09:48:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;So how should the cell be created?  So based on the buffer from the HFileBlock we wil decide if it is a direct BB or on heap BB and create KV based on that ? That KV is either a normal KV that we use now (create cell based on buffer.array) or it would be a new KV which will have buffer in it?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;IMHO just not worry abt DBB/HBB here. Always create a new KV type which implements new BBBackedBuffer.  We have optimization in Comparators etc to check based on hasArry() and do.&lt;/p&gt;</comment>
                            <comment id="14188186" author="anoop.hbase" created="Wed, 29 Oct 2014 09:50:06 +0000"  >&lt;p&gt;Even the KeyOnlyKeyValue also. Let it be a BB backed one. It will be better we have this BufferBackedCell only in read path.  The Compartors no need to worry one type is buffer backed and other array backed. Let both be Buffer backed.&lt;br/&gt;
Even we can have new Comparators to avoid  checks in all method.&lt;/p&gt;</comment>
                            <comment id="14188193" author="ram_krish" created="Wed, 29 Oct 2014 09:55:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;Let it be a BB backed one.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes.  That is why in the attached patch for ease of use created buffer for even the fake keys that we create that includes KeyOnlyKV. In the read path both should be BB based only.&lt;/p&gt;</comment>
                            <comment id="14188279" author="ram_krish" created="Wed, 29 Oct 2014 11:51:41 +0000"  >&lt;p&gt;Forgot to add one more point here. When we want to compare a KV in Memstore and a fake key backed by BB or with a key from a store file (that is backed by BB), we need to compare using both types of KV. I had raised a subtask for changing the memstore to BB.&lt;br/&gt;
Otherwise we have to have both types of comparison as done in the patch attached here.&lt;/p&gt;</comment>
                            <comment id="14188288" author="ram_krish" created="Wed, 29 Oct 2014 12:02:36 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (left.getQualifierArray() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; right.getQualifierArray() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; Bytes.compareTo(left.getQualifierArray(), left.getQualifierOffset(),
+          left.getQualifierLength(), right.getQualifierArray(), right.getQualifierOffset(),
+          right.getQualifierLength());
+    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (((left.getQualifierArray() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; left.getQualifierBuffer() == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) &amp;amp;&amp;amp; right
+        .getQualifierBuffer() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ByteBufferUtils.compareTo(left.getQualifierArray(), left.getQualifierOffset(),
+          left.getQualifierLength(), right.getQualifierBuffer(), right.getQualifierOffset(),
+          right.getQualifierLength());
+    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (left.getQualifierBuffer() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
+        &amp;amp;&amp;amp; (right.getQualifierBuffer() == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; right.getQualifierArray() != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)) {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ByteBufferUtils.compareTo(left.getQualifierBuffer(), left.getQualifierOffset(),
+          left.getQualifierLength(), right.getQualifierArray(), right.getQualifierOffset(),
+          right.getQualifierLength());
+    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; ByteBufferUtils.compareTo(left.getQualifierBuffer(), left.getQualifierOffset(),
+          left.getQualifierLength(), right.getQualifierBuffer(), right.getQualifierOffset(),
+          right.getQualifierLength());
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So as done here we may have to use hasArray on both the left Cell and rightCell and do the comparison.&lt;/p&gt;</comment>
                            <comment id="14188501" author="anoop.hbase" created="Wed, 29 Oct 2014 16:07:26 +0000"  >&lt;p&gt;+1 for hasArray()&lt;br/&gt;
The impl of BB backed Cell will throw UnsupportedOpException when calling getxxxArray() right?&lt;/p&gt;</comment>
                            <comment id="14189447" author="stack" created="Thu, 30 Oct 2014 01:33:06 +0000"  >&lt;p&gt;Removing fix versions.  The parent issue has none and this seems like non-critical improvement &amp;#8211; shouldn&apos;t be in the way of 1.0.  Put it back if I have it wrong or if its done before 1.0 release.  Good stuff.&lt;/p&gt;</comment>
                            <comment id="14189633" author="ram_krish" created="Thu, 30 Oct 2014 04:34:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;The impl of BB backed Cell will throw UnsupportedOpException when calling getxxxArray() right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Now this would mean that all the KeyValueScanner would be only Cells. And every where we need to use getXXXBuffer() we will be using hasArray and based on that use the relevant API.  &lt;br/&gt;
If we change to BufferedBackedCell in the read path every where then the cases of memstore will be problematic.  Hence we will go with the approach where all the comparators would decide on how the array or buffer should be used.  &lt;/p&gt;</comment>
                            <comment id="14598011" author="anoop.hbase" created="Tue, 23 Jun 2015 17:32:23 +0000"  >&lt;p&gt;Closing the issue as we are not going in this direction as in the patch. We wont add new BB based APIs to Cell as such.  Any way &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13387&quot; title=&quot;Add ByteBufferedCell an extension to Cell&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13387&quot;&gt;&lt;del&gt;HBASE-13387&lt;/del&gt;&lt;/a&gt; handle these.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12676114" name="HBASE-12224_2.patch" size="111454" author="ram_krish" created="Tue, 21 Oct 2014 16:19:23 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 21 Oct 2014 16:48:58 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 25 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i21a87:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>