<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:43:58 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7247/HBASE-7247.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7247] Assignment performances decreased by 50% because of regionserver.OpenRegionHandler#tickleOpening</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7247</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The regionserver.OpenRegionHandler#tickleOpening updates the region znode as &quot;Do this so master doesn&apos;t timeout this region-in-transition.&quot;.&lt;br/&gt;
However, on the usual test, this makes the assignment time of 1500 regions goes from 70s to 100s, that is, we&apos;re 50% slower because of this.&lt;br/&gt;
More generally, ZooKeper commits to disk all the data update, and this takes time. Using it to provide a keep alive seems overkill. At the very list, it could be made asynchronous.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure how necessary these updates are required (I need to go deeper in the internal, feedback welcome), but it seems very important to optimize this... The trival fix would be to make this optional.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12618352">HBASE-7247</key>
            <summary>Assignment performances decreased by 50% because of regionserver.OpenRegionHandler#tickleOpening</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="nkeywal">Nicolas Liochon</assignee>
                                    <reporter username="nkeywal">Nicolas Liochon</reporter>
                        <labels>
                    </labels>
                <created>Fri, 30 Nov 2012 17:50:36 +0000</created>
                <updated>Mon, 23 Sep 2013 19:08:33 +0000</updated>
                            <resolved>Tue, 9 Apr 2013 07:13:09 +0000</resolved>
                                    <version>0.95.2</version>
                                    <fixVersion>0.98.0</fixVersion>
                    <fixVersion>0.95.1</fixVersion>
                                    <component>master</component>
                    <component>Region Assignment</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="13507536" author="stack" created="Fri, 30 Nov 2012 18:44:33 +0000"  >&lt;p&gt;Moving znode from OPENING to OPENING or CLOSING to CLOSING ensuring the sequence numbers are as we expect is how we check we still have &apos;ownership&apos; of the region before we go about making alterations in the filesystem.  The callback the master gets when we &apos;update&apos; the znode is used to flag the master that the region server is still &apos;alive&apos; and working on the opening so the master updates its opening timer when it gets the callback.&lt;/p&gt;

&lt;p&gt;It is imperfect in that we could lose the lease between the check and the fs operation.&lt;/p&gt;

&lt;p&gt;Alternatives would be to remove this mechanism and instead just rely on our getting a callback if the znode is taken from us?  This would happen in another thread.  Would have to be watching.  This would seem to coarser than what we currently have widening the window during which we could do fs operations on a region though we&apos;ve lost ownership.  Master would not get notification that a region server is opening a region only its taking longer than usual.&lt;/p&gt;

&lt;p&gt;Any other suggestions?&lt;/p&gt;</comment>
                            <comment id="13507570" author="nkeywal" created="Fri, 30 Nov 2012 19:16:11 +0000"  >&lt;p&gt;For the regionserver side, the callback won&apos;t be very difficult to do I think: the callback would write a variable that would be tested by tickleOpening, and we&apos;re done. And as the test cost is cheap, we can test more often.&lt;/p&gt;

&lt;p&gt;For master, hum... there are different options. May be the master could ask to the region server if it&apos;s ok? This would be done if there&apos;s no feedback after a while and if the regionserver is still alive from a zookeeper point if view? This would allow to test multiple regions simultaneously (all the regions of this regionserver).&lt;/p&gt;</comment>
                            <comment id="13507598" author="stack" created="Fri, 30 Nov 2012 19:42:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;...the callback would write a variable that would be tested by tickleOpening, and we&apos;re done. And as the test cost is cheap, we can test more often.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You mean you&apos;d keep writing the znode, just async?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;May be the master could ask to the region server if it&apos;s ok? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So master would ping after every region that is opening?  Would this be better/less costly than what we have now?&lt;/p&gt;

&lt;p&gt;In past, before we moved assign to all-zk, on the region server heartbeat to the master, the RS would include the list of OPENING regions.&lt;/p&gt;</comment>
                            <comment id="13507607" author="jxiang" created="Fri, 30 Nov 2012 19:50:31 +0000"  >&lt;p&gt;If one region server is opening a lot of regions, we just need one handler to tickle the opening.  Master just needs to know the region server is still running so that it doesn&apos;t time out the assignment.&lt;/p&gt;

&lt;p&gt;To me, this is an overkill. We can combine this logic and something else, for example, to detect if a regionserver is dead.&lt;/p&gt;

&lt;p&gt;We used to have the &apos;owernership&apos; issue as Stack mentioned.  Now, I think we are fine since AM should have a consistent view of region states.&lt;/p&gt;</comment>
                            <comment id="13507621" author="stack" created="Fri, 30 Nov 2012 20:10:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;If one region server is opening a lot of regions, we just need one handler to tickle the opening. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This would be a significant change for I&apos;m-not-sure-what-benefit.  The zk transactions are region level/scoped and their handling is done at this level in open/close exec handlers.  Making it so RS does tracking and updating state for master to read regards CLOSING/OPENING would alter a bunch of code.&lt;/p&gt;

&lt;p&gt;I&apos;m all for a reexamination of base operations.  Stuff is this way because we would have issues where an open would stall for whatever reason... Master would intercept the open, take over the region and give it to someone else to open.  More often than not, we&apos;d just fail again for same reason on the new location but the odd time the new re-attempt would succeed.&lt;/p&gt;

&lt;p&gt;We could give up reattempt and just let everything hinge on whether a region server has a zk lease or not and let ServerShutdownHandler do it all.  It&apos;d be a pretty radical difference.  Simplify code but also, in an odd case, it might mean we&apos;d fail recover a region (I don&apos;t have stats on this).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We used to have the &apos;owernership&apos; issue as Stack mentioned. Now, I think we are fine since AM should have a consistent view of region states.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is a similar type of leap-in-the-dark (smile).  I love the notion that AM is now rock solid.  It may be given the work expended (it certainly is a million times better) but I&apos;d like us to run w/ the new AM a while in a few productions before making this ruling.&lt;/p&gt;

&lt;p&gt;Again, if we could undo the OPENING/CLOSING, etc., stuff would be cleaner/simpler (logs would be way less noisy)&lt;/p&gt;
</comment>
                            <comment id="13508916" author="nkeywal" created="Mon, 3 Dec 2012 18:20:49 +0000"  >&lt;p&gt;An possible solution could be:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;use a watcher to see if someone else is updating the znode&lt;/li&gt;
	&lt;li&gt;use an asynchronous write to update the znode when we want to say to the master we&apos;re still there.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;It mostly as of today, except that we suppressed the synchronous write on the regionserver path.&lt;br/&gt;
Pros: should be a small enough change.&lt;br/&gt;
Cons: we&apos;re still loading ZK (and the master as a side effect).&lt;/p&gt;

&lt;p&gt;What do you think?&lt;/p&gt;</comment>
                            <comment id="13508939" author="stack" created="Mon, 3 Dec 2012 18:55:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;use a watcher to see if someone else is updating the znode&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do we not have this currently?  If someone else changes the znode, we don&apos;t notice?  We only notice when we go to update the znode?&lt;/p&gt;

&lt;p&gt;Should we list how many znode updates happen for a region open?&lt;/p&gt;

&lt;p&gt;Async&apos;ing the OPENINGs so master gets a tickle that the OPEN is progressing sounds fine... We don&apos;t actually move any files around on OPEN so its not a &apos;problem&apos; if not the owner, really... Its only later after compaction, etc., that the damage is done... that is what we should prevent happening for sure.&lt;/p&gt;</comment>
                            <comment id="13509789" author="nkeywal" created="Tue, 4 Dec 2012 15:14:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do we not have this currently? If someone else changes the znode, we don&apos;t notice? We only notice when we go to update the znode?&lt;/p&gt;&lt;/blockquote&gt;


&lt;p&gt;I haven&apos;t found where where we do it. The result of tickleOpening is actually often ignored as well, or at least ignored for a long time. &lt;br/&gt;
for example, in OpenRegionHandler#updateMeta(final HRegion r), we have &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
tickleOpening = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;(
&lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (/* condition, but not on tickleOpening */){
  &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; something
&lt;/span&gt;  tickleOpening = tickleOpening();
}

&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; something &amp;amp;&amp;amp; tickleOpening;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In theory, we should break the loop when tickleOpening becomes false.&lt;/p&gt;


&lt;p&gt;While the way it&apos;s written, it seems that we can have a failure once, then a success.&lt;br/&gt;
Basically, it seems that tickleOpening is not always used as a check.&lt;/p&gt;</comment>
                            <comment id="13509811" author="ram_krish" created="Tue, 4 Dec 2012 15:53:32 +0000"  >&lt;p&gt;Yes N.. You are right ...&lt;/p&gt;</comment>
                            <comment id="13509968" author="nkeywal" created="Tue, 4 Dec 2012 19:55:13 +0000"  >&lt;p&gt;I&apos;m a little bit scared with the watchers: I would not like to have race conditions (if the region is opened twice for example). I&apos;m trying something with only the async part... &lt;/p&gt;</comment>
                            <comment id="13510135" author="stack" created="Tue, 4 Dec 2012 23:55:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;In theory, we should break the loop when tickleOpening becomes false.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes.  That is a bug.&lt;/p&gt;</comment>
                            <comment id="13510363" author="nkeywal" created="Wed, 5 Dec 2012 08:50:46 +0000"  >&lt;p&gt;I will fix it with the other stuff so. Currently my patch does not work locally, but I&apos;m making progress.&lt;/p&gt;</comment>
                            <comment id="13510389" author="nkeywal" created="Wed, 5 Dec 2012 10:04:00 +0000"  >&lt;p&gt;The issue comes from mixing asynchronous writes with synchronous writes &amp;amp; reads. My patch is now working but adds some complexity because of the added resynchronisation. I&apos;m gonna do simpler. The ideal solution would be to be full async for the region opening (and I&apos;m not gonna do that here &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; )&lt;/p&gt;</comment>
                            <comment id="13510452" author="nkeywal" created="Wed, 5 Dec 2012 12:51:21 +0000"  >&lt;p&gt;The patch is getting thinner and thinner...&lt;br/&gt;
Now I just check that the znode was not updated recently before writing it again. On the test, it brings half of was I have it I remove totally tickleOpening.&lt;/p&gt;

&lt;p&gt;There is something there as well, in  OpenRegionHandler#process()&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; failed = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (tickleOpening(&lt;span class=&quot;code-quote&quot;&gt;&quot;post_region_open&quot;&lt;/span&gt;)) {
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (updateMeta(region)) {
          failed = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
        }
      }
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (failed || &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.server.isStopped() ||
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This &apos;tickleOpening&apos; is called whatever the time spent previously, before updating meta. If we remove it completely, we save a sync.&lt;/p&gt;</comment>
                            <comment id="13510622" author="stack" created="Wed, 5 Dec 2012 17:40:05 +0000"  >&lt;p&gt;Your approach sounds good nkeywal.  No harm writing less but adding the read in case we indeed have lost ownership.  It might mean it takes a bit longer to realize we&apos;ve lost ownership but that should be fine.&lt;/p&gt;

&lt;p&gt;On the &apos;post_region_open&apos;, IIRC, a bunch of these tickleOpenings were added because we saw issues... in this case, an update of .META. that went in though we&apos;d lost ownership of the region.&lt;/p&gt;

&lt;p&gt;Stepping back (after looking at code), could we drop the notion that a master can intercede and assign a region elsewhere because it is proceeding too slow on a particular region in the name of simplifying the region open handling interaction?  There would be less noise in the logs and less states to deal with.&lt;/p&gt;

&lt;p&gt;If we did this, I&apos;d think that we&apos;d want the regionserver to do the initial move of the znode from OPENING to OPENING to establish ownership (elsewhere I have petitioned that the regionserver should set the OPENING state, and not the master &amp;#8211; master should set the state to PENDING_OPEN in the znode rather than just in master memory &amp;#8211; as a means of cleanly denoting the regionservers&apos; assumption of region ownership).  Then the next transition would be from OPENING to OPEN or to FAILED_OPEN.  And that would be it.  Master would just presume that the only reason to intercede is when the regionserver loses its lease in zk.  We&apos;d drop tickling OPENING so master knows we are progressing on a region open &amp;#8211; it would just presume regionserver is making progress and that it will kill itself if it can&apos;t get to HDFS, etc.  We&apos;d also be dropping regionserver-side checks that it still owns a region just before it goes to update meta (Could change the meta operation to be a check and put so we didn&apos;t have to go to zk just before meta edit &amp;#8211; the bit of code you quote above nkeywal?).&lt;/p&gt;

&lt;p&gt;Just putting it out there.&lt;/p&gt;

&lt;p&gt;On patch:&lt;/p&gt;


&lt;p&gt;Do we fail the open if the following break happens?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
         tickleOpening = tickleOpening(&lt;span class=&quot;code-quote&quot;&gt;&quot;post_open_deploy&quot;&lt;/span&gt;);
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!tickleOpening) {
+          &lt;span class=&quot;code-keyword&quot;&gt;break&lt;/span&gt;;
+        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have to call the +    zkw.sync(node); ?  We always did that?  We are doing the sync just to read the old znode value?  Do we have to?  Could we operate w/ stale read?&lt;/p&gt;

&lt;p&gt;Are you removing this:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HRegion region = this.rsServices.getFromOnlineRegions(encodedName);&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If so, why or have you moved the check later?&lt;/p&gt;</comment>
                            <comment id="13510697" author="nkeywal" created="Wed, 5 Dec 2012 19:17:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;On the &apos;post_region_open&apos;, IIRC, a bunch of these tickleOpenings were added because we saw issues... in this case, an update of .META. that went in though we&apos;d lost ownership of the region.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Implicitly, it means we still have a race condition here, just that the probability is quite low.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Stepping back (after looking at code), could we drop the notion that a master can intercede and assign a region elsewhere because it is proceeding too slow on a particular region in the name of simplifying the region open handling interaction? There would be less noise in the logs and less states to deal with.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It would be a huge simplification imho. It&apos;s worth trying, I would say. It actually makes sense to do it now, because once the current trunk code will be production proven, touching it will be scarier.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do we fail the open if the following break happens?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, because updateMeta will return false.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We have to call the + zkw.sync(node); ? We always did that? We are doing the sync just to read the old znode value? Do we have to? Could we operate w/ stale read?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Well, we want to be sure that no one else wrote anything. It&apos;s often overkill, because we&apos;re going to write the znode immediately after, so the sync will occur anyway during the write, as we check the versions during the write. And it&apos;s expensive. So there is likely some room for improvement here as well actually.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;HRegion region = this.rsServices.getFromOnlineRegions(encodedName);&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We don&apos;t do anything here actually. We do a get, if the region is in the list, &apos;region&apos; will not be null and that&apos;s it. This variable is set later but not read in between. I can raise an error if it&apos;s in the list? Hopefully it won&apos;t break anything (famous last words)&lt;/p&gt;
</comment>
                            <comment id="13510712" author="stack" created="Wed, 5 Dec 2012 19:34:56 +0000"  >&lt;blockquote&gt;&lt;p&gt;Implicitly, it means we still have a race condition here, just that the probability is quite low.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah.  By-product of our keeping state across multiple systems (up in zk and then some state in .meta.).  We could change this to a checkAndPut.  Read .META. at start of the opening or have master pass over the .META. timestamp or something key to .META. and we&apos;d use it doing checkAndSet into .META. table... would be more strict than this updating zk.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It would be a huge simplification imho. It&apos;s worth trying, I would say. It actually makes sense to do it now, because once the current trunk code will be production proven, touching it will be scarier.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d go along.  We should discuss out on dev first.  I have short-term memory.  I&apos;m currently of the opinion that this expensive facility of master failing an open because it has been taking too long on a particular regionserver has been of no use &amp;#8211; worse, it has only caused headache &amp;#8211; but I may be just not remembering and others out on dev list will have better recall than I.&lt;/p&gt;
</comment>
                            <comment id="13511034" author="apurtell" created="Thu, 6 Dec 2012 02:39:54 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Stepping back (after looking at code), could we drop the notion that a master can intercede and assign a region elsewhere because it is proceeding too slow on a particular region in the name of simplifying the region open handling interaction? There would be less noise in the logs and less states to deal with.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It would be a huge simplification imho. It&apos;s worth trying, I would say. It actually makes sense to do it now, because once the current trunk code will be production proven, touching it will be scarier.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13527893" author="nkeywal" created="Mon, 10 Dec 2012 11:51:42 +0000"  >&lt;p&gt;From the comments on the mailing list and here:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;it makes sense&lt;/li&gt;
	&lt;li&gt;Jimmy Xiang will list the exceptional case to make sure they are covered.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I will try to have things done in two or three steps:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;remove the code from the master&lt;/li&gt;
	&lt;li&gt;remove the code from the region server&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I will use the review board for this, in a distinct jira...&lt;/p&gt;</comment>
                            <comment id="13530687" author="hadoopqa" created="Thu, 13 Dec 2012 05:17:12 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12556092/7247.v1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12556092/7247.v1.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 104 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 23 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestMultiParallel&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3508//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13550865" author="stack" created="Fri, 11 Jan 2013 06:01:32 +0000"  >&lt;p&gt;Marking major rather than critical.  This would be really sweet to have.  It might actually be harder getting it in if it doesn&apos;t make it into 0.96.  It is an improvement though so shouldn&apos;t hold up 0.96. Thats why I&apos;m making it &apos;major&apos;.&lt;/p&gt;</comment>
                            <comment id="13582381" author="nkeywal" created="Wed, 20 Feb 2013 18:03:30 +0000"  >&lt;p&gt;I&apos;m currently looking as this, now that the blocking issues for this has been fixed. Doable for 0.96 imho.&lt;/p&gt;</comment>
                            <comment id="13598749" author="nkeywal" created="Mon, 11 Mar 2013 11:50:08 +0000"  >&lt;p&gt;TimeOutManagement it now optional and deactivated by default. I will redo the measures.&lt;/p&gt;</comment>
                            <comment id="13622595" author="nkeywal" created="Thu, 4 Apr 2013 18:08:21 +0000"  >&lt;p&gt;I&apos;m doing some tests on trunk on recovery.&lt;/p&gt;

&lt;p&gt;Test is:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;1000 empty regions on one RS&lt;/li&gt;
	&lt;li&gt;on another computer, all services are running: master, ZK, second RS.&lt;/li&gt;
	&lt;li&gt;Stop (cleanly) the first RS.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Recovery (in this case assignment only) takes 2 minutes.&lt;br/&gt;
All the time seems to be spent in writing/reading to ZK.&lt;/p&gt;

&lt;p&gt;We have ~3000 calls to ZK#transitionNode, including 1000 for tickleOpening.&lt;/p&gt;

&lt;p&gt;Each transition is:&lt;br/&gt;
 sync&lt;br/&gt;
 readData&lt;br/&gt;
 setData&lt;/p&gt;


&lt;p&gt;Commenting the sync makes no difference (it could be an effect of the test env).&lt;br/&gt;
removing tickleOpening brings the result to 80 seconds (vs. 120s)&lt;br/&gt;
Checking but not writing in tickleOpening puts us around 85s. I will do a proper patch with this.&lt;/p&gt;</comment>
                            <comment id="13623505" author="nkeywal" created="Fri, 5 Apr 2013 10:22:50 +0000"  >&lt;p&gt;v2. Results are consistent: always 85s vs. 120s. I&apos;ve done a yourkit profiling against it: all the time is spent in ZK in my test scenario.&lt;/p&gt;</comment>
                            <comment id="13623536" author="hadoopqa" created="Fri, 5 Apr 2013 11:08:01 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12577192/7247.v2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12577192/7247.v2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.client.TestHTableMultiplexer&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5148//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13625224" author="nkeywal" created="Mon, 8 Apr 2013 08:09:40 +0000"  >&lt;p&gt;Waiting for a review on this one. Works locally, TestHTableMultiplexer is well known as flaky.&lt;/p&gt;</comment>
                            <comment id="13625517" author="jxiang" created="Mon, 8 Apr 2013 16:37:26 +0000"  >&lt;p&gt;v2 Looks good to me.&lt;/p&gt;</comment>
                            <comment id="13626500" author="hudson" created="Tue, 9 Apr 2013 11:37:12 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #4045 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/4045/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/4045/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7247&quot; title=&quot;Assignment performances decreased by 50% because of regionserver.OpenRegionHandler#tickleOpening&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7247&quot;&gt;&lt;del&gt;HBASE-7247&lt;/del&gt;&lt;/a&gt;  Assignment performances decreased by 50% because of regionserver.OpenRegionHandler#tickleOpening (Revision 1465914)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
nkeywal : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKAssign.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/OpenRegionHandler.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13626594" author="hudson" created="Tue, 9 Apr 2013 13:28:42 +0000"  >&lt;p&gt;Integrated in hbase-0.95-on-hadoop2 #62 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.95-on-hadoop2/62/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.95-on-hadoop2/62/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7247&quot; title=&quot;Assignment performances decreased by 50% because of regionserver.OpenRegionHandler#tickleOpening&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7247&quot;&gt;&lt;del&gt;HBASE-7247&lt;/del&gt;&lt;/a&gt;  Assignment performances decreased by 50% because of regionserver.OpenRegionHandler#tickleOpening (Revision 1465915)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
nkeywal : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKAssign.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/OpenRegionHandler.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13626736" author="hudson" created="Tue, 9 Apr 2013 15:52:34 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #489 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/489/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/489/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7247&quot; title=&quot;Assignment performances decreased by 50% because of regionserver.OpenRegionHandler#tickleOpening&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7247&quot;&gt;&lt;del&gt;HBASE-7247&lt;/del&gt;&lt;/a&gt;  Assignment performances decreased by 50% because of regionserver.OpenRegionHandler#tickleOpening (Revision 1465914)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
nkeywal : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-client/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKAssign.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/handler/OpenRegionHandler.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13626784" author="stack" created="Tue, 9 Apr 2013 16:31:59 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkeywal&quot; class=&quot;user-hover&quot; rel=&quot;nkeywal&quot;&gt;Nicolas Liochon&lt;/a&gt; This sync happens every time?  Ain&apos;t it really expensive?  More expensive that what used to be there (a write?).  Why we need it?&lt;/p&gt;

&lt;p&gt;+    String node = getNodeName(zkw, encoded);&lt;br/&gt;
+    zkw.sync(node);&lt;/p&gt;

&lt;p&gt;Does this clear any existing watch?&lt;/p&gt;

&lt;p&gt;+    byte [] existingBytes = ZKUtil.getDataNoWatch(zkw, node, stat);&lt;/p&gt;

&lt;p&gt;Does the content of retransitionNodeOpening deserve to be generalized and moved back into transitionNode but with a flag for whether to write the new state or not?&lt;/p&gt;

&lt;p&gt;Otherwise patch looks good.&lt;/p&gt;</comment>
                            <comment id="13627662" author="nkeywal" created="Wed, 10 Apr 2013 10:44:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;This sync happens every time? Ain&apos;t it really expensive? More expensive that what used to be there (a write?). Why we need it?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We already had the sync previously. We&apos;re just saving the final write.&lt;br/&gt;
The sync can be expensive, I don&apos;t know if it&apos;s always expensive or sometimes optimized by ZK. My test hides its cost, because it&apos;s a single ZK node and the master is on the same node. A real life system with 5 ZK would be more realistic. In any case, saving the write is good.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Does this clear any existing watch?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No, it does not set a watcher but should not impact existing ones.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Does the content of retransitionNodeOpening deserve to be generalized and moved back into transitionNode but with a flag for whether to write the new state or not?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t know. Do we have a lot of case like this one?&lt;br/&gt;
Globally, the performance problem is that we check the state before writing, hence we sync and we read. The next optimization I&apos;m thinking about is to know that we were the previous writer, or that we read the previous version already, so we can send the write without syncing/reading, relying only on ZooKeeper versions. But it&apos;s easy to add bugs when doing this.&lt;/p&gt;</comment>
                            <comment id="13628089" author="stack" created="Wed, 10 Apr 2013 18:33:24 +0000"  >&lt;p&gt;Thanks for explanation.  +1 on commit to trunk and 0.95.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310040">
                    <name>Required</name>
                                            <outwardlinks description="requires">
                                        <issuelink>
            <issuekey id="12624864">HBASE-7407</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12623419">HBASE-7327</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is required by">
                                        <issuelink>
            <issuekey id="12551766">HBASE-5843</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12556092" name="7247.v1.patch" size="9932" author="nkeywal" created="Wed, 5 Dec 2012 12:25:31 +0000"/>
                            <attachment id="12577192" name="7247.v2.patch" size="8125" author="nkeywal" created="Fri, 5 Apr 2013 09:56:46 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 30 Nov 2012 18:44:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>293013</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 36 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0srcv:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>165909</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>