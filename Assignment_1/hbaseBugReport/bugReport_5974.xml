<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:32:39 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-5974/HBASE-5974.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-5974] Scanner retry behavior with RPC timeout on next() seems incorrect</title>
                <link>https://issues.apache.org/jira/browse/HBASE-5974</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I&apos;m seeing the following behavior:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;set RPC timeout to a short value&lt;/li&gt;
	&lt;li&gt;call next() for some batch of rows, big enough so the client times out before the result is returned&lt;/li&gt;
	&lt;li&gt;the HConnectionManager stuff will retry the next() call to the same server. At this point, one of two things can happen: 1) the previous next() call will still be processing, in which case you get a LeaseException, because it was removed from the map during the processing, or 2) the next() call will succeed but skip the prior batch of rows.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12554557">HBASE-5974</key>
            <summary>Scanner retry behavior with RPC timeout on next() seems incorrect</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="anoopsamjohn">Anoop Sam John</assignee>
                                    <reporter username="tlipcon">Todd Lipcon</reporter>
                        <labels>
                    </labels>
                <created>Wed, 9 May 2012 20:25:19 +0000</created>
                <updated>Fri, 19 Sep 2014 20:12:22 +0000</updated>
                            <resolved>Thu, 25 Oct 2012 16:45:37 +0000</resolved>
                                    <version>0.90.7</version>
                    <version>0.92.1</version>
                    <version>0.94.0</version>
                    <version>0.95.2</version>
                                    <fixVersion>0.95.0</fixVersion>
                                    <component>Client</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>23</watches>
                                                                <comments>
                            <comment id="13273415" author="anoopsamjohn" created="Fri, 11 May 2012 16:59:15 +0000"  >
&lt;p&gt;So we might need a proper sequencing of the next() calls from the client to RS... Might be like the RegionScanner maintain the key of the last KV it passed to client and client in the next next() call pass back this key which is the last KV&apos;s key it received?&lt;/p&gt;

&lt;p&gt;In the scenario which is mentioned above which might cause KVs to be skipped, these 2 keys won&apos;t match and we can close the scan at RS side and give exception which in turn can cause a new scanner creation from that point of last KV from the client side... &lt;span class=&quot;error&quot;&gt;&amp;#91;Some thing like how currently ClientScanner react to NSRE etc&amp;#93;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;When the client is not passing any last key(null), there wont be any check in the RegionScanner level and scan will continue as normal like the current way.  One down side is that with every scan() call to the RS, need to pass some extra data.. May be if we can distinguish the 1st attempt of call() in the ScannerCallable and the later attempts, we can avoid passing the key for the 1st RS call. Only for the later trials we pass the key...&lt;/p&gt;

&lt;p&gt;These are some thoughts came to me after going through the code..  Your thoughts...&lt;/p&gt;</comment>
                            <comment id="13273443" author="tlipcon" created="Fri, 11 May 2012 17:32:00 +0000"  >&lt;p&gt;Hi Anoop. I was thinking something similar to that &amp;#8211; but just using a long &quot;cookie&quot; instead of passing the actual keys around. So the conversation between client and server becomes:&lt;/p&gt;

&lt;p&gt;C-&amp;gt;S: openScanner(Scan)&lt;br/&gt;
S-&amp;gt;C: return scanner ID, cookie = 0&lt;br/&gt;
C-&amp;gt;S: next(10, cookie=0)&lt;br/&gt;
S-&amp;gt;C: results: ...   newCookie=1&lt;br/&gt;
C-&amp;gt;S: next(10, cookie=1)   [ but times out ]&lt;br/&gt;
S-&amp;gt;C: results: ... newCookie = 2  [ but never gets received ]&lt;br/&gt;
C-&amp;gt;S: next(10, cookie=1) (retry)&lt;br/&gt;
S-&amp;gt;C: NACK: Bad cookie!&lt;/p&gt;
</comment>
                            <comment id="13273452" author="anoopsamjohn" created="Fri, 11 May 2012 17:50:59 +0000"  >&lt;p&gt;mm sounds a long cookie is enough.. There might not be a case of more number of request response, btw Client and one region (for one scan), than the long max value..&lt;/p&gt;

&lt;p&gt;Good catch of a long living bug Todd.. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13273457" author="tlipcon" created="Fri, 11 May 2012 17:56:15 +0000"  >&lt;p&gt;Yea, actually an int would probably do - we shouldn&apos;t ever have 4B rows in a region. And even if it wrapped, the time it would take to do so would prevent any possible case where an old request got incorrectly allowed.&lt;/p&gt;

&lt;p&gt;Anoop: want to work on this?&lt;/p&gt;</comment>
                            <comment id="13273458" author="apurtell" created="Fri, 11 May 2012 17:56:49 +0000"  >&lt;p&gt;+1 on the cookie approach.&lt;/p&gt;

&lt;p&gt;We&apos;ve seen the LeaseExceptions. I didn&apos;t realize that in some cases the next next() would skip a batch of rows, that&apos;s quite bad.&lt;/p&gt;</comment>
                            <comment id="13273461" author="tlipcon" created="Fri, 11 May 2012 18:00:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;We&apos;ve seen the LeaseExceptions. I didn&apos;t realize that in some cases the next next() would skip a batch of rows, that&apos;s quite bad.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;On a LeaseException I think we do the right thing - the client detects the error at the scanner level and can restart the scanner from the right spot. That&apos;s because the lease exception is a DoNotRetryIOException. But other exceptions like RPC timeouts or IO errors would get retried incorrectly with the bug described here.&lt;/p&gt;</comment>
                            <comment id="13273462" author="anoopsamjohn" created="Fri, 11 May 2012 18:02:25 +0000"  >&lt;p&gt;Ya I can work on this and try to provide a patch for 94 first..&lt;/p&gt;</comment>
                            <comment id="13273468" author="zhihyu@ebaysf.com" created="Fri, 11 May 2012 18:05:32 +0000"  >&lt;p&gt;In the scenario Todd described, can the server keep the most recent batch of results so that when server sees cookie from client carrying 1 less than expected value, the server can resend the stored batch ?&lt;/p&gt;</comment>
                            <comment id="13273517" author="tlipcon" created="Fri, 11 May 2012 19:13:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;In the scenario Todd described, can the server keep the most recent batch of results so that when server sees cookie from client carrying 1 less than expected value, the server can resend the stored batch ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think it&apos;s too expensive in terms of memory consumption on the server. My assertion is that this issue is very rare (or else people probably would have noticed the missing rows a lot more often). So, keeping the last response batch cached server side seems a poor use of RAM.&lt;/p&gt;</comment>
                            <comment id="13273530" author="apurtell" created="Fri, 11 May 2012 19:27:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;My assertion is that this issue is very rare&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We saw the LeaseExceptions frequently, so perhaps not. Critical priority is correct here I think.&lt;/p&gt;</comment>
                            <comment id="13273571" author="tlipcon" created="Fri, 11 May 2012 20:15:05 +0000"  >&lt;p&gt;LeaseExceptions don&apos;t cause this issue, though. They are DoNotRetryIOExceptions. It&apos;s only IOEs that cause the issue.&lt;/p&gt;</comment>
                            <comment id="13273587" author="apurtell" created="Fri, 11 May 2012 20:34:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;LeaseExceptions don&apos;t cause this issue, though. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Our environment is pretty good for causing IPC issues occasionally. &lt;/p&gt;

&lt;p&gt;Unfortunately I can&apos;t comment on the frequency that IOEs caused missing rows, but I can testify to getting complaints about frequent LeaseExceptions for a time.&lt;/p&gt;</comment>
                            <comment id="13274441" author="ram_krish" created="Mon, 14 May 2012 04:43:44 +0000"  >&lt;p&gt;+1 on cookie based approach.&lt;/p&gt;</comment>
                            <comment id="13274451" author="zhihyu@ebaysf.com" created="Mon, 14 May 2012 04:57:15 +0000"  >&lt;p&gt;Suppose client gets &apos;Bad cookie&apos; notification from server in the middle of a long scan.&lt;br/&gt;
If the client wants to continue where it left off in a new scanner (I assume this is the default / desriable behavior), the client needs to remember the key of the last KV it previously received and .&lt;br/&gt;
Using cookie saves bandwidth. But in faulty condition, I think the key of last KV would still be needed.&lt;/p&gt;</comment>
                            <comment id="13274495" author="anoopsamjohn" created="Mon, 14 May 2012 07:57:36 +0000"  >&lt;blockquote&gt;
&lt;p&gt;Suppose client gets &apos;Bad cookie&apos; notification from server in the middle of a long scan.&lt;br/&gt;
If the client wants to continue where it left off in a new scanner (I assume this is the default / desriable behavior), the client needs to remember the key of the last KV it previously received and .&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. The client knows the last row and based on this it can create a new scanner so as to continue the scan from that point. This is already in place and this what will happen when client gets a NSRE in the middle of the scan from RS.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;But in faulty condition, I think the key of last KV would still be needed.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Any specific reason in your mind Ted? As such I think a seq numbering is enough...&lt;/p&gt;</comment>
                            <comment id="13274498" author="anoopsamjohn" created="Mon, 14 May 2012 08:00:00 +0000"  >&lt;p&gt;I have prepared a patch based on 94. Will upload tonight.&lt;/p&gt;</comment>
                            <comment id="13275127" author="anoopsamjohn" created="Tue, 15 May 2012 01:46:37 +0000"  >&lt;p&gt;Trying to attach patch to JIRA but seems some issue with JIRA. I am getting some error dialog box instead of the attach dialog box !!&lt;/p&gt;</comment>
                            <comment id="13275279" author="anoopsamjohn" created="Tue, 15 May 2012 09:13:21 +0000"  >&lt;p&gt;One point came up when I and Ram discussed&lt;br/&gt;
In ScannerCallable.call()&lt;br/&gt;
When a RemoteException comes, can we mark that as DoNotRetryIOException?&lt;/p&gt;

&lt;p&gt;Any way the call reached the RS and it might have done atleast partial scan.&lt;span class=&quot;error&quot;&gt;&amp;#91;Moved the currentRow pointer&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="13275902" author="anoopsamjohn" created="Tue, 15 May 2012 15:53:06 +0000"  >&lt;p&gt;Patch for 94. 1st version.. there are some points to discuss which will be done in following comments&lt;/p&gt;</comment>
                            <comment id="13275904" author="anoopsamjohn" created="Tue, 15 May 2012 15:58:36 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (-1 != cookie &amp;amp;&amp;amp; cookie != rswc.cookie) {
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.scanners.remove(scannerName);	
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.leases.cancelLease(scannerName);
+      &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ScannerCookieOutOfOrderException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Cookie from client and cookie at server &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not match&quot;&lt;/span&gt;);
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;When the cookie is out of order, we remove the scanner and cancel Lease.&lt;span class=&quot;error&quot;&gt;&amp;#91;Not waiting for the lease timeout&amp;#93;&lt;/span&gt; This is in same line as what happens with NSRE. One question which arise in my mind is do we need to contact the CP hooks of pre and post scanner close here?&lt;br/&gt;
Now in normal close() of scanner from client side and lease timeout based close, we call CP hooks. But what abt the scanner getting removed from RS when the NSRE happens. &lt;span class=&quot;error&quot;&gt;&amp;#91;Same applicable to ScannerCookieOutOfOrderException case too&amp;#93;&lt;/span&gt;&lt;/p&gt;</comment>
                            <comment id="13278491" author="jeason" created="Fri, 18 May 2012 01:51:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;When a RemoteException comes, can we mark that as DoNotRetryIOException?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think it should be marked as DNRI.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Now in normal close() of scanner from client side and lease timeout based close, we call CP hooks. But what abt the scanner getting removed from RS when the NSRE happens.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So what&apos;s your suggestion, Anoop? call CP hooks in the finally section?&lt;/p&gt;

&lt;p&gt;The patch looks nice. A minor comment:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;RegionScanner scanner = scanners.get(scannerIdString).s;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Is there one chance of &quot;scanners.get(scannerIdString)&quot; is null?  any way, the direct access to that private variable is not good.&lt;/p&gt;
</comment>
                            <comment id="13279506" author="ram_krish" created="Sat, 19 May 2012 09:52:13 +0000"  >&lt;p&gt;@Todd/Stack&lt;br/&gt;
Can you review this patch?  Seems to be pretty important fix.&lt;/p&gt;</comment>
                            <comment id="13279686" author="tlipcon" created="Sun, 20 May 2012 07:25:49 +0000"  >&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;style: use 2-space indentation, not tabs&lt;/li&gt;
	&lt;li&gt;why do we need the new RegionScannerWithCookie class? why not add the cookie to RegionScanner itself? I&apos;d also move the cookie check into a function &quot;scanner.checkAndIncrementCookie(cookie);&quot;&lt;/li&gt;
	&lt;li&gt;let&apos;s rename &quot;cookie&quot; to &quot;callSequenceNumber&quot; or something &amp;#8211; since in this implementation it is a simple increasing sequence.&lt;/li&gt;
	&lt;li&gt;this isn&apos;t currently compatible with 0.94, since a new client wouldn&apos;t be able to scan an old server. In order to make it compatible, we&apos;d need to catch the MethodNotExists exception and set a flag in the client which disables cookie usage for that cluster.&lt;/li&gt;
	&lt;li&gt;In the test, I think you should use HRegionInterface directly, so you don&apos;t have to actually generate an RPC timeout. As is, I think it&apos;s also not guaranteed to trigger the issue unless you set scanner caching to 1, right? I guess that&apos;s the default, but if we ever change the default, it would invalidate this test.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13280709" author="anoopsamjohn" created="Tue, 22 May 2012 04:30:18 +0000"  >&lt;p&gt;Thanks for the review Todd&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;why do we need the new RegionScannerWithCookie class? why not add the cookie to RegionScanner itself? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I was also thinking initially in this way. There are 2 reasons why I have avoided to do the seqNo work within the RegionScanner &lt;br/&gt;
1. In case of the caching&amp;gt;1 there will be more than one call to the RegionScanner.next(). U mean passing the client sent seqNo ( I am avoiding cookie as I agree with you to rename this ) to the RegionScanner which will change the interface. This is exposed&lt;br/&gt;
2. This is the main reason. With the CP usage we have exposed the RegionScanner and using the preScannerOpen() and postScannerOpen() impls user can now return his own RegionScanner impl. If we do this seqNo maintain and check logics in RegionScanner this will make the user to worry abt these? I feel this should be handled by HBase core code.  What do u say?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;this isn&apos;t currently compatible with 0.94, since a new client wouldn&apos;t be able to scan an old server.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agree.. I can fix this&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;let&apos;s rename &quot;cookie&quot; to &quot;callSequenceNumber&quot; &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Already agreed.. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the test, I think you should use HRegionInterface directly, so you don&apos;t have to actually generate an RPC timeout.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I thought of an E2E FT case.. Yes as u said the other one also I can write. So what is your recommendation? Should I change?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; As is, I think it&apos;s also not guaranteed to trigger the issue unless you set scanner caching to 1, right? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;May be in that case I can explicitly set the caching=1 for this test case. I can do that&lt;/p&gt;</comment>
                            <comment id="13280728" author="anoopsamjohn" created="Tue, 22 May 2012 05:04:28 +0000"  >&lt;p&gt;Thanks for the review Jieshan&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;So what&apos;s your suggestion, Anoop? call CP hooks in the finally section?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I mean in whatever case when we close the scanner we need to call the CP hooks. Currently before this patch we were not doing this when getting a NSRE &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Throwable t) {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (t &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; NotServingRegionException) {
	&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.scanners.remove(scannerName);
  }
  &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; convertThrowableToIOE(cleanup(t));
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here we can see it is not calling the CP hooks.  As of now in case of the cookie out of order also I am not contacting the CP hooks.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;RegionScanner scanner = scanners.get(scannerIdString).s;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Oh yes. Thanks for pointing it out. I will fix.. This was not in that direct next() call flow.. That is why I missed..&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  &lt;/p&gt;</comment>
                            <comment id="13280815" author="anoopsamjohn" created="Tue, 22 May 2012 08:45:05 +0000"  >&lt;p&gt;@Todd&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;this isn&apos;t currently compatible with 0.94, since a new client wouldn&apos;t be able to scan an old server.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Do we need to keep this way of compatibility also? I thought we need to have like old client and new server. Just wanted to confirm this.&lt;/p&gt;</comment>
                            <comment id="13284123" author="anoopsamjohn" created="Sun, 27 May 2012 08:50:27 +0000"  >&lt;p&gt;@Todd&lt;br/&gt;
Regarding the solution for handling the compatibility with client,&lt;br/&gt;
When NoSuchMethodException happens at RS side, the IPC layer throws back the RemoteException in which the actual Exception is stringfied and set as the message.  So if we need to handle, we need to do string matching on the Exception message at the client side.  Pls give your opinion on this. Or can we mark this issue fix such that when the server side is upgraded the client side also need upgrade..&lt;br/&gt;
Other devs also pls give you suggestion&lt;/p&gt;

&lt;p&gt;I have prepared a patch addressing the other comments and if we decide on the above I can submit the new patch&lt;/p&gt;</comment>
                            <comment id="13284183" author="ram_krish" created="Sun, 27 May 2012 16:49:50 +0000"  >&lt;p&gt;@Todd&lt;br/&gt;
Also regarding the comment &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5974?focusedCommentId=13275279&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13275279&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-5974?focusedCommentId=13275279&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13275279&lt;/a&gt;&lt;br/&gt;
What do you feel?&lt;/p&gt;</comment>
                            <comment id="13284282" author="anoopsamjohn" created="Mon, 28 May 2012 03:55:44 +0000"  >&lt;p&gt;When SocketTimeoutException happens it wont be a RemoteException.&lt;/p&gt;</comment>
                            <comment id="13284701" author="anoopsamjohn" created="Tue, 29 May 2012 09:59:33 +0000"  >&lt;p&gt;Addressed the comments&lt;br/&gt;
The comment regarding the compatibility at client side, I have fixed with the string check on the RemoteException stacktrace. I am not happy with this way but there is no other way as of now I can find. Pls give your comments&lt;/p&gt;</comment>
                            <comment id="13284904" author="zhihyu@ebaysf.com" created="Tue, 29 May 2012 16:17:23 +0000"  >&lt;p&gt;Should CallSequenceOutOfOrderException be extending DoNotRetryIOException ?&lt;br/&gt;
That way you don&apos;t need to create a new exception below:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ioe &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; CallSequenceOutOfOrderException) {
...
+          &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DoNotRetryIOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Reset scanner&quot;&lt;/span&gt;, ioe);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I think users haven&apos;t experienced this bug.&lt;br/&gt;
In solving the bug, some kludge is introduced.&lt;br/&gt;
We should think twice before integration.&lt;/p&gt;</comment>
                            <comment id="13284957" author="lhofhansl" created="Tue, 29 May 2012 17:44:35 +0000"  >&lt;p&gt;Last patch looks good to me. The string check on the RemoteException is not ideal, but I cannot think of anything better; somebody with more knowledge about our RPC should chime in.&lt;br/&gt;
Is the RegionScannerHolder needed? Why can&apos;t RegionScannerImpl not hold the sequence number and RegionScanner get a get/setSeq method?&lt;/p&gt;</comment>
                            <comment id="13285365" author="anoopsamjohn" created="Wed, 30 May 2012 03:41:29 +0000"  >&lt;p&gt;Thanks for the review Lars&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Is the RegionScannerHolder needed? Why can&apos;t RegionScannerImpl not hold the sequence number and RegionScanner get a get/setSeq method?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Why I was not doing that because through the CP we have exposed the RegionScanner interface. The pre and post scannerOpen methods in the CP can return an impl for the RegionScanner now. So in that case customer need to worry abt maintain this seqNo?  I felt that wont be good. Am I clear to you Lars? &lt;/p&gt;

&lt;p&gt;Yes the string based check, I am not getting any way. When the NoSuchMethodException happens at the RS side, we are creating RemoteException not wrapping this NoSuchMethodException but with a message=exception trace...  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13285487" author="lhofhansl" created="Wed, 30 May 2012 08:10:27 +0000"  >&lt;p&gt;W.r.t. to RegionScannerHolder. I see that makes sense. As long as the sequence numbering also works when the CP intercepts a scanner and provides its own implementation. I don&apos;t think there&apos;d be a case where a CP would want to interfere with the sequence numbers.&lt;/p&gt;

&lt;p&gt;Re: the NoSuchMethodException check. I was wondering if there is anything with RPC version numbering to deal with this instead.&lt;/p&gt;</comment>
                            <comment id="13285532" author="anoopsamjohn" created="Wed, 30 May 2012 09:34:27 +0000"  >&lt;p&gt;@Lars&lt;br/&gt;
Or is it this kind of a compatibility is not needed? Only upgradation at client side and not at server. I am not sure what kind of compatibility we need to maintain across new minor versions (from 94.0 to 94.1)&lt;/p&gt;

&lt;p&gt;Also see the comments for the issue &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6124&quot; title=&quot;Backport HBASE-6033 to 0.90, 0.92 and 0.94&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6124&quot;&gt;&lt;del&gt;HBASE-6124&lt;/del&gt;&lt;/a&gt;. &lt;span class=&quot;error&quot;&gt;&amp;#91;Similar to our case&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6124?focusedCommentId=13285008&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13285008&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-6124?focusedCommentId=13285008&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13285008&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6124?focusedCommentId=13285016&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13285016&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-6124?focusedCommentId=13285016&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13285016&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13287256" author="lhofhansl" created="Fri, 1 Jun 2012 08:11:00 +0000"  >&lt;p&gt;@Anoop. Compatibility is definitely needed across a minor version change.&lt;/p&gt;</comment>
                            <comment id="13287878" author="anoopsamjohn" created="Sat, 2 Jun 2012 09:57:41 +0000"  >&lt;p&gt;If the solution is fine with every one I can make patch for other versions also.&lt;/p&gt;

&lt;p&gt;@Ted&lt;br/&gt;
Regarding the new Exception extending DoNotRetryIOException, I was following NSRE.  I can make this change.  I think it should be ok.&lt;/p&gt;</comment>
                            <comment id="13287916" author="lhofhansl" created="Sat, 2 Jun 2012 12:32:22 +0000"  >&lt;p&gt;+1 for V2&lt;/p&gt;</comment>
                            <comment id="13287928" author="ram_krish" created="Sat, 2 Jun 2012 12:59:07 +0000"  >&lt;p&gt;+1 from me too.  &lt;/p&gt;</comment>
                            <comment id="13287949" author="zhihyu@ebaysf.com" created="Sat, 2 Jun 2012 14:09:25 +0000"  >&lt;p&gt;HRegionInterface.java doesn&apos;t exist in trunk so patch v2 wouldn&apos;t apply to trunk.&lt;br/&gt;
I would suggest creating patch for trunk and run through hadoop QA.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+              LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;Seq number based scan API not present at RS side! Trying with API: &quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I think the above log should be at warn level.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ioe &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; CallSequenceOutOfOrderException) {
+          &lt;span class=&quot;code-comment&quot;&gt;// The callSeq from the client not matched with the one expected at the RS side
&lt;/span&gt;+          &lt;span class=&quot;code-comment&quot;&gt;// This means the RS might have done extra scanning of data which is not received by the
&lt;/span&gt;+          &lt;span class=&quot;code-comment&quot;&gt;// client.Throw a DNRE so that we close the current scanner and opens a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; one with RS.
&lt;/span&gt;+          &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DoNotRetryIOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Reset scanner&quot;&lt;/span&gt;, ioe);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Should we disclose a little more detail in the message of DNRIOE ? The above is the same as response to NotServingRegionException and RegionServerStoppedException.&lt;br/&gt;
&apos;not matched with&apos; -&amp;gt; &apos;does not match&apos;&lt;br/&gt;
&apos;is not received&apos; -&amp;gt; &apos;has not been received&apos;&lt;br/&gt;
&apos;opens a new&apos; -&amp;gt; &apos;open a new&apos;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; callSeq &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not match &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; Exception straight away. This needs to be performed even&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&apos;do not match&apos; -&amp;gt; &apos;does not match&apos;&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class TestClientScannerRPCTimesout {^M
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please add short javadoc for the test class. I think it should be called TestClientScannerRPCTimeout.&lt;br/&gt;
Please use utility such as dos2unix to remove the trailing ^M from the patch file.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; class RegionServerWithScanTimesout &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; MiniHBaseClusterRegionServer {^M
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above class can be made private. It should be named RegionServerWithScanTimeout.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+ * Thrown by a region server &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; scan related next() calls. Both client and server maintain a^M
+ * callSequence and &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the both &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; not match, RS will &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; exception.^M
+ */^M
+&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class CallSequenceOutOfOrderException &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; IOException {^M
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;CallSequenceOutOfOrderException should extend DoNotRetryIOException so that we don&apos;t need to create DoNotRetryIOException instance (shown above).&lt;br/&gt;
&apos;while scan related next()&apos; -&amp;gt; &apos;while doing scan related next()&apos;&lt;br/&gt;
&apos;the both do not&apos; -&amp;gt; &apos;they do not&apos;&lt;/p&gt;

&lt;p&gt;It would be nice for Todd to take a look at the patch.&lt;/p&gt;</comment>
                            <comment id="13287953" author="zhihyu@ebaysf.com" created="Sat, 2 Jun 2012 14:42:34 +0000"  >&lt;p&gt;w.r.t. keeping RegionScannerHolder, I posted a poll to dev@hbase for use case of letting &lt;span class=&quot;error&quot;&gt;&amp;#91;pre,post&amp;#93;&lt;/span&gt;ScannerOpen() return a custom RegionScanner implementation.&lt;/p&gt;</comment>
                            <comment id="13287974" author="anoopsamjohn" created="Sat, 2 Jun 2012 17:15:46 +0000"  >&lt;p&gt;@Ted&lt;br/&gt;
Will look into your comments and need a rebase for 94 patch too..&lt;br/&gt;
I will make seperate patch fro trunk also.&lt;/p&gt;

&lt;p&gt;wrt pre and post CP hooks, it is not only creating a new custom RegionScanner, but may be creating a wrapper for the actual RegionScanner.  In one of our impl, we use this approach. &lt;span class=&quot;error&quot;&gt;&amp;#91;Just a wrapper which delegates the calls with some extra steps for next() calls. &amp;#93;&lt;/span&gt;  Here also if we add new methods to RegionScanner interface which deals with the check and incerement for this seqNo, will get exposed to user. I felt this might look odd for them. &lt;/p&gt;</comment>
                            <comment id="13287993" author="anoopsamjohn" created="Sat, 2 Jun 2012 18:17:47 +0000"  >&lt;p&gt;Patch addressing Ted&apos;s comments&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The above class can be made private. It should be named RegionServerWithScanTimeout.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The class name is changed. But we can not make this private. If so RS impl class can not get instantiated.&lt;/p&gt;</comment>
                            <comment id="13287994" author="anoopsamjohn" created="Sat, 2 Jun 2012 18:18:28 +0000"  >&lt;p&gt;I will give patch fro trunk tomorrow.&lt;/p&gt;</comment>
                            <comment id="13288209" author="zhihyu@ebaysf.com" created="Sun, 3 Jun 2012 17:04:44 +0000"  >&lt;p&gt;Patch v4 makes a small change to JVMClusterUtil.java so that RegionServerWithScanTimeout can be made private.&lt;/p&gt;

&lt;p&gt;TestClientScannerRPCTimeout passes.&lt;/p&gt;</comment>
                            <comment id="13288318" author="zhihyu@ebaysf.com" created="Mon, 4 Jun 2012 02:34:18 +0000"  >&lt;p&gt;w.r.t. potential change to RegionScanner, if users create wrapper(s), the maintenance of seqNo would still be completed by core implementation.&lt;br/&gt;
See the following in patch:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Result[] next(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; scannerId, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; nbRows) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; next(scannerId, nbRows, -1);
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and the following in current code base:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@InterfaceAudience.Private
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; RegionScanner &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; InternalScanner {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13288337" author="anoopsamjohn" created="Mon, 4 Jun 2012 04:31:02 +0000"  >&lt;p&gt;@Ted&lt;br/&gt;
Pls see the below comment from Andrew Purtell&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5517?focusedCommentId=13225624&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13225624&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-5517?focusedCommentId=13225624&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13225624&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I think we need to change the RegionScanner from private to public then. &lt;/p&gt;</comment>
                            <comment id="13288579" author="anoopsamjohn" created="Mon, 4 Jun 2012 14:13:00 +0000"  >&lt;p&gt;Patch for trunk.&lt;/p&gt;</comment>
                            <comment id="13288586" author="anoopsamjohn" created="Mon, 4 Jun 2012 14:27:20 +0000"  >&lt;p&gt;In Trunk InterfaceAudience for RegionScanner to be public I feel ( as per the use case that we are having. We wants to impl this interface wrapping the actual RegionScanner object created by the Region )..  Not made this change in the attached patch. Pls provide suggestions&lt;/p&gt;</comment>
                            <comment id="13288617" author="hadoopqa" created="Mon, 4 Jun 2012 15:07:44 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12530781/5974_trunk.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12530781/5974_trunk.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 3 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestAtomicOperation&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2097//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2097//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2097//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2097//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2097//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2097//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2097//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2097//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13288644" author="zhihyu@ebaysf.com" created="Mon, 4 Jun 2012 15:57:14 +0000"  >&lt;p&gt;I would listen to Todd and Andy&apos;s opinion.&lt;/p&gt;</comment>
                            <comment id="13290033" author="anoopsamjohn" created="Wed, 6 Jun 2012 09:00:30 +0000"  >&lt;p&gt;@Andrew  and @Todd&lt;br/&gt;
Can you have a look at this pls? Also regarding the point of RegionScanner exposing through CP and its use cases, can you give your opinion?&lt;/p&gt;</comment>
                            <comment id="13290446" author="tlipcon" created="Wed, 6 Jun 2012 21:38:14 +0000"  >&lt;p&gt;I don&apos;t think we should be trying to lock down internal APIs like RegionScanner. Coprocessors are an advanced interface and I think we should not endeavour to provide full compatibility between versions for them. We&apos;ll end up getting bogged down way too fast trying to keep this compatibility everywhere.&lt;/p&gt;

&lt;p&gt;So, I&apos;m still in favor of just adding a new field/method to the existing RegionScanner implementation.&lt;/p&gt;

&lt;p&gt;As for the compatibility code: I think the &lt;tt&gt;useCallSeq&lt;/tt&gt; flag has to be at a wider scope than this. Having it in ScannerCallable means that each individual scan will print a warning (and have to do an extra round trip), which is too much.&lt;/p&gt;</comment>
                            <comment id="13290783" author="anoopsamjohn" created="Thu, 7 Jun 2012 04:26:49 +0000"  >&lt;blockquote&gt;
&lt;p&gt;As for the compatibility code: I think the useCallSeq flag has to be at a wider scope than this. Having it in ScannerCallable means that each individual scan will print a warning (and have to do an extra round trip), which is too much.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I totally agree with you Todd. I thought about this while making the patch. I couldn&apos;t find an apt place for saving this info and making use. This is scan specific so should be some where in the scan code area I felt. Also my worry was can it be like in one cluster itself one RS is with new code and another with old?&lt;br/&gt;
Any Suggestions Todd..  As you said, extra round trip is a worry..&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&apos;t think we should be trying to lock down internal APIs like RegionScanner. Coprocessors are an advanced interface and I think we should not endeavour to provide full compatibility between versions for them. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Rather than the compatability at interface level my worry is RegionScanner handling this seq maintain and checking job. &lt;br/&gt;
In our scenario we wanted custom behaviour in RegionScanner. So what we have done is created a new RegionScanner impl wrapping the actual RegionScanner object created by the HRegion. Our custom impl class implements all the methods and for the actual work we delegate the call. The extra steps we wanted to do, we are doing before this delegation. &lt;br/&gt;
Now we need to add a new method in the RegionScanner &lt;span class=&quot;error&quot;&gt;&amp;#91;like checkAndIncrement(seqNo)&amp;#93;&lt;/span&gt; which should be called by HRS.. Now in our usecase, we need to implement this and may be delegate the call. Making this very much internal item exposed to user was my worry. Hope I make it clear.  We dont have any usecase like making full custom RegionScanner impl (without even the wrapped object) now. I dont know someone might really need some thing like that.&lt;span class=&quot;error&quot;&gt;&amp;#91;But at least the CP allows to do so now&amp;#93;&lt;/span&gt; In such a thing this impl of seqNo check need to be handled by that code itself.&lt;/p&gt;</comment>
                            <comment id="13290791" author="anoopsamjohn" created="Thu, 7 Jun 2012 04:56:18 +0000"  >&lt;p&gt;In Trunk patch&lt;br/&gt;
HRegionServer&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

+          &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; callSeq does not match &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; Exception straight away. This needs to be performed
&lt;/span&gt;+          &lt;span class=&quot;code-comment&quot;&gt;// even before checking of Lease.
&lt;/span&gt;+          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rsh == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+            rsh = scanners.get(scannerName);
+          }
+          &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rsh != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+            &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (request.getCallSeq() != rsh.callSeq) {
+              &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CallSequenceOutOfOrderException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Expected seq: &quot;&lt;/span&gt; + rsh.callSeq
+                  + &lt;span class=&quot;code-quote&quot;&gt;&quot; But the seq got from client: &quot;&lt;/span&gt; + request.getCallSeq());
+            }
+            &lt;span class=&quot;code-comment&quot;&gt;// Increment the callSeq value which is the next expected from client.
&lt;/span&gt;+            rsh.callSeq++;
+          }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here we need to check whether the callSeq is present in the ScanRequest or not. If it is present then only we can do the comparison. I have noticed this and will a patch V2 on Trunk with this change soon&lt;/p&gt;</comment>
                            <comment id="13290843" author="hadoopqa" created="Thu, 7 Jun 2012 06:47:49 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12531221/5974_trunk-V2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12531221/5974_trunk-V2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 hadoop2.0.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 5 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.regionserver.TestAtomicOperation&lt;br/&gt;
                  org.apache.hadoop.hbase.master.TestMasterNoCluster&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2120//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2120//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2120//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2120//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2120//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2120//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/2120//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/2120//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13294812" author="anoopsamjohn" created="Thu, 14 Jun 2012 05:26:37 +0000"  >&lt;p&gt;2 test classes need change&lt;br/&gt;
TestAssignmentManager#processServerShutdownHandler()&lt;br/&gt;
TestMetaReaderEditorNoCluster#testRideOverServerNotRunning ()&lt;/p&gt;

&lt;p&gt;I will give a new patch with these test case changes needed as per the patch soon.&lt;/p&gt;</comment>
                            <comment id="13404541" author="lhofhansl" created="Sat, 30 Jun 2012 16:29:05 +0000"  >&lt;p&gt;Where are we with this? Should I hold off 0.94.1 for this?&lt;/p&gt;</comment>
                            <comment id="13404697" author="anoopsamjohn" created="Sun, 1 Jul 2012 07:25:18 +0000"  >&lt;p&gt;There were some concerns over where to handle the seq no. &lt;span class=&quot;error&quot;&gt;&amp;#91;at HRS or at RegionScannerImpl&amp;#93;&lt;/span&gt;&lt;br/&gt;
I had added my reasoning ... Any thoughts?&lt;br/&gt;
Request opinion from Andrew also.&lt;/p&gt;</comment>
                            <comment id="13408786" author="lhofhansl" created="Sat, 7 Jul 2012 22:01:57 +0000"  >&lt;p&gt;Let&apos;s move this to 0.94.2. We had this behaviour since the beginning.&lt;/p&gt;</comment>
                            <comment id="13441534" author="lhofhansl" created="Fri, 24 Aug 2012 22:04:13 +0000"  >&lt;p&gt;Moving out to 0.94.3 (unless there is some movement soon)&lt;/p&gt;</comment>
                            <comment id="13459991" author="lhofhansl" created="Thu, 20 Sep 2012 21:52:36 +0000"  >&lt;p&gt;Let&apos;s do this correctly in 0.96 (where it is OK to break wire compatibility).&lt;br/&gt;
Removing this from 0.94.&lt;/p&gt;

&lt;p&gt;This means we can pass the seqno as a proper field in the Scan object.&lt;/p&gt;</comment>
                            <comment id="13479326" author="stack" created="Thu, 18 Oct 2012 20:25:44 +0000"  >&lt;p&gt;Thanks for reminding me about this important issue Anoop.   Lets get it into trunk at least (Should be a blocker on 0.96).&lt;/p&gt;

&lt;p&gt;Minor: Do you foresee the sequencing being used other than in scanners (Its implemented in ScannerCallable only at moment)?  If NOT, would OutOfOrderNextException or OutOfOrderScannerNextException be a better name than CallSequenceOutOfOrderException?  If you do this, would suggest changing param names from callSeq to nextSeq?  The former is generic.&lt;/p&gt;

&lt;p&gt;Is CallSequenceOutOfOrderException an exception that will bubble up into the application or is the client its intended audience?  If so, should we annotate it @InterfaceAudience.Private as Abortable is for instance?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+              &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ((cause == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; || (!(cause &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; NotServingRegionException)
+                  &amp;amp;&amp;amp; !(cause &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; RegionServerStoppedException)))
+                  &amp;amp;&amp;amp; !(e &lt;span class=&quot;code-keyword&quot;&gt;instanceof&lt;/span&gt; CallSequenceOutOfOrderException)) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Would it make sense testing ! DoNotRetryIOException rather than calling out the two exceptions above?  Would that be too broad?  Otherwise, wondering if these two exceptions should inherit from a common base class given they are getting this special treatment.  Not important.  Just a thought.&lt;/p&gt;

&lt;p&gt;Check your comments.  You seem to be saying &apos;scan&apos; when you mean &apos;next&apos;.&lt;/p&gt;

&lt;p&gt;For example, this comment:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+            &lt;span class=&quot;code-comment&quot;&gt;// increment the callSeq which will be getting used &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the next time scan() call to
&lt;/span&gt;+            &lt;span class=&quot;code-comment&quot;&gt;// the RS.In &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; of a timeout &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; increment should not happen so that the next
&lt;/span&gt;+            &lt;span class=&quot;code-comment&quot;&gt;// trial also will be done with the same callSeq.&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Regards the above comment, is there a sentence missing on what happens if we go back w/ the same callseq?  Maybe have another go at this whole comment... it could be a bit clearer.  Thanks.&lt;/p&gt;

&lt;p&gt;Committing this set of comments.... more to come.&lt;/p&gt;


</comment>
                            <comment id="13479361" author="stack" created="Thu, 18 Oct 2012 21:09:24 +0000"  >&lt;p&gt;Like Lars and Todd above I almost said why RegionScannerHolder?  Is it because if you add this class, you can do the seqid management in the regionserver and CPs do not have to be concerned with its management?  That is fair enough and this is pretty elegant soln to the issue.&lt;/p&gt;

&lt;p&gt;Your worry is that a CP might return its own RegionScanner implementation.  Can you not add to RegionScanner to methods, getNextSeq, and incrementNextSeq?  Then the regionserver would have the means for keeping up the seqid in whatever the implementation rather than introduce this wrapper class?  RegionScanner is marked as private.  For the trunk patch, we are requiring a restart and allowing that CPs may need modification to make the leap from 0.94 to 0.96.  Does that make it easier on you modifying RegionScanner to support nextSeq?&lt;/p&gt;

&lt;p&gt;Yeah, I think that rather than:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  optional uint64 callSeq = 6;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;it should be called nextSeq or nextCallSeq (the latter might be better because nextSeq might make you think the next sequence id rather than the sequence id for the &apos;next&apos; call).  All references should be changed if you change this I&quot;d say Anoop.&lt;/p&gt;

&lt;p&gt;This test, TestClientScannerRPCTimeout, looks good.  Does it have to be in a separate class?  Do we not have a scanner test already that has a running minicluster?  I can understand though if you want to keep this separate because its hard to integrate into a current test suite.  If you are going to have a class for this single test and are going to go to the bother of spinning up a whole minicluster, I&apos;d say do a bit more testing.  Are there other scenarios you can manufacture?  Can you add assert that you actually slept?&lt;/p&gt;

&lt;p&gt;Good stuff Anoop.  Lets get this important patch in.&lt;/p&gt;


</comment>
                            <comment id="13479598" author="anoopsamjohn" created="Fri, 19 Oct 2012 04:14:49 +0000"  >&lt;p&gt;Stack&lt;br/&gt;
Thanks for your review..  I will work on this today&lt;br/&gt;
It is been some time that I have not seen this patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; Let me get a look into this &lt;/p&gt;</comment>
                            <comment id="13479609" author="anoopsamjohn" created="Fri, 19 Oct 2012 04:55:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;Do you foresee the sequencing being used other than in scanners (Its implemented in ScannerCallable only at moment)? If NOT, would OutOfOrderNextException or OutOfOrderScannerNextException be a better name than CallSequenceOutOfOrderException? If you do this, would suggest changing param names from callSeq to nextSeq? The former is generic.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Issues in which a retry from client as a result of timeout can come in other client API like increment() also I guess. It can increment 2 times or may be more.. Here in this particular case the names you suggested better than mine.. Sorry I am not good at naming &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is CallSequenceOutOfOrderException an exception that will bubble up into the application or is the client its intended audience? If so, should we annotate it @InterfaceAudience.Private as Abortable is for instance?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes you are correct. I will change&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Would it make sense testing ! DoNotRetryIOException rather than calling out the two exceptions above? Would that be too broad? Otherwise, wondering if these two exceptions should inherit from a common base class given they are getting this special treatment. Not important. Just a thought.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Here 3 exceptions getting the special treatment. !DoNotRetryIOException I can try.. Didnt want to change this key area..But at the time of this patch preperation I felt like why this is been written this way. I had to add my new Exception out here to make thing work.. May be will keep the code the current way as in the patch. Will open up a new jira where we can discuss about making a common base class or other changes. I think your suggestion makes sense for maintainability&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Check your comments. You seem to be saying &apos;scan&apos; when you mean &apos;next&apos;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes I need do changes here. Will do&lt;/p&gt;

&lt;p&gt;Will continue in next comment....&lt;/p&gt;</comment>
                            <comment id="13479617" author="anoopsamjohn" created="Fri, 19 Oct 2012 05:12:45 +0000"  >&lt;p&gt;Regarding RegionScannerHolder&lt;br/&gt;
Yes Stack my worry was wrt CP.. In our usage also we are returning a RegionScanner from the CP. This is a wrapper over the actual RegionScannerImpl. Yes by adding the methods we can make sure that the logic is being executed by the HRS but the seqno# maintain should be within the RegionScanner. In our case we can just delegate these 2 calls to the RegionScannerImpl created by kernel.  My worry was this exposes this seq stuff to the user. Ideally the seq maintain etc is our problem and to solve we introduce this stuff..  That is why I was/am in 2 minds..&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  If you all say that is fine, I can change.. We need to clearly document these 2 methods with its importance and what to do wrt this etc.. Considering all these my mind is more hanging towards the current way..&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;optional uint64 callSeq = 6;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;it should be called nextSeq or nextCallSeq.... All references should be changed if you change this I&quot;d say Anoop&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sure I will change. &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This test, TestClientScannerRPCTimeout, looks good. Does it have to be in a separate class? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let me see where I can fit this test case. Yes agree with you regarding the overhead of minicluster startup.&lt;/p&gt;

&lt;p&gt;Also this fix is already running in our cluster. &lt;/p&gt;</comment>
                            <comment id="13479650" author="stack" created="Fri, 19 Oct 2012 06:02:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;If you all say that is fine, I can change.. We need to clearly document these 2 methods with its importance and what to do wrt this etc.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The class is marked private and used serverside only so its ok adding methods to the Interface?&lt;/p&gt;

&lt;p&gt;But if you feel strongly about it, keep it as is.  it looks a bit ugly but at least the uglyness is contained inside HRegionServer.&lt;/p&gt;

&lt;p&gt;Make a new patch and lets get it committed.  Thanks Anoop.&lt;/p&gt;
</comment>
                            <comment id="13483900" author="anoopsamjohn" created="Thu, 25 Oct 2012 05:01:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;This test, TestClientScannerRPCTimeout, looks good. Does it have to be in a separate class?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Stack the reason why I had done it is we need to have an impl of the HRS where I can introduce some sleep so as to make the socket timeouts at the client side.&lt;br/&gt;
conf.setStrings(HConstants.REGION_SERVER_IMPL, RegionServerWithScanTimeout.class.getName());&lt;br/&gt;
Didn&apos;t want to make this change in any of the existing test cases. So is it reasonable to be have the new test class?&lt;/p&gt;</comment>
                            <comment id="13483922" author="stack" created="Thu, 25 Oct 2012 06:15:37 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoopsamjohn&quot; class=&quot;user-hover&quot; rel=&quot;anoopsamjohn&quot;&gt;Anoop Sam John&lt;/a&gt; You going to make a final patch Anoop?  Lets get this in (Thanks).&lt;/p&gt;</comment>
                            <comment id="13483927" author="anoopsamjohn" created="Thu, 25 Oct 2012 06:23:49 +0000"  >&lt;p&gt;Yes Stack... I am working on this now.. Will give it today.. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
Sorry for the delay..&lt;/p&gt;</comment>
                            <comment id="13484175" author="hadoopqa" created="Thu, 25 Oct 2012 14:55:51 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12550776/5974_trunk-V3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12550776/5974_trunk-V3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 82 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3146//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13484264" author="stack" created="Thu, 25 Oct 2012 16:45:37 +0000"  >&lt;p&gt;Committed to trunk.  Thanks for keeping at it Anoop.&lt;/p&gt;</comment>
                            <comment id="13484276" author="lhofhansl" created="Thu, 25 Oct 2012 16:57:07 +0000"  >&lt;p&gt;This is not wire compatible, right? (if it would be I&apos;d pull it back into 0.94)&lt;/p&gt;</comment>
                            <comment id="13484334" author="stack" created="Thu, 25 Oct 2012 18:15:22 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; Correct. Adds a sequenceid on each next invocation via pb.&lt;/p&gt;</comment>
                            <comment id="13484369" author="hudson" created="Thu, 25 Oct 2012 18:54:49 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #3486 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/3486/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/3486/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5974&quot; title=&quot;Scanner retry behavior with RPC timeout on next() seems incorrect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5974&quot;&gt;&lt;del&gt;HBASE-5974&lt;/del&gt;&lt;/a&gt; Scanner retry behavior with RPC timeout on next() seems incorrect (Revision 1402214)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/OutOfOrderScannerNextException.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/ScannerCallable.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/RequestConverter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ClientProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/util/JVMClusterUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/protobuf/Client.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientScannerRPCTimeout.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13484420" author="hudson" created="Thu, 25 Oct 2012 19:43:36 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #236 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/236/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/236/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5974&quot; title=&quot;Scanner retry behavior with RPC timeout on next() seems incorrect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5974&quot;&gt;&lt;del&gt;HBASE-5974&lt;/del&gt;&lt;/a&gt; Scanner retry behavior with RPC timeout on next() seems incorrect (Revision 1402214)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/OutOfOrderScannerNextException.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/ScannerCallable.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/RequestConverter.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/protobuf/generated/ClientProtos.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/util/JVMClusterUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/protobuf/Client.proto&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientScannerRPCTimeout.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13486658" author="zjushch" created="Tue, 30 Oct 2012 05:18:13 +0000"  >&lt;p&gt;After the patch, if a next request is always timeout because too large, we will retry forever now, is it so?&lt;/p&gt;

&lt;p&gt;Without the patch, we do the retry in ServerCallable#ServerCallable, but now we do the retry in ClientScanner#next which is no retry number limit&lt;/p&gt;</comment>
                            <comment id="13486666" author="anoopsamjohn" created="Tue, 30 Oct 2012 05:38:13 +0000"  >&lt;p&gt;Chunhui&lt;br/&gt;
Not really.. I tested once more with change in test code so as to sleep all the times.&lt;br/&gt;
Got the exception at client side &lt;/p&gt;

&lt;p&gt;org.apache.hadoop.hbase.client.RetriesExhaustedException: Failed after attempts=10, exceptions:&lt;/p&gt;</comment>
                            <comment id="13486680" author="zjushch" created="Tue, 30 Oct 2012 06:20:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;I tested once more with change in test code so as to sleep all the times.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Anoop, if change as so, you can&apos;t produce my mentioned problem.&lt;/p&gt;

&lt;p&gt;Do the following change in the test case TestClientScannerRPCTimeout, you could find we will retry forever&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@Override
    &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Result[] next(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; scannerId, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; nbRows, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; callSeq) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!slept &amp;amp;&amp;amp; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.tableScannerId == scannerId &amp;amp;&amp;amp; seqNoToSleepOn == callSeq) {
        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CallSequenceOutOfOrderException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test&quot;&lt;/span&gt;);
        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.sleep(rpcTimeout + 500);
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// }
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// slept = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
&lt;/span&gt;      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;.next(scannerId, nbRows, callSeq);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wait for your answer, thanks&lt;/p&gt;</comment>
                            <comment id="13486681" author="zjushch" created="Tue, 30 Oct 2012 06:24:41 +0000"  >&lt;p&gt;The process is as the following:&lt;br/&gt;
1.A next request is very large, so first time it is failed because of timeout&lt;br/&gt;
2.The second time it is failed again because of CallSequenceOutOfOrderException&lt;br/&gt;
3.We will retry this next request again from the init startrow, so it is also very large and failed again&lt;br/&gt;
4.Repeated the above forever...&lt;/p&gt;</comment>
                            <comment id="13486684" author="anoopsamjohn" created="Tue, 30 Oct 2012 06:33:04 +0000"  >&lt;p&gt;Chunhui&lt;br/&gt;
Your above mentioned steps for that the above test case change is correct?&lt;br/&gt;
I think for that teh change to be &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Result[] next(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; scannerId, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; nbRows, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; callSeq) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; ( &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.tableScannerId == scannerId ) {
        &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
         &lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;.sleep(rpcTimeout + 500);
         } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (InterruptedException e) {
         }
        
      }
      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;.next(scannerId, nbRows, callSeq);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13486685" author="anoopsamjohn" created="Tue, 30 Oct 2012 06:34:51 +0000"  >&lt;p&gt;Your change was always throwing CallSequenceOutOfOrderException so that at client never the timeout happens. This will happen ideally??&lt;br/&gt;
As in your steps, #1 and #2 is correct. Then again the new call on the new Scanner it wont throw CallSequenceOutOfOrderException any way. But it can either be successfull or timed out at server. Why my change is doing is make it time out at client side always...&lt;/p&gt;</comment>
                            <comment id="13486686" author="zjushch" created="Tue, 30 Oct 2012 06:39:23 +0000"  >&lt;blockquote&gt;&lt;p&gt;Then again the new call on the new Scanner it wont throw CallSequenceOutOfOrderException any way, But it can either be successfull or timed out at server&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes,if it timed out again because this request is too large, in the next retry we will throw CallSequenceOutOfOrderException , is it so?&lt;/p&gt;</comment>
                            <comment id="13486696" author="anoopsamjohn" created="Tue, 30 Oct 2012 07:03:15 +0000"  >&lt;p&gt;I think I have done wrong in the test code change.. Yes your point is valid.. (checked with functional way ) It behaves like NSRE which is also like infinite retry...&lt;br/&gt;
Will open up a new JIRA and will solve the issue? &lt;/p&gt;</comment>
                            <comment id="13486731" author="zjushch" created="Tue, 30 Oct 2012 08:27:20 +0000"  >&lt;p&gt;@Annop&lt;/p&gt;

&lt;p&gt;I open a new issue &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7070&quot; title=&quot;Scanner may retry forever  after HBASE-5974&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7070&quot;&gt;&lt;del&gt;HBASE-7070&lt;/del&gt;&lt;/a&gt; and upload a simple patch, could you tak a view?&lt;/p&gt;</comment>
                            <comment id="13487488" author="zhihyu@ebaysf.com" created="Wed, 31 Oct 2012 03:23:51 +0000"  >&lt;p&gt;On 01/Jul/12 08:25, Anoop said:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I had added my reasoning ... Any thoughts?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There was a long period of inactivity till 18/Oct/12 when Stack picked this up.&lt;/p&gt;

&lt;p&gt;I don&apos;t see a second +1 since 18/Oct/12.&lt;/p&gt;

&lt;p&gt;Maybe I missed something.&lt;/p&gt;</comment>
                            <comment id="13487494" author="stack" created="Wed, 31 Oct 2012 03:46:30 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ted_yu&quot; class=&quot;user-hover&quot; rel=&quot;ted_yu&quot;&gt;Ted Yu&lt;/a&gt; The above makes no sense.  I think you are trying to find a violation of commit protocol but there is none.  Go reread what we all agreed.&lt;/p&gt;</comment>
                            <comment id="13490229" author="hudson" created="Sun, 4 Nov 2012 17:31:44 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #248 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/248/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/248/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7070&quot; title=&quot;Scanner may retry forever  after HBASE-5974&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7070&quot;&gt;&lt;del&gt;HBASE-7070&lt;/del&gt;&lt;/a&gt; Scanner may retry forever after &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5974&quot; title=&quot;Scanner retry behavior with RPC timeout on next() seems incorrect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5974&quot;&gt;&lt;del&gt;HBASE-5974&lt;/del&gt;&lt;/a&gt; (Revision 1405107)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestClientScannerRPCTimeout.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13775296" author="stack" created="Mon, 23 Sep 2013 18:31:12 +0000"  >&lt;p&gt;Marking closed.&lt;/p&gt;</comment>
                            <comment id="14131264" author="liushaohui" created="Fri, 12 Sep 2014 08:25:00 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;&lt;br/&gt;
This is a critical bug in scan in 0.94. We should fix it in 0.94.&lt;br/&gt;
What&apos;s your suggestion?&lt;br/&gt;
Thanks  &lt;/p&gt;</comment>
                            <comment id="14141055" author="hudson" created="Fri, 19 Sep 2014 18:38:01 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.94-JDK7 #183 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-JDK7/183/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-JDK7/183/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11957&quot; title=&quot;Backport to 0.94 HBASE-5974 Scanner retry behavior with RPC timeout on next() seems incorrect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11957&quot;&gt;&lt;del&gt;HBASE-11957&lt;/del&gt;&lt;/a&gt; Backport to 0.94 &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5974&quot; title=&quot;Scanner retry behavior with RPC timeout on next() seems incorrect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5974&quot;&gt;&lt;del&gt;HBASE-5974&lt;/del&gt;&lt;/a&gt; Scanner retry behavior with RPC timeout on next() seems incorrect. (Liu Shaohui original patch by Anoop Sam John) (larsh: rev 8f9faabf579c02476acb791c145f34baf49ac8f5)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/regionserver/RegionScannerHolder.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/util/JVMClusterUtil.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/ipc/HRegionInterface.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/client/ScannerCallable.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/CallSequenceOutOfOrderException.java&lt;/li&gt;
	&lt;li&gt;src/test/java/org/apache/hadoop/hbase/client/TestClientScannerRPCTimeout.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14141121" author="hudson" created="Fri, 19 Sep 2014 19:17:37 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.94 #1413 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94/1413/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94/1413/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11957&quot; title=&quot;Backport to 0.94 HBASE-5974 Scanner retry behavior with RPC timeout on next() seems incorrect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11957&quot;&gt;&lt;del&gt;HBASE-11957&lt;/del&gt;&lt;/a&gt; Backport to 0.94 &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5974&quot; title=&quot;Scanner retry behavior with RPC timeout on next() seems incorrect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5974&quot;&gt;&lt;del&gt;HBASE-5974&lt;/del&gt;&lt;/a&gt; Scanner retry behavior with RPC timeout on next() seems incorrect. (Liu Shaohui original patch by Anoop Sam John) (larsh: rev 8f9faabf579c02476acb791c145f34baf49ac8f5)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/regionserver/RegionScannerHolder.java&lt;/li&gt;
	&lt;li&gt;src/test/java/org/apache/hadoop/hbase/client/TestClientScannerRPCTimeout.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/util/JVMClusterUtil.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/client/ScannerCallable.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/ipc/HRegionInterface.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/CallSequenceOutOfOrderException.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14141209" author="hudson" created="Fri, 19 Sep 2014 20:12:22 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.94-security #524 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.94-security/524/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.94-security/524/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11957&quot; title=&quot;Backport to 0.94 HBASE-5974 Scanner retry behavior with RPC timeout on next() seems incorrect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11957&quot;&gt;&lt;del&gt;HBASE-11957&lt;/del&gt;&lt;/a&gt; Backport to 0.94 &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5974&quot; title=&quot;Scanner retry behavior with RPC timeout on next() seems incorrect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5974&quot;&gt;&lt;del&gt;HBASE-5974&lt;/del&gt;&lt;/a&gt; Scanner retry behavior with RPC timeout on next() seems incorrect. (Liu Shaohui original patch by Anoop Sam John) (larsh: rev 8f9faabf579c02476acb791c145f34baf49ac8f5)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;src/test/java/org/apache/hadoop/hbase/client/TestClientScannerRPCTimeout.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/client/ClientScanner.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/CallSequenceOutOfOrderException.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/client/ScannerCallable.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/regionserver/RegionScannerHolder.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/util/JVMClusterUtil.java&lt;/li&gt;
	&lt;li&gt;src/main/java/org/apache/hadoop/hbase/ipc/HRegionInterface.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                    <attachments>
                            <attachment id="12530697" name="5974_94-V4.patch" size="18791" author="zhihyu@ebaysf.com" created="Sun, 3 Jun 2012 17:04:44 +0000"/>
                            <attachment id="12531221" name="5974_trunk-V2.patch" size="30344" author="anoopsamjohn" created="Thu, 7 Jun 2012 05:54:02 +0000"/>
                            <attachment id="12550776" name="5974_trunk-V3.patch" size="33211" author="anoopsamjohn" created="Thu, 25 Oct 2012 13:58:54 +0000"/>
                            <attachment id="12530781" name="5974_trunk.patch" size="30270" author="anoopsamjohn" created="Mon, 4 Jun 2012 14:13:00 +0000"/>
                            <attachment id="12527369" name="HBASE-5974_0.94.patch" size="16849" author="anoopsamjohn" created="Tue, 15 May 2012 15:53:06 +0000"/>
                            <attachment id="12530023" name="HBASE-5974_94-V2.patch" size="18402" author="anoopsamjohn" created="Tue, 29 May 2012 09:59:33 +0000"/>
                            <attachment id="12530656" name="HBASE-5974_94-V3.patch" size="17791" author="anoopsamjohn" created="Sat, 2 Jun 2012 18:15:04 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 11 May 2012 16:59:15 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>238807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 12 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i00rtr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2440</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Adds a sequence id that is incremented on each Scanner#next invocation so we can distingush calls that arrive out of order.  Throws OutOfOrderScannerNextException when we encounter the latter case.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>