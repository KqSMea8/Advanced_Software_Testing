<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:29:00 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-5573/HBASE-5573.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-5573] Replace client ZooKeeper watchers by simple ZooKeeper reads</title>
                <link>https://issues.apache.org/jira/browse/HBASE-5573</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Some code in the package needs to read data in ZK. This could be done by a simple read, but is actually implemented with a watcher. This holds ZK resources.&lt;/p&gt;

&lt;p&gt;Fixing this could also be an opportunity to remove the need for the client to provide the master address and port.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12546256">HBASE-5573</key>
            <summary>Replace client ZooKeeper watchers by simple ZooKeeper reads</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="nkeywal">Nicolas Liochon</assignee>
                                    <reporter username="nkeywal">Nicolas Liochon</reporter>
                        <labels>
                    </labels>
                <created>Tue, 13 Mar 2012 16:26:51 +0000</created>
                <updated>Mon, 2 Jun 2014 23:58:04 +0000</updated>
                            <resolved>Wed, 23 May 2012 12:38:49 +0000</resolved>
                                    <version>0.95.2</version>
                                    <fixVersion>0.95.0</fixVersion>
                                    <component>Client</component>
                    <component>Zookeeper</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13228501" author="stack" created="Tue, 13 Mar 2012 16:35:28 +0000"  >&lt;p&gt;Hurray!&lt;/p&gt;</comment>
                            <comment id="13233721" author="nkeywal" created="Tue, 20 Mar 2012 20:40:49 +0000"  >&lt;p&gt;Patch to get a first feedback. &lt;/p&gt;

&lt;p&gt;Unfortunately, it&apos;s more a hack than anything else, because I&apos;am trying to keep the existing code &amp;amp; interface and not rewriting everything.&lt;/p&gt;

&lt;p&gt;Today HBase considers any ZK client as a client that will watch the values, and does not distinguish simple readers vs. watchers. To change this, I:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Split ZooKeeperWatcher in two classes, one ZooKeeperWatcher with the same responsibilities as today, and another, ZooKeeperHBaseNodes, that contains the hbase znode definition. ZooKeeperWatcher extends ZooKeeperHBaseNodes.&lt;/li&gt;
	&lt;li&gt;In ZKUtils, depending if a watch is involved or not, changed the expected type from ZooKeeperWatcher to ZooKeeperHBaseNodes.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That&apos;s not a hack yet. The issues are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;The client is supposed to wait if the root location znode is not yet created in ZK. I don&apos;t think that the trunk implementation actually works. But it&apos;s done with a watcher. As we don&apos;t want a watcher, I changed it to a loop.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;As HConnectionImplementation now uses a simple connection and not a Watcher, the deprecated interface (that returns a ZooKeeperWatcher) cannot reuse the internal connection to ZK, but must be duplicated.&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In trunk, the current dependencies are:&lt;/li&gt;
	&lt;li&gt;RecovableZooKeeper depends(contains) on ZooKeeper&lt;/li&gt;
	&lt;li&gt;ZooKeeper depends(contains) on ZooKeeperWatcher&lt;/li&gt;
	&lt;li&gt;ZooKeeperWatcher depends(contains) RecovableZooKeeper&lt;/li&gt;
	&lt;li&gt;ZKUtils depends(uses) RecovableZooKeeper and ZooKeeperWatcher&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;That makes it difficult to reuse any part of code without having a ZooKeeperWatcher. To be able to reuse it, what&apos;s happening when using a ZooKeeperHBaseNodes is that the underlying ZooKeeperWatcher is actually null.&lt;/p&gt;

&lt;p&gt;I still have to do a lot of renaming if we go for this approach.&lt;/p&gt;

&lt;p&gt;I had some failure that could be unrelated, but I haven&apos;t looked at them yet:&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.TestSplitTransactionOnCluster&lt;br/&gt;
org.apache.hadoop.hbase.io.encoding.TestLoadAndSwitchEncodeOnDisk&lt;/p&gt;</comment>
                            <comment id="13234097" author="stack" created="Wed, 21 Mar 2012 05:00:55 +0000"  >&lt;p&gt;ZooKeeperHBaseNodes =&amp;gt; ReadOnlyZooKeeper?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The client is supposed to wait if the root location znode is not yet created in ZK.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Does it have to?  We&apos;re talking of removing &lt;del&gt;ROOT&lt;/del&gt; for 0.96?  You say you converted it to a loop?  In the loop it just reads zk looking for root to show up?  That seems fine.&lt;/p&gt;

&lt;p&gt;bq, As HConnectionImplementation now uses a simple connection and not a Watcher, the deprecated interface (that returns a ZooKeeperWatcher) cannot reuse the internal connection to ZK, but must be duplicated.&lt;/p&gt;

&lt;p&gt;This seems fine too.  You mean that the simple connection and the watcher are distinct?  Thats ok.  We only make the watcher if someone asks for it?&lt;/p&gt;

&lt;p&gt;The below is crazy:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
In trunk, the current dependencies are:
RecovableZooKeeper depends(contains) on ZooKeeper
ZooKeeper depends(contains) on ZooKeeperWatcher
ZooKeeperWatcher depends(contains) RecovableZooKeeper
ZKUtils depends(uses) RecovableZooKeeper and ZooKeeperWatcher
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is before your patch?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;ZooKeeper depends(contains) on ZooKeeperWatcher&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t understand? How does zk contain a zkw?  That seems wonky.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;ZKUtils depends(uses) RecovableZooKeeper and ZooKeeperWatcher&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It should only use rzk?  Now zkw.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;To be able to reuse it, what&apos;s happening when using a ZooKeeperHBaseNodes is that the underlying ZooKeeperWatcher is actually null.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry.  Why does ReadOnlyZooKeeper have to have a zkw?  Because rzk has one?  Can you fix that?&lt;/p&gt;

&lt;p&gt;Good stuff N.&lt;/p&gt;
</comment>
                            <comment id="13234098" author="stack" created="Wed, 21 Mar 2012 05:00:57 +0000"  >&lt;p&gt;ZooKeeperHBaseNodes =&amp;gt; ReadOnlyZooKeeper?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The client is supposed to wait if the root location znode is not yet created in ZK.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Does it have to?  We&apos;re talking of removing &lt;del&gt;ROOT&lt;/del&gt; for 0.96?  You say you converted it to a loop?  In the loop it just reads zk looking for root to show up?  That seems fine.&lt;/p&gt;

&lt;p&gt;bq, As HConnectionImplementation now uses a simple connection and not a Watcher, the deprecated interface (that returns a ZooKeeperWatcher) cannot reuse the internal connection to ZK, but must be duplicated.&lt;/p&gt;

&lt;p&gt;This seems fine too.  You mean that the simple connection and the watcher are distinct?  Thats ok.  We only make the watcher if someone asks for it?&lt;/p&gt;

&lt;p&gt;The below is crazy:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
In trunk, the current dependencies are:
RecovableZooKeeper depends(contains) on ZooKeeper
ZooKeeper depends(contains) on ZooKeeperWatcher
ZooKeeperWatcher depends(contains) RecovableZooKeeper
ZKUtils depends(uses) RecovableZooKeeper and ZooKeeperWatcher
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is before your patch?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;ZooKeeper depends(contains) on ZooKeeperWatcher&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t understand? How does zk contain a zkw?  That seems wonky.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;ZKUtils depends(uses) RecovableZooKeeper and ZooKeeperWatcher&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It should only use rzk?  Now zkw.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;To be able to reuse it, what&apos;s happening when using a ZooKeeperHBaseNodes is that the underlying ZooKeeperWatcher is actually null.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry.  Why does ReadOnlyZooKeeper have to have a zkw?  Because rzk has one?  Can you fix that?&lt;/p&gt;

&lt;p&gt;Good stuff N.&lt;/p&gt;
</comment>
                            <comment id="13234099" author="stack" created="Wed, 21 Mar 2012 05:05:46 +0000"  >&lt;p&gt;Patch makes sense.  No need of copyright line above license when you create next version of patch.  ZKHBaseNodes needs javadoc.&lt;/p&gt;

&lt;p&gt;Should this be in ZKUtils and not in ROZK?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-comment&quot;&gt;// Used by ZKUtil:waitForZKConnectionIfAuthenticating to wait &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; SASL
&lt;/span&gt;+  &lt;span class=&quot;code-comment&quot;&gt;// negotiation to complete
&lt;/span&gt;+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CountDownLatch saslLatch = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CountDownLatch(1);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I see.  ROZK has a RZK.  Can RZK have a ZooKeeper only?&lt;/p&gt;

&lt;p&gt;Looks good.  Looks like hard work.&lt;/p&gt;
</comment>
                            <comment id="13234254" author="nkeywal" created="Wed, 21 Mar 2012 10:20:29 +0000"  >&lt;p&gt;For ZK and ZKW dependency, prefixing zk for the ZooKeeper api objects and hb for the HBase objects:&lt;br/&gt;
a zk.ZooKeeper can be created with a zk.Watcher as a parameter for the constructor. a hb.ZooKeeperWatcher implements the zk.Watcher interface. So we have:&lt;/p&gt;

&lt;p&gt;hb.ZooKeeperWatcher implements zk.ZooKeeper.&lt;br/&gt;
hb.ZooKeeperWatcher contains hb.RecoverableZooKeeper&lt;br/&gt;
hb.RecoverableZooKeeper contains zk.ZooKeeper&lt;br/&gt;
zk.ZooKeeper contains (hb.ZooKeeperWatcher implements zk.ZooKeeper)&lt;/p&gt;

&lt;p&gt;loop done.&lt;/p&gt;

&lt;p&gt;It was like this before my patch. After my patch there are two cases:&lt;br/&gt;
1) As above&lt;br/&gt;
2) for ZooKeeperHBaseNodes, the watcher is actually &quot;null&quot;, so it becomes:&lt;br/&gt;
hb.ZooKeeperHBaseNodes contains hb.RecoverableZooKeeper&lt;br/&gt;
hb.RecoverableZooKeeper contains zk.ZooKeeper&lt;br/&gt;
zk.ZooKeeper contains null&lt;/p&gt;

&lt;p&gt;It allows to share the code, but it makes it more complex.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;I see. ROZK has a RZK. Can RZK have a ZooKeeper only?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, but it would lead to some code duplication and we would lose the recoverable feature (or we would need to duplicate it as well). &lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;ZooKeeperHBaseNodes =&amp;gt; ReadOnlyZooKeeper&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It&apos;s not really a readonly zookeeper: you can write with it. &lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;Looks good&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ok, I am gonna finish it with this approach then. &lt;/p&gt;</comment>
                            <comment id="13234399" author="stack" created="Wed, 21 Mar 2012 14:59:46 +0000"  >&lt;blockquote&gt;&lt;p&gt;a zk.ZooKeeper can be created with a zk.Watcher as a parameter for the constructor. a hb.ZooKeeperWatcher implements the zk.Watcher interface.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Oh, so ZK takes a Watcher Interface or Instance, not necessarily a ZKW (but I suppose in essence it the same thing).  Is ZKW doing everything, not just Watching?   If so, would fixing this help?&lt;/p&gt;

&lt;p&gt;On&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
hb.ZooKeeperWatcher &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; zk.ZooKeeper.
hb.ZooKeeperWatcher contains hb.RecoverableZooKeeper
hb.RecoverableZooKeeper contains zk.ZooKeeper
zk.ZooKeeper contains (hb.ZooKeeperWatcher &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; zk.ZooKeeper)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I see:&lt;/p&gt;

&lt;p&gt;ZKW implements ZK.Watcher (I dont&apos; see how it implements ZK)&lt;br/&gt;
ZKW has a RZK&lt;/p&gt;

&lt;p&gt;This seems way broke Nicolas: &quot;zk.ZooKeeper contains (hb.ZooKeeperWatcher implements zk.ZooKeeper)&quot;&lt;/p&gt;

&lt;p&gt;Ok on ROZK not being a good name.  HZK?  Thats kinda lame but generic enough for a base r/w zk&apos;er?  Or DumbZK or NoWatchZK.  Or InAndOutZK (smile).&lt;/p&gt;

</comment>
                            <comment id="13234413" author="nkeywal" created="Wed, 21 Mar 2012 15:17:47 +0000"  >&lt;p&gt;bq; This seems way broke Nicolas: &quot;zk.ZooKeeper contains (hb.ZooKeeperWatcher implements zk.ZooKeeper)&quot;&lt;br/&gt;
I wanted to say that in ZK API, you want give a Watcher as a parameter to the ZooKeeper object. In HBase, this watcher is the ZooKeeperWatcher. And this ZooKeeperWatcher  contains the RecoverableZK that contains the ZooKeeper object, so we have a loop.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Is ZKW doing everything, not just Watching? If so, would fixing this help?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes it does everything. With the split there is now a new object when we just want to read/write.&lt;/p&gt;

&lt;p&gt;For the name, let&apos;s go for NoWatchZK.&lt;/p&gt;

&lt;p&gt;I&apos;m currently testing the patch. There is still an issue with stuff like ZKAssign.getData: it sets a watcher, but is it really needed?&lt;/p&gt;</comment>
                            <comment id="13234462" author="nkeywal" created="Wed, 21 Mar 2012 16:15:51 +0000"  >&lt;p&gt;Oops; there is another &lt;del&gt;big&lt;/del&gt; issue: you need a watcher if you want to get the info on session expiry... So isolating it is not possible. That breaks the patch it seems. &lt;/p&gt;</comment>
                            <comment id="13235007" author="nkeywal" created="Wed, 21 Mar 2012 20:46:15 +0000"  >&lt;p&gt;v6. We keep the watcher structure, but there is no wach set on data during the connection creation or the startup + cleanup. Less ambitious, simpler, smaller.&lt;/p&gt;</comment>
                            <comment id="13235057" author="hadoopqa" created="Wed, 21 Mar 2012 21:36:39 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12519310/5573.v6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12519310/5573.v6.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 12 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 4 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.io.hfile.TestForceCacheImportantBlocks&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1242//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1242//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1242//artifact/trunk/patchprocess/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1242//artifact/trunk/patchprocess/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1242//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1242//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13236053" author="zhihyu@ebaysf.com" created="Thu, 22 Mar 2012 21:27:46 +0000"  >&lt;p&gt;The failed test was due to OOME.&lt;br/&gt;
Patch v6 looks good.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        }&lt;span class=&quot;code-keyword&quot;&gt;finally&lt;/span&gt; {
+          zkw.close();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please insert a space between } and finally.&lt;/p&gt;

&lt;p&gt;Run &apos;arc lint&apos; to see all formatting warnings.&lt;/p&gt;</comment>
                            <comment id="13236375" author="stack" created="Fri, 23 Mar 2012 06:03:27 +0000"  >&lt;p&gt;This is radical in the ReplicationAdmin:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.exit(1);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is a client only?  Maybe get the Abortable the this.connection is using?  Would that make sense?&lt;/p&gt;

&lt;p&gt;Hmm... you do it in hbasefsck too.&lt;/p&gt;

&lt;p&gt;Why not add a create method to ZooKeeperWatcher that takes a name, conf, and Abortable?  Or is that a ZKW Constructor altogether?&lt;/p&gt;

&lt;p&gt;Creating the ZKW each time is probably expensive, takes time?  But its ok in ReplicationAdmin and in HBaseFSCK I would say?&lt;/p&gt;

&lt;p&gt;In testing, do we want to rethrow what caused an abort?  Perhaps rethrow as a RuntimeException?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+        @Override &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void abort(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; why, Throwable e) {}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;N, can you explain more about what is going on here.  How is it that we are not taking a Watcher when we are creating a ZKW?   Because we don&apos;t call start?  (If so, that&apos;d be &apos;elegant&apos; solution)&lt;/p&gt;

</comment>
                            <comment id="13236499" author="nkeywal" created="Fri, 23 Mar 2012 10:36:25 +0000"  >&lt;blockquote&gt;&lt;p&gt;System.exit(1);&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Actually is was already like that in hbasefsck, I replaced a tracker by a watcher that does not watch to read the data, that&apos;s all.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Why not add a create method to ZooKeeperWatcher that takes a name, conf, and Abortable? Or is that a ZKW Constructor altogether?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, the question is what to do when you&apos;re asked to abort. Here I reused the approach in hbasefsck, just exit.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;N, can you explain more about what is going on here. How is it that we are not taking a Watcher when we are creating a ZKW? Because we don&apos;t call start? (If so, that&apos;d be &apos;elegant&apos; solution)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;A ZKW is a watcher. When you create a ZKW, you create a RecoverableZooKeeper with yourself as a parameter. Pseudo code is:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;class RecoverableZooKeeper {
 ZooKeeper zk;
 RecoverableZooKeeper (Watcher w){ zk=new ZooKeeper(w) }
}

class ZooKeeperWatcher implements Watcher  {
 RecoverableZooKeeper rz;
 ZooKeeperWatcher (){ rz = new RecoverableZooKeeper(this); }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using &apos;this&apos; in a constructor is looking for problems but it works in this case (remember, that&apos;s the existing code, not mine &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ). Basically all these classes are very strongly coupled. When I tried to partially decouple them it exploded in my hands because you anyway need a watcher to manage the session expiry stuff. I don&apos;t have a middle solution here: it&apos;s either a full rewriting with a lot of fun to keep the existing interfaces for backward compatibility or nothing.&lt;/p&gt;

&lt;p&gt;So in the final patch I&apos;ve just done some cleanup (removed the last usage of getZooKeeperWatcher) and the usage of any watcher. So there&apos;s no proof in the code, just that actually all the functions we use on the client don&apos;t use a watcher. Anyway, they have a session in the ZK servers so they are expensive. But thanks to #5399 the session on ZK will be closed after 5 minutes. So if you have an architecture with clients coming up and down, you will be able to increase the number of clients. &lt;/p&gt;

&lt;p&gt;Three last comments:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;one of the design issue is that there ate two API: you can use directly any of the ZKW, RZK, RK object or you can go through the static ZKUtils. May be the intermediate solutions lie around this area.&lt;/li&gt;
	&lt;li&gt;even if the existing design should not be shown to innocent scholars it&apos;s not that terrible, because it&apos;s small. I didn&apos;t really like my first patches because I was adding more classes and complexity without fixing the design.&lt;/li&gt;
	&lt;li&gt;On the long term, I think that it actually make sense to have a watcher in the client. It&apos;s not about the previous code: The previous code was not really using watchers. The previous code was setting watchers without using them. The new code (after #5399 and #5573) does not use or set watchers. But when you have a fat client architecture like we have, it makes sense to share some global state information, and it scales better when the info is pushed vs. pulled. Having said that, there are many questions left: possible issues in how expensive it is with ZooKeeper today, may be ZooKeeper is not really designed for this (it&apos;s not really a global coordination work, as the client would be readers only) and so on. FWIW, it seems that the current limit is around 10K sessions in ZK:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;panelContent&quot;&gt;
&lt;p&gt;Patrick Hunt / Nov 18, 2010; 8:57pm&lt;br/&gt;
Re: number of clients/watchers&lt;/p&gt;

&lt;p&gt;fyi: I haven&apos;t heard of anyone running over 10k sessions. I&apos;ve tried 20k before and had issues. &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;...&amp;#93;&lt;/span&gt;&lt;br/&gt;
A session is represented by a &quot;ZooKeeper&quot; object. One session per object. So if you have 10 client hosts each creating it&apos;s own ZooKeeper instance you&apos;ll have 10 sessions. This is regardless of the number of znodes, watches, etc... Watches were designed to be lightweight and you can maintain a large number of them. (25million spread across 500 sessions in my example)&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There were also a discussion on ZK mailing list about lightweith sessions. &lt;a href=&quot;http://markmail.org/message/cyow2xkneh2t3juc&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://markmail.org/message/cyow2xkneh2t3juc&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="13237006" author="stack" created="Fri, 23 Mar 2012 20:16:56 +0000"  >&lt;p&gt;Ok on your your just redoing what hbasefsck was doing anyways.&lt;/p&gt;

&lt;p&gt;Regards the pseudo-code you drew out for me where you show how RZKW relates to ZKW relates to ZK, it makes my head hurt.  If the &apos;Watcher&apos; implementation was broken out into a standalone class that might help some but my guess is that that&apos;d be big mess to untangle (&quot;...exploded in my hands&quot;).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So there&apos;s no proof in the code, just that actually all the functions we use on the client don&apos;t use a watcher.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Excellent&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;one of the design issue is that there ate two API: you can use directly any of the ZKW, RZK, RK object or you can go through the static ZKUtils. May be the intermediate solutions lie around this area.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;OK.  Any recommendation you can make here having been down deep in this code?  We should make everyone go via ZKUtils and via ZKAssign, etc., and clean up any other errant use of zkw directly?  Would that be good to do?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But when you have a fat client architecture like we have, it makes sense to share some global state information, and it scales better when the info is pushed vs. pulled.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;d like to get to the case where we have not watchers &amp;#8211; which this patch is finishing &amp;#8211; and then have the above discussion subsequently.  I&apos;d think its more scalable if clients do not keep open sessions and keep watchers.  But we can talk about that some other time after we&apos;ve let go at least of watchers.&lt;/p&gt;

&lt;p&gt;Let me look at your last patch.&lt;/p&gt;</comment>
                            <comment id="13237089" author="stack" created="Fri, 23 Mar 2012 20:35:42 +0000"  >&lt;p&gt;Patch looks good.  Only question is the one I had yesterday where in HBaseTestingUtility#getZooKeeperWatcher, if its aborted, it does nothing but this ZKW is being used by test code so I&apos;d think if an abort, it shouldn&apos;t be suppressed &amp;#8211; rather we should complain loudly?  Rethrow as RuntimeException?&lt;/p&gt;

&lt;p&gt;Do you want to be consistent?  You call methods getZKW most times and then getZooKeeperWatcher in this test code (I prefer the latter).&lt;/p&gt;</comment>
                            <comment id="13237143" author="nkeywal" created="Fri, 23 Mar 2012 21:20:47 +0000"  >&lt;blockquote&gt;&lt;p&gt;OK. Any recommendation you can make here having been down deep in this code? We should make everyone go via ZKUtils and via ZKAssign, etc., and clean up any other errant use of zkw directly? Would that be good to do?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It would do no harm as it&apos;s not good to have two APIs. I could be a first step to change the internal design. I haven&apos;t checked the impact.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do you want to be consistent? You call methods getZKW most times and then getZooKeeperWatcher in this test code (I prefer the latter).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ok, I will change all this to getZooKeeperWatcher.&lt;/p&gt;</comment>
                            <comment id="13240373" author="hadoopqa" created="Wed, 28 Mar 2012 12:32:54 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12520262/5573.v7.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12520262/5573.v7.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 12 new or modified tests.&lt;/p&gt;

&lt;p&gt;    -1 patch.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1327//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1327//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13240453" author="hadoopqa" created="Wed, 28 Mar 2012 14:46:49 +0000"  >&lt;p&gt;-1 overall.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12520266/5573.v8.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12520266/5573.v8.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    +1 @author.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    +1 tests included.  The patch appears to include 12 new or modified tests.&lt;/p&gt;

&lt;p&gt;    +1 javadoc.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    +1 javac.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    -1 findbugs.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    +1 release audit.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;     -1 core tests.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.coprocessor.TestMasterObserver&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestImportTsv&lt;br/&gt;
                  org.apache.hadoop.hbase.mapred.TestTableMapReduce&lt;br/&gt;
                  org.apache.hadoop.hbase.mapreduce.TestHFileOutputFormat&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1328//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1328//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1328//artifact/trunk/patchprocess/newPatchFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1328//artifact/trunk/patchprocess/newPatchFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/1328//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/1328//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13242117" author="nkeywal" created="Fri, 30 Mar 2012 07:02:21 +0000"  >&lt;p&gt;It can be committed imho. &lt;/p&gt;</comment>
                            <comment id="13242594" author="zhihyu@ebaysf.com" created="Fri, 30 Mar 2012 17:47:07 +0000"  >&lt;p&gt;I ran TestMasterObserver with patch v8 and didn&apos;t see failure.&lt;/p&gt;

&lt;p&gt;Integrated to trunk.&lt;/p&gt;

&lt;p&gt;Thanks for the patch, N.&lt;/p&gt;

&lt;p&gt;Thanks for the review, Stack.&lt;/p&gt;</comment>
                            <comment id="13242702" author="hudson" created="Fri, 30 Mar 2012 20:26:47 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #2699 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/2699/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/2699/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5573&quot; title=&quot;Replace client ZooKeeper watchers by simple ZooKeeper reads&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5573&quot;&gt;&lt;del&gt;HBASE-5573&lt;/del&gt;&lt;/a&gt; Replace client ZooKeeper watchers by simple ZooKeeper reads (N Keywal) (Revision 1307549)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationAdmin.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/TestZooKeeper.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/client/TestHCM.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13243042" author="hudson" created="Sat, 31 Mar 2012 05:54:10 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-security #155 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-security/155/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-security/155/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5573&quot; title=&quot;Replace client ZooKeeper watchers by simple ZooKeeper reads&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5573&quot;&gt;&lt;del&gt;HBASE-5573&lt;/del&gt;&lt;/a&gt; Replace client ZooKeeper watchers by simple ZooKeeper reads (N Keywal) (Revision 1307549)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
tedyu : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/client/replication/ReplicationAdmin.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/util/HBaseFsck.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/main/java/org/apache/hadoop/hbase/zookeeper/ZKUtil.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/TestZooKeeper.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/client/TestHCM.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestSplitTransactionOnCluster.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13775204" author="stack" created="Mon, 23 Sep 2013 18:30:58 +0000"  >&lt;p&gt;Marking closed.&lt;/p&gt;</comment>
                            <comment id="14015817" author="stack" created="Mon, 2 Jun 2014 20:03:40 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkeywal&quot; class=&quot;user-hover&quot; rel=&quot;nkeywal&quot;&gt;Nicolas Liochon&lt;/a&gt; So we didn&apos;t complete undo watching in the client?  What should the release not be here?  Thanks.&lt;/p&gt;</comment>
                            <comment id="14016062" author="mantonov" created="Mon, 2 Jun 2014 23:58:04 +0000"  >&lt;p&gt;linking as there was a discussion on that CatalogTracking issue.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12524803">HBASE-4495</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12542599">HBASE-5399</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12519119" name="5573.v1.patch" size="38127" author="nkeywal" created="Tue, 20 Mar 2012 20:42:24 +0000"/>
                            <attachment id="12519123" name="5573.v2.patch" size="46648" author="nkeywal" created="Tue, 20 Mar 2012 20:44:09 +0000"/>
                            <attachment id="12519260" name="5573.v4.patch" size="88399" author="nkeywal" created="Wed, 21 Mar 2012 16:19:36 +0000"/>
                            <attachment id="12519310" name="5573.v6.patch" size="15249" author="nkeywal" created="Wed, 21 Mar 2012 20:46:14 +0000"/>
                            <attachment id="12520262" name="5573.v7.patch" size="16068" author="nkeywal" created="Wed, 28 Mar 2012 12:23:22 +0000"/>
                            <attachment id="12520266" name="5573.v8.patch" size="15912" author="nkeywal" created="Wed, 28 Mar 2012 13:56:40 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 13 Mar 2012 16:35:28 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>231414</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 28 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hto7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>102069</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>