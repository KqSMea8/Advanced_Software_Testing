<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:40:16 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-6833/HBASE-6833.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-6833] [WINDOWS] Java Milisecond precision on Windows</title>
                <link>https://issues.apache.org/jira/browse/HBASE-6833</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;HBase relies on the system clock obtained by System.currentTimeMilis() to supply the version, if it is not provided by the client in Put&apos;s and Delete&apos;s. At &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6832&quot; title=&quot;[WINDOWS] Tests should use explicit timestamp for Puts, and not rely on implicit RS timing  &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6832&quot;&gt;&lt;del&gt;HBASE-6832&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6826&quot; title=&quot;[WINDOWS] TestFromClientSide failures&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6826&quot;&gt;&lt;del&gt;HBASE-6826&lt;/del&gt;&lt;/a&gt;, we discovered that on some platforms, the milis clock might not be updated every milisecond, which might cause unexpected behavior. We also did some preliminary analysis there.&lt;br/&gt;
In this issue, we can further discuss and inspect whether it is a problem for main target platforms and if so what can be done.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12608179">HBASE-6833</key>
            <summary>[WINDOWS] Java Milisecond precision on Windows</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12608153">HBASE-6814</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="enis">Enis Soztutar</assignee>
                                    <reporter username="enis">Enis Soztutar</reporter>
                        <labels>
                            <label>windows</label>
                    </labels>
                <created>Wed, 19 Sep 2012 01:14:22 +0000</created>
                <updated>Tue, 14 Jul 2015 02:27:28 +0000</updated>
                                            <version>0.94.3</version>
                    <version>0.95.2</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="13458371" author="stack" created="Wed, 19 Sep 2012 03:08:50 +0000"  >&lt;p&gt;This one is a bit of a bummer.  As you suggest elsewhere, in tests, could user EnvironmentEdge thing that updates each time its called but what happens when you run in production?  You are going to get odd results.&lt;/p&gt;

&lt;p&gt;This does bring to the fore how much we presume a forward moving clock (Those spanner time servers with their aerials for GPS and atomic clock cards start to make a bit more sense now) &lt;/p&gt;</comment>
                            <comment id="13458382" author="eclark" created="Wed, 19 Sep 2012 03:30:31 +0000"  >&lt;p&gt;Windows can have a more accurate normal system clock however it causes a lot of cpu load so is not always done:  See: &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd757624%28VS.85%29.aspx&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://msdn.microsoft.com/en-us/library/dd757624%28VS.85%29.aspx&lt;/a&gt; Calling that works but it&apos;s frowned upon unless you really need timers that are &amp;lt; 10 ms resolution.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://blogs.oracle.com/dholmes/entry/inside_the_hotspot_vm_clocks&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://blogs.oracle.com/dholmes/entry/inside_the_hotspot_vm_clocks&lt;/a&gt;&lt;br/&gt;
Seems to suggest that using the System.nanoTime will give the correct time as determined by QueryPerformanceFrequency.  So our timing can use nanoTime converted to ms.  This will only work on modernish hardware and modernish windows.  However I think that&apos;s probably good enough.&lt;/p&gt;

&lt;p&gt;That still leaves the timers.  Are there any cases where our timers must be 1ms accurate ?  If it is then the above link seems to suggest that setting a timer that&apos;s not a multiple of 10ms will cause java to set the clock timer to 1 ms  (though on older hardware I seem to remember that the api is ignored).&lt;/p&gt;</comment>
                            <comment id="13458385" author="stack" created="Wed, 19 Sep 2012 03:34:06 +0000"  >&lt;p&gt;So a WindowsEnvironmentEdge backed by nano time?&lt;/p&gt;</comment>
                            <comment id="13458392" author="eclark" created="Wed, 19 Sep 2012 03:51:06 +0000"  >&lt;p&gt;Yeah.  nanoTime seems like it would work.&lt;/p&gt;

&lt;p&gt;Xp and earlier are the ones I remember having 15ms times; I don&apos;t remember the server versions as well since I never had to deal with them.  So I&apos;m kind of interested in what environment Enis is seeing 10ms+&lt;/p&gt;</comment>
                            <comment id="13458419" author="lhofhansl" created="Wed, 19 Sep 2012 05:24:23 +0000"  >&lt;p&gt;We need to keep in mind then that nanotime does not reflect any absolute time and is only supposed to be used for time-differences. As long we make sure it&apos;ll only ever used for that, we should be OK.&lt;/p&gt;

&lt;p&gt;I.e. we could not take nanotime, and use that for the persistent KV timestamps.&lt;br/&gt;
(Going the documentation and what I have read elsewhere)&lt;/p&gt;</comment>
                            <comment id="13458439" author="eclark" created="Wed, 19 Sep 2012 06:07:58 +0000"  >&lt;p&gt;Would taking a currentTimeMillis and the nanoTime at class instantiation allow us to create an always increasing wall clock time.&lt;/p&gt;

&lt;p&gt;we would have a startNano and a startMilli&lt;/p&gt;

&lt;p&gt;return startMili + toMilli(startNano - System.nanoTime());&lt;/p&gt;


&lt;p&gt;That has the potential to drift a little bit from wall time but should still be pretty close.  And if we really need to stay close to wall time we can have a repeating timer that resets startMilli and startNano.&lt;/p&gt;</comment>
                            <comment id="13458759" author="lhofhansl" created="Wed, 19 Sep 2012 15:39:03 +0000"  >&lt;p&gt;Probably. I do not know how long nano time would be valid for comparison. (Presumably the problem is eventual wrap around, but I am just assuming).&lt;/p&gt;

&lt;p&gt;I&apos;ll ask some of the JVM guys we recently hired.&lt;/p&gt;</comment>
                            <comment id="13458930" author="ram_krish" created="Wed, 19 Sep 2012 18:29:35 +0000"  >&lt;p&gt;I recently raised an issue &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6784&quot; title=&quot;TestCoprocessorScanPolicy is sometimes flaky when run locally&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6784&quot;&gt;&lt;del&gt;HBASE-6784&lt;/del&gt;&lt;/a&gt; again a testcase failure just because the Puts got the same timestamp and the test was failing randomly.&lt;br/&gt;
Based on the discussion over here i can provide a patch for that HBASe-6784.&lt;/p&gt;</comment>
                            <comment id="13458949" author="enis" created="Wed, 19 Sep 2012 18:44:14 +0000"  >&lt;p&gt;Wow, it seems that great minds think alike &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; &lt;br/&gt;
I had actually done a ms + ns environment edge for experimentation. Let me attach it.&lt;/p&gt;</comment>
                            <comment id="13459040" author="enis" created="Wed, 19 Sep 2012 20:10:36 +0000"  >&lt;p&gt;Attaching a class, which does adjust the milis time by using the more precise nanoTime() counters. EnvironmentEgde.currentTimeMilis() is how HBase obtains the time from the system. The default implementation just returns System.currentTimeMilis().&lt;br/&gt;
This is not intended for inclusion, but just for experimentation. This seems to do a decent job of providing more &quot;incremental&quot; updates to the system milis clock, but there are a couple of problems, like synchronization, and different CPUs returning inconsistent nanoTime()&apos;s. Note that even if we inject this to the test, it still fails.&lt;/p&gt;</comment>
                            <comment id="13462152" author="lhofhansl" created="Mon, 24 Sep 2012 21:20:01 +0000"  >&lt;p&gt;@Ram: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6784&quot; title=&quot;TestCoprocessorScanPolicy is sometimes flaky when run locally&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6784&quot;&gt;&lt;del&gt;HBASE-6784&lt;/del&gt;&lt;/a&gt;. That&apos;s a badly written test. I wrote it &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  I will fix it. No test should make any (implicit or explicit assumptions about the progression of time).&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12608178">HBASE-6832</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12657206">HBASE-8927</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12844853">HBASE-14070</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12545788" name="NanoSecondPrecisionEnvironmentEdge.java" size="2282" author="enis" created="Wed, 19 Sep 2012 20:10:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 19 Sep 2012 03:08:50 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>242466</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 12 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02v3b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>14638</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>