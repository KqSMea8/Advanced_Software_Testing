<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:01:48 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2426/HBASE-2426.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2426] [Transactional Contrib] Introduce quick scanning row-based secondary indexes</title>
                <link>https://issues.apache.org/jira/browse/HBASE-2426</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;RowBasedIndexSpecification is a specialized IndexSpecification class for creating row-based secondary index tables. Base table rows with the same indexed column value have their row keys stored as column qualifiers on the same secondary index table row. The key for that row is the indexed column value from the base table. This allows to avoid expensive secondary index table scans and provides faster access for applications such as foreign key indexing or queries such as &quot;find all table A rows whose familyA:columnB value is X&quot;. RowBasedIndexSpecification indices can be scanned using the API on RowBasedIndexedTable. The metadata for RowBasedIndexSpecification differ from IndexSpecification in that:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Only a single base table column can be indexed per RowBasedIndexSpecification. No additional columns are put in the index table.&lt;br/&gt;
and &lt;/li&gt;
	&lt;li&gt;RowBasedIndexKeyGenerator, which constructs the index-row-key from the indexed column value in the original column, is always used.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;For a simple RowBasedIndexSpecification example, look at the TestRowBasedIndexedTable unit test in org.apache.hadoop.hbase.client.tableIndexed.&lt;/p&gt;

&lt;p&gt;To enable RowBasedIndexSpecification indexing, modify hbase-site.xml to turn on the&lt;br/&gt;
IndexedRegionServer.  This is done by setting&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;hbase.regionserver.class to org.apache.hadoop.hbase.ipc.IndexedRegionInterface and&lt;/li&gt;
	&lt;li&gt;hbase.regionserver.impl to org.apache.hadoop.hbase.regionserver.tableindexed.RowBasedIndexedRegionServer&lt;/li&gt;
&lt;/ul&gt;
</description>
                <environment></environment>
        <key id="12461541">HBASE-2426</key>
            <summary>[Transactional Contrib] Introduce quick scanning row-based secondary indexes</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="gstathis">George P. Stathis</reporter>
                        <labels>
                            <label>moved_from_0_20_5</label>
                    </labels>
                <created>Thu, 8 Apr 2010 16:09:27 +0000</created>
                <updated>Sun, 5 Jun 2011 10:04:16 +0000</updated>
                            <resolved>Thu, 5 May 2011 06:58:12 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="12854973" author="gstathis" created="Thu, 8 Apr 2010 16:14:50 +0000"  >&lt;p&gt;Attaching branch patch for review. When cleared and finalized, I will port it to the maven trunk as well.&lt;/p&gt;</comment>
                            <comment id="12854974" author="gstathis" created="Thu, 8 Apr 2010 16:16:33 +0000"  >&lt;p&gt;This patch builds right on top of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2286&quot; title=&quot;[Transactional Contrib] Correctly handle or avoid cases where writes occur in same millisecond&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2286&quot;&gt;&lt;del&gt;HBASE-2286&lt;/del&gt;&lt;/a&gt;. So the latter is required (it&apos;s already committed so it should not be a problem as long as folks SVN up the latest from the branch).&lt;/p&gt;</comment>
                            <comment id="12857469" author="clint.morgan" created="Thu, 15 Apr 2010 18:28:01 +0000"  >&lt;p&gt;Hey George, thanks for the patch.&lt;/p&gt;

&lt;p&gt;I have a question about how this improves performance over an&lt;br/&gt;
index layout similar to the SimpleIndexKeyGenerator. I have the same&lt;br/&gt;
requirements you mention above: namely I&apos;d like to quickly finda all&lt;br/&gt;
rows in table A which have a value for COL1 of &apos;X&apos;.&lt;/p&gt;

&lt;p&gt;I build my index keys like &amp;lt;col1-value&amp;gt;&amp;lt;sep&amp;gt;&amp;lt;base-row-id&amp;gt; where &amp;lt;sep&amp;gt;&lt;br/&gt;
is a special byte sequence that does not occur in column values or row&lt;br/&gt;
keys. (Actually it can occur, if so I just escape it in the&lt;br/&gt;
index-row). Lets say &amp;lt;sep&amp;gt; is &apos;__&apos; in the example below&lt;/p&gt;

&lt;p&gt;So if I have base rows:&lt;br/&gt;
ROW | COL_A&lt;br/&gt;
aaa | foo&lt;br/&gt;
bbb | bar&lt;br/&gt;
ccc | foo&lt;br/&gt;
ddd | zoo&lt;/p&gt;

&lt;p&gt;Then my index would look like (just the rows are shown):&lt;br/&gt;
bar__bbb&lt;br/&gt;
foo__aaa&lt;br/&gt;
foo__ccc&lt;br/&gt;
zoo__ddd&lt;/p&gt;

&lt;p&gt;So for the query find all rows where COL_A == foo, I do an index scan&lt;br/&gt;
starting at &apos;foo_&lt;em&gt;&apos; and ending at &apos;foo&lt;/em&gt;*&apos; (where * is the byte after&lt;br/&gt;
&apos;_&apos;).&lt;/p&gt;

&lt;p&gt;This will only scan through only the two index rows I wanted. Looks&lt;br/&gt;
like your patch will make it so rather than scanning two rows with on&lt;br/&gt;
cell each I scan one row with two cells each. I&apos;m not 100% sure on the&lt;br/&gt;
specifics, but I think these two queries would generally be of the&lt;br/&gt;
same order of performance.&lt;/p&gt;

&lt;p&gt;Do I understand things correctly? Is there a reason you could not use&lt;br/&gt;
the existing index mechanism for your needs?&lt;/p&gt;

&lt;p&gt;I think we could do some work to make this pattern more obvious and&lt;br/&gt;
usable with the current infrastructure, but I&apos;m a bit hesitant to add yet&lt;br/&gt;
another region/regionserver extension.&lt;/p&gt;

&lt;p&gt;George, what do you think?&lt;/p&gt;

&lt;p&gt;Slightly aside: When I read about AppEngine&apos;s index (a year ago or so), they said that they maintain N index rows for a single base row (1 per column being indexed). I&apos;ve been wanting to rework this framework to support that as well, but it has not been a high priority as it would require a rewrite of our query stuff that uses the current indexing layer. The approach you take is the opposite: 1 index row for for N base rows. Not sure that really says anything, but ...&lt;/p&gt;</comment>
                            <comment id="12857565" author="gstathis" created="Thu, 15 Apr 2010 22:05:35 +0000"  >&lt;p&gt;Clint,&lt;/p&gt;

&lt;p&gt;Thank you for the feedback. After more consideration during this past week and after reviewing your comment, I think that I should retract any speed improvement claims regarding this patch. I started on this contrib focusing solely on scans but I naively neglected to account for the column iterations. If one takes everything in to account, I do agree that there should not be much of a speed difference between what&apos;s already there and the RowBasedIndexSpecification. Maybe if one thinks in terms of IO, fetching a row and then iterating in memory instead of scanning through files might have an edge, but I&apos;m not quite sure about this either; I&apos;m still new with this technology stack and I&apos;m not sure if scanning through more rows means going though more files. Some actual  performance tests should be run to see if that statement even holds (or someone more knowledgeable like you should set me straight &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ). &lt;/p&gt;

&lt;p&gt;So, at the very least, the JavaDoc should be amended to reflect this.&lt;/p&gt;

&lt;p&gt;As it turns out though, this contrib is definitely useful when used in conjunction with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2438&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2438&lt;/a&gt;. Since there is currently no reliable way to paginate through rows, a row based indexing approach can at least guarantee that the pages returned contain the number of rows requested. Our application does leverage pagination, so we will be able to use this, at least until a reliable row-based pagination comes along. After that, it may be six and half a dozen. One thing that the new contrib does not offer over the current solution is the ability to store additional column values in the index for further filtering. This might be a deal-breaker for some folks.&lt;/p&gt;

&lt;p&gt;Let me know what you think. If people don&apos;t have any use for this except for column-based pagination, maybe it&apos;s not worth adding.&lt;/p&gt;</comment>
                            <comment id="12866808" author="stack" created="Wed, 12 May 2010 23:48:21 +0000"  >&lt;p&gt;Bulk move of 0.20.5 issues into 0.21.0 after vote that we merge branch into TRUNK up on list.&lt;/p&gt;</comment>
                            <comment id="12866990" author="stack" created="Thu, 13 May 2010 04:41:08 +0000"  >&lt;p&gt;Moved from 0.21 to 0.22 just after merge of old 0.20 branch into TRUNK.&lt;/p&gt;</comment>
                            <comment id="13029190" author="stack" created="Thu, 5 May 2011 06:58:12 +0000"  >&lt;p&gt;Transaction is no longer part of hbase so this issue no longer pertains (Reopen if I have it wrong George)&lt;/p&gt;</comment>
                            <comment id="13044487" author="ghelmling" created="Sun, 5 Jun 2011 10:04:16 +0000"  >&lt;p&gt;Dropping fix version.  It&apos;s confusing to have marked against 0.92 when it&apos;s closed because transactional contrib was moved out.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12441168" name="hbase-2426-0.20-branch.patch" size="33097" author="gstathis" created="Thu, 8 Apr 2010 16:14:50 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 15 Apr 2010 18:28:01 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32578</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 28 weeks, 5 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hho7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100125</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>RowBasedIndexSpecification introduces secondary indices where base table rows with the same indexed column value have their row keys stored as column qualifiers on the same secondary index table row. The key for that row is the indexed column value from the base table.</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>