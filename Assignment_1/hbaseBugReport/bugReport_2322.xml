<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:00:54 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2322/HBASE-2322.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2322] deadlock between put and cacheflusher in 0.20 branch</title>
                <link>https://issues.apache.org/jira/browse/HBASE-2322</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Found one Java-level deadlock:
=============================
&lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 59 on 60020&quot;&lt;/span&gt;:
  waiting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; ownable synchronizer 0x00007fec9eb050f8, (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),
  which is held by &lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 54 on 60020&quot;&lt;/span&gt;
&lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 54 on 60020&quot;&lt;/span&gt;:
  waiting to lock monitor 0x000000004190e950 (object 0x00007fec64f25258, a java.util.HashSet),
  which is held by &lt;span class=&quot;code-quote&quot;&gt;&quot;regionserver/10.20.20.186:60020.cacheFlusher&quot;&lt;/span&gt;
&lt;span class=&quot;code-quote&quot;&gt;&quot;regionserver/10.20.20.186:60020.cacheFlusher&quot;&lt;/span&gt;:
  waiting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; ownable synchronizer 0x00007fec651df998, (a java.util.concurrent.locks.ReentrantLock$NonfairSync),
  which is held by &lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 19 on 60020&quot;&lt;/span&gt;
&lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 19 on 60020&quot;&lt;/span&gt;:
  waiting &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; ownable synchronizer 0x00007fec9eb050f8, (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),
  which is held by &lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 54 on 60020&quot;&lt;/span&gt;

Java stack information &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the threads listed above:
===================================================
&lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 59 on 60020&quot;&lt;/span&gt;:
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;  &amp;lt;0x00007fec9eb050f8&amp;gt; (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
        at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807)
        at org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1299)
        at org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1281)
        at org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1789)
        at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:577)
        at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)
&lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 54 on 60020&quot;&lt;/span&gt;:
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.request(MemStoreFlusher.java:172)
        - waiting to lock &amp;lt;0x00007fec64f25258&amp;gt; (a java.util.HashSet)
        at org.apache.hadoop.hbase.regionserver.HRegion.requestFlush(HRegion.java:1549)
        at org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1534)
        at org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1318)
        at org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1281)
        at org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1789)
        at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:577)
        at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)
&lt;span class=&quot;code-quote&quot;&gt;&quot;regionserver/10.20.20.186:60020.cacheFlusher&quot;&lt;/span&gt;:
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;  &amp;lt;0x00007fec651df998&amp;gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186)
        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushRegion(MemStoreFlusher.java:235)
        - locked &amp;lt;0x00007fec64f25258&amp;gt; (a java.util.HashSet)
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.run(MemStoreFlusher.java:149)
&lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 19 on 60020&quot;&lt;/span&gt;:
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;  &amp;lt;0x00007fec9eb050f8&amp;gt; (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
        at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807)
        at org.apache.hadoop.hbase.regionserver.HRegion.internalFlushcache(HRegion.java:980)
        at org.apache.hadoop.hbase.regionserver.HRegion.flushcache(HRegion.java:873)
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushRegion(MemStoreFlusher.java:241)
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushSomeRegions(MemStoreFlusher.java:352)
        - locked &amp;lt;0x00007fec64ed96f0&amp;gt; (a org.apache.hadoop.hbase.regionserver.MemStoreFlusher)
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.reclaimMemStoreMemory(MemStoreFlusher.java:321)
        - locked &amp;lt;0x00007fec64ed96f0&amp;gt; (a org.apache.hadoop.hbase.regionserver.MemStoreFlusher)
        at org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1783)
        at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:577)
        at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)

Found 1 deadlock.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12459045">HBASE-2322</key>
            <summary>deadlock between put and cacheflusher in 0.20 branch</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stack">stack</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Sun, 14 Mar 2010 01:07:48 +0000</created>
                <updated>Fri, 12 Oct 2012 06:15:00 +0000</updated>
                            <resolved>Fri, 16 Apr 2010 01:02:15 +0000</resolved>
                                                    <fixVersion>0.20.4</fixVersion>
                    <fixVersion>0.90.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>2</watches>
                                                                <comments>
                            <comment id="12845102" author="stack" created="Sun, 14 Mar 2010 16:34:21 +0000"  >&lt;p&gt;Here is the code to match the first of the thread dump above.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void put(Put put, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; lockid, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; writeToWAL)
  &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    checkReadOnly();

    &lt;span class=&quot;code-comment&quot;&gt;// Do a rough check that we have resources to accept a write.  The check is
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// &apos;rough&apos; in that between the resource check and the call to obtain a
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// read lock, resources may run out.  For now, the thought is that &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;
&lt;/span&gt;    &lt;span class=&quot;code-comment&quot;&gt;// will be extremely rare; we&apos;ll deal with it when it happens.
&lt;/span&gt;    checkResources();
    newScannerLock.writeLock().lock();
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above seems like a pain... no new scanners during a Put?  Doesn&apos;t it also mean one put at a time only?   Investigating....&lt;/p&gt;</comment>
                            <comment id="12845108" author="ryanobjc" created="Sun, 14 Mar 2010 16:58:31 +0000"  >&lt;p&gt;The fix for This is part of 2248. As is, the lock helps keep atomic row&lt;br/&gt;
reads.&lt;/p&gt;

&lt;p&gt;On Mar 14, 2010 12:35 PM, &quot;stack (JIRA)&quot; &amp;lt;jira@apache.org&amp;gt; wrote:&lt;/p&gt;


&lt;p&gt;   [&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2322?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=12845102#action_12845102&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2322?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=12845102#action_12845102&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;stack commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2322&quot; title=&quot;deadlock between put and cacheflusher in 0.20 branch&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2322&quot;&gt;&lt;del&gt;HBASE-2322&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
------------------------------&lt;/p&gt;

&lt;p&gt;Here is the code to match the first of the thread dump above.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void put(Put put, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; lockid, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; writeToWAL)
 &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
   checkReadOnly();

   &lt;span class=&quot;code-comment&quot;&gt;// Do a rough check that we have resources to accept a write.  The check
&lt;/span&gt;is
   &lt;span class=&quot;code-comment&quot;&gt;// &apos;rough&apos; in that between the resource check and the call to obtain a
&lt;/span&gt;   &lt;span class=&quot;code-comment&quot;&gt;// read lock, resources may run out.  For now, the thought is that &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;
&lt;/span&gt;   &lt;span class=&quot;code-comment&quot;&gt;// will be extremely rare; we&apos;ll deal with it when it happens.
&lt;/span&gt;   checkResources();
   newScannerLock.writeLock().lock();
...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above seems like a pain... no new scanners during a Put?  Doesn&apos;t it also&lt;br/&gt;
mean one put at a time only?   Investigating....&lt;/p&gt;

&lt;p&gt;java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),&lt;br/&gt;
java.util.HashSet),&lt;br/&gt;
java.util.concurrent.locks.ReentrantLock$NonfairSync),&lt;br/&gt;
java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),&lt;br/&gt;
java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)&lt;br/&gt;
java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)&lt;br/&gt;
java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1299)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1281)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1789)&lt;br/&gt;
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:577)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.request(MemStoreFlusher.java:172)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.requestFlush(HRegion.java:1549)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1534)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1318)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1281)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1789)&lt;br/&gt;
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:577)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)&lt;br/&gt;
java.util.concurrent.locks.ReentrantLock$NonfairSync)&lt;br/&gt;
java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)&lt;br/&gt;
java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186)&lt;br/&gt;
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushRegion(MemStoreFlusher.java:235)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.run(MemStoreFlusher.java:149)&lt;br/&gt;
java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)&lt;br/&gt;
java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)&lt;br/&gt;
java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.internalFlushcache(HRegion.java:980)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.flushcache(HRegion.java:873)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushRegion(MemStoreFlusher.java:241)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushSomeRegions(MemStoreFlusher.java:352)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.reclaimMemStoreMemory(MemStoreFlusher.java:321)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1783)&lt;br/&gt;
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:577)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;br/&gt;
This message is automatically generated by JIRA.&lt;br/&gt;
-&lt;br/&gt;
You can reply to this email to add a comment to the issue online.&lt;/p&gt;</comment>
                            <comment id="12845187" author="tlipcon" created="Mon, 15 Mar 2010 05:19:51 +0000"  >&lt;p&gt;got this out of jcarder - looks like the same thing, right? also can confirm it&apos;s gone with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2248&quot; title=&quot;Provide new non-copy mechanism to assure atomic reads in get and scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2248&quot;&gt;&lt;del&gt;HBASE-2248&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12845188" author="tlipcon" created="Mon, 15 Mar 2010 05:22:10 +0000"  >&lt;p&gt;(note that some of the &quot;holding:&quot; and &quot;taking:&quot; lines say writeLock when they&apos;re really readLock... this RWLock support in jcarder is &quot;experimental&quot; but I think it mainly works &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12845189" author="ryanobjc" created="Mon, 15 Mar 2010 05:30:32 +0000"  >&lt;p&gt;This lock is being pruned back by 2248. An attempt to create atomic row&lt;br/&gt;
reads.&lt;/p&gt;

&lt;p&gt;On Mar 14, 2010 10:23 PM, &quot;Todd Lipcon (JIRA)&quot; &amp;lt;jira@apache.org&amp;gt; wrote:&lt;/p&gt;


&lt;p&gt;   [&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2322?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=12845188#action_12845188&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-2322?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=12845188#action_12845188&lt;/a&gt;]&lt;/p&gt;

&lt;p&gt;Todd Lipcon commented on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2322&quot; title=&quot;deadlock between put and cacheflusher in 0.20 branch&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2322&quot;&gt;&lt;del&gt;HBASE-2322&lt;/del&gt;&lt;/a&gt;:&lt;br/&gt;
------------------------------------&lt;/p&gt;

&lt;p&gt;(note that some of the &quot;holding:&quot; and &quot;taking:&quot; lines say writeLock when&lt;br/&gt;
they&apos;re really readLock... this RWLock support in jcarder is &quot;experimental&quot;&lt;br/&gt;
but I think it mainly works &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),&lt;br/&gt;
java.util.HashSet),&lt;br/&gt;
java.util.concurrent.locks.ReentrantLock$NonfairSync),&lt;br/&gt;
java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync),&lt;br/&gt;
java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)&lt;br/&gt;
java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)&lt;br/&gt;
java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1299)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1281)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1789)&lt;br/&gt;
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:577)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.request(MemStoreFlusher.java:172)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.requestFlush(HRegion.java:1549)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1534)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1318)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1281)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1789)&lt;br/&gt;
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:577)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)&lt;br/&gt;
java.util.concurrent.locks.ReentrantLock$NonfairSync)&lt;br/&gt;
java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)&lt;br/&gt;
java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186)&lt;br/&gt;
java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushRegion(MemStoreFlusher.java:235)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.run(MemStoreFlusher.java:149)&lt;br/&gt;
java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)&lt;br/&gt;
java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)&lt;br/&gt;
java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)&lt;br/&gt;
java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.internalFlushcache(HRegion.java:980)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegion.flushcache(HRegion.java:873)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushRegion(MemStoreFlusher.java:241)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushSomeRegions(MemStoreFlusher.java:352)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher.reclaimMemStoreMemory(MemStoreFlusher.java:321)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.MemStoreFlusher)&lt;br/&gt;
org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1783)&lt;br/&gt;
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:577)&lt;br/&gt;
org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)&lt;/p&gt;

&lt;p&gt;&amp;#8211;&lt;br/&gt;
This message is automatically generated by JIRA.&lt;br/&gt;
-&lt;br/&gt;
You can reply to this email to add a comment to the issue online.&lt;/p&gt;</comment>
                            <comment id="12845686" author="stack" created="Tue, 16 Mar 2010 03:39:54 +0000"  >&lt;p&gt;@Todd The jcarder find looks like the same thing.  Any chance of getting line numbers in there so can be for sure for sure?&lt;/p&gt;</comment>
                            <comment id="12845689" author="tlipcon" created="Tue, 16 Mar 2010 03:42:55 +0000"  >&lt;p&gt;stack: yep, line number support is next on my jcarder todo list. Hopefully will get it done tonight or tomorrow on the train &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12845743" author="tlipcon" created="Tue, 16 Mar 2010 06:46:09 +0000"  >&lt;p&gt;Added line number support to jcarder, here&apos;s the pretty pic.&lt;/p&gt;</comment>
                            <comment id="12845931" author="stack" created="Tue, 16 Mar 2010 15:15:24 +0000"  >&lt;p&gt;Thanks Todd.  This deadlock looks like its made from a different combination.  I need to make sure that after hbase-2248 goes in, that this combo is not possible.&lt;/p&gt;</comment>
                            <comment id="12854826" author="stack" created="Thu, 8 Apr 2010 06:02:20 +0000"  >&lt;p&gt;I just ran a PE sequentialWrite against small cluster using 0.20_pre_durability branch and deadlocked pretty soon into the job.  See below.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Java stack information &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the threads listed above:
===================================================
&lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 59 on 60020&quot;&lt;/span&gt;:
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;  &amp;lt;0x00007f8d8a3a30c8&amp;gt; (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
        at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807)
        at org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1292)
        at org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1274)
        at org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1794)
        at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:657)
        at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)
&lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 45 on 60020&quot;&lt;/span&gt;:
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.request(MemStoreFlusher.java:172)
        - waiting to lock &amp;lt;0x00007f8d71145b08&amp;gt; (a java.util.HashSet)
        at org.apache.hadoop.hbase.regionserver.HRegion.requestFlush(HRegion.java:1543)
        at org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1528)
        at org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1311)
        at org.apache.hadoop.hbase.regionserver.HRegion.put(HRegion.java:1274)
        at org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1794)
        at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:657)
        at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)
&lt;span class=&quot;code-quote&quot;&gt;&quot;regionserver/10.20.20.189:60020.cacheFlusher&quot;&lt;/span&gt;:
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;  &amp;lt;0x00007f8d7113f0d8&amp;gt; (a java.util.concurrent.locks.ReentrantLock$NonfairSync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
        at java.util.concurrent.locks.ReentrantLock$NonfairSync.lock(ReentrantLock.java:186)
        at java.util.concurrent.locks.ReentrantLock.lock(ReentrantLock.java:262)
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushRegion(MemStoreFlusher.java:253)
        - locked &amp;lt;0x00007f8d71145b08&amp;gt; (a java.util.HashSet)
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.run(MemStoreFlusher.java:149)
&lt;span class=&quot;code-quote&quot;&gt;&quot;IPC Server handler 31 on 60020&quot;&lt;/span&gt;:
        at sun.misc.Unsafe.park(Native Method)
        - parking to wait &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;  &amp;lt;0x00007f8d8a3a30c8&amp;gt; (a java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync)
        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:158)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:747)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:778)
        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1114)
        at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:807)
        at org.apache.hadoop.hbase.regionserver.HRegion.internalFlushcache(HRegion.java:972)
        at org.apache.hadoop.hbase.regionserver.HRegion.flushcache(HRegion.java:865)
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushRegion(MemStoreFlusher.java:259)
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.flushSomeRegions(MemStoreFlusher.java:379)
        - locked &amp;lt;0x00007f8d7111ba30&amp;gt; (a org.apache.hadoop.hbase.regionserver.MemStoreFlusher)
        at org.apache.hadoop.hbase.regionserver.MemStoreFlusher.reclaimMemStoreMemory(MemStoreFlusher.java:348)
        - locked &amp;lt;0x00007f8d7111ba30&amp;gt; (a org.apache.hadoop.hbase.regionserver.MemStoreFlusher)
        at org.apache.hadoop.hbase.regionserver.HRegionServer.put(HRegionServer.java:1788)
        at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
        at org.apache.hadoop.hbase.ipc.HBaseRPC$Server.call(HBaseRPC.java:657)
        at org.apache.hadoop.hbase.ipc.HBaseServer$Handler.run(HBaseServer.java:915)

Found 1 deadlock.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12857159" author="stack" created="Thu, 15 Apr 2010 00:21:00 +0000"  >&lt;p&gt;I ran Todd&apos;s jcarder doing sequentialWriter of 1 and a scan...... should probably do more than 1... but it says no cycles.  I did the following to get it in there:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-exec &lt;span class=&quot;code-quote&quot;&gt;&quot;$JAVA&quot;&lt;/span&gt; $JAVA_HEAP_MAX $HBASE_OPTS -classpath &lt;span class=&quot;code-quote&quot;&gt;&quot;$CLASSPATH&quot;&lt;/span&gt; $CLASS &lt;span class=&quot;code-quote&quot;&gt;&quot;$@&quot;&lt;/span&gt;
+exec &lt;span class=&quot;code-quote&quot;&gt;&quot;$JAVA&quot;&lt;/span&gt; -javaagent:/Users/Stack/checkouts/jcarder.jar=outputdir=/tmp/jc-@TIME@ $JAVA_HEAP_MAX $HBASE_OPTS -classpath &lt;span class=&quot;code-quote&quot;&gt;&quot;$CLASSPATH&quot;&lt;/span&gt; $CLASS &lt;span class=&quot;code-quote&quot;&gt;&quot;$@&quot;&lt;/span&gt;
+#exec &lt;span class=&quot;code-quote&quot;&gt;&quot;$JAVA&quot;&lt;/span&gt; $JAVA_HEAP_MAX $HBASE_OPTS -classpath &lt;span class=&quot;code-quote&quot;&gt;&quot;$CLASSPATH&quot;&lt;/span&gt; $CLASS &lt;span class=&quot;code-quote&quot;&gt;&quot;$@&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12857629" author="stack" created="Fri, 16 Apr 2010 01:01:55 +0000"  >&lt;p&gt;At Todd&apos;s suggestion I used his version of jcarder because it does readwrite locks.  Its available here: &lt;a href=&quot;http://github.com/toddlipcon/jcarder/tree/lockclasses&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://github.com/toddlipcon/jcarder/tree/lockclasses&lt;/a&gt;  I ran a local test with 4 concurrent threads each loading 1M rows &amp;#8211; how I got the deadlock previously &amp;#8211; and then did analysis and it claimed no deadlocks:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
stack:0.20_pre_durability Stack$ java -Xmx4G -jar ~/checkouts/jcarder/dist/jcarder.jar
Opening &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; reading: /Users/Stack/checkouts/0.20_pre_durability/jcarder_contexts.db
Opening &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; reading: /Users/Stack/checkouts/0.20_pre_durability/jcarder_events.db
Loaded from database files:
   Nodes: 166109
   Edges: 494196 (excluding 175530380 duplicated)

Cycle analysis result: 
   Cycles:          0
   Edges in cycles: 0
   Nodes in cycles: 0
   Max cycle depth: 0
   Max graph depth: 8

No cycles found!
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I&apos;ve been running multiple MR jobs over last day or so and we used deadlock reliably at 2% done or so.  I&apos;ve exceeded this 2% many times since w/o deadlocking.&lt;/p&gt;

&lt;p&gt;I&apos;m going to say that this issue was fixed by hbase-2248.  Will open new issue if I see it again.&lt;/p&gt;</comment>
                            <comment id="12857630" author="stack" created="Fri, 16 Apr 2010 01:02:15 +0000"  >&lt;p&gt;Fixed by hbase-2248.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12457095">HBASE-2248</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12438900" name="hbase-2322.png" size="64224" author="tlipcon" created="Tue, 16 Mar 2010 06:46:09 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 14 Mar 2010 16:58:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>26258</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            6 years, 36 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i08spz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>49253</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>