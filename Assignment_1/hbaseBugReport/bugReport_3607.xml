<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:11:37 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3607/HBASE-3607.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3607] Cursor functionality for results generated by Coprocessors</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3607</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I tried to come up with a scanner like functionality for results generated by coprocessors at region level. &lt;br/&gt;
This is just a poc, and it will be good to have your comments on it.&lt;/p&gt;

&lt;p&gt;It has support for both Incremental and In-memory Result sets. Attached is a patch that has a test case for an incremental result (i.e., client receives a cursorId from the CP core method, it instantiates a cursor object and iterates over the result set. He can set a cache limit on the CursorCallable object to reduce the number of rpc --&amp;gt; just like scanners.&lt;/p&gt;

&lt;p&gt;In its current state, it has some limitations too &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;), like, it is region specific only, i.e., one can instantiate and use cursor at one region only (and that region is determined by the input row while instantiating the cursor). I will try to expand it so that it can have atleast a sequential access to other regions, but as I said, I want the opinion of experts to know whether this approach really makes some sense or not.&lt;br/&gt;
I have tested it with the inbuilt testing framework on my laptop only.&lt;/p&gt;

&lt;p&gt;It will be good if I copy the use case here in the description too:&lt;br/&gt;
Test table has rows like:&lt;br/&gt;
 /**&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The scenario is that I have these rows keys in the test table:&lt;br/&gt;
  &apos;aaa-123&apos;&lt;br/&gt;
  &apos;aaa-456&apos;&lt;br/&gt;
  &apos;abc-111&apos;&lt;br/&gt;
  &apos;abd-111&apos;&lt;br/&gt;
  &apos;abd-222&apos;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;  &amp;amp; I want to return:&lt;br/&gt;
  (&apos;aaa&apos;, 2)&lt;br/&gt;
  (&apos;abc&apos;, 1)&lt;br/&gt;
  (&apos;abd&apos;, 2)&lt;/p&gt;</description>
                <environment></environment>
        <key id="12500598">HBASE-3607</key>
            <summary>Cursor functionality for results generated by Coprocessors</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="v.himanshu">Himanshu Vashishtha</reporter>
                        <labels>
                    </labels>
                <created>Mon, 7 Mar 2011 08:38:16 +0000</created>
                <updated>Fri, 18 Jul 2014 22:02:33 +0000</updated>
                            <resolved>Fri, 18 Jul 2014 22:02:33 +0000</resolved>
                                                                    <component>Coprocessors</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13003293" author="v.himanshu" created="Mon, 7 Mar 2011 08:40:38 +0000"  >&lt;p&gt;poc patch for the cursor-cp-server support&lt;/p&gt;</comment>
                            <comment id="13006796" author="stack" created="Tue, 15 Mar 2011 05:10:52 +0000"  >&lt;p&gt;So, what happens if the region moves mid-cursor-scan?&lt;/p&gt;

&lt;p&gt;What is CursorCallable adding over and above Scanner?  Its not clear to me (Pardon me).&lt;/p&gt;

&lt;p&gt;You are inconsistent in your formatting:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(cache.size() ==0 &amp;amp;&amp;amp; &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.closed)
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(cache.size() ==0){&lt;span class=&quot;code-comment&quot;&gt;//&lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; a rpc and fetch results
&lt;/span&gt;+      Result[] res = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.htable.getConnection().getRegi
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These are pretty radical additions:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  /*
+   * get result from cp cursor
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; Result[] nextCp(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; cursorId, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; cache) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
+  /**
+   * closing the associated cursor object and release its region level resources
+   * @param cursorId
+   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void closeCp(&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; cursorId) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;Are they necessary?  Why do we have to mod the HRegion when we have CPs now?&lt;/p&gt;

&lt;p&gt;Yeah, same for these additions to HRegionServer.&lt;/p&gt;

&lt;p&gt;I do not see the direct benefit to all these big changes Himanshu.  Help me understand.&lt;/p&gt;
</comment>
                            <comment id="13006804" author="v.himanshu" created="Tue, 15 Mar 2011 05:59:34 +0000"  >&lt;p&gt;First, thanks for reviewing it Stack.&lt;br/&gt;
Sorry for not making its requirements &quot;very&quot; clear in the description. &lt;/p&gt;

&lt;p&gt;You asked: What is CursorCallable adding over and above Scanner? Its not clear to me (Pardon me).&lt;/p&gt;

&lt;p&gt;A scanner is to read the raw (&quot;virgin&quot;) rows of the table, and one can add filters etc to do the sieving. A cursor is to traverse a computed resultset, that is a result of some CP computation. &lt;br/&gt;
This is useful in cases when instead of getting one value as the post computation result at region level (like the agg functions), the resultset is bunch of rows. This cursor thing provides a mechanism to consume this computed resultset (by sending it to the client in a piece wise manner), and if necessary asking the CP to produce more of the result. Therefore, it supports two types of ResultSets: Incremental and InMemory.&lt;br/&gt;
Incremental: In this case, results can be generated on a per row (or a group of rows) basis. For example, the test case used in the patch. If a client says give me 100 rows in one rpc, the corresponding cursor object will give exactly that much number of rows in the next call.&lt;br/&gt;
InMemory: This is like computing top K rows in one region. Here, the resultset &lt;em&gt;has&lt;/em&gt; to be precomputed before the cursor object is instantiated and the handle is given to the client. Once the result set is created, a cursor object is created. Invoking next() like methods will only consume the resultset (as it is already computed on the entire region.&lt;/p&gt;

&lt;p&gt;Hope this clarification will be useful.&lt;/p&gt;

&lt;p&gt;yes, in the current patch, its fail fast in case of a region split (just abandons the process and leave it to the client to re-submit the request).&lt;/p&gt;</comment>
                            <comment id="13011346" author="ghelmling" created="Fri, 25 Mar 2011 18:46:32 +0000"  >&lt;p&gt;I posted a review of this on review board:&lt;br/&gt;
&lt;a href=&quot;https://review.cloudera.org/r/1624/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://review.cloudera.org/r/1624/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(We really need to get the damn email spam scoring fixed).&lt;/p&gt;</comment>
                            <comment id="13020055" author="v.himanshu" created="Thu, 14 Apr 2011 21:51:50 +0000"  >&lt;p&gt;Thanks for the review Gary, really appreciate your time and effort. Some key points that I got are:&lt;/p&gt;

&lt;p&gt;a) Flesh out a neater client side API, where the client gets a handler to invoke iteration methods. It should be as simple as that. Giving it a long integer id does not help.&lt;/p&gt;

&lt;p&gt;b) In executing the above calls, use the existing cp RPC mechanism (so get rid of CursorCallable). &lt;/p&gt;

&lt;p&gt;c) Use existing code for scanner and other stateful objects at RS. Can RegionObserver be used for maintaining these objects?&lt;/p&gt;

&lt;p&gt;I am in the process of coming up with a better approach and facing one design question at server side. It will be great to have comments on it:&lt;br/&gt;
a) When it comes to maintaining stateful scanners at RS side, we are dealing with instances of Internal scanners that are created to do scans on a region basis. They as such can&apos;t be registered at RegionServer because a region has only limited access to its HRS (via RegionServerServices). The idea of having these objects stored at RS level has at least two benefits:&lt;br/&gt;
i) current scanners are registered this way (use existing code).&lt;br/&gt;
ii) these internal scanners will be instantiated per region, so if we try to register (house keep) them in a cp, we will be having that many lease objects (a daemon threads) which is not justifiable; or a timer object or so to do the resources in check.&lt;/p&gt;

&lt;p&gt;So, these stateful scan objects should be registred at RS level. To do so, a region (or the CP) should have access to RS&apos;s APIs which does this job like addScanner(InternalScanner). Currently it has RegionServerServices, but it can&apos;t be used to do the registering of these scan objects.&lt;br/&gt;
One approach is add such a method in HRS and then either add a method in RS (or refactor existing addScanner method appropriately). &lt;br/&gt;
Is this a right way or is there other better approach to do so.&lt;/p&gt;</comment>
                            <comment id="13028663" author="v.himanshu" created="Wed, 4 May 2011 08:19:47 +0000"  >&lt;p&gt;Here is the revised version of the approach. Some key features (thanks to Gary) are:&lt;br/&gt;
a) There is a client side cursor object (CursorClient) that is instantiated as per client request. Internally, during its instantiation, server side cursors are instantiated on each region. These server side cursors are registered with in the CP environment. During registration, we get an identifier: cursorId. CursorClient holds a mapping of region reference row to these cursorIds.&lt;/p&gt;

&lt;p&gt;b) Existing CP RPC is being used. For invoking next(), the cursorId has to be different for each rpc, ie, appropriate combination of region reference row to cursorId should be send to the region. This is achieved by instantiating Exec objects for these calls. Its arguments are set as per the cursorId value.&lt;br/&gt;
Since a cursor can result null as a valid response (when it has exhausted its quota of rows, or in case of nsre), MultiResponse is not allergic to null response. It treats null as valid response (Please comment if its too intrusive).&lt;/p&gt;

&lt;p&gt;c)Server side cursor objects are held in a lease, and this lease manager is an attribute of the RegionEnvironment.&lt;br/&gt;
Its corresponding attributes are there in HConstants.&lt;/p&gt;

&lt;p&gt;d) I used a NGram tester for testing the design and implementation. It is modelled after Google NGram dataset. One should get an idea of using streaming results. Current test class creates 20 rows in 3 different regions and then reads them with a cursor batch size equals 2.&lt;/p&gt;

&lt;p&gt;e) In case the result from any cursor is null for an iteration (may be due to exception or it exhausted the region rows), the server side cursor object is deregistered then and there. Therefore, client doesn;t need to call any close method per se. (I found that its not an intuitive one though &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).&lt;/p&gt;</comment>
                            <comment id="13029480" author="v.himanshu" created="Thu, 5 May 2011 18:16:07 +0000"  >&lt;p&gt;I think I need to work more on boundary cases. Will do after 16th May.&lt;/p&gt;</comment>
                            <comment id="13040013" author="v.himanshu" created="Fri, 27 May 2011 00:49:41 +0000"  >&lt;p&gt;So, I did some experiments with coprocessors. I wrote a blog describing them: &lt;a href=&quot;http://hbase-coprocessor-experiments.blogspot.com/2011/05/extending.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hbase-coprocessor-experiments.blogspot.com/2011/05/extending.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks,&lt;br/&gt;
Himanshu&lt;/p&gt;</comment>
                            <comment id="14066954" author="stack" created="Fri, 18 Jul 2014 22:02:33 +0000"  >&lt;p&gt;Won&apos;t do.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12472807" name="patch-2.txt" size="25509" author="v.himanshu" created="Mon, 7 Mar 2011 08:40:38 +0000"/>
                            <attachment id="12478138" name="patch-3607-3.txt" size="63137" author="v.himanshu" created="Wed, 4 May 2011 08:24:19 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 15 Mar 2011 05:10:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33108</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 21 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hn07:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100989</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>