<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:20:24 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-11125/HBASE-11125.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-11125] Introduce a higher level interface for registering interest in coprocessor upcalls</title>
                <link>https://issues.apache.org/jira/browse/HBASE-11125</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;We should introduce a higher level interface for managing the registration of &apos;user&apos; code for execution from the low level hooks. It should not be necessary for coprocessor implementers to learn the universe of available low level hooks and the subtleties of their placement within HBase core code. Instead the higher level API should allow the implementer to describe their intent and then this API should choose the appropriate low level hook placement.&lt;/p&gt;

&lt;p&gt;A very desirable side effect is a layer of indirection between coprocessor implementers and the actual hooks. This will address the perennial complaint that the low level hooks change too much from release to release, as recently discussed during the RM panel at HBaseCon. If we try to avoid changing the particular placement and arguments of hook functions in response to those complaints, this can be an onerous constraint on necessary internals evolution. Instead we can direct coprocessor implementers to consider the new API and provide the same interface stability guarantees there as we do for client API, &lt;/p&gt;</description>
                <environment></environment>
        <key id="12712874">HBASE-11125</key>
            <summary>Introduce a higher level interface for registering interest in coprocessor upcalls</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="apurtell">Andrew Purtell</reporter>
                        <labels>
                    </labels>
                <created>Wed, 7 May 2014 16:08:07 +0000</created>
                <updated>Sat, 27 Dec 2014 19:57:12 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                <comments>
                            <comment id="13991965" author="apurtell" created="Wed, 7 May 2014 16:15:04 +0000"  >&lt;p&gt;Let&apos;s discuss what we would like to see and then work up a design document.&lt;/p&gt;

&lt;p&gt;A hypothetical example from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11126&quot; title=&quot;Add RegionObserver pre hooks that operate under row lock&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11126&quot;&gt;&lt;del&gt;HBASE-11126&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
registerObserver(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; DeleteObserver() { ... }, Before, Region, Locked)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, instead of a single fat RegionObserver interface loaded with hooks we have smaller interfaces defined for each logical operation. A new polymorphic core utility method registerObserver dispatches on the interface implemented by the first argument. Following is an array of flags defined in an enum (as varargs) that express finer placement details. &apos;Before&apos; or &apos;After&apos; the core code executes, corresponding to pre* or post* low level placement. &apos;Locked&apos; = inside a row lock.  &apos;Region&apos; = at region level. &apos;Global&apos; = at server level. Etc.&lt;/p&gt;</comment>
                            <comment id="13991978" author="apurtell" created="Wed, 7 May 2014 16:31:14 +0000"  >&lt;p&gt;Also, I don&apos;t propose removing the existing interfaces. Although they won&apos;t have the same (or any?) stability guarantees from release to release they do provide some useful encapsulation and could potentially be used for something that wouldn&apos;t make sense as part of the higher level interface.&lt;/p&gt;</comment>
                            <comment id="13997294" author="apurtell" created="Wed, 14 May 2014 05:23:57 +0000"  >&lt;p&gt;Making this a critical issue for 1.0. Let&apos;s discuss&lt;/p&gt;</comment>
                            <comment id="13999681" author="nkeywal" created="Fri, 16 May 2014 08:16:16 +0000"  >&lt;p&gt;I think it would work. It could also be more efficient, we would know when nobody cares of the event.&lt;/p&gt;</comment>
                            <comment id="14000647" author="apurtell" created="Sat, 17 May 2014 03:48:17 +0000"  >&lt;p&gt;Related requests/advice from Vladimir Rodionov on @dev:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1) Have default implementations (abstract classes) for every interface from Coprocessor API.&lt;br/&gt;
2) Advise coprocessor users not to implement interface directly but sub class default impl.&lt;br/&gt;
3) Preserve backward compatibility by adding only new hooks/methods&lt;br/&gt;
4) DO NOT CHANGE existing API (no method renaming, method parameter type changes etc)&lt;br/&gt;
5) Have a regression tests to check backward compatibility.&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="14181625" author="stack" created="Thu, 23 Oct 2014 17:42:19 +0000"  >&lt;p&gt;Should we remove this issue from 1.0 since it has no assignee and is seeing no progress?&lt;/p&gt;</comment>
                            <comment id="14181659" author="apurtell" created="Thu, 23 Oct 2014 17:58:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should we remove this issue from 1.0 since it has no assignee and is seeing no progress?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes. Maybe for 1.1 or 2.0 &lt;/p&gt;</comment>
                            <comment id="14259470" author="apurtell" created="Sat, 27 Dec 2014 19:47:52 +0000"  >&lt;p&gt;The core principle of the current coprocessor API is minimization of overhead. We have a &#8220;kernel hook&#8221; API where execution of extension code takes place in the current thread to avoid a context switch and copying, using low level types to avoid translation costs, allocations and copying. This is why the current API has been successful, and we want to retain it, but as a result of this choice:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Misbehaving code can take down the server.&lt;/li&gt;
	&lt;li&gt;Many low level types that do not and cannot have compatibility guarantees are exposed to coprocessor applications.&lt;/li&gt;
	&lt;li&gt;Interfaces like RegionObserver carry a lot of internal details that might be unrelated to the task(s) at hand.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;This issue focuses on the latter two problems. (The first can be addressed by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4047&quot; title=&quot;[Coprocessors] Generic external process host&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4047&quot;&gt;HBASE-4047&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;A proposal.&lt;/p&gt;

&lt;p&gt;Create a new API based around an interface called Extension. Extension can knit together coprocessors and plugins.&lt;/p&gt;

&lt;p&gt;Extensions would have a method called at load time that returns a list of objects for which their types express intentions. Intention types would be fine-grained, expressing:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A request to listen for an event (read only), a _xxx_Listener, either globally or on a per-table basis&lt;/li&gt;
	&lt;li&gt;A request to intercept an event (read with possible modification or drop), a _xxx_Transformer, either globally or on a per-table basis&lt;/li&gt;
	&lt;li&gt;A request to implement an Endpoint interface (or part of one?)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;As a rule of thumb we would define one intention type for each:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Invocation of a method of an Observer: _xxx_Transformer for pre hooks, _xxx_Listener for post hooks, e.g. DeleteTransformer -&amp;gt; preDelete, DeleteListener -&amp;gt; postDelete&lt;/li&gt;
	&lt;li&gt;Invocation of a method of a plugin: flush policy, compaction policy, split policy, etc.&lt;/li&gt;
	&lt;li&gt;Endpoint&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A naive implementation would maintain lists of intentions at various hook points. For each operation perhaps several lists would need to be walked and processed in turn. I think we can do better and maintain the performance of the current API.&lt;/p&gt;

&lt;p&gt;An Extension ClassLoader could generate code for wiring up intentions to low level hooks or plugin sites. For example if we have several intentions that map to RegionObserver methods, we would codegen a BaseRegionObserver subclass, folding in bytecode of the intentions, and install it. Or if we find intention to override split policy, we would codegen a delegating split policy implementation, folding in the bytecode of the intention, delegating everything else to whatever plugin is already installed, then install the result.&lt;/p&gt;

&lt;p&gt;It will not be necessary to have complete coverage of all coprocessor hooks in the collection of intent types for the higher level API to be useful. We should start with straightforward cases and then extend it over time. Consider RegionObserver#preBatchMutate. We don&apos;t want to expose MiniBatchOperationInProgress. Too tied into low level details of how the regionserver processes batch RPCs. Instead, we&apos;d collect intentions scoped narrowly to mutation types (Append, Increment, Put) and synthesize a hook for preBatchMutate as needed. Or, consider RegionObserver#preCheckAndDelete. We might want to combine Get and Delete intentions into a synthetic hook for preCheckAndDelete, but not have an explicit CheckAndDelete intention, which exposes a RPC detail. Design for different cases can be done in subtasks.&lt;/p&gt;

&lt;p&gt;Code generation allows us to decouple intention types from internals. For example, a PutTransformer would be installed as a RegionObserver with an implemented prePut method. This is what prePut hooks look like today:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
void prePut(ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt; c, Put put, WALEdit edit, Durability durability)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ideally the PutTransformer intention type should only know about the Put type and have a reference to a context if it needs to be stateful. We can carefully add state to the intention type for controlling durability. We should have a separate intention for modifying WALEdits. We can do this without leaking out the WALEdit type. Yet the &quot;transformer&quot; code would run in a prePut hook and get good performance. We could even change the signature of RegionObserver#prePut at any time, provided the code generator that maps intentions to low level implementation is updated likewise (setting aside other considerations for the moment).&lt;/p&gt;

&lt;p&gt;We would aim for code generation that can be maintained by committers not experts in JVM internals. That said, some complexity is unavoidable. I think the promise of composability of fine grained intentions, API-level supportability of hiding internal types, and the implied performance of &#8220;inlining&#8221; intentions into straight line code for low level hooks could be well worth it. We can mitigate maintenance risks by placing the Extension API and code generator into its own Maven module. This module would provide a system level coprocessor that must be installed via site configuration for experimental &#8220;Extension&#8221; API support. It would be optional and decoupled from the client and server core modules. Should at some point the project feel the &quot;Extension&quot; API is not supportable, the module can simply be removed. It could even start life as a separate tree, hosted on GitHub.&lt;/p&gt;

&lt;p&gt;Because we are keeping the low level &quot;kernel-hook&quot;-style API the lack of access to internal types and lack of functional coverage in a higher level API wouldn&apos;t be a problem. An implementor could always resort to direct use of low level interfaces. Of course we would want to figure out how to implement the desired extension in higher level terms.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12712875">HBASE-11126</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12712703">HBASE-11122</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12551562">HBASE-5827</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 16 May 2014 08:16:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>391190</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 50 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1vdj3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>391411</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>