<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:43:44 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7221/HBASE-7221.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7221] [experiment] RowKey utility class for rowkey construction</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7221</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;A common question in the dist-lists is how to construct rowkeys, particularly composite keys.  Put/Get/Scan specifies byte[] as the rowkey, but it&apos;s up to you to sensibly populate that byte-array, and that&apos;s where things tend to go off the rails.&lt;/p&gt;

&lt;p&gt;The intent of this RowKey utility class isn&apos;t meant to add functionality into Put/Get/Scan, but rather make it simpler for folks to construct said arrays.  Example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   RowKey key = RowKey.create(RowKey.SIZEOF_MD5_HASH + RowKey.SIZEOF_LONG);
   key.addHash(a);
   key.add(b);
   &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; bytes[] = key.getBytes();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; </description>
                <environment></environment>
        <key id="12617698">HBASE-7221</key>
            <summary>[experiment] RowKey utility class for rowkey construction</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="dmeil">Doug Meil</assignee>
                                    <reporter username="dmeil">Doug Meil</reporter>
                        <labels>
                    </labels>
                <created>Mon, 26 Nov 2012 21:55:04 +0000</created>
                <updated>Wed, 3 Apr 2013 20:29:25 +0000</updated>
                            <resolved>Fri, 8 Mar 2013 14:43:10 +0000</resolved>
                                                                    <component>util</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>15</watches>
                                                                <comments>
                            <comment id="13504216" author="hadoopqa" created="Mon, 26 Nov 2012 23:00:53 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12554921/HBASE_7221.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12554921/HBASE_7221.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 98 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 27 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3406//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13504352" author="ram_krish" created="Tue, 27 Nov 2012 04:05:01 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
addHash(s.getBytes());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Can we make this too as &apos;addHash(Bytes.toBytes(s));?&lt;/p&gt;</comment>
                            <comment id="13504356" author="eclark" created="Tue, 27 Nov 2012 04:12:56 +0000"  >&lt;p&gt;Seems like this would be better in the hbase-examples module.&lt;/p&gt;</comment>
                            <comment id="13504845" author="dmeil" created="Tue, 27 Nov 2012 19:01:08 +0000"  >&lt;p&gt;Ramkrishna, regarding addHash, there is addHash(int), addHash(long), addHash(byte[]), and addHash(String).  So the API already supports adding the &quot;common&quot; datatypes, plus a catch-all for a byte[].  What did you feel needed to be added?&lt;/p&gt;

&lt;p&gt;Personally, for the common &quot;key&quot; datatypes, I&apos;d rather not force people to call Bytes.toBytes on them as I think that&apos;s kind of clunky.&lt;/p&gt;</comment>
                            <comment id="13504863" author="dmeil" created="Tue, 27 Nov 2012 19:31:46 +0000"  >&lt;p&gt;Elliot, the reason I&apos;d lobby not for &quot;examples&quot; is that this is such a common question and so easy to screw up unless you really know what you&apos;re doing.  The people that used HBase back when it was 0.20 were adventurers, as the release gets closer to 1.0 it just needs to make the right thing happen.&lt;/p&gt;

&lt;p&gt;Additionally, there are other key-utilities in the util package already...&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/util/Keying.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/util/Keying.html&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13505167" author="dmeil" created="Wed, 28 Nov 2012 02:06:17 +0000"  >&lt;p&gt;I do think, though, that some code examples using this would be a good idea in &quot;examples&quot; but this class belongs in the util package like the other class.  I&apos;ve heard that request from some folks about having more &quot;cookbook&quot; examples.&lt;/p&gt;</comment>
                            <comment id="13505703" author="eclark" created="Wed, 28 Nov 2012 17:48:04 +0000"  >&lt;p&gt;So coming soon (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7012&quot; title=&quot;Create hbase-client module&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7012&quot;&gt;&lt;del&gt;HBASE-7012&lt;/del&gt;&lt;/a&gt;) most users won&apos;t have anything in hbase-server on their client classpath.  With that in mind it, it seems like hbase-examples will actually have more visibility for people just starting out with HBase.  (hadoop-examples seems like a great corollary here; more starting users read that code than hadoop-common)&lt;/p&gt;

&lt;p&gt;Also should this be renamed to something like CompositeRowKey so that the name isn&apos;t confused with a row key that is used inside the hbase-server ?&lt;/p&gt;</comment>
                            <comment id="13505716" author="dmeil" created="Wed, 28 Nov 2012 17:59:27 +0000"  >&lt;p&gt;re:  &quot;classpath&quot;&lt;/p&gt;

&lt;p&gt;Ahhh... good point.  hbase-common, then?&lt;/p&gt;

&lt;p&gt;re:  name.&lt;/p&gt;

&lt;p&gt;RowKeyBuilder?  &lt;/p&gt;</comment>
                            <comment id="13505784" author="eclark" created="Wed, 28 Nov 2012 18:57:36 +0000"  >&lt;p&gt;Common&apos;s much better than server, so If you&apos;re against examples then common seems the best.&lt;/p&gt;

&lt;p&gt;RowKeyBuilder seems better.  Thanks&lt;/p&gt;</comment>
                            <comment id="13505877" author="dmeil" created="Wed, 28 Nov 2012 20:42:35 +0000"  >&lt;p&gt;Gotcha, I&apos;ll re-submit with those changes.&lt;/p&gt;

&lt;p&gt;As an aside, that &quot;Keying&quot; class I cited above should move to common too.  That&apos;s clearly a client utility and shouldn&apos;t be in server.&lt;/p&gt;</comment>
                            <comment id="13506469" author="dmeil" created="Thu, 29 Nov 2012 13:38:32 +0000"  >&lt;p&gt;Moved from server to common, renamed class name to RowKeyBuilder.  (7221_2.patch)&lt;/p&gt;</comment>
                            <comment id="13506661" author="stack" created="Thu, 29 Nov 2012 18:48:00 +0000"  >&lt;p&gt;Hey boss... fix the formatting.  Its all over the place &amp;#8211; see the patch.  You have tabs in there?   If you look at other code you&apos;ll see it uses spaces for tabs and two spaces at that.&lt;/p&gt;

&lt;p&gt;Builder is a good name but you don&apos;t seem to follow the general builder pattern... i.e. get a &apos;builder&apos;, then do things against it and on the end call &apos;build&apos; to return the result.  That could confuse (You have some of it w/ your static to create an instance...)&lt;/p&gt;

&lt;p&gt;You keep adding to the backing array... just let the ArrayOutOfBounds happen if they try to add off the end?&lt;/p&gt;

&lt;p&gt;Why does the key have to be of fixed size?&lt;/p&gt;

&lt;p&gt;Good stuff.&lt;/p&gt;</comment>
                            <comment id="13506812" author="dmeil" created="Thu, 29 Nov 2012 21:18:44 +0000"  >&lt;p&gt;re:  &quot;Builder&quot;&lt;/p&gt;

&lt;p&gt;Yeah, I really wasn&apos;t going for a builder pattern.  Elliott had a concern about the name &quot;RowKey&quot; (I must admit I&apos;m still partial to it because there isn&apos;t a class with that name anywhere in the codebase).&lt;/p&gt;

&lt;p&gt;I wasn&apos;t really aiming for a builder pattern in the first place because I didn&apos;t want to necessarily force people to destroy and re-create the RowKey/Builder for each rowkey they create - that&apos;s why the reset method is there.  The only thing that would have to get reset was the backing byte array.&lt;/p&gt;

&lt;p&gt;re:  &quot;fixed size&quot;&lt;/p&gt;

&lt;p&gt;I wanted any particular instance to have a fixed size so that the backing byte-array didn&apos;t have resize like an ArrayList (and wind up burning a lot of byte-arrays in the process).  So it&apos;s &quot;easier&quot; to create rowkeys than without the utility, but not without required thought.&lt;/p&gt;

&lt;p&gt;If your table had multiple length keys, there&apos;s nothing wrong with creating 2 different instances, one for each length.&lt;/p&gt;

&lt;p&gt;That&apos;s where I was coming from.&lt;/p&gt;

&lt;p&gt;re:  &quot;formatting&quot;&lt;/p&gt;

&lt;p&gt;I&apos;ll fix that.  Doh!  &lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="13506848" author="dmeil" created="Thu, 29 Nov 2012 21:48:05 +0000"  >&lt;p&gt;One more thought on size:  then again, I could do what ArrayList does with it&apos;s overloaded constructor - use that size initially, and then auto-size if needed.  But you could still define the exact size if you wanted for performance purposes.  that&apos;s probably the nicest possible approach.  &lt;/p&gt;
</comment>
                            <comment id="13508408" author="dmeil" created="Mon, 3 Dec 2012 00:12:53 +0000"  >&lt;p&gt;I am overhauling this with some new ideas.  Stay tuned.&lt;/p&gt;</comment>
                            <comment id="13508788" author="dmeil" created="Mon, 3 Dec 2012 15:11:04 +0000"  >&lt;p&gt;Ok, I think this one&apos;s a winner.  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;There is a RowKeySchema and a RowKey.  This creates fixed-length keys without delimiters (generally considered to be a best practice), and enforces the defined lengths when the elements are set.  It&apos;s also bi-directional, so that you can pass in a byte-array (i.e., rowkey) from a table and then read the key elements back.&lt;/p&gt;

&lt;p&gt;Creation example...&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; elements[] = {RowKeySchema.SIZEOF_MD5_HASH, RowKeySchema.SIZEOF_INT, RowKeySchema.SIZEOF_LONG};
    RowKeySchema schema = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RowKeySchema(elements);
    
    RowKey rowkey = schema.createRowKey();
    rowkey.setHash(0, hashVal);
    rowkey.setInt(1, intVal);
    rowkey.setLong(2, longVal);
	  
    &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; bytes[] = rowkey.getBytes();

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13509431" author="dmeil" created="Tue, 4 Dec 2012 02:04:19 +0000"  >&lt;p&gt;Check out the v3 version of the patch with the RowKeySchema and RowKey.  Thanks!  (it was uploaded earlier today, but I thought I&apos;d state that explicitly)&lt;/p&gt;</comment>
                            <comment id="13509495" author="lhofhansl" created="Tue, 4 Dec 2012 04:23:58 +0000"  >&lt;p&gt;I think this will just paste over the interesting issues.&lt;br/&gt;
A composite rowkeys needs to be designed carefully for correct sorting.&lt;br/&gt;
-1 should sort before +1, etc. Just encoding/decoding with Bytes won&apos;t work.&lt;/p&gt;</comment>
                            <comment id="13509521" author="eclark" created="Tue, 4 Dec 2012 05:34:22 +0000"  >&lt;p&gt;I still am against naming anything RowKey.  It just invites confusion. I don&apos;t think that there&apos;s any plan to support passing these objects as a row key.  So in my opinion they shouldn&apos;t be named that way.  When a user searches on google/bing/duck duck go for hbase row key they should get the documentation about how they should structure a row key not some class that&apos;s named row key, but isn&apos;t actually the type to be passed in as a row key.&lt;/p&gt;

&lt;p&gt;Why not a more general builder style ?  &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-comment&quot;&gt;//Could just use magic numbers to represent replace.  Not sure how I feel about that
&lt;/span&gt;&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; HashPosition {
PREPEND,
APPEND,
REPLACE
}
&lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; Order {
ASSENDING, &lt;span class=&quot;code-comment&quot;&gt;//Smaller Numbers first
&lt;/span&gt;DESCENGING &lt;span class=&quot;code-comment&quot;&gt;//Larger numbers first
&lt;/span&gt;}
class CompositeRowKeyBuilder {
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder();
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numFields); &lt;span class=&quot;code-comment&quot;&gt;//&lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; exception &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the number of fields is off when build is called.
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numFields, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; expectedBytes); &lt;span class=&quot;code-comment&quot;&gt;//Same as above but allows &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; hint to ByteBuffer.
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; ByteBuffer bb = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ByteBuffer();
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder addHash(Hash hash, HashPosition position);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder add(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; s);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder add(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; s, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; length); &lt;span class=&quot;code-comment&quot;&gt;//We should be trying to encourage fixed keys &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; possible
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder add(Int i);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder add(Int i, Order o);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder add(&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt; l);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder add(&lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt; l, Order o);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder add(&lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt; d); &lt;span class=&quot;code-comment&quot;&gt;//Use something like Orderly&apos;s() formatting allowing the sorting of &lt;span class=&quot;code-object&quot;&gt;double&lt;/span&gt; and &lt;span class=&quot;code-object&quot;&gt;float&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder add(&lt;span class=&quot;code-object&quot;&gt;Double&lt;/span&gt; d, Order o);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder add(&lt;span class=&quot;code-object&quot;&gt;Float&lt;/span&gt; f);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder add(&lt;span class=&quot;code-object&quot;&gt;Float&lt;/span&gt; f, Order o);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; CompositeRowKeyBuilder add(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes);
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] build(); &lt;span class=&quot;code-comment&quot;&gt;//yes I know &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; breaks the builder pattern a little bit.  But I think it&apos;s worth it.
&lt;/span&gt;}
class ExamplUsage {
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[]args) {
CompositeRowKeyBuilder builder = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Builder();
&lt;span class=&quot;code-comment&quot;&gt;//rk should = MURUMUR_HASH(&lt;span class=&quot;code-quote&quot;&gt;&quot;TestString&quot;&lt;/span&gt;.getBytes + 100.toBytes) + &lt;span class=&quot;code-quote&quot;&gt;&quot;TestString&quot;&lt;/span&gt;.getBytes + 100.getBytes
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] rk = builder.addHash(Hash.MURUMUR, PREPEND).add(100).add(&lt;span class=&quot;code-quote&quot;&gt;&quot;TestString&quot;&lt;/span&gt;).build()

&lt;span class=&quot;code-comment&quot;&gt;//rkTwo = &lt;span class=&quot;code-quote&quot;&gt;&quot;MyOtherTestString&quot;&lt;/span&gt;.reverse().getBytes.
&lt;/span&gt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] rkTwo = builder.setHash(Hash.REVERSE, REPLACE).add(&lt;span class=&quot;code-quote&quot;&gt;&quot;MyOtherTestString&quot;&lt;/span&gt;).build()
}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thoughts ?&lt;/p&gt;</comment>
                            <comment id="13509529" author="lhofhansl" created="Tue, 4 Dec 2012 05:51:07 +0000"  >&lt;p&gt;Interface looks good (so does this idea, generally).&lt;/p&gt;

&lt;p&gt;But we are now (kind of) prescribing a way in which HBase should do its encoding.&lt;br/&gt;
It seems this is best handled by an external library (orderly or lily do this).&lt;/p&gt;

&lt;p&gt;Encoding numbers into correctly sorted byte[] is not entirely trivial, neither is separating variable length parts of the key, different users will have different needs. Are strings UTF8? what about special sorting for languages?&lt;br/&gt;
What about floats? They need to be encoded to sort correctly even considering their exponents (again there&apos;re libraries out there doing this already).&lt;/p&gt;

&lt;p&gt;At the same time everybody using HBase is building something like this, so maybe HBase should ship with a reasonable set of default encodings.&lt;/p&gt;</comment>
                            <comment id="13509726" author="dmeil" created="Tue, 4 Dec 2012 13:33:31 +0000"  >&lt;p&gt;re:  &quot;Interface looks good (so does this idea, generally).&quot;&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;re:  &quot;At the same time everybody using HBase is building something like this, so maybe HBase should ship with a reasonable set of default encodings.&quot;&lt;/p&gt;

&lt;p&gt;This is precisely why I&apos;m pushing this.  Key construction a common question on the dist-list, and HBase makes anything possible - but not much easy - in this critical area.&lt;/p&gt;

&lt;p&gt;re:  &quot;RowKey&quot;&lt;/p&gt;

&lt;p&gt;Change this class to FixedLengthRowKey?&lt;/p&gt;

&lt;p&gt;There are a lot of situations that are handled by the v3 proposal, and I also need to stress that this can not just create byte-arrays for keys, but also read them back (that was an addition in the v3 patch).  You can pass in a rowkey when processing a table and then pick out the parts if needed (not something that you can do with a builder).  &lt;/p&gt;

&lt;p&gt;re:  other encodings&lt;/p&gt;

&lt;p&gt;As for exotic coding, RowKey (referring to v3 name) does allow for a setBytes(position, byte[]) for you to do the encoding yourself if you want.  I was picking the most common datatypes used in key-construction, but this does not represent an exhaustive list.&lt;/p&gt;

&lt;p&gt;There are plenty of advance cases that this doesn&apos;t handle, such as variable length keys.  I think a builder is probably better for that pattern.  &lt;/p&gt;
</comment>
                            <comment id="13509729" author="dmeil" created="Tue, 4 Dec 2012 13:39:37 +0000"  >&lt;p&gt;Additionally, in terms of additional encodings RowKeySchema can be added with different options down the line.&lt;/p&gt;</comment>
                            <comment id="13509780" author="ivarley" created="Tue, 4 Dec 2012 14:55:17 +0000"  >&lt;p&gt;Cool! Looks good, we do something similar internally (as I&apos;m sure do most shops). Definitely lots of room for making this experience more natural for beginners, good on you Doug.&lt;/p&gt;

&lt;p&gt;My first thought, like Lars, was: why are we &quot;blessing&quot; int, long &amp;amp; MD5 hash? As opposed to setting bytes only, and having this class just help with the arranging part? Sure, you can always just use the &quot;setBytes/getBytes&quot; methods and ignore the other stuff, but I feel like adding specific types to the list is a slippery slope (but I have no data to back that feeling up. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Questions it raises for me:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;As Lars mentioned, do you want to use standard ints, or binary comparable like Lily does (where the sign&apos;s at the end)?&lt;/li&gt;
	&lt;li&gt;What about Date objects? They&apos;ll be really common in row keys, of course. But, they&apos;re also easy to change into a long.&lt;/li&gt;
	&lt;li&gt;What about ways to indicate that something should be reverse ordered (descending), via bit inversion?&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;If you stripped this down to just getByte(s)/setByte(s), would it still be useful? Seems like that&apos;s got the lion&apos;s share of the pattern there. Maybe then a subclass that adds common encodings (doing it as a subclass maybe makes it more obvious that this is just one set of encodings, and anybody else can do likewise).&lt;/p&gt;

&lt;p&gt;Anyway, what you have seems straightforward enough that adding it might point some people in the right direction, without getting too fancy.&lt;/p&gt;

&lt;p&gt;Also, seems like this should go in the forthcoming hbase-client module, y? Elliott, what&apos;s the timeline for that?&lt;/p&gt;</comment>
                            <comment id="13509823" author="dmeil" created="Tue, 4 Dec 2012 16:06:11 +0000"  >&lt;p&gt;Thanks Ian!&lt;/p&gt;

&lt;p&gt;re:  &quot;why are we &quot;blessing&quot; int, long &amp;amp; MD5 hash?&quot;&lt;/p&gt;

&lt;p&gt;For this I have to refer to my prevent comment on HBase making anything possible but not much &quot;easy&quot; in terms of rowkey construction.  I think between those datatypes it represents the commonly used key-element datatypes.  And it makes it easy (i.e., will do the encoding/decoding for you).&lt;/p&gt;

&lt;p&gt;But you can always use setBytes if you want to do something custom (and getBytes for that position too).&lt;/p&gt;

&lt;p&gt;re:  &quot;Anyway, what you have seems straightforward enough that adding it might point some people in the right direction, without getting too fancy.&quot;&lt;/p&gt;

&lt;p&gt;Yep, that was the intent.  You can always drop down to doing it 100% yourself, but this handles a lot of cases.&lt;/p&gt;</comment>
                            <comment id="13510472" author="dmeil" created="Wed, 5 Dec 2012 13:41:44 +0000"  >&lt;p&gt;So what now?  Seems like there is general agreement that something like this would be a good idea.  And we all agree that there are plenty of edge cases that this doesn&apos;t cover.&lt;/p&gt;

&lt;p&gt;One thing to mention re: alternate encodings...   I think this pattern is extensible and RowKeySchema can be augmented for different encoding strategies, while still keeping the easy-to-use that exists in the RowKey class.&lt;/p&gt;

&lt;p&gt;As for class-names, Elliot isn&apos;t crazy about the name RowKey.  FixedLengthRowKey?&lt;/p&gt;

&lt;p&gt;As for variable length keys (e.g., for people that still insist on using Strings in keys), that&apos;s not a pattern that this class supports.  I think you&apos;d have to use delimiters between fields in that case, but that&apos;s seems like it could be supported in a subsequent patch (e.g., VariableLengthRowKey) in a different ticket. &lt;/p&gt;

&lt;p&gt;Thanks everybody for the review effort!&lt;/p&gt;</comment>
                            <comment id="13530712" author="hadoopqa" created="Thu, 13 Dec 2012 05:55:56 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12555763/hbase-common_hbase_7221_v3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12555763/hbase-common_hbase_7221_v3.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 104 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 27 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/3510//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13535002" author="dmeil" created="Tue, 18 Dec 2012 16:08:10 +0000"  >
&lt;p&gt;Summary:&lt;/p&gt;

&lt;p&gt;1) LarsH was generally ok with this approach as long as it used a proposed new method in Bytes that would retain sort order negative-to-positive (which Bytes currently doesn&apos;t support).  This would be in a different Jira.&lt;/p&gt;

&lt;p&gt;2) The class RowKey would be changed to something like FixedLengthRowKey.  RowKeySchema is ok.&lt;/p&gt;

&lt;p&gt;Email chain for posterity...&lt;/p&gt;

&lt;p&gt;From: lars hofhansl &amp;lt;lhofhansl@yahoo.com&amp;gt;&lt;br/&gt;
Reply-To: lars hofhansl &amp;lt;lhofhansl@yahoo.com&amp;gt;&lt;br/&gt;
Date: Tuesday, December 11, 2012 2:53 PM&lt;br/&gt;
To: Doug Meil &amp;lt;doug.meil@explorysmedical.com&amp;gt;, Andrew Johnson &amp;lt;andrew.johnson@explorys.com&amp;gt;, Ian Varley &amp;lt;ivarley@salesforce.com&amp;gt;, Elliott Clark &amp;lt;eclark84@gmail.com&amp;gt;, &quot;stack@duboce.net&quot; &amp;lt;stack@duboce.net&amp;gt;&lt;br/&gt;
Subject: Re: hbase-7221?&lt;/p&gt;

&lt;p&gt;Bytes.toBytes can&apos;t change. It needs to be efficient. We need a new method.&lt;br/&gt;
The RowKeyBuilder (or whatever we&apos;ll call) should use that. It won&apos;t useful (IMHO) until we have that method finished.&lt;/p&gt;

&lt;p&gt;&amp;#8211; Lars&lt;/p&gt;

&lt;p&gt;From: Doug Meil &amp;lt;doug.meil@explorysmedical.com&amp;gt;&lt;br/&gt;
To: lars hofhansl &amp;lt;lhofhansl@yahoo.com&amp;gt;; Andrew Johnson &amp;lt;andrew.johnson@explorys.com&amp;gt;; Ian Varley &amp;lt;ivarley@salesforce.com&amp;gt;; Elliott Clark &amp;lt;eclark84@gmail.com&amp;gt;; &quot;stack@duboce.net&quot; &amp;lt;stack@duboce.net&amp;gt; &lt;br/&gt;
Sent: Tuesday, December 11, 2012 11:40 AM&lt;br/&gt;
Subject: Re: hbase-7221?&lt;/p&gt;


&lt;p&gt;Hey Lars, is that the plan?  Separate ticket for the new Bytes.toBytes method?&lt;/p&gt;

&lt;p&gt;Do you want to update the Jira for 7221 for the agreement or do you want me to?&lt;/p&gt;



&lt;p&gt;From: Doug Meil &amp;lt;doug.meil@explorysmedical.com&amp;gt;&lt;br/&gt;
Date: Friday, December 7, 2012 4:13 PM&lt;br/&gt;
To: lars hofhansl &amp;lt;lhofhansl@yahoo.com&amp;gt;, Andrew Johnson &amp;lt;andrew.johnson@explorys.com&amp;gt;, Ian Varley &amp;lt;ivarley@salesforce.com&amp;gt;, Elliott Clark &amp;lt;eclark84@gmail.com&amp;gt;, &quot;stack@duboce.net&quot; &amp;lt;stack@duboce.net&amp;gt;&lt;br/&gt;
Subject: Re: hbase-7221?&lt;/p&gt;


&lt;p&gt;Works for me.  And also some serious JavaDoc is needed around the existing Bytes.toBytes methods documenting the issue so people aren&apos;t surprised.  These are items in a different Jira though, right?&lt;/p&gt;

&lt;p&gt;And then RowKey uses the new toBytes method.&lt;/p&gt;

&lt;p&gt;We should carry a summary of this conversation back into the Jira for 7221.  &lt;/p&gt;

&lt;p&gt;Thanks, Lars!&lt;/p&gt;
</comment>
                            <comment id="13559221" author="ndimiduk" created="Mon, 21 Jan 2013 23:58:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;1) LarsH was generally ok with this approach as long as it used a proposed new method in Bytes that would retain sort order negative-to-positive (which Bytes currently doesn&apos;t support). This would be in a different Jira.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was just speaking with the original author of the Orderly library about implementing an &lt;tt&gt;OrderedBytes&lt;/tt&gt; utility class for Java primitives, based on his implementation. Have you created this related ticket?&lt;/p&gt;</comment>
                            <comment id="13559275" author="enis" created="Tue, 22 Jan 2013 01:37:30 +0000"  >&lt;p&gt;Good utility class. I think there is nothing specific to row keys, we might as well just call it CompositeKey. There might be uses cases where you compose your column names as well. &lt;/p&gt;</comment>
                            <comment id="13559385" author="lhofhansl" created="Tue, 22 Jan 2013 04:22:54 +0000"  >&lt;p&gt;Sorry, have been quiet here. Orderly and Lily have code for this. We could either lift the code from there (license permitting) or include one of these libraries (again license permitting).&lt;/p&gt;

&lt;p&gt;We also have build encoders for primitive types in our Phoenix (SQL on HBase) project - to be open sourced soon hopefully. I&apos;m sure we could donate those before the release of Phoenix (&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=giacomotaylor&quot; class=&quot;user-hover&quot; rel=&quot;giacomotaylor&quot;&gt;James Taylor&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;So to be clear, we are all agreeing that we need two facilities: one to encode primitive values into byte[]&apos;s suitable for sorting, and another one to build composite keys. Right?&lt;/p&gt;

&lt;p&gt;That would clearly be a good step for HBase. (1) it would introduce a &quot;standard&quot; way to encode primitive type and (2) it would help with the recurring task of build composite keys (something each and every user of HBase has to build eventually).&lt;/p&gt;</comment>
                            <comment id="13559434" author="enis" created="Tue, 22 Jan 2013 06:52:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;We also have build encoders for primitive types in our Phoenix (SQL on HBase) project - to be open sourced soon hopefully. I&apos;m sure we could donate those before the release of Phoenix (James Taylor).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That is great to hear. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;So to be clear, we are all agreeing that we need two facilities: one to encode primitive values into byte[]&apos;s suitable for sorting, and another one to build composite keys. Right?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, but I see them as a single API we, as HBase project, expose (or recommend) to users as the type system. Actually, since I also would like Hive and Phoenix (and other SQL-over-hbase) libs to share the same SQL types-to-byte[] model as well, but that is another discussion I guess. &lt;/p&gt;</comment>
                            <comment id="13559445" author="lhofhansl" created="Tue, 22 Jan 2013 07:26:50 +0000"  >&lt;p&gt;Good point. Whatever we do should possibly integrate into Hive (and hence into Impala eventually).&lt;/p&gt;</comment>
                            <comment id="13560263" author="dmeil" created="Wed, 23 Jan 2013 00:54:29 +0000"  >&lt;p&gt;@Enis.&lt;/p&gt;

&lt;p&gt;re:  &quot;Good utility class.&quot;&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;

&lt;p&gt;re:  &quot;I think there is nothing specific to row keys, we might as well just call it CompositeKey. &quot;&lt;/p&gt;

&lt;p&gt;Per one of the feedback items earlier I was going to rename RowKey to FixedLengthRowKey and resubmit.  CompositeKey would work too.  But in this version I hadn&apos;t designed support yet for variable length keys (e.g., strings) and I figured that would be handled in another class called VariableLengthRowKey.&lt;/p&gt;

&lt;p&gt;Thoughts on this?&lt;/p&gt;</comment>
                            <comment id="13560356" author="ndimiduk" created="Wed, 23 Jan 2013 03:17:43 +0000"  >&lt;p&gt;I very much agree HBase should provide a canonical tool for building things like compound byte-arrays. Overall, I don&apos;t like the idea of a stateful utility class, so -1.&lt;/p&gt;

&lt;p&gt;This would be much more elegant (and less bug-prone) via a static method and an approach similar to the format-string style. The major down-side being you&apos;d need a mini-language for representing these formats. The example in your class header, under this approach, would something like &lt;tt&gt;byte[] key = RowKey.format(&quot;%16x%4d%8d&quot;, hashVal, intVal, longVal);&lt;/tt&gt;. With a &lt;tt&gt;Formatter&lt;/tt&gt; implemented, you could have an accessor static method, call it &lt;tt&gt;split&lt;/tt&gt;, that behaved similarly, ie &lt;tt&gt;byte[][] splits = RowKey.split(&quot;%16x%4d%8d&quot;, key);&lt;/tt&gt;. The key idea here being the format and split strings are of identical form. Then the consumer can decide how to re-interpret the splits. Or maybe you get fancy with out-parameters or something, but that doesn&apos;t seem idiomatic.&lt;/p&gt;

&lt;p&gt;general nit: your line-lengths are well past 100 characters in some cases.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 * A stateful utility class &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; creating rowkeys &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; HBase tables, particularly composite keys.  RowKey
 * creates fixed length keys without the need &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; delimeters in between key elements (i.e., parts of the 
 * rowkey), which is a best practice in HBase.  A RowKey instance is instantiated from an associated RowKeySchema, 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nit: s/delimeters/delimiters&lt;/p&gt;

&lt;p&gt;nit: RowKeySchema has superfluous imports.&lt;/p&gt;

&lt;p&gt;nit: TestRowKey has superfluous imports.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; passed = &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
      RowKey rowkey = schema.createRowKey();
      rowkey.setHash(1, intVal);  &lt;span class=&quot;code-comment&quot;&gt;// trying to set &apos;&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;&apos; on an element that is sized &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; a hash.
&lt;/span&gt;    } &lt;span class=&quot;code-keyword&quot;&gt;catch&lt;/span&gt; (Exception e) {
	    &lt;span class=&quot;code-comment&quot;&gt;// we are expecting a sizing exception because we are setting a hash onto an element
&lt;/span&gt;	    &lt;span class=&quot;code-comment&quot;&gt;// sized &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; an &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt;.
&lt;/span&gt;	    passed = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
    }
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (passed) {
      Assert.fail(&lt;span class=&quot;code-quote&quot;&gt;&quot;Test did not fail!&quot;&lt;/span&gt;);
     }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;nit: forego this &lt;tt&gt;passed&lt;/tt&gt; business and put your assert right inline.&lt;/p&gt;</comment>
                            <comment id="13560398" author="lhofhansl" created="Wed, 23 Jan 2013 05:05:42 +0000"  >&lt;p&gt;A consideration here also will be performance. Parsing out the format string on each creation will be slow. I do like the stateless approach.&lt;/p&gt;</comment>
                            <comment id="13560714" author="dmeil" created="Wed, 23 Jan 2013 14:24:30 +0000"  >
&lt;p&gt;This parsing approach...&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] key = RowKey.format(&lt;span class=&quot;code-quote&quot;&gt;&quot;%16x%4d%8d&quot;&lt;/span&gt;, hashVal, intVal, longVal);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;... seems a lot less understandable to me than the proposal.  It also doesn&apos;t address reading components back, which is why the RowKey (aka FixedLengthKey/ComponentKey) needs to have state.  I don&apos;t think it&apos;s enough just to have a builder pattern, people need some way of reading and processing the key.  It&apos;s not just about the writes.&lt;/p&gt;
</comment>
                            <comment id="13562666" author="dmeil" created="Fri, 25 Jan 2013 13:29:21 +0000"  >&lt;p&gt;Hi folks.  The issue with the stateless approach is that nobody has a proposal that will work with both writing &lt;b&gt;and&lt;/b&gt; reading the key.  And given the high intelligence of the folks already commenting on this ticket means that the probability of such an approach existing is slim, because if it was obvious I think somebody would have thought of it by now.  I don&apos;t see how this can be anything but a stateful object.&lt;/p&gt;</comment>
                            <comment id="13562830" author="ndimiduk" created="Fri, 25 Jan 2013 16:55:46 +0000"  >&lt;p&gt;The obvious stateless parser would model existing Java&apos;s Regex APIs: &quot;compile&quot; your format string and then use a Parser to consume the byte[]. There may be a more clever approach but, as you say, no one has volunteered any ideas. To the point both you and Lars made, a stateful implementation is likely faster, but then I have to assume the presence of wisdom in the C-wielding database implementers of old who chose the stateless approach for such things.&lt;/p&gt;

&lt;p&gt;I believe as you do that this kind of functionality should be packaged with HBase. Until I have opportunity to produce an alternate patch for consideration, I&apos;ll revoke my -1 from the approach of your implementation. However, I maintain the -1 regarding the nits I pointed out.&lt;/p&gt;</comment>
                            <comment id="13563034" author="dmeil" created="Fri, 25 Jan 2013 21:04:12 +0000"  >&lt;p&gt;Thanks Nick!  Agree on the -1 on the nits, I&apos;ll fix that.  I appreciate the revocation of the -1 on the approach.    &lt;/p&gt;</comment>
                            <comment id="13578648" author="dmeil" created="Thu, 14 Feb 2013 20:34:56 +0000"  >
&lt;p&gt;Attaching v4 patch with requested refactoring and some other things.&lt;/p&gt;

&lt;p&gt;Changed package - org.apache.hbase.schema (formerly was in util).  There are more classes and I thought adding all of it to util would be too much.&lt;/p&gt;

&lt;p&gt;Handles multiple hash-functions (now Murmur as well as MD5)&lt;/p&gt;

&lt;p&gt;Strategy pattern for data conversion (i.e., the -1/0/1 sorting issue with Bytes utility).  If you want your own, you can subclass and plug in on RowKeySchema.&lt;/p&gt;

&lt;p&gt;Builder pattern on RowKeySchema. &lt;/p&gt;

&lt;p&gt;Changed RowKey to FixedLengthRowKey (this is still stateful because it has both write and read support).&lt;/p&gt;</comment>
                            <comment id="13579169" author="dmeil" created="Fri, 15 Feb 2013 13:29:00 +0000"  >&lt;p&gt;Hold it, there&apos;s one issue:  MurmurHash in org.apache.hadoop.hbase.util disappeared.  I need to fix.&lt;/p&gt;</comment>
                            <comment id="13579171" author="dmeil" created="Fri, 15 Feb 2013 13:29:26 +0000"  >&lt;p&gt;See previous comment about MurmurHash.&lt;/p&gt;</comment>
                            <comment id="13579173" author="dmeil" created="Fri, 15 Feb 2013 13:34:30 +0000"  >&lt;p&gt;The actual issue is this patch is in &quot;common&quot; but MurmurHash still exists, but it&apos;s in &quot;server&quot;.  If this patch is going to use MurmurHash it needs to be in &quot;server&quot;.&lt;/p&gt;</comment>
                            <comment id="13579209" author="dmeil" created="Fri, 15 Feb 2013 14:27:19 +0000"  >
&lt;p&gt;Ok, sorry about the previous confusion.  Summary of changes from the previous reviews:&lt;/p&gt;

&lt;p&gt;Changed package - org.apache.hbase.schema (formerly was in util). There are more classes and I thought adding all of it to util would be too much.&lt;/p&gt;

&lt;p&gt;Handles multiple hash-functions (now Murmur as well as MD5)&lt;/p&gt;

&lt;p&gt;Strategy pattern for data conversion (i.e., the -1/0/1 sorting issue with Bytes utility). If you want your own, you can subclass and plug in on RowKeySchema.&lt;/p&gt;

&lt;p&gt;Builder pattern on RowKeySchema.&lt;/p&gt;

&lt;p&gt;Changed RowKey to FixedLengthRowKey (this is still stateful because it has both write and read support).&lt;/p&gt;

&lt;p&gt;ALSO:  moved from hbase-common to hbase-server.  This was a necessity because MurmurHash is in hbase-server.&lt;/p&gt;</comment>
                            <comment id="13579217" author="hadoopqa" created="Fri, 15 Feb 2013 14:47:58 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12569548/hbase-server_hbase_7221_v5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12569548/hbase-server_hbase_7221_v5.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces lines longer than 100&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.TestCheckTestClasses&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4443//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13580829" author="dmeil" created="Mon, 18 Feb 2013 20:56:11 +0000"  >&lt;p&gt;Hey folks, can I ask you to give the v5 patch a review?  Thanks!&lt;/p&gt;</comment>
                            <comment id="13582966" author="lhofhansl" created="Thu, 21 Feb 2013 06:40:59 +0000"  >&lt;p&gt;Sorry for being a parti-pooper, but I still think that this causing more harm than good if it does not include a sorting encoder - one that sorts UTF-8 string, ints, longs, floats, into a byte[] that sorts lexicographically according to the datatypes.&lt;br/&gt;
I one can plug it in, but at least there would need to be an indication somewhere whether you want to sort ascending or descending.&lt;/p&gt;</comment>
                            <comment id="13583419" author="dmeil" created="Thu, 21 Feb 2013 18:39:07 +0000"  >&lt;p&gt;Lars, I believe the pluggable RowKeyDataConverter RowKeySchema addresses that.  The default implementation uses Bytes, however this is a pluggable strategy and the user has full control over this.  Bytes isn&apos;t burned into the FixedLengthRowKey implementation like before.&lt;/p&gt;</comment>
                            <comment id="13583426" author="dmeil" created="Thu, 21 Feb 2013 18:49:35 +0000"  >&lt;p&gt;Arguably, one thing that is missing is Javadoc in the default implementation describing the -1/0/1 ordering issue with Bytes.  This might not affect most people, but it affects some.  But if somebody wants to use Lily for data conversion, that&apos;s their call - and the design supports plugging in their own converter.&lt;/p&gt;
</comment>
                            <comment id="13583893" author="lhofhansl" created="Fri, 22 Feb 2013 04:01:29 +0000"  >&lt;p&gt;Oh yeah, the pluggable converters are perfect.&lt;br/&gt;
The only part I wanted to point out is that there should be an indication about asc/desc sort order, so that this is generally useful.&lt;/p&gt;</comment>
                            <comment id="13584250" author="dmeil" created="Fri, 22 Feb 2013 13:24:53 +0000"  >&lt;p&gt;So +1 then with an update on the Javadoc of the default converter?  That&apos;s really all that&apos;s missing.&lt;/p&gt;</comment>
                            <comment id="13584562" author="dmeil" created="Fri, 22 Feb 2013 19:15:40 +0000"  >
&lt;p&gt;Made RowKeyDataConverter an abstract class&lt;/p&gt;

&lt;p&gt;Created RowKeyBytesDataConverter the default implementation (i.e., uses Bytes utility)&lt;/p&gt;

&lt;p&gt;Added Javadoc explanation of the implications of Bytes sort order in RowKeyBytesDataConverter.&lt;/p&gt;

&lt;p&gt;Added reference in RowKeySchema that RowKeyBytesDataConverter is the default strategy.&lt;/p&gt;</comment>
                            <comment id="13584565" author="dmeil" created="Fri, 22 Feb 2013 19:17:05 +0000"  >&lt;p&gt;v6 patch has been added with Javadoc changes, plus making RowKeyDataConverter and abstract class with RowKeyBytesDataConverter the default implementation (it&apos;s still a pluggable pattern as before though).&lt;/p&gt;</comment>
                            <comment id="13584577" author="lhofhansl" created="Fri, 22 Feb 2013 19:28:41 +0000"  >&lt;p&gt;What I was trying to say is that in the builder we should be able to indicate whether a key part is sorting ascending or descending, even though this is not used by the default converter. We can default it to ascending.&lt;/p&gt;

&lt;p&gt;I think without this it is not future proof. Does this make sense?&lt;/p&gt;</comment>
                            <comment id="13584597" author="dmeil" created="Fri, 22 Feb 2013 19:49:56 +0000"  >&lt;p&gt;I think configurable sort order is a good idea, but I think that is another ticket.  For what this proposal was trying to achieve it addresses the concerns.  Is that reasonable? &lt;/p&gt;</comment>
                            <comment id="13584634" author="hadoopqa" created="Fri, 22 Feb 2013 20:21:56 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12570515/hbase-server_hbase_7221_v6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12570515/hbase-server_hbase_7221_v6.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4497//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13585848" author="dmeil" created="Mon, 25 Feb 2013 13:24:42 +0000"  >&lt;p&gt;Lars?  Is that reasonable?  If somebody wants to use reverse-timestamp pattern (e.g., Long.MAX_VALUE - val) with this utility there is nothing stopping them.  It just won&apos;t do it automatically (just like everybody else has to do now).  I think this patch is ready, but it can still be extended in the future e.g., &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;builder.add(RowKeySchema.INT, descending)&lt;br/&gt;
(code}&lt;br/&gt;
... but I&apos;d rather not add half-implemented placeholders at this point.&lt;/p&gt;
</comment>
                            <comment id="13586516" author="lhofhansl" created="Tue, 26 Feb 2013 00:25:29 +0000"  >&lt;p&gt;Fair enough.&lt;br/&gt;
How does that relate to Nick&apos;s work on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt;? Do you see these as complimentary?&lt;/p&gt;

&lt;p&gt;We had way too much discussion for a feature like, and I apologize. Just seems important to get this right. Having some kind of standard key-building facility is essential for HBase (IMHO), and will lay the foundation for features layered on top of HBase (such as 2ndary indexes, etc).&lt;/p&gt;</comment>
                            <comment id="13586559" author="ndimiduk" created="Tue, 26 Feb 2013 01:02:47 +0000"  >&lt;p&gt;Orderly, via &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt;, does provide a similar builder interface. However, as I mentioned in my &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692?focusedCommentId=13584720&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13584720&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;example&lt;/a&gt;, it doesn&apos;t implement any hashing strategies for the user. It also provides for specifying the order of serialized results.&lt;/p&gt;</comment>
                            <comment id="13587194" author="dmeil" created="Tue, 26 Feb 2013 15:27:35 +0000"  >&lt;p&gt;Lars, no problem on the discussion.  It made the patch better.&lt;/p&gt;

&lt;p&gt;I think this and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt; can be complementary because another RowKeyDataConverter implementation can be added using Orderly.&lt;/p&gt;</comment>
                            <comment id="13587777" author="lhofhansl" created="Wed, 27 Feb 2013 00:17:55 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=dmeil&quot; class=&quot;user-hover&quot; rel=&quot;dmeil&quot;&gt;Doug Meil&lt;/a&gt; Sounds reasonably to me, as long as these two patches are indeed complementary and work can work together.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu%40apache.org&quot; class=&quot;user-hover&quot; rel=&quot;tedyu@apache.org&quot;&gt;Ted Yu&lt;/a&gt;, any comments?&lt;/p&gt;</comment>
                            <comment id="13587857" author="ndimiduk" created="Wed, 27 Feb 2013 01:41:02 +0000"  >&lt;p&gt;I believe this ticket is redundant to, not compatible with, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt;. They tread similar ground but with different intention. Please correct me if I&apos;m wrong, but this ticket seeks to add a convenience for building byte[] values from component pieces and make it easy to read the pieces back out again. It it only mentions ordering of the serialized representation by way of &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;&apos;s &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7221?focusedCommentId=13584577&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13584577&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;comment&lt;/a&gt;; it otherwise does not address the issue. &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt; directly targets the ordered serialization problem. It also provides an implementation for building byte[]s from component pieces, which is built on top of the ordered serialization implementation. The result is a composite byte[] that maintains sort order with respect to the components.&lt;/p&gt;

&lt;p&gt;By my read, RowKeySchema in this ticket looks roughly equivalent to StructRowKey added in 7692. Both encapsulate an ordered sequence of serializable &lt;b&gt;types&lt;/b&gt;. FixedLengthRowKey in this ticket handles reading and writing &lt;b&gt;values&lt;/b&gt; to a byte[] according to the RowKeySchema. In 7692, these operations are encapsulated in the serialize, deserialize methods on StructRowKey, which in turn delegate to the component &amp;#42;RowKey implementations. This ticket&apos;s RowKeyElement class appears to use a fixed-length data encoding implicitly because it does not rely on the value under question to produce an encoded length. In 7692, this concern is delegated to the &amp;#42;RowKey implementations. This ticket provides explicit support for hashing byte[] values using either of two provided algorithms. 7692 does no hashing for the user as it stands. This feature could be added if desired.&lt;/p&gt;

&lt;p&gt;The major difference is in this ticket&apos;s RowKeyDataConverter. It does the work serializing and deserializing values. It does so using the existing util.Bytes. This is where &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt; aims to provide an entirely different feature: a serialization format that preserves order consistent with the natural representation. It does so via the rest of the &amp;#42;RowKey implementations.&lt;/p&gt;

&lt;p&gt;Yes, a RowKeyDataConverter could be implemented that made use of the serializers in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt;. It would make decisions for the user regarding how to represent the data, including whether to use a fixed- or variable-width encoding format (features not provided by this ticket).&lt;/p&gt;

&lt;p&gt;There is one other key feature that is omitted from both implementations under discussion. Neither implementation goes the extra mile of serializing schema details into the representations they produce (see also: Avro). I think this is an extremely useful (necessary) feature for a long-term serialization format. Without this, any change to decisions we make here will require rewriting data stored in a previous format. I&apos;ve not investigated how/if this can be done while maintaining the order-preserving nature of the serialization strategy. It may be that the two features are mutually exclusive by some necessity of one or the other.&lt;/p&gt;</comment>
                            <comment id="13588383" author="dmeil" created="Wed, 27 Feb 2013 14:33:13 +0000"  >&lt;p&gt;I&apos;m out of office today, I will respond on 2-28-2013&lt;/p&gt;</comment>
                            <comment id="13589713" author="dmeil" created="Thu, 28 Feb 2013 17:52:22 +0000"  >
&lt;p&gt;I must say that the class names in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt; are similar to those in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7221&quot; title=&quot;[experiment] RowKey utility class for rowkey construction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7221&quot;&gt;&lt;del&gt;HBASE-7221&lt;/del&gt;&lt;/a&gt;, which isn&#8217;t entirely surprising because &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7221&quot; title=&quot;[experiment] RowKey utility class for rowkey construction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7221&quot;&gt;&lt;del&gt;HBASE-7221&lt;/del&gt;&lt;/a&gt; is the ticket that started this whole rowkey construction conversation in the first place.&lt;/p&gt;

&lt;p&gt;StructRowKey (7692) is basically a RowKeySchema (7221).  And 7692 also has similar sounding-class names:  BigDecimalRowKey, IntWritableRowKey, LongRowKey, LongWritableRowKey.&lt;/p&gt;

&lt;p&gt;But I think that 7692 is mixing terms and is harder to use and understand.  7221 refers to a RowKey as the &#8220;whole key&#8221; (e.g., 7221&#8217;s FixedLengthRowKey) which is consistent with that usage in HBase, whereas a part of a RowKey in 7221 is called a RowKeyElement.  To constrast 7692&apos;s classnames, is BigDecimalRowKey the whole thing?  Or a part of the rowkey?&lt;/p&gt;

&lt;p&gt;The hashing, while it can be added to 7692, was designed in from the get-go with 7221 because that&#8217;s the way we recommend folks to build keys.  Lars/Ian, as you pointed out earlier in this ticket there is a reason that you found the 7221 approach familiar even in the first approach - because it&#8217;s similar to what you did internally.&lt;/p&gt;

&lt;p&gt;Personally, I think this the 7221 approach is easier to understand and use, and still has safety-nets built-in for length testing on setters.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
RowKeySchema schema = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RowKeySchema.Builder()
 .add(RowKeySchema.MD5_HASH)
 .add(RowKeySchema.INT)
 .add(RowKeySchema.LONG)
 .add(RowKeySchema.BYTE)
 .add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RowKeyBytesElement(bytesVal.length)) 
 .build();
   
FixedLengthRowKey rowkey = schema.createFixedLengthRowKey();
rowkey.setInt(0, hashVal);  &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; will hash the &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; because the schema definition says so.
&lt;/span&gt;rowkey.setInt(1, intVal);
rowkey.setLong(2, longVal);
rowkey.setByte(3, byteVal);
rowkey.setBytes(4, bytesVal);

&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; bytes[] = rowkey.getBytes();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I would like to point out that I like that 7692 already has variable-length key support (e.g., if folks use URLs inside of keys).  That would need a class called VariableLengthRowKey to support that with the RowKeySchema approach (another patch).&lt;/p&gt;</comment>
                            <comment id="13589917" author="ndimiduk" created="Thu, 28 Feb 2013 20:59:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;I must say that the class names in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt; are similar to those in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7221&quot; title=&quot;[experiment] RowKey utility class for rowkey construction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7221&quot;&gt;&lt;del&gt;HBASE-7221&lt;/del&gt;&lt;/a&gt;, which isn&#8217;t entirely surprising because &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7221&quot; title=&quot;[experiment] RowKey utility class for rowkey construction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7221&quot;&gt;&lt;del&gt;HBASE-7221&lt;/del&gt;&lt;/a&gt; is the ticket that started this whole rowkey construction conversation in the first place.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Indeed they are similar, but on why I cannot remark. In 7692 simply used what Orderly provides. Personally, I think &lt;tt&gt;RowKey&lt;/tt&gt; should not be a part of the name in either API; these are not just for rowkeys but for anywhere the existing Client API expects a &lt;tt&gt;byte[]&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Personally, I wish the user didn&apos;t have to think about any of this. HBase should ship with it&apos;s own type-system, have convenient constructors for those types based on Java types, and be done with it. Forcing the user to think about this as being used for a rowkey vs a column qualifier vs a value is unnecessary cognitive overhead that we &lt;b&gt;should&lt;/b&gt; avoid. When I want to use a constant like &lt;tt&gt;5&lt;/tt&gt; in a SQL expression, I just type &lt;tt&gt;5&lt;/tt&gt; and the system handles coercing it into the appropriate system type; that&apos;s it. Likewise, I should be able write &lt;tt&gt;Get g = new Get(5).addColumn(&quot;c1&quot;, 12);&lt;/tt&gt;. But I digress.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But I think that 7692 is mixing terms and is harder to use and understand. 7221 refers to a RowKey as the &#8220;whole key&#8221; (e.g., 7221&#8217;s FixedLengthRowKey) which is consistent with that usage in HBase, whereas a part of a RowKey in 7221 is called a RowKeyElement. To contrast 7692&apos;s classnames, is BigDecimalRowKey the whole thing? Or a part of the rowkey?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed. 7692 is designed to solve a different problem than this ticket. It just happens to also include the feature described here. Both patches use the term &quot;RowKey&quot; in their API, to their detriment. This confusion is why I don&apos;t like &lt;tt&gt;RowKey&lt;/tt&gt; used in these APIs. In Orderly, any of the &lt;tt&gt;*RowKey&lt;/tt&gt; types can be used to create &lt;tt&gt;byte[]}}s for use in any context. So yes, {{BigDecimalRowKey&lt;/tt&gt; produces a &lt;tt&gt;byte[]&lt;/tt&gt; so it can be used as a stand-alone rowkey or as part of a compound rowkey, as desired. The &lt;tt&gt;StructRowKey&lt;/tt&gt;, roughly analogous to this ticket&apos;s &lt;tt&gt;FixedLengthRowKey&lt;/tt&gt;, is just another way to produce a &lt;tt&gt;byte[]&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The Orderly library has the added benefit of providing both fixed-length and variable-length encodings for the applicable types. It also includes support for specifying serialization order, a necessary consideration when implementing an HBase schema, something this ticket&apos;s latest patch cannot provide because of its dependency on &lt;tt&gt;Bytes&lt;/tt&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;The hashing, while it can be added to 7692, was designed in from the get-go with 7221 because that&#8217;s the way we recommend folks to build keys. Lars/Ian, as you pointed out earlier in this ticket there is a reason that you found the 7221 approach familiar even in the first approach - because it&#8217;s similar to what you did internally.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;7692 can easily add support for hashing. Further, that support can be mixed with variable-length components. Otherwise, what we have here is a stylistic approach &amp;#8211; the builder pattern vs the format-string approach. This is a matter of taste, upon which the &apos;Client&apos; component owners should comment.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Personally, I think this the 7221 approach is easier to understand and use, and still has safety-nets built-in for length testing on setters.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Again, this is a difference of opinion between you and I, consistent with my initial comments in this ticket about using the format-string style instead of builders. The &quot;safety-net&quot; is an implementation detail of any fixed-length implementation; this is provided by implementations attached to both tickets.&lt;/p&gt;</comment>
                            <comment id="13590941" author="dmeil" created="Fri, 1 Mar 2013 21:07:55 +0000"  >&lt;p&gt;Thanks Nick, I appreciate the detailed feedback.  I concur that getting some more opinions on this as you suggested (Client component) would be beneficial.&lt;/p&gt;</comment>
                            <comment id="13597178" author="dmeil" created="Fri, 8 Mar 2013 14:43:10 +0000"  >&lt;p&gt;Marking as &quot;won&apos;t fix&quot; per conference call on the HBase client on 3-5-2013 with folks on this ticket.  This ticket will be linked from a new Jira to be created on serialized types and rowkey utility construction and schemas.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12636797">HBASE-8089</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12554921" name="HBASE_7221.patch" size="8111" author="dmeil" created="Mon, 26 Nov 2012 21:58:18 +0000"/>
                            <attachment id="12555350" name="hbase-common_hbase_7221_2.patch" size="8269" author="dmeil" created="Thu, 29 Nov 2012 13:38:32 +0000"/>
                            <attachment id="12555763" name="hbase-common_hbase_7221_v3.patch" size="14848" author="dmeil" created="Mon, 3 Dec 2012 15:11:04 +0000"/>
                            <attachment id="12569382" name="hbase-common_hbase_7221_v4.patch" size="31936" author="dmeil" created="Thu, 14 Feb 2013 20:34:56 +0000"/>
                            <attachment id="12569548" name="hbase-server_hbase_7221_v5.patch" size="31934" author="dmeil" created="Fri, 15 Feb 2013 14:27:19 +0000"/>
                            <attachment id="12570515" name="hbase-server_hbase_7221_v6.patch" size="34563" author="dmeil" created="Fri, 22 Feb 2013 19:15:40 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 26 Nov 2012 23:00:53 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>292213</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 41 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0rslj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>160277</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>