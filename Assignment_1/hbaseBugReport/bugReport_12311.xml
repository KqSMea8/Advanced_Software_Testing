<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:31:46 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-12311/HBASE-12311.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-12311] Version stats in HFiles?</title>
                <link>https://issues.apache.org/jira/browse/HBASE-12311</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;In &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9778&quot; title=&quot;Add hint to ExplicitColumnTracker to avoid seeking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9778&quot;&gt;&lt;del&gt;HBASE-9778&lt;/del&gt;&lt;/a&gt; I basically punted the decision on whether doing repeated scanner.next() called instead of the issueing (re)seeks to the user.&lt;br/&gt;
I think we can do better.&lt;/p&gt;

&lt;p&gt;One way do that is maintain simple stats of what the maximum number of versions we&apos;ve seen for any row/col combination and store these in the HFile&apos;s metadata (just like the timerange, oldest Put, etc).&lt;/p&gt;

&lt;p&gt;Then we estimate fairly accurately whether we have to expect lots of versions (i.e. seek between columns is better) or not (in which case we&apos;d issue repeated next()&apos;s).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12749565">HBASE-12311</key>
            <summary>Version stats in HFiles?</summary>
                <type id="13" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/genericissue.png">Brainstorming</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="6">Invalid</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="lhofhansl">Lars Hofhansl</reporter>
                        <labels>
                    </labels>
                <created>Tue, 21 Oct 2014 17:57:12 +0000</created>
                <updated>Sat, 4 Jul 2015 00:06:01 +0000</updated>
                            <resolved>Sat, 4 Jul 2015 00:06:01 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>10</watches>
                                                                <comments>
                            <comment id="14178748" author="lhofhansl" created="Tue, 21 Oct 2014 18:00:23 +0000"  >&lt;p&gt;Are there better/other ideas?&lt;br/&gt;
The core issue we want to get to: If a (re)seek would get us to a different HFile block we should seek, otherwise repeated next()&apos;s inside the block is (far) more efficient. This decision would need to be made efficient - without needing a bunch of compares of the row-key.&lt;/p&gt;

&lt;p&gt;Tracking the maximum number of versions seen would a possible and relatively cheap proxy to guess the likelihood of a seek getting us out of the current block.&lt;/p&gt;</comment>
                            <comment id="14179042" author="stack" created="Tue, 21 Oct 2014 20:35:40 +0000"  >&lt;p&gt;Would metadata on block itself be OTT?  Or metadata in the index?  A few ints on cardinality... avg sizes?&lt;/p&gt;

&lt;p&gt;Otherwise, adding to the hfile metadata seems way to go.  Write a pb so can be expanded as we want to record more?&lt;/p&gt;</comment>
                            <comment id="14179055" author="lhofhansl" created="Tue, 21 Oct 2014 20:41:07 +0000"  >&lt;p&gt;I would need to get it by columnFamily/HStore (because I want to avoid the comparisons in SQM and down), on the blocks itself that&apos;d be hard to do. It would be similar to maxSequenceId, etc. Just another things in the HFile trailer.&lt;/p&gt;

&lt;p&gt;Still wondering whether there&apos;s a better way, though. It would be nice if the upper layers could suggest a (re)seek and then at the Store (or maybe even StoreFile) we could decide how execute that, problem there would be to avoid multiple compares between the layers (which is the main reason why seeks are so expensive even when the blocks are already in the cache)&lt;/p&gt;</comment>
                            <comment id="14179141" author="ndimiduk" created="Tue, 21 Oct 2014 21:26:23 +0000"  >&lt;p&gt;Why is it difficult to tag blocks with metadata? We&apos;ve extended the block header before.&lt;/p&gt;</comment>
                            <comment id="14179145" author="lhofhansl" created="Tue, 21 Oct 2014 21:29:55 +0000"  >&lt;p&gt;It&apos;s not hard to record that information per block. It&apos;s hard to get that information out to where/when I need it.&lt;/p&gt;

&lt;p&gt;In the SQM I want to know how many versions (and columns actually) I can expect worst case. If it&apos;s maintained per block that has to be aggregated somewhere. If it is per store file it is easily aggregated per store.&lt;/p&gt;</comment>
                            <comment id="14179160" author="ndimiduk" created="Tue, 21 Oct 2014 21:36:49 +0000"  >&lt;p&gt;I see. Would be good to have more than just version stats &amp;#8211; counts and value size distributions come to mind.&lt;/p&gt;</comment>
                            <comment id="14179169" author="lhofhansl" created="Tue, 21 Oct 2014 21:42:40 +0000"  >&lt;p&gt;Agreed. Maybe it&apos;s time to formalize/rationalize all the stats/metadata we keep around.&lt;/p&gt;</comment>
                            <comment id="14179175" author="ndimiduk" created="Tue, 21 Oct 2014 21:47:06 +0000"  >&lt;p&gt;Indeed. It bothers me that Phoenix needs to maintain its own stats table.&lt;/p&gt;</comment>
                            <comment id="14180065" author="apurtell" created="Wed, 22 Oct 2014 15:39:30 +0000"  >&lt;p&gt;Well we had &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7958&quot; title=&quot;Statistics per-column family per-region&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7958&quot;&gt;&lt;del&gt;HBASE-7958&lt;/del&gt;&lt;/a&gt; but it fizzled out. One issue seemed to be maintaining a stats table duplicates metrics reporting and metrics aggregation/history that will already be in place externally &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. So I proposed &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7958?focusedCommentId=13997314&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13997314&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-7958?focusedCommentId=13997314&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13997314&lt;/a&gt; not surfacing stats calculated when processing HFiles into a system table but instead keep them as internal metadata that HFile/HStore could get at. The proposal was &quot;maintain a tree of statistic files in HDFS&quot; but this information could be embedded in HFiles themselves. The information there could also be exported to the metrics subsystem. Should we revive that issue? Although per block HFile statistics is something new I think. &lt;/p&gt;</comment>
                            <comment id="14180453" author="lhofhansl" created="Wed, 22 Oct 2014 20:12:22 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;, I agree. These are per HFile stats that we should keep them there. This is markedly different from the type of stats that - for example - Phoenix keeps around and from that angle is not wrong to have Phoenix keep these metrics (and HBase&apos;s job is to provide the necessary plumbing to do that, as we do with coprocessors)&lt;/p&gt;

&lt;p&gt;In any case I can see this going both ways.&lt;/p&gt;
</comment>
                            <comment id="14180475" author="lhofhansl" created="Wed, 22 Oct 2014 20:24:03 +0000"  >&lt;p&gt;In the end, I&apos;m mostly looking for alternatives to speed up (re)seek. The core of the problem is that we always seek even if the seek will land us on the same block and hence the seek is actually unnecessary. There is a check for that (see HFileReaderV2.reseekTo), but that is too far down and we still need to recompare at the Store/SQM level.&lt;/p&gt;

&lt;p&gt;Having some simple stats about number of versions per column and/or columns per row would be a reasonable proxy. Ideally we&apos;d need a need good guess on whether the seek would seek us out of the current bock with high likelihood. If so we seek if not we do next() a few time.&lt;/p&gt;

&lt;p&gt;So maybe a better stat would the number of bytes per column and per row. I.e. we&apos;d sum up the sizes of the KVs of version for a column and all the KVs for a row and than keep max/avg stats about that. Then with knowing the HFile block size we can guess whether a seek to a column or row would propel us out of the block or not.&lt;/p&gt;

&lt;p&gt;With that is mind the metrics to keep would be something like avg/max COL_SIZE and avg/max ROW_SIZE. The former would inform whether we should SEEK_NEXT_COL the latter whether we should SEEK_NEXT_ROW - both instead of performing a series of SKIP.&lt;/p&gt;

&lt;p&gt;Presumably for most use cases the distribution of the col and row size would be pretty similar across the entire table (I know we have a bunch of such use cases).&lt;/p&gt;</comment>
                            <comment id="14180586" author="lhofhansl" created="Wed, 22 Oct 2014 21:42:52 +0000"  >&lt;p&gt;A tracker like this (to be hooked up in StoreFile.Writer).&lt;br/&gt;
Quite simply... Just want to park it here. Had 15mins to spare on this.&lt;br/&gt;
Need to add protobuf, etc.&lt;/p&gt;</comment>
                            <comment id="14183779" author="lhofhansl" created="Sat, 25 Oct 2014 00:14:00 +0000"  >&lt;p&gt;W.I.P. patch. Just parking it. Does not work.&lt;br/&gt;
Need to find a good way of passing this from Store to SQM. Could use ScanInfo, but that&apos;s used in some coprocs - then again it&apos;s marked with InterfaceAudience.Private.&lt;/p&gt;</comment>
                            <comment id="14199850" author="lhofhansl" created="Thu, 6 Nov 2014 06:03:25 +0000"  >&lt;p&gt;The logic would something like this:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;replace SEEK_COL with SKIP when when the mean size of all columns in &amp;lt;= 1/2 HBlock and standard deviation is &amp;lt; 1 HBlock and the max size of any column is &amp;lt; 4 HFileBlocks.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;same for row:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;replace SEEK_ROW when when the mean size of all rows in &amp;lt;= 1/2 HBlock  and standard deviation is &amp;lt; 1 HBlocks and the max size of any row is &amp;lt; 4 HBlocks&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;(I might not do the standard deviation part, not sure it&apos;s really needed)&lt;/p&gt;

&lt;p&gt;So we&apos;ll avoid using SKIPs when a SEEK will with some probably land outside of the current block. If that is the case we&apos;ll use SEEK_COL, SEEK_ROW as before. SEEK_WITH_HINT would always be executed as SEEK_WITH_HINT.&lt;/p&gt;</comment>
                            <comment id="14201400" author="lhofhansl" created="Fri, 7 Nov 2014 01:42:58 +0000"  >&lt;p&gt;Got another few minutes on this. Bit further now. Still not working at all. Again just want to park it.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;collects standard deviation as well&lt;/li&gt;
	&lt;li&gt;knows how to combine trackers from multiple files - including the standard deviation correctly&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The only part left, really, is to hook this up in SQM.&lt;/p&gt;

&lt;p&gt;Once I get this working, I&apos;ll do some number and see whether this effort is worth it.&lt;/p&gt;</comment>
                            <comment id="14201616" author="lhofhansl" created="Fri, 7 Nov 2014 05:24:24 +0000"  >&lt;p&gt;Everything hooked up. Not pretty really. Better be a good perf improvement, will test when I get to this next.&lt;/p&gt;</comment>
                            <comment id="14341363" author="lhofhansl" created="Sat, 28 Feb 2015 05:56:36 +0000"  >&lt;p&gt;I&apos;ve thought of another approach. StorefileScanners have the notion of a &quot;next indexed key&quot;, that is next known key to seek to (i.e. beginning of a block). What if we took the next indexed key of the scanner that is on top of the (StoreFileScanner/MemstoreScanner) heap and only issue a seek if we would seek past that key? It&apos;s only a heuristic and that check would not come free, but assuming it likely that chunks of Cells will come from the same file, we&apos;d have a fairly good indicator whether the seek will help. I have a 0.98 patch for that, and it improves things. As an example I&apos;ve used a scan with a timerange. If the range is before all Cells (except one so that the files isn&apos;t ruled out) it&apos;s takes about 3.1s (we SKIP in that case) if the timerange falls after all Cells (again except one) it&apos;s 10.2s (we&apos;re seeking this time - see SQM.match). &lt;/p&gt;

&lt;p&gt;With the patch the first case is unchanged (3.1s), but the 2nd case it reduced to 4.5s, since can avoid the unnecessary seek in many cases.&lt;/p&gt;</comment>
                            <comment id="14341369" author="lhofhansl" created="Sat, 28 Feb 2015 06:01:02 +0000"  >&lt;p&gt;Here&apos;s a patch that illustrates the idea for 0.98. In store scanner when the SQM indicated we should seek, we check the nextIndexedKey (if available) and we would seek before that, we simply SKIP and let the SQM try again.&lt;/p&gt;

&lt;p&gt;The only annoying part is that we only an indexed &lt;b&gt;key&lt;/b&gt; (i.e. row, family, column), which we are trying to get rid of. HFileReaderV2.AbstractScannerV2.reseekTo performs the same check to decide whether to seek or to retry on the same block, this just pulls the check up. We can probably remove that optimization from the AbstractScannerV2 now (and save a few more compares).&lt;/p&gt;</comment>
                            <comment id="14341400" author="lhofhansl" created="Sat, 28 Feb 2015 07:27:25 +0000"  >&lt;p&gt;Tested some more with KVs with 10, 100, and 10000 versions. The more version we have the more likely it becomes that we would seek past the next indexed key of the top scanner in the heap and hence keep the seek. So this appears to work fine with few and many versions, as well as few and many columns, and all cases it will estimate whether a SKIP or a SEEK is better.&lt;/p&gt;</comment>
                            <comment id="14341401" author="lhofhansl" created="Sat, 28 Feb 2015 07:27:39 +0000"  >&lt;p&gt;I might file a separate issue for this.&lt;/p&gt;</comment>
                            <comment id="14341404" author="lhofhansl" created="Sat, 28 Feb 2015 07:36:20 +0000"  >&lt;p&gt;Can now remove the lookahead hack I put in before.&lt;br/&gt;
(Will test more, to make sure this is true in all cases)&lt;/p&gt;</comment>
                            <comment id="14341890" author="lhofhansl" created="Sun, 1 Mar 2015 02:12:22 +0000"  >&lt;p&gt;To be continued on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13109&quot; title=&quot;Make better SEEK vs SKIP decisions during scanning&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13109&quot;&gt;&lt;del&gt;HBASE-13109&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14613522" author="lhofhansl" created="Sat, 4 Jul 2015 00:06:01 +0000"  >&lt;p&gt;This is no longer needed. I added much better heuristics now to decide when we should SEEK and when we should SKIP.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12701558" name="12311-indexed-0.98-v2.txt" size="19201" author="lhofhansl" created="Sat, 28 Feb 2015 07:36:20 +0000"/>
                            <attachment id="12701554" name="12311-indexed-0.98.txt" size="7406" author="lhofhansl" created="Sat, 28 Feb 2015 06:01:02 +0000"/>
                            <attachment id="12680045" name="12311-v2.txt" size="68410" author="lhofhansl" created="Fri, 7 Nov 2014 01:42:58 +0000"/>
                            <attachment id="12680091" name="12311-v3.txt" size="73811" author="lhofhansl" created="Fri, 7 Nov 2014 05:24:24 +0000"/>
                            <attachment id="12677062" name="12311.txt" size="41252" author="lhofhansl" created="Sat, 25 Oct 2014 00:14:00 +0000"/>
                            <attachment id="12676437" name="CellStatTracker.java" size="1658" author="lhofhansl" created="Wed, 22 Oct 2014 21:42:52 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 21 Oct 2014 20:35:40 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 23 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i21eu7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>