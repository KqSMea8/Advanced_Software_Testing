<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:12:38 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3732/HBASE-3732.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3732] New configuration option for client-side compression</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3732</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;We have a case here where we have to store very fat cells (arrays of integers) which can amount into the hundreds of KBs that we need to read often, concurrently, and possibly keep in cache. Compressing the values on the client using java.util.zip&apos;s Deflater before sending them to HBase proved to be in our case almost an order of magnitude faster.&lt;/p&gt;

&lt;p&gt;There reasons are evident: less data sent to hbase, memstore contains compressed data, block cache contains compressed data too, etc.&lt;/p&gt;

&lt;p&gt;I was thinking that it might be something useful to add to a family schema, so that Put/Result do the conversion for you. The actual compression algo should also be configurable.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12503351">HBASE-3732</key>
            <summary>New configuration option for client-side compression</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="jdcryans">Jean-Daniel Cryans</reporter>
                        <labels>
                    </labels>
                <created>Mon, 4 Apr 2011 22:45:08 +0000</created>
                <updated>Wed, 17 Jul 2013 12:47:36 +0000</updated>
                            <resolved>Tue, 9 Apr 2013 16:52:18 +0000</resolved>
                                                                        <due></due>
                            <votes>2</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="13015753" author="tsuna" created="Tue, 5 Apr 2011 04:40:56 +0000"  >&lt;p&gt;If you want &lt;tt&gt;Put&lt;/tt&gt;/&lt;tt&gt;Result&lt;/tt&gt; to do the conversion for you, that means the client needs to be aware of the schema of the table before it can start using it, right?  Because right now HBase clients don&apos;t know the schema, so it&apos;s something extra that they&apos;d need to lookup separately, unless we add new fields in the &lt;tt&gt;.META.&lt;/tt&gt; table that go along with each and every region.&lt;/p&gt;</comment>
                            <comment id="13016011" author="jdcryans" created="Tue, 5 Apr 2011 16:47:50 +0000"  >&lt;p&gt;Benoit, that&apos;s already the case (and it&apos;s something we want to get rid of). See the regioninfo qualifer in .META.&lt;/p&gt;

&lt;p&gt;I agree it is a bit invasive and it&apos;s not just about adding a config option for families, so I&apos;m still wondering if the pain of adding this in is worth it. You could also add a layer on top of HTable like CompressedHTable but that just seem ugly.&lt;/p&gt;</comment>
                            <comment id="13016021" author="tsuna" created="Tue, 5 Apr 2011 17:18:25 +0000"  >&lt;p&gt;Oh yeah I forgot that this was in the &lt;tt&gt;info:regioninfo&lt;/tt&gt; column, my bad.&lt;/p&gt;

&lt;p&gt;Wouldn&apos;t it be awesome if this was actually on a key-per-key basis?  Is there a spare bit in &lt;tt&gt;KeyValue&lt;/tt&gt; we can steal to indicate &quot;this KV is compressed&quot;?  We could not only compress the value, but also the column qualifier and/or the key if they&apos;re big too (some applications store data in the column qualifier or, less frequently, in the key).&lt;/p&gt;</comment>
                            <comment id="13019967" author="stack" created="Thu, 14 Apr 2011 18:27:49 +0000"  >&lt;p&gt;Beno&#238;t: We can&apos;t compress column qualifier because then columns would sort differently.  As to adding bit to say KV is compressed, that might be possible.   Currently we have a type byte in each KV.  The top four bits are unused.  I had stared a patch to use the top two for &apos;version&apos; and had done the work to make sure version was not considered comparing adding proper masks etc.  I could revive this work to add in a compression bit.&lt;/p&gt;</comment>
                            <comment id="13021675" author="tsuna" created="Tue, 19 Apr 2011 17:32:19 +0000"  >&lt;p&gt;Sounds good Stack.&lt;/p&gt;</comment>
                            <comment id="13029522" author="karthick" created="Thu, 5 May 2011 19:26:07 +0000"  >&lt;p&gt;Does it make sense to perform the compression at the IPC layer, specifically in the &lt;tt&gt;HBaseClient&lt;/tt&gt; and &lt;tt&gt;HBaseServer&lt;/tt&gt; classes? Currently, then both read (write) headers and data through a &lt;tt&gt;DataInputStream&lt;/tt&gt; (&lt;tt&gt;DataOutputStream&lt;/tt&gt;). What if we wrap those streams such that it compresses the bytes flowing through it, based on the yet-to-be-determined config option? As a matter of fact, I was working on something along these lines last year, but didn&apos;t follow through on it. Luckily, I still have the compression-based streams that I wrote, and I&apos;m attaching those here just to get your thoughts. If this approach truly makes sense, then I can try to put together a working patch.&lt;/p&gt;</comment>
                            <comment id="13029524" author="jdcryans" created="Thu, 5 May 2011 19:32:33 +0000"  >&lt;p&gt;That would be orthogonal, compressing the values before putting them on the network, memstore, block cache or HFile has IMO the biggest wins (as a listed in the description). With the compression on the IPC layer you win on client-regionserver transfers. Not bad, but different and at smaller scale than what I propose.&lt;/p&gt;</comment>
                            <comment id="13030167" author="karthick" created="Fri, 6 May 2011 22:09:59 +0000"  >&lt;p&gt;Oh, I see. I like the idea of keeping the value in a compressed form until the client tries to &quot;get&quot; it. Perhaps we can compress the value depending on whether it&apos;s fatter than a certain threshold? Also, given that the value typically accounts for most of the &lt;tt&gt;KeyValue&lt;/tt&gt;&apos;s size, do we need to call &lt;tt&gt;HFile#getCompressingStream&lt;/tt&gt; if the value is already compressed up front?&lt;/p&gt;</comment>
                            <comment id="13030793" author="karthick" created="Mon, 9 May 2011 16:20:24 +0000"  >&lt;p&gt;Stack, If you need help with this patch, please let me know, because I can make the time to work on it. This seems like a really useful low hanging fruit.&lt;/p&gt;</comment>
                            <comment id="13030818" author="jdcryans" created="Mon, 9 May 2011 17:14:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;Perhaps we can compress the value depending on whether it&apos;s fatter than a certain threshold&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That would make sense, or it could be in the HCD.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;do we need to call HFile#getCompressingStream if the value is already compressed up front&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The fact that the values are compressed should be transparent to the region servers, exactly like when the user is compressing the values themselves (like I described in the description of this jira).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;This seems like a really useful low hanging fruit.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not so sure about that. I think that are many easy ways to solve this, but most of them include polluting the API or doing weird acrobatics in the client. Compressing/decompressing is easy, it&apos;s all about where you&apos;re going to do it in the code.&lt;/p&gt;</comment>
                            <comment id="13030872" author="karthick" created="Mon, 9 May 2011 19:43:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;Not so sure about that. I think that are many easy ways to solve this, but most of them include polluting the API or doing weird acrobatics in the client. Compressing/decompressing is easy, it&apos;s all about where you&apos;re going to do it in the code.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;As Stack suggested, a compression bit to KeyValue#Type, say Compressed(128), can be used to tell if a value is compressed or not. Alternatively, we could define a Type#PutCompressed value, and have the server handle that the same way as Type#Put. The actual compression (decompression) would occur in the Put (Result) depending on the client-side compression algorithm. For all intents and purposes, this change would be transparent to the end user.&lt;/p&gt;</comment>
                            <comment id="13036534" author="stack" created="Thu, 19 May 2011 22:25:16 +0000"  >&lt;p&gt;Just to say that the notion of adding a compressed flag to KV is pretty invasive with ripples across the code base.  Messy is how we know what codec to used undoing the value.  This info will not be in the KV.&lt;/p&gt;</comment>
                            <comment id="13042397" author="karthick" created="Wed, 1 Jun 2011 20:14:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;Just to say that the notion of adding a compressed flag to KV is pretty invasive with ripples across the code base. Messy is how we know what codec to used undoing the value. This info will not be in the KV.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree. In fact, the &lt;tt&gt;Type&lt;/tt&gt; flag in the KV does not even get persisted in the &lt;tt&gt;HFile&lt;/tt&gt;, IIUC. Given that, our best bet might be to prepend a &quot;magic number&quot; in the value to indicate that it is compressed. In this case, the onus would lie on the put (get) operation to compress (decompress) the value, as J-D proposed initially. As far as the server is concerned, the value will remain an opaque byte array.&lt;/p&gt;

&lt;p&gt;The motivation behind the magic number is to be able to determine whether or not the value being read needs to be decompressed. Note that most codecs (including GZIP and LZO) prefix the compressed stream with some sort of a magic number. However, instead of relying on the algorithm-specific number, it might be more convenient to introduce a magic number of our own.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;That would make sense, or it could be in the HCD.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I like the idea of using the HCD, considering that we want all clients to be on the same page, as far as compressing values goes.&lt;/p&gt;

&lt;p&gt;Does the above approach sound reasonable? If so, may I take a stab at it?&lt;/p&gt;</comment>
                            <comment id="13042498" author="stack" created="Wed, 1 Jun 2011 23:01:17 +0000"  >&lt;p&gt;Do you think we should provide this Karthick, this auto-compress/decompress with special magic lead-off bytes to flag compression done?  Seems like something that is easy enough for users to do themselves in the layer above HBase if they need it.  I&apos;d think we&apos;d want to see more demand for such a feature before you spent time on it.  What you think?&lt;/p&gt;</comment>
                            <comment id="13042511" author="karthick" created="Wed, 1 Jun 2011 23:45:50 +0000"  >&lt;p&gt;Fair enough. If possible, can we ask people on the mailing list to cast their votes on this issue (my vote is in already)? To me, this does look like a feature that can only be handled on the client side.&lt;/p&gt;</comment>
                            <comment id="13042545" author="jdcryans" created="Thu, 2 Jun 2011 01:03:49 +0000"  >&lt;p&gt;I wouldn&apos;t call it a vote, since there&apos;s no voting process in Apache for requesting features. Contributors submit patches whether the rest of the community likes it or not, then it&apos;s up to the committers to get them into SVN if they want it or not.&lt;/p&gt;

&lt;p&gt;My opinion is that this is something HBase should be doing by default, there are too many advantages. I agree with Stack that it is easy to do at the application level, but then if everyone starts doing then it really begs the question as to why isn&apos;t HBase doing it in the first place.&lt;/p&gt;</comment>
                            <comment id="13042595" author="streamy" created="Thu, 2 Jun 2011 03:54:54 +0000"  >&lt;p&gt;I agree that value compression is easily done at the application level.  In cases where you have very large values, compressing that data is something you should always be thinking about.&lt;/p&gt;

&lt;p&gt;Published or contributed code samples could go a long way.  Are there things we could add in Put/Get to make this kind of stuff easily pluggable?&lt;/p&gt;

&lt;p&gt;If it can be integrated simply, then this might be okay, but it should probably be part of a larger conversation about compression.  And anything that touches KV needs to be thought through.&lt;/p&gt;

&lt;p&gt;I think there could be some substantial savings in hbase-specific prefix or row/family/qualifier compression, both on-disk and in-memory.  One idea there would require some complicating of KeyValue and its comparator, or a simpler solution would require short-term memory allocations to reconstitute KVs as they make their way through the KVHeap/KVScanner.&lt;/p&gt;

&lt;p&gt;I&apos;ve also done some work on supporting a two-level compressed/uncompressed block cache patch (with lzo).  I&apos;m waiting to finish until &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3857&quot; title=&quot;Change the HFile Format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3857&quot;&gt;&lt;del&gt;HBASE-3857&lt;/del&gt;&lt;/a&gt; goes in as it adds some things that make life easier in the HFile code.&lt;/p&gt;</comment>
                            <comment id="13042597" author="jasonrutherglen" created="Thu, 2 Jun 2011 04:03:32 +0000"  >&lt;p&gt;Sorry I meant to post the comment at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3857&quot; title=&quot;Change the HFile Format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3857&quot;&gt;&lt;del&gt;HBASE-3857&lt;/del&gt;&lt;/a&gt; to here:&lt;/p&gt;

&lt;p&gt;The FST data structure created in &lt;a href=&quot;https://issues.apache.org/jira/browse/LUCENE-2792&quot; title=&quot;Add a simple FST impl to Lucene&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LUCENE-2792&quot;&gt;&lt;del&gt;LUCENE-2792&lt;/del&gt;&lt;/a&gt; could be used to compress the rowids in the HFile while simultaneously enabling fast lookup. &lt;/p&gt;</comment>
                            <comment id="13047595" author="stack" created="Fri, 10 Jun 2011 22:45:59 +0000"  >&lt;p&gt;Moving out of 0.92.0. Pull it back in if you think different.&lt;/p&gt;</comment>
                            <comment id="13625304" author="anoop.hbase" created="Mon, 8 Apr 2013 11:50:15 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; The new RPC supports compression for cell blocks right? We can close this?&lt;/p&gt;</comment>
                            <comment id="13626813" author="stack" created="Tue, 9 Apr 2013 16:52:18 +0000"  >&lt;p&gt;Resolving as &quot;won&apos;t fix&quot;.  You can achieve compression of KVs via other  means now, by specifying client should do a compressioncodec on cellblocks on set up of connection.&lt;/p&gt;</comment>
                            <comment id="13626814" author="stack" created="Tue, 9 Apr 2013 16:52:37 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; Thanks Anoop.&lt;/p&gt;</comment>
                            <comment id="13710623" author="pradeepg26" created="Wed, 17 Jul 2013 02:17:47 +0000"  >&lt;p&gt;I&apos;d like to reopen discussion on this ticket. I have a slightly different use case that I&apos;m considering for client side compression (sorry if this isn&apos;t the right forum for this question).&lt;/p&gt;

&lt;p&gt;I have a scenario where clients are in a different network topology than the hbase cluster. The bandwidth between the clients and the cluster is limited. Since the client buffers writes, is there any mechanism in place for compressing the over the wire transfers?&lt;/p&gt;</comment>
                            <comment id="13710773" author="qwertymaniac" created="Wed, 17 Jul 2013 06:23:50 +0000"  >&lt;p&gt;Pradeep,&lt;/p&gt;

&lt;p&gt;Does Stack&apos;s comment not address your need?&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;You can achieve compression of KVs via other means now, by specifying client should do a compressioncodec on cellblocks on set up of connection.&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="13711038" author="pradeepg26" created="Wed, 17 Jul 2013 12:47:36 +0000"  >&lt;p&gt;Yes it does. I misread his comment the first time. I also found &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5355&quot; title=&quot;Compressed RPC&amp;#39;s for HBase&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5355&quot;&gt;&lt;del&gt;HBASE-5355&lt;/del&gt;&lt;/a&gt; which is exactly the thing that addresses my use case.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12455264">HBASE-2182</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12478316" name="compressed_streams.jar" size="1759" author="karthick" created="Thu, 5 May 2011 19:26:41 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 5 Apr 2011 04:40:56 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33174</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 22 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hnlj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>101085</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>