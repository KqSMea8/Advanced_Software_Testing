<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:11:28 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3588/HBASE-3588.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3588] Proposal to optimize ReadWriteConsistencyControl</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3588</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The ReadWriteConsistencyControl (RWCC) mechanism facilitates making a set of memstore updates atomically visible to readers. Also, the rwcc.completeMemstoreInsert() blocks till the memstore read point advances to the current writeNumber. This is done to ensure that if an application that does a put immediately issues a new get call for the same key, then the get should see the values inserted by the previous call to put. The current implementation assumes this worst-case and penalizes the put rpc to not return to the client until the read point advances to this transaction&apos;s write number.&lt;/p&gt;

&lt;p&gt;In many use-cases, the application never actually issues a get for the most recent put that it inserted. In this case, it would be nice if we can transfer the penalty (of blocking) to the get call that follows the initial put.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12500151">HBASE-3588</key>
            <summary>Proposal to optimize ReadWriteConsistencyControl</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Not A Problem</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="dhruba">dhruba borthakur</reporter>
                        <labels>
                    </labels>
                <created>Wed, 2 Mar 2011 07:45:53 +0000</created>
                <updated>Sat, 19 Jul 2014 01:12:36 +0000</updated>
                            <resolved>Sat, 19 Jul 2014 01:12:36 +0000</resolved>
                                                                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13001323" author="dhruba" created="Wed, 2 Mar 2011 07:48:40 +0000"  >&lt;p&gt;A quick hack that explains my proposal.&lt;/p&gt;

&lt;p&gt;The idea is that we remember the most recent committed writeNumber. When a new RPC starts, it uses that as its read point. &lt;/p&gt;</comment>
                            <comment id="13001329" author="ryanobjc" created="Wed, 2 Mar 2011 08:18:49 +0000"  >&lt;p&gt;interesting idea, this needs to fit in the context of the acid work stack is doing.  In the discussion of that issue, it turned out that we were required to always read from the most recent read point between each row. &lt;/p&gt;

&lt;p&gt;How much time is this saving?  It was expected that a memstore insertion would be REALLY fast.  Now with the MemstoreLAB stuff, that might not be so true anymore...&lt;/p&gt;</comment>
                            <comment id="13001575" author="dhruba" created="Wed, 2 Mar 2011 19:41:09 +0000"  >&lt;p&gt;I am yet to measure (at scale) the performance improvement. But does the code look good and correct?&lt;/p&gt;

&lt;p&gt;The difference is not just one memstore update. Especially if we have lots of regionserver threads, there are many threads inserting into memstore in parallel.&lt;/p&gt;</comment>
                            <comment id="13001606" author="ryanobjc" created="Wed, 2 Mar 2011 20:25:26 +0000"  >&lt;p&gt;I had a few questions... This patch doesnt seem to remove the wait for the memstoreRead point to catch up to the just-completed write... Do you see that as well?&lt;/p&gt;

&lt;p&gt;Also it seems like every reader is going to have to do this sequence:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;get the most recent written value&lt;/li&gt;
	&lt;li&gt;wait until it becomes readable&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Does that seem right?  Every reader will have a little delay (on a busy region of course) between when it starts and when it can start pulling data down.&lt;/p&gt;

&lt;p&gt;One use case to worry about is a Row put followed by a CheckAndPut to the same row. I think this patch looks like it respects that use case, can you verify?&lt;/p&gt;</comment>
                            <comment id="13001654" author="yuzhihong@gmail.com" created="Wed, 2 Mar 2011 21:16:47 +0000"  >&lt;p&gt;The new method:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; MemStore(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Configuration conf,
                  &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; KeyValue.KVComparator c,
                  &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; ReadWriteConsistencyControl rwcc) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;would produce this test failure:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
testMultipleVersionsSimple(org.apache.hadoop.hbase.regionserver.TestMemStore)  Time elapsed: 0.007 sec  &amp;lt;&amp;lt;&amp;lt; ERROR!
java.lang.NoSuchMethodError: org.apache.hadoop.hbase.regionserver.MemStore.&amp;lt;init&amp;gt;(Lorg/apache/hadoop/conf/Configuration;Lorg/apache/hadoop/hbase/KeyValue$KVComparator;)V
        at org.apache.hadoop.hbase.regionserver.TestMemStore.testMultipleVersionsSimple(TestMemStore.java:477)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
        at java.lang.reflect.Method.invoke(Method.java:597)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13002344" author="yuzhihong@gmail.com" created="Fri, 4 Mar 2011 00:10:52 +0000"  >&lt;p&gt;The following change in MemStore would make TestHeapSize pass:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; FIXED_OVERHEAD = ClassSize.align(
      ClassSize.OBJECT + (12 * ClassSize.REFERENCE));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13002455" author="dhruba" created="Fri, 4 Mar 2011 05:24:39 +0000"  >&lt;p&gt;Thanks ted for fixing the unit test.&lt;/p&gt;

&lt;p&gt;Ryan: I have not yet deployed this fix in our productin setup, the reason being exactly the point u bring up... that a new read request gets delayed at startup (till the readPoint advances to the most recently committed transaction). In short, this patch makes the puts faster but makes the gets somewhat slower. I am not sure that this is a good thing.&lt;/p&gt;

&lt;p&gt;I would have somehow liked the put to not wait for the readPoint to advance to the current transaction&apos;s writeNumber while at the same time ensuring that a client will always see a previously committed transaction. &lt;/p&gt;
</comment>
                            <comment id="13002456" author="yuzhihong@gmail.com" created="Fri, 4 Mar 2011 05:28:49 +0000"  >&lt;p&gt;If we can provide two policies that the user can choose for the particular workload, that would be nice.&lt;/p&gt;</comment>
                            <comment id="14067326" author="apurtell" created="Sat, 19 Jul 2014 01:12:36 +0000"  >&lt;p&gt;Didn&apos;t go anywhere&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12472399" name="rwcc.trunk.1" size="4105" author="dhruba" created="Wed, 2 Mar 2011 07:49:23 +0000"/>
                            <attachment id="12472398" name="rwcc.trunk.1" size="4105" author="dhruba" created="Wed, 2 Mar 2011 07:48:40 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 2 Mar 2011 08:18:49 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33102</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 21 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02flz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>12130</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>