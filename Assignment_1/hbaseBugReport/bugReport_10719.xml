<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:16:32 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10719/HBASE-10719.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10719] Cell interface may need a ByteBuffer rather than a byte[]</title>
                <link>https://issues.apache.org/jira/browse/HBASE-10719</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;See discussion in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10531&quot; title=&quot;Revisit how the key byte[] is passed to HFileScanner.seekTo and reseekTo&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10531&quot;&gt;&lt;del&gt;HBASE-10531&lt;/del&gt;&lt;/a&gt;. &lt;br/&gt;
The byte[] backing a cell may be off heap also.  In such a case having a byte[] may require a copy offheap to on heap.  So better to have ByteBuffer backing a Cell.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12700634">HBASE-10719</key>
            <summary>Cell interface may need a ByteBuffer rather than a byte[]</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12685275">HBASE-10191</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="7">Later</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="ram_krish">ramkrishna.s.vasudevan</reporter>
                        <labels>
                    </labels>
                <created>Tue, 11 Mar 2014 04:38:25 +0000</created>
                <updated>Fri, 14 Mar 2014 21:35:26 +0000</updated>
                            <resolved>Wed, 12 Mar 2014 04:41:45 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                <comments>
                            <comment id="13929946" author="stack" created="Tue, 11 Mar 2014 04:42:55 +0000"  >&lt;p&gt;I was thinking that whether the bytes were off-heap or on-heap an implementation detail hidden behind the Cell Interface: e.g. class CellWithOffHeapValue implements Cell ?&lt;/p&gt;</comment>
                            <comment id="13929978" author="lhofhansl" created="Tue, 11 Mar 2014 05:45:58 +0000"  >&lt;p&gt;Didn&apos;t think of it that way, but that&apos;s even more general.&lt;/p&gt;

&lt;p&gt;I wonder if in the end there is any advantage (other than simplicity) in having a Cell implementation backed by byte[]s rather than a ByteBuffers.&lt;/p&gt;</comment>
                            <comment id="13930633" author="ndimiduk" created="Tue, 11 Mar 2014 17:41:19 +0000"  >&lt;p&gt;ByteBuffer or ByteRange seems like the correct approach for the time being.&lt;/p&gt;</comment>
                            <comment id="13930680" author="stack" created="Tue, 11 Mar 2014 18:06:57 +0000"  >&lt;p&gt;Or Netty ByteBuf!&lt;/p&gt;

&lt;p&gt;So, should we close this issue &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; if Cell Interface does not need to change when its backed by a BB or BR rather than byte []?&lt;/p&gt;</comment>
                            <comment id="13931385" author="ram_krish" created="Wed, 12 Mar 2014 04:41:45 +0000"  >&lt;p&gt;I did not think as an implemention of cell.  We could do that. (still not tried that).  May be will come back to this then. For now will say later?&lt;/p&gt;</comment>
                            <comment id="13931412" author="enis" created="Wed, 12 Mar 2014 05:12:42 +0000"  >&lt;p&gt;Had a chat with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; about this when Cell was first introduced. He was saying that ByteBuffer is an abstract class and have a lot more overhead than byte[]. Our own ByteRange does not have this. &lt;/p&gt;</comment>
                            <comment id="13931425" author="mcorgan" created="Wed, 12 Mar 2014 05:45:06 +0000"  >&lt;p&gt;I debated that when making the Cell interface but thought it might be too big of a step.  I&apos;m excited to see things are moving to where that&apos;s a possibility!  Some thoughts:&lt;/p&gt;

&lt;p&gt;Downsides:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;ByteBuffers are heavyweight compared to array
	&lt;ul&gt;
		&lt;li&gt;for HeapBB it would be an additional layer of indirection between Cell and the byte[] that backs HeapByteBuffer&lt;/li&gt;
		&lt;li&gt;looking at source there&apos;s more method calls to get to the backing array including big/little-endian logic&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;more complex to work with&lt;/li&gt;
	&lt;li&gt;not reusable - have to spawn a new BB with .wrap(..) to move to a new backing array&lt;/li&gt;
	&lt;li&gt;encoders copy bytes to assemble the key anyway, so simpler to stick with array for now&lt;/li&gt;
	&lt;li&gt;current KeyValue is backed by array, so would be a big step to move everything to BB&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Upsides:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;i&apos;ve seen sometimes DirectBB outperforms array (especially if you don&apos;t have to copy it to byte[] first)&lt;/li&gt;
	&lt;li&gt;HeapBB calls probably get inlined enough to match byte[] read performance&lt;/li&gt;
	&lt;li&gt;probably better longer term solution if off-heap becomes the norm&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I thought a first step could be making only the value field a ByteBuffer (or ByteRange) since even encoders don&apos;t (or shouldn&apos;t) need to copy that.&lt;/p&gt;

&lt;p&gt;As Nick mentions, maybe ByteRanges with varying implementations are the way to go since they have a friendlier interface (comparable unsigned bytes).  They could have a ByteBuffer implementation, albeit with an additional level of indirection over the underlying on-heap byte[] (inlining to the rescue?).&lt;/p&gt;</comment>
                            <comment id="13931436" author="ram_krish" created="Wed, 12 Mar 2014 06:10:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;I thought a first step could be making only the value field a ByteBuffer (or ByteRange) since even encoders don&apos;t (or shouldn&apos;t) need to copy that.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You mean the DataBlockEncoders here?&lt;/p&gt;</comment>
                            <comment id="13931471" author="mcorgan" created="Wed, 12 Mar 2014 07:12:15 +0000"  >&lt;p&gt;Right, all current data block encoders leave values fully intact as a single byte range.  Values only need to be identified by a reference with offset/length and that reference can be passed up the chain until it&apos;s copied over the network.  They may currently get copied into a KeyValue byte[], but that won&apos;t be necessary if we (i guess you, Ram =) can get Cells passed all the way up the read path.  My hunch would be to get Cells all the way up the read path and then go back and replace Cell.getValueArray() with Cell.getValueBuffer(), but you know the code far better than me.&lt;/p&gt;</comment>
                            <comment id="13931604" author="ram_krish" created="Wed, 12 Mar 2014 10:04:33 +0000"  >&lt;p&gt;For the DBE cases what you say is right.  But for the normal non DBE case.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;My hunch would be to get Cells all the way up the read path and then go back and replace Cell.getValueArray() with Cell.getValueBuffer(), but you know the code far better than me.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is the first criteria we should be meeting though.  I have &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10531&quot; title=&quot;Revisit how the key byte[] is passed to HFileScanner.seekTo and reseekTo&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10531&quot;&gt;&lt;del&gt;HBASE-10531&lt;/del&gt;&lt;/a&gt; raised that does that for the seek and reseek part.&lt;/p&gt;</comment>
                            <comment id="13935366" author="ndimiduk" created="Fri, 14 Mar 2014 18:10:31 +0000"  >&lt;p&gt;Shouldn&apos;t we consider ByteBuffers for values so that we can work toward an entirely off-heap data pathway? This will enable larger value blobs (10&apos;s - 100&apos;s of MB) for users and open the way for (closer to) zero copy pipeline.&lt;/p&gt;</comment>
                            <comment id="13935692" author="lhofhansl" created="Fri, 14 Mar 2014 21:35:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;This will enable larger value blobs (10&apos;s - 100&apos;s of MB)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Would probably need to add some kind of streaming for these, so that they do not have the brought into memory entirely at a time.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 11 Mar 2014 04:42:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>378351</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 39 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1t6zr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>378643</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>