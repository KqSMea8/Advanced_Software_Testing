<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:51:56 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-1246/HBASE-1246.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-1246] BloomFilter&apos;s use of BitSet is too inefficient</title>
                <link>https://issues.apache.org/jira/browse/HBASE-1246</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;From the logfile run of TestBloomFilter with special SizeOf agent jar:&lt;/p&gt;

&lt;p&gt;Writing bloom filter for: hdfs://localhost:64003/user/ryan/testComputedParameters/1278366260/contents/6159869037185296839 for size: 100&lt;br/&gt;
2009-03-06 01:54:25,491 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;RegionServer:0.cacheFlusher&amp;#93;&lt;/span&gt; regionserver.StoreFile$StoreFileWriter(319): New bloom filter: vectorSize: 1175 hash_count: 5 numKeys: 100&lt;br/&gt;
Serialized bloomfilter size: 160&lt;br/&gt;
In memory bf size: 1248&lt;/p&gt;


&lt;p&gt;As we can see, the bit vector is 1175 bits, and the serialized size is fairly compact - 160 bytes.&lt;/p&gt;

&lt;p&gt;But the in-memory size is nearly 10x bigger than it has to be.  Looking in BloomFilter we see:&lt;/p&gt;

&lt;p&gt;  BitSet bits;&lt;/p&gt;

&lt;p&gt;is the only field.&lt;/p&gt;

&lt;p&gt;Clearly it seems the BitSet is using 1 byte = 1 bit.  That is an 8 time expansion of where we should be.&lt;/p&gt;

&lt;p&gt;Considering every HFile could potentially have a bloom filter, and bloom filters are more likely to have bit vector sizes of 10,000-100,000, we should do something about this.  Aka: write our own bit-set that uses byte[] and bit ops.&lt;/p&gt;</description>
                <environment>&lt;p&gt;Java 1.6, OSX 64 bit&lt;/p&gt;</environment>
        <key id="12416287">HBASE-1246</key>
            <summary>BloomFilter&apos;s use of BitSet is too inefficient</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="nspiegelberg">Nicolas Spiegelberg</assignee>
                                    <reporter username="ryanobjc">ryan rawson</reporter>
                        <labels>
                    </labels>
                <created>Fri, 6 Mar 2009 10:04:25 +0000</created>
                <updated>Fri, 20 Nov 2015 13:01:55 +0000</updated>
                            <resolved>Thu, 13 May 2010 05:22:37 +0000</resolved>
                                    <version>0.20.0</version>
                                    <fixVersion>0.92.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="12679650" author="stack" created="Fri, 6 Mar 2009 17:00:00 +0000"  >&lt;p&gt;I thought this had been fixed?  See &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-427&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-427&lt;/a&gt;.  Maybe we lost Ian&apos;s fix down the line?&lt;/p&gt;

&lt;p&gt;Also, up on IRC, Johano suggests:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
09:59 &amp;lt; dj_ryan&amp;gt; hmm
09:59 &amp;lt; dj_ryan&amp;gt; we are going to have to write our own BitSet
09:59 &amp;lt; dj_ryan&amp;gt; the java one is too inefficient
09:59 &amp;lt; dj_ryan&amp;gt; it doesnt seem to actually use bits
09:59 &amp;lt; dj_ryan&amp;gt; it uses 1000 bytes to store 1000 bits
09:59 &amp;lt; dj_ryan&amp;gt; :-(
09:59 &amp;lt; dj_ryan&amp;gt; serialized the bitset is 160 bytes, but in memory its 10x bigger.
10:57 &amp;lt; johano&amp;gt; http:&lt;span class=&quot;code-comment&quot;&gt;//code.google.com/p/compressedbitset/
&lt;/span&gt;10:57 &amp;lt; johano&amp;gt; http:&lt;span class=&quot;code-comment&quot;&gt;//code.google.com/p/javaewah/
&lt;/span&gt;10:57 &amp;lt; johano&amp;gt; might be of use
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12679651" author="stack" created="Fri, 6 Mar 2009 17:00:38 +0000"  >&lt;p&gt;Oh, otherthing is make the bloomfilter interface take byte [] with offset and length if you can.  That&apos;ll work for current HSK and for the coming ByteBuffer.&lt;/p&gt;</comment>
                            <comment id="12679660" author="streamy" created="Fri, 6 Mar 2009 17:34:56 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-427&quot; title=&quot;org.onelab.filter.BloomFilter class uses 8X the memory it should be using&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-427&quot;&gt;&lt;del&gt;HBASE-427&lt;/del&gt;&lt;/a&gt; fix is actually moving from a boolean[] to BitSet.  BitSet has the same space issues as the boolean[] so it didn&apos;t actually solve that.&lt;/p&gt;

&lt;p&gt;compressedbitset is no go because it&apos;s GPL.  Looked at javaewah but not clear it&apos;s really what we want.  It&apos;s not so much that we want to &lt;em&gt;compress&lt;/em&gt; the bit array, we just want to store it efficiently.  Generally compressing a bit array retains efficiency in and/or operations but can be very poor at get() / containment checks.&lt;/p&gt;

&lt;p&gt;Streamy has a custom, stripped down implementation of blooms in java.  We&apos;re currently using BitSet but now learning about this space inefficiency I&apos;d like to move it to byte[]&apos;s.  Would that be worthwhile doing?  Ryan, let me know what you&apos;re working at so we can combine efforts.&lt;/p&gt;</comment>
                            <comment id="12679707" author="streamy" created="Fri, 6 Mar 2009 20:20:20 +0000"  >&lt;p&gt;This is a custom bloom implementation we have used internally.  I have modified it to use a byte[] to back the bit vector rather than a BitSet.&lt;/p&gt;

&lt;p&gt;It also has an optimized/efficient Writable implementation (and static serialize/deserialize that we use).&lt;/p&gt;

&lt;p&gt;The way I&apos;m actually doing the hashing is probably non-optimal.  Our use of it always took a long as the unit.  We need (byte[],offset,len) as the unit.  This implementation generates an MD5 hash, puts that into a long, instantiates a Random with the md5 long as the seed, and then uses Random.nextInt() for each hash.  Should take this and pair it with Jenkins or whatever is being used up in Hadoop maybe.&lt;/p&gt;

&lt;p&gt;main() contains some basic unit testing.  Everything does appear to work and is WAY more efficient.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Bloom filter initialized, 9585 bits, 1199 bytes, 7 hashes, 0.01 error rate, up to 1000 elements
Bloom bit vector contains 9585 bits
Serialized as 1230 bytes
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In-memory size will be similarly efficient with the byte[] instead of the BitSet or boolean[] as before.&lt;/p&gt;</comment>
                            <comment id="12679713" author="streamy" created="Fri, 6 Mar 2009 20:28:09 +0000"  >&lt;p&gt;Please note, there are a number of optimizations to be made in this code w.r.t. the hashing and also some optimizations for get/set using static arrays instead of doing shifts every time.&lt;/p&gt;</comment>
                            <comment id="12679718" author="streamy" created="Fri, 6 Mar 2009 20:48:40 +0000"  >&lt;p&gt;Contains bitvals array for computation efficiency.  If I have a static final in a class, is it the case that we don&apos;t pay the memory overhead for each object instantiation?&lt;/p&gt;

&lt;p&gt;This also now implements HeapSize.  Currently does not include size of lookup array.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Bloom bit vector contains 9585 bits
Serialized as 1230 bytes
HeapSize is 1255
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12694160" author="jbellis" created="Tue, 31 Mar 2009 15:43:27 +0000"  >&lt;p&gt;&amp;gt; BitSet has the same space issues as the boolean[] so it didn&apos;t actually solve that. &lt;/p&gt;

&lt;p&gt;That is not correct in the Sun SDK.  The version I have (1.6.10) definitely uses one bit per... bit and has the comment&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;@version 1.67, 04/07/06&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;so I imagine this is the case at least for all versions of 1.6.&lt;/p&gt;</comment>
                            <comment id="12806619" author="jdcryans" created="Sat, 30 Jan 2010 03:03:10 +0000"  >&lt;p&gt;We don&apos;t use Bloom Filters at the moment, can we close this?&lt;/p&gt;</comment>
                            <comment id="12806627" author="stack" created="Sat, 30 Jan 2010 04:32:50 +0000"  >&lt;p&gt;We&apos;ll be reviving bloomfilters in the near future.  Lets keep this issue around.  It&apos;ll inspire our verifying how much space a bit actually occupies in our implementation.&lt;/p&gt;</comment>
                            <comment id="12866961" author="stack" created="Thu, 13 May 2010 04:21:29 +0000"  >&lt;p&gt;Can we resolve this Nicolas given hbase-1200?&lt;/p&gt;</comment>
                            <comment id="12866963" author="nspiegelberg" created="Thu, 13 May 2010 04:25:09 +0000"  >&lt;p&gt;yup.  this hbase-1200 uses byte[] and bit math, so we should be fine with space efficiency&lt;/p&gt;</comment>
                            <comment id="12867014" author="stack" created="Thu, 13 May 2010 04:41:51 +0000"  >&lt;p&gt;Moved from 0.21 to 0.22 just after merge of old 0.20 branch into TRUNK.&lt;/p&gt;</comment>
                            <comment id="12867053" author="stack" created="Thu, 13 May 2010 05:22:37 +0000"  >&lt;p&gt;Resolving&lt;/p&gt;</comment>
                            <comment id="15017932" author="lars_francke" created="Fri, 20 Nov 2015 13:01:55 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12401643" name="ByteBloomFilter.java" size="12588" author="streamy" created="Fri, 6 Mar 2009 20:48:40 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 6 Mar 2009 17:00:00 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>25644</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hc6n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>99236</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>