<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:12:52 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3759/HBASE-3759.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3759] Eliminate use of ThreadLocals for CoprocessorEnvironment bypass() and complete()</title>
                <link>https://issues.apache.org/jira/browse/HBASE-3759</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;In the current coprocessor framework, ThreadLocal objects are used for the bypass and complete booleans in CoprocessorEnvironment.  This allows the *CoprocessorHost implementations to identify when to short-circuit processing the the preXXX and postXXX hook methods.&lt;/p&gt;

&lt;p&gt;Profiling the region server, however, shows that these ThreadLocals can become a contention point when on a hot code path (such as prePut()).  We should refactor the CoprocessorHost pre/post implementations to remove usage of the ThreadLocal variables and replace them with locally scoped variables to eliminate contention between handler threads.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12503794">HBASE-3759</key>
            <summary>Eliminate use of ThreadLocals for CoprocessorEnvironment bypass() and complete()</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ghelmling">Gary Helmling</assignee>
                                    <reporter username="ghelmling">Gary Helmling</reporter>
                        <labels>
                    </labels>
                <created>Fri, 8 Apr 2011 22:18:53 +0000</created>
                <updated>Fri, 20 Nov 2015 12:42:02 +0000</updated>
                            <resolved>Wed, 13 Apr 2011 05:43:11 +0000</resolved>
                                                    <fixVersion>0.92.0</fixVersion>
                                    <component>Coprocessors</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="13017701" author="ghelmling" created="Fri, 8 Apr 2011 22:22:58 +0000"  >&lt;p&gt;CPU profiling call trees showing usage by the ThreadLocal bypass/complete implementation (Call_Tree_tl_&amp;#42;) vs. a locally scoped context object for bypass/complete (Call_Tree_context_&amp;#42;).&lt;/p&gt;</comment>
                            <comment id="13017821" author="apurtell" created="Sat, 9 Apr 2011 09:09:46 +0000"  >&lt;p&gt;+1&lt;/p&gt;</comment>
                            <comment id="13019159" author="jiraposter@reviews.apache.org" created="Wed, 13 Apr 2011 01:09:05 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/588/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Profiling the HRegionServer process with a RegionObserver coprocessor loaded shows a fair amount of runnable thread CPU time spent getting the bypass and complete flag ThreadLocal values by RegionCoprocessorHost.  See the &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; title=&quot;Eliminate use of ThreadLocals for CoprocessorEnvironment bypass() and complete()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3759&quot;&gt;&lt;del&gt;HBASE-3759&lt;/del&gt;&lt;/a&gt; JIRA for some attached graphs.&lt;/p&gt;

&lt;p&gt;With the caveat that this is runnable CPU time and not threads in all states, this still seems like a significant processing bottleneck on a hot call path.  The workload profiled was a put-based bulk load, so for each multi-put request, RegionCoprocessorHost.prePut() could be called many times.&lt;/p&gt;

&lt;p&gt;Instead of using ThreadLocal variable for bypass/complete, which will incur contention on the underlying map of values, I think we can eliminate the bottleneck by using locally scoped variables for each preXXX/putXXX method called in the RegionCoprocessorHost, MasterCoprocessorHost and WALCoprocessorHost classes.&lt;/p&gt;

&lt;p&gt;The attached patch refactors the current RegionObserver, MasterObserver and WALObserver APIs to provide a locally scoped ObserverContext object for storing and checking the bypass and complete values.&lt;/p&gt;

&lt;p&gt;Summary of changes:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;adds a new ObserverContext&amp;lt;T extends CoprocessorEnvironment&amp;gt; class, containing references for bypass, complete and the environment instance&lt;/li&gt;
	&lt;li&gt;in each pre/post method in RegionObserver, the RegionCoprocessorEnvironment parameter is replaced by ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt;&lt;/li&gt;
	&lt;li&gt;in each pre/post method in MasterObserver, the MasterCoprocessorEnvironment parameter is replaced by ObserverContext&amp;lt;MasterCoprocessorEnvironment&amp;gt;&lt;/li&gt;
	&lt;li&gt;in each pre/post method in WALObserver, the WALCoprocessorEnvironment parameter is replace by ObserverContext&amp;lt;WALCoprocesorEnvironment&amp;gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;This is obviously a large bulk change to the existing API.  I could avoid the API change with hacky modification underneath the *CoprocessorEnvironment interfaces.  But since we do not yet have a public release with coprocessors, I would prefer to take the time to make the initial API the best we can before we push it out.&lt;/p&gt;

&lt;p&gt;Please let me know your thoughts on this approach.&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; title=&quot;Eliminate use of ThreadLocals for CoprocessorEnvironment bypass() and complete()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3759&quot;&gt;&lt;del&gt;HBASE-3759&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-3759&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java 9576c48 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserverCoprocessor.java 5a0f095 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorEnvironment.java d45b950 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java a82f62b &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java db0870b &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java PRE-CREATION &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java 3501958 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java 7a34d18 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java 019bbde &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java 60efa12 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java a3f3b31 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java 834283f &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java 0ce2147 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java 0db5001 &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java a15d53a &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java 2c1e4a0 &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/588/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Gary&lt;/p&gt;
</comment>
                            <comment id="13019172" author="jiraposter@reviews.apache.org" created="Wed, 13 Apr 2011 03:24:05 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/588/#review434&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/#review434&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Ship it!&lt;/p&gt;


&lt;p&gt;+1 Looks good Gary.  Agree do it now before 0.92.  By chance did you see if it made a difference profiling?&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Michael&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-04-13 01:08:50, Gary Helmling wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/588/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-04-13 01:08:50)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Profiling the HRegionServer process with a RegionObserver coprocessor loaded shows a fair amount of runnable thread CPU time spent getting the bypass and complete flag ThreadLocal values by RegionCoprocessorHost.  See the &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; title=&quot;Eliminate use of ThreadLocals for CoprocessorEnvironment bypass() and complete()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3759&quot;&gt;&lt;del&gt;HBASE-3759&lt;/del&gt;&lt;/a&gt; JIRA for some attached graphs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;With the caveat that this is runnable CPU time and not threads in all states, this still seems like a significant processing bottleneck on a hot call path.  The workload profiled was a put-based bulk load, so for each multi-put request, RegionCoprocessorHost.prePut() could be called many times.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Instead of using ThreadLocal variable for bypass/complete, which will incur contention on the underlying map of values, I think we can eliminate the bottleneck by using locally scoped variables for each preXXX/putXXX method called in the RegionCoprocessorHost, MasterCoprocessorHost and WALCoprocessorHost classes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;The attached patch refactors the current RegionObserver, MasterObserver and WALObserver APIs to provide a locally scoped ObserverContext object for storing and checking the bypass and complete values.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary of changes:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* adds a new ObserverContext&amp;lt;T extends CoprocessorEnvironment&amp;gt; class, containing references for bypass, complete and the environment instance&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* in each pre/post method in RegionObserver, the RegionCoprocessorEnvironment parameter is replaced by ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* in each pre/post method in MasterObserver, the MasterCoprocessorEnvironment parameter is replaced by ObserverContext&amp;lt;MasterCoprocessorEnvironment&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* in each pre/post method in WALObserver, the WALCoprocessorEnvironment parameter is replace by ObserverContext&amp;lt;WALCoprocesorEnvironment&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is obviously a large bulk change to the existing API.  I could avoid the API change with hacky modification underneath the *CoprocessorEnvironment interfaces.  But since we do not yet have a public release with coprocessors, I would prefer to take the time to make the initial API the best we can before we push it out.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Please let me know your thoughts on this approach.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; title=&quot;Eliminate use of ThreadLocals for CoprocessorEnvironment bypass() and complete()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3759&quot;&gt;&lt;del&gt;HBASE-3759&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-3759&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java 9576c48 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserverCoprocessor.java 5a0f095 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorEnvironment.java d45b950 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java a82f62b &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java db0870b &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java 3501958 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java 7a34d18 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java 019bbde &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java 60efa12 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java a3f3b31 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java 834283f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java 0ce2147 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java 0db5001 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java a15d53a &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java 2c1e4a0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/588/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Gary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13019185" author="jiraposter@reviews.apache.org" created="Wed, 13 Apr 2011 03:58:06 +0000"  >

&lt;blockquote&gt;&lt;p&gt;On 2011-04-13 03:23:28, Michael Stack wrote:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&amp;gt; +1 Looks good Gary.  Agree do it now before 0.92.  By chance did you see if it made a difference profiling?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah if you grab &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12475852/cp_bypass.tar.gz&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12475852/cp_bypass.tar.gz&lt;/a&gt; you can see the call trees I grabbed from profiling with the context object (Call_Tree_context_xxx) vs. ThreadLocals (Call_Tree_tl_xxx).  If you look at Call_Tree_tl_run.html vs. Call_Tree_context_run.html, you&apos;ll see ~20% of the runnable thread time spent in ThreadLocal.get() (under shouldComplete() and shouldBypass()).  This is completely eliminated in the context version, though with small overhead for the object instatiation &amp;#8211; 0.4% in CallContext.createAndPrepare().  (This was before a rename of CallContext -&amp;gt; ObserverContext).&lt;/p&gt;

&lt;p&gt;Granted this is only runnable thread time, so it&apos;s skewed in terms of overall impact.  But at the macro level, the MR put-based import that generated this ran in ~2h15m with the ThreadLocal version, but only ~1h40m with the context version.  So seems a pretty substantial improvement.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Gary&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/588/#review434&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/#review434&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;


&lt;p&gt;On 2011-04-13 01:08:50, Gary Helmling wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/588/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-04-13 01:08:50)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Profiling the HRegionServer process with a RegionObserver coprocessor loaded shows a fair amount of runnable thread CPU time spent getting the bypass and complete flag ThreadLocal values by RegionCoprocessorHost.  See the &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; title=&quot;Eliminate use of ThreadLocals for CoprocessorEnvironment bypass() and complete()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3759&quot;&gt;&lt;del&gt;HBASE-3759&lt;/del&gt;&lt;/a&gt; JIRA for some attached graphs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;With the caveat that this is runnable CPU time and not threads in all states, this still seems like a significant processing bottleneck on a hot call path.  The workload profiled was a put-based bulk load, so for each multi-put request, RegionCoprocessorHost.prePut() could be called many times.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Instead of using ThreadLocal variable for bypass/complete, which will incur contention on the underlying map of values, I think we can eliminate the bottleneck by using locally scoped variables for each preXXX/putXXX method called in the RegionCoprocessorHost, MasterCoprocessorHost and WALCoprocessorHost classes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;The attached patch refactors the current RegionObserver, MasterObserver and WALObserver APIs to provide a locally scoped ObserverContext object for storing and checking the bypass and complete values.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary of changes:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* adds a new ObserverContext&amp;lt;T extends CoprocessorEnvironment&amp;gt; class, containing references for bypass, complete and the environment instance&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* in each pre/post method in RegionObserver, the RegionCoprocessorEnvironment parameter is replaced by ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* in each pre/post method in MasterObserver, the MasterCoprocessorEnvironment parameter is replaced by ObserverContext&amp;lt;MasterCoprocessorEnvironment&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* in each pre/post method in WALObserver, the WALCoprocessorEnvironment parameter is replace by ObserverContext&amp;lt;WALCoprocesorEnvironment&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is obviously a large bulk change to the existing API.  I could avoid the API change with hacky modification underneath the *CoprocessorEnvironment interfaces.  But since we do not yet have a public release with coprocessors, I would prefer to take the time to make the initial API the best we can before we push it out.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Please let me know your thoughts on this approach.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; title=&quot;Eliminate use of ThreadLocals for CoprocessorEnvironment bypass() and complete()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3759&quot;&gt;&lt;del&gt;HBASE-3759&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-3759&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java 9576c48 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserverCoprocessor.java 5a0f095 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorEnvironment.java d45b950 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java a82f62b &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java db0870b &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java 3501958 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java 7a34d18 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java 019bbde &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java 60efa12 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java a3f3b31 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java 834283f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java 0ce2147 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java 0db5001 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java a15d53a &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java 2c1e4a0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/588/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Gary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="13019188" author="stack" created="Wed, 13 Apr 2011 04:03:35 +0000"  >&lt;p&gt;++1 on commit then (2:15 vs 1:40)&lt;/p&gt;</comment>
                            <comment id="13019213" author="ghelmling" created="Wed, 13 Apr 2011 05:42:24 +0000"  >&lt;p&gt;Patch from review&lt;/p&gt;</comment>
                            <comment id="13019214" author="ghelmling" created="Wed, 13 Apr 2011 05:43:11 +0000"  >&lt;p&gt;Committed to trunk.  Thanks for review Stack!&lt;/p&gt;</comment>
                            <comment id="13019518" author="hudson" created="Wed, 13 Apr 2011 19:54:02 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #1850 (See &lt;a href=&quot;https://hudson.apache.org/hudson/job/HBase-TRUNK/1850/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://hudson.apache.org/hudson/job/HBase-TRUNK/1850/&lt;/a&gt;)&lt;/p&gt;
</comment>
                            <comment id="13019676" author="jiraposter@reviews.apache.org" created="Thu, 14 Apr 2011 03:14:06 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/588/#review458&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/#review458&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;https://reviews.apache.org/r/588/#comment885&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/#comment885&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    First, please let me know if i am thinking in the right direction:&lt;/p&gt;

&lt;p&gt;    In the threadlocal version, we are setting it to false because this variable is shared by the registered CPs in all their pre/postXXX hooks, and it was used to decide whether to continue with the CP chain or return from the currently executing CP. So, to reuse this variable, it was set to false again.&lt;/p&gt;

&lt;p&gt;    If that is the case, in this version, we are having a separate instance of ObserverContext for one hook, and i don&apos;t see that we need to reset these variables.&lt;/p&gt;

&lt;p&gt;    The same goes with the &quot;current&quot; variable.&lt;/p&gt;

&lt;p&gt;    Am i getting it right?&lt;br/&gt;
    (I want to come up with a CP observer for 3607, therefore want to grok it a bit, hope you don&apos;t mind)&lt;br/&gt;
    Thanks.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;himanshu&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;On 2011-04-13 01:08:50, Gary Helmling wrote:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is an automatically generated e-mail. To reply, visit:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://reviews.apache.org/r/588/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----------------------------------------------------------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;(Updated 2011-04-13 01:08:50)&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Review request for hbase.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Profiling the HRegionServer process with a RegionObserver coprocessor loaded shows a fair amount of runnable thread CPU time spent getting the bypass and complete flag ThreadLocal values by RegionCoprocessorHost.  See the &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; title=&quot;Eliminate use of ThreadLocals for CoprocessorEnvironment bypass() and complete()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3759&quot;&gt;&lt;del&gt;HBASE-3759&lt;/del&gt;&lt;/a&gt; JIRA for some attached graphs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;With the caveat that this is runnable CPU time and not threads in all states, this still seems like a significant processing bottleneck on a hot call path.  The workload profiled was a put-based bulk load, so for each multi-put request, RegionCoprocessorHost.prePut() could be called many times.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Instead of using ThreadLocal variable for bypass/complete, which will incur contention on the underlying map of values, I think we can eliminate the bottleneck by using locally scoped variables for each preXXX/putXXX method called in the RegionCoprocessorHost, MasterCoprocessorHost and WALCoprocessorHost classes.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;The attached patch refactors the current RegionObserver, MasterObserver and WALObserver APIs to provide a locally scoped ObserverContext object for storing and checking the bypass and complete values.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Summary of changes:&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* adds a new ObserverContext&amp;lt;T extends CoprocessorEnvironment&amp;gt; class, containing references for bypass, complete and the environment instance&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* in each pre/post method in RegionObserver, the RegionCoprocessorEnvironment parameter is replaced by ObserverContext&amp;lt;RegionCoprocessorEnvironment&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* in each pre/post method in MasterObserver, the MasterCoprocessorEnvironment parameter is replaced by ObserverContext&amp;lt;MasterCoprocessorEnvironment&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;* in each pre/post method in WALObserver, the WALCoprocessorEnvironment parameter is replace by ObserverContext&amp;lt;WALCoprocesorEnvironment&amp;gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This is obviously a large bulk change to the existing API.  I could avoid the API change with hacky modification underneath the *CoprocessorEnvironment interfaces.  But since we do not yet have a public release with coprocessors, I would prefer to take the time to make the initial API the best we can before we push it out.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Please let me know your thoughts on this approach.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; title=&quot;Eliminate use of ThreadLocals for CoprocessorEnvironment bypass() and complete()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3759&quot;&gt;&lt;del&gt;HBASE-3759&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3759&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-3759&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diffs&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-----&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/BaseMasterObserver.java 9576c48 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/BaseRegionObserverCoprocessor.java 5a0f095 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorEnvironment.java d45b950 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/CoprocessorHost.java a82f62b &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/MasterObserver.java db0870b &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/ObserverContext.java PRE-CREATION &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/RegionObserver.java 3501958 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/coprocessor/WALObserver.java 7a34d18 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/master/MasterCoprocessorHost.java 019bbde &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java 60efa12 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/main/java/org/apache/hadoop/hbase/regionserver/wal/WALCoprocessorHost.java a3f3b31 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/SampleRegionWALObserver.java 834283f &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/SimpleRegionObserver.java 0ce2147 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestCoprocessorInterface.java 0db5001 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestMasterObserver.java a15d53a &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionObserverStacking.java 2c1e4a0 &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/588/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/588/diff&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Testing&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-------&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Thanks,&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;Gary&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;/p&gt;&lt;/blockquote&gt;
</comment>
                            <comment id="15017140" author="lars_francke" created="Fri, 20 Nov 2015 12:42:02 +0000"  >&lt;p&gt;This issue was closed as part of a bulk closing operation on 2015-11-20. All issues that have been resolved and where all fixVersions have been released have been closed (following discussions on the mailing list).&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12476214" name="HBASE-3759.patch" size="132868" author="ghelmling" created="Wed, 13 Apr 2011 05:42:24 +0000"/>
                            <attachment id="12475852" name="cp_bypass.tar.gz" size="20163" author="ghelmling" created="Fri, 8 Apr 2011 22:22:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 9 Apr 2011 09:09:46 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33189</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 4 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hnrb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>101111</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>