<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:22:37 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-17233/HBASE-17233.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-17233] See if we should replace System.arrayCopy with Arrays.copyOfRange</title>
                <link>https://issues.apache.org/jira/browse/HBASE-17233</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Just saw this interesting comment in PB code. Since we deal with byte[] extensively (when we are onheap) we do lot of copies too.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
* &amp;lt;p&amp;gt;One of the noticeable costs of copying a &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] into a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; array using
   * {@code &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy} is nullification of a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; buffer before the copy. It has been shown
   * the Hotspot VM is capable to intrisicfy {@code Arrays.copyOfRange} operation to avoid &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;
   * expensive nullification and provide substantial performance gain. Unfortunately &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; does not
   * hold on Android runtimes and could make the copy slightly slower due to additional code in
   * the {@code Arrays.copyOfRange}. 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So since we are hotspot VM we could see if the places we use System.arrayCopy can be replaced with Arrays.copyOfRange.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13024993">HBASE-17233</key>
            <summary>See if we should replace System.arrayCopy with Arrays.copyOfRange</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="ram_krish">ramkrishna.s.vasudevan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 2 Dec 2016 07:29:46 +0000</created>
                <updated>Tue, 13 Dec 2016 05:16:27 +0000</updated>
                                            <version>2.0.0</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="15714362" author="anoop.hbase" created="Fri, 2 Dec 2016 07:50:21 +0000"  >&lt;p&gt;Yep noticed this..&lt;br/&gt;
Can u do a JMH test?&lt;/p&gt;</comment>
                            <comment id="15714461" author="ram_krish" created="Fri, 2 Dec 2016 08:34:40 +0000"  >&lt;p&gt;Will do it. That was the plan.&lt;/p&gt;</comment>
                            <comment id="15714855" author="ram_krish" created="Fri, 2 Dec 2016 11:21:08 +0000"  >&lt;p&gt;I tried out a jmh experiment but in all those runs System.arrayCopy was faster. Infact Arrays.copyRange also uses System.arrayCopy with some sanity checks. So am not sure how true is this statement - rather I should say am not very sure on how to see the exact perf benefits.&lt;/p&gt;</comment>
                            <comment id="15714875" author="ram_krish" created="Fri, 2 Dec 2016 11:30:21 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Benchmark             Mode  Cnt         Score        Error  Units
ArrayCopy.arrayCopy  thrpt   15  28391452.109 &#177;  31298.028  ops/s
ArrayCopy.copyRange  thrpt   15   5449681.577 &#177; 201067.929  ops/s
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The diff is so big.&lt;/p&gt;</comment>
                            <comment id="15719917" author="chia7712" created="Sun, 4 Dec 2016 13:05:45 +0000"  >&lt;p&gt;Would you please share the test code?&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="15722032" author="ram_krish" created="Mon, 5 Dec 2016 11:28:47 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@State(Scope.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;)
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class ArrayCopy {
	&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] b = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[10000];
	&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] res = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[10000];
	&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] res1 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[10000];

	@Setup
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setup() {
	}

	@TearDown
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void teardown() {

	}

	@Benchmark
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void arrayCopy() {
		arrayCopyInternal();
	}

	&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void arrayCopyInternal() {
		&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy(b, 10, res, 0, 990);
		&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
	}

	@Benchmark
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void copyRange() {
		copyOfRangeInternal();
	}

	&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void copyOfRangeInternal() {
		&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] copyOfRange = Arrays.copyOfRange(b, 10, 10 + 990);
		&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
	}

	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; RunnerException {
		Options opt = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; OptionsBuilder().include(ArrayCopy.class.getSimpleName()).warmupIterations(1)
				.measurementIterations(2).forks(1).build();
		&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Runner(opt).run();
	}
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I purposefully added &apos;return&apos; so that we don&apos;t fall under the JMH&apos;s dead code optimziation.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
java -jar target/benchmarks.jar ArrayCopy -f 3 -i 5 -wi 5
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="15722548" author="chia7712" created="Mon, 5 Dec 2016 15:33:23 +0000"  >&lt;p&gt;Thanks for your code.&lt;/p&gt;

&lt;p&gt;The copyOfRangeInternal() creates the new array every time, but the arrayCopyInternal() uses the array(res) which is created only once.&lt;br/&gt;
Does it cause the big diff?&lt;/p&gt;
</comment>
                            <comment id="15722755" author="ram_krish" created="Mon, 5 Dec 2016 17:10:53 +0000"  >&lt;p&gt;May be yes. Let me try out by creating every time.&lt;/p&gt;</comment>
                            <comment id="15722789" author="ram_krish" created="Mon, 5 Dec 2016 17:27:48 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;

Benchmark             Mode  Cnt        Score        Error  Units
ArrayCopy.arrayCopy  thrpt   15  4269404.091 &#177; 392468.631  ops/s
ArrayCopy.copyRange  thrpt   15  5184314.384 &#177; 577101.433  ops/s

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What you said was right. But now my next doubt is what is that big difference in Arrays.copyRange and System.arrayCopy?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
@State(Scope.&lt;span class=&quot;code-object&quot;&gt;Thread&lt;/span&gt;)
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class ArrayCopy {
	&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] b = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[10000];
	&lt;span class=&quot;code-comment&quot;&gt;//&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] res = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[10000];
&lt;/span&gt;	&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] res1 = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[10000];

	@Setup
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void setup() {
	}

	@TearDown
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void teardown() {

	}

	@Benchmark
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void arrayCopy() {
		arrayCopyInternal();
	}

	&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void arrayCopyInternal() {
		&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] res = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[990];
		&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.arraycopy(b, 10, res, 0, 990);
		&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
	}

	@Benchmark
	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void copyRange() {
		copyOfRangeInternal();
	}

	&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; void copyOfRangeInternal() {
		&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] copyOfRange = Arrays.copyOfRange(res1, 10, 1000);
		&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
	}

	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void main(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;[] args) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; RunnerException {
		Options opt = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; OptionsBuilder().include(ArrayCopy.class.getSimpleName()).warmupIterations(1)
				.measurementIterations(2).forks(1).build();
		&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Runner(opt).run();
	}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is the new code.&lt;/p&gt;</comment>
                            <comment id="15740131" author="chia7712" created="Sun, 11 Dec 2016 18:27:17 +0000"  >&lt;p&gt;The big difference may be caused by JIT optimization. We should use static and final in the res1 and b1 so that JIT can leverage the memory for both methods. For example, the data can be prefetched because the input is never null.&lt;/p&gt;</comment>
                            <comment id="15744202" author="ram_krish" created="Tue, 13 Dec 2016 05:16:27 +0000"  >&lt;p&gt;Let me try that out. Thanks for taking a look here.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 2 Dec 2016 07:50:21 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i3726f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>