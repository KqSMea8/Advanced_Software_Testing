<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:11:08 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-3551/HBASE-3551.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-3551] Loaded hfile indexes occupy a good chunk of heap; look into shrinking the amount used </title>
                <link>https://issues.apache.org/jira/browse/HBASE-3551</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;I hung with a user Marc and we were looking over configs and his cluster profile up on ec2.  One thing we noticed was that his 100+ 1G regions of two families had ~2.5G of heap resident.  We did a bit of math and couldn&apos;t get to 2.5G so that needs looking into.  Even still, 2.5G is a bunch of heap to give over to indices (He actually OOME&apos;d when he had his RS heap set to just 3G; we shouldn&apos;t OOME, we should just run slower).  It sounds like he needs the indices loaded but still, for some cases we should drop indices for unaccessed files.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12499152">HBASE-3551</key>
            <summary>Loaded hfile indexes occupy a good chunk of heap; look into shrinking the amount used </summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Sun, 20 Feb 2011 05:13:46 +0000</created>
                <updated>Sun, 20 Apr 2014 21:43:43 +0000</updated>
                            <resolved>Thu, 10 Mar 2011 20:07:19 +0000</resolved>
                                                                        <due></due>
                            <votes>1</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="12997097" author="apurtell" created="Sun, 20 Feb 2011 06:58:22 +0000"  >&lt;p&gt;We talked before about using a fixed resource pool for file handles / storefile indices and loading or unloading on a LRU basis (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-24&quot; title=&quot;Scaling: Too many open file handles to datanodes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-24&quot;&gt;&lt;del&gt;HBASE-24&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2751&quot; title=&quot;Consider closing StoreFiles sometimes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2751&quot;&gt;&lt;del&gt;HBASE-2751&lt;/del&gt;&lt;/a&gt;, etc.) &lt;/p&gt;</comment>
                            <comment id="12997100" author="ryanobjc" created="Sun, 20 Feb 2011 07:01:39 +0000"  >&lt;p&gt;the index size is related to (a) block size and (b) the key size,&lt;br/&gt;
perhaps by tweaking one or both something might beneficial might&lt;br/&gt;
happen?&lt;/p&gt;</comment>
                            <comment id="12997985" author="stack" created="Tue, 22 Feb 2011 19:24:08 +0000"  >&lt;p&gt;@Ryan Regards key size, was small in this case and not tweakable.  Same for index offset.  Didn&apos;t want to use bigger blocks.&lt;/p&gt;

&lt;p&gt;@Andrew So, you are suggesting that we let go of whole file not just the index.  That is probably the better thing to do; it addresses index-size and other costs associated with keeping files open.&lt;/p&gt;</comment>
                            <comment id="12998125" author="mlimotte" created="Wed, 23 Feb 2011 01:47:43 +0000"  >&lt;p&gt;Here&apos;s some more detail about the situation that Stack and I saw:&lt;/p&gt;

&lt;p&gt;From region server UI (via lynx)&lt;br/&gt;
HBase Version 0.90.0, r0b7903c50eef589c632582f7d9d6364eb3912c38 HBase version and svn revision&lt;br/&gt;
HBase Compiled Mon Jan 24 20:44:24 UTC 2011, root When HBase version was compiled and by whom&lt;br/&gt;
Metrics request=0.0, regions=107, stores=214, storefiles=381, storefileIndexSize=2983, memstoreSize=0,&lt;br/&gt;
compactionQueueSize=29, usedHeap=3774, maxHeap=7141, blockCacheSize=509777848, blockCacheFree=987798472,&lt;br/&gt;
blockCacheCount=7557, blockCacheHitCount=60151, blockCacheMissCount=38698247, blockCacheEvictedCount=0,&lt;br/&gt;
blockCacheHitRatio=0, blockCacheHitCachingRatio=88 RegionServer Metrics; file and heap sizes are in megabytes&lt;br/&gt;
Zookeeper Quorum ip-xxxxxxxxx.ec2.internal:2181 Addresses of all registered ZK servers&lt;/p&gt;

&lt;p&gt;So, almost 3gb for the index &lt;/p&gt;

&lt;p&gt;1-2 stores per region, storefile-size = 1gb, hbase block size = 64k&lt;br/&gt;
num-of-entries-per-storefile = storefile-size / hbase-block-size  &lt;br/&gt;
estimated index size = num-of-entries-per-storefile * num-store-files * key-and-entry-size &lt;br/&gt;
key-and-entry-size = 20 to 200 =&amp;gt; 150  (guess)&lt;br/&gt;
estimated index size = (1G / 64K) * 381 * 150 = 900M (much less than 2983M)&lt;br/&gt;
This doesn&apos;t account for any overhead in the index, but it&apos;s hard to imaging that the overhead would account for 3X size difference.&lt;/p&gt;

&lt;p&gt;Also, our compaction queue is fairly deep (due to forced major compactions). What impact could that have storefileIndexSize?&lt;/p&gt;
</comment>
                            <comment id="13005272" author="mlimotte" created="Thu, 10 Mar 2011 19:27:07 +0000"  >&lt;p&gt;I understand this better now.  I did some poking around with the HFile tool.  Average key length does seem to be around 150 bytes, as I estimated.&lt;/p&gt;

&lt;p&gt;For one hfile /hbase/foo/fb820ae7002fc96f78165802a0b05e63/metrics/14129209576094096, metadata is:&lt;/p&gt;

&lt;p&gt;avgKeyLen=159, avgValueLen=7, entries=49285512, length=615516343&lt;br/&gt;
fileinfoOffset=592314718, dataIndexOffset=592315104, dataIndexCount=131869, metaIndexOffset=0, metaIndexCount=0, totalBytes=8653853680, entryCount=49285512, version=1&lt;/p&gt;

&lt;p&gt;Size of index = length - dataIndexOffset = 615516343 - 592315104 = 22mb&lt;/p&gt;

&lt;p&gt;Index data per Region Server = 22mb * 180 regions = almost 4gb.  Plus the other column family, so this does seem to add up to the 5 to 6gb of HEAP we are seeing.&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;of entries per dataindex entry = 49285512 / 131869 = 374&lt;br/&gt;
Times the key size (avg 157 bytes for this file) = 59k (close to the block size of 64k).  So, seems to make sense.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I also looked at the keyvalue pairs using the HFile tool (a section of output is below).&lt;/p&gt;

&lt;p&gt;We have a few billion rows (2 - 4 billion).  I haven&apos;t done a full row count.&lt;/p&gt;

&lt;p&gt;What I didn&apos;t understand previously is that it&apos;s not 374 rows, but 374 &quot;entries&quot;.  An entry means a single column entry and the key is repeated for each column value.  Given our fairly large key, that would add up quickly.&lt;/p&gt;

&lt;p&gt;Solutions&lt;br/&gt;
1) Increase the hbase block size (I did this and it resolved our situation for now)  &lt;br/&gt;
2) Modifying our schema to use smaller keys - perhaps IDs instead of string names.&lt;br/&gt;
3) Modifying our schema to have fewer columns - we could combine several related columns into one compound value.&lt;br/&gt;
4) An LRU cache for storefile indexes&lt;/p&gt;

&lt;p&gt;Given the other options, #4 may not be warranted, so I think we can close this issue.&lt;/p&gt;</comment>
                            <comment id="13005300" author="stack" created="Thu, 10 Mar 2011 20:07:19 +0000"  >&lt;p&gt;Ok.  Closing.  Will reference your comment Marc over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-25&quot; title=&quot;[hbase] Stuck regionserver?&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-25&quot;&gt;&lt;del&gt;HBASE-25&lt;/del&gt;&lt;/a&gt;, etc.  I also added a section to schema design on size of rows and column family names, keeping them small.  Thanks for digging in boss.&lt;/p&gt;

&lt;p&gt;  &amp;lt;section xml:id=&quot;keysize&quot;&amp;gt;&lt;br/&gt;
      &amp;lt;title&amp;gt;Try to minimize row and column sizes&amp;lt;/title&amp;gt;&lt;br/&gt;
      &amp;lt;para&amp;gt;In HBase, values are always freighted with their coordinates; as a&lt;br/&gt;
          cell value passes through the system, it&apos;ll be accompanied by its&lt;br/&gt;
          row, column name, and timestamp.  Always.  If your rows and column names&lt;br/&gt;
          are large, especially compared o the size of the cell value, then&lt;br/&gt;
          you may run up against some interesting scenarios.  One such is&lt;br/&gt;
          the case described by Marc Limotte at the tail of&lt;br/&gt;
          &amp;lt;link xlink:url=&quot;https://issues.apache.org/jira/browse/HBASE-3551?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&amp;amp;focusedCommentId=13005272#comment-13005272&quot;&amp;gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3551&quot; title=&quot;Loaded hfile indexes occupy a good chunk of heap; look into shrinking the amount used &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3551&quot;&gt;&lt;del&gt;HBASE-3551&lt;/del&gt;&lt;/a&gt;&amp;lt;/link&amp;gt;&lt;br/&gt;
          (recommended!).&lt;br/&gt;
          Therein, the indices that are kept on HBase storefiles (&amp;lt;link linkend=&quot;hfile&quot;&amp;gt;HFile&amp;lt;/link&amp;gt;s)&lt;br/&gt;
                  to facilitate random access may end up occupyng large chunks of the HBase&lt;br/&gt;
                  allotted RAM because the cell value coordinates are large.&lt;br/&gt;
                  Mark in the above cited comment suggests upping the block size so&lt;br/&gt;
                  entries in the store file index happen at a larger interval or&lt;br/&gt;
                  modify the table schema so it makes for smaller rows and column&lt;br/&gt;
                  names.&lt;br/&gt;
      `&amp;lt;/para&amp;gt;&lt;br/&gt;
  &amp;lt;/section&amp;gt;&lt;/p&gt;</comment>
                            <comment id="13005749" author="larsgeorge" created="Fri, 11 Mar 2011 18:02:55 +0000"  >&lt;p&gt;Just as a note: maybe another option is to compress the index in memory?&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 20 Feb 2011 06:58:22 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33083</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            5 years, 41 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hmrb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100949</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>