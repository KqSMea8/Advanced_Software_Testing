<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:19:13 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10999/HBASE-10999.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10999] Cross-row Transaction : Implement Percolator Algorithm on HBase</title>
                <link>https://issues.apache.org/jira/browse/HBASE-10999</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Cross-row transaction is a desired function for database. It is not easy to keep ACID characteristics of cross-row transactions in distribute databases such as HBase, because data of cross-transaction might locate in different machines. In the paper &lt;a href=&quot;http://research.google.com/pubs/pub36726.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://research.google.com/pubs/pub36726.html&lt;/a&gt;, google presents an algorithm(named percolator) to implement cross-row transactions on BigTable. After analyzing the algorithm, we found percolator might also be a choice to provide cross-row transaction on HBase. The reasons includes:&lt;br/&gt;
1. Percolator could keep the ACID of cross-row transaction as described in google&apos;s paper. Percolator depends on a Global Incremental Timestamp Service to define the order of transactions, this is important to keep ACID of transaction.&lt;br/&gt;
2. Percolator algorithm could be totally implemented in client-side. This means we do not need to change the logic of server side. Users could easily include percolator in their client and adopt percolator APIs only when they want cross-row transaction.&lt;br/&gt;
3. Percolator is a general algorithm which could be implemented based on databases providing single-row transaction. Therefore, it is feasible to implement percolator on HBase.&lt;br/&gt;
In last few months, we have implemented percolator on HBase, did correctness validation, performance test and finally successfully applied this algorithm in our production environment. Our works include:&lt;br/&gt;
1. percolator algorithm implementation on HBase. The current implementations includes:&lt;br/&gt;
    a). a Transaction module to provides put/delete/get/scan interfaces to do cross-row/cross-table transaction.&lt;br/&gt;
    b). a Global Incremental Timestamp Server to provide globally monotonically increasing timestamp for transaction.&lt;br/&gt;
    c). a LockCleaner module to resolve conflict when concurrent transactions mutate the same column.&lt;br/&gt;
    d). an internal module to implement prewrite/commit/get/scan logic of percolator.&lt;br/&gt;
   Although percolator logic could be totally implemented in client-side, we use coprocessor framework of HBase in our implementation. This is because coprocessor could provide percolator-specific Rpc interfaces such as prewrite/commit to reduce Rpc rounds and improve efficiency. Another reason to use coprocessor is that we want to decouple percolator&apos;s code from HBase so that users will get clean HBase code if they don&apos;t need cross-row transactions. In future, we will also explore the concurrent running characteristic of coprocessor to do cross-row mutations more efficiently.&lt;br/&gt;
2. an AccountTransfer simulation program to validate the correctness of implementation. This program will distribute initial values in different tables, rows and columns in HBase. Each column represents an account. Then, configured client threads will be concurrently started to read out a number of account values from different tables and rows by percolator&apos;s get; after this, clients will randomly transfer values among these accounts while keeping the sum unchanged, which simulates concurrent cross-table/cross-row transactions. To check the correctness of transactions, a checker thread will periodically scan account values from all columns, make sure the current total value is the same as the initial total value. We run this validation program while developing, this help us correct errors of implementation.&lt;br/&gt;
3. performance evaluation under various test situations. We compared percolator&apos;s APIs with HBase&apos;s with different data size and client thread count for single-column transaction which represents the worst performance case for percolator. We get the performance comparison result as (below):&lt;br/&gt;
    a) For read, the performance of percolator is 85% of HBase;&lt;br/&gt;
    b) For write, the performance of percolator is 60%  of HBase.&lt;br/&gt;
The drop derives from the overhead of percolator logic, the read performance is about 10% lower compared to that reported in percolator paper(94% for percolator). The write performance is much better compared to that reported in percolator paper(23% for percolator). We improve the performance of single-column transaction(also for single-row transaction) by only writing MemStore in prewrite-phase which will reduce one time HLog&apos;s write.&lt;br/&gt;
4. MapReduce Support. We implement a group of classes to support read data by themis transaction in Mapper job and write data by themis transaction in Reduce job.&lt;br/&gt;
5. The master branch of themis(&lt;a href=&quot;https://github.com/XiaoMi/themis&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/XiaoMi/themis&lt;/a&gt;) is based on HBase 0.94, we also create a branch(&lt;a href=&quot;https://github.com/XiaoMi/themis/tree/for_hbase_0.98&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/XiaoMi/themis/tree/for_hbase_0.98&lt;/a&gt;) to support hbase 0.98.&lt;br/&gt;
We are glad to share current percolator implementation and hope this could provide a choice for users who want cross-row transactions because it does not need to change the code and logic of origin HBase. Comments and discussions are welcomed.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12708684">HBASE-10999</key>
            <summary>Cross-row Transaction : Implement Percolator Algorithm on HBase</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="cuijianwei">Jianwei Cui</assignee>
                                    <reporter username="cuijianwei">Jianwei Cui</reporter>
                        <labels>
                    </labels>
                <created>Wed, 16 Apr 2014 06:54:32 +0000</created>
                <updated>Mon, 10 Nov 2014 08:43:13 +0000</updated>
                                            <version>0.99.0</version>
                                                    <component>Transactions/MVCC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>52</watches>
                                                                <comments>
                            <comment id="13973351" author="vrodionov" created="Thu, 17 Apr 2014 20:24:30 +0000"  >&lt;p&gt;I might be wrong in my assumptions, but it seems that you are doing cross region RPCs from inside Coprocessors (RegionObservers?). If this is true than how have you implemented deadlock prevention when all RPC threads on some RS can be blocked, processing incoming and outgoing requests? This subject (cross region RPCs from RegionObserver) has been discussed several times in the past and now is being considered as an anti-pattern.  &lt;/p&gt;</comment>
                            <comment id="13973620" author="cuijianwei" created="Fri, 18 Apr 2014 00:25:03 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;, thanks for your comment. The cross region works are done in client-side. The corpocessors (server side) do percolator logics(prewrite/commit/read) only for single row under the regions, the client will combine the single-row results from coprocessors of different regions to finish the whole transaction; therefore, there won&apos;t be RPCs from inside corprocessors. For example, if one cross-row transaction will mutate two rows &apos;rowA&apos; and &apos;rowB&apos; belonging to different regions, the prewrite/commit requests of &apos;rowA&apos; and &apos;rowB&apos; will be sent to region servers from client-side and processed by percolator coprocessors respectively. After that, the client will receive the results from both coprocessors, and the client could judge whether the transaction is done successfully or failed because of conflict from the coprocessors&apos; result. &lt;/p&gt;</comment>
                            <comment id="13973773" author="vrodionov" created="Fri, 18 Apr 2014 04:14:18 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt;], thank you for clarification. Any chances to look at the code any time soon? &lt;/p&gt;</comment>
                            <comment id="13975375" author="cuijianwei" created="Mon, 21 Apr 2014 04:12:36 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=vrodionov&quot; class=&quot;user-hover&quot; rel=&quot;vrodionov&quot;&gt;Vladimir Rodionov&lt;/a&gt;, sorry for replying late. Thanks for your concern. We will make this implementation open source and put to github as soon as possible. This might need one or two weeks, please have a wait&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13976125" author="stack" created="Mon, 21 Apr 2014 22:31:43 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt; Looking forward to it.  Any comment on how it relates to the work of our friends at VCNC, &lt;a href=&quot;https://github.com/VCNC/haeinsa&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/VCNC/haeinsa&lt;/a&gt;  announced here: &lt;a href=&quot;https://www.mail-archive.com/user@hbase.apache.org/msg27565.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://www.mail-archive.com/user@hbase.apache.org/msg27565.html&lt;/a&gt;  Thanks.&lt;/p&gt;</comment>
                            <comment id="13976279" author="cuijianwei" created="Tue, 22 Apr 2014 01:27:33 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, thanks for your comment. Haeinsa is an interesting project to implement cross-row transaction on HBase. We analyzed Haeinsa&apos;s implementation before deciding to implement percolator algorithm. In my opinion, an important difference between percolator and Haeinsa is that percolator provides global database snapshot for read while Haeinsa always returns the data of newest committed transactions. If our analysis is right, the read of Haeinsa needs two phases. Firstly, Haeinsa needs to read back the data and locks of transaction rows where the data and locks will be both cached in client side. After this, Haeinsa needs to read back the locks of transaction rows again to check the locks are not changed, so that won&apos;t return incomplete transactions to users. The two-phase read might make Haeinsa not easy to read large volume of data for two reasons&#65306;a). it is not easy to cached data and locks for a large number of rows in client side; b) when scanning a large range of rows, newer writes have a greater possibility to change the locks of scanning rows which will make read fail more easily. On the other hand, percolator will use the a global incremental timestamp to define the database snapshot for read. The client will return the row to user if no lock conflict discovered, so that does not need to cache any data and lock in client side.&lt;br/&gt;
   The Haeinsa project does not provides global database snapshot so that it does not depend a Global Incremental Timestamp Service, which makes its implementation more independent. However, in my opinion, the global database snapshot is important for transactions as analyzed above; and we find it is not difficult to implement a Global Incremental Timestamp Service. Consequently, we implemented percolator algorithm to do cross-row transaction.&lt;/p&gt;</comment>
                            <comment id="13979621" author="eincs" created="Thu, 24 Apr 2014 12:05:10 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, Thank you for mentioning Haeinsa. I&apos;m one of the developer of Haeinsa.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt; is right. Haeinsa is designed to handle handful of rows(about lees than 100s of rows). We are using Haeinsa for OLTP, and it tends to be small number of rows in single transaction. It might be a problem on the system which needed to handle large number of read on rows in single transaction. You can see this information on wiki page of Haeinsa project.&lt;br/&gt;
&lt;a href=&quot;https://github.com/VCNC/haeinsa/wiki/How-to-Use#important-information&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/VCNC/haeinsa/wiki/How-to-Use#important-information&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Actually, our first attempt to implementing cross-row transaction on HBase was cloning the Percolator. But there were several reason why we built Haeinsa rather than implementing Percolator: Stronger isolation level than snapshot-isolation was needed, Better latency was needed for our OLTP system, and so on.&lt;/p&gt;

&lt;p&gt;There are several benefits Percolator over Haeinsa in some cases, as cuijianwei mentioned, It might be great to see open-sourced implementation of the Percolator for HBase.&lt;/p&gt;</comment>
                            <comment id="13980430" author="stack" created="Thu, 24 Apr 2014 22:52:32 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eincs&quot; class=&quot;user-hover&quot; rel=&quot;eincs&quot;&gt;James Lee&lt;/a&gt; for dropping by.&lt;/p&gt;</comment>
                            <comment id="13983904" author="cuijianwei" created="Tue, 29 Apr 2014 02:32:18 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eincs&quot; class=&quot;user-hover&quot; rel=&quot;eincs&quot;&gt;James Lee&lt;/a&gt;, thanks for your comments. I agree that Percolator and Haeinsa each have benefits. I think Percolator and Haeinsa might differ from some aspects, including isolation level, global timestamp oracle and snapshot read. Last week, we made our Percolator implementation on HBase(named themis) open source in github : &lt;a href=&quot;https://github.com/XiaoMi/themis/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/XiaoMi/themis/&lt;/a&gt;, including modules of themis and results of performance test. I am glad that if you can have a look at themis, and any comment and suggestion will is welcomed.&lt;/p&gt;</comment>
                            <comment id="13983979" author="stack" created="Tue, 29 Apr 2014 04:34:50 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt; Suggest you post a note on dev list about your new project.  Not everyone reads JIRAs and of those who do, more than they would be interested in a percolator clone.  Good stuff.&lt;/p&gt;</comment>
                            <comment id="14010663" author="jeffreyz" created="Wed, 28 May 2014 02:03:29 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt; It seems the WorkerRegister hasn&apos;t fully been implemented. The current code is based on 0.94 while Hbase CP has incompatible changes since then. &lt;br/&gt;
What&apos;s your plan to incorporate Themis into HBase: move the code into HBase code base or still put Themis as a third party library outside of HBase. If leaving Themis outside, I can image transaction will become one of core functionalities and will be hard to fix when there is any issue and also hard to correlate release cycles.  &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; What&apos;s your thoughts on this? Thanks.&lt;/p&gt;</comment>
                            <comment id="14010679" author="cuijianwei" created="Wed, 28 May 2014 02:30:39 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, thanks for your suggestion, sorry to reply late. The performance of themis write in current version is not good enough. In recent weeks, we optimized the performance of multi-row transactions by concurrent prewrite/commit. The performance after adopting concurrent prewrite/commit has improved significantly when doing multi-row transactions. We are trying to optimize single-row transaction and will update the performance report, then, we will post a note on dev list with new result &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14010744" author="cuijianwei" created="Wed, 28 May 2014 04:05:41 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt;, thanks for your concern. The WorkerRegister hasn&apos;t fully been implemented. As mentioned in percolator paper, clients which use transaction could register a ephemeral node in zookeeper through WorkerRegister. Then, if clients fail and exit, other clients could know the failed clients quickly when their ephemeral nodes deleted, this could help to resolve lock conflict more efficiently. In current version, themis resolve lock conflict by TTL of lock, and we will implement the WorkerRegister logic in next version. &lt;br/&gt;
I agree that transaction will become one of the core functionalities. We hope themis could come into HBase code base if possible and work as a component of HBase to provide transaction function. The implementation of themis is based on CP and won&apos;t change the source code of HBase. Users could invoke themis APIs only when they need transaction. And we can respond more quickly if there is any issue about transaction function.&lt;/p&gt;</comment>
                            <comment id="14033382" author="stack" created="Tue, 17 Jun 2014 03:06:16 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Stack What&apos;s your thoughts on this? Thanks.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;My thoughts are that hbase is fat enough already with enough scope.  That said, everyone wants transactions so I could see an implementation coming into core.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=cuijianwei&quot; class=&quot;user-hover&quot; rel=&quot;cuijianwei&quot;&gt;Jianwei Cui&lt;/a&gt; You still haven&apos;t posted notice of this fine work up on the list (smile).  Go easy&lt;/p&gt;</comment>
                            <comment id="14054613" author="cuijianwei" created="Tue, 8 Jul 2014 07:41:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;, thanks for your comment and sorry for replying late. We finished the performance test after applying concurrent write for multi-row transactions. I send an email to the mail list to introduce the Themis project, hope more discussions about transaction on HBase&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;  &lt;/p&gt;</comment>
                            <comment id="14204508" author="cuijianwei" created="Mon, 10 Nov 2014 08:31:42 +0000"  >&lt;p&gt;In last few months, we have updated Themis to achieve better performance and include more features:&lt;br/&gt;
1. Improve the single-row write performance from 23%(relative drop compared with HBase&apos;s put) to 60%(for most test cases). For single-row write transaction, we only write lock to MemStore in prewrite-phase, then, we erase correpsonding lock, write data and commit information to HLog in commit-phase. This won&apos;t break the correctness of percolator algorithm and will help improve the performance a lot for single-row write.&lt;br/&gt;
2. Support HBase 0.98. We create a branch: &lt;a href=&quot;https://github.com/XiaoMi/themis/tree/for_hbase_0.98&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/XiaoMi/themis/tree/for_hbase_0.98&lt;/a&gt; to make themis support HBase 0.98(Currently, support HBase 0.98.5). All the functions of master branch will also be implemented in this branch.&lt;br/&gt;
3. Transaction TTL support and Old Data Clean. Users could set TTL for read/write transaction respectivley. Then, old data which could not be read will be cleaned periodly.&lt;br/&gt;
4. MapReduce Support. We implement ThemisTableInputFormat to scan data from themis-enable table in Map Job and ThemisTableOutputFormat to write data by themis transaction in Reducer Job. Mult-table scan and write are also supportted.&lt;br/&gt;
5. Implement Zookeeper based WorkerRegister. As mentioned in percolator paper, &quot;Running workers write a token into the Chubby lockservice&quot;, ZookeeperWorkerRegister implements this function and will help resolve conflict more efficiently.&lt;br/&gt;
6. Table Schema Support. Users could set &quot;THEMIS_ENABLE&quot; attribute to &quot;true&quot; to family which needs themis transaction, then, themis will automatically set corresponding attributes to the family and create lock family.&lt;br/&gt;
For more details, please see: &lt;a href=&quot;https://github.com/XiaoMi/themis&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/XiaoMi/themis&lt;/a&gt; (for HBase 0.94) and &lt;a href=&quot;https://github.com/XiaoMi/themis/tree/for_hbase_0.98&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/XiaoMi/themis/tree/for_hbase_0.98&lt;/a&gt; (for HBase 0.98). &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 17 Apr 2014 20:24:30 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>387007</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 5 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1uo2v:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>387270</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>