<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:46:40 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7533/HBASE-7533.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7533] Write an RPC Specification for 0.96</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7533</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;RPC format is changing for 0.96 to accomodate our protobufing all around.  Here is a first cut.  Please shred: &lt;a href=&quot;https://docs.google.com/document/d/1-1RJMLXzYldmHgKP7M7ynK6euRpucD03fZ603DlZfGI/edit&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/document/d/1-1RJMLXzYldmHgKP7M7ynK6euRpucD03fZ603DlZfGI/edit&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12627016">HBASE-7533</key>
            <summary>Write an RPC Specification for 0.96</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12633454">HBASE-7898</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stack">stack</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Thu, 10 Jan 2013 20:20:17 +0000</created>
                <updated>Tue, 15 Oct 2013 04:46:36 +0000</updated>
                            <resolved>Wed, 20 Mar 2013 22:58:54 +0000</resolved>
                                                    <fixVersion>0.98.0</fixVersion>
                    <fixVersion>0.95.0</fixVersion>
                                    <component>IPC/RPC</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>14</watches>
                                                                <comments>
                            <comment id="13550590" author="eclark" created="Fri, 11 Jan 2013 00:15:11 +0000"  >&lt;p&gt;So this exercise got me thinking.  Right now RpcRequstHeader and RpcResponseHeader are used so that not all data must be decoded to get some meta data.  Since we&apos;re moving towards EncodedDataBlocks coming after the Protobuf responses, there&apos;s not a requirement for a header.&lt;/p&gt;

&lt;p&gt;That means we could have one RpcRequest and one RpcResponse.  That would greatly simplify the rpc specification.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
message CoprocessorServiceRequest {
  required RegionSpecifier region = 1;
  required CoprocessorServiceCall call = 2;
}
message MutateRequest {
  required RegionSpecifier region = 1;
  required Mutate mutate = 2;
  optional Condition condition = 3;
}
message GetRequest {
  required RegionSpecifier region = 1;
  required Get get = 2;

  &lt;span class=&quot;code-comment&quot;&gt;// If the row to get doesn&apos;t exist, &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; the
&lt;/span&gt;  &lt;span class=&quot;code-comment&quot;&gt;// closest row before.
&lt;/span&gt;  optional bool closestRowBefore = 3;

  &lt;span class=&quot;code-comment&quot;&gt;// The result isn&apos;t asked &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;, just check &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;
&lt;/span&gt;  &lt;span class=&quot;code-comment&quot;&gt;// the existence. If specified, closestRowBefore
&lt;/span&gt;  &lt;span class=&quot;code-comment&quot;&gt;// will be ignored
&lt;/span&gt;  optional bool existenceOnly = 4;
}

message ScanRequest {
  optional RegionSpecifier region = 1;
  optional Scan scan = 2;
  optional uint64 scannerId = 3;
  optional uint32 numberOfRows = 4;
  optional bool closeScanner = 5;
  optional uint64 nextCallSeq = 6;
}
message RpcException {
  /** &lt;span class=&quot;code-object&quot;&gt;Class&lt;/span&gt; name of the exception thrown from the server */
  required string exceptionName = 1;

  /** Exception stack trace from the server side */
  optional string stackTrace = 2;
}
message UnionRequestType {
	required Enum requestType {GET = 1; MUTATE = 2; SCAN = 3; BULKLOAD = 4; COPROC = 5;} = 1;
	optional GetRequest getRequest = 2
	optional MutateRequest mutateRequest = 3;
	optional ScanRequest scanRequest = 4;
	optional BulkLoadRequest bulkLoadRequest = 5;
	optional CoprocessorServiceRequest coprocessorServiceRequest = 6;
	optional RpcException exception = 7;
}
message TraceInfo {
 &lt;span class=&quot;code-comment&quot;&gt;//Whatever is here
&lt;/span&gt;}
 
message EncodedDateBlockMeta {
	required unit64 = size =1;
	optional string type = 2 [&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; = &lt;span class=&quot;code-quote&quot;&gt;&quot;KeyValue&quot;&lt;/span&gt;]
	optional encoding encoding = 3;
}

message RpcRequest {
	required &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; callId = 1;
	required ServiceDescriptor serviceId = 2; &lt;span class=&quot;code-comment&quot;&gt;// Equivilant to current protocol.
&lt;/span&gt;	required MethodDescriptor method = 3;
	optional EncodedDataBlockMeta encodedDataMeta = 4; 
	repeated UnionRequestType requests = 5;
	optinal TraceInfo traceInfo = 6;
	optional unit8 priority = 7 [&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; = 0];

}
message UnionResponseType {
	required Enum responseType {GET = 1; MUTATE = 2; SCAN = 3; BULKLOAD = 4; COPROC = 5;} = 1;
	optional GetResponse getResponse  = 2
	optional MutateResponse  mutateResponse  = 3;
	optional ScanResponse  scanResponse  = 4;
	optional BulkLoadResponse  bulkLoadResponse  = 5;
	optional CoprocessorServiceResponse  coprocessorResponse  = 6
}

message RpcResponse {
	required unit64 callId = 1;
	required ServiceDescriptor serviceId = 2; &lt;span class=&quot;code-comment&quot;&gt;// Equivilant to current protocol.
&lt;/span&gt;	required MethodDescriptor method = 3;
	repeated UnionResponseType requests = 5;

}

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13550647" author="stack" created="Fri, 11 Jan 2013 00:58:58 +0000"  >&lt;p&gt;Thats better.  Much better.  I&apos;ll update the doc. (You are going to comment on the union... )&lt;/p&gt;</comment>
                            <comment id="13550851" author="stack" created="Fri, 11 Jan 2013 05:47:08 +0000"  >&lt;p&gt;Chatting with &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt;, a &quot;downside&quot; to the above scheme is the need in protobuf to list every ipc method in the UnionResponseType enum and also in the UnionRequestType.  It seems a bit much given we can extrapolate param type and return given the method name (whether we are doing reflection against &apos;protocol&apos; Interfaces or lookups in pb Service).  Elliott suggested we could have opaque bytes for the request and response Message.  This would mean unmarshal the RpcResponse, then unmarshal the contained bytes to find the Response Message.  This would be a bit of a pain.  Where we left it was prototyping out both; that would be probably more informative than prognosticating in front of a white board.  I&apos;ll have a go at it.&lt;/p&gt;

&lt;p&gt;Hey &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt;, is there a response type missing from your enum example list above?  The error type?&lt;/p&gt;</comment>
                            <comment id="13550868" author="eclark" created="Fri, 11 Jan 2013 06:12:53 +0000"  >&lt;p&gt;My thought was that the union type would have an optional exception type in addition to the response types; that would allow us to more directly tie exceptions from multis to the action that caused them.  Though that might not be great.  What do you think ?&lt;/p&gt;</comment>
                            <comment id="13550889" author="stack" created="Fri, 11 Jan 2013 06:39:16 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; Well, we need to be able to pick through a multi response and correlate exception and request that caused it so yeah, an exceptionResponse (with an &apos;exception&apos; addition to the enum...).  Or were you thinking something different?&lt;/p&gt;</comment>
                            <comment id="13551453" author="eclark" created="Fri, 11 Jan 2013 19:45:56 +0000"  >&lt;p&gt;The Union message types are structured after &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/techniques#union&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://developers.google.com/protocol-buffers/docs/techniques#union&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We should move the enum out of the Request/Response messages.  That will clean some things up a little.&lt;/p&gt;

&lt;p&gt;As far as the exception being in the enum, my thinking was as follows:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;For multi we could say what type the response should be.&lt;/li&gt;
	&lt;li&gt;Then if there&apos;s an exception put that in the exceptions field.&lt;/li&gt;
	&lt;li&gt;If there was a partial result it could still go in the result field.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This would allow us to give partial results (a new feature for the 0.98ish time frame).  It would also allow us to just give the features that we have currently.&lt;/p&gt;
</comment>
                            <comment id="13553025" author="devaraj" created="Mon, 14 Jan 2013 19:35:16 +0000"  >&lt;p&gt;Went over the doc briefly. We should have a section on how to handle priority RPCs. Thinking about it, looking at the method name on the server side and then parsing the request object (for example, if the request object has reference to META it should have higher priority) would work to segregate the requests. In the request I see &quot;Get, Put, Scan, etc&quot;. Are these the bytestring representation of the PB messages?&lt;/p&gt;</comment>
                            <comment id="13553094" author="eclark" created="Mon, 14 Jan 2013 20:39:20 +0000"  >&lt;p&gt;The request should have a priority imo. That will make transitioning to a more granular priority queue much easier. It will also be simpler.&lt;/p&gt;</comment>
                            <comment id="13553125" author="devaraj" created="Mon, 14 Jan 2013 21:18:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;The request should have a priority imo. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The thing that we need to then care about is no one should be misusing the priority (maliciously or otherwise). That will be a hole. I think it is the job of the server to decide the priority and not the client&apos;s.. In the current RPC implementation the server parses the request object for known request types to figure out whether the request should be treated with higher priority or not. There could be a bunch of other factors that determine the priority (like which IP address the request came from etc.) but request object potentially has certain attributes that play a role here as well..&lt;/p&gt;</comment>
                            <comment id="13553139" author="eclark" created="Mon, 14 Jan 2013 21:33:35 +0000"  >&lt;p&gt;At this point a rogue client can pretty easily bring down a cluster, so I don&apos;t think that adding the complexity of a rules based system on the server will really buy us any resiliency. We could be sanity check the priority on the server side.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There could be a bunch of other factors that determine the priority&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t think that we can anticipate all of the factors that users will want to include.  So it&apos;s easier to let users add their logic on the client side rather than the server side.&lt;/p&gt;

&lt;p&gt;Additionally having the ability to expose priority to the user would be really useful feature that we would get for almost no extra cost.  In my eyes that would be a start towards allowing users to have mapred and realtime use cases on the same hardware.&lt;/p&gt;</comment>
                            <comment id="13553174" author="devaraj" created="Mon, 14 Jan 2013 22:01:39 +0000"  >&lt;blockquote&gt;
&lt;p&gt;At this point a rogue client can pretty easily bring down a cluster, so...&lt;br/&gt;
We could be sanity check the priority on the server side.&lt;br/&gt;
I don&apos;t think that we can anticipate all of the factors that users will want to include. So it&apos;s easier to let users add their logic on the client side rather than the server side.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Fair points.. For now, let&apos;s make the priority an optional field in the RPC and let the client send it. That would give us enough wiggle room to switch to an alternate implementation (and at that point maybe make it configurable on whether we would honor client&apos;s notion of priority..).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I don&apos;t think that we can anticipate all of the factors that users will want to include&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Of course.. I meant to just give examples of other things that the server might want to consider before assigning priority to a request... &lt;/p&gt;</comment>
                            <comment id="13553218" author="eclark" created="Mon, 14 Jan 2013 22:43:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;For now, let&apos;s make the priority an optional field in the RPC and let the client send it. That would give us enough wiggle room to switch to an alternate implementation&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Seems like a good way to go forward.  I think most of the fields are going to be optional going forward.&lt;/p&gt;</comment>
                            <comment id="13554140" author="stack" created="Tue, 15 Jan 2013 18:52:41 +0000"  >&lt;p&gt;Here is my completing Elliott&apos;s sketch.  I&apos;m not sure I like it.  In particular, I do not like that we have these fat RpcRequest and RpcResponse that have all types listed though they may not apply.&lt;/p&gt;

&lt;p&gt;Pity you can&apos;t inherit a base type in protobuf...&lt;/p&gt;

&lt;p&gt;On other hand, not all Services have a callid or want to do tracing...  &lt;/p&gt;</comment>
                            <comment id="13555807" author="enis" created="Thu, 17 Jan 2013 03:32:45 +0000"  >&lt;p&gt;For &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7268&quot; title=&quot;correct local region location cache information can be overwritten (or deleted) w/stale information from an old server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7268&quot;&gt;&lt;del&gt;HBASE-7268&lt;/del&gt;&lt;/a&gt;, I was going over the changes in RegionMovedException, and realized that, for some class of exceptions (RegionMoved, RegionOffline, etc), we have to carry some data over the wire to the client side which should be PB&apos;ed as well. Right now, we are sending the stack trace over, and from the client side, parsing the stack trace. i guess this is not handled at the attached spec as well.  &lt;/p&gt;

&lt;p&gt;Thinking about the problem with Sergey and DD, we realized that there are mainly two classes of exceptions that we can throw. RegionMovedException, and the like are different from KeeperException, etc, in the sense that they are expected return values for some rpc calls, like put, and they carry data. &lt;/p&gt;

&lt;p&gt;In the end, I think we have to be able to define PB messages for some exceptions:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
message RegionMovedException{
  required ServerName serverName = 1;
  optional int64 openSeqNum = 2;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;. &lt;br/&gt;
Now given that, I think we can do the enum approach of enumerating all exception messages in RpcException, and have the ipc layer from the client side construct the actual exception class with passing the Message to the exception c.tor. We can have a superclass like, PBException extends Exception containing a Message, and RegionMovedException extends PBException. The ipc layer from the server side, will know about PBException, and will pass the serialized bytes. &lt;/p&gt;

&lt;p&gt;Alternatively, we can try to embed the exception that the client knows about (RegionMovedException) to the actual response messages, as valid messages. The region server code in this case for example, will not throw an exception, but instead, but the exception data in the response, and pass to rpc layer. The actual RPC response will be SUCCESS, not ERROR, but the client can inspect the response data, and see that exception (and maybe construct and throw an actual exception).&lt;/p&gt;


</comment>
                            <comment id="13555828" author="stack" created="Thu, 17 Jan 2013 04:17:00 +0000"  >&lt;p&gt;Thanks for bringing this up now &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;i guess this is not handled at the attached spec as well.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Correct.&lt;/p&gt;

&lt;p&gt;Current implementation is like the old where a flag is set in header to say Call failed and then caller reads the Stringified exception and throws the wrapper exception.&lt;/p&gt;

&lt;p&gt;There are a few types of exception currently: 1. A fatal exception kills the connection (bad auth, wrong rpc version), and 2. an exception that just fails the particular call and we keep going w/ outstanding calls.  Now we have a third type, one that is to carry pb data.&lt;/p&gt;

&lt;p&gt;Messing w/ Elliott, given our rpc now does a request that takes a single pb Message and returns a single pb Message response, we toyed w/ making it so every Message was a union; either a response or an exception.  Undoing the response you&apos;d test if it an exception and act accordingly, otherwise, process the response.  This would seem to be how the google fellas would have you do it (according to old blog response, see #9 response here &lt;a href=&quot;http://steve.vinoski.net/blog/2008/07/13/protocol-buffers-leaky-rpc/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://steve.vinoski.net/blog/2008/07/13/protocol-buffers-leaky-rpc/&lt;/a&gt;).  We chose not to edit all 55 response types so they could take an exception instead and if we did, there&apos;d still be the type #1 and #2s above (The type #2s could probably be corralled as legit exception responses).&lt;/p&gt;

&lt;p&gt;How about we try your alternate proposal for now.  I think the tendency will be to evolve all rpc in this direction eventually.  It would avoid a bunch of code change just now.  On other hand, it makes our spec. messier allowing 3 types of exception rather than two (I started an Exceptions section in spec; it needs filling out still).&lt;/p&gt;

&lt;p&gt;What you reckon?&lt;/p&gt;</comment>
                            <comment id="13555835" author="stack" created="Thu, 17 Jan 2013 04:25:08 +0000"  >&lt;p&gt;So, abandoning the approach represented by the attached patch.  Instead going back to:&lt;/p&gt;

&lt;p&gt;&amp;lt;header&amp;gt;&lt;br/&gt;
&amp;lt;request Message&amp;gt;&lt;br/&gt;
&amp;lt;optional encoded data block&amp;gt;&lt;/p&gt;

&lt;p&gt;Going the above route, you have to decode two Messages &amp;#8211; we were trying to get it so you only decode one Message with the header info and request Message all in one but to do so, you would have to go the route of the unmaintainable fat rpc proto patch attached.  Will update the spec soon.&lt;/p&gt;</comment>
                            <comment id="13555870" author="eclark" created="Thu, 17 Jan 2013 05:22:10 +0000"  >&lt;p&gt;We could still go the route of bytes in a single message.  That seems like it would hold with the exceptions problem as well something like&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
message StringBasedException {
 required string exceptionClass = 1;
 optional string stack = 2;
}
message RegionMovedException {
  required ServerName serverName = 1;
  optional int64 openSeqNum = 2;
}
message Response {
  optional bytes responseBody = 1; &lt;span class=&quot;code-comment&quot;&gt;// builder is infered from method called
&lt;/span&gt;  &lt;span class=&quot;code-comment&quot;&gt;//&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the response has extra data put it here.
&lt;/span&gt;  optional ECDMeta ecdMetaDate = 2;

  optional string exceptionMessageType = 3;
  &lt;span class=&quot;code-comment&quot;&gt;//use the string to get the builder.
&lt;/span&gt;  optional bytes exceptionBody = 4;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13556520" author="devaraj" created="Thu, 17 Jan 2013 19:45:42 +0000"  >&lt;p&gt;IMHO we should retain the RegionMovedException as an exception (with an embedded Message field that basically is used for serializing the exception fields). Maybe, have such exceptions implement an interface like PBException that has methods that would allow them to be ser/de. Then in the RPC layer it could do instanceof checks and ser/de such exceptions. This would prevent parsing strings while providing PB extensibility to RPC exceptions.&lt;br/&gt;
Do we need to encapsulate the data within a &quot;Response&quot; message? Instead, if we state in the RPC response header that there is an exception (with the exceptionMessageType) following, we could directly serialize the exception. Ditto for the responseBody.. We would avoid copies that way.&lt;br/&gt;
Thoughts?&lt;/p&gt;</comment>
                            <comment id="13556609" author="enis" created="Thu, 17 Jan 2013 21:22:01 +0000"  >&lt;p&gt;One relevant argument, I have heard from Sanjay, is that if you are writing a PB client in C for HBase, then basically, you shouldn&apos;t be relying on the Java&apos;s semantics of exceptions. If you consider something like RegionMovedException, it is a case where the C client might want to inspect and do some action. &lt;/p&gt;

&lt;p&gt;Elliot, how would you suggest we pass the RegionMovedException from RegionServer through the ipc? The region server will throw an actual exception wrapping the message which will be understood by the ipc layer, or the region server does not throw the exception, but set the exception message to the response? &lt;/p&gt;</comment>
                            <comment id="13556623" author="stack" created="Thu, 17 Jan 2013 21:37:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;Maybe, have such exceptions implement an interface like PBException that has methods that would allow them to be ser/de.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;First, let me say, using exceptions for messaging is perverse as RegionMovedException is doing.&lt;/p&gt;

&lt;p&gt;Second, how many instances of payload carrying exceptions do we have?  One, two?&lt;/p&gt;

&lt;p&gt;How would this work?  Per Exception, we would define a pb Message (because we want to use pb serializing).  You can&apos;t have a pb Message be an exception because it can&apos;t inherit, not unless we mess w/ protoc, nor can we subclass the pb since Throwable is a class, so, PBException would have serializeAsPB and deserializeAsPB methods in its Interface (sounds like Writable!).&lt;/p&gt;

&lt;p&gt;On serverside, when we get one of these messages, we would treat it different doing the above serializeAsPB.  We&apos;d then have an &apos;exception&apos; pb Message.  I would mark the header saying we have an exception and then I&apos;d also write the classname into the response header.&lt;/p&gt;

&lt;p&gt;On client, would notice an exception then would see if a classname.  If present, would create an instance or just invoke a static deserialize method that would know the pb to use and would undo the pb (can&apos;t have static methods in Interfaces so this route would be a little messy), then we would return an instance of aforementioned exception, wrap it in RemoteException and throw it?&lt;/p&gt;

&lt;p&gt;Sounds like a bit of work.  Complicates things some too.  If our rpc is simple, prospect of writing a non-java client would be less daunting.&lt;/p&gt;

&lt;p&gt;What you reckon?&lt;/p&gt;</comment>
                            <comment id="13556630" author="stack" created="Thu, 17 Jan 2013 21:43:52 +0000"  >&lt;p&gt;Currently in RPC, there is an ExceptionMessage used to carry exceptions.  It has, as you&apos;d expect, exception name and stack trace.  What if we added opaque Map, a repeatable PairByteBytes, to ExceptionMessage.  On serialization, we&apos;d looks for a Dictionary marker Interface.  If present, would serialize the content.  Ditto on deserialize.  Would not be evolvable.  You would have to have a different key name if you wanted to change format.  Its generic though.&lt;/p&gt;</comment>
                            <comment id="13556636" author="enis" created="Thu, 17 Jan 2013 21:52:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;First, let me say, using exceptions for messaging is perverse as RegionMovedException is doing.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That is why I am more convinced of the alternate proposal of having things like RME as valid return types from get/put/etc. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Second, how many instances of payload carrying exceptions do we have? One, two?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The most offending one I can think of is DoNotRetryIOException. By definition, you are passing some semantics (although no data) to the client as an exception by using the exception class hierarchy. Imagine again a C client, in which we get the actual exception class, but don&apos;t have the java class hierarchy to reason about whether this class inherits from DNRIOE. &lt;/p&gt;</comment>
                            <comment id="13556643" author="eclark" created="Thu, 17 Jan 2013 22:03:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;The region server will throw an actual exception wrapping the message which will be understood by the ipc layer, or the region server does not throw the exception, but set the exception message to the response?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not sure I understand the question, so I might not answer the exact question you&apos;re asking.  However here&apos;s my thinking:&lt;/p&gt;

&lt;p&gt;Right now the HRegionServer throws the exception and the ipc classes on the server side catch the exception.  This exception is currently a message carrying two strings that&apos;re parsed on the client side.&lt;/p&gt;

&lt;p&gt;I&apos;m proposing a that exception is sent as bytes + name of the class to decode these bytes.  So a couple of examples:&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;HRegionServer throws NoSuchColumFamilyException (could be any of the normal non payload carrying exceptions)&lt;/li&gt;
	&lt;li&gt;The ipc handler catches the exception.&lt;/li&gt;
	&lt;li&gt;Sees that there&apos;s no registered way to serialize this specially.&lt;/li&gt;
	&lt;li&gt;So the ipc handler would use the default StringBasedException.&lt;/li&gt;
	&lt;li&gt;That pb would be built and the bytes array would be added to the response along side the key that tells the client to decode on it&apos;s side using StringBasedException.&lt;/li&gt;
	&lt;li&gt;The client would then get the message.&lt;/li&gt;
	&lt;li&gt;See there is an exception.&lt;/li&gt;
	&lt;li&gt;look up how to decode it using exceptionMessageType.&lt;/li&gt;
	&lt;li&gt;decode the bytes array and throw the exception&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;The special case:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;HRegionServer throws RegionMovedException&lt;/li&gt;
	&lt;li&gt;The ipc classes catch the exception&lt;/li&gt;
	&lt;li&gt;See that this is a specially registered class.&lt;/li&gt;
	&lt;li&gt;Use the registered encode to take RegionMovedException and create RegionMovedExceptionMessage.&lt;/li&gt;
	&lt;li&gt;Build the message&lt;/li&gt;
	&lt;li&gt;put the bytes into the exception field.&lt;/li&gt;
	&lt;li&gt;put the key telling the client to decode this as RegionMovedExceptionMessage into exceptionMessageType&lt;/li&gt;
	&lt;li&gt;client would get the message&lt;/li&gt;
	&lt;li&gt;see that there&apos;s an exception&lt;/li&gt;
	&lt;li&gt;load the class the key says will decode the exception bytes.&lt;/li&gt;
	&lt;li&gt;Use it to parse the RegionMovedExceptionMessage&lt;/li&gt;
	&lt;li&gt;throw the exception on the client side.&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;Edit: Formatting.&lt;/p&gt;</comment>
                            <comment id="13556650" author="stack" created="Thu, 17 Jan 2013 22:11:41 +0000"  >&lt;p&gt;WIP&lt;/p&gt;

&lt;p&gt;Implement spec (sending header and then the request Message return response Message)&lt;/p&gt;

&lt;p&gt;Currently patch does too much.  Will cut it back.  For example:&lt;/p&gt;

&lt;p&gt;1. Under the proxy, it uses pb Service too.  A Stub/Service&lt;br/&gt;
is created when we create the proxy.  We use the Stub/Service&lt;br/&gt;
doing lookups to find request and response types as well as&lt;br/&gt;
for making the invocations rather than user reflection.  Should&lt;br/&gt;
do this in a separate patch instead of in here dependent on&lt;br/&gt;
whether we decide to move to pb Service rather than use&lt;br/&gt;
Proxy/reflection.&lt;br/&gt;
2. Removes QoSFunction priority setting.  Used work by combination&lt;br/&gt;
of annotations and inspection of regionname.  Would undo request&lt;br/&gt;
to figure it out.  Awkward.  Simplier (as per Elliott idea). is&lt;br/&gt;
just having client set priority.  Server can choose to respect&lt;br/&gt;
priority or not. Saves a bunch of code.&lt;/p&gt;

&lt;p&gt;TODO: Need to get encodedatablocks into the mix.  Currently not there.&lt;br/&gt;
TODO: Add to IpcProtocol returning a Service Class.  Will clean up implementation.&lt;br/&gt;
TODO: This patch is not working yet.&lt;br/&gt;
TODO: Add priority to client calls.&lt;/p&gt;</comment>
                            <comment id="13556656" author="devaraj" created="Thu, 17 Jan 2013 22:19:31 +0000"  >&lt;p&gt;What I was thinking maps well to what Elliot just said (Elliot thanks for the detailed sequence). In general, I was trying to preserve exceptions, so that if methods are called inline (without going through RPC), they would still throw those exceptions. And if the client is Java, invoking the method over RPC, they also wouldn&apos;t need to change (but the RPC layer creates the appropriate exceptions and throws it up to the client call). For clients in C, they would get the exceptionName and the relevant bytes and yes, they&apos;d need to do special handling.. (and I agree this is less than ideal for them).&lt;/p&gt;</comment>
                            <comment id="13556661" author="stack" created="Thu, 17 Jan 2013 22:25:05 +0000"  >&lt;p&gt;How many of these unorthodox payload-bearing exceptions do we have?  Is it one?  Two?  Why not just add these to the spec and then the special handling for each rather than conjure an extensible system that has a registry apart from the one we already have, the pb ServiceDescriptor?&lt;/p&gt;</comment>
                            <comment id="13556663" author="enis" created="Thu, 17 Jan 2013 22:25:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m not sure I understand the question, so I might not answer the exact question you&apos;re asking. However here&apos;s my thinking:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Thanks, I was asking about how are we going to pass the exception from the region server layer to the ipc layer without breaking layering. Not sure registering serializers for exceptions is the cleanest way though. &lt;br/&gt;
I think what DD was talking about above, was something like this: &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
class PBException &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Exception { 
Message message;
PBException(Message message) {&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.message = message;}
}
class RegionMovedException &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; PBException {
   RegionMovedException(RegionMovedData message) {&lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(message);} &lt;span class=&quot;code-comment&quot;&gt;// ctor from server side
&lt;/span&gt;   RegionMovedException(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes) {} &lt;span class=&quot;code-comment&quot;&gt;// ctor from server side   
&lt;/span&gt;}
message RegionMovedData {
  required ServerName serverName = 1;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The flow would be:&lt;br/&gt;
1. HRegionServer throws RegionMovedException&lt;br/&gt;
2. The ipc classes catch the exception&lt;br/&gt;
3. Checks exception is instanceof PBException. --&amp;gt; ipc knows about PBException&lt;br/&gt;
4. Constructs the exceptionBody bytes by serializing ex.message&lt;br/&gt;
5. put the bytes into the exception field.&lt;br/&gt;
6. put the class name &quot;RegionMovedException&quot; as exception class name&lt;br/&gt;
7. client would get the message&lt;br/&gt;
8. see that there&apos;s an exception&lt;br/&gt;
9. Instantiate and throw the exception class (RegionMovedException) by using the byte[] ctor, which would decode this as RegionMovedData&lt;/p&gt;</comment>
                            <comment id="13556694" author="stack" created="Thu, 17 Jan 2013 22:53:05 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; Yeah.  Looks like Elliott&apos;s scratches but rather than a factory you&apos;d just drop the bytes into the Constructor and let the class make sense of it.  That&apos;d work.&lt;/p&gt;

&lt;p&gt;But I&apos;d suggest we do not need a generically extensible system that allows adding new payload-bearing exception types (see above where we would want to discourage control via exception).&lt;/p&gt;

&lt;p&gt;Reading through RegionServer exceptions I see one exception that takes payload, RegionServerMoved, so let us just explicitly handle this type beyond the base &apos;String&apos; type we already have in rpc.&lt;/p&gt;

&lt;p&gt;Do you lot think there could be more?  It would have to be exceptions that were not method specific because for these types then we should suggest the method response include the exception as an optional response.  So that leaves exceptions that could come out of multiple methods or problems the server encounters while running.&lt;/p&gt;

&lt;p&gt;Chatting w/ Elliott, the base &apos;String&apos; Exception type is already extensible being a protobuf so we could add extra info therein that the client exception classes could interpret if able such as how long to hold before retrying (a pushback).&lt;/p&gt;

&lt;p&gt;Can you lads think of any others?&lt;/p&gt;

&lt;p&gt;I&apos;d think that we&apos;d try and keep the spec as narrow as possible (and no narrower) so if we could do without having an extensible fancy payload bearing exception types system, lets punt.&lt;/p&gt;</comment>
                            <comment id="13556843" author="enis" created="Fri, 18 Jan 2013 01:06:17 +0000"  >&lt;blockquote&gt;&lt;p&gt;But I&apos;d suggest we do not need a generically extensible system that allows adding new payload-bearing exception types (see above where we would want to discourage control via exception).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Totally agreed. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Do you lot think there could be more? It would have to be exceptions that were not method specific because for these types then we should suggest the method response include the exception as an optional response. So that leaves exceptions that could come out of multiple methods or problems the server encounters while running.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Again, the other concerning thing is DoNotRetryIOException. Although it does not carry data, we basically do control flow on subclasses of this exception. Maybe we should add a field bool doNotRetry, in the RpcException. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I&apos;d think that we&apos;d try and keep the spec as narrow as possible (and no narrower) so if we could do without having an extensible fancy payload bearing exception types system, lets punt.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Agreed. But what I am saying is that we already do have those in place and get rid of the string parsing one way or the other. &lt;/p&gt;</comment>
                            <comment id="13556885" author="yuzhihong@gmail.com" created="Fri, 18 Jan 2013 01:59:59 +0000"  >&lt;p&gt;RegionMovedException is new in 0.96&lt;br/&gt;
Without RegionMovedException, we would lose some benefit in HConnectionImplementation.updateCachedLocations() but would have better formation for RPC spec.&lt;/p&gt;</comment>
                            <comment id="13557018" author="stack" created="Fri, 18 Jan 2013 07:29:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;Maybe we should add a field bool doNotRetry, in the RpcException.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Let me add this flag.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;But what I am saying is that we already do have those in place and get rid of the string parsing one way or the other.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So just do base stringify exception handling and RegionMovedException?  (And any other we turn up before 0.96 release)?  And leave at that?&lt;/p&gt;

&lt;p&gt;If so, good by me and I&apos;ll write it into spec.  Thanks.&lt;/p&gt;</comment>
                            <comment id="13557369" author="yuzhihong@gmail.com" created="Fri, 18 Jan 2013 17:20:55 +0000"  >&lt;p&gt;Both RegionMovedException and DoNotRetryIOException give clients hint on what to do next.&lt;br/&gt;
I think their representation in .proto can be unified.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
class RegionRelocationException &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; PBException {
  &lt;span class=&quot;code-comment&quot;&gt;// ctor from server side
&lt;/span&gt;  RegionRelocationException(RegionRelocationData message) {
    &lt;span class=&quot;code-keyword&quot;&gt;super&lt;/span&gt;(message);
  }
  RegionRelocationException(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] bytes) {
  } &lt;span class=&quot;code-comment&quot;&gt;// ctor from server side   
&lt;/span&gt;}
message RegionRelocationData {
  required ServerName serverName = 1;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We can designate a special value for RegionRelocationData.serverName which tells client that client should not retry.&lt;/p&gt;</comment>
                            <comment id="13557787" author="stack" created="Sat, 19 Jan 2013 00:09:49 +0000"  >&lt;p&gt;You would put RegionMovedException and DoNotRetryIOException together into a new Exception named RegionRelocationException?&lt;/p&gt;

&lt;p&gt;I don&apos;t follow how not retrying is related to Region Relocation.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;... We can designate a special value for RegionRelocationData.serverName which tells client that client should not retry.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The above seems a little cryptic, don&apos;t you think?&lt;/p&gt;

&lt;p&gt;Unless I hear otherwise, I&apos;ll add a do not retry flag to our base stringified exception Message (might as well add ServerName to the base Message too &amp;#8211; c/c++s might be able to make sense of it).  Will also add special case RegionMovedException pulling out the hostname and port whenever I see one of these...&lt;/p&gt;</comment>
                            <comment id="13558023" author="jmhsieh" created="Sat, 19 Jan 2013 15:11:09 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; can you enable comment rights on the doc?&lt;/p&gt;</comment>
                            <comment id="13558110" author="stack" created="Sat, 19 Jan 2013 22:35:08 +0000"  >&lt;p&gt;Done for you.  If anyone else wants access, just ask.  Thanks.&lt;/p&gt;</comment>
                            <comment id="13561998" author="stack" created="Thu, 24 Jan 2013 21:27:47 +0000"  >&lt;p&gt;Redo to match spec.  Let me do edit pass on spec. and run this through tests then put up a patch on rb.&lt;/p&gt;

&lt;p&gt;On patch, we used to pass in a fat pb object that was most of the header info and then included the pb request param. Now we pass header and param separately.  Thats the spec.&lt;/p&gt;

&lt;p&gt;Adds comments and some method and data member renaming to better match spec and pb.&lt;/p&gt;

&lt;p&gt;Because more of protocol in pb and because an rpc request is made of a pb header and the already made pb param &amp;#8211; e.g. GetRequest, etc. &amp;#8211; and because we pass exceptions as pb, etc., HBaseServer and HBaseClient has more pb in it now; e.g. assembling the headers to make requests, undoing responses.&lt;/p&gt;

&lt;p&gt;If error, the pb&apos;d exception carries server/port if regionmoved and it is marked do not retry if exception is such.&lt;/p&gt;

&lt;p&gt;Remove dead code: ParallelCall, ParallelReturn&lt;/p&gt;

&lt;p&gt;Added IPCUtil, FatalConnectionException&lt;/p&gt;

&lt;p&gt;Moved internal classes out of HBaseServer and HRegionServer.&lt;/p&gt;

&lt;p&gt;Getting the encoded datablocks the spec talks of in there is a todo as is pb&apos;ing the kv and work to cut down on buffer copies (the latter is a separate issue).&lt;/p&gt;</comment>
                            <comment id="13562140" author="eclark" created="Thu, 24 Jan 2013 23:45:36 +0000"  >&lt;p&gt;I would vote moving exception into the Header and adding a boolean for contains response.  That would allow returning partial requests if there was a timeout or other error (feature for 0.98++).  Other than that everything looks good.&lt;/p&gt;</comment>
                            <comment id="13562212" author="eclark" created="Fri, 25 Jan 2013 00:39:10 +0000"  >&lt;p&gt;After a little more time to look at things and discuss here are a few more thoughts:&lt;/p&gt;

&lt;p&gt;Lets remove the varint infront of ResquestBody and Response body and instead put that data into the header (something like RequestBodyMeta and ResponseBodyMeta). That makes it more in line with how ecd&apos;s will work.  If there&apos;s a meta object, for body or ecd, then look in the meta for size and pull that off the wire.&lt;/p&gt;

&lt;p&gt;I would also think that the total request size infront of request and response could be removed.  That data is duplicated.  totalRequesSize = headerSizeVarInt + headerSize + bodySize + ecdSize.  That&apos;s a larger change but gets us closer to being more async.&lt;/p&gt;</comment>
                            <comment id="13562221" author="yuzhihong@gmail.com" created="Fri, 25 Jan 2013 00:44:43 +0000"  >&lt;p&gt;ecd stands for encoded datablocks in the above description, right ?&lt;/p&gt;</comment>
                            <comment id="13562227" author="eclark" created="Fri, 25 Jan 2013 00:48:54 +0000"  >&lt;p&gt;Correct, ECD is encoded data blocks.  Sorry I should have been more clear.&lt;/p&gt;</comment>
                            <comment id="13562453" author="stack" created="Fri, 25 Jan 2013 06:04:06 +0000"  >&lt;p&gt;Thanks for review &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; especially given I have yet to update doc to match code.  Suggestions sound good to me.  Regards the total length up front, let me look at changing it so the int is just length of header (but not a varint) and as you suggest, get the param and possible EDB lengths out of the header pb (will do ditto on the response &amp;#8211; trying to keep response mirror image or request)&lt;/p&gt;</comment>
                            <comment id="13564960" author="devaraj" created="Tue, 29 Jan 2013 01:28:32 +0000"  >&lt;p&gt;Looks good overall. I think most of what I was planning to fix in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5945&quot; title=&quot;Reduce buffer copies in IPC server response path&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5945&quot;&gt;&lt;del&gt;HBASE-5945&lt;/del&gt;&lt;/a&gt; has been taken into consideration in this one. &lt;/p&gt;

&lt;p&gt;Couple of comments:&lt;br/&gt;
1. Why is the callId made a long? Is it for future proofing?&lt;br/&gt;
2. The exception handling seems somewhat customized. Maybe it&apos;s fine but it stands out. Will see if I can think of a better approach short of the full blown exception handling in RPC (which you probably don&apos;t like &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; ).&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;the special casing of the RegionMovedException&lt;/li&gt;
	&lt;li&gt;RemoteWithExtrasException&lt;br/&gt;
I ran some RPC tests (TestDelayedRpc, TestProtoBufRpc) with the patch. They passed. TestPriorityRpc failed. When I replaced isMetaTable calls with isMetaRegion (as in the earlier code), it passed as well.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Are we breaking this up into two parts - one this, and another for the encoded data blocks thing?&lt;/p&gt;</comment>
                            <comment id="13565100" author="stack" created="Tue, 29 Jan 2013 05:46:38 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=devaraj&quot; class=&quot;user-hover&quot; rel=&quot;devaraj&quot;&gt;Devaraj Das&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for review.&lt;/p&gt;

&lt;p&gt;On callid, I&apos;ll probably put it back to int in final patch just to make the diff smaller.&lt;/p&gt;

&lt;p&gt;On exception handling, rather than build a framework to support exceptions-with-any-arbitrary-payload, instead, just do the handling of the one case where we know there is payload &amp;#8211; RegionMovedException.  RemoteWithExtrasException is just that, the hadoop RemoteException w/ extra info that can be exploited or not).  I don&apos;t think it too bad really.  We have this one extensible ExceptionResponse that we can throw any info we need to pass into.  On client, if it supports the extra info, it can do the special casing for whatever the new type or just shove the info into RemoteWithExtrasException.&lt;/p&gt;

&lt;p&gt;If you have ideas on how to make it cleaner, much appreciated.&lt;/p&gt;

&lt;p&gt;Regards the uploaded patch, it is stale now. I want to incorporate Elliott comments.  I spent some time on it over the weekend.  The upfront total length of the request and response that Elliott suggested we punt is unavoidable it seems, unless we rewrite the server-side.  The server has a loop which reads ints and dependent on int content and its current processing state, pulls in the preamble, reads the connection header, or reads in the WHOLE request.  The server is about bytebuffers gotten off the server socket channel and though it is technically async, the way the server is written, it expects to be able to pull all the bytes that make up the request in one giant sucking read.  Though it gives the impression that you could &apos;park&apos; the read and continue it later if all bytes are net yet present on the wire, that facility is not hooked up.&lt;/p&gt;

&lt;p&gt;It would be sweet being able to park the read or just read the header and if not high priority, come back for the request part latter but I&apos;m thinking that is v2 of the rpc protocol when we go full async on the server side.&lt;/p&gt;

&lt;p&gt;Regards hbase-5945, pbs are worth study.  Unless you pass an explicit byte array size for the Message, pb will under the wrappers instantiate a Coded*Stream whose construction will allocate a 4k buffer which we do not want.  I was messing trying to figure the marshalling/unmarshalling path that does least copying and allocations and looking at pb 2.5.0, as yet unreleased, which claims its new parse method 25% faster...&lt;/p&gt;

&lt;p&gt;I&quot;ll be back.&lt;/p&gt;

</comment>
                            <comment id="13567394" author="devaraj" created="Thu, 31 Jan 2013 06:13:25 +0000"  >&lt;p&gt;+1 on having a follow up jira to really do the streaming (without passing the length apriori).&lt;/p&gt;

&lt;p&gt;On the &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5945&quot; title=&quot;Reduce buffer copies in IPC server response path&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5945&quot;&gt;&lt;del&gt;HBASE-5945&lt;/del&gt;&lt;/a&gt;, I agree on the use of Coded*Stream (and the performance improvements in PB 2.5 seems interesting). In the patches posted on 5945, Coded*Stream has been taken into account. But yes, once this issue is resolved, we should concentrate on such things in 5945.&lt;/p&gt;

&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13569667" author="stack" created="Sun, 3 Feb 2013 00:02:32 +0000"  >&lt;p&gt;Thanks again for review DD.&lt;/p&gt;

&lt;p&gt;Let me attach the latest patch w/ Elliott&apos;s comments accomodated and some new stuff....&lt;/p&gt;</comment>
                            <comment id="13569668" author="stack" created="Sun, 3 Feb 2013 00:06:43 +0000"  >&lt;p&gt;Refactor in RPC.proto to accomodate Elliott feedback.  See diff for description of the protocol.&lt;br/&gt;
Trying to miniize change.  Not too different from previous patches.  Just has more failed unit&lt;br/&gt;
tests fixed.&lt;/p&gt;

&lt;p&gt;Still missing is the TODO EncodedDataBlock though at Matt Corgan suggestion and looking back at&lt;br/&gt;
my old patch in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7233&quot; title=&quot;Serializing KeyValues over RPC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7233&quot;&gt;&lt;del&gt;HBASE-7233&lt;/del&gt;&lt;/a&gt;, Seializing KeyValues, this instead will just be bytes produced by&lt;br/&gt;
a CellOutputStream and then read with a CellScanner.java &amp;#8211; two simple Cell Interfaces). Let&lt;br/&gt;
me try and get a basic implementation in and then call this patch quits.&lt;/p&gt;

&lt;p&gt;Now if you enable ipc logging you see the complete client side request and over on server&lt;br/&gt;
the complete receive and then what it writes on the wire.  Its over the top but nice debugging.&lt;br/&gt;
It is only on if you enable debug.  Will work on a custom pb TextFormatter that doesn&apos;t output&lt;br/&gt;
it all &amp;#8211; that has some bounds &amp;#8211; after this patch goes in.  Need to make it so this toString&lt;br/&gt;
shows up in the UI to where we show process listing.&lt;/p&gt;

&lt;p&gt;Renamed some methods in rpc so matches spec and so its clearer whats going on in here.&lt;/p&gt;

&lt;p&gt;Effort to avoid buffer creations and oversized buffer creations by pb.&lt;/p&gt;

&lt;p&gt;Removed unused classes // Call and moved some inner classes out to be package protected&lt;br/&gt;
standalones such as QosFunction and MethodCache.  This is the bulk of the patch.&lt;/p&gt;
</comment>
                            <comment id="13569671" author="stack" created="Sun, 3 Feb 2013 00:10:56 +0000"  >&lt;p&gt;Some other notes.&lt;/p&gt;

&lt;p&gt;In this patch, request, response, connection header, etc., all are preceeded by a total length int.  It is handy and a little redundant but removing it would require a refactor of server-side which I don&apos;t want to do (see comments above).  Security would also become interesting if we do other than the current one big pull and one big write on the server-side.  So, current server-side implementation ends up dictating our on-the-wire format some.&lt;/p&gt;
</comment>
                            <comment id="13569673" author="stack" created="Sun, 3 Feb 2013 00:20:22 +0000"  >&lt;p&gt;Try against Jenkins for kicks.&lt;/p&gt;</comment>
                            <comment id="13571628" author="devaraj" created="Tue, 5 Feb 2013 19:21:54 +0000"  >&lt;p&gt;Hadoopqa didn&apos;t get triggered on the last upload. Uploading Stack&apos;s patch again.&lt;/p&gt;

&lt;p&gt;BTW Stack do you want to open a RB on this.&lt;/p&gt;</comment>
                            <comment id="13571639" author="hadoopqa" created="Tue, 5 Feb 2013 19:32:54 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12568064/rpc_spec3.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12568064/rpc_spec3.txt&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 9 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 patch&lt;/font&gt;.  The patch command could not apply the patch.&lt;/p&gt;

&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/4340//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/4340//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13571754" author="stack" created="Tue, 5 Feb 2013 21:37:58 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=devaraj&quot; class=&quot;user-hover&quot; rel=&quot;devaraj&quot;&gt;Devaraj Das&lt;/a&gt;.  Looks like it doesn&apos;t apply anymore.  Let me upload a fixup soon.  Will put it up on rb when I have something committable boss.  Thanks.&lt;/p&gt;</comment>
                            <comment id="13573965" author="yuzhihong@gmail.com" created="Thu, 7 Feb 2013 21:42:52 +0000"  >&lt;p&gt;For QosFunction#apply():&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (region.getRegionInfo().isMetaRegion()) {
...
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (scanner != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; scanner.getRegionInfo().isMetaRegion()) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;isMetaTable() should be called above.&lt;/p&gt;</comment>
                            <comment id="13586241" author="stack" created="Mon, 25 Feb 2013 20:12:07 +0000"  >&lt;p&gt;Made this a subtask of hbase-7898.  That issue is about rpc.  Code in that issue is implementing this spec.&lt;/p&gt;</comment>
                            <comment id="13608370" author="stack" created="Wed, 20 Mar 2013 22:56:26 +0000"  >&lt;p&gt;Here is an appendix for the refguide.  Its a spec for our 0.95 wire format.  Will just go ahead and commit it.  Can be reviewed post commit after its up on website &amp;#8211; easier to review.&lt;/p&gt;</comment>
                            <comment id="13608372" author="stack" created="Wed, 20 Mar 2013 22:57:22 +0000"  >&lt;p&gt;The patch is a docbook version of the google doc &lt;a href=&quot;https://docs.google.com/document/d/1-1RJMLXzYldmHgKP7M7ynK6euRpucD03fZ603DlZfGI/edit&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/document/d/1-1RJMLXzYldmHgKP7M7ynK6euRpucD03fZ603DlZfGI/edit&lt;/a&gt; which I did a once-over on just now to make it match what code does.&lt;/p&gt;</comment>
                            <comment id="13608373" author="stack" created="Wed, 20 Mar 2013 22:58:54 +0000"  >&lt;p&gt;Committed to trunk.  Will commit the refguide to 0.95 just before rc.&lt;/p&gt;</comment>
                            <comment id="13608553" author="hudson" created="Thu, 21 Mar 2013 02:33:32 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #3979 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/3979/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/3979/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7533&quot; title=&quot;Write an RPC Specification for 0.96&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7533&quot;&gt;&lt;del&gt;HBASE-7533&lt;/del&gt;&lt;/a&gt; Write an RPC Specification for 0.96 (Revision 1459094)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/docbkx/book.xml&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/docbkx/rpc.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13608581" author="hudson" created="Thu, 21 Mar 2013 03:15:23 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #456 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/456/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/456/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7533&quot; title=&quot;Write an RPC Specification for 0.96&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7533&quot;&gt;&lt;del&gt;HBASE-7533&lt;/del&gt;&lt;/a&gt; Write an RPC Specification for 0.96 (Revision 1459094)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/docbkx/book.xml&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/src/docbkx/rpc.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13609290" author="stack" created="Thu, 21 Mar 2013 18:44:55 +0000"  >&lt;p&gt;Addendum that comes of review comments made by Jon Hsieh up on the google docs (thanks Jon).&lt;/p&gt;</comment>
                            <comment id="13609534" author="hudson" created="Thu, 21 Mar 2013 21:43:58 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #3982 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/3982/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/3982/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7533&quot; title=&quot;Write an RPC Specification for 0.96&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7533&quot;&gt;&lt;del&gt;HBASE-7533&lt;/del&gt;&lt;/a&gt; Write an RPC Specification for 0.96; ADDENDUM (Revision 1459446)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/docbkx/rpc.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13609733" author="hudson" created="Fri, 22 Mar 2013 00:10:59 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK-on-Hadoop-2.0.0 #458 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/458/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK-on-Hadoop-2.0.0/458/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7533&quot; title=&quot;Write an RPC Specification for 0.96&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7533&quot;&gt;&lt;del&gt;HBASE-7533&lt;/del&gt;&lt;/a&gt; Write an RPC Specification for 0.96; ADDENDUM (Revision 1459446)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
stack : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/src/docbkx/rpc.xml&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13609770" author="enis" created="Fri, 22 Mar 2013 01:13:17 +0000"  >&lt;p&gt;Stack, the links seem broken. (&lt;a href=&quot;http://hbase.apache.org/book/apjs03.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hbase.apache.org/book/apjs03.html&lt;/a&gt;).&lt;/p&gt;</comment>
                            <comment id="13775453" author="stack" created="Mon, 23 Sep 2013 18:31:32 +0000"  >&lt;p&gt;Marking closed.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12574665" name="7533.txt" size="896" author="stack" created="Wed, 20 Mar 2013 22:56:25 +0000"/>
                            <attachment id="12564971" name="7533_proto_sketch.txt" size="16268" author="stack" created="Tue, 15 Jan 2013 18:52:41 +0000"/>
                            <attachment id="12567748" name="7533v4.txt" size="329686" author="stack" created="Sun, 3 Feb 2013 00:06:43 +0000"/>
                            <attachment id="12574848" name="addendum.txt" size="172" author="stack" created="Thu, 21 Mar 2013 18:44:55 +0000"/>
                            <attachment id="12565381" name="rpc_spec.txt" size="249943" author="stack" created="Thu, 17 Jan 2013 22:11:41 +0000"/>
                            <attachment id="12568064" name="rpc_spec3.txt" size="285046" author="devaraj" created="Tue, 5 Feb 2013 19:21:54 +0000"/>
                            <attachment id="12566379" name="rpc_spec3.txt" size="285046" author="stack" created="Thu, 24 Jan 2013 21:27:47 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>7.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 11 Jan 2013 00:15:11 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>303709</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 12 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i17duf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>251212</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.96notable</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>