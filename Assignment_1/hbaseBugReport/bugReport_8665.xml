<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:57:22 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-8665/HBASE-8665.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-8665] bad compaction priority behavior in queue can cause store to be blocked</title>
                <link>https://issues.apache.org/jira/browse/HBASE-8665</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Note that this can be solved by bumping up the number of compaction threads but still it seems like this priority &quot;inversion&quot; should be dealt with.&lt;br/&gt;
There&apos;s a store with 1 big file and 3 flushes (1 2 3 4) sitting around and minding its own business when it decides to compact. Compaction (2 3 4) is created and put in queue, it&apos;s low priority, so it doesn&apos;t get out of the queue for some time - other stores are compacting. Meanwhile more files are flushed and at (1 2 3 4 5 6 7) it decides to compact (5 6 7). This compaction now has higher priority than the first one. After that if the load is high it enters vicious cycle of compacting and compacting files as they arrive, with store being blocked on and off, with the (2 3 4) compaction staying in queue for up to ~20 minutes (that I&apos;ve seen).&lt;/p&gt;

&lt;p&gt;I wonder why we do thing thing where we queue compaction and compact separately. Perhaps we should take snapshot of all store priorities, then do select in order and execute the first compaction we find. This will need starvation safeguard too but should probably be better.&lt;/p&gt;

&lt;p&gt;Btw, exploring compaction policy may be more prone to this, as it can select files from the middle, not just beginning, which, given the treatment of already selected files that was not changed from the old ratio-based one (all files with lower seqNums than the ones selected are also ineligible for further selection), will make more files ineligible (e.g. imagine with 10 blocking files, with 8 present (1-8), (6 7 8) being selected and getting stuck). Today I see the case that would also apply to old policy, but yesterday I saw file distribution something like this: 4,5g, 2,1g, 295,9m, 113,3m, 68,0m, 67,8m, 1,1g, 295,1m, 100,4m, unfortunately w/o enough logs to figure out how it resulted.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12650245">HBASE-8665</key>
            <summary>bad compaction priority behavior in queue can cause store to be blocked</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sershe">Sergey Shelukhin</assignee>
                                    <reporter username="sershe">Sergey Shelukhin</reporter>
                        <labels>
                    </labels>
                <created>Thu, 30 May 2013 23:21:38 +0000</created>
                <updated>Mon, 23 Sep 2013 19:22:22 +0000</updated>
                            <resolved>Wed, 19 Jun 2013 00:42:56 +0000</resolved>
                                    <version>0.95.1</version>
                                    <fixVersion>0.95.2</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="13670962" author="eclark" created="Thu, 30 May 2013 23:36:18 +0000"  >&lt;p&gt;Nice catch, and great explanation.  Thanks&lt;/p&gt;</comment>
                            <comment id="13670984" author="sershe" created="Thu, 30 May 2013 23:57:06 +0000"  >&lt;p&gt;What do you think? I have no historical context on why selection and compaction were separated.&lt;/p&gt;</comment>
                            <comment id="13670985" author="sershe" created="Thu, 30 May 2013 23:57:36 +0000"  >&lt;p&gt;(in time)&lt;/p&gt;</comment>
                            <comment id="13671071" author="sershe" created="Fri, 31 May 2013 02:27:26 +0000"  >&lt;p&gt;We discussed various options and their relative advantages and disadvantages here. The meta-cause of this issue is that priority is not really a property a particular compaction, it&apos;s property of the store, and the mismatch between priority attached to compaction based on some store state that becomes stale, and the current store priority, causes the inversion-like behavior. The conclusion is that the simplest approach appears to be to put compaction in the queue w/o selection. That way whenever we get the store from the queue we can get best up-to-date selection. We can discard records that are no longer relevant (if we get one from queue and cannot select). Other schemes like dynamically updating queue on every change to store, or enumerating stores, seem to be more complicated/involved; the latter especially in case if there are multiple threads.&lt;/p&gt;</comment>
                            <comment id="13671078" author="eclark" created="Fri, 31 May 2013 02:43:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;it&apos;s property of the store&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Strongly disagree.  A major compaction for an important store is not nearly as important as a compaction to get under the blocking storefile count.&lt;/p&gt;

&lt;p&gt;Talked with JD and the compaction priority was put in so that compactions queued to un-block a flush can be given a higher priority.  With that in mind I think the best solution that I&apos;ve heard so far, with the least code churn, is to raise the priority on any non major compactions in the queue when we are thinking about queueing another.&lt;/p&gt;

&lt;p&gt;The other harder more invasive solution that we (JD, Jon, and I) talked about was to put in real scheduling.  Something like the linux O(1) scheduler (with an active and expired set of queues) would work.  The idea is pretty well tested and shouldn&apos;t be too hard to code.  Though I don&apos;t think that we really need that yet. &lt;/p&gt;</comment>
                            <comment id="13671091" author="sershe" created="Fri, 31 May 2013 03:03:09 +0000"  >&lt;p&gt;W.r.t. property of the store:&lt;br/&gt;
1) Current priority is derived entirely from store state. In fact it only depends on number of files and blocking limit, so there&apos;s no such thing as important store other than blocked/about-to-block store.&lt;br/&gt;
2) It seems to be the obvious cause of this particular issue, see above. When selection is added to queue, its priority is low. As store fills up it&apos;s &quot;real&quot; priority changes, but we have no way to influence it. Bumping its priority when we queue another one is just a hack around that imho; if it even helps. If blocked store comes into a queue full of non-blocked stores why should we bump them? And how much.&lt;br/&gt;
3) Additionally if we pre-select in advance we simply end up with inefficient compactions, for example in this case we could have compacted 6 small files in one go, but would have ended up compacting 3 and 3 if it spent less time in the queue.&lt;/p&gt;</comment>
                            <comment id="13671155" author="eclark" created="Fri, 31 May 2013 04:59:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;If blocked store comes into a queue full of non-blocked stores why should we bump them? And how much.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I was suggesting bumping the priority instead of queueing another. Bumping the compaction request to what would currently be computed seems reasonable.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;3) Additionally if we pre-select in advance we simply end up with inefficient compactions, for example in this case we could have compacted 6 small files in one go, but would have ended up compacting 3 and 3 if it spent less time in the queue.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In this case pre-selecting doesn&apos;t seem to be a bad thing.  Prioritizing a fast compaction over being a little more efficient seems like a trade off that most people would want.  So since current implementation biases towards what I would expect users to want maybe we shouldn&apos;t change that until we can put those smarts into the compaction selection (plumbing reason the compaction was requested into selection).&lt;/p&gt;</comment>
                            <comment id="13671675" author="sershe" created="Fri, 31 May 2013 17:31:36 +0000"  >&lt;p&gt;Well, the effect of getting a faster compaction in this case is a pure accident, if there was not a smaller one already queued, it would still compact 6 according to policy. Also, out of many possible faster compactions in this case, bad one (later files) is chosen, so it&apos;s not really what user would expect.&lt;br/&gt;
Policy should make such decisions - if we prefer faster compactions for blocked store, we should have it in the policy, and so last-moment selection would still choose the best one.&lt;/p&gt;

&lt;p&gt;As for bumping the priority of current to what it would have been, it is actually equivalent to just sorting them by current store priority... &lt;/p&gt;

&lt;p&gt;I wonder if there&apos;s any fundamental reason to divorce selection from compaction?&lt;br/&gt;
If we introduce compaction-based priority modifiers, not just store based, we could still apply them by doing selection in multiple stores and comparing priorities. Selecting is not that expensive, given how frequently we compact.&lt;/p&gt;</comment>
                            <comment id="13671731" author="eclark" created="Fri, 31 May 2013 18:41:35 +0000"  >&lt;blockquote&gt;&lt;p&gt;Policy should make such decisions - if we prefer faster compactions for blocked store, we should have it in the policy, and so last-moment selection would still choose the best one.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We already do that.  If we think we&apos;re blocked then the exploring compaction policy chooses the smallest set of files.&lt;/p&gt;</comment>
                            <comment id="13671810" author="sershe" created="Fri, 31 May 2013 20:41:56 +0000"  >&lt;p&gt;It only does that if nothing is in ratio. I filed a JIRA for that...&lt;/p&gt;</comment>
                            <comment id="13675539" author="sershe" created="Wed, 5 Jun 2013 02:50:52 +0000"  >&lt;p&gt;Will submit some simple patch tomorrow, we are hitting this a lot under high load.&lt;br/&gt;
As soon as I can make the test slightly less ugly.&lt;/p&gt;</comment>
                            <comment id="13677503" author="sershe" created="Thu, 6 Jun 2013 21:02:33 +0000"  >&lt;p&gt;Here&apos;s the patch. It&apos;s rather simple, most complexity is in tests.&lt;br/&gt;
It allows for both pre-selected compactions (from coprocessors and users) and non-pre-selected.&lt;br/&gt;
When non-preselected compaction makes it to run() it is selected and executed.&lt;br/&gt;
There are two special cases:&lt;br/&gt;
1) Store priority might have decreased since the compaction was queued; in that case it&apos;s re-queued with new priority to avoid inversion.&lt;br/&gt;
2) Without selecting, we don&apos;t know which pool to go to. We go to small pool by default, and if the compaction is large after selection, queue it to the large pool; it can bounce back if it becomes small while stuck in the large pool.&lt;/p&gt;

&lt;p&gt;Both of these cases can cause compaction to get continuously requeued, or bounced between pools, however it can only happen if store priority decreases (i.e. other compactions happen), or files are removed from store (same); or files are added in some very special pattern that causes policy to select large-small-large-small-... continuously).&lt;/p&gt;</comment>
                            <comment id="13677551" author="yuzhihong@gmail.com" created="Thu, 6 Jun 2013 21:46:34 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;CompactionRequest&amp;gt; requestCompactionInternal(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; HRegion r, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; why,
+      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; p, List&amp;lt;Pair&amp;lt;CompactionRequest, Store&amp;gt;&amp;gt; requests, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; selectNow) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Mind adding javadoc for the selectNow parameter ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+          &lt;span class=&quot;code-comment&quot;&gt;// Store priority decreased &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; we were in queue (due to some other compaction?),
&lt;/span&gt;+          &lt;span class=&quot;code-comment&quot;&gt;// requeue with &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; priority to avoid blocking potential higher priorities.
&lt;/span&gt;+          &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.parent.execute(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Add debug log for the above case ?&lt;/p&gt;

&lt;p&gt;Please add license header for StatefulStoreMockMaker.java&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class BlockingStoreMockMaker &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; StatefulStoreMockMaker {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can BlockingStoreMockMaker be private ?&lt;/p&gt;</comment>
                            <comment id="13677595" author="hadoopqa" created="Thu, 6 Jun 2013 22:19:35 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12586586/HBASE-8665-v0.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12586586/HBASE-8665-v0.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 release audit&lt;/font&gt;.  The applied patch generated 1 release audit warnings (more than the trunk&apos;s current 0 warnings).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.TestFullLogReconstruction&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//testReport/&lt;/a&gt;&lt;br/&gt;
Release audit warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/patchReleaseAuditProblems.txt&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/5963//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13677625" author="sershe" created="Thu, 6 Jun 2013 22:48:54 +0000"  >&lt;p&gt;This test passes locally&lt;/p&gt;</comment>
                            <comment id="13678415" author="sershe" created="Fri, 7 Jun 2013 20:47:14 +0000"  >&lt;p&gt;ping?&lt;/p&gt;</comment>
                            <comment id="13678423" author="eclark" created="Fri, 7 Jun 2013 20:50:32 +0000"  >&lt;p&gt;Sorry, looking now.&lt;/p&gt;</comment>
                            <comment id="13679938" author="eclark" created="Mon, 10 Jun 2013 21:34:12 +0000"  >&lt;p&gt;StatefulStoreMockMaker needs a header (on commit please).&lt;br/&gt;
Other than that I&apos;m +1&lt;/p&gt;</comment>
                            <comment id="13679997" author="sershe" created="Mon, 10 Jun 2013 22:32:28 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; ok for 95?&lt;/p&gt;</comment>
                            <comment id="13680169" author="hudson" created="Tue, 11 Jun 2013 03:14:11 +0000"  >&lt;p&gt;Integrated in HBase-TRUNK #4171 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/4171/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/4171/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8665&quot; title=&quot;bad compaction priority behavior in queue can cause store to be blocked&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8665&quot;&gt;&lt;del&gt;HBASE-8665&lt;/del&gt;&lt;/a&gt; bad compaction priority behavior in queue can cause store to be blocked (Revision 1491661)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
sershe : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreFlusher.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/StatefulStoreMockMaker.java&lt;/li&gt;
	&lt;li&gt;/hbase/trunk/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13680736" author="sershe" created="Tue, 11 Jun 2013 21:53:45 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; ping?&lt;/p&gt;</comment>
                            <comment id="13684926" author="nkeywal" created="Mon, 17 Jun 2013 02:39:29 +0000"  >&lt;p&gt;I&apos;ve changed the criticality to blocker, this happens in all my tests when I try to insert more than ~220m lines with ycsb on a 5 nodes cluster with 2 clients (once it&apos;s stuck it remains stuck forever; even if you stop the clients).&lt;/p&gt;</comment>
                            <comment id="13687095" author="stack" created="Tue, 18 Jun 2013 19:26:55 +0000"  >&lt;p&gt;+1 for 0.95 (did a quick scan).  Needs license added on commit as per Elliott.  Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sershe&quot; class=&quot;user-hover&quot; rel=&quot;sershe&quot;&gt;Sergey Shelukhin&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13687455" author="hudson" created="Wed, 19 Jun 2013 00:44:46 +0000"  >&lt;p&gt;Integrated in hbase-0.95-on-hadoop2 #136 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.95-on-hadoop2/136/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.95-on-hadoop2/136/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8665&quot; title=&quot;bad compaction priority behavior in queue can cause store to be blocked&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8665&quot;&gt;&lt;del&gt;HBASE-8665&lt;/del&gt;&lt;/a&gt; bad compaction priority behavior in queue can cause store to be blocked (Revision 1494347)&lt;/p&gt;

&lt;p&gt;     Result = FAILURE&lt;br/&gt;
sershe : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreFlusher.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/StatefulStoreMockMaker.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="13687497" author="hudson" created="Wed, 19 Jun 2013 01:32:37 +0000"  >&lt;p&gt;Integrated in hbase-0.95 #247 (See &lt;a href=&quot;https://builds.apache.org/job/hbase-0.95/247/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/hbase-0.95/247/&lt;/a&gt;)&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8665&quot; title=&quot;bad compaction priority behavior in queue can cause store to be blocked&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8665&quot;&gt;&lt;del&gt;HBASE-8665&lt;/del&gt;&lt;/a&gt; bad compaction priority behavior in queue can cause store to be blocked (Revision 1494347)&lt;/p&gt;

&lt;p&gt;     Result = SUCCESS&lt;br/&gt;
sershe : &lt;br/&gt;
Files : &lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreFlusher.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/StatefulStoreMockMaker.java&lt;/li&gt;
	&lt;li&gt;/hbase/branches/0.95/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12650375">HBASE-8669</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12586586" name="HBASE-8665-v0.patch" size="26739" author="sershe" created="Thu, 6 Jun 2013 21:02:33 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 30 May 2013 23:36:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>330572</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 26 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1l14f:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>330906</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>