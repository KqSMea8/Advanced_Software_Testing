<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:14:07 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-16438/HBASE-16438.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-16438] Create a cell type so that chunk id is embedded in it</title>
                <link>https://issues.apache.org/jira/browse/HBASE-16438</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;For CellChunkMap we may need a cell such that the chunk out of which it was created, the id of the chunk be embedded in it so that when doing flattening we can use the chunk id as a meta data. More details will follow once the initial tasks are completed. &lt;/p&gt;

&lt;p&gt;Why we need to embed the chunkid in the Cell is described by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anastas&quot; class=&quot;user-hover&quot; rel=&quot;anastas&quot;&gt;Anastasia Braginsky&lt;/a&gt; in this remark over in parent issue &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921?focusedCommentId=15244119&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15244119&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-14921?focusedCommentId=15244119&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15244119&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12997866">HBASE-16438</key>
            <summary>Create a cell type so that chunk id is embedded in it</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12997549">HBASE-16421</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="ram_krish">ramkrishna.s.vasudevan</reporter>
                        <labels>
                    </labels>
                <created>Wed, 17 Aug 2016 10:13:18 +0000</created>
                <updated>Thu, 27 Oct 2016 16:15:17 +0000</updated>
                                            <version>2.0.0</version>
                                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="15425586" author="stack" created="Wed, 17 Aug 2016 23:24:33 +0000"  >&lt;p&gt;Could it be a tag?&lt;/p&gt;</comment>
                            <comment id="15591255" author="anoop.hbase" created="Thu, 20 Oct 2016 08:53:28 +0000"  >&lt;p&gt;It might be better if this is a new Cell type with a new interface implemented.  Adding a tag is having more overhead wrt memory usage.&lt;br/&gt;
This is needed in another place as well.&lt;br/&gt;
When we upsert cell into Memstore, we will remove the cells which is newly added cells mask out.  And as part of that we will adjust the memstore size (region level as well as global).  Here we just reduce the size of the removed cell now.  But we cannot do that blindly.  When this removed cell is having its data bytes in MSLAB, we are not really freeing up those MSLAB chunk bytes.  Means the cell data size part is still not reduced!  We just got rid of one Java object. So only that object&apos;s overhead part got reduced.  Right now there is no way to make this diff.  When the cell can be removed, we can not know whether it is having its data in MSLAB chunk or not.   Once this jira is solved, we can do that also.&lt;/p&gt;</comment>
                            <comment id="15592282" author="stack" created="Thu, 20 Oct 2016 16:28:39 +0000"  >&lt;p&gt;Can we say in here more why a Cell needs to refer to its hosting location? Just for sake of context for those who might be trying to follow along.&lt;/p&gt;

&lt;p&gt;Sequenceid could be used to identify a Cell uniquely. Could we use this to go indirectly to a chunkid?&lt;/p&gt;</comment>
                            <comment id="15593960" author="ram_krish" created="Fri, 21 Oct 2016 04:39:49 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt;&lt;br/&gt;
The idea was actually to create an index to the cells such that we avoid heap overhead. &lt;br/&gt;
Suppose we have MSLAB and Chunk pool enabled. We do add every cell to a chunk. Now this is in case of the active segment. Once the segment is either MERGED (as in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16608&quot; title=&quot;Introducing the ability to merge ImmutableSegments without copy-compaction or SQM usage&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16608&quot;&gt;&lt;del&gt;HBASE-16608&lt;/del&gt;&lt;/a&gt; or we move them to the pipeline) we can actually create an indexed version of the cell such that they occupy less over head. &lt;br/&gt;
If suppose we know to which chunk the cell was copied to, during index creation we could add the chunkid, length and offset of every cell in to the index array and we only need to maintain the index array and for any cell retrieval (we do binary search) on the index. Remember that if we use ChunkPool then we are going to have a fixed number of chunks and we would be reusing it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Sequenceid could be used to identify a Cell uniquely. Could we use this to go indirectly to a chunkid?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;A cell can definitely be identified uniquely but how will we know where is the cell located now? We need a pointer to that to retrive it. &lt;/p&gt;

&lt;p&gt;But some points to note before we even do this full fledged is -&lt;br/&gt;
-&amp;gt; ChunkPool if not enabled how will we retrieve the chunk?&lt;br/&gt;
-&amp;gt; Currently we have a limitation on cell size.&lt;br/&gt;
-&amp;gt; Append/Increment does not use MSLAB at all for upsert - so we are at a risk here?&lt;/p&gt;</comment>
                            <comment id="15594097" author="anoop.hbase" created="Fri, 21 Oct 2016 05:15:52 +0000"  >&lt;p&gt;Thanks Ram.. Explains things clearly.&lt;br/&gt;
There is a jira for CellChunkMap work. Can u post this same 3 issues there as well.. I think #1 and #2 were discussed already. But #3 am not sure.. Ya let us discuss on this and then only go forward.&lt;/p&gt;</comment>
                            <comment id="15607377" author="stack" created="Wed, 26 Oct 2016 04:26:59 +0000"  >&lt;p&gt;I don&apos;t see where you say above why we need to write into the cell the chunkid it is associate with? Why do we have to? The index will have the chunk to find a Cell in. The Cell will not move, not unless we do a data merge. Then, a new index will be made to go with the new merged chunk. This index will point to the new location. At what point do we ever have to write the chunk id into the Cell? Thanks Ram.&lt;/p&gt;</comment>
                            <comment id="15607499" author="ram_krish" created="Wed, 26 Oct 2016 05:35:30 +0000"  >&lt;p&gt;Thanks for your comments. The case I think of is this.&lt;br/&gt;
We do in memory flushes now. So every in memory flush will create a segment.&lt;br/&gt;
The cells are located in this segment. When MSLAB is ON and chunk pool is ON we create a chunk from the pool and that is where the cells are added. &lt;br/&gt;
Now this segment is of type CSLM each entry pointing to the chunk created from the chunk pool. &lt;br/&gt;
When I try to create an index out of this I don&apos;t add the chunk where the cell is added. Instead I just add the chunkid (assume when we ask for a chunk from the pool it gives out an id) and the cell&apos;s offset and length.&lt;br/&gt;
Why chunk id is important is because again say there is one more in memory flush and we create one more segment and the old one is pushed to the pipeline. So we convert this segment from CSLM to chunk based. Now in my index array since I have another segment added I  need to clearly know for which segment was this chunk created because the cell&apos;s offset and length could be same and there is no unique way to distinguish.&lt;br/&gt;
In the CellArrayMap impl there is no such need because just that they create an array of cells and every index in the array points to the cell referenced inside the chunks. We don&apos;t need any chunkid there. Because it points to actual cells. But in CellChunkIndex we don&apos;t point to actual cells.&lt;br/&gt;
Let me know if I am writing it clearly if not can rephrase again. Thanks.&lt;/p&gt;</comment>
                            <comment id="15607511" author="anoop.hbase" created="Wed, 26 Oct 2016 05:42:13 +0000"  >&lt;p&gt;In CellChunkMap, we will get rid of Cell objects and will keep only some index data.  So this index data has to tell us in which byte[]/BB/Chunk the cell data resides and in which offset and what is its total length. The latter 2 are ints. The 1st one is a pointer. Again we will need to keep it on heap. Where what the solution proposes is to keep an id of the chunk where this cell resides instead of keeping a java ref to this chunk object.  That is why the chunk id is imp now.  Now normal cells will have only ref to chunks. So when an in memory flush happens and we make the chunk map, we dont know the index/id of this chunk.  That is why we were saying that we can keep the chunk id int within the cell object.&lt;/p&gt;</comment>
                            <comment id="15607575" author="stack" created="Wed, 26 Oct 2016 06:16:43 +0000"  >&lt;p&gt;Thanks Ram. So why we write the chunkid back into the Cell? How would that help? Thanks.&lt;/p&gt;</comment>
                            <comment id="15607676" author="ram_krish" created="Wed, 26 Oct 2016 07:09:06 +0000"  >&lt;p&gt;I am just seeing Anoop&apos;s reply above. Yes as he says if we dont write the chunk id in the cell then we have to have keep references onheap. So anyway we will create a new cell that has chunk id as the reference but in case of offheap write path any new onheap reference is going to have an impact for us. So in such cases if the chunkid is embedded in the cell then we could even avoid that.&lt;br/&gt;
But if the same cell is going to be created onheap then having chunkid in the byte[] or as reference is not of much impact to us becuase anyway we need 8 bytes extra ( in case chunk id is long). But for an offheap cell this 8 bytes is going to be allocated offheap only and nothing onheap.&lt;/p&gt;</comment>
                            <comment id="15609117" author="stack" created="Wed, 26 Oct 2016 17:36:41 +0000"  >&lt;p&gt;So we are talking about going from active CSLS to an immutable segment flush? Just this case?  And without a copy as described in step #7 in this doc &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12792492/CellBlocksSegmentinthecontextofMemStore%281%29.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12792492/CellBlocksSegmentinthecontextofMemStore%281%29.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; Here, our index &amp;#8211; the CSLS &amp;#8211; does not include reference to the backing &apos;chunk&apos;.  We&apos;d stamp a Cell with its containing chunk to save our having to copy from one chunk to another as part of the flush from active segment to immutable?&lt;/p&gt;</comment>
                            <comment id="15609126" author="ram_krish" created="Wed, 26 Oct 2016 17:41:11 +0000"  >&lt;p&gt;Yes you are correct here. We now try to avoid that copy when we move from active to immutable segment. If we have chunk id we could directly use that as the pointer as to where the cell resides.&lt;/p&gt;</comment>
                            <comment id="15609164" author="anoop.hbase" created="Wed, 26 Oct 2016 17:51:22 +0000"  >&lt;p&gt;Oh ya. I forgot that in the doc, still we say abt copy to new chunk.. It was being discussed at that time how to avoid this copy just to get a chunk id.  We might need to add that info to the design doc. After the PoC any way.&lt;/p&gt;</comment>
                            <comment id="15609182" author="stack" created="Wed, 26 Oct 2016 17:59:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;I am just seeing Anoop&apos;s reply above. Yes as he says if we dont write the chunk id in the cell then we have to have keep references onheap. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Man. I&apos;m confused still. Why? We lookup stuff via the index. The index has chunkid+offset+length so we know how to find a Cell whether chunks are onheap or offheap. Index can be onheap or offheap, right?&lt;/p&gt;

&lt;p&gt;(Separate issue, doesn&apos;t this mean we have to instantiate a Cell everytime we need to &apos;look&apos; at it? Or at least, when scanning, be able to scan Cell in its &apos;flat form&apos;).&lt;/p&gt;
</comment>
                            <comment id="15609193" author="anoop.hbase" created="Wed, 26 Oct 2016 18:03:06 +0000"  >&lt;p&gt;Cells are added to active segment means it is added to CSLM. When it is in memory flushed and flattened to CellChunkMap, we need to create index from cell right?  So the index needs to have the chunkid.  How to know the chunkid of the chunk where cell data resides?&lt;/p&gt;</comment>
                            <comment id="15609347" author="stack" created="Wed, 26 Oct 2016 19:00:22 +0000"  >&lt;p&gt;Thanks boys for the help &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; I see it is needed going from CSLS to CellChunkMap but also for CellArrayMap to CellChunkMap if that convertion is needed if we are NOT going to copy (which is a necessary transformation type). We&apos;d write chunk id at the time we copy Cell from RPC Buffer to a MSLAB gotten from MSLAB pool?&lt;/p&gt;</comment>
                            <comment id="15609910" author="stack" created="Wed, 26 Oct 2016 22:39:38 +0000"  >&lt;p&gt;I added to description why we need to do this as described by Anastasia back in parent issue: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921?focusedCommentId=15244119&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15244119&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-14921?focusedCommentId=15244119&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15244119&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15610031" author="stack" created="Wed, 26 Oct 2016 23:30:21 +0000"  >&lt;p&gt;Pertinent &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt; comment copied from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14921&quot; title=&quot;Inmemory Compaction Optimizations; Segment Structure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14921&quot;&gt;&lt;del&gt;HBASE-14921&lt;/del&gt;&lt;/a&gt;: &quot;Cells having ref to chunk data (byte[] now). Can we make the meta data here as ref + offset ( 8 = 4 = 12 bytes per Cell)..Ya it is 4 bytes more but its ok and better than 40 bytes per cell overhead. We need to mark the Cells created out of copy to MSLAB in a special way so as to retrieve the byte[] ref.&lt;/p&gt;

&lt;p&gt;I see that CellArrayMap is in under regionserver package in hbase-server. Would be cool to pull this all out and move under hbase-common along w/ tests. Would make dev easier.&lt;/p&gt;</comment>
                            <comment id="15610643" author="ram_krish" created="Thu, 27 Oct 2016 04:38:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;We&apos;d write chunk id at the time we copy Cell from RPC Buffer to a MSLAB gotten from MSLAB pool?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. That is right.&lt;/p&gt;</comment>
                            <comment id="15610669" author="anoop.hbase" created="Thu, 27 Oct 2016 04:56:23 +0000"  >&lt;p&gt;Describing diff possibilities at that time.  We keep ref and offset means we can not keep whole of the index meta in off heap chunk.  chunkid+ offset we can easily keep as both are ints and we can keep ints in offheap BB.  But the ref means we need to have a ref array which is on heap.  And we will need another data structure (chunk only) to keep offset + length.   Yes we can avoid length when there are no tags.  But when tags are there, we need to keep length &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/sad.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. This is because tags parts comes after KL, VL, Key and Value.   Also missed one more thing at that time of discuss.  ie. we need to keep the seqId 8 bytes).. When cells in CSLM, it is a long state on the object.  Other way would be that when we copy Cell to MSLAB (or to a temp byte[]) at the time of addition to Memstore, we need to keep the seqId not as a state in obj. But that should be put as the last 8 bytes of the cell data bytes. (After key, value and tags).  When MSLAB is off heap this will help us  to keep more data off heap.  We need a diff version of cell which can read seqId correctly from last 8 bytes. We will need decode it.  Will need lots of PoC work around diff ideas.  All these goes to other jira which says abt ChunkMap variant.&lt;/p&gt;</comment>
                            <comment id="15610687" author="ram_krish" created="Thu, 27 Oct 2016 05:07:48 +0000"  >&lt;p&gt;I think when I was doing the memstore chunk Cell I did not do the sequenceID in the byte array because in write path when the sequence id is assigned we need to write that to a byte[] and I think it is not like we could pass it along with the actual MSLAB copy. So that will be costly and again on read it will be a costly operation. Going with VLong (in case of saving byte[] then it is going to be much costlier). So I think it is ok if we go with seqid as state only?&lt;/p&gt;</comment>
                            <comment id="15610715" author="stack" created="Thu, 27 Oct 2016 05:21:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;This is because tags parts comes after KL, VL, Key and Value.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What would length do? Include tags+sequenceid? We have to serialize it all anyways so just use total length as next offset?&lt;/p&gt;

&lt;p&gt;Let the PoC on structure be done apart form regionservers and regions. Do it out in hbase-common.  Keep it easy on yourselves.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;So I think it is ok if we go with seqid as state only?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What does this mean &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="15610759" author="ram_krish" created="Thu, 27 Oct 2016 05:42:28 +0000"  >&lt;p&gt;Am saying about the seqid discussion in this new cell. There was a discussion above saying if the seqid can be kept as state in the new cell or write in the byte[] itself to reduce heap overhead.&lt;/p&gt;</comment>
                            <comment id="15611175" author="ram_krish" created="Thu, 27 Oct 2016 08:32:43 +0000"  >&lt;p&gt;One correction. In the POC code I have added the seqId also in the cell&apos;s byte[] only. Just saw that code.&lt;/p&gt;</comment>
                            <comment id="15611207" author="anoop.hbase" created="Thu, 27 Oct 2016 08:43:58 +0000"  >&lt;p&gt;In CellChunkMap we write the index also to off heap chunks.  So its ok to write the seqId also along with chunkId+offset+length. So totally 20 bytes per cell but all can be in offheap area. So we are in better place.&lt;br/&gt;
The other way of keeping the ref means we will need a ref array + the chunk. 2 data structures keep the index data. Per cell one entry to ref array (that is on heap) and remaining 16 bytes can go to offheap chunk.&lt;/p&gt;

&lt;p&gt;Only worry of using chunk from pool for the index is the wastage it can make. May be we should share one chunk (One BB of 2 MB size) btw more than one segment&apos;s index.&lt;/p&gt;

&lt;p&gt;Elsewhere &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; was mentioning abt upping the chunk size from 2 MB too.  Then the concern is more. With 2 MB we can keep 131072 cells index data in it.&lt;/p&gt;</comment>
                            <comment id="15611244" author="ram_krish" created="Thu, 27 Oct 2016 08:58:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;May be we should share one chunk (One BB of 2 MB size) btw more than one segment&apos;s index.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. So for index we keep reusing the same chunk only.&lt;br/&gt;
seqid you will write it along with the index? Not sure what you say here.&lt;/p&gt;</comment>
                            <comment id="15611388" author="anoop.hbase" created="Thu, 27 Oct 2016 09:54:26 +0000"  >&lt;blockquote&gt;&lt;p&gt;seqid you will write it along with the index? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. SeqId is state in Cell object and now we lost that object. So along with offset+ length index info, we can keep this seqId also. We know it is 8 bytes so the size adjustment we can do easily.&lt;/p&gt;</comment>
                            <comment id="15612376" author="stack" created="Thu, 27 Oct 2016 16:15:17 +0000"  >&lt;p&gt;We want to do this? sequenceid is integral to Cell. That it is a data member in memstore is just because sequenceid consideration came late to the game.  I&apos;d think we&apos;d serialize it out when we serialize the Cell? Not have seriialization part in index and bulk in cell serialized bytes.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 17 Aug 2016 23:24:33 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i32f13:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>