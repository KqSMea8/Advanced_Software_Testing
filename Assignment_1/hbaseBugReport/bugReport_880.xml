<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:48:23 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-880/HBASE-880.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-880] Improve the current client API by creating new container classes</title>
                <link>https://issues.apache.org/jira/browse/HBASE-880</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The current API does not scale very well. For each new feature, we have to add many methods to take care of all the overloads. Also, the need to batch row operations (gets, inserts, deletes) implies that we have to manage some &quot;entities&quot; like we are able to do with BatchUpdate but not with the other operations. The RowLock should be an attribute of such an entity.&lt;/p&gt;

&lt;p&gt;The scope of this jira is only to replace current API with another feature-compatible one, other methods will be added in other issues.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12404084">HBASE-880</key>
            <summary>Improve the current client API by creating new container classes</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="6">Invalid</resolution>
                                        <assignee username="streamy">Jonathan Gray</assignee>
                                    <reporter username="jdcryans">Jean-Daniel Cryans</reporter>
                        <labels>
                    </labels>
                <created>Wed, 10 Sep 2008 14:58:15 +0000</created>
                <updated>Thu, 2 May 2013 02:29:17 +0000</updated>
                            <resolved>Tue, 26 May 2009 16:08:04 +0000</resolved>
                                                    <fixVersion>0.20.0</fixVersion>
                                    <component>Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                    <timeoriginalestimate seconds="864000">240h</timeoriginalestimate>
                            <timeestimate seconds="864000">240h</timeestimate>
                                        <comments>
                            <comment id="12629826" author="jdcryans" created="Wed, 10 Sep 2008 15:06:55 +0000"  >&lt;p&gt;Proposed RowOperation class:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class RowOperation &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Writable {

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [] row;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; timestamp = HConstants.LATEST_TIMESTAMP;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; rowLock = -1L;

  constructors, getters, setters, read, write...
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Class to be used for gets:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class RowGet &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; RowOperation {

  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[][] columns;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;RowGet used in a get (in opposition to getRow) would only use the first column in the byte array. Is it confusing?&lt;/p&gt;

&lt;p&gt;BatchUpdate would now extend RowOperation (and maybe should be renamed?)&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class BatchUpdate &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; RowOperation &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Iterable&amp;lt;BatchOperation&amp;gt; {

&lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; ArrayList&amp;lt;BatchOperation&amp;gt; operations =
    &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;BatchOperation&amp;gt;();
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Maybe we can do the same for scanners?&lt;/p&gt;

&lt;p&gt;All methods in the API would use their corresponding class. All others would be deprecated.&lt;/p&gt;</comment>
                            <comment id="12629866" author="jimk" created="Wed, 10 Sep 2008 17:10:03 +0000"  >&lt;p&gt;I&apos;m not sure I follow. Won&apos;t RowOperation still require all the overloads?&lt;/p&gt;

&lt;p&gt;And isn&apos;t RowOperation more like BatchOperation than BatchUpdate?&lt;/p&gt;

&lt;p&gt;If you have multiple gets, do you return a RowResult?&lt;/p&gt;

&lt;p&gt;I would propose something like deprecating BatchOperation and add BatchPut, BatchDelete, BatchGet and BatchGetRow. Deprecate BatchUpdate and add RowOperation.&lt;/p&gt;

&lt;p&gt;We&apos;d need a new method to send the RowOperation to the server. Commit doesn&apos;t make sense, especially if you do:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
RowLock lock = lockRow(row)
RowOperation op = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RowOperation(..., lock);
op.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BatchPut(...)
op.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BatchGet(...)
...
RowResult result = send(op)
op = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RowOperation(..., lock)
op.add(...)
...
result = send(op)
unlockRow(lock)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12629875" author="jdcryans" created="Wed, 10 Sep 2008 17:35:56 +0000"  >&lt;p&gt;Some code the support my previous comment: &lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
RowGet rowGet = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RowGet(row);
htable.lockRow(rowGet);
row.addColumn(&lt;span class=&quot;code-quote&quot;&gt;&quot;info:&quot;&lt;/span&gt;);  &lt;span class=&quot;code-comment&quot;&gt;// overloads &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; bytes and &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;RowResult = htable.getRow(rowGet);
htable.unlockRow(rowGet);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12629899" author="stack" created="Wed, 10 Sep 2008 18:21:01 +0000"  >&lt;p&gt;Change RowGet to be RowColumnOperation (doesn&apos;t seem to be explicitly about &apos;Get&apos;).&lt;/p&gt;

&lt;p&gt;Rename BatchUpdate as RowOperations?&lt;/p&gt;

&lt;p&gt;Is API wrong?&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class BatchUpdate &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; RowOperation &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Iterable&amp;lt;BatchOperation&amp;gt; {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Should that be Iteralble&amp;lt;RowOperation&amp;gt;?&lt;/p&gt;

&lt;p&gt;Please add illustration of this API used when we have batches of row updates.&lt;/p&gt;

</comment>
                            <comment id="12629904" author="jdcryans" created="Wed, 10 Sep 2008 18:34:42 +0000"  >&lt;p&gt;In my design, a RowOperation is to be subclassed into RowGet and BatchUpdate (or a better name would be RowMutation). The rest would be the same, the BatchUpdate still has a bunch of BatchOperation. When we will have batches of row updates, it would look like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
ArrayList&amp;lt;RowOperation&amp;gt; batch = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;RowOperation&amp;gt;();
RowGet rowGet = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RowGet(row);
rowGet.addColumn(&lt;span class=&quot;code-quote&quot;&gt;&quot;info:&quot;&lt;/span&gt;);
batch.add(rowGet)
&lt;span class=&quot;code-comment&quot;&gt;//add some more gets in batch
&lt;/span&gt;RowResult[] results = htable.get(batch); &lt;span class=&quot;code-comment&quot;&gt;// or maybe a SortedMap?
&lt;/span&gt;
batch = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;RowOperation&amp;gt;();
BatchUpdate update = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BatchUpdate(row);
&lt;span class=&quot;code-comment&quot;&gt;//add some BatchOperation in it 
&lt;/span&gt;batch.add(update);
&lt;span class=&quot;code-comment&quot;&gt;//add some more BatchUpdate  in batch
&lt;/span&gt;htable.commit(batch);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In Jim&apos;s design, a RowOperation aggregates many operations on a single row like BatchPut, BatchDelete, etc.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
ArrayList&amp;lt;RowOperation&amp;gt; batch = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;RowOperation&amp;gt;();
RowOperation op = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RowOperation(..., lock);
op.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BatchPut(...))
op.add(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; BatchGet(...))
batch.add(op)
&lt;span class=&quot;code-comment&quot;&gt;//add some more RowOperation in batch
&lt;/span&gt;RowResult[] results = htable.send(batch); &lt;span class=&quot;code-comment&quot;&gt;// the results would come from the rows RowOperation that contained BatchGet/BatchGetRow&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="12629920" author="stack" created="Wed, 10 Sep 2008 19:05:00 +0000"  >&lt;p&gt;Suggest RowUpdate instead of RowMutation or BatchUpdate.  Goes better with RowGet than RowMutation, IMO.&lt;/p&gt;

&lt;p&gt;Regards the below...&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
RowResult[] results = htable.get(batch); &lt;span class=&quot;code-comment&quot;&gt;// or maybe a SortedMap?&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... we should make htable.get so it can take a List of RowGets or a single RowGet (should fail on RowOperation).  Or maybe we should add a getBatch that takes a List and returns SortedMap whereas get takes single RowGet and returns a RowResult.&lt;/p&gt;

&lt;p&gt;RowGet should take columns in its constructor.  Should be immutable type.&lt;/p&gt;
</comment>
                            <comment id="12630057" author="jdcryans" created="Thu, 11 Sep 2008 01:27:17 +0000"  >&lt;p&gt;@stack&lt;/p&gt;

&lt;p&gt;Yeah RowUpdate, had a blank.&lt;br/&gt;
I would prefer a get that returns a SortedMap and another that returns a RowResult.&lt;/p&gt;

&lt;p&gt;But I think we should settle on a certain design before further commenting a particular one. Both are good, would like others opinion,&lt;/p&gt;</comment>
                            <comment id="12630581" author="jdcryans" created="Fri, 12 Sep 2008 14:49:41 +0000"  >&lt;p&gt;An argument against having Batch* like Jim proposed, the RowOperation serialization would have to pass the name of the class over the wire.&lt;/p&gt;</comment>
                            <comment id="12630645" author="jimk" created="Fri, 12 Sep 2008 18:23:06 +0000"  >&lt;p&gt;Ok, I&apos;m on board with JD&apos;s basic design with some modifications:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;RowOperation should be abstract&lt;/li&gt;
	&lt;li&gt;Don&apos;t reuse the name BatchUpdate - it will be harder to deprecate if we do. Use RowMutation instead&lt;/li&gt;
	&lt;li&gt;Make RowResult implement Comparable&lt;/li&gt;
	&lt;li&gt;Have two flavors of get like we do with commit:&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; RowResult get(RowGet)
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; SortedSet&amp;lt; RowResult&amp;gt; get(List&amp;lt;RowGet&amp;gt;)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When getting multiple versions, you can still use a RowResult as Cell can contain multiple values and timestamps.&lt;/p&gt;

&lt;p&gt;Constructors for RowGet should have multiple overloads so you can get a single column, multiple columns, multiple versions, a single timestamp or a pair of timestamps indicating a range.&lt;/p&gt;

&lt;p&gt;We should probably also have a RowDelete class so we can support deleteAll&lt;/p&gt;

&lt;p&gt;I think we should leave Scanners alone.&lt;/p&gt;</comment>
                            <comment id="12630651" author="jdcryans" created="Fri, 12 Sep 2008 18:34:29 +0000"  >&lt;p&gt;+1 with JIm&apos;s comments. I begin the open heart surgery.&lt;/p&gt;</comment>
                            <comment id="12631492" author="jdcryans" created="Tue, 16 Sep 2008 18:21:22 +0000"  >&lt;blockquote&gt;&lt;p&gt;Constructors for RowGet should have multiple overloads so you can get a single column, multiple columns, multiple versions, a single timestamp or a pair of timestamps indicating a range.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I would keep the two methods get and getRow as a way to be more transition-friendly. This means that I would create 2 subclasses to RowOperation. Looking at the code inside HRS, it also make more sense.&lt;/p&gt;</comment>
                            <comment id="12631585" author="jdcryans" created="Tue, 16 Sep 2008 22:41:36 +0000"  >&lt;p&gt;First try on this issue. Passes the tests. Please review.&lt;/p&gt;

&lt;p&gt;When reviewing, please keep in mind the following:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;This first patch is more about showing what&apos;s the new API like.&lt;/li&gt;
	&lt;li&gt;The package level javadoc is not modified at this point nor is the rest of the documentation.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12632807" author="stack" created="Fri, 19 Sep 2008 20:27:32 +0000"  >&lt;p&gt;I took a look at this patch with J-D as Virgil.&lt;/p&gt;

&lt;p&gt;I need to study it more.  We have to be real careful making fundamental changes to our API &amp;#8211; as is this patch &amp;#8211; to make sure we get it right.  On my first drive through, it strikes me that it needs to be more elegant than it is at flush blush.&lt;/p&gt;

&lt;p&gt;Meantime, here a few remarks.&lt;/p&gt;

&lt;p&gt;Is below intentional:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Index: src/java/org/apache/hadoop/hbase/client/HConnectionManager.java
===================================================================
--- src/java/org/apache/hadoop/hbase/client/HConnectionManager.java	(revision 696049)
+++ src/java/org/apache/hadoop/hbase/client/HConnectionManager.java	(working copy)
@@ -860,10 +860,12 @@
           }
           exceptions.add(t);
           &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (tries == numRetries - 1) {
+            t.printStackTrace();
             &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; RetriesExhaustedException(callable.getServerName(),
                 callable.getRegionName(), callable.getRow(), tries, exceptions);
           }
           &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (LOG.isDebugEnabled()) {
+            t.printStackTrace();
             LOG.debug(&lt;span class=&quot;code-quote&quot;&gt;&quot;reloading table servers because: &quot;&lt;/span&gt; + t.getMessage());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Could add the exception as argument if wanted rather than printStackTrace.&lt;/p&gt;

&lt;p&gt;Don&apos;t touch whats under v5.  Thats migration stuff.  Move what it needs under v5 if you want to change BatchUpdate, etc., or just leave them in place till actual removal and we can worry about how to migrate then.&lt;/p&gt;

&lt;p&gt;Below is synopsis of J-D/Stack back and forth:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[12:33]	&amp;lt;st^ack&amp;gt;	jdcryans: RowGet doesn&apos;t have a constructor to set number of versions?
[12:34]	&amp;lt;jdcryans&amp;gt;	st^ack: I wish that we don&apos;t have to change the API at each &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; feature
[12:34]	&amp;lt;jdcryans&amp;gt;	so keeping a small constructor is, I think, the way to go
[12:34]	&amp;lt;jdcryans&amp;gt;	&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; the &lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;, setters
[12:35]	&amp;lt;st^ack&amp;gt;	Immutables are nice.
[12:35]	&amp;lt;st^ack&amp;gt;	You have to add setter/getter every time you add a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; feature.
[12:36]	&amp;lt;st^ack&amp;gt;	The worry is that the constructor will grow madly?
[12:36]	&amp;lt;jdcryans&amp;gt;	st^ack: yeah
[12:36]	&amp;lt;jdcryans&amp;gt;	and that we have to have every combination &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; every feature set
[12:43]	&amp;lt;st^ack&amp;gt;	but we have to add a getter/setter &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; each &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; attribute, right?
[12:44]	&amp;lt;st^ack&amp;gt;	Why is RowDelete different from RowUpdate?
[12:45]	&amp;lt;jdcryans&amp;gt;	st^ack: yes, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; getter/setter, that&apos;s what I think is better instead of g/s + all contructors
[12:46]	&amp;lt;jdcryans&amp;gt;	RowDelete is &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; deleteAll and deleteFamily, does not have a list of batchoperations
[12:46]	&amp;lt;jdcryans&amp;gt;	&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; you think it&apos;s bad, I would say that a=b=c so current is bad too
[12:46]	&amp;lt;jdcryans&amp;gt;	current API*
[12:48]	&amp;lt;st^ack&amp;gt;	deleteAll breaks things. usually the operation contains the rows to operate on. when deleteAll, the operation doesn&apos;t supply columns -- presumtpion is all columns.
[12:48]	&amp;lt;st^ack&amp;gt;	Current API doesn&apos;t scale, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;.
[12:48]	&amp;lt;st^ack&amp;gt;	How &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; we &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; write-&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;-not-modified using &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; changed API?
[12:49]	&amp;lt;st^ack&amp;gt;	you know, the feature where we only update a value &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; it hasn&apos;t been changed
[12:49]	&amp;lt;jdcryans&amp;gt;	yeah yeah I was in that conversation
[12:49]	&amp;lt;st^ack&amp;gt;	i.e. take out a lock on row, look at value, then withing same row lock &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; update &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; not changed.
[12:50]	&amp;lt;jdcryans&amp;gt;	that would be another operation I guess
[12:51]	&amp;lt;st^ack&amp;gt;	jdcryans: I don&apos;t think I like the fact that our RPC is having primitive types replaced by more compound types
[12:51]	&amp;lt;jdcryans&amp;gt;	at least that would make another bunch of methods in HTable
[12:51]	&amp;lt;st^ack&amp;gt;	let me read more
[12:52]	&amp;lt;jdcryans&amp;gt;	then it will be hard to batch gets
[12:52]	&amp;lt;st^ack&amp;gt;	sort of.
[12:52]	&amp;lt;st^ack&amp;gt;	Could be row [][]
[12:53]	&amp;lt;st^ack&amp;gt;	column and timestamp same &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; all
[12:53]	&amp;lt;st^ack&amp;gt;	let me read more
[12:53]	&amp;lt;jdcryans&amp;gt;	st^ack: yeah but&apos;s limiting
[12:53]	&amp;lt;jdcryans&amp;gt;	&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; RowResult getRow(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [][] row, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; [][][] columns, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;[] ts, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; RowLock[] rl) would be ugly too
[12:59]	&amp;lt;st^ack&amp;gt;	On the pattern of setters vs. constructor args, I kinda feel we should &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; one or the other. Odd spanning both.
[13:00]	&amp;lt;jdcryans&amp;gt;	st^ack: y
[13:00]	&amp;lt;st^ack&amp;gt;	Regards expanding constructor, is it not the &lt;span class=&quot;code-keyword&quot;&gt;case&lt;/span&gt; that it won&apos;t be as bad once the extra args have been moved out of HTable method names instead into Operation construction.
[13:01]	&amp;lt;jdcryans&amp;gt;	st^ack: won&apos;t be as bad, &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;
[13:02]	&amp;lt;st^ack&amp;gt;	I suppose adding a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; feature, you&apos;ll have to fix the baseline Operation class and then all of its derivatives. That&apos;ll be a bit messy.
[13:02]	&amp;lt;jdcryans&amp;gt;	st^ack: you mean the constructors?
[13:02]	&amp;lt;st^ack&amp;gt;	Yeah, constructors
[13:03]	&amp;lt;jdcryans&amp;gt;	yes that&apos;s something I saw too, having to recopy all of them
[13:03]	&amp;lt;jdcryans&amp;gt;	part of why I prefer to keep g/s (but forgot about it since now :P)
[13:04]	&amp;lt;st^ack&amp;gt;	Whats a constructor now? column(s), start-timestamp, end-timestamp, versions
[13:04]	&amp;lt;st^ack&amp;gt;	Does lock belong inside an Operation?
[13:04]	&amp;lt;st^ack&amp;gt;	Shouldn&apos;t lock be outside an operation?
[13:06]	&amp;lt;jdcryans&amp;gt;	st^ack: same goal, remove overloads
[13:06]	&amp;lt;jdcryans&amp;gt;	I see that as one &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; feature, got the same treatment
[13:07]	&amp;lt;st^ack&amp;gt;	locks span operations though?
[13:07]	&amp;lt;st^ack&amp;gt;	row locks span row operations
[13:07]	&amp;lt;st^ack&amp;gt;	Its different that timestamp, etc.
[13:07]	&amp;lt;jdcryans&amp;gt;	proposed design does not prevent that
[13:09]	&amp;lt;jdcryans&amp;gt;	would have to bundle lock with every operation, pretty much in the same way as &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; it was another parameter
[13:12]	&amp;lt;st^ack&amp;gt;	To lock across a set of Operations, you suggest bundling the lock with each Operation -- setting it into each Operation?
[13:12]	&amp;lt;jdcryans&amp;gt;	yes
[13:12]	&amp;lt;st^ack&amp;gt;	What &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; user included an Operation in a set &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; a row that did not include the lock.
[13:12]	&amp;lt;st^ack&amp;gt;	How should that run over on the server.
[13:13]	&amp;lt;st^ack&amp;gt;	What is difference between RowDelete and RowUpdate (or &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; you want me to read the code -- smile)
[13:13]	&amp;lt;jdcryans&amp;gt;	garbage in garbage out &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; that user
[13:14]	&amp;lt;jdcryans&amp;gt;	I don&apos;t copy that last question
[13:14]	&amp;lt;st^ack&amp;gt;	If lock was a distinct param on a method in HTable, then we&apos;d have to have two versions of every method -- one with lock and one without?
[13:15]	&amp;lt;st^ack&amp;gt;	as we &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; now.
[13:15]	&amp;lt;st^ack&amp;gt;	I want to know how RowUpdate and RowDelete differ. Why couldn&apos;t I just pass a RowUpdate to a deleteAll?
[13:15]	&amp;lt;jdcryans&amp;gt;	yes
[13:17]	&amp;lt;jdcryans&amp;gt;	deleteAll wouldn&apos;t know which column to take
[13:17]	&amp;lt;jdcryans&amp;gt;	&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; RowUpdate has many BatchOperations
[13:18]	&amp;lt;jdcryans&amp;gt;	RowUpdate == BatchUpdate
[13:20]	&amp;lt;st^ack&amp;gt;	Sorry, I don&apos;t follow. I need to study &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; patch more.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12634311" author="jimk" created="Wed, 24 Sep 2008 21:41:12 +0000"  >&lt;p&gt;This patch no longer applies cleanly to trunk. Given its size and the number of modules affected, it is hard to review it.&lt;/p&gt;</comment>
                            <comment id="12634881" author="jdcryans" created="Fri, 26 Sep 2008 14:41:57 +0000"  >&lt;p&gt;Patch that applies to current trunk. Removed some modifications in migrate.v5 but some still had to go in. Please review.&lt;/p&gt;</comment>
                            <comment id="12635492" author="jimk" created="Mon, 29 Sep 2008 19:01:50 +0000"  >&lt;p&gt;Overall, I think the patch is moving in the right direction, but I think that the current patch is not much less complicated than the current implementation. I would change it as follows:&lt;/p&gt;

&lt;p&gt;RowOperation becomes a concrete class&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;remove the timestamp as timestamps are associated with columns and not rows (for getRow and deleteAll see below)&lt;/li&gt;
	&lt;li&gt;change the constuctor so it takes a row lock and not a timestamp&lt;/li&gt;
	&lt;li&gt;add new member that is List&amp;lt;ColumnOperation&amp;gt; (see below).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Add a new base class for columns:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class ColumnOperation &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; Writable, Comparable&amp;lt;ColumnOperation&amp;gt; {
  &lt;span class=&quot;code-comment&quot;&gt;// An empty column family means all columns in row.
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] columnFamily = HConstants.EMPTY_BYTE_ARRAY;

  &lt;span class=&quot;code-comment&quot;&gt;// An empty member means all members in the column.
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] familyMember = HConstants.EMPTY_BYTE_ARRAY;

  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; timestamp = HConstants.LATEST_TIMESTAMP;
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numVersions = 1;

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; ColumnOperation(){}                    &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; serialization
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; ColumnOperation(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] family, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] member, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; timestamp, &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numVersions) {
    ...
  }
  ...
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The class above can be used to replace get and getRow.&lt;br/&gt;
get(RowOperation) assumes that the List&amp;lt;ColumnOperation&amp;gt; is a list of ColumnOperation.&lt;/p&gt;

&lt;p&gt;Deprecate both BatchOperation and BatchUpdate.&lt;/p&gt;

&lt;p&gt;Add a new class that replaces BatchOperation:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class ColumnMutation &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; ColumnOperation {
  &lt;span class=&quot;code-comment&quot;&gt;// An empty value means delete the specified column.
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] value = HConstants.EMPTY_BYTE_ARRAY;

  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; ColumnMutation() {}                    &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; serialization
&lt;/span&gt;
  &lt;span class=&quot;code-comment&quot;&gt;// For updates (put)
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; ColumnMutation(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] family, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] member, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] value, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; timestamp) {
    ...
  }

  &lt;span class=&quot;code-comment&quot;&gt;// For deletes
&lt;/span&gt;  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; ColumnMutation(&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] family, &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] member, &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; timestamp) {
    ...
  }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HTable.commit is used for both updates and deletes. It assumes that the List&amp;lt;ColumnOperation&amp;gt; is a list of ColumnMutation.&lt;/p&gt;

&lt;p&gt;deleteAll becomes a commit of a RowOperation with one or more ColumnMutations:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;A single ColumnMutation with empty value, empty family, member, and default timestamp deletes all values for that row. With a timestamp, all the entries in the row that correspond to timestamp.&lt;/li&gt;
	&lt;li&gt;A single ColumnMutation with empty value, non-empty family corresponds to deleteFamily (with or without timestamp as above)&lt;/li&gt;
	&lt;li&gt;A single ColumnMutation with empty value, non-empty family and non-empty member corresponds to current batchUpdate delete behavior&lt;/li&gt;
	&lt;li&gt;Multiple ColumnMutations with empty value can delete multiple families or multiple members.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Thus commit replaces current commit, deleteAll and deleteFamily.&lt;/p&gt;
</comment>
                            <comment id="12635503" author="jimk" created="Mon, 29 Sep 2008 19:54:39 +0000"  >&lt;p&gt;To clarify my previous comment (and correct a mistake):&lt;/p&gt;

&lt;p&gt;The overall idea is to replace all gets and getRows with RowResult get(RowOperation). &lt;br/&gt;
All updates, deleteAll and deleteFamily can be replaced with void commit(RowOperation)&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ColumnOperation is used for get and getRow. It has no value field so it cannot be used for updates.&lt;/li&gt;
	&lt;li&gt;ColumnOperation should have a single byte array for family:member, since family names are printable.&lt;/li&gt;
	&lt;li&gt;&apos;family:member&apos; specifies a specific member of a family&lt;/li&gt;
	&lt;li&gt;&apos;family:&apos; means the Cell in which the member name is null&lt;/li&gt;
	&lt;li&gt;&apos;family&apos; (no delimiter) means all members in the family&lt;/li&gt;
	&lt;li&gt;a completely empty byte array means all members of all families&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;ColumnMutations are a replacement for BatchOperation in which they subclass ColumnOperation and add only the value.&lt;/li&gt;
	&lt;li&gt;an empty value specifies a delete just as BatchOperation does today&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12635537" author="jimk" created="Mon, 29 Sep 2008 21:17:53 +0000"  >&lt;p&gt;Actually, get(RowOperation) should return Cell[] as get does currently.&lt;br/&gt;
There is no need to return a RowResult since we already know the row.&lt;/p&gt;

&lt;p&gt;getRow(RowOperation) could return HBaseMapWritable&amp;lt;byte[], Cell&amp;gt; even though it currently returns RowResult.&lt;/p&gt;</comment>
                            <comment id="12635586" author="jimk" created="Mon, 29 Sep 2008 23:19:41 +0000"  >&lt;p&gt;Ok, scratch my comment above which redesigns RowOperation and adds new classes.&lt;/p&gt;

&lt;p&gt;RowOperation is basically fine as it is&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;both get and update currently support one time stamp so keeping it in RowOperation is fine.&lt;/li&gt;
	&lt;li&gt;however do add another constructor (or two) in which you can specify the RowLock.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I would eliminate RowSingleColumnOperation and RowGetRow and modify RowGet to have&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[][] columns;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; numVersions;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(to support &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-847&quot; title=&quot;new API: HTable.getRow with numVersion specified&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-847&quot;&gt;&lt;del&gt;HBASE-847&lt;/del&gt;&lt;/a&gt; and its sub tasks we could add another member, private long startTimestamp, to support getting&lt;br/&gt;
values between two timestamps)&lt;/p&gt;

&lt;p&gt;public Cell[] get(RowGet) would ensure that columns.length == 1&lt;br/&gt;
public RowResult getRow(RowGet) could be changed to return SortedMap&amp;lt;byte[], Cell&amp;gt;&lt;/p&gt;

&lt;p&gt;Eliminate RowDelete.&lt;br/&gt;
Deprecate BatchOperation.&lt;br/&gt;
Rename RowUpdate to RowMutation.&lt;/p&gt;

&lt;p&gt;Add new class similar to BatchOperation and ColumnMutation above so that it can handle both updates and  deletes.&lt;br/&gt;
(It could be a private inner class to RowMutation) To support &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-847&quot; title=&quot;new API: HTable.getRow with numVersion specified&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-847&quot;&gt;&lt;del&gt;HBASE-847&lt;/del&gt;&lt;/a&gt;, we&apos;d need to add numVersions and&lt;br/&gt;
startTimestamp to this class. This would eliminate deleteAll and deleteFamily and all changes to a row would be&lt;br/&gt;
done via commit.&lt;/p&gt;

&lt;p&gt;That sound better?&lt;/p&gt;</comment>
                            <comment id="12635592" author="stack" created="Mon, 29 Sep 2008 23:29:24 +0000"  >&lt;p&gt;HTable UML diagram of what we currently have for an API.&lt;/p&gt;</comment>
                            <comment id="12635629" author="jimk" created="Tue, 30 Sep 2008 01:32:02 +0000"  >&lt;p&gt;Changes introduced to hbase.io by hbase-880-v2.patch&lt;/p&gt;</comment>
                            <comment id="12635645" author="stack" created="Tue, 30 Sep 2008 04:18:03 +0000"  >&lt;p&gt;Maybe add in HTable to your diagram so can contrast the two pictures?  Before and after?&lt;/p&gt;</comment>
                            <comment id="12635646" author="stack" created="Tue, 30 Sep 2008 04:18:23 +0000"  >&lt;p&gt;Oh, nice diagram by the way&lt;/p&gt;</comment>
                            <comment id="12635664" author="jimk" created="Tue, 30 Sep 2008 05:27:52 +0000"  >&lt;p&gt;Constructor overloads or setter&apos;s?&lt;/p&gt;

&lt;p&gt;For something like RowGet, the number of overloads expands exponentially. The required parameter is the row name.&lt;br/&gt;
The other parameters are:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;one or more column names&lt;/li&gt;
	&lt;li&gt;timestamp&lt;/li&gt;
	&lt;li&gt;number of versions&lt;/li&gt;
	&lt;li&gt;lockid&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;combine that with overloads for String or String[] over byte[] or byte[][] and the total amounts to about 30 overloads.  &lt;/p&gt;

&lt;p&gt;Compare that with just overloads for&lt;/p&gt;

&lt;p&gt;String row, String column&lt;br/&gt;
byte[] row, byte[] column&lt;br/&gt;
String row, String column[]&lt;br/&gt;
byte[] row, byte[][] column&lt;/p&gt;

&lt;p&gt;and setter&apos;s for timestamp, number of versions, and lockid and you reduce ~30 overloads to 4 constructors and 3 setters.&lt;/p&gt;

&lt;p&gt;This seems like the better route to take. The common options are covered, defaults are provided, and if you want the&lt;br/&gt;
optional parameters, use the setters.&lt;/p&gt;

&lt;p&gt;Comments?&lt;/p&gt;</comment>
                            <comment id="12635744" author="jdcryans" created="Tue, 30 Sep 2008 13:30:13 +0000"  >&lt;blockquote&gt;&lt;p&gt;and setter&apos;s for timestamp, number of versions, and lockid and you reduce ~30 overloads to 4 constructors and 3 setters.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is my opinion too. +1&lt;/p&gt;

&lt;p&gt;Regards the rest of the Sept. 29 comments, is the &quot;Jim Kellerman - 29/Sep/08 04:19 PM&quot; comment the only one that matters?&lt;/p&gt;</comment>
                            <comment id="12635800" author="stack" created="Tue, 30 Sep 2008 18:13:24 +0000"  >&lt;p&gt;Looking at this, regards RowOperation, don&apos;t you think the timestamp belong rather with the specification of what we&apos;re to get or delete or update?  If we do this, it facilitates batching a bunch of operations against the one row but each with its own timestamp specification (and +1, the timestamp needs to be specifiable as a range with start and end for all Operations).&lt;/p&gt;

&lt;p&gt;Is it true that we cannot do a mix of update/get/deletes on the one row all in the one operation (as was possible with old BatchUpdate).  Looks like you&apos;d do a get only, or an update only, or a delete only; you might batch them true but they&apos;d run in series rather than all as part of the one row operation.  Is this the case?  (Its almost as though an Operation should &apos;have&apos; Gets, Deletes, and Updates)&lt;/p&gt;

&lt;p&gt;IIRC, doing the below was problematic:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; RowResult getRow(RowGet) could be changed to &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; SortedMap&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], Cell&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Sorry, I don&apos;t remember the detail.&lt;/p&gt;

&lt;p&gt;-1 on &apos;Rename RowUpdate to RowMutation.&apos;  IMO, mutation is c++ speak whereas update is db speak.&lt;/p&gt;

&lt;p&gt;On constructors vs. setters, this is an age-old argument.  Lets have one or the other, not both.  If lots of arguments, that would seem to favor setters though invoking all the setters on a newly created object makes for ugly code &amp;#8211; and possibly half-initialized objects &amp;#8211;  and I dislike the fact that setters makes our objects mutable.&lt;/p&gt;

&lt;p&gt;This stuff is hard.  I&apos;m glad we&apos;ve moved to diagramming.  Better for working out ideas.&lt;/p&gt;

&lt;p&gt;Other things to consider:&lt;/p&gt;

&lt;p&gt;+ Scanner API needs to align.&lt;br/&gt;
+ Batching needs to get diagrammed too so we&apos;re sure we have it covered.&lt;/p&gt;</comment>
                            <comment id="12635823" author="jimk" created="Tue, 30 Sep 2008 19:36:22 +0000"  >&lt;p&gt;This diagram essentially is my proposal in the interest of time, I did not redo scanners yet, nor did I address Stack&apos;s latest comments.&lt;/p&gt;

&lt;p&gt;Note that I removed the deprecated methods from HTable so we could see what the eventual API looks like without all the other clutter.&lt;/p&gt;

&lt;p&gt;I will address Stack&apos;s comments in a separate comment.&lt;/p&gt;</comment>
                            <comment id="12635840" author="jimk" created="Tue, 30 Sep 2008 20:22:27 +0000"  >&lt;p&gt;@Stack&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Looking at this, regards RowOperation, don&apos;t you think the timestamp belong rather with the specification of what we&apos;re&lt;br/&gt;
to get or delete or update? If we do this, it facilitates batching a bunch of operations against the one row but each with&lt;br/&gt;
its own timestamp specification (and +1, the timestamp needs to be specifiable as a range with start and end for all&lt;br/&gt;
Operations). &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Neither the current API nor the 880 patch supports different timestamps for update, get(column) or getRow.&lt;br/&gt;
Are you proposing we add this?&lt;/p&gt;

&lt;p&gt;Only gets and deletes have a startingTimestamp. Doesn&apos;t make sense for puts.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Is it true that we cannot do a mix of update/get/deletes on the one row all in the one operation (as was possible with&lt;br/&gt;
old BatchUpdate)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Neither trunk nor 880 patch permit that, although my earlier proposal did. The problem I found with that was in&lt;br/&gt;
returning results. As you pointed out in an earlier comment, get(column) should return Cell[] and getRow should&lt;br/&gt;
return a RowResult (or as I suggested a SortedMap&amp;lt;byte[], Cell&amp;gt;)&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;IIRC, doing the below was problematic:&lt;/p&gt;

&lt;p&gt;public RowResult getRow(RowGet) could be changed to return SortedMap&amp;lt;byte[], Cell&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HBaseMapWritable implements SortedMap&amp;lt;byte[], Cell&amp;gt; and getRow does not need the row back. Is it possible&lt;br/&gt;
that at one point HBaseMapWritable implemented Map&amp;lt;byte[], Cell&amp;gt; and not SortedMap?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;-1 on &apos;Rename RowUpdate to RowMutation.&apos; IMO, mutation is c++ speak whereas update is db speak.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Jean-Daniel agrees with you and I don&apos;t really care what we call it. I used mutation because that is what&lt;br/&gt;
Bigtable calls it.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;On constructors vs. setters, this is an age-old argument. Lets have one or the other, not both. If lots of arguments,&lt;br/&gt;
that would seem to favor setters though invoking all the setters on a newly created object makes for ugly code and&lt;br/&gt;
possibly half-initialized objects - and I dislike the fact that setters makes our objects mutable.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I agree. I used setters for a lot of stuff because it reduced the number of overloads by a lot, especially in derived&lt;br/&gt;
classes, which had to take all the possible arguments for their super classes.&lt;/p&gt;

&lt;p&gt;With respect to half-initialized objects, I would imagine that the things that can be set would be initialized to&lt;br/&gt;
a default value that makes sense.&lt;/p&gt;

&lt;p&gt;And I agree on the mutability issue, but I think the trade-off is worth it.&lt;/p&gt;</comment>
                            <comment id="12635860" author="stack" created="Tue, 30 Sep 2008 21:15:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;Neither the current API nor the 880 patch supports different timestamps for update, get(column) or getRow. Are you proposing we add this?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Do&#287;acan G&#252;ney did over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-899&quot; title=&quot;Support for specifying a timestamp and numVersions on a per-column basis&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-899&quot;&gt;&lt;del&gt;HBASE-899&lt;/del&gt;&lt;/a&gt;.  There you were thinking it would not be too difficult to add?  Seems reasonable to me: i.e. timestamp does not below with row but rather with column specification.&lt;/p&gt;

&lt;p&gt;bg. Neither trunk nor 880 patch permit that...&lt;/p&gt;

&lt;p&gt;I see now how my comment confused things by grouping get with put and delete.  Pardon me.   What I meant was that when updating, you should be able to mix put and delete operations on the one row and asking if this redesign allowed that.  Seems like I can make  RowMutation object and do deletes and puts against the one row (You can&apos;t do get and updates in the one operation.  That &apos;normal&apos;).&lt;/p&gt;

&lt;p&gt;Regards the proposal, if I want to get values for many columns &amp;#8211; not all columns on a row but some subset &amp;#8211; how do I do it?  I use a RowGetOperation instead of a GetOperation?  We should have better naming, don&apos;t you think?   Should we drop the GetOperation and instead rename current RowGetOperation as GetOperation and use it everywhere?  (If we do this, we won&apos;t be able to do hbase-899 as written?)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Note that I removed the deprecated methods from HTable so we could see what the eventual API looks like without all the other clutter.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1.  Helps with visualization.&lt;/p&gt;</comment>
                            <comment id="12635866" author="jimk" created="Tue, 30 Sep 2008 21:37:32 +0000"  >&lt;p&gt;@Stack&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt; Neither the current API nor the 880 patch supports different timestamps for update, get(column) or getRow. Are you proposing we add this?&lt;/p&gt;

&lt;p&gt;Do&#287;acan G&#252;ney did over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-899&quot; title=&quot;Support for specifying a timestamp and numVersions on a per-column basis&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-899&quot;&gt;&lt;del&gt;HBASE-899&lt;/del&gt;&lt;/a&gt;. There you were thinking it would not be too difficult to add? Seems reasonable to me: i.e. timestamp&lt;br/&gt;
does not below with row but rather with column specification.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It should be easy enough to add. Does it make sense for all of get/put/delete?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I see now how my comment confused things by grouping get with put and delete. Pardon me. What I meant was that when updating, you should&lt;br/&gt;
be able to mix put and delete operations on the one row and asking if this redesign allowed that. Seems like I can make RowMutation object and&lt;br/&gt;
do deletes and puts against the one row (You can&apos;t do get and updates in the one operation. That &apos;normal&apos;).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, you can do both puts and deletes in one operation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Regards the proposal, if I want to get values for many columns - not all columns on a row but some subset - how do I do it? I use a&lt;br/&gt;
RowGetOperation instead of a GetOperation? We should have better naming, don&apos;t you think? Should we drop the GetOperation&lt;br/&gt;
and instead rename current RowGetOperation as GetOperation and use it everywhere? (If we do this, we won&apos;t be able to do&lt;br/&gt;
hbase-899 as written?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I kind of struggled with this one, and it ended up the way it did since you asked that get return Cell[] instead of RowResult. I would&lt;br/&gt;
prefer that we drop GetOperation and rename RowGetOperation to GetOperation, if you think that it&apos;s ok for a single get to return&lt;br/&gt;
SortedMap&amp;lt;byte[], Cell&amp;gt; instead of Cell[], it&apos;s an easy change and enables folding AbstractGetOperation into the new GetOperation&lt;br/&gt;
as well. I can certainly draw it up and we can see which we like better.&lt;/p&gt;</comment>
                            <comment id="12635932" author="jimk" created="Wed, 1 Oct 2008 02:18:12 +0000"  >&lt;p&gt;This diagram incorporates all of Stack&apos;s suggestions to date.&lt;/p&gt;

&lt;p&gt;I think it is much cleaner, but it is up to the community to decide&lt;/p&gt;</comment>
                            <comment id="12635934" author="jimk" created="Wed, 1 Oct 2008 02:32:21 +0000"  >&lt;p&gt;In the latest proposal, proposal2.jpg, note that DeleteOperation and GetOperation rely on static methods to properly&lt;br/&gt;
construct the objects, and that the constructors (except for the default constructor) are private. (in the superclasses,&lt;br/&gt;
they are protected).&lt;/p&gt;

&lt;p&gt;By forcing clients to use these static methods, we ensure that the objects are constructed correctly. RowUpdate&lt;br/&gt;
has been greatly simplified by removing a lot of overloads.&lt;/p&gt;

&lt;p&gt;In HTable, there are basically two operations: get and commit.&lt;/p&gt;

&lt;p&gt;Scanners have still not been addressed yet.&lt;/p&gt;

&lt;p&gt;This proposal, the latest exchanges between Stack and myself have been addressed.&lt;/p&gt;

</comment>
                            <comment id="12636114" author="stack" created="Wed, 1 Oct 2008 18:14:36 +0000"  >&lt;p&gt;Big improvement I&apos;d say:&lt;/p&gt;

&lt;p&gt;I suppose commit should be named &apos;update&apos; in HTable to go with names of the new classes?&lt;/p&gt;

&lt;p&gt;RowUpdate should be called UpdateOperation to match GetOperation?&lt;/p&gt;

&lt;p&gt;Then, I&apos;d suggest that &apos;DeleteOperation&apos; become &apos;Delete&apos; and &apos;UpdateOperation&apos; become &apos;Update&apos; since they inherit form &apos;AbstractUpdate&apos; rather than from &apos;RowOperation&apos;.  Will keep confusion down.&lt;/p&gt;

&lt;p&gt;Would suggest removing all of the column/value methods from RowOperation derivatives (Should there be a Get to go with the Delete and Update above)?&lt;/p&gt;

&lt;p&gt;Unrelated, isTableEnabled should be in HBaseAdmin rather than here in HTable?&lt;/p&gt;

&lt;p&gt;These diagrams have set me thinking we can make things even more straight-forward if we break out a new class in which we describe the area  &amp;#8211; or &apos;sweep&apos;/&apos;reach&apos;/&apos;scope&apos; &amp;#8211; an operation is to effect.  Let me post a little drawing of what I&apos;m thinking.&lt;/p&gt;</comment>
                            <comment id="12636156" author="stack" created="Wed, 1 Oct 2008 20:38:17 +0000"  >&lt;p&gt;Sketch of proposal derived from previous work that adds new class to encapsulate specification of table area or &apos;range&apos; the Get or Delete operation applies to.  Does not include HTable.  HTable would have three new methods rather than two: get, delete, and put (Proposal suggests that we treat puts and deletes against a row distinctly to avoid conflict and in the name of simplification).&lt;/p&gt;</comment>
                            <comment id="12636162" author="jimk" created="Wed, 1 Oct 2008 20:48:55 +0000"  >&lt;p&gt;+1 on Stack&apos;s proposal&lt;/p&gt;</comment>
                            <comment id="12636313" author="dogacan" created="Thu, 2 Oct 2008 09:27:06 +0000"  >&lt;p&gt;Michael Stack&apos;s proposal looks excellent (+1 from me) just one minor thing: Instead of having a List&amp;lt;Scope&amp;gt; (and Scope including columns) maybe just pass Get a Map of &amp;lt;column, Scope&amp;gt; pairs. I guess, it is possible that you build up scopes on different methods so one may accidentally add two scopes for one column. With a map, it may be easier to keep track of.... &lt;/p&gt;</comment>
                            <comment id="12636414" author="stack" created="Thu, 2 Oct 2008 18:11:39 +0000"  >&lt;p&gt;Thinking on it, the &apos;Do&#287;acan G&#252;ney - 02/Oct/08 02:27 AM&apos; suggestion looks like an improvement.  We&apos;d just move column/family specification out of Scope and have it supplied instead as Map key (Map should probably be Sorted?  An HbaseMapWritable?).  Here is one reason why we might NOT do this:&lt;/p&gt;

&lt;p&gt;Clients might want to specify multiple scopes against a single column:  Imagine an application that adds hundreds of updates to a column each day.  Client then wants to query for every entry made at 12:00 over the last week or every hour over last day.&lt;/p&gt;

&lt;p&gt;A &apos;workaround&apos; would be to batch a set of Gets with an entry for every update wanted.&lt;/p&gt;

&lt;p&gt;Another objection I was going to make but having thought about it, I&apos;ve not raised it since it verges on the &apos;silly&apos; relates to the Scanner API.   Getting a scanner using a Scope that does not include column/family name would make it impossible specifying a scanner that took multiple columns and for each its own column Scope.  Do we want to support this?  If not, the new API would allow a single Scope across all columns.&lt;/p&gt;

&lt;p&gt;On the one hand the Do&#287;acan suggestion makes Get/Delete look like Put in that they too take maps keyed by columns.  Thats good.&lt;/p&gt;

&lt;p&gt;On other hand, we limit the perverse things a Client might want to do all in the one row Get/Delete context.&lt;/p&gt;

&lt;p&gt;I&apos;m +1 on the Do&#287;acan suggestion because it reduces complexity (I do not want to be in a position where we are debugging a scan across 100 columns each with 100 Scopes and a user &apos;thinks&apos; its not doing the right thing).&lt;/p&gt;</comment>
                            <comment id="12636417" author="stack" created="Thu, 2 Oct 2008 18:16:23 +0000"  >&lt;p&gt;Should RowOperation or Operation be an Interface since as an abstract class it provides near zero functionality?  If so, Interface would have a getRow and getRockLock and that&apos;d be it?  If the Do&#287;acan suggestion so Get and Delete take Maps, maybe Get/Delete/Put implement a (read-only) SortedMap delegating invocations through to the passed HbaseMapWritable instance &amp;#8211; so folks can interrogate to see whats in them using Map methods?&lt;/p&gt;</comment>
                            <comment id="12636419" author="jimk" created="Thu, 2 Oct 2008 18:25:49 +0000"  >&lt;p&gt;If Operation is an Interface, where are you going to store the row key and row lock? In Get/Put/Delete?&lt;/p&gt;

&lt;p&gt;I hate duplication of code in general, but getting rid of data members and methods that are accessed virtually in the&lt;br/&gt;
current model might perform better.&lt;/p&gt;</comment>
                            <comment id="12636435" author="dogacan" created="Thu, 2 Oct 2008 19:25:10 +0000"  >&lt;blockquote&gt;&lt;p&gt;Another objection I was going to make but having thought about it, I&apos;ve not raised it since it verges on the &apos;silly&apos; relates to the Scanner API. Getting a scanner using a Scope that does not include column/family name would make it impossible specifying a scanner that took multiple columns and for each its own column Scope. Do we want to support this? If not, the new API would allow a single Scope across all columns.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I am not sure I follow you here. Scanners can just have two constructors. One would just get a scope (meaning that this scope is valid for all columns) and the other would get (again) a Map of column, scope pairs. Or is there something I am missing here?&lt;/p&gt;</comment>
                            <comment id="12636442" author="stack" created="Thu, 2 Oct 2008 19:47:01 +0000"  >&lt;p&gt;No.  I was thinking about this wrong fixated on current HTable getScanners API.  If I adopt your suggestion, the HTable API would change so column names would be specified in this new Map of columns to Scopes.&lt;/p&gt;

&lt;p&gt;One thought is that we should probably check for case where Map includes a Scope for a column and for its enclosing family and throw an exception if a Client attempts such a specification?&lt;/p&gt;</comment>
                            <comment id="12636744" author="jdcryans" created="Fri, 3 Oct 2008 21:16:33 +0000"  >&lt;p&gt;Attached a patch that has the basic new classes of the new API. I merged it all in AbstractOperation. Please comment.&lt;/p&gt;</comment>
                            <comment id="12636750" author="stack" created="Fri, 3 Oct 2008 21:39:31 +0000"  >&lt;p&gt;Looks excellent to me.  Would suggest renaming AbstractOperation as Operation.  Otherwise, go for it.&lt;/p&gt;</comment>
                            <comment id="12637583" author="jdcryans" created="Tue, 7 Oct 2008 18:17:41 +0000"  >&lt;p&gt;I have some issues with current design :&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;My opinion is that when upgrading to 0.19.0 people will find it strange that when using a simple get() for a single cell they would now have to handle a SortedMap&lt;/li&gt;
	&lt;li&gt;Also, a SortedMap is not as friendly as something called &quot;RowResult&quot;. IMO the 0.1 API was hard to use, 0.2 was way better and this would be like getting back to 0.1. This gets uglier when we will be batching gets (returning a SortedMap of SortedMaps?)&lt;/li&gt;
	&lt;li&gt;Regards HRS.get(), should we drop it since we merge get and getRow?&lt;/li&gt;
	&lt;li&gt;How do we get a whole row a latest timestamp? Stack wrote that we should pass a null list of Scopes but with the map thing it doesn&apos;t make much sense... Or do we fix it server-side when we see no scope?&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12637622" author="jdcryans" created="Tue, 7 Oct 2008 19:45:30 +0000"  >&lt;p&gt;I&apos;m really not happy where this is going... What would normally take a single line now requires many object instantiations and I have to manage the single Cell get all over the place. The patch I attached is not complete and should be used to see current proposal usage.&lt;/p&gt;</comment>
                            <comment id="12637675" author="dogacan" created="Tue, 7 Oct 2008 22:01:11 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m really not happy where this is going... What would normally take a single line now requires many object instantiations and I have to manage the single Cell get all over the place. The patch I attached is not complete and should be used to see current proposal usage. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well maybe a way of dealing with it can be hiding scopes and HbaseMapWritable-s from users as much as possible. Something like:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Get get = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Get(row);
get.setTimestamp(col1, timestamp1);
get.setTimestamp(col2, timestamp2);
get.setVersions(col2, numVersions);

......

get.setAllTimestamps(timestamp); &lt;span class=&quot;code-comment&quot;&gt;// &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; all columns
&lt;/span&gt;
......

&lt;span class=&quot;code-comment&quot;&gt;// maybe also add a constructor overload similar to current API
&lt;/span&gt;Get get = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Get(row, cols /* array of &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; arrays */, timestamp);

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12637921" author="jdcryans" created="Wed, 8 Oct 2008 13:23:38 +0000"  >&lt;p&gt;Dogacan, what you propose is in many ways like the first proposals.&lt;/p&gt;

&lt;p&gt;I&apos;m beginning to think that maybe we should push this issue in 0.20.0 and finish &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-748&quot; title=&quot;Add an efficient way to batch update many rows&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-748&quot;&gt;&lt;del&gt;HBASE-748&lt;/del&gt;&lt;/a&gt; like it is currently (using BatchUpdate). Is Hadoop&apos;s 0.19.0 soon to be released?&lt;/p&gt;</comment>
                            <comment id="12637986" author="jimk" created="Wed, 8 Oct 2008 17:01:05 +0000"  >&lt;p&gt;@Jean-Daniel&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Also, a SortedMap is not as friendly as something called &quot;RowResult&quot;. IMO the 0.1 API was hard to use, 0.2 was way better and this would be like getting back to 0.1. This gets uglier when we will be batching gets (returning a SortedMap of SortedMaps?)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;RowResult IsA SortedMap. For gets, it is a more appropriate return value if gets are restricted to a single row.&lt;br/&gt;
For multi-row gets, a List&amp;lt;RowResult&amp;gt; would be more user friendly.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Regards HRS.get(), should we drop it since we merge get and getRow?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We cannot drop this until we remove the old API, one release after we deprecate it in favor of the new API.&lt;/p&gt;

</comment>
                            <comment id="12638045" author="stack" created="Wed, 8 Oct 2008 19:42:29 +0000"  >&lt;p&gt;I took at the new patch (thanks for exercising the proposal in code J-D).  Here&apos;s some suggestions.  In general, would suggest that HbaseMapWritable with all of its generics not be exposed to the user as Dogacan suggests, except we don&apos;t do getter/setters by the million on Get as he suggests because IMO that defeats point of introducing Scope object.  HBW should be wrapped.&lt;/p&gt;

&lt;p&gt;Is Specification a better name than Scope?  The HbaseMapWritable making code would be replaced by new wrapper class called Specifications where Specifications is a map of column names to Specifications (or Scope and Scopes) so that for example:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-        Cell[] cells = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.metaTable.get(Bytes.toBytes(regionName),
-            columnKey, ALL_VERSIONS);
-        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (cells != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
-          &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Cell cell : cells) {
+        HbaseMapWritable&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], Scope&amp;gt; col = 
+          &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HbaseMapWritable&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], Scope&amp;gt;();
+        Scope scope = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Scope();
+        col.put(columnKey, scope);
+        Get get = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Get(Bytes.toBytes(regionName), col);
+        RowResult rr = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.metaTable.getRow(get);
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rr != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+          &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Cell cell : rr.values()) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;became&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-        Cell[] cells = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.metaTable.get(Bytes.toBytes(regionName),
-            columnKey, ALL_VERSIONS);
-        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (cells != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
-          &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Cell cell : cells) {
+        Specifications col = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Specifications();
+        col.put(columnKey, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Specification());
+        Get get = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Get(Bytes.toBytes(regionName), col);
+        RowResult rr = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.metaTable.getRow(get);
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rr != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+          &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (Cell cell : rr.values()) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Specifications could have a constructor that took key/Specification for case where only one entry.  Then you could do:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Get get = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Get(Bytes.toBytes(regionName), &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Specifications(columnKey, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Specification());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-    Cell cell = t.get(row, HConstants.COL_REGIONINFO);
-    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (cell == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+    Scope scope = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Scope();
+    HbaseMapWritable&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], Scope&amp;gt; hmw = 
+      &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HbaseMapWritable&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], Scope&amp;gt;();
+    hmw.put(HConstants.COL_REGIONINFO, scope);
+    Get get = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Get(row,hmw);
+    RowResult rr = t.getRow(get);
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rr == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;becomes&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-    Cell cell = t.get(row, HConstants.COL_REGIONINFO);
-    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (cell == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+    Specifications specs = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Specifications(HConstants.COL_REGIONINFO, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Scope());
+    Get get = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Get(row, specs);
+    RowResult rr = t.getRow(get);
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (rr == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the above pattern where Scope is empty of all but the defaults, then why not a constructor on Get that takes just a column name?&lt;/p&gt;

&lt;p&gt;Or&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    Scope scope = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Scope();
+    scope.setTimestamp(timestamp);
+    scope.setVersions(numVersions);
+    HbaseMapWritable&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], Scope&amp;gt; hmw = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HbaseMapWritable&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[], Scope&amp;gt;();
+    hmw.put(column, scope);
+    Get get = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Get(row, -1, hmw); 
+    Collection&amp;lt;Cell&amp;gt; cells = getRow(get).values();
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; cells.toArray(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Cell[cells.size()]);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;becomes&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    Specification spec = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Specification();
+    spec.setTimestamp(timestamp);
+    spec.setVersions(numVersions);
+    Specifications hmw = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Specifications(column, spec);
+    Get get = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Get(row, -1, hmw); 
+    Collection&amp;lt;Cell&amp;gt; cells = getRow(get).values();
+    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; cells.toArray(&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Cell[cells.size()]);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On single-cell get, lets add to Get a getCell that returns the old fashioned byte []?&lt;/p&gt;</comment>
                            <comment id="12638092" author="stack" created="Wed, 8 Oct 2008 21:16:36 +0000"  >&lt;p&gt;From IRC with Do&#287;acan:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[13:10]	&amp;lt;dogacan&amp;gt;	st^ack: maybe I am just being thick, but I don&apos;t understand why exposing Specification or Scope is useful than just doing get.setTimestamp(col, timestamp) ?
[13:22]	&amp;lt;st^ack&amp;gt;	I thought point of latest proposal was extraction of the Specification/Scope object.
[13:23]	&amp;lt;st^ack&amp;gt;	When you add the getters/setters back to Get and Delete (but not to Put because it doesn&apos;t have Specification/Scope), then the advantage of the last proposal goes away?
[13:25]	&amp;lt;st^ack&amp;gt;	If the setting is done against Specification, then Get/Delete/Put can be immutable and all treated the same.
[13:51]	&amp;lt;dogacan&amp;gt;	hmm
[13:51]	&amp;lt;dogacan&amp;gt;	I see
[13:52]	&amp;lt;dogacan&amp;gt;	i forgot about trying to make get/delete/put as similar as possible :)
[13:52]	&amp;lt;dogacan&amp;gt;	let me think about it, thanks
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12641095" author="erikholstad@gmail.com" created="Mon, 20 Oct 2008 18:18:42 +0000"  >&lt;p&gt;I think it looks good, and that it is going the right way.&lt;br/&gt;
I do have one request though, would be nice to have a put constructor &lt;br/&gt;
that takes the return format from the get as an argument, so you don&apos;t&lt;br/&gt;
have to change them yourself.&lt;/p&gt;

&lt;p&gt;Erik&lt;/p&gt;</comment>
                            <comment id="12641461" author="jdcryans" created="Tue, 21 Oct 2008 18:01:12 +0000"  >&lt;p&gt;Pushing this into 0.20.0&lt;/p&gt;</comment>
                            <comment id="12641625" author="jimk" created="Tue, 21 Oct 2008 21:56:55 +0000"  >&lt;p&gt;Moving back into 0.19.0 &lt;/p&gt;

&lt;p&gt;If it isn&apos;t done in time, then we can slip it to 0.20.0&lt;/p&gt;</comment>
                            <comment id="12649871" author="stack" created="Sat, 22 Nov 2008 01:02:02 +0000"  >&lt;p&gt;Playing with j-d&apos;s patch (no progress as yet. just putting here so can get to this work from home)&lt;/p&gt;</comment>
                            <comment id="12650484" author="stack" created="Tue, 25 Nov 2008 07:19:36 +0000"  >&lt;p&gt;Still an idea &amp;#8211; not ready for review yet.&lt;/p&gt;</comment>
                            <comment id="12650623" author="jimk" created="Tue, 25 Nov 2008 16:53:01 +0000"  >&lt;p&gt;Is there a new diagram for this patch or hasn&apos;t it changed that much?&lt;/p&gt;</comment>
                            <comment id="12650740" author="stack" created="Tue, 25 Nov 2008 21:26:08 +0000"  >&lt;p&gt;New proposal.  All Row Operations subclass HbaseMapWritable via new intermediary classes, ColumnCellMap and ColumnCellBoundsMap.  New CellBounds class is used to describe the boundary around a set of Cells effected by a Get or Delete.  Lock has been moved out of Get, Delete and Put and instead made a parameter on commit (Could move lock back in if wanted).&lt;/p&gt;

&lt;p&gt;Other notables:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    Get g = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Get(row);
    g.put(column, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CellBounds(timestamp, numVersions));
    &lt;span class=&quot;code-comment&quot;&gt;// or
&lt;/span&gt;    CellBounds boundary = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; CellBounds(ts);
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (column: columns) {
      g.put(column, boundary);
    }
    &lt;span class=&quot;code-comment&quot;&gt;// then commit.
&lt;/span&gt;    Collection&amp;lt;Cell&amp;gt; cells = getRow(g).values();
    &lt;span class=&quot;code-comment&quot;&gt;// Delete works same as above.
&lt;/span&gt;
    &lt;span class=&quot;code-comment&quot;&gt;// For Put.
&lt;/span&gt;    Put p = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Put(row);
    &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; (column: columns) {
      p.put(column, &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Cell(somevalue));
    }
    table.commit(p);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; RowResult could subclass Put if wanted (or vice-versa).  Same for Get and Delete.&lt;/p&gt;

&lt;p&gt;Scanners need to be rewired to use CellBounds.  Haven&apos;t done that yet.&lt;/p&gt;</comment>
                            <comment id="12650753" author="stack" created="Tue, 25 Nov 2008 21:46:59 +0000"  >&lt;p&gt;Here is a patch that does not compile with instances of the diagrammed classes.  Some parts of HTable use the new code.  I&apos;m posting it to help with evaluation of this proposal.&lt;/p&gt;</comment>
                            <comment id="12652159" author="jdcryans" created="Mon, 1 Dec 2008 21:19:32 +0000"  >&lt;p&gt;+1 on current proposal. When changing the batching methods, it would be good to specify that the row lock will apply to all rows.&lt;/p&gt;</comment>
                            <comment id="12652198" author="jimk" created="Mon, 1 Dec 2008 23:09:47 +0000"  >&lt;p&gt;A couple of comments:&lt;/p&gt;

&lt;p&gt;ColumnCellMap and ColumnCellBoundsMap should be abstract so that someone doesn&apos;t instantiate one and try to have &lt;br/&gt;
HBase figure out what the operation is.&lt;/p&gt;

&lt;p&gt;A row lock cannot apply to all rows. If they did, when batching, you&apos;d have to chase down every row in order to take a lock out&lt;br/&gt;
on it. row locks apply to a single row only. This means that either Get, Put and Delete must either overload the constructors&lt;br/&gt;
(-1 on that) or implement a setter which allows the client application to take out a lock on a row and then apply it to multiple&lt;br/&gt;
operations.&lt;/p&gt;

&lt;p&gt;Could ColumnCellBoundsMap inherit from ColumnCellMap?&lt;/p&gt;

&lt;p&gt;RowResult is not a RowOperation, but it is a HBaseMapWritable.&lt;/p&gt;

&lt;p&gt;Otherwise, +1 once I got my head around what the UML was saying, I think that it will make for an elegant API.&lt;/p&gt;</comment>
                            <comment id="12652200" author="stack" created="Mon, 1 Dec 2008 23:29:05 +0000"  >&lt;p&gt;Thanks J-D and Jim for feedback.&lt;/p&gt;

&lt;p&gt;Will add back in row locks to operations.  Will look at doing as a get/set but would prefer passing in constructor since then the get/puts are just column-orientated rather than column-orientated AND rowlocks.&lt;/p&gt;

&lt;p&gt;CCBM could inherit from CCM but would gain little that I see and could confuse.  Will pass on that for now.&lt;/p&gt;

&lt;p&gt;Otherwise OK on other comments.&lt;/p&gt;</comment>
                            <comment id="12652299" author="stack" created="Tue, 2 Dec 2008 07:04:35 +0000"  >&lt;p&gt;Some progress.  Made RowOperations comparable so can see if they are of same Row.  Can&apos;t use RowResult because need a Map of column to &apos;Cells&apos; rather than column to &apos;Cell&apos; as is RowResult so we can return multiple versions of a cell in the one fetch.  Prune Iterable from Cell (internally could do more than one version of itself &amp;#8211; a weird facility we no longer need it seems).&lt;/p&gt;</comment>
                            <comment id="12652418" author="jimk" created="Tue, 2 Dec 2008 16:12:50 +0000"  >&lt;p&gt;The reason behind making Cell Iterable was to support multiple versions.&lt;br/&gt;
That&apos;s why we have:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[][] values
&lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt;[] timestamps
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;so we didn&apos;t have to have a Map&amp;lt;byte[], Map&amp;lt;byte[], Cell&amp;gt;&amp;gt;&lt;/p&gt;</comment>
                            <comment id="12652423" author="jimk" created="Tue, 2 Dec 2008 16:48:47 +0000"  >&lt;p&gt;Thinking on this more (which I should have done before making the&lt;br/&gt;
previous comment), it would be cleaner to remove the Iterable and multi-&lt;br/&gt;
value multi-timestamp stuff from Cell (which was done so that the&lt;br/&gt;
multi-version stuff could work within the confines of the current API).&lt;/p&gt;

&lt;p&gt;Instead, my suggestion would be to make RowResult a Map&amp;lt;byte[], Cell[]&amp;gt;&lt;br/&gt;
This means that a RowResult is not a HBaseMapWritable.&lt;/p&gt;

&lt;p&gt;Also Get and Delete should HaveA CellBoundsMap instead of inheriting&lt;br/&gt;
the HaveA relation from ColumnCellBoundsMap.&lt;/p&gt;

&lt;p&gt;Since only Get returns a RowResult, how about having two methods instead&lt;br/&gt;
of running them all through commit:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; RowResult get(Get)
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void commit(UpdateOperation)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;where an update operation is either a Put or a Delete?&lt;/p&gt;

</comment>
                            <comment id="12652439" author="stack" created="Tue, 2 Dec 2008 17:52:21 +0000"  >&lt;p&gt;Patch already purged Cell of any notion of Cells.&lt;/p&gt;

&lt;p&gt;I&apos;ve made a new Cells class.  Can&apos;t change RowResult because it&apos;ll break current API.  Made new Result.  It has Cells.&lt;/p&gt;

&lt;p&gt;Why should Get and Delete haveA CBM instead of inheriting?  It makes things messier.&lt;/p&gt;

&lt;p&gt;Let me play with your last suggestion.  Looks good.&lt;/p&gt;</comment>
                            <comment id="12652531" author="stack" created="Tue, 2 Dec 2008 22:00:47 +0000"  >&lt;p&gt;880proposal5-v2.patch is state of work when this issue was put-aside because this issue was moved out of 0.19.0.&lt;/p&gt;</comment>
                            <comment id="12652552" author="stack" created="Tue, 2 Dec 2008 22:28:09 +0000"  >&lt;p&gt;Diagram that goes along with last patch.&lt;/p&gt;</comment>
                            <comment id="12652568" author="stack" created="Tue, 2 Dec 2008 22:45:04 +0000"  >&lt;p&gt;Moving to 0.20.0.  Too much work to complete in time for 0.19.0 release.  Estimate 2 weeks of work, 10d.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
20:19 &amp;lt; St^Ack&amp;gt; ...&lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; API implies &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; functionality -- don&apos;t know how to have it fail gracefully without it
20:19 &amp;lt; St^Ack&amp;gt; If we&apos;re to add in deprecated, then things like shell and MR need to be moved to &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; stuff
20:20 &amp;lt; St^Ack&amp;gt; Need to handle multiple Cells rather than the presumed one everywhere.  Need to &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; unit tests &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; API.
20:20 &amp;lt; St^Ack&amp;gt; Need to retrofit gets, deletes, puts, then their family versions, all of a row... then &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; same &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; scanners.
20:20 &amp;lt; St^Ack&amp;gt; Make sure works with filters
...
20:21 &amp;lt; St^Ack&amp;gt; Then there is thrift and REST; could punt on these I suppose leaving them with deprecated API
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12669127" author="erikholstad@gmail.com" created="Sat, 31 Jan 2009 02:21:21 +0000"  >&lt;p&gt;We have a use case where we for one column family have a lot of columns like 10000. They are time sorted on the column name&lt;br/&gt;
where the timestamp is one part of the column qualifier, so that you get the latest actions first. So if we are using getRow() to get&lt;br/&gt;
a row but are only planning to use let&apos;s say the first 100 columns in the family we still need to fetch the whole row from the server&lt;br/&gt;
and then take care of the &quot;filtering&quot; client side. Would be useful for us to have something like a getRow() with a filter option so&lt;br/&gt;
that the filtering can take place server side instead, to speed things up, maybe something like what exists for scanners a the moment.&lt;/p&gt;</comment>
                            <comment id="12669131" author="apurtell" created="Sat, 31 Jan 2009 02:31:36 +0000"  >&lt;p&gt;Hi Erik,&lt;/p&gt;

&lt;p&gt;I think there are two issues with your use case, right? The first is you need some filters that do not currently exist that provide the topmost column filtering behavior that you want. The second issue is the modification to getRow() so it behaves kind of like a column scanner. If there are suitable filters available would it would be possible to use the scanner interface with a combination filter such as:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
(and
    (allow-n-rows 1)
    (and
         (match-column &lt;span class=&quot;code-quote&quot;&gt;&quot;foo:&quot;&lt;/span&gt;)
         (allow-n-columns 100)
    )
)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to do what you want?&lt;/p&gt;</comment>
                            <comment id="12669212" author="erikholstad@gmail.com" created="Sat, 31 Jan 2009 19:11:23 +0000"  >&lt;p&gt;Hi Andrew!&lt;br/&gt;
Yes there are 2 issues like you said and we, me and Jonathan, looked at the code for the filters in the scanner&lt;br/&gt;
and it seems like the filter that we need could be constructed by using a state in that filter, for getRow(). If the same&lt;br/&gt;
filter is to be used for the scanner the last row has to be kept in the filter too, so that it is only checked ones.&lt;br/&gt;
But it seems like filter issues can be solved on our side as long as we have the getRow() that takes a filter.&lt;/p&gt;</comment>
                            <comment id="12672136" author="udanax" created="Tue, 10 Feb 2009 02:54:46 +0000"  >&lt;p&gt;Hi,&lt;/p&gt;

&lt;p&gt;Can it be applied to 0.19.1?&lt;/p&gt;</comment>
                            <comment id="12672139" author="apurtell" created="Tue, 10 Feb 2009 03:10:48 +0000"  >&lt;p&gt;Edward, what should be applied to 0.19.1? The whole issue? Just the getRow() with filter that Erik talks about? &lt;/p&gt;</comment>
                            <comment id="12681075" author="erikholstad@gmail.com" created="Wed, 11 Mar 2009 22:45:43 +0000"  >&lt;p&gt;Added a new proposal for the new 880 based on the new hfile and thoughts around the new server implementation.&lt;/p&gt;</comment>
                            <comment id="12681398" author="erikholstad@gmail.com" created="Thu, 12 Mar 2009 17:11:08 +0000"  >&lt;p&gt;Made some small changes to make it more clear what we are going for. The biggest change is the regrouping of the getQueries to better reflect the way they are going to be implemented.&lt;/p&gt;</comment>
                            <comment id="12681402" author="erikholstad@gmail.com" created="Thu, 12 Mar 2009 17:18:55 +0000"  >&lt;p&gt;The changes proposed for 880 might seem big or even radical to some people &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
But it is basically 2 big thing that we want to change with this new Api.&lt;/p&gt;

&lt;p&gt;1.The introduction of a new Family class. This will help the user understand&lt;br/&gt;
that there is a difference when asking for more columns in the same family and&lt;br/&gt;
introducing a new family to search. This is important to help the user to&lt;br/&gt;
realize that families are stored together and that is therefore more effective&lt;br/&gt;
to ask for columns from the same family than from different.&lt;/p&gt;

&lt;p&gt;2. Dividing the get calls into different categories depending on how they will&lt;br/&gt;
be executed. This change has 2 benefits, one is the same as in the first change,&lt;br/&gt;
helping the user to understand what queries that are treated the same and which&lt;br/&gt;
queries that are effective and which ones that are not. The second benefit is&lt;br/&gt;
for the people that will manage and write the code. Since the queries are split&lt;br/&gt;
into groups that are to be implemented in very similar ways it is going to be&lt;br/&gt;
easier to make optimizations and reason about the code for each query group,&lt;br/&gt;
which will lead to better and faster code.&lt;/p&gt;

&lt;p&gt;Right now we propose 4 different get groups. They are grouped together  depending&lt;br/&gt;
on their early out possibilities, so that each group can early out in the same&lt;br/&gt;
way. this is very convenient when wanting to add new get calls, they can be put&lt;br/&gt;
into any of the existing groups if the match the early out pattern or a new&lt;br/&gt;
group can be created. &lt;/p&gt;

&lt;p&gt;The current groups are:&lt;br/&gt;
GetColumns, early out as soon as all the columns are found&lt;/p&gt;

&lt;p&gt;GetFamilies, can never be earlied out since you don&apos;t know how many columns&lt;br/&gt;
there are in a family.&lt;/p&gt;

&lt;p&gt;GetRange, can be earlied out as soon as the storefile with ts&amp;lt; than the one&lt;br/&gt;
asked for is finished&lt;/p&gt;

&lt;p&gt;GetTop, can be earlied out as soon as the maxNr is reached&lt;/p&gt;</comment>
                            <comment id="12681420" author="erikholstad@gmail.com" created="Thu, 12 Mar 2009 18:03:05 +0000"  >&lt;p&gt;Fixed some more misses in the code compared the the layout up top.&lt;/p&gt;</comment>
                            <comment id="12681925" author="jdcryans" created="Fri, 13 Mar 2009 22:47:34 +0000"  >&lt;p&gt;Seems good Erik, would love to see a partial implementation.&lt;/p&gt;</comment>
                            <comment id="12682204" author="streamy" created="Mon, 16 Mar 2009 03:05:05 +0000"  >&lt;p&gt;We&apos;re trying to build at least some sense of consensus here before moving forward full steam.&lt;/p&gt;

&lt;p&gt;ken gave a semi-blessing... stack is cool as long as we explain it, code it and test it... so with jd&apos;s semi-blessing, i&apos;d say we&apos;re ready to move towards a patch.&lt;/p&gt;

&lt;p&gt;A complete rework of HRegion is currently underway as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1234&quot; title=&quot;Change HBase StoreKey format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1234&quot;&gt;&lt;del&gt;HBASE-1234&lt;/del&gt;&lt;/a&gt;, so the server-side part of this will have to remain psuedo-code until the switch to KeyValue is complete.&lt;/p&gt;

&lt;p&gt;We have a good bit of the client side done, will get a first patch together this week.&lt;/p&gt;</comment>
                            <comment id="12703873" author="streamy" created="Tue, 28 Apr 2009 23:21:18 +0000"  >&lt;p&gt;Based on discussion on IRC today...&lt;/p&gt;</comment>
                            <comment id="12703895" author="streamy" created="Wed, 29 Apr 2009 00:07:46 +0000"  >&lt;p&gt;Updated per IRC discussion w/ stack and holstad&lt;/p&gt;</comment>
                            <comment id="12703915" author="streamy" created="Wed, 29 Apr 2009 00:36:09 +0000"  >&lt;p&gt;More updates.&lt;/p&gt;</comment>
                            <comment id="12703999" author="stack" created="Wed, 29 Apr 2009 05:53:44 +0000"  >&lt;p&gt;More comments on  &lt;a href=&quot;https://issues.apache.org/jira/secure/attachment/12406720/HBASE-880_Design_Doc_v3.pdf&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/secure/attachment/12406720/HBASE-880_Design_Doc_v3.pdf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Get, do we need addFamily and addColumn?  Should it be just add?&lt;/p&gt;

&lt;p&gt;I did an exercise where the verb used submitting Get, Delete, etc., was same for all but I only ever got unsatisfactory results so lets use method names of get, put, delete, and scan.  They each return different things anyways.  Might have to have batchPut, batchGet, and batchDelete, too, because returns may vary if for example we are going to return timestamps of when the Put happened.&lt;/p&gt;

&lt;p&gt;Should we even have a Get?  Just always Scan even if one row only?  Just a thought.&lt;/p&gt;

&lt;p&gt;Should we have a TimeRange?  Its only used in Get.  Just have a setTimestamp and then optional range or depth to the Get? (setTimestampRange?)&lt;/p&gt;

&lt;p&gt;Should deleteColumn in Delete be just delete?  Should we have a deleteFamily?  That&apos;d leave deleteColumns.  Do we need this?  Answer to below will help:&lt;/p&gt;

&lt;p&gt;How do deletes work?  (I&apos;ve seen the PDFs and its not plain to me).&lt;/p&gt;

&lt;p&gt;If I do Delete.deleteColumn w/o a timestamp, whats this do?  Does it delete most recent cell on the column only?  Or everything behind it in time? (This would be like a deleteColumns).  If former, how does it work?   First it must find the most recent so it can find the timestamp?&lt;/p&gt;

&lt;p&gt;If I pass a timestamp, what does it delete?  Only the cell at that timestamp if it exists?  What if nothing exists there?  Nothing happens?&lt;/p&gt;

&lt;p&gt;(Above is an old discussion rehashed)&lt;/p&gt;</comment>
                            <comment id="12704020" author="erikholstad@gmail.com" created="Wed, 29 Apr 2009 07:33:29 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
+ I think we should have a Get, haven&apos;t looked too closely at the scanner code, but I assume that there is a scanner setup cost that we don&apos;t want to pay for random reads.&lt;/p&gt;

&lt;p&gt;+ When it comes to TimeRange I don&apos;t really care if we have it or not, we might as well have an extra time in the Get Object. &lt;/p&gt;

&lt;p&gt;+ The way I look at deletes is from the starting point that we added these delete types, a way of making deletes as easy as possible. And the reason we have to types is so we can have as much information in one single KeyValue as possible. And since they are a part of a KeyValue it leaves us with one timestamp for each type. So the way we have reasoned about it is that all the deletes except delete removes all the values that match after the specified timestamp, if no timestamp is sepcified that is set to now. For the simple delete you specify the timestamp you want to delete and it apllies to that timestamp only.&lt;br/&gt;
I think we should keep all the delete types that we currently have since it makes it easy for the client to delete things, even though deleteRow, which turns into a deleteFamily on the server side, and deleteFamily itself needs to be taken care in a special way, since they don&apos;t sort like the other entries. &lt;/p&gt;</comment>
                            <comment id="12704177" author="stack" created="Wed, 29 Apr 2009 16:12:59 +0000"  >&lt;p&gt;@Holstad&lt;/p&gt;

&lt;p&gt;Ok on the Get ... was just an idea.&lt;/p&gt;

&lt;p&gt;I&apos;d say lets drop TimeRange.&lt;/p&gt;

&lt;p&gt;On Deletes, all is good to me except, seems like a &apos;delete&apos; at now will have no effect, right?  You have to know the timestamp to delete.  Maybe we should handle this case special &amp;#8211; go find the latest and add the delete with that timestamp?&lt;/p&gt;

&lt;p&gt;Other thoughts, we can&apos;t have HTable.get that takes a Get object because there already is a get in HTable.  I think we need to start up a new class to hold all of the new stuff.  What shall we call it?  HTable2?  We&apos;ll deprecate HTable in 0.20.0.&lt;/p&gt;
</comment>
                            <comment id="12704190" author="erikholstad@gmail.com" created="Wed, 29 Apr 2009 16:33:06 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
+1 on dropping TimeRange.&lt;/p&gt;

&lt;p&gt;Yes, if you do a delete with a timestamp that doesn&apos;t exist in HBase it will have no effect at all.  &lt;br/&gt;
I don&apos;t really like to go look for things to delete, cause that means that you have to do a get to do a delete and to me that kind of defeats the purpose of having the new storage format.&lt;br/&gt;
In the new implementation of memcache if you do a delete with a specified timestamp and that put is in there, I was thinking that you would remove the put and the delete since the delete has already been used and doesn&apos;t do any good any more. So what I think is better if want to support deletion of the latest version without specifying the timestamp is to lift this logic into the deleteCheck of the server. Maybe that is what you meant?&lt;/p&gt;

</comment>
                            <comment id="12704199" author="stack" created="Wed, 29 Apr 2009 16:40:37 +0000"  >&lt;p&gt;So you are saying if we do a delete at now, and there is no entry in the memcache, we just don&apos;t add it?&lt;/p&gt;

&lt;p&gt;Our change in how delete works where we move away from first getting all the entries the delete covers so we can write individual deletes per existing cell will require a migration of all data.  I&apos;m not opposed to that.  Just noting that it will be required (The way we do deletes currently just doesn&apos;t scale &amp;#8211; has to change so I&apos;m w/ you Holstad when you say &quot;I don&apos;t really like to go look for things to delete...&quot;)&lt;/p&gt;</comment>
                            <comment id="12704210" author="stack" created="Wed, 29 Apr 2009 17:00:35 +0000"  >&lt;p&gt;.bq . Might have to have batchPut, batchGet, and batchDelete, too, because returns may vary if for example we are going to return timestamps of when the Put happened.&lt;/p&gt;

&lt;p&gt;I said the above.  Turns out my understanding regards overloading in java is incorrect &amp;#8211; you can have different returns as long as the signature varies.  This means we do not need the batch versions I talk of above.&lt;/p&gt;</comment>
                            <comment id="12704211" author="erikholstad@gmail.com" created="Wed, 29 Apr 2009 17:03:00 +0000"  >&lt;p&gt;No I&apos;m not saying that I&apos;m just saying that if the put entry for that matches that delete is in memcache we don&apos;t put the delete in there, if the put is not in memcache we put the delete in there for use in earlier storefiles.  But what I&apos; trying to say is that I think that it is ok to add some extra special code for the case of a delete with no timestamp in the server code since deletes are already handled in a special way.&lt;/p&gt;</comment>
                            <comment id="12704221" author="streamy" created="Wed, 29 Apr 2009 17:39:04 +0000"  >&lt;p&gt;Removed TimeRange, changed to maxStamp and minStamp.&lt;br/&gt;
Changed to HTable.get/put/delete(Get/Put/Delete)&lt;br/&gt;
Added Result.rowResult() returning RowResult&lt;/p&gt;</comment>
                            <comment id="12704738" author="streamy" created="Thu, 30 Apr 2009 18:29:17 +0000"  >&lt;p&gt;Latest version for developer meeting today 4/30.&lt;/p&gt;</comment>
                            <comment id="12704865" author="erikholstad@gmail.com" created="Fri, 1 May 2009 00:49:13 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
I have a question about the RESULT format, why is is that you want for it to implement List&amp;lt;KeyValue&amp;gt;?&lt;br/&gt;
The way I see it it would be easier to just pass it the KeyValue[] that we get from the server and put that&lt;br/&gt;
into the Constructor for RESULTS, like Result result = new Result(KeyValue[] kv).&lt;br/&gt;
What to you think about that? &lt;/p&gt;</comment>
                            <comment id="12704893" author="stack" created="Fri, 1 May 2009 04:50:17 +0000"  >&lt;p&gt;+1 on v5 of the API (allowing that its going to change a little during the implementation)&lt;/p&gt;

&lt;p&gt;@Holstad&lt;/p&gt;

&lt;p&gt;RowResult is a SortedMap.  You can do SortedMap kinda operations on it.  Java fellas don&apos;t even have to think when it comes to using it.&lt;/p&gt;

&lt;p&gt;Regards Result implementing List&amp;lt;KeyValue&amp;gt;, same as above only, more so in this case, in its guts, that is what it is.&lt;/p&gt;

&lt;p&gt;How its made, I don&apos;t care.  You can pass in List&amp;lt;KV&amp;gt; on construction or it should probably be a Writable since its going to make the trip across RPC.  &lt;/p&gt;</comment>
                            <comment id="12705026" author="erikholstad@gmail.com" created="Fri, 1 May 2009 15:44:33 +0000"  >&lt;p&gt;@Stack&lt;br/&gt;
Sounds really good, so we will have a .rowResult() method that can be called on the Result, and that would be generated when &lt;br/&gt;
someone asks for it. Will try to keep the protocol from the server to the client as low level as possible and just instantiate the Result,&lt;br/&gt;
on the client side, with that.&lt;/p&gt;</comment>
                            <comment id="12706310" author="streamy" created="Wed, 6 May 2009 06:03:52 +0000"  >&lt;p&gt;Patch coming at the end of the week.&lt;/p&gt;

&lt;p&gt;I have an early-cut of the javadoc available here:  &lt;a href=&quot;http://jgray.la/HBASE-880/javadoc/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jgray.la/HBASE-880/javadoc/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the (strictly client-side) code here: &lt;a href=&quot;http://jgray.la/HBASE-880/code/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jgray.la/HBASE-880/code/&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12706371" author="tim_s" created="Wed, 6 May 2009 10:50:54 +0000"  >&lt;p&gt;This is impressive. Seems very elegant.&lt;/p&gt;</comment>
                            <comment id="12706427" author="posix4e" created="Wed, 6 May 2009 13:36:51 +0000"  >&lt;p&gt;I approve!&lt;/p&gt;</comment>
                            <comment id="12707491" author="jimk" created="Fri, 8 May 2009 19:50:46 +0000"  >&lt;p&gt;If you drop time range, how would you get all the versions between two time stamps?&lt;/p&gt;

&lt;p&gt;e.g. all versions older than time; all versions newer than time, all versions between Monday and Friday&lt;/p&gt;</comment>
                            <comment id="12707504" author="jimk" created="Fri, 8 May 2009 20:06:22 +0000"  >&lt;p&gt;Never mind, I just found  maxStamp and minStamp (helps to read &lt;b&gt;all&lt;/b&gt;) the comments.&lt;/p&gt;</comment>
                            <comment id="12707515" author="streamy" created="Fri, 8 May 2009 20:31:00 +0000"  >&lt;p&gt;You got it Jim.  Currently I&apos;ve retained the TimeRange class, but it is hidden from the client.  It&apos;s very helpful server-side as a helper method container.&lt;/p&gt;</comment>
                            <comment id="12713074" author="streamy" created="Tue, 26 May 2009 16:07:14 +0000"  >&lt;p&gt;This issue was used for discussion. A new issue will be opened to turn these design documents into user documentation and package javadocs.&lt;/p&gt;

&lt;p&gt;Closing this issue as &quot;no longer valid&quot;. This issue is being resolved as part of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1234&quot; title=&quot;Change HBase StoreKey format&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1234&quot;&gt;&lt;del&gt;HBASE-1234&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1304&quot; title=&quot;New client server implementation of how gets and puts are handled. &quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1304&quot;&gt;&lt;del&gt;HBASE-1304&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="12713075" author="streamy" created="Tue, 26 May 2009 16:08:04 +0000"  >&lt;p&gt;Closing as invalid.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10032">
                    <name>Blocker</name>
                                            <outwardlinks description="blocks">
                                        <issuelink>
            <issuekey id="12385804">HBASE-33</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12409017">HBASE-1015</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12383017">HBASE-52</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12404107">HBASE-882</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12416456">HBASE-1249</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12400417">HBASE-748</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12404278">HBASE-883</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12395074" name="880.patch" size="74039" author="stack" created="Tue, 2 Dec 2008 07:04:35 +0000"/>
                            <attachment id="12394634" name="880proposal4plus-v2.patch" size="50690" author="stack" created="Tue, 25 Nov 2008 07:19:36 +0000"/>
                            <attachment id="12394470" name="880proposal4plus.patch" size="46375" author="stack" created="Sat, 22 Nov 2008 01:02:02 +0000"/>
                            <attachment id="12395133" name="880proposal5-v2.patch" size="71372" author="stack" created="Tue, 2 Dec 2008 22:00:46 +0000"/>
                            <attachment id="12395138" name="880proposal5-v2.png" size="131286" author="stack" created="Tue, 2 Dec 2008 22:28:09 +0000"/>
                            <attachment id="12394697" name="880proposal5.patch" size="53721" author="stack" created="Tue, 25 Nov 2008 21:46:59 +0000"/>
                            <attachment id="12394695" name="880proposal5.png" size="127990" author="stack" created="Tue, 25 Nov 2008 21:26:08 +0000"/>
                            <attachment id="12401981" name="HBASE-880-proposal6-v2.txt" size="5835" author="erikholstad@gmail.com" created="Wed, 11 Mar 2009 22:45:43 +0000"/>
                            <attachment id="12402064" name="HBASE-880-proposal6-v3.txt" size="6911" author="erikholstad@gmail.com" created="Thu, 12 Mar 2009 17:11:08 +0000"/>
                            <attachment id="12402070" name="HBASE-880-proposal6-v4.txt" size="7668" author="erikholstad@gmail.com" created="Thu, 12 Mar 2009 18:03:04 +0000"/>
                            <attachment id="12406939" name="HBASE-880_Design_Doc_v5.pdf" size="223334" author="streamy" created="Thu, 30 Apr 2009 18:29:17 +0000"/>
                            <attachment id="12391309" name="NewCilentAPIProposoal4.gif" size="23355" author="stack" created="Wed, 1 Oct 2008 20:38:17 +0000"/>
                            <attachment id="12391181" name="hbase-880-patch.jpg" size="347311" author="jimk" created="Tue, 30 Sep 2008 01:32:02 +0000"/>
                            <attachment id="12391665" name="hbase-880-proposal4.patch" size="42414" author="jdcryans" created="Tue, 7 Oct 2008 19:45:30 +0000"/>
                            <attachment id="12390225" name="hbase-880-v1.patch" size="192735" author="jdcryans" created="Tue, 16 Sep 2008 22:41:36 +0000"/>
                            <attachment id="12391442" name="hbase-880-v2.patch" size="14910" author="jdcryans" created="Fri, 3 Oct 2008 21:16:32 +0000"/>
                            <attachment id="12391173" name="hbase_client_classes.png" size="193306" author="stack" created="Mon, 29 Sep 2008 23:29:24 +0000"/>
                            <attachment id="12391261" name="proposal2.jpg" size="416573" author="jimk" created="Wed, 1 Oct 2008 02:18:12 +0000"/>
                            <attachment id="12391230" name="proposed.jpg" size="418603" author="jimk" created="Tue, 30 Sep 2008 19:36:22 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 10 Sep 2008 17:10:03 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31884</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 30 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0ha0n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98885</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>