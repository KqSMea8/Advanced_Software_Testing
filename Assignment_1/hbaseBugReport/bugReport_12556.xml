<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:34:08 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-12556/HBASE-12556.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-12556] Create a golden file for testing client API source/binary compatibility</title>
                <link>https://issues.apache.org/jira/browse/HBASE-12556</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; had a suggestion (in some other jira I forgot) for doing a golden file for the HBase API so that we can compare between releases to ensure that we are keeping source and binary compatibility as defined in this document : &lt;a href=&quot;https://docs.google.com/document/d/1p5pP7v2OuzSSaomK2S2v7sfKky1Hex6OqwsJO0sZTUY/edit&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/document/d/1p5pP7v2OuzSSaomK2S2v7sfKky1Hex6OqwsJO0sZTUY/edit&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;I think we can generate a file, commit it to the repo, and create a unit test to check whether any API&apos;s are broken. Adding new InterfaceAudience.Public interfaces has to modify this file so that it becomes an explicit decision. &lt;/p&gt;

&lt;p&gt;The downside is that we have to modify the file every time we add a new API, but it should be fine since it will force us to think more before committing to supporting new interfaces within the same major versions. &lt;/p&gt;
</description>
                <environment></environment>
        <key id="12757063">HBASE-12556</key>
            <summary>Create a golden file for testing client API source/binary compatibility</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12693031">HBASE-10462</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="enis">Enis Soztutar</assignee>
                                    <reporter username="enis">Enis Soztutar</reporter>
                        <labels>
                    </labels>
                <created>Fri, 21 Nov 2014 19:32:40 +0000</created>
                <updated>Thu, 2 Jul 2015 17:08:34 +0000</updated>
                                                            <fixVersion>2.0.0</fixVersion>
                                    <component>Client</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="14221336" author="busbey" created="Fri, 21 Nov 2014 19:49:43 +0000"  >&lt;p&gt;alternate long term suggestion: we could get Annotation support into something like the &lt;a href=&quot;http://ispras.linuxbase.org/index.php/Java_API_Compliance_Checker&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Java API compliance checker&lt;/a&gt; and then use that directly to test.&lt;/p&gt;

&lt;p&gt;short term, we could use the InterfaceAudience markings to atleast build a class-scoped list and feed that to the Java API Compliance Checker.&lt;/p&gt;</comment>
                            <comment id="14221619" author="dimaspivak" created="Sat, 22 Nov 2014 00:04:28 +0000"  >&lt;p&gt;I like Sean&apos;s idea of an automated tool over a golden file; I&apos;ve briefly explored adding annotation support into our existing jdiff wrapper and could speed this up if there&apos;s interest. If we do this, we might also want to have it run regularly on builds.apache.org; as it stands, I run it regularly on my own, but it would help to up its visibility and perhaps spam people if it finds public API deletions where they shouldn&apos;t be. &lt;/p&gt;</comment>
                            <comment id="14221678" author="apurtell" created="Sat, 22 Nov 2014 01:04:57 +0000"  >&lt;p&gt;We also might have error-prone (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12187&quot; title=&quot;Review in source the paper &amp;quot;Simple Testing Can Prevent Most Critical Failures&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12187&quot;&gt;HBASE-12187&lt;/a&gt;) at our disposal. There we are waiting at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12349&quot; title=&quot;Add Maven build support module for a custom version of error-prone&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12349&quot;&gt;HBASE-12349&lt;/a&gt; on a new release of the tool that would make extension easy. (But if that doesn&apos;t materialize we can fork it.) Could bail on &quot;unapproved&quot; changes to public APIs or classes that they depend on. To be defined how that status is determined and changes are approved. &lt;/p&gt;</comment>
                            <comment id="14221842" author="enis" created="Sat, 22 Nov 2014 06:12:02 +0000"  >&lt;p&gt;I would like to make checking of source compatibility automated. And also, I want to make adding new Public APIs explicit so that authors and reviewers think twice about adding new stuff that we have to maintain over the long term. jdiff is great, but it is manual (for now) and it is only done at the time of the release candidate (which is too late I think). &lt;/p&gt;

&lt;p&gt;That&apos;s why I think we should have an internal unit test for testing this. I already have a patch for creating and checking golden files for the client API without any more dependencies (using &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10671&quot; title=&quot;Add missing InterfaceAudience annotations for classes in hbase-common and hbase-client modules&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10671&quot;&gt;&lt;del&gt;HBASE-10671&lt;/del&gt;&lt;/a&gt; tests). It checks for source compat, and it checks class names with &quot;class&quot; or &quot;interface&quot; prepended. I am not sure whether that it is enough for binary compat check (or we should mark abstract classes as well). In cases where this tool creates false negatives, the author can regenerate the file, and review can verify that the changes are in fact compatible I think. &lt;/p&gt;

&lt;p&gt;Let me attach what I have now. It is not done yet, but gives an idea of what I am thinking. &lt;/p&gt;
</comment>
                            <comment id="14221848" author="enis" created="Sat, 22 Nov 2014 06:35:09 +0000"  >&lt;p&gt;Here is a rough idea for what I had in mind. A simple class to generate the golden file, a unit test to check against this file, and a sample golden file in simple text format. &lt;/p&gt;

&lt;p&gt;If a patch adds a new API for example, the test will fail, and the author will be responsible to re-create the golden file again (containing the new interfaces) which will make it explicit. If an interface gets deleted, or changed, this UT will catch it. &lt;/p&gt;

&lt;p&gt;RM&apos;s can also do a simple diff against this file to double-check changes between releases. &lt;/p&gt;

&lt;p&gt;Let me know what you guys think. &lt;/p&gt;</comment>
                            <comment id="14221855" author="busbey" created="Sat, 22 Nov 2014 06:52:53 +0000"  >&lt;p&gt;My concern is that we&apos;ll be ad-hoc recreating compatibility checks that others have spent way more effort maturing.&lt;/p&gt;

&lt;p&gt;For example, ATM we don&apos;t take into account&lt;/p&gt;

&lt;ol&gt;
	&lt;li&gt;sub-class-level audience or stability annotations&lt;/li&gt;
	&lt;li&gt;source incompatible changes to generics&lt;/li&gt;
	&lt;li&gt;changes to members&lt;/li&gt;
	&lt;li&gt;incompatible changes to extends / implements&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;I realize this is a rough draft and we can build these things, but why do it ourselves when we can build on the work of others?&lt;/p&gt;

&lt;p&gt;We can achieve the automation by expanding on the scripts used to verify patches pre-commit and post-integration with trunk.&lt;/p&gt;

&lt;p&gt;We can automate it to individual developers builds either by gymnastics to make java api compliance checker work or use something that&apos;s already Maven friendly like &lt;a href=&quot;http://mojo.codehaus.org/clirr-maven-plugin/index.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Clirr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Adding or changing InterfaceAudience annotations is already us explicitly changing our API. Reviewers &lt;em&gt;should&lt;/em&gt; be treating it carefully. If they&apos;re not, making them do one additional step isn&apos;t going to fix that.&lt;/p&gt;</comment>
                            <comment id="14237522" author="dimaspivak" created="Mon, 8 Dec 2014 06:49:03 +0000"  >&lt;p&gt;I detailed how we might want to actually run binary compatibility tests in another JIRA (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8275&quot; title=&quot;Tool to test binary compatibility&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8275&quot;&gt;&lt;del&gt;HBASE-8275&lt;/del&gt;&lt;/a&gt;), but some of the discussion might belong here, too. I think if we want to really ensure compatibility across versions, we should have functional tests for every public API in one place that can feed into a framework for doing all the necessary compilation and binary-versions-on-the-classpath permutations we care about. Having them as actual tests (and not just making sure things compile and seem to work) means we&apos;d also be looking out for semantic compatibility as described in the &lt;a href=&quot;http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/Compatibility.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;Apache Hadoop compatibility guide&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="14266893" author="dimaspivak" created="Tue, 6 Jan 2015 22:39:29 +0000"  >&lt;p&gt;Hey &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt;, I think passing the golden file generated the patch in this JIRA (after stripping out the method names and types) would be ideal for using the Java API Compliance Checker. Since I think the use of such a checker, and not just analyzing the list in a unit test (for the reasons detailed by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=busbey&quot; class=&quot;user-hover&quot; rel=&quot;busbey&quot;&gt;Sean Busbey&lt;/a&gt; above) is the way to go, would you be open to committing the golden file generation and then leaving the analysis to done by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-12808&quot; title=&quot;Use Java API Compliance Checker for binary/source compatibility&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-12808&quot;&gt;&lt;del&gt;HBASE-12808&lt;/del&gt;&lt;/a&gt;? I&apos;ve separately reached out to the developer of Java ACC about adding annotation support, but we could get this online in no time if we had a way to generate a file with the list of classes to analyze (since that&apos;s already a feature of the tool).&lt;/p&gt;</comment>
                            <comment id="14516363" author="ndimiduk" created="Tue, 28 Apr 2015 04:58:55 +0000"  >&lt;p&gt;We still need this with the advent of &lt;tt&gt;dev-support/check_compatibility.sh&lt;/tt&gt; ? Maybe update the buildbot to run it automatically?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12765001">HBASE-12808</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12683037" name="hbase-12556-wip.patch" size="675487" author="enis" created="Sat, 22 Nov 2014 06:35:09 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 21 Nov 2014 19:49:43 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 33 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i22nzz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>