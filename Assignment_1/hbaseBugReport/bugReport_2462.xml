<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:02:06 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-2462/HBASE-2462.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-2462] Review compaction heuristic and move compaction code out so standalone and independently testable</title>
                <link>https://issues.apache.org/jira/browse/HBASE-2462</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Anything that improves our i/o profile makes hbase run smoother.  Over in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2457&quot; title=&quot;RS gets stuck compacting region ad infinitum&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2457&quot;&gt;&lt;del&gt;HBASE-2457&lt;/del&gt;&lt;/a&gt;, good work has been done already describing the tension between minimizing compactions versus minimizing count of store files.  This issue is about following on from what has been done in 2457 but also, breaking the hard-to-read compaction code out of Store.java out to a standalone class that can be the easier tested (and easily analyzed for its performance characteristics).&lt;/p&gt;

&lt;p&gt;If possible, in the refactor, we&apos;d allow specification of alternate merge sort implementations. &lt;/p&gt;</description>
                <environment></environment>
        <key id="12462305">HBASE-2462</key>
            <summary>Review compaction heuristic and move compaction code out so standalone and independently testable</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="streamy">Jonathan Gray</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                            <label>moved_from_0_20_5</label>
                    </labels>
                <created>Sat, 17 Apr 2010 03:20:08 +0000</created>
                <updated>Fri, 23 Mar 2012 22:28:36 +0000</updated>
                            <resolved>Fri, 23 Mar 2012 22:28:36 +0000</resolved>
                                                                    <component>Performance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="12858083" author="stack" created="Sat, 17 Apr 2010 03:21:11 +0000"  >&lt;p&gt;This issue could also look into cost of delete processing during minor compactions.&lt;/p&gt;</comment>
                            <comment id="12858713" author="tlipcon" created="Mon, 19 Apr 2010 22:54:52 +0000"  >&lt;p&gt;We talked about this a bit at the hackathon today.&lt;/p&gt;

&lt;p&gt;One idea about the heuristic is to measure the actual cost of having multiple storefiles for a region (this was discussed a bit in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2457&quot; title=&quot;RS gets stuck compacting region ad infinitum&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2457&quot;&gt;&lt;del&gt;HBASE-2457&lt;/del&gt;&lt;/a&gt;). The overall cost of having a lot of files is the cost of hitting HFiles for reads. We can easily measure this - whenever we access a store for a read/scan, we should increment a counter for that store based on how much time we spent accessing it. We can use this data in a number of ways:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;When deciding which files to compact, we know the &quot;cost&quot; of each file - if a file has a large cost, then including it in the compaction is worth a lot. If it has a small cost, we won&apos;t gain much by compacting it. We can weigh the cost vs the size of the file - if it has been costing us very little, but it&apos;s a big file, it&apos;s not worth compacting.&lt;/li&gt;
	&lt;li&gt;We can also divide the sum of the costs by the number of reads - this gives us an &quot;effective number of store files&quot;. For example, if we have 10 store files, but 5 of them are completely in block cache, then we effectively only have 5 store files from the standpoint of the benefit of a compaction. We can use this to prioritize compactions that will actually be helpful.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12866818" author="stack" created="Wed, 12 May 2010 23:48:33 +0000"  >&lt;p&gt;Bulk move of 0.20.5 issues into 0.21.0 after vote that we merge branch into TRUNK up on list.&lt;/p&gt;</comment>
                            <comment id="12902176" author="jdcryans" created="Wed, 25 Aug 2010 00:02:41 +0000"  >&lt;p&gt;Do we have enough time do this if 0.90.0 is due for HW? Punt?&lt;/p&gt;</comment>
                            <comment id="12918173" author="streamy" created="Tue, 5 Oct 2010 20:53:46 +0000"  >&lt;p&gt;+1 on punting to 0.92&lt;/p&gt;</comment>
                            <comment id="12918315" author="stack" created="Tue, 5 Oct 2010 23:20:55 +0000"  >&lt;p&gt;Moving this &apos;improvement&apos; out of 0.90.&lt;/p&gt;</comment>
                            <comment id="12923181" author="stack" created="Wed, 20 Oct 2010 21:25:15 +0000"  >&lt;p&gt;Looking at production regionserver compacting with J-D, we&apos;re just doing too much compacting.  Its running near back-to-back.  Need to fix.  Our default compaction trips and count of files seems too little.  Also, it looks like we&apos;ll merrily go ahead and compact together a 10MB file with a 1G file; we need to have in place barriers to this ever happening.  This issue is important to fix.. but yeah, 0.92.&lt;/p&gt;</comment>
                            <comment id="12924141" author="stack" created="Sat, 23 Oct 2010 06:58:49 +0000"  >&lt;p&gt;Nevermind the last sentence in review summary up on review board.&lt;/p&gt;</comment>
                            <comment id="12924142" author="streamy" created="Sat, 23 Oct 2010 07:11:06 +0000"  >&lt;p&gt;Simulations of the new algorithm in the current patch up on RB:&lt;/p&gt;

&lt;p&gt;(You can see a very clear trade-off between optimizing for writes or reads)&lt;/p&gt;

&lt;p&gt;FINAL COMPARISON&lt;/p&gt;


&lt;p&gt;2010-10-23 00:08:47,883 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(188): &lt;/p&gt;

&lt;p&gt;MOST EFFICIENT THROUGHPUT&lt;/p&gt;


&lt;p&gt;2010-10-23 00:08:47,884 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(190): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=6, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=22.9GB&lt;br/&gt;
averageFilesPerGet=3.54831&lt;/p&gt;



&lt;p&gt;2010-10-23 00:08:47,884 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(190): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=45.9GB&lt;br/&gt;
averageFilesPerGet=1.47172&lt;/p&gt;



&lt;p&gt;2010-10-23 00:08:47,884 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(190): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=47.5GB&lt;br/&gt;
averageFilesPerGet=1.44104&lt;/p&gt;



&lt;p&gt;2010-10-23 00:08:47,884 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(190): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=48.9GB&lt;br/&gt;
averageFilesPerGet=1.37419&lt;/p&gt;



&lt;p&gt;2010-10-23 00:08:47,884 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(190): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=51.9GB&lt;br/&gt;
averageFilesPerGet=1.42109&lt;/p&gt;



&lt;p&gt;2010-10-23 00:08:47,884 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(194): &lt;/p&gt;

&lt;p&gt;MOST EFFICIENT GETS&lt;/p&gt;


&lt;p&gt;2010-10-23 00:08:47,885 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(196): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=48.9GB&lt;br/&gt;
averageFilesPerGet=1.37419&lt;/p&gt;

&lt;p&gt;2010-10-23 00:08:47,885 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(196): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=51.9GB&lt;br/&gt;
averageFilesPerGet=1.42109&lt;/p&gt;

&lt;p&gt;2010-10-23 00:08:47,885 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(196): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=47.5GB&lt;br/&gt;
averageFilesPerGet=1.44104&lt;/p&gt;

&lt;p&gt;2010-10-23 00:08:47,885 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(196): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=45.9GB&lt;br/&gt;
averageFilesPerGet=1.47172&lt;/p&gt;

&lt;p&gt;2010-10-23 00:08:47,886 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(196): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=6, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=22.9GB&lt;br/&gt;
averageFilesPerGet=3.54831&lt;/p&gt;

&lt;p&gt;2010-10-23 00:08:47,886 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(200): &lt;/p&gt;

&lt;p&gt;Throughput Range: 22.9GB to 51.9GB&lt;/p&gt;


&lt;p&gt;2010-10-23 00:08:47,886 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(203): &lt;/p&gt;

&lt;p&gt;Num Files Per Get Range: 1.37419 to 3.54831&lt;/p&gt;</comment>
                            <comment id="12924143" author="streamy" created="Sat, 23 Oct 2010 07:24:11 +0000"  >&lt;p&gt;Simulations of the old algorithm:&lt;/p&gt;

&lt;p&gt;(Really not much different from the new one except harder to tune for reads)&lt;/p&gt;


&lt;p&gt;FINAL COMPARISON&lt;/p&gt;


&lt;p&gt;2010-10-23 00:22:57,841 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(272): &lt;/p&gt;

&lt;p&gt;MOST EFFICIENT THROUGHPUT&lt;/p&gt;


&lt;p&gt;2010-10-23 00:22:57,841 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(274): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=6, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=22.7GB&lt;br/&gt;
averageFilesPerGet=3.56323&lt;/p&gt;



&lt;p&gt;2010-10-23 00:22:57,841 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(274): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=22.9GB&lt;br/&gt;
averageFilesPerGet=3.66561&lt;/p&gt;



&lt;p&gt;2010-10-23 00:22:57,842 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(274): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=25.0GB&lt;br/&gt;
averageFilesPerGet=3.61562&lt;/p&gt;



&lt;p&gt;2010-10-23 00:22:57,842 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(274): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=27.1GB&lt;br/&gt;
averageFilesPerGet=3.64184&lt;/p&gt;



&lt;p&gt;2010-10-23 00:22:57,843 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(274): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=32.5GB&lt;br/&gt;
averageFilesPerGet=3.8605&lt;/p&gt;



&lt;p&gt;2010-10-23 00:22:57,843 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(278): &lt;/p&gt;

&lt;p&gt;MOST EFFICIENT GETS&lt;/p&gt;


&lt;p&gt;2010-10-23 00:22:57,844 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(280): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=6, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=22.7GB&lt;br/&gt;
averageFilesPerGet=3.56323&lt;/p&gt;

&lt;p&gt;2010-10-23 00:22:57,844 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(280): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=25.0GB&lt;br/&gt;
averageFilesPerGet=3.61562&lt;/p&gt;

&lt;p&gt;2010-10-23 00:22:57,844 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(280): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=27.1GB&lt;br/&gt;
averageFilesPerGet=3.64184&lt;/p&gt;

&lt;p&gt;2010-10-23 00:22:57,844 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(280): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=22.9GB&lt;br/&gt;
averageFilesPerGet=3.66561&lt;/p&gt;

&lt;p&gt;2010-10-23 00:22:57,844 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(280): &lt;br/&gt;
&amp;#8212; Config &amp;#8212;&lt;br/&gt;
numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=3, factor=0.5&lt;br/&gt;
&amp;#8212; Result &amp;#8212;&lt;br/&gt;
files=null&lt;br/&gt;
memstoreSize=0B&lt;br/&gt;
totalSize=0B&lt;br/&gt;
totalThroughput=32.5GB&lt;br/&gt;
averageFilesPerGet=3.8605&lt;/p&gt;

&lt;p&gt;2010-10-23 00:22:57,845 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(284): &lt;/p&gt;

&lt;p&gt;Throughput Range: 22.7GB to 32.5GB&lt;/p&gt;


&lt;p&gt;2010-10-23 00:22:57,845 DEBUG &lt;span class=&quot;error&quot;&gt;&amp;#91;main&amp;#93;&lt;/span&gt; regionserver.TestCompact(287): &lt;/p&gt;

&lt;p&gt;Num Files Per Get Range: 3.56323 to 3.8605&lt;/p&gt;</comment>
                            <comment id="12924147" author="hbasereviewboard" created="Sat, 23 Oct 2010 07:49:10 +0000"  >&lt;p&gt;Message from: &quot;Jonathan Gray&quot; &amp;lt;jgray@apache.org&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1078/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1078/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;(Updated 2010-10-23 00:48:28.858137)&lt;/p&gt;


&lt;p&gt;Review request for hbase, stack, Nicolas, Karthik Ranganathan, and Kannan Muthukkaruppan.&lt;/p&gt;


&lt;p&gt;Changes&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Working patch.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Pulls compaction file selection code into new interface and makes it so it&apos;s configurable.  Currently is globally configurable but should be easy to make it per-family setting.&lt;/p&gt;

&lt;p&gt;Also makes the algorithm standalone and testable.&lt;/p&gt;

&lt;p&gt;Includes a new compaction algorithm based on a new config param &apos;compactionForce&apos;.  See javadoc in compaction classes for explanation.&lt;/p&gt;

&lt;p&gt;Big test included for new algorithm.&lt;/p&gt;

&lt;p&gt;Also the TestCompact class includes a neat new way for us to compare compaction algorithms.  You specify a bunch of input paramaters and then it runs a simulation and generates statistics.  The output looks like:&lt;/p&gt;


&lt;hr /&gt;
&lt;p&gt;Ran test&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;numPuts=1000000&lt;br/&gt;
putSizeRange=1.0KB to 10.0KB&lt;br/&gt;
numPutsPerGet=10&lt;br/&gt;
flushSizeRange=64.0MB to 256.0MB&lt;br/&gt;
max=10, threshold=3, force=6, factor=0.5&lt;/p&gt;
&lt;hr /&gt;

&lt;hr /&gt;
&lt;p&gt;Final Result&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;files=82.2MB, 2.9GB, 898.3MB, 1.3GB&lt;br/&gt;
memstoreSize=100.8MB&lt;br/&gt;
totalSize=5.1GB&lt;br/&gt;
totalThroughput=18.2GB&lt;br/&gt;
averageFilesPerGet=3.25622&lt;/p&gt;


&lt;p&gt;This addresses bug &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-2462&quot; title=&quot;Review compaction heuristic and move compaction code out so standalone and independently testable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-2462&quot;&gt;&lt;del&gt;HBASE-2462&lt;/del&gt;&lt;/a&gt;.&lt;br/&gt;
    &lt;a href=&quot;http://issues.apache.org/jira/browse/HBASE-2462&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/browse/HBASE-2462&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs (updated)&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  trunk/src/main/java/org/apache/hadoop/hbase/HConstants.java 1026565 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java 1026565 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 1026565 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java 1026565 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreFlusher.java 1026565 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/PriorityCompactionQueue.java 1026565 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/RegionServerServices.java 1026565 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/SplitTransaction.java 1026565 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java 1026565 &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/compact/CompactSplitThread.java PRE-CREATION &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/compact/CompactionRequestor.java PRE-CREATION &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/compact/CompactionSelector.java PRE-CREATION &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/compact/CompactionSelectorHBase89.java PRE-CREATION &lt;br/&gt;
  trunk/src/main/java/org/apache/hadoop/hbase/regionserver/compact/CompactionSelectorWithForce.java PRE-CREATION &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestCompaction.java 1026565 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/TestPriorityCompactionQueue.java 1026565 &lt;br/&gt;
  trunk/src/test/java/org/apache/hadoop/hbase/regionserver/compact/TestCompact.java PRE-CREATION &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;http://review.cloudera.org/r/1078/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1078/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;TestCompact is passing.  Have not run test suite.&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Jonathan&lt;/p&gt;

</comment>
                            <comment id="12924263" author="nspiegelberg" created="Sat, 23 Oct 2010 23:21:26 +0000"  >&lt;p&gt;@Jonathan, note that this will cause merge conflicts with the new compaction metrics in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3102&quot; title=&quot;Enhance HBase rMetrics for Long-running Stats&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3102&quot;&gt;&lt;del&gt;HBASE-3102&lt;/del&gt;&lt;/a&gt;. &lt;/p&gt;</comment>
                            <comment id="12924442" author="hbasereviewboard" created="Mon, 25 Oct 2010 03:58:05 +0000"  >&lt;p&gt;Message from: &quot;Nicolas&quot; &amp;lt;nspiegelberg@facebook.com&amp;gt;&lt;/p&gt;

&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;http://review.cloudera.org/r/1078/#review1643&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1078/#review1643&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/CompactSplitThread.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1078/#comment5520&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1078/#comment5520&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    If &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3102&quot; title=&quot;Enhance HBase rMetrics for Long-running Stats&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3102&quot;&gt;&lt;del&gt;HBASE-3102&lt;/del&gt;&lt;/a&gt; goes in first, this section just needs to add:&lt;/p&gt;

&lt;p&gt;     if (r.getLastCompactInfo() != null) &lt;/p&gt;
{  // compaction aborted?
      this.server.getMetrics().addCompaction(r.getLastCompactInfo());
    }



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/Store.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1078/#comment5515&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1078/#comment5515&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    need to recompute totalsize here to substract the filesizes of the skipped storefiles.  this is necessary for the metrics collection, in addition to this debug&lt;/p&gt;



&lt;p&gt;trunk/src/main/java/org/apache/hadoop/hbase/regionserver/compact/CompactionSelector.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1078/#comment5518&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1078/#comment5518&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    Suggestions:&lt;br/&gt;
    1. it would be nice if the Major vs. Minor compaction distinction was handled by the CompactionSelector itself.  The constructor could take a CompactionRequestor class to handle this.&lt;br/&gt;
    2. it would be nice to add shouldCompact() to the CompactionSelector so that custom compaction algorithms can determine when they are queued.&lt;/p&gt;



&lt;p&gt;trunk/src/test/java/org/apache/hadoop/hbase/regionserver/compact/TestCompact.java&lt;br/&gt;
&amp;lt;&lt;a href=&quot;http://review.cloudera.org/r/1078/#comment5519&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://review.cloudera.org/r/1078/#comment5519&lt;/a&gt;&amp;gt;&lt;/p&gt;

&lt;p&gt;    I think it&apos;s a great idea to start some sort of benchmarking utility for this.  I know this is a first cut, but it would be nice to have a quick intro guide or something in here for hooking your custom compaction algo into this benchmark.  Comments are a little sparse here about what&apos;s going on.&lt;/p&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Nicolas&lt;/li&gt;
&lt;/ul&gt;



</comment>
                            <comment id="12924664" author="nspiegelberg" created="Mon, 25 Oct 2010 18:21:28 +0000"  >&lt;p&gt;So, we&apos;ve been talking about a new compaction algorithm internally and wanted to get external feedback as well...&lt;/p&gt;

&lt;p&gt;The existing store file selection algorithm seems to not utilize enough context.  We start at the oldest and compact everything else when it&apos;s no longer 2x the next oldest.  It seems like we want to approach from the opposite direction:&lt;/p&gt;

&lt;p&gt;1. Start at the newest file&lt;br/&gt;
2. Unconditionally compact as long as the StoreFiles are less than a certain&lt;br/&gt;
size (thinking &quot;hbase.regionserver.hlog.blocksize&quot;).&lt;br/&gt;
3. After that metric has been met,  if next oldest file &amp;lt; sum(all newer files) * R, we include it in the compaction.  R = 2.&lt;br/&gt;
4. If files-to-compact &amp;lt; max(HColumnDescriptor.maxVersions(),3), skip the compaction&lt;/p&gt;

&lt;p&gt;This algorithm can serve a very generic workload.  Axiom: It&apos;s worth compacting if sum(files) &amp;gt;= 150% * max(files).  Maybe make this adjustable.  The main point is that the ratio between file&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt;, file&lt;span class=&quot;error&quot;&gt;&amp;#91;i+1&amp;#93;&lt;/span&gt; is less useful than sum(files), max(files).&lt;/p&gt;

&lt;p&gt;A. With files&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; &amp;lt; files&lt;span class=&quot;error&quot;&gt;&amp;#91;i+1&amp;#93;&lt;/span&gt; * 2, our worst case ends up with a decreasing triangle of 2x.&lt;br/&gt;
B. With files&lt;span class=&quot;error&quot;&gt;&amp;#91;i&amp;#93;&lt;/span&gt; &amp;lt; sum(files&lt;span class=&quot;error&quot;&gt;&amp;#91;0..i-1&amp;#93;&lt;/span&gt;) * 2, we are dealing with the derivative.  Our worst case ends up with decreasing triangle of 4x&lt;/p&gt;

&lt;p&gt;With a 4x ratio &amp;amp; 64 MB hlog blocksize, we could support up to a 21.4GB Store while using less than 8 files.  3 minimal threshold fiels + 5 worst case files that would be roughly: 64MB, 256MB, 1GB, 4GB, 16GB == 21.3GB.  Assuming that the average user has a 1-2 GB store, the number of HFiles should never get above 6.&lt;/p&gt;</comment>
                            <comment id="12924717" author="stack" created="Mon, 25 Oct 2010 20:51:36 +0000"  >&lt;p&gt;hbase.regionserver.hlog.blocksize == fs default block size.  Better to use fs default block size rather than an hlog setting.&lt;/p&gt;

&lt;p&gt;Whats rationale of rule 4?  Do you rather mean the compaction threshold here?&lt;/p&gt;

&lt;p&gt;Sorry, whats max(files)?  The largest file?  And sum(files) is all files or just some subset (you keep adding to the subset till you are &amp;gt; 150% the biggest?)&lt;/p&gt;

&lt;p&gt;So, you think this algo will make for less compactions yet keep count of files low?&lt;/p&gt;




</comment>
                            <comment id="12924792" author="nspiegelberg" created="Tue, 26 Oct 2010 00:08:41 +0000"  >&lt;p&gt;@stack: &lt;/p&gt;

&lt;p&gt;1. FS default blocksize is the default for a non-custom hlog.blocksize, but they are not necessarily 1-1.   The idea is that new HFiles created should always be &amp;lt;= hlog.blocksize, so we unconditionally compact for HFiles that have not already been compacted at least once.&lt;/p&gt;

&lt;p&gt;2.  The idea behind step #4 is that compaction becomes extremely useful when you can use it to dedupe.  We should definitely use the compactionThreshold metric here instead of hard-coded 3,   However, I don&apos;t think this should be an absolute number of StoreFiles, but rather the number of relatively-small StoreFiles.  If you have huge region sizes (e.g. large object store), then you don&apos;t mind having 6 storefiles and really just want to compact when it will save a decent amount of space.&lt;/p&gt;

&lt;p&gt;3. This algorithm will perform roughly the same for compacting small/new files; however it will be more aggressive about including older files in the compaction because it can more quickly detect when it&apos;s advantageous to compact.  Because of the 4x (vs. 2x) multiplier, it&apos;s 2x more scalable and should result in 1/2 the amount of large StoreFiles for large regions.  For DEFAULT_MAX_FILE_SIZE == 256MB, you should never have more than 5 StoreFiles before triggering a split.&lt;/p&gt;</comment>
                            <comment id="12924870" author="stack" created="Tue, 26 Oct 2010 07:17:28 +0000"  >&lt;p&gt;@Nicolas&lt;/p&gt;

&lt;p&gt;On 1., above, sorry if I&apos;m being dense, but I don&apos;t get the relation between hlog block size and hfile size.&lt;/p&gt;

&lt;p&gt;3. sounds great.&lt;/p&gt;
</comment>
                            <comment id="12925158" author="nspiegelberg" created="Tue, 26 Oct 2010 21:44:10 +0000"  >&lt;p&gt;@Stack: jgray helped me clarify my understanding of #1.  What I really wanted for #1 was HRegion.memstoreFlushSize: the maximum possible size of a flushed StoreFile.  Since this size doesn&apos;t halt puts and can end up with a slightly larger StoreFile, I add 50% pad.   There is additional logic to handle oddball cases where &amp;gt; 50% pad occurs, but I&apos;ll keep that outside the scope of the discussion of the main algorithm.&lt;/p&gt;</comment>
                            <comment id="12925247" author="stack" created="Wed, 27 Oct 2010 03:57:35 +0000"  >&lt;p&gt;@Nicolas Good stuff.  Shall we commit this (after making sure it doesn&apos;t break metrics patch?) then work on algorithm implementation in another issue?&lt;/p&gt;</comment>
                            <comment id="12925491" author="nspiegelberg" created="Wed, 27 Oct 2010 18:30:15 +0000"  >&lt;p&gt;@Stack: Sorry for the bevvy of conversation.  This has been heavily discussed internally, and we just wanted to keep you up to date on our findings.  Let me work with Jonathan to get this issue closed out and we&apos;ll open up separate JIRAs for the various compaction findings we&apos;ve come across.&lt;/p&gt;</comment>
                            <comment id="13216581" author="stack" created="Sat, 25 Feb 2012 23:22:31 +0000"  >&lt;p&gt;It likes a bunch of this has made it in but I don&apos;t see the standalone compactions part nor the simulator.  I&apos;m taking a look at salvaging these latter two aspects from this patch and at least making it so we have standalone compactions (I want to look at compactions in isolation to see if we can make them run faster; we also need to work on making it so we do less of them but thats other issues).&lt;/p&gt;</comment>
                            <comment id="13229636" author="stack" created="Wed, 14 Mar 2012 21:22:01 +0000"  >&lt;p&gt;WIP; trying to unravel some of the compaction code so can be standalone in a compaction tool that can be used/profiled w/o all of the hbase context.  Far from finished...&lt;/p&gt;</comment>
                            <comment id="13230686" author="stack" created="Thu, 15 Mar 2012 23:05:45 +0000"  >&lt;p&gt;Not done yet.  Had to stand up an instance of Store and even that requires a mocked HRegion instance at least because this all is too tangled (I need instance of StoreScanner &amp;#8211; I tried hard to undo SS&apos;s dependence on Store but had to give up).  I have it so have a Tool that you can pass a directory of files too.  Was going to finish this up.  At a minium its turning up some little improvements on Store &amp;#8211; I&apos;m able to remove some duplicated and unnecessary data members, etc.&lt;/p&gt;</comment>
                            <comment id="13237171" author="stack" created="Fri, 23 Mar 2012 21:47:00 +0000"  >&lt;p&gt;Finished making compactiontool standalone over in hbase-5616.  Thats been committed.&lt;/p&gt;</comment>
                            <comment id="13237212" author="stack" created="Fri, 23 Mar 2012 22:23:33 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5616&quot; title=&quot;Make compaction code standalone&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5616&quot;&gt;&lt;del&gt;HBASE-5616&lt;/del&gt;&lt;/a&gt; does not make compaction pluggable, just standalone.  The patch here tried to make it so compaction could be pluggable.   It would load a compaction selector class via reflection.  Nice to have.&lt;/p&gt;

&lt;p&gt;Most of this patch has been applied already or superceeded.&lt;/p&gt;

&lt;p&gt;Outstanding is an attempt at a compaction simulator that could be used how well a compaction algorithm worked given different sized files.  That seems like something that would be nice to have.  Will open distinct issue for this.&lt;/p&gt;

&lt;p&gt;Closing.  Have milked this issue of its usefulness.&lt;/p&gt;
</comment>
                            <comment id="13237218" author="stack" created="Fri, 23 Mar 2012 22:28:36 +0000"  >&lt;p&gt;Closing.  Superceeded by other work in compaction.  I opened &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-5627&quot; title=&quot;Compactions simulator tool for proofing algorithms&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-5627&quot;&gt;&lt;del&gt;HBASE-5627&lt;/del&gt;&lt;/a&gt; for the outstanding simulator work.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12478482">HBASE-3160</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12462189">HBASE-2453</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12479530">HBASE-3209</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12518567" name="2462v2.txt" size="35710" author="stack" created="Thu, 15 Mar 2012 23:05:44 +0000"/>
                            <attachment id="12518379" name="standalone.txt" size="14311" author="stack" created="Wed, 14 Mar 2012 21:22:01 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Mon, 19 Apr 2010 22:54:52 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32597</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 38 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hhtb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>100148</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>