<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:43:50 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7233/HBASE-7233.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7233] Serializing KeyValues over RPC</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7233</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Undo KeyValue being a Writable.&lt;/p&gt;

&lt;p&gt;This issue wandered and became general discussion of KeyValue serialization, in particular, how to pass lots of KeyValues across rpc.  It was noticed that what we were passing over the wire for KeyValues was not protobuf&apos;d KeyValues but the old serialization which assumes the KeyValue version 1 format.  After a bunch of good discussion working out rpc formats, was decided to close this issue in favor of more specific issues: see summary at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7233?focusedCommentId=13573259&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13573259&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-7233?focusedCommentId=13573259&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13573259&lt;/a&gt;&lt;/p&gt;</description>
                <environment></environment>
        <key id="12618056">HBASE-7233</key>
            <summary>Serializing KeyValues over RPC</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="stack">stack</assignee>
                                    <reporter username="stack">stack</reporter>
                        <labels>
                    </labels>
                <created>Wed, 28 Nov 2012 20:46:13 +0000</created>
                <updated>Mon, 23 Sep 2013 18:23:57 +0000</updated>
                            <resolved>Thu, 21 Feb 2013 19:26:00 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                <comments>
                            <comment id="13507135" author="stack" created="Fri, 30 Nov 2012 06:24:37 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1379&quot; title=&quot;Make KeyValue implement Writable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1379&quot;&gt;&lt;del&gt;HBASE-1379&lt;/del&gt;&lt;/a&gt; added Writable Interface to KV.&lt;/p&gt;

&lt;p&gt;This patch removes it.&lt;/p&gt;

&lt;p&gt;In WALEdit it does a bit of placeholding till we convert WALEdit from being a Writable.  Need to also chat w/ Matt Corgan after he is done drinking his Champagne about how we&apos;ll do serizliation/deserialization of KVs/Cells in his new Interface&lt;/p&gt;</comment>
                            <comment id="13507169" author="mcorgan" created="Fri, 30 Nov 2012 07:36:31 +0000"  >&lt;p&gt;I&apos;m not up to speed on hbase/map-reduce integration.  Will it still work ok with the KeyValueSortReducer?&lt;/p&gt;

&lt;p&gt;Otherwise, it&apos;s pretty easy to mimic the writable format within hbase.  There&apos;s some methods in KeyValueTool that take a Cell parameter and write the KeyValue format bytes to ByteBuffers and arrays.  Easy to add more for OutputStreams, etc&lt;/p&gt;</comment>
                            <comment id="13507170" author="mcorgan" created="Fri, 30 Nov 2012 07:37:51 +0000"  >&lt;p&gt;Need to watch our step with META and ROOT cells too until we figure that out&lt;/p&gt;</comment>
                            <comment id="13507229" author="yuzhihong@gmail.com" created="Fri, 30 Nov 2012 09:59:54 +0000"  >&lt;p&gt;Change in TestSerialization.java didn&apos;t apply cleanly.&lt;br/&gt;
Attached diff which fixes the above.&lt;/p&gt;</comment>
                            <comment id="13507441" author="stack" created="Fri, 30 Nov 2012 16:50:44 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; How you mean (re: &lt;del&gt;ROOT&lt;/del&gt; and .META.)?  Should be ok given we are protobuf serializing here already.  This patch comes after that work.  Let me check KeyValueSortReducer.  I don&apos;t see us specifying a Serializer on cursory glance.  Will run the unit test.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ted_yu&quot; class=&quot;user-hover&quot; rel=&quot;ted_yu&quot;&gt;Ted Yu&lt;/a&gt; Thanks.&lt;/p&gt;</comment>
                            <comment id="13507517" author="mcorgan" created="Fri, 30 Nov 2012 18:19:27 +0000"  >&lt;p&gt;Nevermind about the ROOT/META comment.  I was thinking the comparator might have an effect here but maybe not.&lt;/p&gt;</comment>
                            <comment id="13507728" author="lhofhansl" created="Fri, 30 Nov 2012 22:56:33 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt;&lt;br/&gt;
Came here to write that...&lt;br/&gt;
KVs are still used in HBase M/R, and a KV cannot currently be serialized by protobufs by itself (Mutation currently serialize the data as columns, not as contained KVs).&lt;br/&gt;
At the very least we need to add a KV serializer for M/R.&lt;/p&gt;</comment>
                            <comment id="13507868" author="stack" created="Sat, 1 Dec 2012 05:12:26 +0000"  >&lt;p&gt;So, new Interface to replace Writable:&lt;/p&gt;

&lt;p&gt;Interface HSerializable &lt;/p&gt;
{
  // The serialization methods pb...
  mergeFrom(byte [])
  mergeFrom(InputStream)
  mergeDelimitedFrom(byte [])
  mergeDelimitedFrom(InputStream)
  parseFrom(byte [])
  parseFrom(InputStream)
  ...
  etc?
}</comment>
                            <comment id="13507876" author="lhofhansl" created="Sat, 1 Dec 2012 05:52:41 +0000"  >&lt;p&gt;Why not add a protobuf representation for KV? Could be just a byte[] (right?) The generated class will have this interface.&lt;/p&gt;

&lt;p&gt;(as said on the mailing list, if KVs keeps Writable interface I&apos;ll still be happy)&lt;/p&gt;</comment>
                            <comment id="13508077" author="stack" created="Sat, 1 Dec 2012 22:16:36 +0000"  >&lt;p&gt;There is one in hbase.protos already:&lt;/p&gt;


&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 28 /**
 27  * The type of the key in a KeyValue.
 26  */
 25 &lt;span class=&quot;code-keyword&quot;&gt;enum&lt;/span&gt; KeyType {
 24     MINIMUM = 0;
 23     PUT = 4;
 22 
 21     DELETE = 8;
 20     DELETE_COLUMN = 12;
 19     DELETE_FAMILY = 14;
 18 
 17     &lt;span class=&quot;code-comment&quot;&gt;// MAXIMUM is used when searching; you look from maximum on down.
&lt;/span&gt; 16     MAXIMUM = 255;
 15 }
 14 
 13 /**
 12  * Protocol buffer version of KeyValue.
 11  * It doesn&apos;t have those &lt;span class=&quot;code-keyword&quot;&gt;transient&lt;/span&gt; parameters
 10  */
  9 message KeyValue {
  8   required bytes row = 1;
  7   required bytes family = 2;
  6   required bytes qualifier = 3;
  5   optional uint64 timestamp = 4;
  4   optional KeyType keyType = 5;
  3   optional bytes value = 6;
  2 }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Are you suggesting that we change KeyValueSortReducer from:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class KeyValueSortReducer &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Reducer&amp;lt;ImmutableBytesWritable, KeyValue, ImmutableBytesWritable, KeyValue&amp;gt; {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class KeyValueSortReducer &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; Reducer&amp;lt;ImmutableBytesWritable, KeyValue, ImmutableBytesWritable, HBaseProtos.KeyValue&amp;gt; {
                                                                                                           ^^^^^^^^^^^^^^^^^^^^^
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;HBaseProtos.KeyValue implements &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/GeneratedMessage&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/GeneratedMessage&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This has what I started to list in the above proposed Interface including writeTo and writeDelimitedTo, etc.&lt;/p&gt;

&lt;p&gt;I think this a good idea.  No pollution of KV or Cell w/ serialization.&lt;/p&gt;

&lt;p&gt;Let me add it.&lt;/p&gt;</comment>
                            <comment id="13508079" author="stack" created="Sat, 1 Dec 2012 22:22:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;(as said on the mailing list, if KVs keeps Writable interface I&apos;ll still be happy)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I see that now.  I missed it because I was too busy stripping Writables this week in reaction to your rant.&lt;/p&gt;

&lt;p&gt;It looks like it will take little to undo KeyValue and Writable so lets press ahead.  It undoes another piece of the Writable contamination and it can only help with our move to the Cell Interface having serialization disentangled.&lt;/p&gt;</comment>
                            <comment id="13508092" author="lhofhansl" created="Sat, 1 Dec 2012 22:50:55 +0000"  >&lt;p&gt;Oh, didn&apos;t see the proto definition for KVs. In that case we only need to add a serializer (like MutationSerialization and ResultSerialization).&lt;br/&gt;
Lemme do that today or tomorrow.&lt;/p&gt;

&lt;p&gt;The M/R code itself should not have to change.&lt;/p&gt;</comment>
                            <comment id="13508097" author="lhofhansl" created="Sat, 1 Dec 2012 22:59:17 +0000"  >&lt;p&gt;Looking at the KeyValue in HBase.proto, though, it is not used anywhere, also it seems to required to disassemble the KV into Row/CF/Qual, which will be inefficient.&lt;/p&gt;</comment>
                            <comment id="13508099" author="stack" created="Sat, 1 Dec 2012 23:24:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;Looking at the KeyValue in HBase.proto, though, it is not used anywhere, also it seems to required to disassemble the KV into Row/CF/Qual, which will be inefficient.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, if the KV atom is broken up into its particles, I&apos;d think we&apos;ll be able to migrate its format over time.&lt;/p&gt;

&lt;p&gt;Or, since KV is coming to its end of life, just redo its pb format so serialization is kv bytes &amp;#8211; &apos;more efficient&apos; &amp;#8211; and we&apos;ll do serialization differently when we move over to the Cell Interface.&lt;/p&gt;

&lt;p&gt;On the MR code not having to change because KeyValueSerialization will encapsulate KV protos, thats better still.&lt;/p&gt;</comment>
                            <comment id="13508115" author="stack" created="Sun, 2 Dec 2012 00:23:57 +0000"  >&lt;p&gt;Or, I wonder, maybe we should go for Cell now.  In pb, we should have Cell rather than KV and we should call out the KV particles &amp;#8211; row, family, etc. &amp;#8211; that would align w/ how Cell works.  Yeah, less efficient but we ain&apos;t doing much KV pb serializing it seems (Whats happening inside in Result?  We not using the KV protobuf there?)&lt;/p&gt;</comment>
                            <comment id="13508174" author="lhofhansl" created="Sun, 2 Dec 2012 06:07:34 +0000"  >&lt;p&gt;That&apos;d be cool! In Result we have pbs for Mutation, which serializes columns.&lt;br/&gt;
In M/R jobs there will be &lt;b&gt;massive&lt;/b&gt; amounts of KVs that are streamed from the mapper to the reducer, I do not think we want to introduce serialization that needs to copy each KV in its entirety before it can serialized.&lt;/p&gt;

&lt;p&gt;If that pb can serialize subportions of an array we can use Cell now and still efficiently serialize KVs.&lt;/p&gt;

&lt;p&gt;I.e. we&apos;d have allow the pb to somehow know about the row array, row offset, and rowlength, as well as CF array/offset/length, qual arrary/offset/length, and value array/offset/length and be able to serialize the subportions of these arrays.&lt;br/&gt;
If we have this is no longer matters whether the data is stored in a single array or many.&lt;br/&gt;
(Just to state the obvious, that the whole idea behind the Cell interface).&lt;/p&gt;</comment>
                            <comment id="13508416" author="stack" created="Mon, 3 Dec 2012 00:32:19 +0000"  >&lt;blockquote&gt;&lt;p&gt;In Result we have pbs for Mutation, which serializes columns.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t see that.  I see:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 24 /**
 23  * For performance reason, we don&apos;t use KeyValue
 22  * here. We use the actual KeyValue bytes.
 21  */
 20 message Result {
 19   repeated bytes keyValueBytes = 1;
 18 }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... which looks like it would be a bit tough to evolve.  We should change this (Am I looking in wrong place?)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In M/R jobs there will be massive amounts of KVs that are streamed from the mapper to the reducer, I do not think we want to introduce serialization that needs to copy each KV in its entirety before it can serialized.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah.  Could do something particular for MR but can&apos;t be something that would stop our evolving KV/Cell over MR or over RPC.&lt;/p&gt;

&lt;p&gt;Not sure how we&apos;d do that though currently.  Maybe a Result has a CellInputStream into which we write the Cells (or whatever &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; called it &amp;#8211; what was it Matt?  I don&apos;t seem to see it in committed hbase-common) and we give this blob to pb to serialize.... then then on other end we do the CellOutputStream reading them.....&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I.e. we&apos;d have allow the pb to somehow know about the row array, row offset, and rowlength, as well as CF array/offset/length, qual arrary/offset/length, and value array/offset/length and be able to serialize the subportions of these arrays.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;IIUC, not sure this possible. I think you are implying custom pb builder?  I may have you wrong.&lt;/p&gt;</comment>
                            <comment id="13508471" author="lhofhansl" created="Mon, 3 Dec 2012 04:58:45 +0000"  >&lt;p&gt;You are right. I was looking at Mutate, which (for Put/Delete/Append) also serializes KVs, but there it does it column by column. Sigh.&lt;/p&gt;

&lt;p&gt;Re: Custom PB. Specifically what I meant is something that can serialize a &quot;Cell&quot; that is composed of four separate byte[]&apos;s (row/cf/qual/val) and then de-serialize as a single byte[], and vice versa (without copying the bytes - other than copying them into network buffers where necessary)&lt;br/&gt;
Maybe something can be done with union types or extensions.&lt;br/&gt;
(Ironically with Writables this would be a trivial problem to solve)&lt;/p&gt;

&lt;p&gt;Cell&lt;span class=&quot;error&quot;&gt;&amp;#91;In|Out&amp;#93;&lt;/span&gt;PutStream would use PBs? If not, we&apos;re where we started &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13508973" author="mcorgan" created="Mon, 3 Dec 2012 19:42:46 +0000"  >&lt;p&gt;Not sure I follow everything so far, but I&apos;m wondering if KeyValue should just keep the Writable interface since KeyValue is the unit of input/output in certain map-reduce jobs.  The Cell interface improves on KeyValue when you are passing around blobs of many Cells (since they can share common row-prefixes, etc), but for map-reduce we are passing around individual Cells, so might as well just keep using KeyValue.  The Cells need to be standalone, so KeyValue may be required.&lt;/p&gt;

&lt;p&gt;Are there benefits to removing Writable for this particular class beyond cleaning up the code?  Maybe saving 4-8 bytes memory per KV in the memstore.&lt;/p&gt;</comment>
                            <comment id="13510731" author="stack" created="Wed, 5 Dec 2012 20:19:49 +0000"  >&lt;p&gt;Following up on our discussion from yesterday, we seemed to agree that hbase should ship w/ the KV pb&apos;d broken up into its constituent elements so we can evolve KV over time.  The downside, as was voiced yesterday, is that we are pretty sure will make hbase horribly slow as we make copies of byte arrays as we add them to pb messages and then as pb composes the serialized version of the message to rpc (protobuf does not stream; see this protostuff page on pros/cons of pb: &lt;a href=&quot;http://code.google.com/p/protostuff/wiki/ThingsYouNeedToKnow&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/protostuff/wiki/ThingsYouNeedToKnow&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;What was suggested yesterday was that client could say what it could accept and then the server would write alternatively dependent on what the client volunteered.&lt;/p&gt;

&lt;p&gt;For example, protostuff supports streaming.  If client says it can do protostuff, then we&apos;d do protostuff interchange.&lt;/p&gt;

&lt;p&gt;Protostuff might not be what we&apos;d want to move too though.  Avro does not seem to stream going by a cursory glance.  We could do custom serialization for the blob that comes after a pb header identifying what follows &amp;#8211; how it was serialized, what version, either size or a continuation flag, etc. &amp;#8211; and the blob could be a prefixtree&apos;d blob whether a Result or a Put, etc.&lt;/p&gt;

&lt;p&gt;Let me edit the subject on this issue.  Its scope is actually broader than that mentioned.&lt;/p&gt;</comment>
                            <comment id="13510732" author="tlipcon" created="Wed, 5 Dec 2012 20:23:15 +0000"  >&lt;p&gt;For the RPC transport, I&apos;d vote that we reuse some of the &quot;block encoder&quot; type stuff that we&apos;ve got in HFile. That way we get prefix compression on the transport of a list of KVs within RPC, which should improve performance.&lt;/p&gt;</comment>
                            <comment id="13510802" author="mcorgan" created="Wed, 5 Dec 2012 21:36:32 +0000"  >&lt;p&gt;Most of the ProtocolBuffer uses are not performance critical and PB gives great flexibility and a well-known paradigm, but sending big chunks of Cells over the wire as fast as possible in a long scan is worth a special case i&apos;d say.  Using the DataBlockEncoding stuff might consume roughly the same cpu as PB encoding on the server, but will save a ton of network bandwith for many tables and would be much easier for the client to decode.&lt;/p&gt;</comment>
                            <comment id="13510838" author="stack" created="Wed, 5 Dec 2012 22:14:45 +0000"  >&lt;p&gt;As I see it then, we&apos;ll send a pb Result and then on the wire, it&apos;ll be directly followed by an encoded block of KVs.  The Result will describe the block that is coming immediately after.  Need to do same for Mutation sending in the data.&lt;/p&gt;

&lt;p&gt;Hopefully, can doctor the rpc so I can get better access to the channel.  Currently we are composing the response in a bytebuffer that we give to a WritableByteChannel (this is after pb has done similar when we build the messages).  The composing of the response in a bytebuffer is a known temporary stopgap while moving to pb but we&apos;ll need to undo it before we ship (except when doing secure connection.. there we need to sasl wrap the byte array response).&lt;/p&gt;

&lt;p&gt;Let me finish the baseline case where we do pure pb throughout.  Then will have a go at trying to send a follow-along encoded block.&lt;/p&gt;</comment>
                            <comment id="13511051" author="lhofhansl" created="Thu, 6 Dec 2012 03:16:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;As I see it then, we&apos;ll send a pb Result and then on the wire, it&apos;ll be directly followed by an encoded block of KVs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That makes sense. Would need to be extremely careful to still have wire compatibility. I.e. when a new serialization format comes along for the KV block, we cannot just send the new encoding along (even when announced in the header), the other side would not know what to do with it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;except when doing secure connection.. there we need to sasl wrap the byte array response&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&apos;s interesting. Is there no way around this?&lt;/p&gt;

&lt;p&gt;We could use a GatheringByteChannel and then assemble the response piecemeal.&lt;/p&gt;</comment>
                            <comment id="13511156" author="stack" created="Thu, 6 Dec 2012 06:54:28 +0000"  >&lt;p&gt;Yeah, will have to keep versions on datablockencoding.&lt;/p&gt;

&lt;p&gt;Clients other than hbase clients will be pretty hosed; if they are doing pure pb, hbase will be dog slow marshaling and unmarshaling, and if they want to go faster, they&apos;ll have to implement datablockencoding in whatever their language.&lt;/p&gt;

&lt;p&gt;Looking, avro would let us pass schema independent of data &amp;#8211; say at connection setup &amp;#8211; and because schema is external, could have tight on the wire representation.  It lets you stream too it seems (haven&apos;t looked in code).  Thrift supposedly too.&lt;/p&gt;</comment>
                            <comment id="13511171" author="lhofhansl" created="Thu, 6 Dec 2012 07:12:27 +0000"  >&lt;blockquote&gt;&lt;p&gt;Yeah, will have to keep versions on datablockencoding.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Will that be enough to have old clients talk to new server (or vice versa)? That&apos;s what Writable did, and it did not work so well. Client and Server have pre-negotiate what they understand?&lt;/p&gt;</comment>
                            <comment id="13511183" author="stack" created="Thu, 6 Dec 2012 07:26:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;Will that be enough to have old clients talk to new server (or vice versa)? &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Should have said, new server would also have to be able to do the old datablockencoding formats too &amp;#8211; whatever the client proffered &amp;#8211; or else fall back to lowest common denominator pb all the time.&lt;/p&gt;</comment>
                            <comment id="13511196" author="mcorgan" created="Thu, 6 Dec 2012 07:37:51 +0000"  >&lt;p&gt;few thoughts:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;we can make a KEY_VALUE encoder that serializes cells in the current wire format which is pretty simple for other languages to parse.  it can be a slightly more performant fallback than per-field protocol buffers&lt;/li&gt;
	&lt;li&gt;encoders will have to be backwards compatible for a while on the server anyway because people have lots of hfiles encoded with them&lt;/li&gt;
	&lt;li&gt;encoders could have versions, but they are also pretty intricate, so any changes might merit a whole new encoder like FAST_DIFF2&lt;/li&gt;
	&lt;li&gt;the client could pass a short list of encoder options in decending order of preference like FAST_DIFF2, KEY_VALUE, PB, where PB is the forever-supported fallback&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I&apos;m a little skeptical that this will be the last client hbase ever supports.  If something really major changes, we could make a whole new client and the server could translate things to support the old client.&lt;/p&gt;</comment>
                            <comment id="13511216" author="apurtell" created="Thu, 6 Dec 2012 08:07:56 +0000"  >&lt;p&gt;Perhaps the title of this JIRA should be shortened to simply &quot;Serializing KeyValues&quot;.&lt;/p&gt;

&lt;p&gt;Using any of protobufs, Avro, or Thrift for marshalling/unmarshalling the KeyValue is unlikely to be viable, lots of object creation churn, small copies, this will kill performance. However sending a protobuf encoded prologue to a stream of KVs to a client makes sense.&lt;/p&gt;

&lt;p&gt;I like the idea of KeyValue encoder.&lt;/p&gt;

&lt;p&gt;I also like the idea of negotiating KeyValue encoder selection at connection setup time.&lt;/p&gt;

&lt;p&gt;Beyond RPC, I&apos;ve been looking at extending KeyValue to add tags as described in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6222&quot; title=&quot;Add per-KeyValue Security&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6222&quot;&gt;&lt;del&gt;HBASE-6222&lt;/del&gt;&lt;/a&gt;. What I have is a &quot;transitional approach&quot;. No matter what else happens here, if KeyValue could be a versioned serialization that would be great, we could introduce tags without overloading existing fields in ugly ways (e.g. writing a negative value length to indicate the presence of tags). Or, without storing tags physically distinct from their KVs in a separate shadow column. I have implementations that do both, the latter has some undesirable cost as you might imagine. Versioning KeyValue is tricky if we must be backwards compatible with existing data, if migration does not involve a HFile rewrite step. How controversial is this?&lt;/p&gt;</comment>
                            <comment id="13511220" author="stack" created="Thu, 6 Dec 2012 08:11:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;we can make a KEY_VALUE encoder that serializes cells in the current wire format which is pretty simple for other languages to parse. it can be a slightly more performant fallback than per-field protocol buffers&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;So, set a pb header and then write out &amp;lt;length&amp;gt;&amp;lt;bytearray&amp;gt; as we have now after we send the pb.  It won&apos;t be evolvable, right?  Unless we put a &apos;version&apos; in the pb header or client I suppose could say what version of this it wants and server would accomodate?&lt;/p&gt;</comment>
                            <comment id="13511233" author="stack" created="Thu, 6 Dec 2012 08:30:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;I like the idea of KeyValue encoder.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;d write &amp;lt;length&amp;gt;&amp;lt;bytearray&amp;gt;&amp;lt;length&amp;gt;&amp;lt;bytearray&amp;gt; and the byte array would be the backing array of a KV?  The format version would be in the pb preamble.  Client would volunteer what it could digest.  We&apos;d package the kv appropriately... version1 if that was what they asked for.  If they asked for version2, they&apos;d get Andrew&apos;s tags if any specified?&lt;/p&gt;

&lt;p&gt;A step above this would be a datablock encoder for sending lots of KVs in a compact form.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How controversial is this?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Rewriting all hfiles?  Pretty controversial I&apos;d say.  Maybe you were talking about how tricky versioning KV is?&lt;/p&gt;

&lt;p&gt;Changed title of issue.  Moved its original intent, removing Writable from KV to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7289&quot; title=&quot;Strip Writable from KeyValue&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7289&quot;&gt;&lt;del&gt;HBASE-7289&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;
</comment>
                            <comment id="13511254" author="apurtell" created="Thu, 6 Dec 2012 09:06:24 +0000"  >&lt;blockquote&gt;&lt;p&gt;&#160;We&apos;d package the kv appropriately... version1 if that was what they asked for. &#160;If they asked for version2, they&apos;d get Andrew&apos;s tags if any specified?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;On disk encoding. The tags should be serialized with the KV, inline, so can be read with the KV data in the same read op.&#160;&lt;/p&gt;

&lt;p&gt;What I&apos;m doing now, for backwards compatibility, is write the value length as negative integer to flag the presence of tags and store the tags pretended to user data as part of the value section of the KV. It&apos;s ugly. Or, as mentioned, I store tags distinct from their associated KVs as KVs in a shadow column family. Especially when you up Blockcache pressure you can see a significant latency penalty on gets for the latter. Putting tags inline seems wise. How to get them in? Or, what about future evolution of KV? I would really prefer not to double the number of kV types just to say &quot;foo with tags&quot;. And then double again for &quot;foo with tags and bar&quot;.&lt;/p&gt;</comment>
                            <comment id="13511611" author="mcorgan" created="Thu, 6 Dec 2012 18:47:54 +0000"  >&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;So, set a pb header and then write out &amp;lt;length&amp;gt;&amp;lt;bytearray&amp;gt; as we have now after we send the pb.&lt;/p&gt;&lt;/blockquote&gt;That&apos;s what I was thinking, except now we send the Cells through an official DataBlockEncoder to generate the &amp;lt;bytearray&amp;gt; rather than using the custom KeyValue serializer in use right now.  We can make a new DataBlockEncoder that mimics the byte[] output of the current RPC format so it has roughly the same performance as the current client.&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;It won&apos;t be evolvable, right?  Unless we put a &apos;version&apos; in the pb header or client&lt;/p&gt;&lt;/blockquote&gt;We could put a version in the PB header. Probably safe to put a version in the header even if it never gets used.  I also have a version in the internal PrefixTree encoder, but an extra version byte here or there doesn&apos;t hurt anything.&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;It&apos;d write &amp;lt;length&amp;gt;&amp;lt;bytearray&amp;gt;&amp;lt;length&amp;gt;&amp;lt;bytearray&amp;gt; and the byte array would be the backing array of a KV?&lt;/p&gt;&lt;/blockquote&gt;Regarding the multiple &amp;lt;length&amp;gt;&amp;lt;bytearray&amp;gt; here - is each section a separate RPC message, or there is a section per region from a single regionserver?&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;Rewriting all hfiles? Pretty controversial I&apos;d say.&lt;/p&gt;&lt;/blockquote&gt;Is the idea to use Protocol Buffers to write the data blocks in the HFiles?  That seems like a performance problem.  Or just the metadata like FixedFileTrailer?&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;I would really prefer not to double the number of kV types just to say &quot;foo with tags&quot;. And then double again for &quot;foo with tags and bar&quot;.&lt;/p&gt;&lt;/blockquote&gt;That would be ugly, but at the same time it&apos;s difficult and maybe wasteful to future-proof it from every angle.  Tags are already sort of a flexible future-proofing mechanism.  Maybe tags can be added in a backwards compatible way to the existing encoders.  I&apos;d have to think about it for PrefixTree, probably punting them to a PREFIX_TREE2 encoder with some other additions/improvements.&lt;/p&gt;</comment>
                            <comment id="13512006" author="mcorgan" created="Thu, 6 Dec 2012 18:55:07 +0000"  >&lt;p&gt;doh - looks like i added an accidental quote tag after &quot;We could put a version in the PB header.&quot; so the remaining quotes are all inverted.  I don&apos;t have permission to edit it.&lt;/p&gt;</comment>
                            <comment id="13512012" author="lhofhansl" created="Thu, 6 Dec 2012 19:03:11 +0000"  >&lt;p&gt;I fixed it.&lt;/p&gt;</comment>
                            <comment id="13512052" author="stack" created="Thu, 6 Dec 2012 19:49:14 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andrew.purtell%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;andrew.purtell@gmail.com&quot;&gt;Andrew Purtell&lt;/a&gt; Lets make it so KV is evolvable else lets go home!  Has to be backward compatible though &amp;#8211; yeah.  Can you not leverage the hfile version and if older, transform old to new style blocks?  (Sorry if that a dumb idea.  Did you look at overriding the key type to add in &apos;version&apos; on the top few bits?  Hmm... that is probably no good because you need to be able to find the type in the middle of the byte array ... )&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...and store the tags pretended to user data as part of the value section of the KV.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Ugh.  Yeah, needs to be inline.&lt;/p&gt;

&lt;p&gt;So, we can say that KV is going to evolve so we need to just deal.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; We can&apos;t do pb kvs to put them into an hfile.  Sorry if you got that impression.  Would be just way too slow.&lt;/p&gt;

&lt;p&gt;I think a new KV/Cell format would require a new encoder, one that could send all in the new format.  Clients would ask for the new encoder format only if they knew how to decode.&lt;/p&gt;

&lt;p&gt;Chatting w/ Todd, he had some good suggestions.  I tried on him my concern that we would be putting ourselves in a ghetto if we are not spitting a well-known serialization like avro or thrift out the front door.  He made Andrew&apos;s above argument that can&apos;t do prefixtree like compressions w/ thrift/avro and that a client that goes natively against hbase is already an undertaking keeping cache of regions etc., so not too much to ask it be able to do at least a basic data block encoding/decoding.&lt;/p&gt;

&lt;p&gt;Rather than KVs, because they are too atomic an entity, we should probably send datablocks after we send a pb header (as per Matt).  The most basic would serialize kvs as we do now (as per Matt).&lt;/p&gt;

&lt;p&gt;Other interesting suggestions were sending the data first, before we send the pb header describing its content w/ say a DATA&amp;lt;length&amp;gt; prefix so client accumulates the data and then reads the pb header to figure which encoder to use on it.  So, at its base, our RPC becomes sending of DATA&amp;lt;length&amp;gt; and PBUC&amp;lt;serialized delimited pb&amp;gt;.&lt;/p&gt;
</comment>
                            <comment id="13526041" author="stack" created="Fri, 7 Dec 2012 00:22:49 +0000"  >&lt;p&gt;Looking at DataBlockEncoder, it has KeyValue and mvcc pollution.  Its hfile origins are showing through.  I&apos;d think that we&apos;d want a more basic Interface than this, a DataBlockEncoder that does Cells.  Looking at pulling out the more basic Interface, it is a bit of work.  I&apos;m thinking that we try and get something going w/ DBE as it is and then come along later to do clean up after.  It&apos;ll help us figure what in the current DBE is needed putting Cells on the wire.&lt;/p&gt;</comment>
                            <comment id="13526071" author="mcorgan" created="Fri, 7 Dec 2012 01:26:22 +0000"  >&lt;p&gt;Will clients ever want a value in the mvccVersion?  We can probably nullify that when encoding for the client, so maybe the includesMemstoreTS parameter is necessary?&lt;/p&gt;

&lt;p&gt;In the replacement interface, we&apos;ll want to switch from encoding a ByteBuffer of KeyValue format bytes to a streaming interface where Cells are given to the encoder individually and a flush method is called when you want the encoded byte[] spit out.  We should probably split the Encoder, Decoder, and Seeker interfaces as well.&lt;/p&gt;</comment>
                            <comment id="13526937" author="stack" created="Sat, 8 Dec 2012 00:51:12 +0000"  >&lt;blockquote&gt;&lt;p&gt;Will clients ever want a value in the mvccVersion?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No.  MVCC is server internals.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In the replacement interface, we&apos;ll want to switch from encoding a ByteBuffer of KeyValue format bytes to a streaming interface where Cells are given to the encoder individually and a flush method is called when you want the encoded byte[] spit out. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Streaming Interface sounds good.  Should we call these new base classes Encoder, Encoding, Context, etc..... i.e. drop the DataBlock prefix.  Hopefully DataBlockEncoder could inherit Encoder.&lt;/p&gt;</comment>
                            <comment id="13527331" author="mcorgan" created="Sun, 9 Dec 2012 04:07:55 +0000"  >&lt;p&gt;I wouldn&apos;t mind dropping the &quot;DataBlock&quot; prefix as it gets a little unwieldy in places.  It&apos;s a confusing right now that there is a DataBlockEncoder which arranges bytes and an HFileDataBlockEncoder that sets up and triggers the DataBlockEncoder.  There is also a NoOpDataBlockEncoder which should really be called NoOpHFileDataBlockEncoder.  Could do:&lt;/p&gt;

&lt;p&gt;DataBlockEncoding -&amp;gt; Encoding&lt;br/&gt;
DataBlockEncoder -&amp;gt; Encoder&lt;br/&gt;
HFileDataBlockEncoder -&amp;gt; HFileEncoder&lt;br/&gt;
NoOpDataBlockEncoder -&amp;gt; NoOpHFileEncoder&lt;br/&gt;
HFileBlockEncodingContext -&amp;gt; HFileEncodingContext&lt;/p&gt;

&lt;p&gt;Though the HFileEncoders are not really encoders at heart - they&apos;re just setting up the environment for the actual encoders.  It&apos;s more like an HFileBlockConverter.&lt;/p&gt;</comment>
                            <comment id="13527660" author="stack" created="Mon, 10 Dec 2012 00:21:58 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; Why does CellOutputStream not throw IOE when you call write or flush?  Where is the CellInputStream?  It does not seem to be checked in?  Or CellIterator whatever it was called?&lt;/p&gt;
</comment>
                            <comment id="13527661" author="stack" created="Mon, 10 Dec 2012 00:22:52 +0000"  >&lt;p&gt;Starting in sketching encoder/decoder.&lt;/p&gt;</comment>
                            <comment id="13527666" author="mcorgan" created="Mon, 10 Dec 2012 00:34:37 +0000"  >&lt;p&gt;Here&apos;s CellOutputStream: &lt;a href=&quot;https://github.com/apache/hbase/blob/trunk/hbase-common/src/main/java/org/apache/hbase/cell/CellOutputStream.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/hbase/blob/trunk/hbase-common/src/main/java/org/apache/hbase/cell/CellOutputStream.java&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&apos;m rethrowing IOExceptions as unchecked exceptions in the current code else they will need to be declared basically everywhere.  I thought at one point there was a notion of reducing the checked exceptions, which i&apos;m a big fan of, but I guess we haven&apos;t gone down that route yet.  So yeah, flush() should throw IOException and i will stop converting them in prefix-tree module.&lt;/p&gt;</comment>
                            <comment id="13528179" author="stack" created="Mon, 10 Dec 2012 19:00:32 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; I was looking for the inverse of CellOutputStream.  Its not committed?  I suppose its CellScanner looking at your prefix tree.  Should I commit it as part of this patch to hbase-common?  We should use the name CellInputStream I&apos;d say... will make &lt;/p&gt;

&lt;p&gt;On IOE, mind pointing me at an example where you are rethrowing IOEs unchecked exceptions?  You mean this?&lt;/p&gt;

&lt;p&gt;+    // try &lt;/p&gt;
{
+    os.write(b);
+    // }
&lt;p&gt; catch (IOException e) &lt;/p&gt;
{
+    // throw new RuntimeException(e);
+    // }

&lt;p&gt;Yeah, the IOE stuff is all over the place and appreciate your trying to remove them but thinking that they are likely legit here of all places?  The write should throw IOE in CellOutputStream too?&lt;/p&gt;</comment>
                            <comment id="13528196" author="mcorgan" created="Mon, 10 Dec 2012 19:23:07 +0000"  >&lt;p&gt;Yeah - inverse of CellOutputStream is CellScanner, though now thinking it should not even have the resetToBeforeFirstEntryMethod() for cases where you can no longer access the beginning of the stream, like when scanning chunks of cells coming across the wire.  CellScanner is basically taking the sequential access methods of KeyValueScanner, while CellSearcher has the random access methods.  I was thinking they should be separate because you can&apos;t always do random access, like when streaming server-&amp;gt;client.&lt;/p&gt;

&lt;p&gt;I was leaving them in the prefix-tree module in case we wanted to adapt KeyValueScanner rather than replacing it.  But it looks like you need something to work with in the mean time, so I&apos;d say using the CellScanner is a good solution.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure about the IOException on CellOutputStream.write() given that the interface also has the flush() method.  Like what does flush do if write is doing IO?  All of my use cases use it more like a buffer/append method where you are writing it only to memory structures.  That being said, looks like java.io.OutputStream.write() throws it, so i suppose we should follow suit.&lt;/p&gt;</comment>
                            <comment id="13529644" author="stack" created="Wed, 12 Dec 2012 05:55:02 +0000"  >&lt;blockquote&gt;&lt;p&gt;...though now thinking it should not even have the resetToBeforeFirstEntryMethod()...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think that is right.  You need to have a markable stream or some such under it to do the above.  Maybe you&apos;d have resetToBeforeFirstEntryMethod on something that implemented CellSearcher?&lt;/p&gt;

&lt;p&gt;I pulled in CellScanner and its dependency into the patch I&apos;m to attach here.&lt;/p&gt;

&lt;p&gt;I think adding IOE to CellOutputStream and its inverse CellScanner is probably right.&lt;/p&gt;</comment>
                            <comment id="13529648" author="stack" created="Wed, 12 Dec 2012 06:04:47 +0000"  >&lt;p&gt;This patch adds org.apache.hbase.io.codec.  In this package is Decoder and Encoder Interface.  They are very simple (I was adding crap like Contexts&apos; and I also had them subclassing CellOutputScanner for a while, etc., but in the end stripped the stuff back to basic form because I think will learn what is really needed when go to use them rpc&apos;ing).  There are two codecs.  One that writes out KeyValues and reads them back.  Ditto for writing Cells (We need a CellFactory, something to make up a Cell from component parts.  For now using KeyValue constructor).&lt;/p&gt;

&lt;p&gt;It puts CellOutputStream and CellScanner into org.apache.hbase.io.&lt;/p&gt;

&lt;p&gt;Comments appreciated.  Wondering in particular if Interface will work for Encoders that compress; i.e. PrefixTree.  Next step would be  making FastDiff or Prefix compression work against the Interface.&lt;/p&gt;

&lt;p&gt;Questions that came up:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; Do you you know if your vint stuff is faster than what is in hadoop in WritableUtils.vint?&lt;/li&gt;
	&lt;li&gt;I have a &apos;finish&apos; method on the encoder so can write out end-of-encoding markers.  This might be obnoxious.  Does make it so you don&apos;t need to know length ahead of time.&lt;/li&gt;
&lt;/ul&gt;


</comment>
                            <comment id="13529652" author="stack" created="Wed, 12 Dec 2012 06:11:03 +0000"  >&lt;p&gt;Add some missing classes.&lt;/p&gt;</comment>
                            <comment id="13529683" author="mcorgan" created="Wed, 12 Dec 2012 07:01:58 +0000"  >&lt;p&gt;Good stuff Stack.  Some thoughts:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Move the codec package up out of io package?  For readability, but also may be doing some encoding/decoding that&apos;s purely in memory at some point (memstore)&lt;/li&gt;
	&lt;li&gt;Do we need both Encoder and CellOutputStream interfaces?&lt;/li&gt;
	&lt;li&gt;You think CodecException should extend IOException?  I was thinking they&apos;re separate concepts that just happen to be used together a lot.  Like if we encode the memstore it would throw IOExceptions.  Looks to be from the relationship between CellOutputStream and Encoder which I&apos;m not clear on.&lt;/li&gt;
	&lt;li&gt;I saw you grabbed the CellSearcher interface from prefix-tree as well.  I&apos;m not confident that the methods in that one are best for all of hbase, but we can change them later when we figure out what should be there.  Same with ReversibleCellScanner.&lt;/li&gt;
	&lt;li&gt;I saw you changed CellScanner.next() (an ambiguous word) to read() which is fine.  I&apos;d throw advance() in as a candidate - i guess you&apos;re picturing RPC decoding and i&apos;m picturing block decoding.  Not important&lt;/li&gt;
&lt;/ul&gt;


&lt;blockquote&gt;&lt;p&gt;resetToBeforeFirstEntryMethod on something that implemented CellSearcher?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;yep, CellSearcher&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Wondering in particular if Interface will work for Encoders that compress; i.e. PrefixTree.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think it will work great on the underlying DataBlockEncoders.  Tricky part is figuring out how to modify the HFileDataBlockEncoderImpl to allow the streaming.  Might be able to simplify that thing in the process.  I wonder if it&apos;s time to ditch the separate disk/memory encoding feature as I have a feeling people don&apos;t use it.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do you you know if your vint stuff is faster than what is in hadoop in WritableUtils.vint?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Speed difference is probably negligible.  I made that one because it encodes only positive numbers, so you can get 255 in 1b rather than only 127.  It can actually matter when writing a lot of vint indexes into a token dictionary type thing.  You&apos;re using it to write array lengths which are always positive, so probably a good fit, but i originally intended for it to be hidden in the prefix-tree&apos;s black box implementation.&lt;/p&gt;</comment>
                            <comment id="13529711" author="stack" created="Wed, 12 Dec 2012 07:33:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;Move the codec package up out of io package?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah, could.  Let me look.  I was thinking codecs always going against stream but you make a good point if we memstore it.  Will fix codecexception too.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Do we need both Encoder and CellOutputStream interfaces?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t follow unless you are saying I should just use COS in place of Encoder ... I had Encoder extend COS for a while.  It could work.  What to do about the COS IOEs though?  We&apos;d have them bubble up through codec implementations?&lt;/p&gt;

&lt;p&gt;On CellSearcher, I grabbed it but am not using it.  Will drop from patch for now.  I want a random seeker Interface.  This looks like it has what we&apos;d need.  I was thinking a codec could implement the Decoder or CellScanner AND CellSearcher.  Would not be backed by a stream.&lt;/p&gt;

&lt;p&gt;On CellScanner#next vs #read, yeah, I changed it to #read but actually thought I&apos;d put it back to #next.  It was #read because I&apos;d renamed CellScanner as CellInputStream to match CellOutputStream... but then went back on myself.  Will fix.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I wonder if it&apos;s time to ditch the separate disk/memory encoding feature as I have a feeling people don&apos;t use it.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Not well enough versed to say whether or which.  I like idea of simplifying but at same time am afraid to touch and am more inclined to bump the hfile version and start writing new hfiles w/ new encoders keeping around the old encoding classes for reading legacy hfiles.&lt;/p&gt;

&lt;p&gt;Ok on the vints... ugh, I just noticed we have vint&apos;ing in Bytes class.... copied from WritableUtils... so could get byte arrays rather than streams.  Might use that.  Will look around toooooo&lt;/p&gt;

&lt;p&gt;Thanks for feedback.  Yeah, I&apos;m about rpc these times so good having differing perspectives on this stuff.&lt;/p&gt;

</comment>
                            <comment id="13529729" author="mcorgan" created="Wed, 12 Dec 2012 08:01:23 +0000"  >&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;I don&apos;t follow unless you are saying I should just use COS in place of Encoder&lt;/p&gt;&lt;/blockquote&gt;argh, i guess i don&apos;t have a better solution.  Was thinking encoder implementations implement the CellOutputStream, but the exceptions complicate it.  Would it be too weird to have CellOutputStream extend Encoder, adding the IOException?&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;I want a random seeker Interface. This looks like it has what we&apos;d need.&lt;/p&gt;&lt;/blockquote&gt;It&apos;s designed to be that, but might have a few more methods than hbase currently needs.  After some confusion, I found the EncodedSeeker does almost everything it needs with just positionAtOrBefore(Cell key).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Ok on the vints... ugh&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;fyi - on the UVintTool, there&apos;s a method that pulls the value off an InputStream without allocating objects: UVIntTool.getInt(InputStream is).  However, I think i&apos;d recommend sticking to well-known hadoop formats for the basic RPC stuff.  If people actually write high performance clients in other languages they would have to read/write these formats.&lt;/p&gt;</comment>
                            <comment id="13530436" author="stack" created="Wed, 12 Dec 2012 22:28:00 +0000"  >&lt;p&gt;Move stuff around per your review &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I removed Encoder and Decoder.  They add little.  Yeah, it means IOException but most of the time thats what we&apos;ll be throwing at its base when encoding/decoding.&lt;/p&gt;

&lt;p&gt;I think we need to rename CellScanner to CellInputStream and change the method name from next to read, especially when you look at this patch.  What you think Matt?&lt;/p&gt;</comment>
                            <comment id="13530503" author="mcorgan" created="Wed, 12 Dec 2012 23:45:02 +0000"  >&lt;p&gt;Sounds good to me.  The IOException on CellInputStream.read() may not be ideal since it will force its way all the way up through the StoreFileScanner, StoreHeap, StoreScanner, RegionHeap, RegionScanner, etc...  I haven&apos;t thought of a better suggestion though.  Can change later if we think of something.&lt;/p&gt;</comment>
                            <comment id="13530734" author="stack" created="Thu, 13 Dec 2012 06:46:44 +0000"  >&lt;p&gt;Putting this aside for a while until finish moving coprocessors over to protobuf.  This is in the way of making further progress with this and rpc.&lt;/p&gt;

&lt;p&gt;Thinking some more, rather than thinking in terms of blocks when writing and reading Cells on the wire, I&apos;d been thinking I&apos;d be reading individual KVs.  I now think CellInputStream wrong w/ its KV-centric view something I&apos;ll not use &amp;#8211; I&apos;ll want to use the block reading codecs instead.  I put back CellScanner. I  added to it a getDeepCopy method.  I foresee cases where we won&apos;t be able to put a CellScanner together with a CellOutputStream &amp;#8211; e.g. putting Cells into the memstore &amp;#8211; and we&apos;ll need to do deep copies in these cases.&lt;/p&gt;

&lt;p&gt;Putting aside for now&lt;/p&gt;</comment>
                            <comment id="13530750" author="mcorgan" created="Thu, 13 Dec 2012 07:13:57 +0000"  >&lt;p&gt;Sorry if I&apos;m confusing things.  Agree we need a well thought plan distinguishing between fine grained operations on individual cells through the scanners vs transferring blocks of cells to wire/disk.&lt;/p&gt;</comment>
                            <comment id="13530761" author="stack" created="Thu, 13 Dec 2012 07:40:19 +0000"  >&lt;p&gt;I was just going to apologize for confusing this issue by taking your model, changing it a few times, and then in essence coming back to the model you had in the first place.  Will be back to work on this for rpc after little cp-pb detour&lt;/p&gt;</comment>
                            <comment id="13531437" author="apurtell" created="Thu, 13 Dec 2012 20:20:55 +0000"  >&lt;blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;I would really prefer not to double the number of kV types just to say &quot;foo with tags&quot;. And then double again for &quot;foo with tags and bar&quot;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That would be ugly, but at the same time it&apos;s difficult and maybe wasteful to future-proof it from every angle. Tags are already sort of a flexible future-proofing mechanism. Maybe tags can be added in a backwards compatible way to the existing encoders. I&apos;d have to think about it for PrefixTree, probably punting them to a PREFIX_TREE2 encoder with some other additions/improvements.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The use case I&apos;m looking at is adding security policy information to KVs (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6222&quot; title=&quot;Add per-KeyValue Security&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6222&quot;&gt;&lt;del&gt;HBASE-6222&lt;/del&gt;&lt;/a&gt;), could be either ACLs or visibility labels, both can be handled the same way. There&apos;s a 1:1 mapping, so it makes sense to store the policy information in the KV. This also has the nice property of reading in the ACL &quot;for free&quot; in the same op that reads in the KV. I&apos;m not asking for specifically more than tagging KVs with this specific metadata but, given that tags could be easily made generic enough to support a number of other cases, I think it makes sense to do that. Then security is just one user of something more generally useful, we haven&apos;t done something fixed for security&apos;s sake only.&lt;/p&gt;

&lt;p&gt;Adding tag support to the encoders might be the right answer. Would we still have the trouble of teaching KeyValue about where in the bytebuffers coming out of the encoder the tag data resides? Any thoughts on how we might distinguish a KV with tags from one without? Maybe we don&apos;t, we just have the encoder add the discovered tag data to the KV by way of an API that adds out of band metadata to the KV&apos;s in memory representation? And likewise add tags to the blocks beyond the KV itself if they are present?&lt;/p&gt;</comment>
                            <comment id="13531619" author="mcorgan" created="Thu, 13 Dec 2012 23:20:32 +0000"  >&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;Would we still have the trouble of teaching KeyValue about where in the bytebuffers coming out of the encoder the tag data resides?&lt;/p&gt;&lt;/blockquote&gt;Tags are a little different than our current fields because there are multiple per Cell.  For performance sake, we may want to keep the Cell interface to these low level methods: getTagsArray(), getNumTags(), getTagsOffset(), getTagsLength(), and then have methods for parsing them like &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;Iterable&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[]&amp;gt; tags = CellTool.getTagsIterator(cell)&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;.  So the requirement for the encoder/decoder would be to line them up in a single array: &amp;lt;vint length0&amp;gt;&amp;lt;bytes tag0&amp;gt;&amp;lt;vint length1&amp;gt;&amp;lt;bytes tag1&amp;gt;&amp;lt;etc&amp;gt;.&lt;/p&gt;

&lt;p&gt;Behind the scenes, tags could be encoded similarly to qualifiers (speaking for prefix-tree)&lt;/p&gt;

&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;Any thoughts on how we might distinguish a KV with tags from one without? &lt;/p&gt;&lt;/blockquote&gt;Could just have Cell.getNumTags() return 0&lt;/p&gt;
</comment>
                            <comment id="13531668" author="apurtell" created="Thu, 13 Dec 2012 23:59:41 +0000"  >&lt;blockquote&gt;&lt;p&gt;For performance sake, we may want to keep the Cell interface to these low level methods: getTagsArray(), getNumTags(), getTagsOffset(), getTagsLength(), and then have methods for parsing them &lt;span class=&quot;error&quot;&gt;&amp;#91;an iterator&amp;#93;&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed. My hack-patch does approximately this. &lt;/p&gt;

&lt;p&gt;I need to study up on how Cells would be materialized into KeyValues. In the AccessController we wrap InternalScanners with a filter that looks at each KeyValue on the way out to the client and evaluates their visibility to the user. Somehow from the KeyValue API we&apos;d need to get to the cell tags iterator to extract the ACL (or visibility tag).&lt;/p&gt;

&lt;p&gt;A type byte or even making tags name-value pairs would avoid accumulation of ad-hoc means for distinguishing between them.&lt;/p&gt;

&lt;p&gt;Tags stored on disk shouldn&apos;t necessarily be sent to clients, though for the sake of performance we can concede this, where/if streaming on disk encoding directly to the client.&lt;/p&gt;
</comment>
                            <comment id="13531685" author="yuzhihong@gmail.com" created="Fri, 14 Dec 2012 00:18:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;A type byte or &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Cell interface already provides type byte:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  /**
   * see {@link #KeyValue.TYPE}
   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; The &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; representation of the KeyValue.TYPE of &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; cell: one of Put, Delete, etc
   */
  &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt; getTypeByte();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13531686" author="apurtell" created="Fri, 14 Dec 2012 00:19:12 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ted_yu&quot; class=&quot;user-hover&quot; rel=&quot;ted_yu&quot;&gt;Ted Yu&lt;/a&gt; A type byte for the tag, not the KeyValue&lt;/p&gt;</comment>
                            <comment id="13546669" author="stack" created="Tue, 8 Jan 2013 07:21:41 +0000"  >&lt;p&gt;Some unfinished notes I&apos;ve been keeping on how to pass KeyValues: &lt;a href=&quot;https://docs.google.com/document/pub?id=1WEtrq-JTIUhlnlnvA0oYRLp0F8MKpEBeBSCFcQiacdw&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/document/pub?id=1WEtrq-JTIUhlnlnvA0oYRLp0F8MKpEBeBSCFcQiacdw&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13569729" author="stack" created="Sun, 3 Feb 2013 07:34:09 +0000"  >&lt;p&gt;Remove &apos;markers&apos; from end of &apos;blocks&apos;; let end instead be found because length was provided elsewhere.&lt;/p&gt;

&lt;p&gt;Purged Keyvalue from protos.  Just talk about Cell.&lt;/p&gt;

&lt;p&gt;Next will be an encoder/decoder that pbs Cells &amp;#8211; just to compare.&lt;/p&gt;

&lt;p&gt;Outstanding is if reading, we need CellSearcher rather than CellScanner.&lt;/p&gt;</comment>
                            <comment id="13569821" author="yuzhihong@gmail.com" created="Sun, 3 Feb 2013 17:30:28 +0000"  >&lt;p&gt;OldSchoolKeyValueDecoder.java and CodecException.java miss license.&lt;/p&gt;

&lt;p&gt;For OldSchoolKeyValueDecoder:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  @Override
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; next() {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.hasNext) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; !&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.hasNext;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;True is returned above. Does this align with the javadoc for next() ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  /**
+   * Advance the scanner 1 cell.
+   * @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; the next cell is found and getCurrentCell() will &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; a valid Cell
+   */
+  &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; next();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There seems to be dependency on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4676&quot; title=&quot;Prefix Compression - Trie data block encoding&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4676&quot;&gt;&lt;del&gt;HBASE-4676&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13571078" author="stack" created="Tue, 5 Feb 2013 06:15:28 +0000"  >&lt;p&gt;Moves Cell pb back into hbase-common.&lt;/p&gt;

&lt;p&gt;Includes a CellMessageCodec.&lt;/p&gt;

&lt;p&gt;Adds a primitive test harness to compare the old school KV serialization to manual Cell serialization to pb Message serialization of Cell.&lt;/p&gt;

</comment>
                            <comment id="13571080" author="stack" created="Tue, 5 Feb 2013 06:19:10 +0000"  >&lt;p&gt;Here are the last few runs encoding/decoding 100k KVs with small key and value (so, worst case).  I did 30 cycles each encoding then decoding so hotspot would cut in.  I print out the last three runs of each in below.&lt;/p&gt;

&lt;p&gt;In short, as has been said already, we can&apos;t have pb do Cell serialization.  Its ten times slower both encoding and decoding (I had a look w/ profiler and doesn&apos;t seem to be anything particularly dumb going on... encoding, its just the copying of byte arrays out of Cell into pb ByteString and then decoding, its inching over the stream reading varints and allocating the arrays to copy into).&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
13/02/04 21:57:05 INFO codec.CodecPerformance: 27 encoded count=100000 in 13ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; encoder org.apache.hbase.codec.KeyValueEncoder@7fcebc9f
13/02/04 21:57:05 INFO codec.CodecPerformance: 28 encoded count=100000 in 13ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; encoder org.apache.hbase.codec.KeyValueEncoder@5dc1ac46
13/02/04 21:57:05 INFO codec.CodecPerformance: 29 encoded count=100000 in 13ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; encoder org.apache.hbase.codec.KeyValueEncoder@14718242

13/02/04 21:57:06 INFO codec.CodecPerformance: 26 decoded count=100000 in 16ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.KeyValueDecoder@962522b
13/02/04 21:57:06 INFO codec.CodecPerformance: 27 decoded count=100000 in 27ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.KeyValueDecoder@53ea0105
13/02/04 21:57:06 INFO codec.CodecPerformance: 28 decoded count=100000 in 32ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.KeyValueDecoder@25dd9891
13/02/04 21:57:06 INFO codec.CodecPerformance: 29 decoded count=100000 in 16ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.KeyValueDecoder@774b6b02

13/02/04 21:57:08 INFO codec.CodecPerformance: 27 encoded count=100000 in 62ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; encoder org.apache.hbase.codec.BasicCellEncoder@407e75d2
13/02/04 21:57:08 INFO codec.CodecPerformance: 28 encoded count=100000 in 62ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; encoder org.apache.hbase.codec.BasicCellEncoder@2e694f12
13/02/04 21:57:08 INFO codec.CodecPerformance: 29 encoded count=100000 in 61ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; encoder org.apache.hbase.codec.BasicCellEncoder@4c309f9f

13/02/04 21:57:09 INFO codec.CodecPerformance: 27 decoded count=100000 in 38ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.BasicCellDecoder@76f1fad1
13/02/04 21:57:09 INFO codec.CodecPerformance: 28 decoded count=100000 in 37ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.BasicCellDecoder@5ee771f3
13/02/04 21:57:09 INFO codec.CodecPerformance: 29 decoded count=100000 in 40ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.BasicCellDecoder@1c8321c8

13/02/04 21:57:11 INFO codec.CodecPerformance: 7 decoded count=100000 in 174ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.CellMessageDecoder@64d1afd3
13/02/04 21:57:11 INFO codec.CodecPerformance: 8 decoded count=100000 in 176ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.CellMessageDecoder@4ecd200f
13/02/04 21:57:12 INFO codec.CodecPerformance: 9 decoded count=100000 in 175ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.CellMessageDecoder@151cc2a8

13/02/04 21:57:15 INFO codec.CodecPerformance: 27 decoded count=100000 in 178ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.CellMessageDecoder@4226c7da
13/02/04 21:57:15 INFO codec.CodecPerformance: 28 decoded count=100000 in 177ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.CellMessageDecoder@5083198c
13/02/04 21:57:15 INFO codec.CodecPerformance: 29 decoded count=100000 in 186ms &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; decoder org.apache.hbase.codec.CellMessageDecoder@263b84ee

&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13571097" author="stack" created="Tue, 5 Feb 2013 06:57:33 +0000"  >&lt;p&gt;Updated &lt;a href=&quot;https://docs.google.com/document/d/1WEtrq-JTIUhlnlnvA0oYRLp0F8MKpEBeBSCFcQiacdw/edit#&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/document/d/1WEtrq-JTIUhlnlnvA0oYRLp0F8MKpEBeBSCFcQiacdw/edit#&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13573002" author="stack" created="Wed, 6 Feb 2013 23:37:29 +0000"  >&lt;p&gt;Actually include new files.&lt;/p&gt;</comment>
                            <comment id="13573189" author="yuzhihong@gmail.com" created="Thu, 7 Feb 2013 04:52:57 +0000"  >&lt;p&gt;Fro KeyValueDecoder:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; next() {
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.hasNext) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; !&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.hasNext;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I think this.hasNext should be returned.&lt;/p&gt;

&lt;p&gt;For TestBasicCellCodec:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testOne() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
...
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testThree() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Would testOneKeyValue(), testThreeKeyValue() be better names ?&lt;br/&gt;
Similar comment for TestCellMessageCodec.testOne()&lt;/p&gt;

&lt;p&gt;For ProtobufUtil.java:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-        builder.addKeyValue(toKeyValue(c));
+        builder.addKeyValue(toCell(c));
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It would be nice if the method name for builder can be changed to addCell().&lt;/p&gt;</comment>
                            <comment id="13573204" author="stack" created="Thu, 7 Feb 2013 05:18:59 +0000"  >&lt;p&gt;Thanks for the comments.  First one is good.  Was sort of looking for more high-level commentary on whether this a good direction or not.&lt;/p&gt;</comment>
                            <comment id="13573210" author="yuzhihong@gmail.com" created="Thu, 7 Feb 2013 05:35:00 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class BasicCellDecoder &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; CellScanner {
+&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class CellMessageDecoder &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; CellScanner {
+&lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class KeyValueDecoder &lt;span class=&quot;code-keyword&quot;&gt;implements&lt;/span&gt; CellScanner {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The decoders all depend on InputStream#available(). It would be nice if class javadoc is added explaining the context where each of them would be used.&lt;/p&gt;</comment>
                            <comment id="13573220" author="stack" created="Thu, 7 Feb 2013 05:49:21 +0000"  >&lt;p&gt;Should have said more plainly that this is experimental/prototyping code for ideas mentioned in cited google doc and mentioned elsewhere over in rpc spec issue.  Patches are posted for high level &quot;does this look right&quot; feedback, not &quot;javadoc could be better&quot; or method naming suggestions.  Thanks.&lt;/p&gt;</comment>
                            <comment id="13573232" author="yuzhihong@gmail.com" created="Thu, 7 Feb 2013 06:09:02 +0000"  >&lt;p&gt;I read the google doc linked above. I think the patch reflects what the doc describes.&lt;br/&gt;
Meaning the direction is good.&lt;/p&gt;

&lt;p&gt;RPC spec mentions EncodedDataBlock in several places. I am not sure the spec has been updated.&lt;br/&gt;
Will go over the spec and patch in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7533&quot; title=&quot;Write an RPC Specification for 0.96&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7533&quot;&gt;&lt;del&gt;HBASE-7533&lt;/del&gt;&lt;/a&gt; tomorrow so that I can gain better understanding of these two JIRAs.&lt;/p&gt;</comment>
                            <comment id="13573241" author="stack" created="Thu, 7 Feb 2013 06:23:12 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ted_yu&quot; class=&quot;user-hover&quot; rel=&quot;ted_yu&quot;&gt;Ted Yu&lt;/a&gt; Beware it is a work in progress&lt;/p&gt;</comment>
                            <comment id="13573258" author="mcorgan" created="Thu, 7 Feb 2013 07:12:06 +0000"  >&lt;p&gt;I like it.  Nice and simple.&lt;/p&gt;

&lt;p&gt;What are your thoughts on BasicCellEncoder vs KeyValueEncoder?  Are you introducing the new &quot;BasicCell&quot; format because it&apos;s easier for a non-java client to decode?&lt;/p&gt;

&lt;p&gt;KeyValueEncoder appears faster in this benchmark because the serialization is less granular, but I think that will become irrelevant over time if we get the Cell interface all the way up the read path.  It&apos;s faster now because you know the input cell is KeyValue so can just cast.  If you don&apos;t know the input Cell implementation, you&apos;d have to append each KeyValue field separately.  &lt;/p&gt;

&lt;p&gt;Would probably be good to include BasicCellEncoder and KeyValue encoder just to make sure that the necessary abstractions are in place to add future encodings.  Later on, my guess is one of the delta-style encoders will be best for java client RPC.&lt;/p&gt;</comment>
                            <comment id="13573259" author="stack" created="Thu, 7 Feb 2013 07:14:45 +0000"  >&lt;p&gt;I think we should close this issue now.  Its scope has wandered and we got a bunch of use out of it but I think its time has come.&lt;/p&gt;

&lt;p&gt;The original intent was removing Writable from KV which has happened over in another issue.  How KVs went across MapReduce when not Writable came up and that got fixed out in other issues also.&lt;/p&gt;

&lt;p&gt;We then did a bunch of the back and forth on how to serialize KVs particularly across RPC.&lt;/p&gt;

&lt;p&gt;Most of the discussion has been captured here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1WEtrq-JTIUhlnlnvA0oYRLp0F8MKpEBeBSCFcQiacdw/edit#&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://docs.google.com/document/d/1WEtrq-JTIUhlnlnvA0oYRLp0F8MKpEBeBSCFcQiacdw/edit#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;...and will be realized in code over in the rpc revamp issue, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7533&quot; title=&quot;Write an RPC Specification for 0.96&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7533&quot;&gt;&lt;del&gt;HBASE-7533&lt;/del&gt;&lt;/a&gt; (patches added here will reappear in that issue)&lt;/p&gt;

&lt;p&gt;Regards Andrew&apos;s request regards &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6222&quot; title=&quot;Add per-KeyValue Security&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6222&quot;&gt;&lt;del&gt;HBASE-6222&lt;/del&gt;&lt;/a&gt; above on being able to pass a KeyValue version2, a v2 should make&lt;br/&gt;
it across the rpc and even into hfiles (after doing some work on EncodedDataBlocks so they sling Cells instead&lt;br/&gt;
of KVs) but what is required will not happen in this issue.&lt;/p&gt;

&lt;p&gt;The client and server will need to all be moved to reference the Cell Interface rather than KV1 as they currently do.  Only then could a KV2 traverse the client and server.  That is work to do (As Lars Hofhansl&apos;s found out, doing this often makes for speedups since we&lt;br/&gt;
are often realizing KVs when all we need is a piece).  Lets take up the effort to change the servers to be Cell based&lt;br/&gt;
rather than KV elsehwere.&lt;/p&gt;

&lt;p&gt;The EncodedDataBlocks revamp should happen elsewhere too.&lt;/p&gt;

&lt;p&gt;Neither of the above should hold up 0.96 release (A 0.96 client should be able to talk to&lt;br/&gt;
a future server that can do KV version 2).&lt;/p&gt;

&lt;p&gt;Should we add anything to the Cell Interface before 0.96 ships; e.g. the getTagsArray, etc., Matt suggets above for Andrew&apos;s tag work?  If so, lets get that in.&lt;/p&gt;

&lt;p&gt;Will close in a day or two unless objection.&lt;/p&gt;</comment>
                            <comment id="13573267" author="stack" created="Thu, 7 Feb 2013 07:24:28 +0000"  >&lt;blockquote&gt;&lt;p&gt;What are your thoughts on BasicCellEncoder vs KeyValueEncoder? Are you introducing the new &quot;BasicCell&quot; format because it&apos;s easier for a non-java client to decode?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; for review.&lt;/p&gt;

&lt;p&gt;I think KVEncoder will be lowest common denominator.  Should include BasicCellEncoder too.  The CellMessageCodec was just to see.  Not worth including I&apos;d say.  I should look again at BasicCellEncoder.  Might be able to make it a bit better.  Your point on KV codec having an unfair advantage currently is a indeed the case.  Will move this code over to the rpc issue hbase-7533.&lt;/p&gt;</comment>
                            <comment id="13573283" author="apurtell" created="Thu, 7 Feb 2013 07:45:35 +0000"  >&lt;p&gt;I&apos;m good if we have placeholders for tags (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7448&quot; title=&quot;Add tags to Cell API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7448&quot;&gt;&lt;del&gt;HBASE-7448&lt;/del&gt;&lt;/a&gt;) and can build on that as the Cell work takes shape. The first drop for &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-6222&quot; title=&quot;Add per-KeyValue Security&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-6222&quot;&gt;&lt;del&gt;HBASE-6222&lt;/del&gt;&lt;/a&gt; can use out of line storage for the ACL metadata with some slowdown. &lt;/p&gt;</comment>
                            <comment id="13573284" author="stack" created="Thu, 7 Feb 2013 07:50:03 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andrew.purtell%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;andrew.purtell@gmail.com&quot;&gt;Andrew Purtell&lt;/a&gt; What about additions to Cell Interface?  The ones Matt suggested above?  Too soon?&lt;/p&gt;</comment>
                            <comment id="13573288" author="mcorgan" created="Thu, 7 Feb 2013 07:55:10 +0000"  >&lt;p&gt;One idea is to version the codecs like BasicCellEncoderV1, then if we want to add tags we make V2.  To avoid historical version explosion we apply the normal policy of only supporting upgrade over a single major release.  Just delete the old versions after that.&lt;/p&gt;</comment>
                            <comment id="13573744" author="stack" created="Thu, 7 Feb 2013 18:21:20 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; Yeah, I think that the way to go.  Client can send over that it favors v2 but that it can do v1 too... Server will do to the best of its abilities.  This won&apos;t help &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andrew.purtell%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;andrew.purtell@gmail.com&quot;&gt;Andrew Purtell&lt;/a&gt; if he wants to refer to tags via the Cell Interface?  He&apos;ll have to cast to KV2 which will &apos;break&apos;?  So, wondering if we should add to Cell Interface now support for tags?  Only other feature we have ever talked of is adding a mvcc into the key but Interface already has that so a shift in how it is implemented should have no effect on the Cell Interface.&lt;/p&gt;</comment>
                            <comment id="13573756" author="apurtell" created="Thu, 7 Feb 2013 18:29:45 +0000"  >&lt;p&gt;If versioning the codecs like BasicCellEncoderV1, then could we have accessors for tags in the Cell interface but BasicCellEncoderV1 would throw UnsupportedOperationException, while a BasicCellEncoderV2 would support it? And/or a method in the interface that a user can interrogate for capabilities, i.e. can do tags or not?&lt;/p&gt;</comment>
                            <comment id="13573757" author="stack" created="Thu, 7 Feb 2013 18:32:45 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=andrew.purtell%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;andrew.purtell@gmail.com&quot;&gt;Andrew Purtell&lt;/a&gt; I was thinking would just return no tags in v1 rather than unsupported?&lt;/p&gt;</comment>
                            <comment id="13573760" author="apurtell" created="Thu, 7 Feb 2013 18:36:43 +0000"  >&lt;blockquote&gt;&lt;p&gt;I was thinking would just return no tags in v1 rather than unsupported?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure, easy.&lt;/p&gt;

&lt;p&gt;Let&apos;s at least get the placeholders in. Both &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7662&quot; title=&quot;[Per-KV security] Per cell ACLs stored in tags&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7662&quot;&gt;&lt;del&gt;HBASE-7662&lt;/del&gt;&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7663&quot; title=&quot;[Per-KV security] Visibility labels&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7663&quot;&gt;&lt;del&gt;HBASE-7663&lt;/del&gt;&lt;/a&gt; would need efficiently stored and accessed tags in KVs, and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=enis&quot; class=&quot;user-hover&quot; rel=&quot;enis&quot;&gt;Enis Soztutar&lt;/a&gt; was also talking about using KV tags for holding metadata for grouping rows recently if I recall correctly. It would be even better if there was a &quot;BasicCellEncoderV2&quot; that could actually store and retrieve tags, at least in unit tests, even if not baked enough to actually use until a later release. Enough to prove the tag accessor methods workable. Something to build on.&lt;/p&gt;</comment>
                            <comment id="13573784" author="mcorgan" created="Thu, 7 Feb 2013 19:00:34 +0000"  >&lt;p&gt;&lt;blockquote&gt;&lt;p&gt;So, wondering if we should add to Cell interface now support for tags?&lt;/p&gt;&lt;/blockquote&gt;Guess I&apos;m confused why we need to add it to the Cell interface now since the reason for the versioning is to enable us to add it later.  It would help future-proof the KeyValueEncoderV1?  I think Andy has found a way to work the tags into the current KeyValue serialization, so might not even need a V2 for that.&lt;/p&gt;</comment>
                            <comment id="13573823" author="apurtell" created="Thu, 7 Feb 2013 19:27:11 +0000"  >&lt;p&gt;Yeah I guess there is a little bit of confusion here. I was thinking Cell can support getting tag data, and the encoders might not support it (v1) or could (v2).&lt;/p&gt;

&lt;p&gt;Should tags be a concern of Cell or KV? &lt;/p&gt;

&lt;p&gt;As maybe an interesting consideration, I only need tags in on disk representation and actually should not send the ones I&apos;d be working with over the wire to the client.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I think Andy has found a way to work the tags into the current KeyValue serialization&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I did, but it is ugly IMHO: I store the value length as negative to flag the KV as one containing tag data, prepend delimited tag data to the user value data, and parse the tags into in-memory metadata and fix up offsets on KV instantiation. Do we actually want this? If so, then I guess we can have tagged KVs mixed with old KVs in a backwards compatible way.&lt;/p&gt;</comment>
                            <comment id="13573883" author="stack" created="Thu, 7 Feb 2013 20:20:15 +0000"  >&lt;p&gt;Tags should be concern of Cell else you will have to cast to KV2 before getting them.&lt;/p&gt;

&lt;p&gt;I&apos;d think we&apos;d add tag support to Cell so we don&apos;t have to change it later (that&apos;d be painful, wouldn&apos;t it?)&lt;/p&gt;</comment>
                            <comment id="13574120" author="mcorgan" created="Fri, 8 Feb 2013 00:58:31 +0000"  >&lt;p&gt;I don&apos;t see a big problem adding them to the interface.  Current encoders may ignore them when writing a file (which would be bad for security), but future or modified encoders could add support for them.&lt;/p&gt;</comment>
                            <comment id="13583428" author="stack" created="Thu, 21 Feb 2013 18:50:58 +0000"  >&lt;p&gt;Narrowed the title from the &apos;Serializing KeyValue&apos; to Serializing KeyValue over RPC&lt;/p&gt;</comment>
                            <comment id="13583456" author="stack" created="Thu, 21 Feb 2013 19:25:20 +0000"  >&lt;p&gt;I made &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7898&quot; title=&quot;Serializing Cells over RPC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7898&quot;&gt;&lt;del&gt;HBASE-7898&lt;/del&gt;&lt;/a&gt; for passing Cells over RPC and &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7897&quot; title=&quot;Add support for tags to Cell Interface&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7897&quot;&gt;&lt;del&gt;HBASE-7897&lt;/del&gt;&lt;/a&gt; for adding tags to Cells.  Let me close this issue now as won&apos;t fix.  I believe items raised here now have dedicated jiras.&lt;/p&gt;</comment>
                            <comment id="13583457" author="stack" created="Thu, 21 Feb 2013 19:26:00 +0000"  >&lt;p&gt;Won&apos;t fix.  Overtaken by a bunch of more pointed jiras.&lt;/p&gt;</comment>
                            <comment id="13602394" author="ram_krish" created="Thu, 14 Mar 2013 16:25:53 +0000"  >&lt;blockquote&gt;&lt;p&gt;Tags are a little different than our current fields because there are multiple per Cell&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The above comment is from Matt.&lt;br/&gt;
So basically we say we will have multiple tags for a Cell.  &lt;br/&gt;
Which means cell which internally is now a represenation of a KV will have more than one additional attributes added to it (which is Tags) and one among them will be an ACL tag, visibility tag etc.&lt;br/&gt;
So now how will we say which tag to see if i want to know only the Visibility part of the Cell?  &lt;br/&gt;
I could see an tagIterator() api added that iterates thro the tags, so is it like every time iterate to find out which is my Visisbility tag.&lt;br/&gt;
Will there be a mechanism which says visibility tag should be the first tag or second .something like that?&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12625390">HBASE-7448</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12624917">HBASE-7414</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12555491" name="7233-v2.txt" size="8893" author="yuzhihong@gmail.com" created="Fri, 30 Nov 2012 09:59:54 +0000"/>
                            <attachment id="12555475" name="7233.txt" size="9611" author="stack" created="Fri, 30 Nov 2012 06:24:37 +0000"/>
                            <attachment id="12560130" name="7233sketch.txt" size="6183" author="stack" created="Mon, 10 Dec 2012 00:22:52 +0000"/>
                            <attachment id="12568328" name="7233v10.txt" size="179831" author="stack" created="Wed, 6 Feb 2013 23:37:29 +0000"/>
                            <attachment id="12560510" name="7233v3_encoders.txt" size="52260" author="stack" created="Wed, 12 Dec 2012 06:04:47 +0000"/>
                            <attachment id="12560512" name="7233v4_encoders.txt" size="66973" author="stack" created="Wed, 12 Dec 2012 06:11:03 +0000"/>
                            <attachment id="12560659" name="7233v5_encoders.txt" size="51947" author="stack" created="Wed, 12 Dec 2012 22:28:00 +0000"/>
                            <attachment id="12560726" name="7233v6_encoder.txt" size="55352" author="stack" created="Thu, 13 Dec 2012 06:46:44 +0000"/>
                            <attachment id="12567757" name="7233v7.txt" size="120560" author="stack" created="Sun, 3 Feb 2013 07:34:09 +0000"/>
                            <attachment id="12567958" name="7233v9.txt" size="105887" author="stack" created="Tue, 5 Feb 2013 06:15:28 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>10.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 30 Nov 2012 07:36:31 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>292662</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 40 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0sb5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>163282</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>