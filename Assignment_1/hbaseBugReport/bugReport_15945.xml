<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:08:48 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-15945/HBASE-15945.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-15945] Patch for Cell</title>
                <link>https://issues.apache.org/jira/browse/HBASE-15945</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;This patch contains an implementation of Key Value, Bytes and Cell modeled on the lines of Java implementation.  &lt;/p&gt;</description>
                <environment></environment>
        <key id="12975112">HBASE-15945</key>
            <summary>Patch for Cell</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12914633">HBASE-14850</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="sudeeps">Sudeep Sunthankar</assignee>
                                    <reporter username="sudeeps">Sudeep Sunthankar</reporter>
                        <labels>
                    </labels>
                <created>Thu, 2 Jun 2016 10:14:16 +0000</created>
                <updated>Sat, 6 Aug 2016 01:22:05 +0000</updated>
                            <resolved>Tue, 5 Jul 2016 17:48:55 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                <comments>
                            <comment id="15312504" author="stack" created="Thu, 2 Jun 2016 15:42:27 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sudeeps&quot; class=&quot;user-hover&quot; rel=&quot;sudeeps&quot;&gt;Sudeep Sunthankar&lt;/a&gt; I think @enis says this elsewhere, but no need to emulate what is in java. In fact, don&apos;t. Java is in a state of transition trying to move off the KeyValue type instead to run on a Cell Interface. The KV type will change. This code as is doesn&apos;t allow for that. Tags do not make it out on to the Client-side FYI. That KV public interface is really broad. You want to open up that much API? Some tests for the public API should come in w/ this patch too? You have any?&lt;/p&gt;

&lt;p&gt;Feedback on the patch....&lt;/p&gt;

&lt;p&gt;Suggest you use the new ./dev-support/submit-patch.py It will make a patch, update the JIRA and ReviewBoard all from command-line.&lt;/p&gt;

&lt;p&gt;It looks like a pure copy of the java Bytes class (is that compare method correct? It just compares instances... should it not compare byte content too... unless the operator is overloaded?)&lt;/p&gt;

&lt;p&gt;Should there be sequenceid in Cell?&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;



</comment>
                            <comment id="15312640" author="eclark" created="Thu, 2 Jun 2016 16:47:37 +0000"  >&lt;p&gt;-1&lt;/p&gt;</comment>
                            <comment id="15337657" author="sudeeps" created="Sat, 18 Jun 2016 08:36:47 +0000"  >&lt;p&gt;As per the feedback , this patch consists of the Cell Interface for the underlying KeyValue structure, which can be changed based on the requirement. &lt;br/&gt;
At the moment KeyValue structure is designed as a contiguous array of bytes. A test is also included in the patch. &lt;br/&gt;
I encountered errors while addition of test in BUCK. Please do let me know if it is fine to add a Makefile which can be used to execute the tests so that the tests can be run&lt;/p&gt;</comment>
                            <comment id="15343262" author="enis" created="Wed, 22 Jun 2016 03:09:18 +0000"  >&lt;p&gt;Thanks for the updated patch. Do you mind putting this to review board as well. You can use the fancy new dev-support/submit-patch.sh utility for convenience if you like. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;These should be under hbase namespace, no?&lt;/li&gt;
	&lt;li&gt;There seems to be a confusion about how do we represent java byte[]&apos;s in C++. In the patch, I can see, we are using all three of &lt;tt&gt;std::string&lt;/tt&gt;, &lt;tt&gt;std::vector&amp;lt;char&amp;gt;&lt;/tt&gt;, and &lt;tt&gt;Bytes&lt;/tt&gt; class itself.
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+using BYTE_ARRAY = std::vector&amp;lt;BYTE_TYPE&amp;gt;;
+using ByteBuffer = std::vector&amp;lt;BYTE_TYPE&amp;gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;We should stick with only 1. We have a couple of options to represent these &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;(a) std::string,&lt;/li&gt;
	&lt;li&gt;(b) std::vector&amp;lt;unsigned char&amp;gt;,&lt;/li&gt;
	&lt;li&gt;(c) std::array&amp;lt;unsigned char&amp;gt;,&lt;/li&gt;
	&lt;li&gt;(d) Implement custom class like LevelDB Slice, a char* with length (and maybe offset?).&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Object creation in Java is costly since everything is heap allocated. That is partially why we have Cell.getRowArray() and Cell.getRowOffset(), etc versus CellUtil.cloneRow(cell). If we want to keep the API super-simple, we can just keep passing std::string&apos;s, and have every string to be cloned from the API. Otherwise, in C++, we should be able to have a &lt;tt&gt;Buffer&lt;/tt&gt; class which contains the char*, length and offset, so that we directly return these triplets.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Cell should not extend KeyValue. Cell should be an abstract class with virtual methods.
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+class Cell : &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; KeyValue{
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;KeyValue is an implementation that keeps all of the data in an underlying byte[] for historical reasons. In C++ client side, we are only constructing &quot;Cells&quot;, either for &lt;tt&gt;Puts&lt;/tt&gt;, or for iterating over the &lt;tt&gt;Results&lt;/tt&gt;. We actually do not have a reason to keep the data for a Cell in a single byte[]. So, I think we do not need the KeyValue as in the patch at all. We still should be able to carry Cells in Puts and also read results from KeyValueCodec into a list-of-cells. For representing those, we can write a CellImpl class (which is not visible from client API), and have it implement Cell&apos;s methods. The CellImpl can keep pointers to it&apos;s underlying rowKey, column, value, etc which are all byte arrays. This I think should be very similar to the PB cell message class in cell.proto. We can move all of the KeyValue encoding complexity into KeyValueEncoder/Decoder classes which will encode / decode given Cells into KeyValue encoded serialized bytes. &lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Cell should not have SetSequenceId. Only get.
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+void Cell::SetSequenceId(&lt;span class=&quot;code-keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; &amp;amp;seq_id){
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Why do we need the PB here?
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+#include &lt;span class=&quot;code-quote&quot;&gt;&quot;&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;/Cell.pb.h&quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15343641" author="eclark" created="Wed, 22 Jun 2016 03:19:39 +0000"  >&lt;p&gt;This is the same Java in cpp stuff that&apos;s been posted a couple of times.&lt;br/&gt;
If we want to have something that can share the same buffers and has offset and all then use IOBuf. If you just want a straight array of bytes then use string ( the same thing that protobuf uses)&lt;/p&gt;


&lt;p&gt;Exceptions should be meaningful or they should be runtime_error.&lt;/p&gt;

&lt;p&gt;Code that&apos;s not used shouldn&apos;t be checked in. Code that&apos;s just there to add unused maybe needed functionality is just going to be bloat.&lt;/p&gt;</comment>
                            <comment id="15343750" author="sudeeps" created="Wed, 22 Jun 2016 05:51:23 +0000"  >&lt;p&gt;Thanks for the feedback.&lt;br/&gt;
Please find my comments and let me know your thoughts on the same.&lt;br/&gt;
&amp;#8212; Will use hbase namespace going forward.&lt;br/&gt;
&amp;#8212; Let&apos;s use std::string for representing Java&apos;s byte[]. As Elliott mentioned even PB uses strings for the same. We can use string references wherever required.&lt;br/&gt;
&amp;#8212; The first patch in this series had exposed all of the KeyValue API&apos;s. In the last one, we derived Cell from KeyValue to hide the implementation details. Will work on Enis&apos;s feedback to remove KeyValue implementation details from the patch. &lt;br/&gt;
&amp;#8212; &quot;if/Cell.pb.h&quot; is added for reusing the CellType enum defined in the PB instead of redefining the same enums.Should we define our own enums ? &lt;br/&gt;
&amp;#8212; We have defined a custom exception class derived from std::exception which we use to throw exceptions.&lt;br/&gt;
&amp;#8212; We have taken care not to add unwanted code. There might be some API&apos;s or functions which provide some functionality but may not be called in the patch. Should we remove all such functions ? &lt;/p&gt;</comment>
                            <comment id="15343799" author="eclark" created="Wed, 22 Jun 2016 06:37:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;We have defined a custom exception class derived from std::exception which we use to throw exceptions.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Either a exception hierarchy is needed or nothing at all. Right now it&apos;s just a carrier for strings. They are very bad ways to signal things to developers. Types are much much better. &lt;a href=&quot;http://blog.tsunanet.net/2012/04/apache-hadoop-abuse-ioexception.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://blog.tsunanet.net/2012/04/apache-hadoop-abuse-ioexception.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Lets not repeat that mistake.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;There might be some API&apos;s or functions which provide some functionality but may not be called in the patch. Should we remove all such functions ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yep. Code is complete when there&apos;s nothing more to remove, not when there&apos;s nothing more to add. We don&apos;t want to end up with the spralling api that is our java api, so we should only be adding things that are needed to create the client. Not things that could in the future be useful.&lt;/p&gt;</comment>
                            <comment id="15346269" author="sudeeps" created="Thu, 23 Jun 2016 10:58:46 +0000"  >&lt;p&gt;This patch consists of the foll:-&lt;br/&gt;
1) Cell:- An abstract class haiving methods to get rowkey, column-family, column, value, timestamp and type.&lt;br/&gt;
2) CellImpl:- Implements the pure virtual functions specified in Cell class&lt;br/&gt;
3) cell-test.cc:- Unit tests for the above functions&lt;/p&gt;</comment>
                            <comment id="15347085" author="enis" created="Thu, 23 Jun 2016 20:11:58 +0000"  >&lt;blockquote&gt;&lt;p&gt;&quot;if/Cell.pb.h&quot; is added for reusing the CellType enum defined in the PB instead of redefining the same enums.Should we define our own enums ? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We have made explicit decision to not expose PB / Netty / Guava, etc in our Java client as a part of public APIs. For HBase-2.0, we are plugging the leaks that happened (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15978&quot; title=&quot;Netty API leaked into public API&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15978&quot;&gt;&lt;del&gt;HBASE-15978&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15607&quot; title=&quot;Remove PB references from Admin for 2.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15607&quot;&gt;&lt;del&gt;HBASE-15607&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15605&quot; title=&quot;Remove PB references from HCD and HTD for 2.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15605&quot;&gt;&lt;del&gt;HBASE-15605&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15610&quot; title=&quot;Remove deprecated HConnection for 2.0 thus removing all PB references for 2.0&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15610&quot;&gt;&lt;del&gt;HBASE-15610&lt;/del&gt;&lt;/a&gt;). I would like to follow the same  for C++ as well. The client API should NOT have any PB / Folly / external lib reference (except for maybe async interfaces since C++ lacks a standard &lt;tt&gt;Future&lt;/tt&gt; impl. With this patch + basic Get / Put / Table, we can easily hide PB. &lt;/p&gt;

&lt;p&gt;The patch is looking great. Just a couple of comments. &lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Lets remove &lt;tt&gt;+#include &quot;if/Cell.pb.h&quot;&lt;/tt&gt; as per above, and make a CellType enum in Cell.h.&lt;/li&gt;
	&lt;li&gt;CellType, timestamp and seqId should be returned as values, not references.&lt;/li&gt;
	&lt;li&gt;Both in Java and in C++ PB, we make explicit copy of the passed in byte[]&apos;s for KV/Cell.pb. We are not exposing CellImpl to the user, so I think it is fine to not do the explicit clone.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15347110" author="eclark" created="Thu, 23 Jun 2016 20:25:08 +0000"  >&lt;p&gt;I strongly disagree with that statement. This is not java. You can not plug in different versions of cpp libraries and expect them to work. Adding that constraint is pretty much a performance killer.&lt;/p&gt;</comment>
                            <comment id="15347190" author="enis" created="Thu, 23 Jun 2016 21:08:31 +0000"  >&lt;blockquote&gt;&lt;p&gt;You can not plug in different versions of cpp libraries and expect them to work. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Nobody expects binary compatibility. But it is still good to have source compatibility for applications, so that they don&apos;t have to change code. &lt;/p&gt;

&lt;p&gt;Our PB is fairly raw for a reason. Think about returning a row result (Result). How would the API look like in pure PB? We expect the user to know about associatedCellCount and know how to read from KeyValueCodec? What happens if we change KVCodec? What happens if the results are PB Cell&apos;s. Applications will deal with reading Cells two different way? We cannot have each and every application deal with this complexity. Similar thing for MutationProto. How is the user expected to send cells with the payload? Further, for batching / MultiMutate / setting nonces, etc we have to construct additional PB&apos;s from the client code. What about scanners? We directly expose ScanRequest and ScanResponse and expect the user do scanner_id management, region boundaries, etc? This does not make any sense. &lt;/p&gt;

&lt;p&gt;Seems something to discuss in dev@ &lt;/p&gt;</comment>
                            <comment id="15352839" author="sudeeps" created="Tue, 28 Jun 2016 11:44:50 +0000"  >&lt;p&gt;This patch consists of CELL_TYPE enum instead of using PB header.&lt;/p&gt;</comment>
                            <comment id="15352845" author="sudeeps" created="Tue, 28 Jun 2016 11:47:18 +0000"  >&lt;p&gt;We have added a custom enum in the Cell interface instead of using the one defined in PB.&lt;/p&gt;</comment>
                            <comment id="15359302" author="enis" created="Fri, 1 Jul 2016 17:13:53 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sudeeps&quot; class=&quot;user-hover&quot; rel=&quot;sudeeps&quot;&gt;Sudeep Sunthankar&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;My only comment is the naming of CELL_TYPE, other than that, the patch looks good. It should be CellType: &lt;a href=&quot;https://google.github.io/styleguide/cppguide.html#Enumerator_Names&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://google.github.io/styleguide/cppguide.html#Enumerator_Names&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15359820" author="sudeeps" created="Fri, 1 Jul 2016 23:24:56 +0000"  >&lt;p&gt;Hi, this patch consists of name changes as per google styling and tests.&lt;/p&gt;</comment>
                            <comment id="15359864" author="enis" created="Sat, 2 Jul 2016 00:17:16 +0000"  >&lt;p&gt;+1. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; wdyt? &lt;/p&gt;</comment>
                            <comment id="15360397" author="eclark" created="Sun, 3 Jul 2016 03:50:30 +0000"  >&lt;p&gt;No need for the interface and the implementation because of how hard getting c++ abi compatibility is.&lt;br/&gt;
I&apos;d prefer a patch that hooks everything up, rather than just adding orphaned classes.&lt;/p&gt;</comment>
                            <comment id="15361172" author="sudeeps" created="Mon, 4 Jul 2016 11:10:44 +0000"  >&lt;p&gt;This patch consists of a Cell implementation without any additional classes or interfaces.&lt;/p&gt;</comment>
                            <comment id="15361173" author="sudeeps" created="Mon, 4 Jul 2016 11:15:12 +0000"  >&lt;p&gt;Thanks for the feedback Elliott. We have uploaded a patch based on your inputs.&lt;/p&gt;</comment>
                            <comment id="15362779" author="eclark" created="Tue, 5 Jul 2016 17:00:23 +0000"  >&lt;p&gt;+1 lgtm&lt;/p&gt;</comment>
                            <comment id="15408859" author="water" created="Fri, 5 Aug 2016 04:37:42 +0000"  >&lt;p&gt;Hi all, is this JIRA committed&#65311;I was not able to find it in git log.&lt;/p&gt;</comment>
                            <comment id="15410358" author="enis" created="Sat, 6 Aug 2016 01:10:42 +0000"  >&lt;p&gt;I thought &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=eclark&quot; class=&quot;user-hover&quot; rel=&quot;eclark&quot;&gt;Elliott Clark&lt;/a&gt; pushed it, but it does not seem to be there in branch &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14850&quot; title=&quot;C++ client implementation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14850&quot;&gt;HBASE-14850&lt;/a&gt;. &lt;/p&gt;</comment>
                            <comment id="15410360" author="eclark" created="Sat, 6 Aug 2016 01:18:59 +0000"  >&lt;p&gt;&lt;a href=&quot;https://github.com/apache/hbase/commit/fa3ab420d19bba853d96576176257b5c12f1a48f&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/apache/hbase/commit/fa3ab420d19bba853d96576176257b5c12f1a48f&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Isn&apos;t that it ? It appears to be there on my git checkout ?&lt;/p&gt;</comment>
                            <comment id="15410365" author="enis" created="Sat, 6 Aug 2016 01:22:05 +0000"  >&lt;p&gt;Thanks, should have git pull&apos;ed first.  &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12811559" name="HBASE-15945-HBASE-14850.v2.patch" size="76366" author="sudeeps" created="Sat, 18 Jun 2016 08:36:47 +0000"/>
                            <attachment id="12812799" name="HBASE-15945-HBASE-14850.v3.patch" size="14703" author="sudeeps" created="Thu, 23 Jun 2016 10:58:46 +0000"/>
                            <attachment id="12814092" name="HBASE-15945-HBASE-14850.v4.patch" size="7726" author="sudeeps" created="Tue, 28 Jun 2016 11:44:50 +0000"/>
                            <attachment id="12807675" name="HBASE-15945.HBASE-14850.v1.patch" size="74970" author="sudeeps" created="Thu, 2 Jun 2016 10:18:55 +0000"/>
                            <attachment id="12815835" name="HBASE-15945.HBASE-14850.v5.patch" size="14326" author="sudeeps" created="Fri, 1 Jul 2016 23:24:56 +0000"/>
                            <attachment id="12816022" name="HBASE-15945.HBASE-14850.v6.patch" size="11322" author="sudeeps" created="Mon, 4 Jul 2016 11:10:44 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 2 Jun 2016 15:42:27 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            18 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2yvq7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>