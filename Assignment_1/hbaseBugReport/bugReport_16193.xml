<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:11:19 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-16193/HBASE-16193.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-16193] Memory leak when putting plenty of duplicate cells</title>
                <link>https://issues.apache.org/jira/browse/HBASE-16193</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Recently we suffered from a weird problem that RS heap size could not reduce much even after FullGC, and it kept FullGC and could hardly serve any request. After debugging for days, we found the root cause: we won&apos;t count in the allocated memory in MSLAB chunk when adding duplicated cells (including put and delete). We have below codes in &lt;tt&gt;AbstractMemStore#add&lt;/tt&gt; (or &lt;tt&gt;DefaultMemStore#add&lt;/tt&gt; for branch-1):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; add(Cell cell) {
    Cell toAdd = maybeCloneWithAllocator(cell);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; internalAdd(toAdd);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where we will allocate memory in MSLAB (if using) chunk for the cell first, and then call &lt;tt&gt;internalAdd&lt;/tt&gt;, where we could see below codes in &lt;tt&gt;Segment#internalAdd&lt;/tt&gt; (or &lt;tt&gt;DefaultMemStore#internalAdd&lt;/tt&gt; for branch-1):&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; internalAdd(Cell cell) {
    &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; succ = getCellSet().add(cell);
    &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; s = AbstractMemStore.heapSizeChange(cell, succ);
    updateMetaInfo(cell, s);
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; s;
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So if we are writing a duplicated cell, we assume there&apos;s no heap size change, while actually the chunk size is taken (referenced).&lt;/p&gt;

&lt;p&gt;Let&apos;s assume this scenario, that there&apos;re huge amount of writing on the same cell (same key, different values), which is not that special in MachineLearning use case, and there&apos;re also few normal writes, and after some long time, it&apos;s possible that we have many chunks with kvs like: &lt;tt&gt;cellA, cellB, cellA, cellA, .... cellA&lt;/tt&gt;, that we only counts 2 cells for each chunk, but actually the chunk is full. So the devil comes, that we think it&apos;s still not hitting flush size, while there&apos;s already GBs heapsize taken.&lt;/p&gt;

&lt;p&gt;There&apos;s also a more extreme case, that we only writes a single cell over and over again and fills one chunk quickly. Ideally the chunk should be cleared by GC, but unfortunately we have kept a redundant reference in &lt;tt&gt;HeapMemStore#chunkQueue&lt;/tt&gt;, which is useless when we&apos;re not using chunkPool by default.&lt;/p&gt;

&lt;p&gt;This is the umbrella to describe the problem, and I&apos;ll open two sub-JIRAs to resolve the above two issues separately.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12987534">HBASE-16193</key>
            <summary>Memory leak when putting plenty of duplicate cells</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="carp84">Yu Li</assignee>
                                    <reporter username="carp84">Yu Li</reporter>
                        <labels>
                    </labels>
                <created>Thu, 7 Jul 2016 16:47:14 +0000</created>
                <updated>Wed, 13 Jul 2016 02:15:28 +0000</updated>
                            <resolved>Wed, 13 Jul 2016 02:14:34 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                            <comments>
                            <comment id="15366387" author="carp84" created="Thu, 7 Jul 2016 16:52:06 +0000"  >&lt;p&gt;Attached MAT heapdump analyze screenshot shows that one MemStore is taking ~6GB memory, and there&apos;re 2600 chunks in it, which is a strong proof of the 1st problem.&lt;/p&gt;</comment>
                            <comment id="15374186" author="carp84" created="Wed, 13 Jul 2016 02:14:34 +0000"  >&lt;p&gt;Closing this umbrella since all sub issues resolved and fix pushed into all 0.98+ branches.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12816661" name="MemoryLeakInMemStore.png" size="164527" author="carp84" created="Thu, 7 Jul 2016 16:52:06 +0000"/>
                            <attachment id="12816662" name="MemoryLeakInMemStore_2.png" size="36433" author="carp84" created="Thu, 7 Jul 2016 16:52:06 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12987537">HBASE-16194</subtask>
                            <subtask id="12987538">HBASE-16195</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            22 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30ntb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>