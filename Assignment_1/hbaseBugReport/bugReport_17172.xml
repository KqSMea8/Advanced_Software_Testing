<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 21:21:57 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-17172/HBASE-17172.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-17172] Optimize major mob compaction with _del files</title>
                <link>https://issues.apache.org/jira/browse/HBASE-17172</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Today, when there is a _del file in mobdir, with major mob compaction, every mob file will be recompacted, this causes lots of IO and slow down major mob compaction (may take months to finish). This needs to be improved. A few ideas are: &lt;/p&gt;

&lt;p&gt;1) Do not compact all _del files into one, instead, compact them based on groups with startKey as the key. Then use firstKey/startKey to make each mob file to see if the _del file needs to be included for this partition.&lt;/p&gt;

&lt;p&gt;2). Based on the timerange of the _del file, compaction for files after that timerange does not need to include the _del file as these are newer files.&lt;/p&gt;</description>
                <environment></environment>
        <key id="13022968">HBASE-17172</key>
            <summary>Optimize major mob compaction with _del files</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="huaxiang">huaxiang sun</assignee>
                                    <reporter username="huaxiang">huaxiang sun</reporter>
                        <labels>
                    </labels>
                <created>Wed, 23 Nov 2016 18:35:14 +0000</created>
                <updated>Fri, 2 Dec 2016 08:35:28 +0000</updated>
                                            <version>2.0.0</version>
                                                    <component>mob</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="15692088" author="jingcheng.du@intel.com" created="Thu, 24 Nov 2016 03:41:26 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=huaxiang&quot; class=&quot;user-hover&quot; rel=&quot;huaxiang&quot;&gt;huaxiang sun&lt;/a&gt;!&lt;br/&gt;
A major compaction compacts all the files even without del files which is slow. Is it related with the del files? How about to increase the number of threads to perform the compaction to reduce the running time?&lt;br/&gt;
Actually if the delete is rare, we can always keep the delete marker in hbase files in mob-enabled cf even in all files and major compaction. And we won&apos;t need the .del files in mob anymore.&lt;br/&gt;
If this slow is not related with the .del files, I guess we have to fix the slow compaction by implementing a distributed compaction. I filed a JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-15381&quot; title=&quot;Implement a distributed MOB compaction by procedure&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-15381&quot;&gt;HBASE-15381&lt;/a&gt; to implement this, the patch is there, but I didn&apos;t rebase for long time. Are you interested to take it?&lt;/p&gt;</comment>
                            <comment id="15692109" author="jingcheng.du@intel.com" created="Thu, 24 Nov 2016 03:52:45 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=huaxiang&quot; class=&quot;user-hover&quot; rel=&quot;huaxiang&quot;&gt;huaxiang sun&lt;/a&gt;, why do you need major compaction? You want to reduce the number of the files? If so, can the proposal in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16981&quot; title=&quot;Expand Mob Compaction Partition policy from daily to weekly, monthly and beyond&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16981&quot;&gt;HBASE-16981&lt;/a&gt; solve this and I guess the major compaction won&apos;t be needed if &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16981&quot; title=&quot;Expand Mob Compaction Partition policy from daily to weekly, monthly and beyond&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16981&quot;&gt;HBASE-16981&lt;/a&gt; is implemented?&lt;/p&gt;</comment>
                            <comment id="15692581" author="huaxiang" created="Thu, 24 Nov 2016 08:03:08 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jingcheng.du%40intel.com&quot; class=&quot;user-hover&quot; rel=&quot;jingcheng.du@intel.com&quot;&gt;Jingcheng Du&lt;/a&gt;! Distributed compaction is definitely helpful even with the minor compaction, consider that mob compaction needs to acquire a table lock. The purpose of major compaction is trying to reduce the number of files. With &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16891&quot; title=&quot;Try copying to the Netty ByteBuf directly from the WALEdit&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16891&quot;&gt;&lt;del&gt;HBASE-16891&lt;/del&gt;&lt;/a&gt;, users may still choose to disable mob compaction chore and run mob compaction manually at scheduled maintenance. To keep delete marker in hbase files in mob-enabled cf is one way to avoid .del files, the concern is that it is inconsistent with non-mob cfs (maybe this can be provided as option through config?). Another way may be to optimize it as the current jira suggests. For an example, user deletes some rows for one or two regions, after compaction, there will be .del files created. With the current major mob compaction, these .del files will be included in compacting of files for other regions which is not necessary, the net effect is that all mob files will be re-compacted. More ideas about how to optimize it are welcome, but I think distributed mob compaction is definitely needed, thanks.&lt;/p&gt;</comment>
                            <comment id="15692632" author="jingcheng.du@intel.com" created="Thu, 24 Nov 2016 08:29:31 +0000"  >&lt;p&gt;Thanks Huaxiang!&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;users may still choose to disable mob compaction chore and run mob compaction manually at scheduled maintenance.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Right, how about to run minor compaction instead? It doesn&apos;t make sense to run major mob compaction periodically. Mob is designed to reduce the IO amplification during compaction. Major compaction will break this.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;To keep delete marker in hbase files in mob-enabled cf is one way to avoid .del files, the concern is that it is inconsistent with non-mob cfs (maybe this can be provided as option through config?).&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Hmm. If the .del is not a performance killer, we don&apos;t need this. I reviewed the code, I think the .del files is not the reason of the slow compaction, major compaction itself is.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;With the current major mob compaction, these .del files will be included in compacting of files for other regions which is not necessary.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Right, it is not necessary. To split them by regions is a good choice. But is this necessary if .del file didn&apos;t impact the compaction performance badly?&lt;/p&gt;</comment>
                            <comment id="15693053" author="anoop.hbase" created="Thu, 24 Nov 2016 11:43:07 +0000"  >&lt;p&gt;So when we have _del files, we will promote compaction to be major and that the issue u r saying?  Any way ur proposal to change how _del files getting compacted and how to use them more effectively makes full sense..  Sorry for the Q. I forgot the impl details now.&lt;/p&gt;</comment>
                            <comment id="15693154" author="jingcheng.du@intel.com" created="Thu, 24 Nov 2016 12:25:44 +0000"  >&lt;blockquote&gt;&lt;p&gt;So when we have _del files, we will promote compaction to be major and that the issue u r saying?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As I know, it is not. The major compaction is either triggered by clients, or all of the mob files are smaller than the mergeable threshold.&lt;/p&gt;</comment>
                            <comment id="15694193" author="huaxiang" created="Thu, 24 Nov 2016 20:53:29 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Hmm. If the .del is not a performance killer, we don&apos;t need &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;. I reviewed the code, I think the .del files is not the reason of the slow compaction, major compaction itself is.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I need to provide more background here. Let&apos;s say mob files have been major compacted one week ago. There are regionA and regionB, assume there is regionA20161001*** and regionB20161001**** which are the results from previous major compaction. There is one del file for regionA created the past week. A major compaction kicks in. regionA20161001*** and regionB20161001*** will be re-compacted in this case. While compacting regionA20161001**** is needed, re-compacting regionB20161001*** is a waste. Given there are lots of other regions and many already-compacted files, unnecessary compaction slows down the major compaction.&lt;/p&gt;</comment>
                            <comment id="15701682" author="jingcheng.du@intel.com" created="Mon, 28 Nov 2016 11:16:44 +0000"  >&lt;p&gt;Thanks for clarification &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=huaxiang&quot; class=&quot;user-hover&quot; rel=&quot;huaxiang&quot;&gt;huaxiang sun&lt;/a&gt;. You are right. The compaction is not necessary if only one mob file and some _del files and that mob file is not related with these _del files.&lt;br/&gt;
I think we can group the _del files by regions. Or we can retain the delete markers in hbase tables until they are expired?&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoopsamjohn&quot; class=&quot;user-hover&quot; rel=&quot;anoopsamjohn&quot;&gt;Anoop Sam John&lt;/a&gt;, do you have preference on this? Thanks!&lt;/p&gt;</comment>
                            <comment id="15702059" author="anoop.hbase" created="Mon, 28 Nov 2016 14:18:39 +0000"  >&lt;blockquote&gt;&lt;p&gt;Or we can retain the delete markers in hbase tables until they are expired?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Means the deleted MOB cells will be there in MOB files unless they are TTL expired?&lt;/p&gt;</comment>
                            <comment id="15702722" author="huaxiang" created="Mon, 28 Nov 2016 18:28:19 +0000"  >&lt;p&gt;We have use cases that user wants TTL to be multiple years or so, there may be lots of deleted cells depending on the use case. I think we want to give user an option to free up the space for these deleted cells.&lt;/p&gt;</comment>
                            <comment id="15703892" author="jingcheng.du@intel.com" created="Tue, 29 Nov 2016 02:10:06 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=huaxiang&quot; class=&quot;user-hover&quot; rel=&quot;huaxiang&quot;&gt;huaxiang sun&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoopsamjohn&quot; class=&quot;user-hover&quot; rel=&quot;anoopsamjohn&quot;&gt;Anoop Sam John&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Means the deleted MOB cells will be there in MOB files unless they are TTL expired?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Right. But according to Huaxiang&apos;s comments, this is not doable.&lt;/p&gt;

&lt;p&gt;So it seems merging files by regions is the only way now.&lt;/p&gt;</comment>
                            <comment id="15707080" author="huaxiang" created="Wed, 30 Nov 2016 00:49:03 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jingcheng.du&quot; class=&quot;user-hover&quot; rel=&quot;jingcheng.du&quot;&gt;Jingcheng Du&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;, just did more code reading and found that _del files can be included in minor mob compaction when the file size is less than the threshold. Assume that user sets a high threshold value, even for already compacted-files, it can be included in the compact list again and be compacted with the del files. If we want to deal with _del files mainly in major mob compaction. Can we skip these already-compacted files in the minor compaction? something like in the select() after files are added to filesToCompact map. This is to speed up minor compaction with del files.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/compactions/PartitionedMobCompactor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/compactions/PartitionedMobCompactor.java
index 33aecc0..dab05d2 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/compactions/PartitionedMobCompactor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/compactions/PartitionedMobCompactor.java
@@ -25,6 +25,7 @@ &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Collection;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Collections;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Date;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.HashMap;
+&lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Iterator;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.List;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Map;
 &lt;span class=&quot;code-keyword&quot;&gt;import&lt;/span&gt; java.util.Map.Entry;
@@ -179,6 +180,23 @@ &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; class PartitionedMobCompactor &lt;span class=&quot;code-keyword&quot;&gt;extends&lt;/span&gt; MobCompactor {
         selectedFileCount++;
       }
     }
+
+    /*
+     * If it is not a major mob compaction with del files, and the file number in Partition is 1,
+     * remove the partition from filesToCompact list to avoid re-compacting files which has been
+     * compacted with del files.
+     */
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!allFiles &amp;amp;&amp;amp; (allDelFiles.size() &amp;gt; 0)) {
+      &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt;(Iterator&amp;lt;Map.Entry&amp;lt;CompactionPartitionId, CompactionPartition&amp;gt;&amp;gt; it =
+          filesToCompact.entrySet().iterator(); it.hasNext(); ) {
+        Map.Entry&amp;lt;CompactionPartitionId, CompactionPartition&amp;gt; entry = it.next();
+        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (entry.getValue().getFileNumbers() &amp;lt;= 1) {
+          it.remove();
+          --selectedFileCount;
+        }
+      }
+    }
+
     PartitionedMobCompactionRequest request = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; PartitionedMobCompactionRequest(
       filesToCompact.values(), allDelFiles);
     &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (candidates.size() == (allDelFiles.size() + selectedFileCount + irrelevantFileCount)) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
</comment>
                            <comment id="15711517" author="jingcheng.du@intel.com" created="Thu, 1 Dec 2016 09:54:26 +0000"  >&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=huaxiang&quot; class=&quot;user-hover&quot; rel=&quot;huaxiang&quot;&gt;huaxiang sun&lt;/a&gt;.&lt;br/&gt;
If we skip the compacted files, the threshold is not that useful anymore. I have three options for the solution.&lt;br/&gt;
One is to decrease the threshold, and use the compaction policy in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-16981&quot; title=&quot;Expand Mob Compaction Partition policy from daily to weekly, monthly and beyond&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-16981&quot;&gt;HBASE-16981&lt;/a&gt; in the compaction.&lt;br/&gt;
The second one is we can skip the minor compaction if there is only one mob file (or two mob files) and one _del file. But we have to suffer the unnecessary compaction in major compaction ( although the major compaction is not recommended).&lt;br/&gt;
The last one is we group the _del files by regions, but this is very difficult to allign the keys in _del files and the partitions in mob files.&lt;/p&gt;</comment>
                            <comment id="15714142" author="huaxiang" created="Fri, 2 Dec 2016 05:40:07 +0000"  >&lt;p&gt;Thanks Jingcheng. Regarding with &quot;If we skip the compacted files, the threshold is not that useful anymore.&quot;, today if there is only one file in the partition, and there is no _del files, the file is skipped. With del file, the current logic is to compact the already-compacted file with _del file. Let&apos;s say there is one mob file regionA20161101***&lt;b&gt;, which was compacted. On 12/1/2016, there is  _del file regionB20161201&lt;/b&gt;**&lt;b&gt;_del, mob compaction kicks in, regionA20161101&lt;/b&gt;*** is less than the threshold, and it is picked for compaction. Since there is a _del file, regionA20161101**** and regionB20161201***&lt;b&gt;_del are compacted into regionA20161101&lt;/b&gt;**&lt;b&gt;_1 . After that, regionB20161201&lt;/b&gt;**&lt;b&gt;_del cannot be deleted since it is not a allFile compaction. The next mob compaction, regionA20161101&lt;/b&gt;**&lt;b&gt;_1 and regionB20161201&lt;/b&gt;**&lt;b&gt;_del  will be picked up again and be compacted into regionA20161101&lt;/b&gt;***_2. So in this case, it will cause more unnecessary IOs. Could you double confirm if this is the case?&lt;/p&gt;</comment>
                            <comment id="15714169" author="jingcheng.du@intel.com" created="Fri, 2 Dec 2016 05:56:24 +0000"  >&lt;p&gt;You are right. It is like this now.&lt;br/&gt;
We are now is trying to avoid the unnecessary, right? Is it possible to compact the _del files by regions, and save the start keys and stop keys in memory for each partition to decide if we need to compact? Meanwhile, we can add more constriction, for example only perform compaction when there are more than 2 mob files and _del files in minor compaction?&lt;/p&gt;</comment>
                            <comment id="15714196" author="huaxiang" created="Fri, 2 Dec 2016 06:06:50 +0000"  >&lt;p&gt;Is it possible to compact the _del files by regions, and save the start keys and stop keys in memory for each partition to decide if we need to compact?&lt;/p&gt;

&lt;p&gt;That is one of the ideas to optimize compaction with _del files. &lt;/p&gt;

&lt;p&gt;Can I create a new jira to address &quot;Meanwhile, we can add more constriction, for example only perform compaction when there are more than 2 mob files and _del files in minor compaction?&quot;?&lt;/p&gt;

&lt;p&gt;Thanks!&lt;/p&gt;</comment>
                            <comment id="15714293" author="jingcheng.du@intel.com" created="Fri, 2 Dec 2016 07:14:21 +0000"  >&lt;blockquote&gt;&lt;p&gt;Can I create a new jira to address &quot;Meanwhile, we can add more constriction, for example only perform compaction when there are more than 2 mob files and _del files in minor compaction?&quot;?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sure, thanks!&lt;/p&gt;</comment>
                            <comment id="15714331" author="huaxiang" created="Fri, 2 Dec 2016 07:34:38 +0000"  >&lt;p&gt;One more question for you, Jingcheng, &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;. When threshold is so big that size for all mob files is less than this threshold, in this case, if there are _del files, the minor mob compaction actually turns into a major mob compaction. What is the reason behind the design? Since threshold is a user configurable variable, user may choose to configure a large value and turns the mob compaction into a major one, if there are _del files, compaction will take longer than expected. Thinking about compacting 1 mob file with _del files only for major_mob_compact case so user is aware of what is going to happen. comments? Thanks..&lt;/p&gt;</comment>
                            <comment id="15714463" author="jingcheng.du@intel.com" created="Fri, 2 Dec 2016 08:35:28 +0000"  >&lt;p&gt;We design the mob to reduce the IO amplification. The design tries to guarantee the read performance no matter how many mob files there are. So we can reduce the compacted files (which leads to too many files) by setting such a threshold. We don&apos;t need to limit the number of files to small to fast the reading. That is why the default threshold is small, and that is why your compact policy JIRA is so important&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
The threshold is a key to reduce IO amplification, so we don&apos;t recommend to set it as a very large number. Otherwise, mob doesn&apos;t have too many differences from storing cells directly in HBase.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 24 Nov 2016 03:41:26 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i36pof:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>