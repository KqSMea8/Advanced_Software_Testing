<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:25:45 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-5210/HBASE-5210.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-5210] HFiles are missing from an incremental load</title>
                <link>https://issues.apache.org/jira/browse/HBASE-5210</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;We run an overnight map/reduce job that loads data from an external source and adds that data to an existing HBase table.  The input files have been loaded into hdfs.  The map/reduce job uses the HFileOutputFormat (and the TotalOrderPartitioner) to create HFiles which are subsequently added to the HBase table.  On at least two separate occasions (that we know of), a range of output would be missing for a given day.  The range of keys for the missing values corresponded to those of a particular region.  This implied that a complete HFile somehow went missing from the job.  Further investigation revealed the following:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Two different reducers (running in separate JVMs and thus separate class loaders)&lt;/li&gt;
	&lt;li&gt;in the same server can end up using the same file names for their&lt;/li&gt;
	&lt;li&gt;HFiles.  The scenario is as follows:&lt;/li&gt;
	&lt;li&gt;1.	Both reducers start near the same time.&lt;/li&gt;
	&lt;li&gt;2.	The first reducer reaches the point where it wants to write its first file.&lt;/li&gt;
	&lt;li&gt;3.	It uses the StoreFile class which contains a static Random object&lt;/li&gt;
	&lt;li&gt;which is initialized by default using a timestamp.&lt;/li&gt;
	&lt;li&gt;4.	The file name is generated using the random number generator.&lt;/li&gt;
	&lt;li&gt;5.	The file name is checked against other existing files.&lt;/li&gt;
	&lt;li&gt;6.	The file is written into temporary files in a directory named&lt;/li&gt;
	&lt;li&gt;after the reducer attempt.&lt;/li&gt;
	&lt;li&gt;7.	The second reduce task reaches the same point, but its StoreClass&lt;/li&gt;
	&lt;li&gt;(which is now in the file system&apos;s cache) gets loaded within the&lt;/li&gt;
	&lt;li&gt;time resolution of the OS and thus initializes its Random()&lt;/li&gt;
	&lt;li&gt;object with the same seed as the first task.&lt;/li&gt;
	&lt;li&gt;8.	The second task also checks for an existing file with the name&lt;/li&gt;
	&lt;li&gt;generated by the random number generator and finds no conflict&lt;/li&gt;
	&lt;li&gt;because each task is writing files in its own temporary folder.&lt;/li&gt;
	&lt;li&gt;9.	The first task finishes and gets its temporary files committed&lt;/li&gt;
	&lt;li&gt;to the &quot;real&quot; folder specified for output of the HFiles.&lt;/li&gt;
	&lt;li&gt;10.	The second task then reaches its own conclusion and commits its&lt;/li&gt;
	&lt;li&gt;files (moveTaskOutputs).  The released Hadoop code just overwrites&lt;/li&gt;
	&lt;li&gt;any files with the same name.  No warning messages or anything.&lt;/li&gt;
	&lt;li&gt;The first task&apos;s HFiles just go missing.&lt;/li&gt;
	&lt;li&gt;&lt;/li&gt;
	&lt;li&gt;Note:  The reducers here are NOT different attempts at the same&lt;/li&gt;
	&lt;li&gt;reduce task.  They are different reduce tasks so data is&lt;/li&gt;
	&lt;li&gt;really lost.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;I am currently testing a fix in which I have added code to the Hadoop &lt;br/&gt;
FileOutputCommitter.moveTaskOutputs method to check for a conflict with&lt;br/&gt;
an existing file in the final output folder and to rename the HFile if&lt;br/&gt;
needed.  This may not be appropriate for all uses of FileOutputFormat.&lt;br/&gt;
So I have put this into a new class which is then used by a subclass of&lt;br/&gt;
HFileOutputFormat.  Subclassing of FileOutputCommitter itself was a bit &lt;br/&gt;
more of a problem due to private declarations.&lt;/p&gt;

&lt;p&gt;I don&apos;t know if my approach is the best fix for the problem.  If someone&lt;br/&gt;
more knowledgeable than myself deems that it is, I will be happy to share&lt;br/&gt;
what I have done and by that time I may have some information on the&lt;br/&gt;
results.&lt;/p&gt;</description>
                <environment>&lt;p&gt;HBase 0.90.2 with Hadoop-0.20.2 (with durable sync).  RHEL 2.6.18-164.15.1.el5.  4 node cluster (1 master, 3 slaves)&lt;/p&gt;</environment>
        <key id="12538556">HBASE-5210</key>
            <summary>HFiles are missing from an incremental load</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="5">Cannot Reproduce</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="lsimpson">Lawrence Simpson</reporter>
                        <labels>
                    </labels>
                <created>Mon, 16 Jan 2012 19:03:42 +0000</created>
                <updated>Sat, 18 Jul 2015 10:15:59 +0000</updated>
                            <resolved>Sat, 18 Jul 2015 10:15:59 +0000</resolved>
                                    <version>0.90.2</version>
                                                    <component>mapreduce</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13187396" author="apurtell" created="Tue, 17 Jan 2012 02:50:42 +0000"  >&lt;p&gt;Patch for discussion.&lt;/p&gt;</comment>
                            <comment id="13187463" author="zhihyu@ebaysf.com" created="Tue, 17 Jan 2012 05:39:17 +0000"  >&lt;p&gt;@Larry:&lt;br/&gt;
Have you filed a MAPREDUCE- JIRA ?&lt;br/&gt;
FileOutputCommitter.moveTaskOutputs() might be the right place for the change.&lt;/p&gt;</comment>
                            <comment id="13190537" author="lsimpson" created="Sat, 21 Jan 2012 22:01:07 +0000"  >&lt;p&gt;@Andrew:&lt;br/&gt;
I looked at your suggested patch.  It may not work as well as you hope since it depends on System.nanoTime() changing rapidly which it may not do on all systems.  There are discussions in other blogs about this.  I believe that java.util.Random uses System.nanoTime() to do default seeding, and it has not been terribly successful in my case.&lt;br/&gt;
@Zhiyong:&lt;br/&gt;
I believe that you are correct in that this is the appropriate place to make a change. However, I did not suggest this as a MAPREDUCE change because the existing behavior may be correct for applications other than generating HFiles.  I can imagine situations in which one would want the latest version of a file produced by several reducers to be the only one left at the end of a map/reduce job.  However, it&apos;s definitely not appropriate when producing HFiles for an incremental load.  My own solution which I am testing now is to clone FileOutputCommitter and add logic to the moveTaskOutputs() method that creates a new name for any conflicting files.  FileOutputCommitter had too many components that were private to make it easy to subclass.  I subclassed FileOutputFormat to use the new output committer class and then I used that subclass in my map/reduce job.  I included a logging statement in the new moveTaskOutputs() method so that I can tell when the rename logic is triggered.  It may take awhile to see if the logic is successful since the two occurrences that I was able to track down occurred two months apart in a job that runs nightly.&lt;/p&gt;</comment>
                            <comment id="13191310" author="jxiang" created="Mon, 23 Jan 2012 18:14:51 +0000"  >&lt;p&gt;Any fix in getRandomFilename will just reduce the chance of file name collision.  Since this a rare case, I think it may be better to just fail the task if failed to commit the files in the moveTaskOutputs(), without overwriting the existing files.  In HDFS 0.23, rename() takes an option not to overwrite.  With HADOOP 0.20, we can just do our best to check any conflicts before committing the files.&lt;/p&gt;</comment>
                            <comment id="13191314" author="zhihyu@ebaysf.com" created="Mon, 23 Jan 2012 18:19:43 +0000"  >&lt;p&gt;I prefer Lawrence&apos;s approach.&lt;br/&gt;
The only consideration is that it takes relatively long for the proposed change in FileOutputCommitter.moveTaskOutputs() to be published, reviewed and pushed upstream.&lt;/p&gt;</comment>
                            <comment id="13191327" author="tlipcon" created="Mon, 23 Jan 2012 18:31:27 +0000"  >&lt;p&gt;Why not change the output file name to be based on the task attempt ID? There is already a unique id for each task available...&lt;/p&gt;</comment>
                            <comment id="13191351" author="jxiang" created="Mon, 23 Jan 2012 18:59:46 +0000"  >&lt;p&gt;I like this one.  It&apos;s really simple and clean.&lt;/p&gt;</comment>
                            <comment id="13192217" author="lsimpson" created="Tue, 24 Jan 2012 15:35:14 +0000"  >&lt;p&gt;@Todd:&lt;br/&gt;
Two questions about your solution:&lt;br/&gt;
1. If we were to form a file name from just the numeric digits of the task attempt ID, that would be 23 digits.  As I look at the file names for HBase tables, they seem to be 18-19 digits long.  Do you know if there are any assumptions made in other HBase code about the length of file names for store files?&lt;br/&gt;
2. In the unlikely event that there was a name conflict with an HFile created by a reducer, what should happen then?  (The job number looks like it might roll at 10000 jobs - I don&apos;t know if anyone has gotten that far without restarting Map/Reduce.)  &lt;/p&gt;

&lt;p&gt;It still seems to me that the safest solution is a change to HFileOutputFormat to use a new output committer class that adds rename logic to moveTaskOutputs().  These changes could be implemented strictly in the HBase code tree without having to involve the underlying Hadoop implementation. &lt;/p&gt;</comment>
                            <comment id="13195065" author="tlipcon" created="Fri, 27 Jan 2012 20:16:03 +0000"  >&lt;p&gt;In Store.java, when we bulk-load the MR output, we rename to a randomly generated filename in the region directory, using a UUID, it looks like. So the names of the MR output files should be inconsequential.&lt;/p&gt;</comment>
                            <comment id="13588702" author="ndimiduk" created="Wed, 27 Feb 2013 20:07:48 +0000"  >&lt;p&gt;Can this issue be reproduced in a more modern HBase? Can we close this as WON&apos;T FIX as we sunset the 0.90 line?&lt;/p&gt;</comment>
                            <comment id="14632361" author="lhofhansl" created="Sat, 18 Jul 2015 10:15:59 +0000"  >&lt;p&gt;Closing for now&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12510795" name="HBASE-5210-crazy-new-getRandomFilename.patch" size="2246" author="apurtell" created="Tue, 17 Jan 2012 02:50:41 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 17 Jan 2012 02:50:42 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>224060</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 21 weeks, 6 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02bsn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11512</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>