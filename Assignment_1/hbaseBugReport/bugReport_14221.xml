<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:50:57 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14221/HBASE-14221.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14221] Reduce the number of time row comparison is done in a Scan</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14221</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;When we tried to do some profiling with the PE tool found this.&lt;br/&gt;
Currently we do row comparisons in 3 places in a simple Scan case.&lt;br/&gt;
1) ScanQueryMatcher&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
       &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.rowComparator.compareRows(curCell, cell);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.isReversed) {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ret &amp;lt;= -1) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; MatchCode.DONE;
      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ret &amp;gt;= 1) {
        &lt;span class=&quot;code-comment&quot;&gt;// could optimize &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; necessary?
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// Could also be called SEEK_TO_CURRENT_ROW, but &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;
&lt;/span&gt;        &lt;span class=&quot;code-comment&quot;&gt;// should be rare/never happens.
&lt;/span&gt;        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; MatchCode.SEEK_NEXT_ROW;
      }
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ret &amp;lt;= -1) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; MatchCode.SEEK_NEXT_ROW;
      } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (ret &amp;gt;= 1) {
        &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; MatchCode.DONE;
      }
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;2) In StoreScanner next() while starting to scan the row&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!scannerContext.hasAnyLimit(LimitScope.BETWEEN_CELLS) || matcher.curCell == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; ||
        isNewRow || !CellUtil.matchingRow(peeked, matcher.curCell)) {
      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.countPerRow = 0;
      matcher.setToNewRow(peeked);
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Particularly to see if we are in a new row.&lt;br/&gt;
3) In HRegion&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
          scannerContext.setKeepProgress(&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;);
          heap.next(results, scannerContext);
          scannerContext.setKeepProgress(tmpKeepProgress);

          nextKv = heap.peek();
moreCellsInRow = moreCellsInRow(nextKv, currentRowCell);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here again there are cases where we need to careful for a MultiCF case.  Was trying to solve this for the MultiCF case but is having lot of cases to solve. But atleast for a single CF case I think these comparison can be reduced.&lt;br/&gt;
So for a single CF case in the SQM we are able to find if we have crossed a row using the code pasted above in SQM. That comparison is definitely needed.&lt;br/&gt;
Now in case of a single CF the HRegion is going to have only one element in the heap and so the 3rd comparison can surely be avoided if the StoreScanner.next() was over due to MatchCode.DONE caused by SQM.&lt;/p&gt;

&lt;p&gt;Coming to the 2nd compareRows that we do in StoreScanner. next() - even that can be avoided if we know that the previous next() call was over due to a new row. Doing all this I found that the compareRows in the profiler which was 19% got reduced to 13%. Initially we can solve for single CF case which can be extended to MultiCF cases.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12856052">HBASE-14221</key>
            <summary>Reduce the number of time row comparison is done in a Scan</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12783345">HBASE-13291</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ram_krish">ramkrishna.s.vasudevan</assignee>
                                    <reporter username="ram_krish">ramkrishna.s.vasudevan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 14 Aug 2015 05:29:27 +0000</created>
                <updated>Wed, 27 Jan 2016 15:28:25 +0000</updated>
                            <resolved>Tue, 19 Jan 2016 05:22:56 +0000</resolved>
                                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>1.2.0</fixVersion>
                    <fixVersion>1.3.0</fixVersion>
                    <fixVersion>1.0.3</fixVersion>
                    <fixVersion>1.1.3</fixVersion>
                                    <component>Scanners</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="14696955" author="ram_krish" created="Fri, 14 Aug 2015 12:51:16 +0000"  >&lt;p&gt;Attaching a patch for QA.  Mainly handles two things&lt;br/&gt;
At the HRegion level avoids calling the matchingRows() when the StoreScanner has already moved to the next row - this happens only for the Single CF case.&lt;br/&gt;
At the StoreScanner level if the scan has moved to the next row - the next next() call will not do CellUtil.matchingRows() because it already knows that it has moved over to the next row.  &lt;br/&gt;
In case of filterRowKey() case we need to explicitly reset the nextRow flag because we don&apos;t get a chance to call the populateResult() which would have internally set the nextRow to false for the next cell.  &lt;/p&gt;</comment>
                            <comment id="14696958" author="ram_krish" created="Fri, 14 Aug 2015 12:53:14 +0000"  >&lt;p&gt;Just attaching a profiler output for a simple PE scanRange profiling with and without this change.  Note that the PE was run with Filterallfilter.  Even without the FilterAllFilter the same impact will be there because overall the flow is same except that the nextRow is not called.&lt;/p&gt;</comment>
                            <comment id="14696960" author="ram_krish" created="Fri, 14 Aug 2015 12:54:17 +0000"  >&lt;p&gt;Withpatch - ScanRange10000 with filterall  - 162 secs&lt;br/&gt;
Without patch - ScanRange10000 with filterall - 170 secs&lt;/p&gt;</comment>
                            <comment id="14697329" author="hadoopqa" created="Fri, 14 Aug 2015 16:30:08 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12750499/HBASE-14221.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12750499/HBASE-14221.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit f2a9dab30eb339c86222db47430f18f7abf405c2.&lt;br/&gt;
  ATTACHMENT ID: 12750499&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1857 checkstyle errors (more than the master&apos;s current 1856 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.master.procedure.TestWALProcedureStoreOnHDFS&lt;br/&gt;
                  org.apache.hadoop.hbase.TestServerSideScanMetricsFromClientSide&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.regionserver.TestHeapMemoryManager.testPluggingInHeapMemoryTuner(TestHeapMemoryManager.java:198)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15101//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15101//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15101//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15101//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15101//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15101//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15101//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15101//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15101//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15101//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14697804" author="stack" created="Fri, 14 Aug 2015 21:33:25 +0000"  >&lt;p&gt;Was going to suggest that added complexity not worth the gain but the changes are small enough and mostly adding more context. What do others perhaps closer to scanning think?&lt;/p&gt;</comment>
                            <comment id="14699383" author="ram_krish" created="Mon, 17 Aug 2015 11:27:37 +0000"  >&lt;p&gt;Updated patch correcting the failing test case and the checkstyle comments fix.  &lt;br/&gt;
In case of BATCH_LIMIT reached in StoreScanner we do a comparison for the row if it has moved already. this comparison will any way as part of HRegion or in the StoreScanner while doing next().  There is no logical mistake if we don&apos;t do it here but we do one more while loop in the HRegion layer and that is altering the scan metrics.  Rest are all fine.  &lt;br/&gt;
Coming to the impact on the perf with scanRange30000 (patched PE tool to scan bigger ranges) and with filterAll I can see clear difference with and withoutpatch on latest trunk&lt;/p&gt;

&lt;p&gt;With patch&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  Min: 379757ms   Max: 383591ms   Avg: 382071ms
  Min: 383131ms   Max: 387450ms   Avg: 385802ms
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Without patch&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
   Min: 424281ms   Max: 428828ms   Avg: 426949ms
    Min: 419371ms   Max: 422791ms   Avg: 421344ms
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14699486" author="hadoopqa" created="Mon, 17 Aug 2015 12:51:10 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12750790/HBASE-14221_1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12750790/HBASE-14221_1.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 737f264509284420e6fa8c14d92fe9fbdb49f67f.&lt;br/&gt;
  ATTACHMENT ID: 12750790&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javac&lt;/font&gt;.  The patch appears to cause mvn compile goal to fail with Hadoop version 2.4.0.&lt;/p&gt;

&lt;p&gt;    Compilation errors resume:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; COMPILATION ERROR : &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedRegionScannerImpl.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;67,3&amp;#93;&lt;/span&gt; method does not override or implement a method from a supertype&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.2:compile (default-compile) on project hbase-server: Compilation failure&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedRegionScannerImpl.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;67,3&amp;#93;&lt;/span&gt; method does not override or implement a method from a supertype&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; To see the full stack trace of the errors, re-run Maven with the -e switch.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Re-run Maven using the -X switch to enable full debug logging.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; For more information about the errors and possible solutions, please read the following articles:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; After correcting the problems, you can resume the build with the command&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt;   mvn &amp;lt;goals&amp;gt; -rf :hbase-server&lt;/p&gt;


&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15129//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15129//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14699496" author="ram_krish" created="Mon, 17 Aug 2015 13:00:16 +0000"  >&lt;p&gt;Sorry. Some compilation error in the patch.&lt;/p&gt;</comment>
                            <comment id="14699754" author="hadoopqa" created="Mon, 17 Aug 2015 16:11:24 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12750803/HBASE-14221_1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12750803/HBASE-14221_1.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 737f264509284420e6fa8c14d92fe9fbdb49f67f.&lt;br/&gt;
  ATTACHMENT ID: 12750803&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.hbase.TestClassFinder.testClassFinderCanFindClassesInJars(TestClassFinder.java:95)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15130//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15130//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15130//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15130//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15130//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15130//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15130//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15130//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15130//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15130//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14716302" author="ram_krish" created="Thu, 27 Aug 2015 08:52:29 +0000"  >&lt;p&gt;Ping!!!&lt;br/&gt;
I could see that using YCSB the overall avg increases due to this patch.&lt;/p&gt;</comment>
                            <comment id="14724865" author="ram_krish" created="Tue, 1 Sep 2015 06:30:48 +0000"  >&lt;p&gt;While doing some more tests with PE for a KV with val size as 50 bytes&lt;br/&gt;
Before &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
Min: 170012ms   Max: 171601ms   Avg: 170879ms&lt;br/&gt;
After&lt;br/&gt;
Min: 153579ms   Max: 154877ms   Avg: 154390ms&lt;br/&gt;
This is for&lt;br/&gt;
./hbase org.apache.hadoop.hbase.PerformanceEvaluation --oneCon=true   --nomapred --filterAll  --addColumns=false   --rows=10000 --caching=1000 scanRange10000 20&lt;/p&gt;</comment>
                            <comment id="14747288" author="ram_krish" created="Wed, 16 Sep 2015 10:47:39 +0000"  >&lt;p&gt;Ping for reviews.  I would like to extend this idea for Multi CFs also but I thought once this idea is fine can work on it. I already tried working on that but had some issues with the way fake keys were created.  Worth trying though.&lt;/p&gt;</comment>
                            <comment id="14790692" author="stack" created="Wed, 16 Sep 2015 16:40:07 +0000"  >&lt;blockquote&gt;&lt;p&gt;. But atleast for a single CF case I think these comparison can be reduced.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;How does this extend to the MultiCF case?&lt;/p&gt;

&lt;p&gt;So, about 10% difference for this added complexity?&lt;/p&gt;

&lt;p&gt;@larsh You are probably interested in this.&lt;/p&gt;

&lt;p&gt;Why need for two flags? Why not isSingleColumnFamily test not enough? When would we have a single store heap scanner but then a joined heap would have more than one?&lt;/p&gt;

&lt;p&gt;5275	    // Indicates if the storeHeap is formed of only one StoreScanner&lt;br/&gt;
5276	    boolean singleStoreScannerHeap = false;&lt;br/&gt;
5277	    // Indicates if the joinedHeap is formed of only one StoreScanner.&lt;br/&gt;
5278	    boolean singleStoreScannerJoinedHeap = false;&lt;/p&gt;

&lt;p&gt;Why add a flag here?&lt;/p&gt;

&lt;p&gt;      boolean moreValues = populateResult(results, this.joinedHeap, scannerContext,&lt;br/&gt;
5488	          joinedContinuationRow);	5497	          joinedContinuationRow, singleStoreScannerJoinedHeap);&lt;/p&gt;

&lt;p&gt;Why not just have the flag be in the scanner context?&lt;/p&gt;</comment>
                            <comment id="14901980" author="ram_krish" created="Tue, 22 Sep 2015 05:47:29 +0000"  >&lt;p&gt;As am not getting notifications on the JIRA updates I  missed this review. Sorry about that.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;How does this extend to the MultiCF case?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Ideally the multiCF case also the same should apply. As we tend to move from CF to CF till we complete the current row, this same logic should be applicable. But I need to work on some more complex cases to see if all fits into the same umbrella.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;So, about 10% difference for this added complexity?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Do you think this is going to be more complex for the gain we get? I thought avoiding as many compares as possible would be beneficial. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Why need for two flags? Why not isSingleColumnFamily test not enough? When would we have a single store heap scanner but then a joined heap would have more than one?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I created one more specifically for the joined scanner case. Because by code the normal scanner and joined scanner are treated as special cases.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Why not just have the flag be in the scanner context?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes. We can try to have the flag in the scanner context too I think. Let me try  it out.  &lt;br/&gt;
But before I update the patch do you think we can get this in Stack?  The gain is quite siginificant in almost all the tests that I did.&lt;/p&gt;</comment>
                            <comment id="14934977" author="ram_krish" created="Tue, 29 Sep 2015 10:35:01 +0000"  >&lt;p&gt;Updated patch that deals with multiCF also. &lt;/p&gt;</comment>
                            <comment id="14934995" author="ram_krish" created="Tue, 29 Sep 2015 10:58:50 +0000"  >&lt;p&gt;This patch tries to create an enum indicating the current state of the StoreScanner whether it has moved to the NEXT_ROW or in the CURRENT_ROW.  Was not able to use this in the ScannerContext because we need the state per stores scanner.&lt;br/&gt;
After every row is fetched we clear the state of the store scanner.  &lt;br/&gt;
A special case is that of the fakeCell where we need to identify if a store has really fetched an actual cell or a fake cell.  This happens when a scan query is issued with explicit columns.  Any scan with explicit scans will always have a fake key created and that is the initially the storeScanner would point to. In such cases we cannot safely assume if we have really fetched the nextRow unless we are sure that the cell is not a fake Cell. &lt;/p&gt;</comment>
                            <comment id="14935203" author="hadoopqa" created="Tue, 29 Sep 2015 13:59:32 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12764222/HBASE-14221_6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12764222/HBASE-14221_6.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 2ea70c7e6c70c4bd689b79718999a948001f3b21.&lt;br/&gt;
  ATTACHMENT ID: 12764222&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated 1789 checkstyle errors (more than the master&apos;s current 1787 errors).&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.master.procedure.TestWALProcedureStoreOnHDFS&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 6 zombie test(s): 	at org.apache.hadoop.hbase.regionserver.TestHRegion.testWritesWhileScanning(TestHRegion.java:3890)&lt;br/&gt;
	at org.apache.hadoop.hbase.wal.TestWALSplit.testOpenZeroLengthReportedFileButWithDataGetsSplit(TestWALSplit.java:480)&lt;br/&gt;
	at org.apache.hadoop.hbase.client.TestReplicasClient.testScanWithReplicas(TestReplicasClient.java:599)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15803//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15803//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15803//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15803//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15803//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15803//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15803//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15803//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14936378" author="ram_krish" created="Wed, 30 Sep 2015 05:08:56 +0000"  >&lt;p&gt;The failed tests shown above passes locally.&lt;/p&gt;</comment>
                            <comment id="14945966" author="stack" created="Tue, 6 Oct 2015 23:06:12 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt; For you...&lt;/p&gt;</comment>
                            <comment id="14946298" author="lhofhansl" created="Wed, 7 Oct 2015 05:37:18 +0000"  >&lt;p&gt;Good find.&lt;/p&gt;

&lt;p&gt;Although, isn&apos;t there a simpler way to do this, without extending KeyValueScanner and adding a new enum of return codes, row state to be maintained, etc?&lt;/p&gt;

&lt;p&gt;I always thought we can get rid of case #2 above, by piggy packing on the comparison of case #1 (and then doing the reset there). Even made a patch for that some point; like many things didn&apos;t finish it.&lt;/p&gt;</comment>
                            <comment id="14946327" author="lhofhansl" created="Wed, 7 Oct 2015 06:06:15 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;, take a look at the &quot;-takeALook&quot; sample. That&apos;s what I mean.&lt;br/&gt;
I let the SQM decide when a new row is found (it&apos;s better encapsulation, and it&apos;s doing the comparison there anyway).&lt;/p&gt;

&lt;p&gt;Haven&apos;t tested in beyond running TestScanner and TestAtomicOperation, which both still pass.&lt;/p&gt;

&lt;p&gt;(I am not suggesting we use my patch, it&apos;s just easier to explain what I mean by having it in a patch rather then describing it in words).&lt;/p&gt;</comment>
                            <comment id="14946344" author="hadoopqa" created="Wed, 7 Oct 2015 06:24:11 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12765329/14221-0.98-takeALook.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12765329/14221-0.98-takeALook.txt&lt;/a&gt;&lt;br/&gt;
  against 0.98 branch at commit 298721b259cc63ca13c35c1eb0cffe36fd553ce0.&lt;br/&gt;
  ATTACHMENT ID: 12765329&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javac&lt;/font&gt;.  The patch appears to cause mvn compile goal to fail with Hadoop version 2.4.0.&lt;/p&gt;

&lt;p&gt;    Compilation errors resume:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; COMPILATION ERROR : &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;112,6&amp;#93;&lt;/span&gt; error: setRow(byte[],int,short) has private access in ScanQueryMatcher&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;175,6&amp;#93;&lt;/span&gt; error: setRow(byte[],int,short) has private access in ScanQueryMatcher&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;228,6&amp;#93;&lt;/span&gt; error: setRow(byte[],int,short) has private access in ScanQueryMatcher&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;281,6&amp;#93;&lt;/span&gt; error: setRow(byte[],int,short) has private access in ScanQueryMatcher&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;334,10&amp;#93;&lt;/span&gt; error: setRow(byte[],int,short) has private access in ScanQueryMatcher&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:2.5.1:testCompile (default-testCompile) on project hbase-server: Compilation failure: Compilation failure:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;112,6&amp;#93;&lt;/span&gt; error: setRow(byte[],int,short) has private access in ScanQueryMatcher&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;175,6&amp;#93;&lt;/span&gt; error: setRow(byte[],int,short) has private access in ScanQueryMatcher&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;228,6&amp;#93;&lt;/span&gt; error: setRow(byte[],int,short) has private access in ScanQueryMatcher&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;281,6&amp;#93;&lt;/span&gt; error: setRow(byte[],int,short) has private access in ScanQueryMatcher&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestQueryMatcher.java:&lt;span class=&quot;error&quot;&gt;&amp;#91;334,10&amp;#93;&lt;/span&gt; error: setRow(byte[],int,short) has private access in ScanQueryMatcher&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; -&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; To see the full stack trace of the errors, re-run Maven with the -e switch.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Re-run Maven using the -X switch to enable full debug logging.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; For more information about the errors and possible solutions, please read the following articles:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; After correcting the problems, you can resume the build with the command&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt;   mvn &amp;lt;goals&amp;gt; -rf :hbase-server&lt;/p&gt;


&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15898//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15898//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14946682" author="ram_krish" created="Wed, 7 Oct 2015 11:11:36 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;&lt;br/&gt;
Thanks for the patch. I think it makes sense and will work. Even in my patch also I have avoided the additional compare in the StoreScanner that happens and I have controlled that within the StoreScanner.   Infact my initial idea was to just avoid the StoreScanner compare alone. But later found that the HRegion also does a compare before confirming if it has moved to the next row. &lt;/p&gt;</comment>
                            <comment id="14948057" author="lhofhansl" created="Thu, 8 Oct 2015 04:32:06 +0000"  >&lt;p&gt;I should make my patch compile fully. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The compare in StoreScanner.next() is actually only performed when scanner batching is enabled (which in most cases it is not).&lt;br/&gt;
If batching is off we know that each time we enter next() is must be a new row.&lt;/p&gt;

&lt;p&gt;The complexity and readability of the patch might not be worth the improvement...?&lt;/p&gt;</comment>
                            <comment id="14948112" author="ram_krish" created="Thu, 8 Oct 2015 05:48:29 +0000"  >&lt;p&gt;I would say the biggest problem that I faced is with the fake keys.  Considering that when we add explicit columns then we tend to use fake keys as the initial start point for the scans. But the row created by the fake key may not be the actual row but still we will say that we have found a new row as the row content has changed. So until an actual key is retrieved we cannot assume we have got a new row.  Rest I thought is okie - and particularly this gain is only in scans and not in gets. &lt;/p&gt;</comment>
                            <comment id="14950382" author="anoop.hbase" created="Fri, 9 Oct 2015 13:29:44 +0000"  >&lt;p&gt;Ram , this patch u have given, is for multi CF also right?&lt;br/&gt;
At HRegion level we ask KVHeap abt the next row state which in turn ask its current StoreScanner.  At StoreScanner level it will know abt the next row state within this CF only no?  How we can rely on that data in HRegion level?  There we have to consider all Stores (StoreScanners).   Am I missing some thing?&lt;/p&gt;</comment>
                            <comment id="14952609" author="ram_krish" created="Mon, 12 Oct 2015 04:28:11 +0000"  >&lt;p&gt;Thanks for the review.  Yes that is how it has to be - but there is one difference in how this works.  Due to various conditions and cases I thought of having 3 cases - INIT, NOT_IN_NEXT_ROW and NEXT_ROW. &lt;br/&gt;
So in case there are 2 CFs and the 2 cells are &apos;row1:cf1:q1&apos; and &apos;row1:cf2:q1&apos;. (assume we have row2:cf1:q1 and row2:cf2:q1).&lt;br/&gt;
So once the first cell with cf1 is fetched that storeScanner would be moved to nextRow as it is currently at row2.  But for fetching row1:cf2 that storeSCanner is still at INIT state and so we will be doing the matchingRows there and that will also be moved to nextRow.  But at the KVHeap having these StoreScanners will next fetch row2:cf1 but since this scanner is the &apos;current&apos; StoreScanner and already in nextRow it will avoid the compare this time. Internally at the StoreScanner level also we are avoiding the matchingrows to set the SQM with the current row.&lt;br/&gt;
Why this INIT state is also needed is that, some times though there are two CFs but the rows in the 2nd CF may always be lesser than the row fetched out from the CF1. So the KVHeap holding the StoreScanners may not actually use the 2nd CF at all so that point we really don know if that CF has crossed the current row it is pointing to. &lt;/p&gt;</comment>
                            <comment id="14952638" author="stack" created="Mon, 12 Oct 2015 05:00:13 +0000"  >&lt;p&gt;Comment from left field: I&apos;ve been profiling this w/e... and cutting down on the amount of comparing is the most effective means of cutting CPU consumed returning results... just stating what is obvious to most but I just tripped over it again, anew..&lt;/p&gt;
</comment>
                            <comment id="14952649" author="ram_krish" created="Mon, 12 Oct 2015 05:13:25 +0000"  >&lt;p&gt;Stack, not getting this&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Comment from left field: ? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You mean the left hand side compare?&lt;/p&gt;</comment>
                            <comment id="14953705" author="stack" created="Mon, 12 Oct 2015 20:52:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;You mean the left hand side compare?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No. I was just making a macro-level remark, not particular in anyway. I was profiling on the weekend and compare of rows is where we spend most of our time so NOT comparing &amp;#8211; if we can avoid some compares &amp;#8211; then the payback will be large (in my estimation).&lt;/p&gt;</comment>
                            <comment id="14954366" author="lhofhansl" created="Tue, 13 Oct 2015 04:34:18 +0000"  >&lt;p&gt;Agreed... I do think the most compares happen in the heaps (PriorityQueue) we&apos;re using, though.&lt;/p&gt;</comment>
                            <comment id="14954370" author="lhofhansl" created="Tue, 13 Oct 2015 04:35:46 +0000"  >&lt;p&gt;Might be time to look at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9969&quot; title=&quot;Improve KeyValueHeap using loser tree&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9969&quot;&gt;HBASE-9969&lt;/a&gt; again.&lt;/p&gt;</comment>
                            <comment id="14954444" author="stack" created="Tue, 13 Oct 2015 05:56:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;Might be time to look at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9969&quot; title=&quot;Improve KeyValueHeap using loser tree&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9969&quot;&gt;HBASE-9969&lt;/a&gt; again.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That seemed like an elegant soln, at least on first blush....&lt;/p&gt;</comment>
                            <comment id="14956224" author="lhofhansl" created="Wed, 14 Oct 2015 04:18:25 +0000"  >&lt;p&gt;I think &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt;&apos;s KeyValueScannerHeap is worth exploring still (see later on that jira). It beats PriorityQueue in every test, and since it is our implementation we can further tweak it down the road. Matt&apos;s MIA unfortunately, but I plan to test some more with it. &lt;/p&gt;

&lt;p&gt;(And I have some awesome database guys sitting less than 30 feet form me, and they come up with a striking similar scanner approach for their LSM based database)&lt;/p&gt;</comment>
                            <comment id="14956272" author="ram_krish" created="Wed, 14 Oct 2015 05:03:40 +0000"  >&lt;p&gt;+1 on trying it out.  Need to explore  more on that loser tree.  Just started seeing some docs for this topic called Tournament Trees. &lt;/p&gt;</comment>
                            <comment id="15000293" author="ram_krish" created="Wed, 11 Nov 2015 12:07:36 +0000"  >&lt;p&gt;So for this JIRA we are not going to go with the current approach and rework totally with the LoserTrees? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; or &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=larsh&quot; class=&quot;user-hover&quot; rel=&quot;larsh&quot;&gt;larsh&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="15003338" author="lhofhansl" created="Fri, 13 Nov 2015 01:17:56 +0000"  >&lt;p&gt;The LoserTree did not work out in all cases, but in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9969&quot; title=&quot;Improve KeyValueHeap using loser tree&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9969&quot;&gt;HBASE-9969&lt;/a&gt; Matt has an alternate implementation of KeyValueHeap, which I thought was nice for two reasons:&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;it saves some compares, and&lt;/li&gt;
	&lt;li&gt;the implementation is our own, so we can tweak it more later (it has always bothered me a bit that &lt;em&gt;the&lt;/em&gt; central data structure for HBase&apos;s mergesort is just the Java standard PriorityQueue &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; )&lt;/li&gt;
&lt;/ol&gt;
</comment>
                            <comment id="15008465" author="ram_krish" created="Tue, 17 Nov 2015 10:49:36 +0000"  >&lt;p&gt;In order to proceed with &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt;, I did some analysis in this JIRa with the patches provided and the benchmarks given. What Matt says is true, reseeks with LoserTree is faster whereas next() with LoserTree is slower. This is surely because of the number of operations and comparisons that we perform. &lt;br/&gt;
In case of next() with KVHeap, we always have do a peek() to the next KVScanner and with that we compare the current KV if we really to add the scanner back to the KVHeap.  So here there is no change to the heap. and so no comparison. Where as in case of LoserTree we need to fetch the next key and always keep adjusting the tree. &lt;br/&gt;
In case of reseek() the case with KVHeap is that we do lot of changes to the heap, first we simply add the current scanner to the heap, then do a poll and again based on the need we again add the current scanner to the heap. But in case of LoserTree these many comparisons are avoided and it is similar to the next() call with LoserTree.&lt;br/&gt;
Am not very sure which one would be better here because both next() and reseek() is going to be important when we have filters along with scans. &lt;br/&gt;
Coming to this patch- this patch is more to do with the comparisons in the StoreScanner level and Hregion level and it is mainly in comparing the rows. So this patch can be seen as a different area than where the KVHeap would come in. So it may be worth pursuing? Am still doing some more analysis on the LoserTree and its impl and see how we can benefit from them. &lt;/p&gt;</comment>
                            <comment id="15008471" author="ram_krish" created="Tue, 17 Nov 2015 10:51:37 +0000"  >&lt;p&gt;One thing I can see is that when reseeks() are more (when we keep filtering more and more) then the LoserTree impl would be more ideal. &lt;/p&gt;</comment>
                            <comment id="15011495" author="stack" created="Wed, 18 Nov 2015 17:35:57 +0000"  >&lt;p&gt;Did you mean an issue other than &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt; above &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;? 14221 is this issue.&lt;/p&gt;

&lt;p&gt;Is there a write up or class diagram of how our merge sort works anywhere? Even a listing of participants would help (filters, fake keys).&lt;/p&gt;

&lt;p&gt;From your description, it sounds like the patch here is at a different level. Let me take a look.&lt;/p&gt;

&lt;p&gt;Thanks for digging in here &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; I think there are some potential big wins here but takes doing a deep dig. The original code is from another time.&lt;/p&gt;

</comment>
                            <comment id="15012800" author="ram_krish" created="Thu, 19 Nov 2015 05:03:01 +0000"  >&lt;blockquote&gt;&lt;p&gt;Did you mean an issue other than &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt; above ramkrishna.s.vasudevan? 14221 is this issue.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Sorry. I mean &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9969&quot; title=&quot;Improve KeyValueHeap using loser tree&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9969&quot;&gt;HBASE-9969&lt;/a&gt;. I first added this comment over that JIRA but finally thought this JIRA is the ideal place, but forgot to change the JIRA id.&lt;/p&gt;</comment>
                            <comment id="15012807" author="ram_krish" created="Thu, 19 Nov 2015 05:06:50 +0000"  >&lt;p&gt;One way to decide if LoserTree is really beneficial is to do some cluster runs with PE tool or YCSB (preferably PE because we can do the filterAll) and see if consecutive next() calls is performing slower in a real scan case. But reseeks() will be faster because of lesser comparisons. &lt;br/&gt;
This patch as I said is on a higher level and since LoserTree change is going to be a major one - we could take up this patch (if it is really fine) until LoserTree (or any other DS) makes it way to the code base.&lt;/p&gt;</comment>
                            <comment id="15033336" author="ram_krish" created="Tue, 1 Dec 2015 08:32:06 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoop.hbase&quot; class=&quot;user-hover&quot; rel=&quot;anoop.hbase&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;br/&gt;
Do you have comments here?  If you feel it is big patch we can atleast get the changes in Storescanner alone seperately something like what Lars patch does.&lt;/p&gt;</comment>
                            <comment id="15080742" author="lhofhansl" created="Mon, 4 Jan 2016 06:20:30 +0000"  >&lt;p&gt;I&apos;m all for a smaller version of the patch.&lt;/p&gt;

&lt;p&gt;Also from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9969&quot; title=&quot;Improve KeyValueHeap using loser tree&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9969&quot;&gt;HBASE-9969&lt;/a&gt;, we should explore the KeyValueScannerPriorityQueue that &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mcorgan&quot; class=&quot;user-hover&quot; rel=&quot;mcorgan&quot;&gt;Matt Corgan&lt;/a&gt; added (not LoserTree)&lt;/p&gt;</comment>
                            <comment id="15080920" author="ram_krish" created="Mon, 4 Jan 2016 10:06:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;I&apos;m all for a smaller version of the patch.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Okie. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Also from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9969&quot; title=&quot;Improve KeyValueHeap using loser tree&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9969&quot;&gt;HBASE-9969&lt;/a&gt;, we should explore the KeyValueScannerPriorityQueue that Matt Corgan added (not LoserTree)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let me try it . I just need to refresh my analysis to justify my analysis. will be back at it soon. &lt;/p&gt;</comment>
                            <comment id="15082635" author="ram_krish" created="Tue, 5 Jan 2016 08:28:16 +0000"  >&lt;p&gt;Patch that avoid compareRows in StoreScanner layer alone. Previous patches were focussing on HRegion layer also. Now in a test like TestMultiColumnScanner we avoid around 2k - 3k compreRows comparisons  with this patch. &lt;br/&gt;
The idea is to make the matcher&apos;s curCell to null when we ever the Matcher says SEEK_NEXT_ROW or INCLUDE_AND_SEEK_NEXT_ROW. This is because we are sure that the seek would have fetched the next row and so the next cell will any way be the next row and the current next() call should come out with a DONE call. &lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=larsh&quot; class=&quot;user-hover&quot; rel=&quot;larsh&quot;&gt;larsh&lt;/a&gt;&lt;br/&gt;
What do you think of this patch?&lt;/p&gt;</comment>
                            <comment id="15082905" author="hadoopqa" created="Tue, 5 Jan 2016 11:42:30 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12780495/HBASE-14221_9.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12780495/HBASE-14221_9.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 9997e4ee52136a681faa825dea46bd1162d71eca.&lt;br/&gt;
  ATTACHMENT ID: 12780495&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;                &lt;font color=&quot;red&quot;&gt;-1 checkstyle&lt;/font&gt;.  The applied patch generated new checkstyle errors. Check build console for list of new errors.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn post-site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 zombies&lt;/font&gt;. No zombie tests found running at the end of the build.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/17125//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/17125//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/17125//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/17125//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/17125//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/17125//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;                Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/17125//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/17125//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="15083466" author="lhofhansl" created="Tue, 5 Jan 2016 17:58:01 +0000"  >&lt;p&gt;+1&lt;br/&gt;
(please use &quot;lhofhansl&quot; as alias, not &quot;larsh&quot; &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt; )&lt;/p&gt;</comment>
                            <comment id="15084988" author="ram_krish" created="Wed, 6 Jan 2016 05:10:26 +0000"  >&lt;p&gt;Pushed to master. Thanks for the reviews and comments over here &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;.&lt;br/&gt;
Should this be pushed to 1.0 branches as well?&lt;/p&gt;</comment>
                            <comment id="15085154" author="hudson" created="Wed, 6 Jan 2016 07:47:23 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-Trunk_matrix #613 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-Trunk_matrix/613/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-Trunk_matrix/613/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt; Reduce the number of time row comparison is done in a Scan (ramkrishna: rev 073e00c0053cb351dbba265112a6e756c932f875)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15085219" author="ram_krish" created="Wed, 6 Jan 2016 08:46:29 +0000"  >&lt;p&gt;Patch for branch-1. &lt;/p&gt;</comment>
                            <comment id="15085428" author="hadoopqa" created="Wed, 6 Jan 2016 11:26:11 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12780708/HBASE-14221-branch-1.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12780708/HBASE-14221-branch-1.patch&lt;/a&gt;&lt;br/&gt;
  against branch-1 branch at commit 073e00c0053cb351dbba265112a6e756c932f875.&lt;br/&gt;
  ATTACHMENT ID: 12780708&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;. The applied patch does not generate new checkstyle errors.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 zombies&lt;/font&gt;. No zombie tests found running at the end of the build.&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/17141//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/17141//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/17141//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/17141//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/17141//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/17141//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/17141//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/17141//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="15085937" author="stack" created="Wed, 6 Jan 2016 17:54:04 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should this be pushed to 1.0 branches as well?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes&lt;/p&gt;</comment>
                            <comment id="15086844" author="ram_krish" created="Thu, 7 Jan 2016 05:30:51 +0000"  >&lt;p&gt;CAn i get a review on the branch-1 patch?  I can commit after reviews.&lt;/p&gt;</comment>
                            <comment id="15088395" author="stack" created="Thu, 7 Jan 2016 23:40:48 +0000"  >&lt;p&gt;Patch looks fine. Whats with all the setting the row to null and the null check. Why that needed now?&lt;/p&gt;</comment>
                            <comment id="15088700" author="ram_krish" created="Fri, 8 Jan 2016 04:44:45 +0000"  >&lt;blockquote&gt;&lt;p&gt;Whats with all the setting the row to null and the null check. Why that needed now?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It avoids additional compareRows operation that we do once we go to the next row or we seek to the next row. &lt;br/&gt;
Currently take a case where either the filter or some column tracker says SEEK_NEXT_ROW. So on seeing this we are sure that we would have seeked to the next row if it is available (if not null). Once it is seeked we in the loop process we again do  a compareRows() in the SQM.match() and then say DONE. Now this patch will avoid all such additional compares. &lt;/p&gt;

&lt;p&gt;Also once we know we are DONE we set the curCell to null. Before this when the StoreScanner.next() was called for the nextRow it used to do one compare and identify it moved to the nextRow, now that is not needed. &lt;br/&gt;
In my test run of TestMultiColumScanner after this patch around 2k to 3k compares were reduced.  &lt;/p&gt;</comment>
                            <comment id="15088708" author="stack" created="Fri, 8 Jan 2016 04:53:08 +0000"  >&lt;p&gt;Sweet. Add the above as a comment around the null setting on commit so someone reading the code knows why?&lt;/p&gt;</comment>
                            <comment id="15088736" author="ram_krish" created="Fri, 8 Jan 2016 05:35:40 +0000"  >&lt;p&gt;Pushed to all 1.0+ branches. Added the required comments also. Thanks for the reviews&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;&lt;br/&gt;
Do you want this patch in  0.98? &lt;/p&gt;
</comment>
                            <comment id="15088872" author="ram_krish" created="Fri, 8 Jan 2016 08:16:22 +0000"  >&lt;p&gt;I think in commit msg I added the JIRA ID as &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14227&quot; title=&quot;Fold special cased MOB APIs into existing APIs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14227&quot;&gt;&lt;del&gt;HBASE-14227&lt;/del&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt;. How to update the commit msg?&lt;/p&gt;</comment>
                            <comment id="15088888" author="ram_krish" created="Fri, 8 Jan 2016 08:35:28 +0000"  >&lt;p&gt;Reverted and pushed with proper commit msg. Thanks to &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=anoopsamjohn&quot; class=&quot;user-hover&quot; rel=&quot;anoopsamjohn&quot;&gt;Anoop Sam John&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="15089087" author="hudson" created="Fri, 8 Jan 2016 11:38:08 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.2-IT #385 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2-IT/385/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2-IT/385/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt; - Reduce the number of time row comparison is done in a (ramkrishna: rev f9c69893e0a56e9eb60a65703d0b481d12c305d0)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15089213" author="hudson" created="Fri, 8 Jan 2016 13:48:00 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2 #495 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/495/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/495/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt; - Reduce the number of time row comparison is done in a Scan (ramkrishna: rev f9c69893e0a56e9eb60a65703d0b481d12c305d0)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15089261" author="hudson" created="Fri, 8 Jan 2016 14:25:28 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.3 #487 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3/487/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3/487/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt; - Reduce the number of time row comparison is done in a Scan (ramkrishna: rev bc4b9eb0842bac32dd0f562e3401d5487c45b9da)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15089293" author="hudson" created="Fri, 8 Jan 2016 14:52:30 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.3-IT #429 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3-IT/429/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3-IT/429/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt; - Reduce the number of time row comparison is done in a Scan (ramkrishna: rev bc4b9eb0842bac32dd0f562e3401d5487c45b9da)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15089362" author="hudson" created="Fri, 8 Jan 2016 15:41:01 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.1-JDK8 #1723 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1-JDK8/1723/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1-JDK8/1723/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt; - Reduce the number of time row comparison is done in a (ramkrishna: rev 96da13c04649e2e4f8fbe4280a8fc00016b8d1b4)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15089371" author="hudson" created="Fri, 8 Jan 2016 15:44:51 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.1-JDK7 #1636 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1-JDK7/1636/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1-JDK7/1636/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt; - Reduce the number of time row comparison is done in a Scan (ramkrishna: rev 96da13c04649e2e4f8fbe4280a8fc00016b8d1b4)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15089547" author="hudson" created="Fri, 8 Jan 2016 17:16:57 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.0 #1132 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.0/1132/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.0/1132/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14221&quot; title=&quot;Reduce the number of time row comparison is done in a Scan&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14221&quot;&gt;&lt;del&gt;HBASE-14221&lt;/del&gt;&lt;/a&gt; - Reduce the number of time row comparison is done in a Scan (ramkrishna: rev cccf8e6a4a791aa94e738f42370b4f7e1f90353a)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="15097639" author="ndimiduk" created="Thu, 14 Jan 2016 05:44:03 +0000"  >&lt;p&gt;Looks like this was committed. Please update the Fix Versions and resolve the issue. Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="15119461" author="ndimiduk" created="Wed, 27 Jan 2016 15:28:25 +0000"  >&lt;p&gt;Bulk closing 1.1.3 issues.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12765329" name="14221-0.98-takeALook.txt" size="3769" author="lhofhansl" created="Wed, 7 Oct 2015 06:06:15 +0000"/>
                            <attachment id="12780708" name="HBASE-14221-branch-1.patch" size="4539" author="ram_krish" created="Wed, 6 Jan 2016 08:46:29 +0000"/>
                            <attachment id="12750499" name="HBASE-14221.patch" size="17583" author="ram_krish" created="Fri, 14 Aug 2015 12:51:16 +0000"/>
                            <attachment id="12750803" name="HBASE-14221_1.patch" size="19533" author="ram_krish" created="Mon, 17 Aug 2015 13:00:16 +0000"/>
                            <attachment id="12750790" name="HBASE-14221_1.patch" size="19507" author="ram_krish" created="Mon, 17 Aug 2015 11:27:37 +0000"/>
                            <attachment id="12764222" name="HBASE-14221_6.patch" size="22554" author="ram_krish" created="Tue, 29 Sep 2015 10:35:01 +0000"/>
                            <attachment id="12780495" name="HBASE-14221_9.patch" size="5351" author="ram_krish" created="Tue, 5 Jan 2016 08:28:16 +0000"/>
                            <attachment id="12750501" name="withmatchingRowspatch.png" size="23937" author="ram_krish" created="Fri, 14 Aug 2015 12:53:14 +0000"/>
                            <attachment id="12750502" name="withoutmatchingRowspatch.png" size="37238" author="ram_krish" created="Fri, 14 Aug 2015 12:53:14 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 14 Aug 2015 16:30:08 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            46 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2iwrb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>