<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:47:37 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-798/HBASE-798.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-798] Provide Client API to explicitly lock and unlock rows</title>
                <link>https://issues.apache.org/jira/browse/HBASE-798</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;We need to be able to perform a series of reads from and writes to a single row without any potential interference from other clients.&lt;/p&gt;

&lt;p&gt;Unfortunately this is a bit involved because normal reads currently do not acquire row locks, so it requires adding additional get/getRow calls that obtain and release a row lock.&lt;/p&gt;

&lt;p&gt;In addition, there will be two additional client calls, lockRow/unlockRow, which actually acquire and release the locks.  Though each lock is associated with an HRegion, this will be tracked within the HRegionServer.  When a lock is acquired from the client, it is handled much like a Scanner.  We obtain the row lock from the HRegion, store the region name and lock identifier in a synchronized Map, and also obtain a lease to ensure that the lock will eventually be released even if the client dies.&lt;/p&gt;

&lt;p&gt;This also required adding a RowLockListener (implements LeaseListener) private class in HRS to handle row lock lease expiration.&lt;/p&gt;

&lt;p&gt;HRS.lockRow will return a long lockId (as openScanner does) that will be used in subsequent client calls to reuse this existing row lock.  These calls will check that the lock is valid and perform the operations without any locking  (wrappers around get*, new versions of batchUpdate, openScanner, etc).&lt;/p&gt;

&lt;p&gt;This is going to really add some noise to the list of available HTable/client methods so I&apos;m not sure if it&apos;s something people would want to commit into a normal release.  Regardless this does provide some very convenient functionality that may be useful to others.&lt;/p&gt;

&lt;p&gt;We are also looking into Clint Morgan&apos;s &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-669&quot; title=&quot;MultiRegion transactions with Optimistic Concurrency Control&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-669&quot;&gt;&lt;del&gt;HBASE-669&lt;/del&gt;&lt;/a&gt;, but one major downside is that there is a significant amount of overhead involved.  This row locking is already built in and this will only extend the API to allow clients to work with them directly.  There is little to no overhead at all.  The only (obvious) performance consideration is that this should only used where necessary as rows will not be locked and unlocked as quickly with round-trip client calls.  In our design, we will have specific notes in our schema about which tables (or even which families or columns) must be accessed with row locks at all times and which do not.&lt;/p&gt;

&lt;p&gt;This is my first attempt at adding any additional functionality, so comments, criticism, code reviews are encouraged.&lt;/p&gt;

&lt;p&gt;I should have a patch up tomorrow.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12401756">HBASE-798</key>
            <summary>Provide Client API to explicitly lock and unlock rows</summary>
                <type id="2" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png">New Feature</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="streamy">Jonathan Gray</assignee>
                                    <reporter username="streamy">Jonathan Gray</reporter>
                        <labels>
                    </labels>
                <created>Wed, 6 Aug 2008 04:29:41 +0000</created>
                <updated>Sun, 13 Sep 2009 22:33:29 +0000</updated>
                            <resolved>Wed, 13 Aug 2008 02:35:03 +0000</resolved>
                                                    <fixVersion>0.18.0</fixVersion>
                                    <component>Client</component>
                    <component>IPC/RPC</component>
                    <component>regionserver</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>1</watches>
                                                                <comments>
                            <comment id="12620431" author="stack" created="Wed, 6 Aug 2008 21:24:16 +0000"  >&lt;p&gt;Suggestions:  Add a subclass of HTable named something like LockingHTable and add your lock versions to this subclass.&lt;/p&gt;
</comment>
                            <comment id="12620433" author="streamy" created="Wed, 6 Aug 2008 21:29:05 +0000"  >&lt;p&gt;After discussing with Jim on IRC, there won&apos;t be very many additional functions exposed through HTable.&lt;/p&gt;

&lt;p&gt;It will actually just be one new version of each of: batchUpdate, deleteAll x 2, and deleteFamily.&lt;/p&gt;

&lt;p&gt;So it would be those 4, plus the lockRow/unlockRow.&lt;/p&gt;

&lt;p&gt;You think it would be okay to include just those in HTable w/o subclassing it?&lt;/p&gt;</comment>
                            <comment id="12620436" author="stack" created="Wed, 6 Aug 2008 21:43:58 +0000"  >&lt;p&gt;I&quot;m fine w/ that.&lt;/p&gt;

&lt;p&gt;You might want to subclass anyways just because it groups this new functionality nicely.&lt;/p&gt;</comment>
                            <comment id="12620794" author="streamy" created="Fri, 8 Aug 2008 00:22:38 +0000"  >&lt;p&gt;Here&apos;s my first go.&lt;/p&gt;

&lt;p&gt;This adds lockRow and unlockRow methods to the client/HTable.  The return type of lockRow is a new client object RowLock (contains long lockid and byte[] row).  unlockRow takes a RowLock as argument.&lt;/p&gt;

&lt;p&gt;Also adds new versions of commit, deleteAll, and deleteFamily that also can take RowLock&apos;s.&lt;/p&gt;

&lt;p&gt;Within HRS I created new versions of the same functions which take the actual lock ids: long in HRS (randomized id as with scannerids, used for leases, etc), Integer in HR (existing type used for row locks).  Existing functions, which do not explicitly take locks, now call the same HR functions but with nulls as row locks.&lt;/p&gt;

&lt;p&gt;Internally HR checks if it was passed a valid row lock or not.  If it&apos;s a null, it obtains a row lock and releases it at the end of the call.  If it&apos;s valid, it makes use of the lock, and does nothing at the end.  Otherwise an exception is thrown.&lt;/p&gt;

&lt;p&gt;Code has not been completely cleaned up, but this demonstrates how the client row locks are being implemented.&lt;/p&gt;</comment>
                            <comment id="12620796" author="jdcryans" created="Fri, 8 Aug 2008 00:40:54 +0000"  >&lt;p&gt;Patch seems nice Jonathan. Unfortunately I didn&apos;t have the chance to apply it since the path of the modification refers to &quot;jonsrc&quot; instead of &quot;src&quot;. &lt;br/&gt;
Also, I think you forgot to include the class RowLock.&lt;/p&gt;</comment>
                            <comment id="12620797" author="streamy" created="Fri, 8 Aug 2008 00:41:46 +0000"  >&lt;p&gt;I&apos;m going to work on another patch now which adds a kind of &quot;upsert/increment&quot; functionality.  I have a few particular and frequent use cases in mind that others may have a need for.  Rough APIs below...&lt;/p&gt;

&lt;p&gt;incrementColumnValue(table,row,family:column) -&amp;gt; Reads last value at column (must be family:column), increments it, and writes new column version with incremented value (wrapped in a single row lock for atomicity)&lt;/p&gt;

&lt;p&gt;columnWithIncrementedValue(table,row,family,newcolumn) -&amp;gt; This may be more limited to others, but we have many ordered column families where every column value inserted is lexicographically smaller than all previous (always inserted to the top).  The value within each column is an incremented value.  This grabs the value of the top column in the family, increments it, and uses it as the value for the newcolumn to be inserted at the top.  There will be no checking for newcolumn being smaller (lexicographically) than the last one, this is the responsibility of the client, but this is assumed for correctness.&lt;/p&gt;

&lt;p&gt;incrementColumn(table,row,family) -&amp;gt; This is also specialized.  We assume a schema where a family has only one column.  We read that column value, increment it, add the new column (reusing the old columns value), delete the old column, release the lock, return the new incremented column to the client.  This is a way to provide a check-out mechanism for incrementing identifiers.&lt;/p&gt;

&lt;p&gt;I&apos;m going to build this patch on top of the previous patch because some helper functions and classes will be useful.&lt;/p&gt;</comment>
                            <comment id="12620798" author="streamy" created="Fri, 8 Aug 2008 00:42:35 +0000"  >&lt;p&gt;Ah, I must have goofed my diff line.  Will take a look and put the patch back up.&lt;/p&gt;</comment>
                            <comment id="12620811" author="jimk" created="Fri, 8 Aug 2008 02:07:33 +0000"  >&lt;p&gt;&amp;lt;removing extra text from original comment&amp;gt;&lt;/p&gt;

&lt;p&gt;&amp;gt; Jonathan Gray - 07/Aug/08 05:41 PM&lt;br/&gt;
&amp;gt; I&apos;m going to work on another patch now which adds a kind of &quot;upsert/increment&quot; functionality. I have a few&lt;br/&gt;
&amp;gt; particular and frequent use cases in mind that others may have a need for. Rough APIs below...&lt;br/&gt;
&amp;gt; incrementColumnValue(table,row,family:column) -&amp;gt; Reads last value at column (must be family:column), &lt;/p&gt;

&lt;p&gt;&amp;lt;snip&amp;gt;&lt;br/&gt;
Shouldn&apos;t this work be targeted at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-493&quot; title=&quot;Write-If-Not-Modified-Since support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-493&quot;&gt;&lt;del&gt;HBASE-493&lt;/del&gt;&lt;/a&gt; ?&lt;/p&gt;

&lt;p&gt;Or link this patch to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-493&quot; title=&quot;Write-If-Not-Modified-Since support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-493&quot;&gt;&lt;del&gt;HBASE-493&lt;/del&gt;&lt;/a&gt;, saying that the patch for this issue is included in the patch for this issue.&lt;/p&gt;</comment>
                            <comment id="12620813" author="jimk" created="Fri, 8 Aug 2008 02:11:21 +0000"  >&lt;p&gt;On HRS side, I would not create new methods, but add RowLock as an additional parameter. Pass null from the client if no row lock was supplied, or something like that. Basically HRS methods usually expect all parameters and then deals with those that are not supplied.&lt;/p&gt;</comment>
                            <comment id="12620821" author="streamy" created="Fri, 8 Aug 2008 03:18:37 +0000"  >&lt;p&gt;This patch should properly apply to trunk.&lt;/p&gt;</comment>
                            <comment id="12620822" author="streamy" created="Fri, 8 Aug 2008 03:23:54 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-798&quot; title=&quot;Provide Client API to explicitly lock and unlock rows&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-798&quot;&gt;&lt;del&gt;HBASE-798&lt;/del&gt;&lt;/a&gt; implementation will allow the requested behavior from &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-493&quot; title=&quot;Write-If-Not-Modified-Since support&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-493&quot;&gt;&lt;del&gt;HBASE-493&lt;/del&gt;&lt;/a&gt;.  However it may still be worth implementing as it is nearly as flexible as the explicit lock/unlocks, but requires only two round-trips in the average case whereas lock, read, write, unlock is four every time.&lt;/p&gt;</comment>
                            <comment id="12620823" author="streamy" created="Fri, 8 Aug 2008 03:28:25 +0000"  >&lt;p&gt;Jim, I may have misspoken in my explanation.&lt;/p&gt;

&lt;p&gt;There are only single HRS methods that take all arguments.  Well, there are two of deleteAll but there&apos;s different HR implementations.&lt;/p&gt;

&lt;p&gt;  public void deleteAll(final byte [] regionName, final byte [] row,&lt;br/&gt;
      final byte [] column, final long timestamp, final long lockId)&lt;/p&gt;

&lt;p&gt;  public void deleteAll(final byte [] regionName, final byte [] row,&lt;br/&gt;
      final long timestamp, final long lockId)&lt;/p&gt;

&lt;p&gt;  public void deleteFamily(byte [] regionName, byte [] row, byte [] family,&lt;br/&gt;
    long timestamp, final long lockId)&lt;/p&gt;

&lt;p&gt;  public void batchUpdate(final byte [] regionName, BatchUpdate b,&lt;br/&gt;
      final long lockId)&lt;/p&gt;</comment>
                            <comment id="12620986" author="streamy" created="Fri, 8 Aug 2008 17:40:36 +0000"  >&lt;p&gt;In our discussions we overlooked getRow, which calls HR.getFull, which does obtain row locks.  Will make a new patch to add that.&lt;/p&gt;

&lt;p&gt;Atomic increments discussed above have been moved to &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-803&quot; title=&quot;Atomic increment operations&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-803&quot;&gt;&lt;del&gt;HBASE-803&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="12621085" author="streamy" created="Fri, 8 Aug 2008 22:43:23 +0000"  >&lt;p&gt;Applies to latest TRUNK.  Were mismatches due to the &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-805&quot; title=&quot;Remove unnecessary getRow overloads in HRS&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-805&quot;&gt;&lt;del&gt;HBASE-805&lt;/del&gt;&lt;/a&gt; patch I submitted earlier.&lt;/p&gt;

&lt;p&gt;This cleans up the code a bit and adds getRow/getFull methods with optional locks.&lt;/p&gt;</comment>
                            <comment id="12621658" author="streamy" created="Tue, 12 Aug 2008 00:14:32 +0000"  >&lt;p&gt;This patch is only a line break fix to allow this to apply against TRUNK (once &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-819&quot; title=&quot;Remove DOS-style ^M carriage returns from all code where found&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-819&quot;&gt;&lt;del&gt;HBASE-819&lt;/del&gt;&lt;/a&gt; has been committed).&lt;/p&gt;</comment>
                            <comment id="12621659" author="streamy" created="Tue, 12 Aug 2008 00:14:58 +0000"  >&lt;p&gt;Ready for review&lt;/p&gt;</comment>
                            <comment id="12621923" author="jimk" created="Tue, 12 Aug 2008 18:39:25 +0000"  >&lt;p&gt;Reviewed patch. -1 because:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;HRegionServer.getLockFromId should renew the lease if it is passed an outstanding lock id&lt;/li&gt;
	&lt;li&gt;HRegionServer.rowlocks should use java.util.concurrent.ConcurrentHashMap as it is much more efficient than Collections.synchronizedMap(HashMap)&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;In HRegion, factor out the multiple occurrances of:
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; lid = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(lockid == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      lid = obtainRowLock(row);
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(!isRowLocked(lockid)) {
        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Invalid row lock&quot;&lt;/span&gt;);
      }
      lid = lockid;
    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;into a private or protected method, such as:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; getLock(&lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; lockid) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; lid = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(lockid == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
      lid = obtainRowLock(row);
    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(!isRowLocked(lockid)) {
        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; IOException(&lt;span class=&quot;code-quote&quot;&gt;&quot;Invalid row lock&quot;&lt;/span&gt;);
      }
      lid = lockid;
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;isRowLocked should be protected or private&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12621929" author="streamy" created="Tue, 12 Aug 2008 18:49:38 +0000"  >&lt;p&gt;Thanks for review Jim!&lt;/p&gt;

&lt;p&gt;1) Agreed.&lt;br/&gt;
2) Okay.  I was using the identical structure used to keep track of scanners:&lt;/p&gt;

&lt;p&gt;  Map&amp;lt;String, InternalScanner&amp;gt; scanners =&lt;br/&gt;
    Collections.synchronizedMap(new HashMap&amp;lt;String, InternalScanner&amp;gt;());&lt;/p&gt;

&lt;p&gt;Should that be changed as well?&lt;/p&gt;

&lt;p&gt;3) Yes, I had it that way before but changed it for some reason.  I think because I need to do a check at the end, but this checks the passed-in argument which is unchanged by the getLock function call.  So you are correct, will change.&lt;/p&gt;

&lt;p&gt;4) Yup.&lt;/p&gt;

&lt;p&gt;Will wait to hear back regarding synchronizedMap(new Hashmap()) versus ConcurrentHashMap() before posting new patch.&lt;/p&gt;

&lt;p&gt;Thanks again, Jim!&lt;/p&gt;</comment>
                            <comment id="12622022" author="streamy" created="Tue, 12 Aug 2008 23:02:20 +0000"  >&lt;p&gt;Contains changes outlined by Jim.  Also updates scanners in HRegion to use ConcurrentHashMap rather than synchronizedMap(HashMap).&lt;/p&gt;</comment>
                            <comment id="12622039" author="jimk" created="Wed, 13 Aug 2008 00:10:01 +0000"  >&lt;p&gt;+1&lt;/p&gt;

&lt;p&gt;Committed to trunk. Thanks for the patch Jonathan!&lt;/p&gt;</comment>
                            <comment id="12622047" author="jimk" created="Wed, 13 Aug 2008 00:30:57 +0000"  >&lt;p&gt;Neither RowLock nor UnknownRowLockException was included in the patch. This is causing compilation errors. Please supply ASAP!&lt;/p&gt;</comment>
                            <comment id="12622057" author="streamy" created="Wed, 13 Aug 2008 01:05:02 +0000"  >&lt;p&gt;Adds RowLock.java and UnknownRowLockException.java&lt;/p&gt;

&lt;p&gt;My apologies &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="12622074" author="jimk" created="Wed, 13 Aug 2008 02:35:03 +0000"  >&lt;p&gt;Added classes missing from final patch that were present in previous versions. Fix a number of compilation problems. All regression tests now pass.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310010">
                    <name>Incorporates</name>
                                            <outwardlinks description="incorporates">
                                        <issuelink>
            <issuekey id="12390273">HBASE-493</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12390273">HBASE-493</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12397637">HBASE-669</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12402017">HBASE-803</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12387789" name="hbase-798-v1.patch" size="30315" author="streamy" created="Fri, 8 Aug 2008 00:22:37 +0000"/>
                            <attachment id="12387794" name="hbase-798-v2.patch" size="32602" author="streamy" created="Fri, 8 Aug 2008 03:18:37 +0000"/>
                            <attachment id="12387858" name="hbase-798-v3.patch" size="30359" author="streamy" created="Fri, 8 Aug 2008 22:43:23 +0000"/>
                            <attachment id="12388011" name="hbase-798-v4.patch" size="29893" author="streamy" created="Tue, 12 Aug 2008 00:14:32 +0000"/>
                            <attachment id="12388090" name="hbase-798-v5.patch" size="29740" author="streamy" created="Tue, 12 Aug 2008 23:02:20 +0000"/>
                            <attachment id="12388096" name="hbase-798-v6.patch" size="33506" author="streamy" created="Wed, 13 Aug 2008 01:05:02 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 6 Aug 2008 21:24:16 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>31855</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 19 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0h9if:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98803</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>