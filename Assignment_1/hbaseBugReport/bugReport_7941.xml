<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:50:32 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7941/HBASE-7941.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7941] Provide client API with support for primitive types</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7941</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Work is underway to provide a widely acceptable serialization format for primitive and complex types (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7221&quot; title=&quot;[experiment] RowKey utility class for rowkey construction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7221&quot;&gt;&lt;del&gt;HBASE-7221&lt;/del&gt;&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt;). With this completed, those serialization conveniences should be pushed up to users of the Client API by way of additional method signatures on Operation implementations (Get, Put, Delete, Scan, &amp;amp;c.).&lt;/p&gt;</description>
                <environment></environment>
        <key id="12634212">HBASE-7941</key>
            <summary>Provide client API with support for primitive types</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12636797">HBASE-8089</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="ndimiduk">Nick Dimiduk</reporter>
                        <labels>
                    </labels>
                <created>Tue, 26 Feb 2013 18:27:22 +0000</created>
                <updated>Wed, 14 Aug 2013 22:43:50 +0000</updated>
                                                                            <component>Client</component>
                    <component>Usability</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>14</watches>
                                                                <comments>
                            <comment id="13587375" author="ndimiduk" created="Tue, 26 Feb 2013 18:38:14 +0000"  >&lt;p&gt;One approache would be to expose language primitive types for qualifiers and values. This has the benefit of hiding from the user the implementation details of serialization of the types. However, I fear this would bloat the API excessively. Such an implementation would need, say a &lt;tt&gt;Put#add&lt;/tt&gt; method with all combinations (byte[], String, int, long, double, &amp;amp;c) for qualifier coupled with all combinations for value. This could be somewhat mitigated if such methods accepted a builder pattern for constructing their arguments, ie &lt;tt&gt;put.add(family).withQualifier(&quot;foo&quot;).withValue(5L);&lt;/tt&gt;. Which leads me to...&lt;/p&gt;

&lt;p&gt;An alternative would be to accept (in addition to byte[]) the base type for the serialization implementation. Now you have only a cardinality of two for both parameters, resulting in a smaller number of method signatures to maintain. That is,&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;Put#add(byte[] family, byte[] qualifier, byte[] value)
Put#add(byte[] family, byte[] qualifier, &amp;lt;SerializationType&amp;gt; value)
Put#add(byte[] family, &amp;lt;SerializationType&amp;gt; qualifier, byte[] value)
Put#add(byte[] family, &amp;lt;SerializationType&amp;gt; qualifier, &amp;lt;SerializationType&amp;gt; value)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Since both proposed implementations provide a builder pattern for constructing serialized objects, I see no reason to add additional helper constructs all over the place.&lt;/p&gt;</comment>
                            <comment id="13587998" author="stack" created="Wed, 27 Feb 2013 04:48:29 +0000"  >&lt;p&gt;Looks good.  Poke around in JIRA for other attempts at this IIRC (search &apos;hbase builder&apos;).&lt;/p&gt;

&lt;p&gt;We have String for some overrides.  Should we have that too?&lt;/p&gt;

&lt;p&gt;We could work so that much of the above is done once up in the superclass Mutation.&lt;/p&gt;</comment>
                            <comment id="13588581" author="ndimiduk" created="Wed, 27 Feb 2013 18:21:36 +0000"  >&lt;blockquote&gt;&lt;p&gt;Looks good. Poke around in JIRA for other attempts at this IIRC (search &apos;hbase builder&apos;).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ll see what I find.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We have String for some overrides. Should we have that too?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Such as &lt;tt&gt;HTable(Configuration, byte[])&lt;/tt&gt; and &lt;tt&gt;HTable(Configuration, String)&lt;/tt&gt;? Precisely. It lets the user provide a more natural type and explicitly handles serialization to the system-specified byte[] representation. Correct me if I&apos;m wrong, but anywhere we expect a table or CF name, byte[] and String are sufficient. It&apos;s column qualifiers and values are where I see getting the most miles out of the serialization implementation.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;We could work so that much of the above is done once up in the superclass Mutation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Keeping as much of this noise as possible confined to a base class would be ideal. I tend to prefer APIs with minimum necessary surface area because there&apos;s no room for confusion on the user&apos;s part. On the other hand, &lt;tt&gt;put.add(&quot;c1&quot;, &quot;foo&quot;, 12)&lt;/tt&gt; is a lot nicer than &lt;tt&gt;put.add(new StringRowKey().serialize(&quot;c1&quot;), new StringRowKey().serialize(&quot;foo&quot;), new IntegerRowKey().serialize(12))&lt;/tt&gt; or &lt;tt&gt;put.add(Bytes.toBytes(&quot;c1&quot;), Bytes.toBytes(&quot;foo&quot;), Bytes.toBytes(12))&lt;/tt&gt;.&lt;/p&gt;</comment>
                            <comment id="13588679" author="stack" created="Wed, 27 Feb 2013 19:44:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;Correct me if I&apos;m wrong...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;You are not wrong.&lt;/p&gt;

&lt;p&gt;Yeah, at least reference previous attempts...(close them if this subsumes them)&lt;/p&gt;</comment>
                            <comment id="13589176" author="lhofhansl" created="Thu, 28 Feb 2013 04:26:14 +0000"  >&lt;p&gt;I&apos;m -1 on this approach. HBase is an access path for bytes. We can add helper code to HBase that allows a client serialized and deserialized types to and from bytes, but I do not think this belongs into the HBase API.&lt;/p&gt;</comment>
                            <comment id="13589925" author="ndimiduk" created="Thu, 28 Feb 2013 21:10:18 +0000"  >&lt;p&gt;My counter-argument is that HBase is a database and users expect a database to provide types. This is a client-level addition. The system implementation would stay as it is, an access path for bytes. It does &lt;b&gt;not&lt;/b&gt; propose the inclusion of, say, schema-annotated type-enforcement.&lt;/p&gt;

&lt;p&gt;Perhaps the description should be updated; I do not intend to call out the compound rowkey business under discussion on the referenced tickets, but rather acknowledgement of the specific types. &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7221&quot; title=&quot;[experiment] RowKey utility class for rowkey construction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7221&quot;&gt;&lt;del&gt;HBASE-7221&lt;/del&gt;&lt;/a&gt; provides that acknowledgement via it&apos;s &amp;#42;Element classes, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7692&quot; title=&quot;[experiment] Adopt Orderly library&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7692&quot;&gt;&lt;del&gt;HBASE-7692&lt;/del&gt;&lt;/a&gt; through the &amp;#42;RowKey classes.&lt;/p&gt;</comment>
                            <comment id="13591248" author="lhofhansl" created="Sat, 2 Mar 2013 03:30:25 +0000"  >&lt;p&gt;Good point about this being client only.&lt;/p&gt;

&lt;p&gt;I would then propose that we make this a thin layer on top of the untyped client API. I.e. TypedHTable, TypedGet, etc, classes that wrap the existing HTable/Get, etc.&lt;/p&gt;</comment>
                            <comment id="13592419" author="ndimiduk" created="Mon, 4 Mar 2013 18:04:50 +0000"  >&lt;p&gt;Why do you suggest adding an additional layer? Why not bake it into the &quot;real&quot; API classes we expect users to consume? Is this because client classes are consumed inside of the hbase-server module?&lt;/p&gt;</comment>
                            <comment id="13593087" author="devaraj" created="Tue, 5 Mar 2013 05:32:06 +0000"  >&lt;p&gt;I&apos;d vote for a separate layer as well. Seems natural to me. It&apos;s also in the spirit of HBase - core APIs supports only raw bytes for data. Complex APIs are modelled on top..&lt;/p&gt;</comment>
                            <comment id="13740331" author="eli" created="Wed, 14 Aug 2013 22:43:50 +0000"  >&lt;p&gt;Agree with Lars and Devaraj. IMO HBase should remain type agnostic, I don&apos;t think we want to establish relational data types in HBase itself. HBase is a storage system (at least BigTable is) and should provide equal support for multiple type models, not just the data types expected by SQL engines.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 27 Feb 2013 04:48:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>314705</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 18 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ib1r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>315049</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>