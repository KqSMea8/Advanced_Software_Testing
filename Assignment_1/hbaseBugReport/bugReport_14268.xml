<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:51:23 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14268/HBASE-14268.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14268] Improve KeyLocker</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14268</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;1. In the implementation of &lt;tt&gt;KeyLocker&lt;/tt&gt; it uses atomic variables inside a synchronized block, which doesn&apos;t make sense. Moreover, logic inside the synchronized block is not trivial so that it makes less performance in heavy multi-threaded environment.&lt;br/&gt;
2. &lt;tt&gt;KeyLocker&lt;/tt&gt; gives an instance of &lt;tt&gt;RentrantLock&lt;/tt&gt; which is already locked, but it doesn&apos;t follow the contract of &lt;tt&gt;ReentrantLock&lt;/tt&gt; because you are not allowed to freely invoke lock/unlock methods under that contract. That introduces a potential risk; Whenever you see a variable of the type &lt;tt&gt;RentrantLock&lt;/tt&gt;, you should pay attention to what the included instance is coming from.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12857497">HBASE-14268</key>
            <summary>Improve KeyLocker</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ikeda">Hiroshi Ikeda</assignee>
                                    <reporter username="ikeda">Hiroshi Ikeda</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 Aug 2015 10:12:38 +0000</created>
                <updated>Tue, 20 Oct 2015 04:13:43 +0000</updated>
                            <resolved>Tue, 13 Oct 2015 06:15:06 +0000</resolved>
                                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>1.2.0</fixVersion>
                    <fixVersion>1.3.0</fixVersion>
                                    <component>util</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                <comments>
                            <comment id="14704638" author="ikeda" created="Thu, 20 Aug 2015 10:19:09 +0000"  >&lt;p&gt;Added a patch, and a simple application to check performance.&lt;/p&gt;

&lt;p&gt;In my environment the revised KeyLocker is about 10 times faster, aside from whether the performance test practically makes sense.&lt;/p&gt;</comment>
                            <comment id="14705199" author="yuzhihong@gmail.com" created="Thu, 20 Aug 2015 16:17:38 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
117	    ReentrantLock lock = getLock(key);
118	    purge();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Do we need to call purge() for every acquireLock() ?&lt;/p&gt;</comment>
                            <comment id="14705526" author="hadoopqa" created="Thu, 20 Aug 2015 18:35:35 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12751459/HBASE-14268.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12751459/HBASE-14268.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 720f2a88154653a13892b36997129d3f77fc9702.&lt;br/&gt;
  ATTACHMENT ID: 12751459&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15196//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15196//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15196//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15196//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15196//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15196//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15196//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15196//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14706114" author="ikeda" created="Fri, 21 Aug 2015 02:08:15 +0000"  >&lt;p&gt;With the Oracle (Sun) implementation of &lt;tt&gt;ReferenceQueue&lt;/tt&gt;, the method &lt;tt&gt;purge&lt;/tt&gt; seems lightweight while there is no stale reference, because it just checks a volatile instance variable in &lt;tt&gt;ReferenceQueue&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;I could create an independent thread to remove stale references, but the &lt;tt&gt;KeyLocker&lt;/tt&gt; itself would be never garbage-collected until someone stops the thread.&lt;/p&gt;</comment>
                            <comment id="14706162" author="yuzhihong@gmail.com" created="Fri, 21 Aug 2015 03:00:34 +0000"  >&lt;p&gt;Alright.&lt;br/&gt;
Let&apos;s get a green QA run when master build becomes stable.&lt;/p&gt;</comment>
                            <comment id="14706163" author="ikeda" created="Fri, 21 Aug 2015 03:01:04 +0000"  >&lt;p&gt;Added a revised patch.&lt;/p&gt;

&lt;p&gt;Changed to invoke &lt;tt&gt;purge&lt;/tt&gt; before &lt;tt&gt;getLock&lt;/tt&gt;, because it was possible to try to remove the same stale reference twice.&lt;/p&gt;

&lt;p&gt;Also added comment inside the method &lt;tt&gt;purge&lt;/tt&gt; about its lightweight.&lt;/p&gt;</comment>
                            <comment id="14706841" author="ikeda" created="Fri, 21 Aug 2015 15:09:12 +0000"  >&lt;p&gt;Added a revised patch.&lt;/p&gt;

&lt;p&gt;Refactored; Extracted the logic around handling weak references to a new class &lt;tt&gt;WeakObjectPool&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;The similar class &lt;tt&gt;IdLock&lt;/tt&gt; can be rewritten with &lt;tt&gt;WeakObjectPool&lt;/tt&gt;, and its variant class using &lt;tt&gt;ReadWriteLock&lt;/tt&gt; instead of &lt;tt&gt;Lock&lt;/tt&gt; can be easily created if needed, I guess &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14707175" author="hadoopqa" created="Fri, 21 Aug 2015 18:09:03 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12751740/HBASE-14268-V3.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12751740/HBASE-14268-V3.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit bcef28eefaf192b0ad48c8011f98b8e944340da5.&lt;br/&gt;
  ATTACHMENT ID: 12751740&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn post-site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15197//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15197//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15197//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15197//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15197//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15197//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15197//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15197//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14708249" author="yuzhihong@gmail.com" created="Sun, 23 Aug 2015 01:01:45 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+            &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; ReentrantLock createObject(K key) { &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ReentrantLock(); }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Put return statement on second line and right curly on 3rd line.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IllegalArgumentException &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; {@code initCapacity} is negative
+   * @&lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; NullPointerException &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; {@code objectFactory} is &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
+   */
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; WeakObjectPool(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; initCapacity, ObjectFactory&amp;lt;K, V&amp;gt; objectFactory) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Add javadoc for parameters.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.referenceCache = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; ConcurrentHashMap&amp;lt;K, ObjectReference&amp;gt;(initCapacity);
+
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (objectFactory == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) { &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; NullPointerException(); }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Suggest moving null check ahead of HashMap creation.&lt;/p&gt;</comment>
                            <comment id="14708875" author="ikeda" created="Mon, 24 Aug 2015 07:08:02 +0000"  >&lt;p&gt;Added a revised patch.&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Followed Ted Yu&apos;s comments.&lt;/li&gt;
	&lt;li&gt;Changed the parameters&apos; order of the &lt;tt&gt;WeakObjectPool&lt;/tt&gt; constructor, and added 2 overloaded constructors so that you can specify the initial capacity and the concurrency level or use their default values. Actually, tuning the 2 optional parameters seems not so effective, and it seems enough to use the default values&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/help_16.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/li&gt;
	&lt;li&gt;Added some javadoc comments to {{WeakObjectPool}.&lt;/li&gt;
	&lt;li&gt;Added a new test class for &lt;tt&gt;WeakObjectPool&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;BTW, I have found a similar work, Google Guava&apos;s CacheBuilder and classes around that under the package com.google.common.cache. The classes seem quite sophisticated (and complicated) so that they can cache any objects including heavy ones, with preventing from excessively object creation. It seems that the sophistication is over-spec for &lt;tt&gt;RentrantLock&lt;/tt&gt;, and they are about 1.5-2 times slower than &lt;tt&gt;WeakObjectPool&lt;/tt&gt; for caching &lt;tt&gt;ReentrantLock&lt;/tt&gt; in my environment. &lt;/p&gt;</comment>
                            <comment id="14709814" author="hadoopqa" created="Mon, 24 Aug 2015 18:34:31 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12751981/HBASE-14268-V4.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12751981/HBASE-14268-V4.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 9334a47d4570f8adfc003f0fb2c5969a88c3bba0.&lt;br/&gt;
  ATTACHMENT ID: 12751981&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.util.TestProcessBasedCluster&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15214//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15214//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15214//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15214//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15214//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15214//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15214//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15214//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14710014" author="yuzhihong@gmail.com" created="Mon, 24 Aug 2015 20:34:08 +0000"  >&lt;p&gt;From &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15214/console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15214/console&lt;/a&gt; :&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
Flaked tests: 
org.apache.hadoop.hbase.util.TestWeakObjectPool.testWeakReference(org.apache.hadoop.hbase.util.TestWeakObjectPool)
  Run 1: TestWeakObjectPool.testWeakReference:81 expected:&amp;lt;0&amp;gt; but was:&amp;lt;1&amp;gt;
  Run 2: TestWeakObjectPool.testWeakReference:81 expected:&amp;lt;0&amp;gt; but was:&amp;lt;1&amp;gt;
  Run 3: PASS
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above can be reproduced locally.&lt;/p&gt;</comment>
                            <comment id="14710371" author="ikeda" created="Tue, 25 Aug 2015 01:00:21 +0000"  >&lt;p&gt;Sorry I misunderstood about weak references and a reference queue. I thought references would be added to the queue at the same time that their referents are garbage-collected, but in truth it may have time lag. The API of &lt;tt&gt;WeakReference&lt;/tt&gt; says &quot;At the same time or at some later time it will enqueue those newly-cleared weak references that are registered with reference queues.&quot;&lt;/p&gt;</comment>
                            <comment id="14710443" author="ikeda" created="Tue, 25 Aug 2015 02:08:19 +0000"  >&lt;p&gt;Added a revised patch.&lt;/p&gt;

&lt;p&gt;Fixed tests.&lt;br/&gt;
Added some javadoc comments to the &lt;tt&gt;purge&lt;/tt&gt; method.&lt;/p&gt;</comment>
                            <comment id="14710526" author="hadoopqa" created="Tue, 25 Aug 2015 03:35:12 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12752129/HBASE-14268-V5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12752129/HBASE-14268-V5.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit d0873f5a8cc060adbc5a1ae0ed52b84a8942a868.&lt;br/&gt;
  ATTACHMENT ID: 12752129&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15234//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15234//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15234//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15234//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15234//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15234//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15234//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15234//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14710532" author="yuzhihong@gmail.com" created="Tue, 25 Aug 2015 03:45:42 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[INFO] Apache HBase - Common ............................. FAILURE [01:12 min]
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Not clear which test hung / failed - findHangingTests.py didn&apos;t show anything.&lt;/p&gt;

&lt;p&gt;Please get another QA run.&lt;/p&gt;</comment>
                            <comment id="14712284" author="ikeda" created="Wed, 26 Aug 2015 00:59:49 +0000"  >&lt;p&gt;Re-attach to trigger QA run.&lt;/p&gt;</comment>
                            <comment id="14712450" author="hadoopqa" created="Wed, 26 Aug 2015 04:01:41 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12752372/HBASE-14268-V5.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12752372/HBASE-14268-V5.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 506726ed2832b069602c6b7e2ccd5ec9a81013a6.&lt;br/&gt;
  ATTACHMENT ID: 12752372&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 7 zombie test(s): &lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15262//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15262//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15262//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15262//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15262//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15262//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15262//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15262//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14715647" author="yuzhihong@gmail.com" created="Wed, 26 Aug 2015 22:35:41 +0000"  >&lt;p&gt;Please add javadoc for the following:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;interface&lt;/span&gt; ObjectFactory&amp;lt;K, V&amp;gt; {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;How were these default values chosen ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+   * Creates a &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; pool with the &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; initial capacity (16)
+   * and the &lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt; concurrency level (16).
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Some tests don&apos;t have timeout parameter:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  @Test
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void testKeys() {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please add timeout parameter.&lt;/p&gt;</comment>
                            <comment id="14716002" author="ikeda" created="Thu, 27 Aug 2015 03:16:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;Please add javadoc for the following:&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I&apos;ll add javadoc to the internal interface &lt;tt&gt;ObjectFactory&lt;/tt&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How were these default values chosen ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The default values just come from &lt;tt&gt;ConcurrentHashMap&lt;/tt&gt;, which is internally used in &lt;tt&gt;WeakObjectPool&lt;/tt&gt;.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Please add timeout parameter.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I don&apos;t think timeout parameters are required for tests which don&apos;t use multiple threads, because such tests never fall in deadlock.&lt;/p&gt;</comment>
                            <comment id="14716008" author="ikeda" created="Thu, 27 Aug 2015 03:24:06 +0000"  >&lt;p&gt;Added a revised patch.&lt;/p&gt;

&lt;p&gt;Just added/fixed javadoc comment.&lt;/p&gt;</comment>
                            <comment id="14716012" author="hadoopqa" created="Thu, 27 Aug 2015 03:31:40 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12752646/HBASE-14268-V6.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12752646/HBASE-14268-V6.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 56890d9fe148dd192520fab349a66aa3f688e232.&lt;br/&gt;
  ATTACHMENT ID: 12752646&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javac&lt;/font&gt;.  The patch appears to cause mvn compile goal to fail with Hadoop version 2.4.0.&lt;/p&gt;

&lt;p&gt;    Compilation errors resume:&lt;br/&gt;
    &lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Error invoking method &apos;get(java.lang.Integer)&apos; in java.util.ArrayList at META-INF/LICENSE.vm&lt;span class=&quot;error&quot;&gt;&amp;#91;line 1619, column 22&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Failed to execute goal org.apache.maven.plugins:maven-remote-resources-plugin:1.5:process (default) on project hbase-assembly: Error rendering velocity resource. Error invoking method &apos;get(java.lang.Integer)&apos; in java.util.ArrayList at META-INF/LICENSE.vm&lt;span class=&quot;error&quot;&gt;&amp;#91;line 1619, column 22&amp;#93;&lt;/span&gt;: InvocationTargetException: Index: 0, Size: 0 -&amp;gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; To see the full stack trace of the errors, re-run Maven with the -e switch.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; Re-run Maven using the -X switch to enable full debug logging.&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; For more information about the errors and possible solutions, please read the following articles:&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;&amp;#91;Help 1&amp;#93;&lt;/span&gt; &lt;a href=&quot;http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException&lt;/a&gt;&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; &lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt; After correcting the problems, you can resume the build with the command&lt;br/&gt;
&lt;span class=&quot;error&quot;&gt;&amp;#91;ERROR&amp;#93;&lt;/span&gt;   mvn &amp;lt;goals&amp;gt; -rf :hbase-assembly&lt;/p&gt;


&lt;p&gt;Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15283//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15283//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14724545" author="ikeda" created="Tue, 1 Sep 2015 01:30:18 +0000"  >&lt;p&gt;Added a revised patch.&lt;/p&gt;

&lt;p&gt;Removed the condition that the generics type &lt;tt&gt;K&lt;/tt&gt; must extend &lt;tt&gt;Comparable&lt;/tt&gt;, and allowed the method &lt;tt&gt;acquireLocks(Set&amp;lt;? extends K&amp;gt; keys)&lt;/tt&gt; to throw &lt;tt&gt;ClassCastException&lt;/tt&gt; if the given keys contains elements that are not mutually comparable.&lt;/p&gt;

&lt;p&gt;That is because the condition for &lt;tt&gt;Comparable&lt;/tt&gt; was too strong and it was just used for the method &lt;tt&gt;acquireLocks(Set&amp;lt;? extends K&amp;gt; keys)&lt;/tt&gt;, and actually, it is enough that the given keys are just mutually comparable, which keys may have a comparable subtype.&lt;/p&gt;</comment>
                            <comment id="14724561" author="hadoopqa" created="Tue, 1 Sep 2015 01:41:24 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12753436/HBASE-14268-V7.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12753436/HBASE-14268-V7.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 498c1845ab7b01710955153c27501fdc7492849d.&lt;br/&gt;
  ATTACHMENT ID: 12753436&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to cause Findbugs (version 2.0.3) to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn post-site goal to fail.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15375//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15375//testReport/&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15375//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15375//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15375//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15375//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14726388" author="yuzhihong@gmail.com" created="Tue, 1 Sep 2015 23:04:50 +0000"  >&lt;p&gt;Looks like test suite didn&apos;t run:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
WARNING: 1 rogue build processes detected, terminating.
/bin/kill -9 18399 
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Mind attaching patch again ?&lt;/p&gt;</comment>
                            <comment id="14728296" author="ikeda" created="Thu, 3 Sep 2015 00:34:16 +0000"  >&lt;p&gt;Re-attach to trigger QA run.&lt;/p&gt;</comment>
                            <comment id="14728467" author="hadoopqa" created="Thu, 3 Sep 2015 04:01:43 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12753889/HBASE-14268-V7.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12753889/HBASE-14268-V7.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit a5261b6f44f338e3f4bd46fb29bed2c30e223bd4.&lt;br/&gt;
  ATTACHMENT ID: 12753889&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.TestIOFencing&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15399//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15399//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15399//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15399//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15399//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15399//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15399//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15399//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15399//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15399//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14730040" author="yuzhihong@gmail.com" created="Thu, 3 Sep 2015 23:36:53 +0000"  >&lt;p&gt;Patch v7 looks good.&lt;/p&gt;

&lt;p&gt;Have you run the KeyLocker performance program on patch v7 ?&lt;/p&gt;</comment>
                            <comment id="14730145" author="ikeda" created="Fri, 4 Sep 2015 01:30:40 +0000"  >&lt;p&gt;I measured it just now in my environment, which has 8 cpu core, and the result is as followed. For each KeyLocker I run the performance application 5 times and I collected the output number which represents the consumed time (nanoseconds).&lt;/p&gt;

&lt;p&gt;old KeyLocker&lt;br/&gt;
(1) 4168557944&lt;br/&gt;
(2) 4173845279&lt;br/&gt;
(3) 4276035366&lt;br/&gt;
(4) 4344219315&lt;br/&gt;
(5) 4393414763&lt;br/&gt;
average&lt;br/&gt;
= 4271214533.4 (nanos)&lt;br/&gt;
~ 4.27 (sec)&lt;/p&gt;

&lt;p&gt;new KeyLocker&lt;br/&gt;
(1) 270832002&lt;br/&gt;
(2) 318058811&lt;br/&gt;
(3) 278171946&lt;br/&gt;
(4) 265603446&lt;br/&gt;
(5) 279867215&lt;br/&gt;
average&lt;br/&gt;
= 282506684 (nanos)&lt;br/&gt;
~ 0.28 (sec)&lt;/p&gt;

&lt;p&gt;The difference just comes from overhead of context switches when getting/returning locks from/to the pool, and this may be not so meaningful for heavy tasks which cause context switches.&lt;/p&gt;
</comment>
                            <comment id="14730164" author="yuzhihong@gmail.com" created="Fri, 4 Sep 2015 01:49:33 +0000"  >&lt;p&gt;Nice performance gains.&lt;/p&gt;

&lt;p&gt;Planning to integrate sometime tomorrow if there is no other review comment.&lt;/p&gt;</comment>
                            <comment id="14730276" author="stack" created="Fri, 4 Sep 2015 03:50:17 +0000"  >&lt;p&gt;Nice numbers. Out of interest, do you see weak references being collected in non-full GC?&lt;/p&gt;

&lt;p&gt;Why do this and not just Iterate the passed in Set?&lt;/p&gt;

&lt;p&gt;    Object[] keyArray = keys.toArray();&lt;/p&gt;

&lt;p&gt;Why loop twice and not lock as you go: i.e. is this needed:&lt;/p&gt;

&lt;p&gt;    for (Lock lock : locks.values()) &lt;/p&gt;
{
97	      lock.lock();
134	    }
&lt;p&gt;	98	    }&lt;/p&gt;

&lt;p&gt;I came across this: &lt;a href=&quot;https://svn.apache.org/repos/asf/santuario/xml-security-java/trunk/src/main/java/org/apache/xml/security/utils/WeakObjectPool.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/santuario/xml-security-java/trunk/src/main/java/org/apache/xml/security/utils/WeakObjectPool.java&lt;/a&gt;  Might have some ideas you could make use of .&lt;/p&gt;

&lt;p&gt;Yeah, good to call purge frequently doing references (at least that is what I&apos;ve seen commonly done &amp;#8211; our lrublockcache does simiilar).&lt;/p&gt;

&lt;p&gt;Patch looks great.&lt;/p&gt;

&lt;p&gt;There are other lock implementations in our code base. Woud be sweet if we could unify.&lt;/p&gt;
</comment>
                            <comment id="14730483" author="ikeda" created="Fri, 4 Sep 2015 08:03:35 +0000"  >&lt;p&gt;For performance tests in much GC, I multiplied LOOP_COUNT by 10 or 100 and run the test application with the VM option -verbose:gc. The new KeyLocker works well. The old KeyLocker immediately drops released locks and GC happens frequently.&lt;/p&gt;

&lt;p&gt;new KeyLocker, LOOP_COUNT=1,000,000&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[GC 33280K-&amp;gt;789K(124928K), 0.0018632 secs]
[GC 34069K-&amp;gt;733K(124928K), 0.0015329 secs]
[GC 34013K-&amp;gt;733K(124928K), 0.0012143 secs]
[GC 34013K-&amp;gt;733K(158208K), 0.0012232 secs]
2113838581
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;new KeyLocker, LOOP_COUNT=10,000,000&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[GC 33280K-&amp;gt;757K(124928K), 0.0021142 secs]
[GC 34037K-&amp;gt;693K(124928K), 0.0046123 secs]
[GC 33973K-&amp;gt;725K(124928K), 0.0128241 secs]
[GC 34005K-&amp;gt;725K(158208K), 0.0012777 secs]
[GC 67285K-&amp;gt;693K(158208K), 0.0013967 secs]
[GC 67253K-&amp;gt;725K(220672K), 0.0012992 secs]
[GC 133845K-&amp;gt;838K(220672K), 0.0014905 secs]
[GC 133958K-&amp;gt;870K(353792K), 0.0004786 secs]
19860706850
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;old KeyLocker, LOOP_COUNT=1,000,000&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[GC 33280K-&amp;gt;1032K(124928K), 0.0018203 secs]
[GC 34312K-&amp;gt;789K(124928K), 0.0014084 secs]
[GC 34069K-&amp;gt;853K(124928K), 0.0012749 secs]
[GC 34133K-&amp;gt;853K(158208K), 0.0012367 secs]
[GC 67413K-&amp;gt;853K(158208K), 0.0013319 secs]
[GC 67413K-&amp;gt;821K(220672K), 0.0012880 secs]
[GC 133941K-&amp;gt;882K(220672K), 0.0015950 secs]
[GC 134002K-&amp;gt;882K(354304K), 0.0005267 secs]
[GC 267122K-&amp;gt;882K(354304K), 0.0007189 secs]
[GC 267122K-&amp;gt;818K(514048K), 0.0087180 secs]
[GC 426802K-&amp;gt;882K(514048K), 0.0008262 secs]
[GC 426866K-&amp;gt;914K(770048K), 0.0005164 secs]
[GC 682898K-&amp;gt;914K(770048K), 0.0005015 secs]
[GC 682898K-&amp;gt;914K(780288K), 0.0004968 secs]
[GC 693138K-&amp;gt;850K(780288K), 0.0005118 secs]
[GC 693074K-&amp;gt;882K(746496K), 0.0005215 secs]
[GC 660338K-&amp;gt;914K(716288K), 0.0005057 secs]
[GC 629138K-&amp;gt;914K(685568K), 0.0005206 secs]
[GC 599442K-&amp;gt;882K(658432K), 0.0061237 secs]
[GC 571250K-&amp;gt;882K(630784K), 0.0005043 secs]
[GC 544626K-&amp;gt;850K(605696K), 0.0004590 secs]
40161876412
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On the other hand, I found that, in the case of locking and releasing new keys at all times, the new KeyLocker has less performance. That is because weak references may require a several GC, and I think that happens especially when there are too many weak references. I&apos;ll append later such a test application and its result.&lt;/p&gt;</comment>
                            <comment id="14730538" author="ikeda" created="Fri, 4 Sep 2015 08:54:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;Nice numbers. Out of interest, do you see weak references being collected in non-full GC?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;By the new KeyLocker&apos;s outputs in my previously added comment, non-full GC collects much memory, which is no doubt used for weak references and their referents.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why do this and not just Iterate the passed in Set?&lt;/p&gt;

&lt;p&gt;Object[] keyArray = keys.toArray();&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The elements are required to sort before locking in order to avoid deadlock. There are several ways to do this, but I think using array is simpler and faster than using &lt;tt&gt;TreeSet&lt;/tt&gt; or &lt;tt&gt;Collections.sort(List)&lt;/tt&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why loop twice and not lock as you go: i.e. is this needed:&lt;/p&gt;

&lt;p&gt;for (Lock lock : locks.values())&lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: { 97 lock.lock(); 134 }&lt;/span&gt; &lt;/div&gt;

&lt;p&gt;98 }&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That is because the range under the locks should be as small as possible.&lt;/p&gt;</comment>
                            <comment id="14730602" author="ikeda" created="Fri, 4 Sep 2015 10:11:55 +0000"  >&lt;p&gt;Added a performance application. This application gets new lock at all time. The outputs in my environment are as follows.&lt;/p&gt;

&lt;p&gt;The new KeyLocker is not appropriate for creating continuously new locks that are rarely needed to exclusively control, as sort of insurance for a rainy day.&lt;/p&gt;

&lt;p&gt;I said that is because weak references may require several GC, but I also think that garbage-collecting WeakReference objects removed from the reference queue is accompanied with adding new WeakReference objects to the reference queue, and the memory usage doesn&apos;t reduce and may affect the performance.&lt;/p&gt;


&lt;p&gt;new KeyLocker&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[GC 33280K-&amp;gt;26277K(124928K), 0.0315760 secs]
[GC 59557K-&amp;gt;51803K(158208K), 0.0411313 secs]
[GC 118363K-&amp;gt;113643K(180736K), 0.0674596 secs]
[Full GC 113643K-&amp;gt;71099K(261632K), 0.4572814 secs]
[GC 137659K-&amp;gt;135131K(283648K), 0.0830925 secs]
[Full GC 135131K-&amp;gt;49669K(310272K), 0.2595013 secs]
[GC 138245K-&amp;gt;135781K(339968K), 0.1358634 secs]
[Full GC 135781K-&amp;gt;63914K(410624K), 0.2819740 secs]
[GC 182186K-&amp;gt;142186K(500736K), 0.1859324 secs]
[GC 254826K-&amp;gt;162474K(506368K), 0.1923356 secs]
[GC 275114K-&amp;gt;162410K(520704K), 0.1829767 secs]
[GC 279658K-&amp;gt;165386K(520704K), 0.1820236 secs]
[GC 282634K-&amp;gt;165498K(520704K), 0.1829841 secs]
[GC 282746K-&amp;gt;165498K(520704K), 0.1720680 secs]
[GC 282746K-&amp;gt;165466K(520704K), 0.1829380 secs]
[GC 282714K-&amp;gt;165514K(520704K), 0.1885966 secs]
[GC 282762K-&amp;gt;165498K(517632K), 0.1889385 secs]
8915066689
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;old KeyLocker&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[GC 33280K-&amp;gt;776K(124928K), 0.0016239 secs]
[GC 34056K-&amp;gt;669K(124928K), 0.0014578 secs]
[GC 33949K-&amp;gt;717K(124928K), 0.0012017 secs]
[GC 33997K-&amp;gt;669K(158208K), 0.0011863 secs]
[GC 67229K-&amp;gt;669K(158208K), 0.0019523 secs]
[GC 67229K-&amp;gt;669K(220672K), 0.0011686 secs]
[GC 133789K-&amp;gt;650K(220672K), 0.0018851 secs]
[GC 133770K-&amp;gt;650K(353792K), 0.0005309 secs]
[GC 266890K-&amp;gt;650K(353792K), 0.0008266 secs]
[GC 266890K-&amp;gt;650K(434176K), 0.0007151 secs]
[GC 347274K-&amp;gt;618K(418304K), 0.0004791 secs]
1363691284
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14730917" author="ikeda" created="Fri, 4 Sep 2015 14:57:46 +0000"  >&lt;blockquote&gt;
&lt;p&gt;By the new KeyLocker&apos;s outputs in my previously added comment, non-full GC collects much memory, which is no doubt used for weak references and their referents.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sorry, it&apos;s doubt :-|&lt;br/&gt;
I&apos;ll check it.&lt;/p&gt;</comment>
                            <comment id="14731049" author="stack" created="Fri, 4 Sep 2015 16:55:07 +0000"  >&lt;p&gt;To be clear, my question is if weak references require a &apos;Full GC&apos; before they are cleared. I do not think this the case (We use weak references elsewhere in the code base so it must be OK). I think it soft references that require a Full GC but it is a while since I messed with this stuff and my recollection is dodgy. I googled around some but could not find a definitive answer. My fear is that if it requires a &apos;Full GC&apos;, then we will accumulate weak references for ever given users do all in their power to put off a &apos;Full GC&apos; since &apos;Full GC&apos; is catastrophic.&lt;/p&gt;

&lt;p&gt;Agree that continuously getting a lock is not normal usage and that continuous adding/removing may overrun the purging runs leading to filled heaps or Full GC. If weak references are removed without a Full GC, and given that usage is low of locks relatively, we should be good (add a log every time something is removed from the queue while you have GC logging enabled? Make sure you don&apos;t have to wait on a Full GC to get a log?)&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...That is because the range under the locks should be as small as possible.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;....but I think using array is simpler and faster than using TreeSet or Collections.sort(List).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Makes sense. Thank you.&lt;/p&gt;




</comment>
                            <comment id="14733278" author="ikeda" created="Mon, 7 Sep 2015 06:11:09 +0000"  >&lt;p&gt;I have googled and created some learning test applications, and I&apos;m sure now as follows:&lt;/p&gt;

&lt;p&gt;Objects refereed by weak references and soft references are handled in the same way as other objects by the generational GC. That means, if these objects are not garbage-collected in several scavenge (non-full) GCs, they are moved from the young generation to the old generation and required full-GC.&lt;/p&gt;

&lt;p&gt;In general, weak referents are always garbage-collected (unless someone uses them at the time and they are temporarily promoted to strong ones), so that scavenge CG can collect them while they are still in the young generation. In the other hand, soft referents tend to be alive while several scavenge GCs and moved to the old generation, and full-GC is required to collect them.&lt;/p&gt;

&lt;p&gt;The VM option &lt;tt&gt;-XX:SoftRefLRUPolicyMSPerMB=...&lt;/tt&gt; can be used for Oracle VM (&lt;a href=&quot;http://www.oracle.com/technetwork/java/hotspotfaq-138619.html#gc_softrefs&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.oracle.com/technetwork/java/hotspotfaq-138619.html#gc_softrefs&lt;/a&gt;). This option represents soft referents&apos; lifetime (msec) per free memory (MB) from their last access time. (For Client VM the free memory is the one before growing the heap, but PCs in recent years are applied with Server VM.) The default value is 1000msec/MB (= 1sec/MB) and if there is more 1GB free memory you must wait more about 17min to garbage-collect. Obviously, such objects are in the old generation and full-GC is required.&lt;/p&gt;

&lt;p&gt;By setting the VM option to 0, there is little between soft references and weak references, and it is possible that scavenge CG collects soft referents (though it seems true that soft references is required for at least two GC because the clock time to calculate their lifetime is updated by the previous GC (&lt;a href=&quot;http://jeremymanson.blogspot.jp/2009/07/how-hotspot-decides-to-clear_07.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://jeremymanson.blogspot.jp/2009/07/how-hotspot-decides-to-clear_07.html&lt;/a&gt;)).&lt;/p&gt;

&lt;p&gt;Instead of adding a log to the previously added patch to confirm the above matter, I&apos;ll add a more clear learning test application and its outputs.&lt;/p&gt;</comment>
                            <comment id="14733289" author="ikeda" created="Mon, 7 Sep 2015 06:27:13 +0000"  >&lt;p&gt;Added a learning test.&lt;/p&gt;</comment>
                            <comment id="14733306" author="ikeda" created="Mon, 7 Sep 2015 07:02:53 +0000"  >&lt;p&gt;Run with -verbose:gc -Xmx2m -XX:+PrintGCDetails&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[GC [PSYoungGen: 731K-&amp;gt;501K(2560K)] 731K-&amp;gt;509K(3584K), 0.0011476 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[Full GC [PSYoungGen: 501K-&amp;gt;0K(2560K)] [ParOldGen: 8K-&amp;gt;437K(1024K)] 509K-&amp;gt;437K(3584K) [PSPermGen: 2561K-&amp;gt;2560K(21504K)], 0.0096799 secs] [Times: user=0.01 sys=0.00, real=0.02 secs] 
----start----
[GC [PSYoungGen: 2048K-&amp;gt;96K(2560K)] 2485K-&amp;gt;533K(3584K), 0.0007277 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[GC [PSYoungGen: 2144K-&amp;gt;64K(2560K)] 2581K-&amp;gt;501K(3584K), 0.0004147 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;@3ccd5b3d
---- end ----
Heap
 PSYoungGen      total 2560K, used 270K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)
  eden space 2048K, 10% used [0x00000000ffd00000,0x00000000ffd33aa8,0x00000000fff00000)
  from space 512K, 12% used [0x00000000fff00000,0x00000000fff10000,0x00000000fff80000)
  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)
 ParOldGen       total 1024K, used 437K [0x00000000ff800000, 0x00000000ff900000, 0x00000000ffd00000)
  object space 1024K, 42% used [0x00000000ff800000,0x00000000ff86d508,0x00000000ff900000)
 PSPermGen       total 21504K, used 2567K [0x00000000fa600000, 0x00000000fbb00000, 0x00000000ff800000)
  object space 21504K, 11% used [0x00000000fa600000,0x00000000fa881ff0,0x00000000fbb00000)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;gt; java.lang.Object@3ccd5b3d&lt;br/&gt;
The soft reference&apos;s referent is there and not garbage-collected against 2 Scavenge GCs.&lt;/p&gt;

&lt;p&gt;&amp;gt; eden space 2048K ...&lt;br/&gt;
You can causes a Scavenge GC with creating 2048kB objects.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Run with -verbose:gc -Xmx2m -XX:+PrintGCDetails -XX:SoftRefLRUPolicyMSPerMB=0&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[GC [PSYoungGen: 680K-&amp;gt;485K(2560K)] 680K-&amp;gt;509K(3584K), 0.0013846 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[Full GC [PSYoungGen: 485K-&amp;gt;0K(2560K)] [ParOldGen: 24K-&amp;gt;425K(1024K)] 509K-&amp;gt;425K(3584K) [PSPermGen: 2561K-&amp;gt;2560K(21504K)], 0.0109427 secs] [Times: user=0.01 sys=0.00, real=0.02 secs] 
----start----
[GC [PSYoungGen: 2048K-&amp;gt;96K(2560K)] 2473K-&amp;gt;521K(3584K), 0.0005523 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[GC [PSYoungGen: 2144K-&amp;gt;32K(2560K)] 2569K-&amp;gt;457K(3584K), 0.0005309 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
---- end ----
Heap
 PSYoungGen      total 2560K, used 238K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)
  eden space 2048K, 10% used [0x00000000ffd00000,0x00000000ffd33aa8,0x00000000fff00000)
  from space 512K, 6% used [0x00000000fff00000,0x00000000fff08000,0x00000000fff80000)
  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)
 ParOldGen       total 1024K, used 425K [0x00000000ff800000, 0x00000000ff900000, 0x00000000ffd00000)
  object space 1024K, 41% used [0x00000000ff800000,0x00000000ff86a7c0,0x00000000ff900000)
 PSPermGen       total 21504K, used 2567K [0x00000000fa600000, 0x00000000fbb00000, 0x00000000ff800000)
  object space 21504K, 11% used [0x00000000fa600000,0x00000000fa881ff0,0x00000000fbb00000)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;gt; null&lt;br/&gt;
With -XX:SoftRefLRUPolicyMSPerMB=0, The soft reference&apos;s referent is garbage-collected.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Run with -verbose:gc -Xmx2m -XX:+PrintGCDetails -XX:SoftRefLRUPolicyMSPerMB=0, reducing the object creation to 2048kB:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[GC [PSYoungGen: 732K-&amp;gt;501K(2560K)] 732K-&amp;gt;517K(3584K), 0.0014023 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[Full GC [PSYoungGen: 501K-&amp;gt;0K(2560K)] [ParOldGen: 16K-&amp;gt;425K(1024K)] 517K-&amp;gt;425K(3584K) [PSPermGen: 2561K-&amp;gt;2560K(21504K)], 0.0097419 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] 
----start----
[GC [PSYoungGen: 2048K-&amp;gt;96K(2560K)] 2473K-&amp;gt;521K(3584K), 0.0005010 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;@74ed41f8
---- end ----
Heap
 PSYoungGen      total 2560K, used 241K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)
  eden space 2048K, 7% used [0x00000000ffd00000,0x00000000ffd24428,0x00000000fff00000)
  from space 512K, 18% used [0x00000000fff80000,0x00000000fff98000,0x0000000100000000)
  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)
 ParOldGen       total 1024K, used 425K [0x00000000ff800000, 0x00000000ff900000, 0x00000000ffd00000)
  object space 1024K, 41% used [0x00000000ff800000,0x00000000ff86a7c0,0x00000000ff900000)
 PSPermGen       total 21504K, used 2567K [0x00000000fa600000, 0x00000000fbb00000, 0x00000000ff800000)
  object space 21504K, 11% used [0x00000000fa600000,0x00000000fa881df0,0x00000000fbb00000)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;gt; java.lang.Object@74ed41f8&lt;br/&gt;
The soft reference&apos;s referent is not garbage-collected against just 1 Scavenge GC.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Run with -verbose:gc -Xmx2m -XX:+PrintGCDetails, changing the code to use &lt;tt&gt;WeakReference&lt;/tt&gt; instead of &lt;tt&gt;SoftReference&lt;/tt&gt;, and reducing the object creating to 2048kB:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[GC [PSYoungGen: 732K-&amp;gt;501K(2560K)] 732K-&amp;gt;525K(3584K), 0.0011397 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[Full GC [PSYoungGen: 501K-&amp;gt;0K(2560K)] [ParOldGen: 24K-&amp;gt;437K(1024K)] 525K-&amp;gt;437K(3584K) [PSPermGen: 2561K-&amp;gt;2560K(21504K)], 0.0100745 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] 
----start----
[GC [PSYoungGen: 2048K-&amp;gt;96K(2560K)] 2485K-&amp;gt;533K(3584K), 0.0004483 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
---- end ----
Heap
 PSYoungGen      total 2560K, used 241K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)
  eden space 2048K, 7% used [0x00000000ffd00000,0x00000000ffd24428,0x00000000fff00000)
  from space 512K, 18% used [0x00000000fff80000,0x00000000fff98000,0x0000000100000000)
  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)
 ParOldGen       total 1024K, used 437K [0x00000000ff800000, 0x00000000ff900000, 0x00000000ffd00000)
  object space 1024K, 42% used [0x00000000ff800000,0x00000000ff86d508,0x00000000ff900000)
 PSPermGen       total 21504K, used 2567K [0x00000000fa600000, 0x00000000fbb00000, 0x00000000ff800000)
  object space 21504K, 11% used [0x00000000fa600000,0x00000000fa881df0,0x00000000fbb00000)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;gt; null&lt;br/&gt;
The weak reference&apos;s referent can be garbage-collected by just 1 Scavenge GC.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;Run with -verbose:gc -Xmx2m -XX:+PrintGCDetails, using &lt;tt&gt;WeakReference&lt;/tt&gt; and reducing the object creating to 1024kB:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[GC [PSYoungGen: 732K-&amp;gt;501K(2560K)] 732K-&amp;gt;509K(3584K), 0.0013515 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[Full GC [PSYoungGen: 501K-&amp;gt;0K(2560K)] [ParOldGen: 8K-&amp;gt;437K(1024K)] 509K-&amp;gt;437K(3584K) [PSPermGen: 2561K-&amp;gt;2560K(21504K)], 0.0094317 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
----start----
java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;@4336a26f
---- end ----
Heap
 PSYoungGen      total 2560K, used 1151K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)
  eden space 2048K, 56% used [0x00000000ffd00000,0x00000000ffe1ff50,0x00000000fff00000)
  from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)
  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)
 ParOldGen       total 1024K, used 437K [0x00000000ff800000, 0x00000000ff900000, 0x00000000ffd00000)
  object space 1024K, 42% used [0x00000000ff800000,0x00000000ff86d508,0x00000000ff900000)
 PSPermGen       total 21504K, used 2567K [0x00000000fa600000, 0x00000000fbb00000, 0x00000000ff800000)
  object space 21504K, 11% used [0x00000000fa600000,0x00000000fa881df0,0x00000000fbb00000)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;gt; java.lang.Object@4336a26f&lt;br/&gt;
There is no GC and the weak referent is there.&lt;/p&gt;</comment>
                            <comment id="14733436" author="ikeda" created="Mon, 7 Sep 2015 09:05:50 +0000"  >&lt;p&gt;The output of another test condition.&lt;/p&gt;

&lt;p&gt;Change the code to force the referent to move to the old generation by &lt;tt&gt;System.gc&lt;/tt&gt;:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt; referent = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;();
    Reference&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt; ref = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; WeakReference&amp;lt;&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;&amp;gt;(referent);
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.gc();
    referent = &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and print again the referent after &lt;tt&gt;System.gc&lt;/tt&gt;:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(ref.get());
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.gc();
    &lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.out.println(ref.get());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;and run with -verbose:gc -Xmx2m -XX:+PrintGCDetails, creating 100MB objects. The result is as follows:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[GC [PSYoungGen: 732K-&amp;gt;485K(2560K)] 732K-&amp;gt;541K(3584K), 0.0011560 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[Full GC [PSYoungGen: 485K-&amp;gt;0K(2560K)] [ParOldGen: 56K-&amp;gt;437K(1024K)] 541K-&amp;gt;437K(3584K) [PSPermGen: 2561K-&amp;gt;2560K(21504K)], 0.0097690 secs] [Times: user=0.01 sys=0.00, real=0.02 secs] 
----start----
[GC [PSYoungGen: 82K-&amp;gt;96K(2560K)] 519K-&amp;gt;533K(3584K), 0.0006806 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[Full GC [PSYoungGen: 96K-&amp;gt;0K(2560K)] [ParOldGen: 437K-&amp;gt;437K(1024K)] 533K-&amp;gt;437K(3584K) [PSPermGen: 2560K-&amp;gt;2560K(21504K)], 0.0064223 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[GC [PSYoungGen: 2048K-&amp;gt;0K(2560K)] 2485K-&amp;gt;437K(3584K), 0.0004021 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[GC [PSYoungGen: 2048K-&amp;gt;0K(2560K)] 2485K-&amp;gt;437K(3584K), 0.0004474 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[GC [PSYoungGen: 2048K-&amp;gt;0K(2560K)] 2485K-&amp;gt;437K(3584K), 0.0004198 secs] [Times: user=0.06 sys=0.00, real=0.02 secs] 
(...skip...)
[GC [PSYoungGen: 2047K-&amp;gt;0K(2560K)] 2500K-&amp;gt;453K(3584K), 0.0089507 secs] [Times: user=0.01 sys=0.00, real=0.02 secs] 
[GC [PSYoungGen: 2048K-&amp;gt;0K(2560K)] 2501K-&amp;gt;453K(3584K), 0.0154225 secs] [Times: user=0.00 sys=0.00, real=0.02 secs] 
[GC [PSYoungGen: 2048K-&amp;gt;0K(2560K)] 2501K-&amp;gt;453K(3584K), 0.0013939 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
java.lang.&lt;span class=&quot;code-object&quot;&gt;Object&lt;/span&gt;@243f06e9
[GC [PSYoungGen: 899K-&amp;gt;32K(2560K)] 1352K-&amp;gt;485K(3584K), 0.0004124 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[Full GC [PSYoungGen: 32K-&amp;gt;0K(2560K)] [ParOldGen: 453K-&amp;gt;437K(1024K)] 485K-&amp;gt;437K(3584K) [PSPermGen: 2561K-&amp;gt;2561K(21504K)], 0.0072723 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
&lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;
---- end ----
Heap
 PSYoungGen      total 2560K, used 41K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)
  eden space 2048K, 2% used [0x00000000ffd00000,0x00000000ffd0a4f8,0x00000000fff00000)
  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)
  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)
 ParOldGen       total 1024K, used 437K [0x00000000ff800000, 0x00000000ff900000, 0x00000000ffd00000)
  object space 1024K, 42% used [0x00000000ff800000,0x00000000ff86d688,0x00000000ff900000)
 PSPermGen       total 21504K, used 2568K [0x00000000fa600000, 0x00000000fbb00000, 0x00000000ff800000)
  object space 21504K, 11% used [0x00000000fa600000,0x00000000fa882098,0x00000000fbb00000)
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;gt; java.lang.Object@243f06e9&lt;br/&gt;
How many scavenge CGs are invoked, the referent in the old generation is never garbage-collected.&lt;/p&gt;

&lt;p&gt;&amp;gt; [Full GC ...&lt;br/&gt;
&amp;gt; null&lt;br/&gt;
Only full-GC can collect it.&lt;/p&gt;</comment>
                            <comment id="14737695" author="yuzhihong@gmail.com" created="Wed, 9 Sep 2015 22:15:55 +0000"  >&lt;p&gt;Looks like patch v7 is ready to go.&lt;/p&gt;</comment>
                            <comment id="14935398" author="yuzhihong@gmail.com" created="Tue, 29 Sep 2015 16:23:49 +0000"  >&lt;p&gt;Master branch changes very fast.&lt;/p&gt;

&lt;p&gt;Mind re-attaching for QA run ?&lt;/p&gt;</comment>
                            <comment id="14936164" author="ikeda" created="Wed, 30 Sep 2015 00:45:03 +0000"  >&lt;p&gt;Re-attach to trigger QA run.&lt;/p&gt;</comment>
                            <comment id="14936272" author="hadoopqa" created="Wed, 30 Sep 2015 02:28:39 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12764351/HBASE-14268-V7.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12764351/HBASE-14268-V7.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit c04d18970e066c1c5879a7ac1d261ef69cae5c3e.&lt;br/&gt;
  ATTACHMENT ID: 12764351&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15817//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15817//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15817//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15817//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15817//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15817//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15817//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15817//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14936284" author="carp84" created="Wed, 30 Sep 2015 02:48:15 +0000"  >&lt;p&gt;From the console output:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/test-framework/dev-support/test-patch.sh: line 838: 14542 Killed                  $MVN clean test -Dsurefire.rerunFailingTestsCount=2 -P runAllTests -D$&lt;/p&gt;
&lt;div class=&quot;error&quot;&gt;&lt;span class=&quot;error&quot;&gt;Unknown macro: {PROJECT_NAME}&lt;/span&gt; &lt;/div&gt;
&lt;p&gt;PatchProcess&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I guess we need another re-attach for QA run&lt;/p&gt;</comment>
                            <comment id="14936295" author="ikeda" created="Wed, 30 Sep 2015 03:01:36 +0000"  >&lt;p&gt;Re-attach to trigger QA run. I want a re-attach button &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/tongue.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14936406" author="hadoopqa" created="Wed, 30 Sep 2015 05:53:46 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12764369/HBASE-14268-V7.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12764369/HBASE-14268-V7.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit c04d18970e066c1c5879a7ac1d261ef69cae5c3e.&lt;br/&gt;
  ATTACHMENT ID: 12764369&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.hadoop.hdfs.TestPeerCache.testExpiry(TestPeerCache.java:186)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15820//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15820//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15820//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15820//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15820//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15820//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15820//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15820//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14936516" author="carp84" created="Wed, 30 Sep 2015 08:00:39 +0000"  >&lt;p&gt;All UT passed according to the report and the zombie one TestPeerCache is even not UT case of HBase (wondering why included in our test report...)&lt;/p&gt;</comment>
                            <comment id="14937001" author="jingcheng.du@intel.com" created="Wed, 30 Sep 2015 15:29:18 +0000"  >&lt;p&gt;Just my crazy thoughts.&lt;br/&gt;
As I know, an objects only with weak references would be collected when the collector finds it. If this object is located in young gen, it might be collected very fast.&lt;br/&gt;
If we have several threads to acquire and release the same lock, and we might have one thread will stay long time in the while loop in get(K key) method of WeakObjectPool (existingRef.get() will always get a null value) if other threads acquire and release the same lock very fast?&lt;br/&gt;
This might hardly happen, but it might be possible right?&lt;/p&gt;</comment>
                            <comment id="14939148" author="ikeda" created="Thu, 1 Oct 2015 01:34:24 +0000"  >&lt;p&gt;Do you mean, it is possible to adjust threads to repeatedly and quickly make a referent, drop it and GC to collect the referent so that another thread continues to find null referent in the while loop?&lt;/p&gt;</comment>
                            <comment id="14945398" author="carp84" created="Tue, 6 Oct 2015 17:24:08 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jingcheng.du%40intel.com&quot; class=&quot;user-hover&quot; rel=&quot;jingcheng.du@intel.com&quot;&gt;Jingcheng Du&lt;/a&gt; I guess we&apos;re discussing about lock fairness here? If so, it seems to me the original implementation also uses unfair lock and early waiting thread might also starve. Maybe another point to improve, though.&lt;/p&gt;</comment>
                            <comment id="14946012" author="stack" created="Tue, 6 Oct 2015 23:38:41 +0000"  >&lt;p&gt;Reattach.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt; That is interesting. Weak references will be collected by GC if in new gen but not if it makes it up into old gen (You should do a blog post on your findings here).&lt;/p&gt;</comment>
                            <comment id="14946172" author="hadoopqa" created="Wed, 7 Oct 2015 03:13:50 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12765287/HBASE-14268-V7.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12765287/HBASE-14268-V7.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 0ea1f8122709302ee19279aaa438b37dac30c25b.&lt;br/&gt;
  ATTACHMENT ID: 12765287&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core zombie tests&lt;/font&gt;.  There are 1 zombie test(s): 	at org.apache.phoenix.pherf.ResultTest.testResult(ResultTest.java:119)&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15891//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15891//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15891//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15891//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15891//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15891//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15891//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15891//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15891//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15891//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14947956" author="jingcheng.du@intel.com" created="Thu, 8 Oct 2015 02:05:50 +0000"  >&lt;p&gt;Sorry for the late response.&lt;br/&gt;
Something like that. Quick get/release on lock can lead in some threads can lead some other threads continue to find null reference(existingRef.get()) in the loop. Theoretically, it is possible, right? Although I think it hardly happens.&lt;/p&gt;</comment>
                            <comment id="14951503" author="hadoopqa" created="Sat, 10 Oct 2015 02:01:29 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12765929/HBASE-14268-V7.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12765929/HBASE-14268-V7.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 2e593a9d3801a42751244ab4478650a581437875.&lt;br/&gt;
  ATTACHMENT ID: 12765929&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;/p&gt;


&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15936//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15936//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15936//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15936//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15936//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15936//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15936//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15936//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15936//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15936//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14951513" author="stack" created="Sat, 10 Oct 2015 02:30:35 +0000"  >&lt;p&gt;Are we into a new place where our patch builds are killing each other:&lt;/p&gt;

&lt;p&gt;/home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/test-framework/dev-support/test-patch.sh: line 838: 29466 Killed                  $MVN clean test -Dsurefire.rerunFailingTestsCount=2 -P runAllTests -D$&lt;/p&gt;
{PROJECT_NAME}PatchProcess&lt;br/&gt;
We&apos;re ok: there is no zombie test&lt;br/&gt;
&lt;br/&gt;
test-patch is doing this:&lt;br/&gt;
&lt;br/&gt;
  ### Kill any rogue build processes from the last attempt&lt;br/&gt;
  condemnedCount=`$PS auxwww | $GREP ${PROJECT_NAME}
&lt;p&gt;PatchProcess | $AWK &apos;&lt;/p&gt;
{print $2}&apos; | $AWK &apos;BEGIN {total = 0} {total += 1} END {print total}&apos;`&lt;br/&gt;
  echo &quot;WARNING: $condemnedCount rogue build processes detected, terminating.&quot;&lt;br/&gt;
  $PS auxwww | $GREP ${PROJECT_NAME}PatchProcess | $AWK &apos;{print $2}
&lt;p&gt;&apos; | /usr/bin/xargs -t -I {} /bin/kill -9 {} &amp;gt; /dev/null&lt;/p&gt;

&lt;p&gt;In this case it did this:&lt;/p&gt;

&lt;p&gt;WARNING: 2 rogue build processes detected, terminating.&lt;br/&gt;
/bin/kill -9 29055 &lt;br/&gt;
/bin/kill -9 29461 &lt;/p&gt;

&lt;p&gt;...and then our process was killed with this &quot;test-patch.sh: line 838: 29466 Killed &quot;.. Ours was a different PID&lt;/p&gt;

&lt;p&gt;Maybe I should remove this killing code too only I&apos;ve already removed killing of surefirebooters that were running concurrently&lt;/p&gt;</comment>
                            <comment id="14951632" author="hadoopqa" created="Sat, 10 Oct 2015 06:00:25 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12765955/HBASE-14268-V7.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12765955/HBASE-14268-V7.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit 2e593a9d3801a42751244ab4478650a581437875.&lt;br/&gt;
  ATTACHMENT ID: 12765955&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 5 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.0 2.4.1 2.5.0 2.5.1 2.5.2 2.6.0 2.6.1 2.7.0 2.7.1)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn post-site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15941//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15941//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15941//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15941//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15941//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15941//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Javadoc warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15941//artifact/patchprocess/patchJavadocWarnings.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15941//artifact/patchprocess/patchJavadocWarnings.txt&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/15941//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/15941//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14952063" author="stack" created="Sat, 10 Oct 2015 22:11:04 +0000"  >&lt;p&gt;Ok if I commit &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="14954208" author="ikeda" created="Tue, 13 Oct 2015 01:34:32 +0000"  >&lt;p&gt;Yes it should be hardly realized that GC is so frequently happened, otherwise it would cause a more serious performance problem in the server.&lt;/p&gt;</comment>
                            <comment id="14954209" author="ikeda" created="Tue, 13 Oct 2015 01:35:07 +0000"  >&lt;p&gt;Sure! &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="14954469" author="stack" created="Tue, 13 Oct 2015 06:15:06 +0000"  >&lt;p&gt;Pushed to branch-1.2+&lt;/p&gt;

&lt;p&gt;Thanks for the nice improvement &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ikeda&quot; class=&quot;user-hover&quot; rel=&quot;ikeda&quot;&gt;Hiroshi Ikeda&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="14954610" author="hudson" created="Tue, 13 Oct 2015 08:22:38 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6901 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6901/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6901/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker (Hiroshi Ikeda) (stack: rev 99e99f3b54bb8801565fbe2a2c071da44281868d)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestKeyLocker.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14954631" author="hudson" created="Tue, 13 Oct 2015 08:41:36 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.3 #257 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3/257/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3/257/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker (Hiroshi Ikeda) (stack: rev 98f1387f867835118cadf8b2bbc1e937a16de250)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestKeyLocker.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14954653" author="hudson" created="Tue, 13 Oct 2015 08:59:03 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2 #245 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/245/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/245/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker (Hiroshi Ikeda) (stack: rev 0fc4614e5b830899e521b14d34db2e54126ddfd3)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestKeyLocker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14954658" author="hudson" created="Tue, 13 Oct 2015 09:00:15 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2-IT #204 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2-IT/204/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2-IT/204/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker (Hiroshi Ikeda) (stack: rev 0fc4614e5b830899e521b14d34db2e54126ddfd3)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestKeyLocker.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14954667" author="hudson" created="Tue, 13 Oct 2015 09:02:47 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.3-IT #230 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3-IT/230/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3-IT/230/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker (Hiroshi Ikeda) (stack: rev 98f1387f867835118cadf8b2bbc1e937a16de250)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestKeyLocker.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14954684" author="sreenivasulureddy" created="Tue, 13 Oct 2015 09:09:46 +0000"  >&lt;p&gt;compilation is failing on master branch..&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.2:compile (&lt;span class=&quot;code-keyword&quot;&gt;default&lt;/span&gt;-compile) on project hbase-common: Compilation failure: Compilation failure:
hbase/hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java:[51,17] cannot find symbol
[ERROR] symbol:   class WeakObjectPool
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14954690" author="nkeywal" created="Tue, 13 Oct 2015 09:15:01 +0000"  >&lt;p&gt;I just saw that, I&apos;m having a look.&lt;/p&gt;</comment>
                            <comment id="14954701" author="nkeywal" created="Tue, 13 Oct 2015 09:25:55 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sreenivasulureddy&quot; class=&quot;user-hover&quot; rel=&quot;sreenivasulureddy&quot;&gt;Y. SREENIVASULU REDDY&lt;/a&gt;It should be ok now. I added the two missing files.&lt;/p&gt;</comment>
                            <comment id="14954776" author="sreenivasulureddy" created="Tue, 13 Oct 2015 10:52:55 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=nkeywal&quot; class=&quot;user-hover&quot; rel=&quot;nkeywal&quot;&gt;Nicolas Liochon&lt;/a&gt;  after adding the missing files, compilation is success. &lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="14954897" author="hudson" created="Tue, 13 Oct 2015 13:06:02 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6902 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6902/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6902/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker - add missing files (nkeywal: rev b63155eac7ec429d584478eed50754abc1c7d935)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestWeakObjectPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/WeakObjectPool.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14954967" author="stack" created="Tue, 13 Oct 2015 14:00:13 +0000"  >&lt;p&gt;Thanks @nkeywal and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=sreenivasulureddy&quot; class=&quot;user-hover&quot; rel=&quot;sreenivasulureddy&quot;&gt;Y. SREENIVASULU REDDY&lt;/a&gt; for fixing my messup.&lt;/p&gt;</comment>
                            <comment id="14955284" author="hudson" created="Tue, 13 Oct 2015 17:09:40 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.2-IT #205 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2-IT/205/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2-IT/205/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker - add missing files (eclark: rev ee76afec93b5b16cb51548d4a529cd90b4425613)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/WeakObjectPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestWeakObjectPool.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14955309" author="hudson" created="Tue, 13 Oct 2015 17:27:22 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.3 #258 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3/258/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3/258/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker - add missing files (eclark: rev 56ecbc1a2c43d7f1304b9707f9e971460406280b)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/WeakObjectPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestWeakObjectPool.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14955327" author="hudson" created="Tue, 13 Oct 2015 17:37:42 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.3-IT #231 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3-IT/231/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3-IT/231/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker - add missing files (eclark: rev 56ecbc1a2c43d7f1304b9707f9e971460406280b)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/WeakObjectPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestWeakObjectPool.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14955369" author="hudson" created="Tue, 13 Oct 2015 18:03:06 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2 #246 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/246/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/246/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker - add missing files (eclark: rev ee76afec93b5b16cb51548d4a529cd90b4425613)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/test/java/org/apache/hadoop/hbase/util/TestWeakObjectPool.java&lt;/li&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/WeakObjectPool.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14956874" author="ashish singhi" created="Wed, 14 Oct 2015 13:05:05 +0000"  >&lt;p&gt;This seems to have introduced a new javadoc warning.&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;[WARNING] /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java:83: warning - @throw is an unknown tag.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I can provide the addendum but not without your permission!&lt;/p&gt;</comment>
                            <comment id="14956989" author="carp84" created="Wed, 14 Oct 2015 14:09:30 +0000"  >&lt;p&gt;The addendum patch resolves the javadoc warning introduced by this JIRA:&lt;/p&gt;
&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;[WARNING] /home/jenkins/jenkins-slave/workspace/PreCommit-HBASE-Build/hbase/hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java:83: warning - @throw is an unknown tag
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="14956998" author="carp84" created="Wed, 14 Oct 2015 14:13:25 +0000"  >&lt;p&gt;Just noticed this message, sorry for repeating.&lt;/p&gt;</comment>
                            <comment id="14957581" author="hudson" created="Wed, 14 Oct 2015 19:31:36 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6910 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6910/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6910/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker; ADDENDUM: FIX JAVADOC WARNING (stack: rev 118ef8b6e55d670b29921d07f9034e7dc0d61fc7)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14957637" author="hudson" created="Wed, 14 Oct 2015 20:02:36 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.3 #264 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3/264/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3/264/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker; ADDENDUM: FIX JAVADOC WARNING (stack: rev 4588620a04ca9818f55db58d6731815c17e77717)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14957794" author="hudson" created="Wed, 14 Oct 2015 21:18:01 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2-IT #210 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2-IT/210/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2-IT/210/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker; ADDENDUM: FIX JAVADOC WARNING (stack: rev 429798f27b52a08b9077f35bb211d50fcfd49df2)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14957830" author="hudson" created="Wed, 14 Oct 2015 21:31:27 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.3-IT #236 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.3-IT/236/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.3-IT/236/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker; ADDENDUM: FIX JAVADOC WARNING (stack: rev 4588620a04ca9818f55db58d6731815c17e77717)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14957834" author="hudson" created="Wed, 14 Oct 2015 21:31:57 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2 #254 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/254/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/254/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14268&quot; title=&quot;Improve KeyLocker&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14268&quot;&gt;&lt;del&gt;HBASE-14268&lt;/del&gt;&lt;/a&gt; Improve KeyLocker; ADDENDUM: FIX JAVADOC WARNING (stack: rev 429798f27b52a08b9077f35bb211d50fcfd49df2)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-common/src/main/java/org/apache/hadoop/hbase/util/KeyLocker.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14957916" author="stack" created="Wed, 14 Oct 2015 22:09:13 +0000"  >&lt;p&gt;I pushed the addendum to branch-1.2+  Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=carp84&quot; class=&quot;user-hover&quot; rel=&quot;carp84&quot;&gt;Yu Li&lt;/a&gt; for fix.&lt;/p&gt;</comment>
                            <comment id="14964484" author="ikeda" created="Tue, 20 Oct 2015 04:13:43 +0000"  >&lt;p&gt;Thanks for the nice addendum patch &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12895460">HBASE-14463</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12752280" name="14268-V5.patch" size="17621" author="yuzhihong@gmail.com" created="Tue, 25 Aug 2015 18:10:46 +0000"/>
                            <attachment id="12751648" name="HBASE-14268-V2.patch" size="8198" author="ikeda" created="Fri, 21 Aug 2015 03:01:04 +0000"/>
                            <attachment id="12751740" name="HBASE-14268-V3.patch" size="10890" author="ikeda" created="Fri, 21 Aug 2015 15:09:12 +0000"/>
                            <attachment id="12751981" name="HBASE-14268-V4.patch" size="17262" author="ikeda" created="Mon, 24 Aug 2015 07:08:02 +0000"/>
                            <attachment id="12752372" name="HBASE-14268-V5.patch" size="17621" author="ikeda" created="Wed, 26 Aug 2015 00:59:49 +0000"/>
                            <attachment id="12752129" name="HBASE-14268-V5.patch" size="17621" author="ikeda" created="Tue, 25 Aug 2015 02:08:19 +0000"/>
                            <attachment id="12752646" name="HBASE-14268-V6.patch" size="18013" author="ikeda" created="Thu, 27 Aug 2015 03:24:06 +0000"/>
                            <attachment id="12765955" name="HBASE-14268-V7.patch" size="18162" author="stack" created="Sat, 10 Oct 2015 02:31:02 +0000"/>
                            <attachment id="12765929" name="HBASE-14268-V7.patch" size="18162" author="stack" created="Fri, 9 Oct 2015 22:53:43 +0000"/>
                            <attachment id="12765287" name="HBASE-14268-V7.patch" size="18162" author="stack" created="Tue, 6 Oct 2015 23:38:41 +0000"/>
                            <attachment id="12764369" name="HBASE-14268-V7.patch" size="18162" author="ikeda" created="Wed, 30 Sep 2015 03:01:36 +0000"/>
                            <attachment id="12764351" name="HBASE-14268-V7.patch" size="18162" author="ikeda" created="Wed, 30 Sep 2015 00:45:03 +0000"/>
                            <attachment id="12753889" name="HBASE-14268-V7.patch" size="18162" author="ikeda" created="Thu, 3 Sep 2015 00:34:16 +0000"/>
                            <attachment id="12753436" name="HBASE-14268-V7.patch" size="18162" author="ikeda" created="Tue, 1 Sep 2015 01:30:18 +0000"/>
                            <attachment id="12766549" name="HBASE-14268.addendum.patch" size="746" author="carp84" created="Wed, 14 Oct 2015 14:09:30 +0000"/>
                            <attachment id="12751459" name="HBASE-14268.patch" size="7935" author="ikeda" created="Thu, 20 Aug 2015 10:19:09 +0000"/>
                            <attachment id="12754175" name="KeyLockerIncrKeysPerformance.java" size="1264" author="ikeda" created="Fri, 4 Sep 2015 10:11:55 +0000"/>
                            <attachment id="12751460" name="KeyLockerPerformance.java" size="1742" author="ikeda" created="Thu, 20 Aug 2015 10:19:09 +0000"/>
                            <attachment id="12754444" name="ReferenceTestApp.java" size="892" author="ikeda" created="Mon, 7 Sep 2015 06:27:12 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>19.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 20 Aug 2015 16:17:38 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 8 weeks, 3 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2j5h3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>