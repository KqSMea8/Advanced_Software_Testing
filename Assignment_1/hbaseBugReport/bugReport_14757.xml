<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:56:10 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-14757/HBASE-14757.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-14757] Reduce allocation pressure imposed by HFile block processing</title>
                <link>https://issues.apache.org/jira/browse/HBASE-14757</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Using Flight Recorder to look at the object allocation profiles of regionservers processing the various YCSB workloads when block encoding is enabled (specifically, FAST_DIFF, but this applies to any), we can see:&lt;/p&gt;
&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Allocations of byte[] for block encoding contribute 40-70% of all allocation pressure in TLABs.&lt;/li&gt;
	&lt;li&gt;Of that subset of allocation pressure, ~50-70% is byte[] for SeekerState&lt;/li&gt;
	&lt;li&gt;Greater than 99% of allocation of byte[] outside of TLABs are for read buffers for HFileBlock#readBlockDataInternal.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;This issue is for investigation of strategy for and impact of reducing that allocation pressure. Reducing allocation pressure reduces demand for GC, which reduces GC activity overall, which reduces a source of system latency.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12910233">HBASE-14757</key>
            <summary>Reduce allocation pressure imposed by HFile block processing</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="apurtell">Andrew Purtell</assignee>
                                    <reporter username="apurtell">Andrew Purtell</reporter>
                        <labels>
                    </labels>
                <created>Wed, 4 Nov 2015 03:04:47 +0000</created>
                <updated>Fri, 8 Jan 2016 00:25:12 +0000</updated>
                                                            <fixVersion>2.0.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                <comments>
                            <comment id="14988808" author="apurtell" created="Wed, 4 Nov 2015 03:17:34 +0000"  >&lt;p&gt;For HFileBlock read buffers, these allocations are expected. This is where block data lands. These allocations are carried through into the block cache when using the LRUBlockCache and are retained potentially for a very long time. When using BucketCache, the on-heap block data isn&apos;t needed after the IO engine serializes it off-heap or to SSD. We could reuse allocations for the latter case but not the former. Needs investigation. &lt;/p&gt;

&lt;p&gt;Meanwhile, for block encoding / seeker state, I think these are all short lived allocations. So, a strawman: Round up byte[] allocation requests here to the nearest power of 2. Keep object caches for powers of 2 over a common range. Serve requests from the appropriate free list where available. Prune free lists using LRU. &lt;/p&gt;</comment>
                            <comment id="14989274" author="anoop.hbase" created="Wed, 4 Nov 2015 10:30:04 +0000"  >&lt;p&gt;When DBE is in place and we use SeekerState, the Cells will get key part in new byte[] (after recreation)..  But the value part will be still referring to the same byte[] which was created and read data into (from HDFS)   This byte[] is free for reuse after all cells from it got shipped..   So we might need some way like what we did for Bucket Cache (ref counting to know whether a bucket BB is really free for eviction)&lt;/p&gt;</comment>
                            <comment id="14989838" author="apurtell" created="Wed, 4 Nov 2015 16:29:22 +0000"  >&lt;p&gt;Thanks Anoop. I&apos;m expecting the changes we&apos;re making for off-heaping will make working in trunk both easier and more difficult. I believe targeted changes to prior versions should be more straightforward. I might actually prototype in branch-1. &lt;/p&gt;</comment>
                            <comment id="14990018" author="ram_krish" created="Wed, 4 Nov 2015 17:44:20 +0000"  >&lt;p&gt;I think even the key part are creating lot of short lived byte[] and BBs. Since in a scan call every next() that we do a copy of the key part to create the SeekerState from which the current cell is created. These are very short lived object. Already the DBE have a fixed 512 byte[] to which the decoding happens and that is recycled. &lt;/p&gt;</comment>
                            <comment id="14990024" author="apurtell" created="Wed, 4 Nov 2015 17:48:59 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think even the key part are creating lot of short lived byte[] and BBs. Since in a scan call every next() that we do a copy of the key part to create the SeekerState from which the current cell is created. These are very short lived object. Already the DBE have a fixed 512 byte[] to which the decoding happens and that is recycled.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;ll profile trunk next. I&apos;m expecting it to behave differently from earlier code lines. Perhaps only tweaks are needed there. I will report back when I have some data.&lt;br/&gt;
Edit: Should have mentioned it, pardon, results as described in the description are from 0.98&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 4 Nov 2015 10:30:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 6 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2nx5b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>