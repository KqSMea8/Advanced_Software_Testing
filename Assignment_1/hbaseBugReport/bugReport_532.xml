<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:45:08 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-532/HBASE-532.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-532] Odd interaction between HRegion.get, HRegion.deleteAll and compactions</title>
                <link>https://issues.apache.org/jira/browse/HBASE-532</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;If you apply the patch for &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-483&quot; title=&quot;Merge tool won&amp;#39;t merge two overlapping regions&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-483&quot;&gt;&lt;del&gt;HBASE-483&lt;/del&gt;&lt;/a&gt; to the 0.1 branch and comment out lines 309 and 315 of MetaUtils.java (which force compactions of the root and meta regions respectively), TestMergeTool fails. Why forcing compactions makes the test succeed is a mystery to me.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12391833">HBASE-532</key>
            <summary>Odd interaction between HRegion.get, HRegion.deleteAll and compactions</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="1" iconUrl="https://issues.apache.org/jira/images/icons/priorities/blocker.png">Blocker</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stack">stack</assignee>
                                    <reporter username="jimk">Jim Kellerman</reporter>
                        <labels>
                    </labels>
                <created>Wed, 19 Mar 2008 05:33:16 +0000</created>
                <updated>Fri, 22 Aug 2008 21:13:12 +0000</updated>
                            <resolved>Thu, 17 Apr 2008 03:20:52 +0000</resolved>
                                    <version>0.1.1</version>
                    <version>0.2.0</version>
                                    <fixVersion>0.1.2</fixVersion>
                    <fixVersion>0.2.0</fixVersion>
                                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12580236" author="jimk" created="Wed, 19 Mar 2008 05:34:29 +0000"  >&lt;p&gt;I have no idea why this happens, but inserting these two compactions makes the test succeed.&lt;/p&gt;</comment>
                            <comment id="12581322" author="bryanduxbury" created="Sun, 23 Mar 2008 03:13:10 +0000"  >&lt;p&gt;Forcing a compaction causes multiple mapfiles to unite, resolving any possible issues with the way get or getFull presume the data to be organized. That is likely the source of the issue.&lt;/p&gt;</comment>
                            <comment id="12581409" author="jimk" created="Sun, 23 Mar 2008 17:44:49 +0000"  >&lt;p&gt;Is this a blocker for 0.1.0 or can it be incorporated into 0.1.1?&lt;/p&gt;</comment>
                            <comment id="12581415" author="bryanduxbury" created="Sun, 23 Mar 2008 18:37:06 +0000"  >&lt;p&gt;I would say that unless we can confidently isolate the problem, it should be a 0.1.1 issue.&lt;/p&gt;</comment>
                            <comment id="12581452" author="bryanduxbury" created="Mon, 24 Mar 2008 01:57:45 +0000"  >&lt;p&gt;I&apos;ve been poking around with this problem. It is indeed quite odd that this keeps happening. &lt;/p&gt;

&lt;p&gt;A few things that stand out to me. First, it&apos;s totally possible that scanners and deleteAll don&apos;t play well together. Deletes that are not matched precisely to cells have been known to cause issues, so that might be something in play. &lt;/p&gt;

&lt;p&gt;Second, I noticed that you created the MetaScannerListener class to allow for easy scanning of the meta regions to find HRegionInfos of meta regions that host the regions we&apos;re trying to merge. Is there a reason you chose not to use the getClosestRowBefore facility that is commonly used to locate the appropriate meta regions? I&apos;m not sure that this is a problem yet, but it is my suspicion this could be related. Additionally, I feel like there&apos;s a chance that the implementation used in Merge.java takes the first region info that could contain the row we&apos;re looking for instead of the last, which is what we actually want. I don&apos;t have data to back that up yet, though.&lt;/p&gt;

&lt;p&gt;What is odd to me is that when I added some code to print out the contents, the row we&apos;re looking for really isn&apos;t in the region&apos;s data. So it&apos;s not just a question of not finding the data we&apos;re looking for, it&apos;s that we&apos;re looking for the wrong data up front. &lt;/p&gt;

&lt;p&gt;The fact that this problem comes into play only when there are more than one store file makes me nervous. We&apos;ve seen the multi-storefile problem bite us in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-524&quot; title=&quot;Problems with getFull&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-524&quot;&gt;&lt;del&gt;HBASE-524&lt;/del&gt;&lt;/a&gt; and others. Could it be that scanners are not safe with multiple store files? Compaction sorts out all these problems by merging all the values and simplifying the scan.&lt;/p&gt;</comment>
                            <comment id="12583384" author="jimk" created="Sun, 30 Mar 2008 00:15:06 +0000"  >&lt;p&gt;Is this the same issue as &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-29&quot; title=&quot;HStore#get and HStore#getFull may not return expected values by timestamp when there is more than one MapFile&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-29&quot;&gt;&lt;del&gt;HBASE-29&lt;/del&gt;&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="12584306" author="jimk" created="Tue, 1 Apr 2008 20:55:06 +0000"  >&lt;p&gt;Moving to 0.1.2&lt;/p&gt;</comment>
                            <comment id="12587044" author="stack" created="Wed, 9 Apr 2008 04:11:19 +0000"  >&lt;p&gt;There is a hole in our memcache.  On flush, the flusher asks the Memcache for the snapshot to persist.  Memcache hands it over and then zeros out the snapshot.  Flusher goes to work but any subsequent gets will not see what was in snapshot until flusher finishes.  Scanners taken out after the flush starts will never see the edits.&lt;/p&gt;</comment>
                            <comment id="12587052" author="stack" created="Wed, 9 Apr 2008 05:04:24 +0000"  >&lt;p&gt;Previous to r596835, 2007-11-20 13:53:30 -0800, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-316&quot; title=&quot;[hbase] Increase parallelism in region servers&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-316&quot;&gt;&lt;del&gt;HADOOP-2139&lt;/del&gt;&lt;/a&gt; (phase 1) Increase parallelism in region servers, we used keep an history array of snapshots.  Scanners would travel over the history array.  Flushers when done would remove a snapshot from history (but because scanners had made a shallow copy of the history array, they&apos;d still have hold of the history elements till scanning was done).  Let me bring back some of this &amp;#8211; at least the part where flusher tells memcache it completed the flush and the memcache keeping around &apos;beingFlushed&apos; snapshot that we check when getting, and taking out scanners (will try to reduce on some of the copying too).&lt;/p&gt;</comment>
                            <comment id="12587716" author="stack" created="Thu, 10 Apr 2008 17:33:10 +0000"  >&lt;p&gt;I was going to reinstate history array and then have the memcache scanner open iterators on all history array members.  Flusher would clear the tail of the array on occasion.  Scanners would still have hold references to history array elements so it could keep going.&lt;/p&gt;

&lt;p&gt;Bryan D suggested that we just not open iterators at all.  He suggested that we just refactor Memcache Scanners so they use the get and getFull Memcache primitives.   We&apos;d add a getNext kind of thing that would do like MapFile.getClosest only it would only return the next, not the asked-for row OR the next closest but the next closest only.&lt;/p&gt;

&lt;p&gt;Reviewing, it looks like this approach would simplify things, use less memory but be slower &amp;#8211; but because the slowness is all up in memory, it won&apos;t show in general scan numbers.  I&apos;m having a go at this latter suggestion.  Patch soon.&lt;/p&gt;</comment>
                            <comment id="12588662" author="stack" created="Mon, 14 Apr 2008 17:55:26 +0000"  >&lt;p&gt;Make blocker for 0.1.2.&lt;/p&gt;</comment>
                            <comment id="12588681" author="stack" created="Mon, 14 Apr 2008 18:28:25 +0000"  >&lt;p&gt;Below is commit message.  Passes all tests locally.&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
M  src/test/org/apache/hadoop/hbase/regionserver/TestHMemcache.java
    Added calling of &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; clearSnapshot method to runSnapshot method.
    (testGetNextRow): Added. 
M  src/java/org/apache/hadoop/hbase/regionserver/Memcache.java
    Refactor memcache scanner so rather than hold open iterators against
    memcache, snapshot and history, instead we just &lt;span class=&quot;code-keyword&quot;&gt;do&lt;/span&gt; a &apos;get&apos; on each
    scanner &apos;next&apos;  (A &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; getNextRow returns the row that follows the
    &apos;current&apos; one -- the result of last call to &apos;next&apos;).  In past, we
    gave &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt; impression that scanners gave the state of the data at
    time scanner was taken out. Fact was that scanners are per region
    and we scan across the table a region at a time -- so each scanner
    would be taken out at different times.  With &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; patch, rather, we
    embrace the fact that &apos;next&apos; gives you state of data at time &apos;next&apos;
    was called; regardless of when scan started.
    Added javadoc and comments.
    (Constructor): Removed. It did nothing.
    (createSortedMap): Added utility.
    (snapshot): Return the snapshot.  Must now be answered by &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt;
    clearSnapshot method.  Also added getSnapshot &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; tests.
    (getLowest, getNextRow): Added.
    (MemcacheScanner): Refactored.  Got rid of running list of iterators.
    Got rid of copying current state of snapshot into a scanner backing map.
    Changed HAbstractScanner so we don&apos;t have to implement getFirstRow and
    getNext and closeSubscanner any more.
M  src/java/org/apache/hadoop/hbase/regionserver/HStore.java
    Add and edit of comments.  Added call to clearSnapshot when done flushing.
M  src/java/org/apache/hadoop/hbase/regionserver/StoreFileScanner.java
    Moved code that used to be in scanner superclass here since its particular
    to &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; implementation, no longer shared by memcache.
M  src/java/org/apache/hadoop/hbase/regionserver/HAbstractScanner.java
    Moved  findFirstRow, closeSubScanner, getNext up into StoreFileScanner
    and out of here (as well as the particular next implementation).
M  src/java/org/apache/hadoop/hbase/regionserver/InternalScanner.java
    Javadoc edit.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12588876" author="bryanduxbury" created="Tue, 15 Apr 2008 02:15:24 +0000"  >&lt;ul&gt;
	&lt;li&gt;If shapshot() is called and there&apos;s still entries in the snapshot, I think I&apos;d prefer an exception right then instead of the last snapshot. That way we won&apos;t silently forget to call clearSnapshot anywhere.&lt;/li&gt;
	&lt;li&gt;Why should caller of clearSnapshot provide the snapshot back in? Afraid someone will try and clear the wrong snapshot somehow?&lt;/li&gt;
	&lt;li&gt;Is this worth an edit? Moreover, do we need the explicit &quot;this.&quot; all over the place? (This might be a general stylistic question.)&lt;br/&gt;
{{
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;}}
-      memcache.put(key, value);
-      
+      &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.memcache.put(key, value);
{{&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;}}&lt;/p&gt;&lt;/li&gt;
	&lt;li&gt;There&apos;s a note in getNextRow that it&apos;s not suppressing deletes. It should, shouldn&apos;t it? Otherwise we risk saying the wrong row is the next one. Could create some confusion.&lt;/li&gt;
	&lt;li&gt;What&apos;s this do?&lt;br/&gt;
{{
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;}}
-              found_key.getTimestamp());
+              &lt;span class=&quot;code-object&quot;&gt;Long&lt;/span&gt;.valueOf(found_key.getTimestamp()));
{{&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;}}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;... more to come. &lt;/p&gt;</comment>
                            <comment id="12588880" author="stack" created="Tue, 15 Apr 2008 02:51:27 +0000"  >&lt;p&gt;On first comment, its snapshot is going to be called again because flush is going to fail; the way things are currently, we log warning that we&apos;re being recalled but we go again to try and flush what was in snapshot.  Your suggestion would make we&apos;d throw an exception and then this region would dead in the water, at least as far as flushing is concerned.&lt;/p&gt;

&lt;p&gt;On clearSnapshot, yeah, just a precaution.  Unlikely but if it happened, we&apos;d want it logged.&lt;/p&gt;

&lt;p&gt;Adding the &apos;this&apos; is minor potatoes.  Yes, its stylistic.  I like them &amp;#8211; easy way telling data members from locals &amp;#8211; but I can see you have been actively removing them.&lt;/p&gt;

&lt;p&gt;Onk getNextRow not suppressing deletes, yes it should. I was thinking we&apos;d let the result out and then they&apos;d be merged higher up but thats wrong behavior here &amp;#8211; scope is memcache scanner only.&lt;/p&gt;

&lt;p&gt;On Long.valueOf, gives chance of internal Long cache returning a ready-made long &amp;#8211; if it exists (also suppresses an eclipse warning to the effect that the long is being auto-boxed up into a Long object).&lt;/p&gt;

&lt;p&gt;Making a fix for getNextRow now...&lt;/p&gt;</comment>
                            <comment id="12588883" author="stack" created="Tue, 15 Apr 2008 03:05:52 +0000"  >&lt;p&gt;Now I remember.  getNextRow does not suppress deletes because perhaps client is interested in deletes.  In scanner case, next calls getNextRow, then does a getFull.  If row only has deletes, next calls getFull again till it gets a row with content.  I can improve the method comment before I commit &amp;#8211; unless you have other things you&apos;d like me fix?&lt;/p&gt;

&lt;p&gt;Thanks for the review.&lt;/p&gt;</comment>
                            <comment id="12588896" author="stack" created="Tue, 15 Apr 2008 04:38:45 +0000"  >&lt;p&gt;Happened on the Lars cluster a few days ago:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
2008-04-08 01:41:09,087 DEBUG org.apache.hadoop.hbase.HMaster: Received MSG_REPORT_OPEN : pdc-docs,US6933067_20050823,1207644063095 from 192.168.105.61:60020
2008-04-08 01:41:09,087 INFO org.apache.hadoop.hbase.HMaster: 192.168.105.61:60020 serving pdc-docs,US6933067_20050823,1207644063095
2008-04-08 01:41:09,088 INFO org.apache.hadoop.hbase.HMaster: regionname: pdc-docs,US6933067_20050823,1207644063095, startKey: &amp;lt;US6933067_20050823&amp;gt;, endKey: &amp;lt;US6966561_20051122&amp;gt;, encodedName: 582319641, tableDesc: {name: pdc-docs, families: {contents:={na
e: contents, max versions: 3, compression: NONE, in memory: &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;, max length: 2147483647, bloom filter: none}, language:={name: language, max versions: 3, compression: NONE, in memory: &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;, max length: 2147483647, bloom filter: none}, mimetype:={name: 
imetype, max versions: 3, compression: NONE, in memory: &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;, max length: 2147483647, bloom filter: none}}} open on 192.168.105.61:60020
2008-04-08 01:41:09,088 INFO org.apache.hadoop.hbase.HMaster: updating row pdc-docs,US6933067_20050823,1207644063095 in table .META.,,1 with startcode 1207556447704 and server 192.168.105.61:60020
2008-04-08 01:41:09,320 DEBUG org.apache.hadoop.hbase.HMaster: HMaster.metaScanner regioninfo: {regionname: pdc-docs,US6933067_20050823,1207644063095, startKey: &amp;lt;US6933067_20050823&amp;gt;, endKey: &amp;lt;US6966561_20051122&amp;gt;, encodedName: 582319641, tableDesc: {name: 
dc-docs, families: {contents:={name: contents, max versions: 3, compression: NONE, in memory: &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;, max length: 2147483647, bloom filter: none}, language:={name: language, max versions: 3, compression: NONE, in memory: &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;, max length: 2147483647, bloo
 filter: none}, mimetype:={name: mimetype, max versions: 3, compression: NONE, in memory: &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;, max length: 2147483647, bloom filter: none}}}}, server: , startCode: -1
2008-04-08 01:41:09,320 DEBUG org.apache.hadoop.hbase.HMaster: Current assignment of pdc-docs,US6933067_20050823,1207644063095 is not valid: storedInfo: &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, startCode: -1, storedInfo.startCode: -1, unassignedRegions: &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;, pendingRegions: &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
2008-04-08 01:41:11,919 INFO org.apache.hadoop.hbase.HMaster: assigning region pdc-docs,US6933067_20050823,1207644063095 to server 192.168.105.67:60020
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See how we update .META. with server and start code for 61 but the ongoing .META. scan does not see the new entry &amp;#8211; because we used to copy the current state of memcache into the scanner &amp;#8211; so it reassigns the region.&lt;/p&gt;

&lt;p&gt;A mapfile goes missing in the huddle.  I&apos;m going to blame this bug for now (two regions fighting over map files).&lt;/p&gt;</comment>
                            <comment id="12589691" author="jimk" created="Wed, 16 Apr 2008 18:48:26 +0000"  >&lt;p&gt;StoreFileScanner.next should be annotated with @Override&lt;/p&gt;

&lt;p&gt;Otherwise +1&lt;/p&gt;</comment>
                            <comment id="12589712" author="bryanduxbury" created="Wed, 16 Apr 2008 19:52:26 +0000"  >&lt;p&gt;Memcache.java&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;What&apos;s with the weird &quot;/* ... \n*/&quot; comments over the variable declarations at the top? if you&apos;re not going to use 3 lines use 1.&lt;/li&gt;
	&lt;li&gt;createSortedMap should be createSyncSortedMap?&lt;/li&gt;
	&lt;li&gt;I think this comment should be something like &quot;Must be followed by a call to clearSnapshot&quot;. Leave off the bit about if it&apos;s not empty, etc. Let clearSnapshot figure out what to do if it&apos;s empty.
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 +   * Must be answered by a call to {@link #clearSnapshot(SortedMap)} &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;
 +   * returned snapshot is not empty.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;
	&lt;li&gt;Rename &quot;ss&quot; parameter in clearSnapshot to something like oldSnapshot? Would be a little clearer to read at a glance.&lt;/li&gt;
	&lt;li&gt;Should get() create a list and pass it into both calls of internalGet? Would save us an object creation.&lt;/li&gt;
	&lt;li&gt;The private version of getNextRow should probably be called internalGetNextRow to follow the pattern of the rest of the methods in Memcache.&lt;/li&gt;
	&lt;li&gt;Private version of getNextRow should have a comment on the inner loop that indicates it&apos;s iterating because it needs to skip other cells of the same row.&lt;/li&gt;
	&lt;li&gt;In MemcacheScanner#next, what&apos;s the purpose of the &quot;rr&quot; variable? Should have a name that actually describes its purpose.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12589719" author="bryanduxbury" created="Wed, 16 Apr 2008 20:11:02 +0000"  >&lt;p&gt;StoreFileScanner.java&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Should the constructor have timestamp and targetCols also be final?&lt;/li&gt;
	&lt;li&gt;In next, the nested condition  starting on 116 is gigantically miserable. Maybe it should be factored out into one or more methods? It would improve readability and capture the essence of what you&apos;re trying to do.&lt;/li&gt;
&lt;/ul&gt;

</comment>
                            <comment id="12589726" author="stack" created="Wed, 16 Apr 2008 20:43:21 +0000"  >&lt;p&gt;Thanks Jim and Bryan for review.  I did all suggestions except following:&lt;/p&gt;

&lt;p&gt;&amp;gt; Rename &quot;ss&quot; parameter in clearSnapshot to something like oldSnapshot? Would be a little clearer to read at a glance.&lt;br/&gt;
Left it as it was.  oldSnapshot is not correct &amp;#8211; there is no &apos;old&apos; snapshot only the current snapshot &amp;#8211; and can&apos;t call it snapshot cos it clashes with data member.&lt;/p&gt;

&lt;p&gt;&amp;gt; Should get() create a list and pass it into both calls of internalGet? Would save us an object creation.&lt;br/&gt;
Nah.  Keep that stuff local in the method rather than have client supply it.  If it were an object of some size, then yeah.&lt;/p&gt;

&lt;p&gt;&amp;gt; The private version of getNextRow should probably be called internalGetNextRow to follow the pattern of the rest of the methods in Memcache.&lt;br/&gt;
Its the other methods that are incorrectly named w/ their internal prefix.  Marking method private should be sufficient to indicate internal-ness.&lt;/p&gt;

&lt;p&gt;&amp;gt; In next, the nested condition starting on 116 is gigantically miserable. Maybe it should be factored out into one or more methods? It would improve readability and capture the essence of what you&apos;re trying to do.&lt;br/&gt;
I&apos;m afraid to touch it.&lt;/p&gt;</comment>
                            <comment id="12589819" author="stack" created="Thu, 17 Apr 2008 03:20:52 +0000"  >&lt;p&gt;Applied to TRUNK and branch.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12385472">HBASE-29</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12389948">HBASE-483</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12380084" name="532.patch" size="39351" author="stack" created="Mon, 14 Apr 2008 18:28:25 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 23 Mar 2008 03:13:10 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>25249</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            8 years, 36 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0h7vj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>98538</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>