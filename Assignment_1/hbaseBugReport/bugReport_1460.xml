<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 18:53:41 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-1460/HBASE-1460.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-1460] Concurrent LRU Block Cache</title>
                <link>https://issues.apache.org/jira/browse/HBASE-1460</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The LRU-based block cache that will be committed in &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-1192&quot; title=&quot;LRU-style map for the block cache&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-1192&quot;&gt;&lt;del&gt;HBASE-1192&lt;/del&gt;&lt;/a&gt; is thread-safe but contains a big lock on the hash map.  Under high load, the block cache will be hit very heavily from a number of threads, so it needs to be built to handle massive concurrency.&lt;/p&gt;

&lt;p&gt;This issue aims to implement a new block cache with LRU eviction, but backed by a ConcurrentHashMap and a separate eviction thread.  Influence will be drawn from Solr&apos;s ConcurrentLRUCache, however there are major differences because solr treats all cached elements as equal size whereas we are dependent on our HeapSize interface with realistic (though approximate) heap usage.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12426754">HBASE-1460</key>
            <summary>Concurrent LRU Block Cache</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="streamy">Jonathan Gray</assignee>
                                    <reporter username="streamy">Jonathan Gray</reporter>
                        <labels>
                    </labels>
                <created>Sun, 31 May 2009 00:29:07 +0000</created>
                <updated>Sun, 13 Sep 2009 22:24:40 +0000</updated>
                            <resolved>Fri, 26 Jun 2009 22:18:55 +0000</resolved>
                                                    <fixVersion>0.20.0</fixVersion>
                                    <component>io</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>0</watches>
                                                                <comments>
                            <comment id="12714800" author="streamy" created="Sun, 31 May 2009 00:43:11 +0000"  >&lt;p&gt;My first go at &lt;tt&gt;ConcurrentLRUBlockCache&lt;/tt&gt;.&lt;/p&gt;

&lt;p&gt;Two new data structures are introduced in this patch, only one of which is used in the patch.&lt;/p&gt;

&lt;p&gt;I have added &lt;tt&gt;BoundedPriorityQueue&lt;/tt&gt; which is not being used in the block cache but I built early on thinking I might need it.  Java&apos;s PriorityQueue is unbounded, so it maintains sorted order but always adds new elements.  A bounded queue will grow until it reaches the maximum size (specified on construction) and then only adds new items that are larger than the current smallest.  Though maybe not now, this can be used for the KeyValueHeap where we really want a bounded queue not an unbounded queue.  This opens the door to some algorithmic improvements.&lt;/p&gt;

&lt;p&gt;This patch also adds &lt;tt&gt;CachedBlockQueue&lt;/tt&gt; which is also a &quot;bounded priority queue&quot; but rather than being bounded on the number of total elements, it&apos;s bounded on total heap size of the elements.  From comments:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt; 
  /**
   * Initialize a memory-bound queue that will grow until an element brings
   * total size &amp;gt;= maxSize.  From then on, only entries that are sorted larger
   * than the smallest current entry will be inserted/replaced.
   * 
   * &amp;lt;p&amp;gt;Use this when you want to find the largest elements (according to their
   * ordering, not their heap size) that consume as close to the specified
   * maxSize as possible.  Default behavior is to grow just above rather than
   * just below specified max.
   * 
   * &amp;lt;p&amp;gt;Object used in this queue must implement {@link HeapSize} as well as
   * {@link Comparable}.
   *
   * @param maxSize the target size of elements in the queue
   */
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt; 

&lt;p&gt;On to the LRU cache, this implementation contains three levels of block priority.  Single access, multiple access, and in-memory.  Single/multiple is to provide a level of scan-resistance to the cache, and in-memory is to give blocks from in-memory families a separate chunk of the cache to work with.&lt;/p&gt;

&lt;p&gt;The cache is instantiated with its total size, in bytes, and each of the three priorities are allocated a portion of that total size.  When evicting, those priorities whose blocks have grown past their allotted size will have evictions and those who have not will have no elements evicted.  However, if any of the priorities are not using their entire portion, other priorities will be allowed to grow larger to make use of the total size of the cache.  The eviction is where this logic exists.&lt;/p&gt;

&lt;p&gt;In addition to the max size, there are two other size markers:  acceptable and minimum.  They work as such:  If totalSizeInCache &amp;gt; acceptable, evict elements until totalSizeInCache &amp;lt; minimum.  The different between max and acceptable must be tweaked as such that it leaves sufficient time for the eviction process to run.&lt;/p&gt;

&lt;p&gt;Eviction happens in a separate thread, so users of this cache are never interrupted.  All used structures are from java&apos;s concurrent package so there is no synchronization within the cache except to ensure only a single eviction is processed at any given time.&lt;/p&gt;

&lt;p&gt;The two new data structures outside of the LRU in this patch are tested and include unit tests.  The LRU itself currently has no unit tests, I&apos;m working on that now, just thought I&apos;d get a patch up so others can see what I&apos;m doing here.&lt;/p&gt;

&lt;p&gt;(edit just changed comment to noformat)&lt;/p&gt;</comment>
                            <comment id="12714801" author="streamy" created="Sun, 31 May 2009 00:51:12 +0000"  >&lt;p&gt;Ah, forgot one important thing.  The BlockCache interface needs to change somehow so that when blocks are cached the LRU knows whether the blocks are from an in-memory store.&lt;/p&gt;

&lt;p&gt;Also, there exists a race condition where two threads both want to access the same uncached block.  There is enormous complexity involved with dealing with that... I&apos;d prefer to rely on hdfs or hfile code being relatively quick on duplicated fetches... would seem we&apos;d have OS caching and such to help with hdfs reads.  The attached LRU cache will swap in the new ByteBuffer if you re-cache an already cached block, but assumes equivalent size (does not modify heapSize).  This can behave however we want, up for discussion.&lt;/p&gt;</comment>
                            <comment id="12714836" author="ryanobjc" created="Sun, 31 May 2009 08:52:55 +0000"  >&lt;p&gt;HFile synchronizes block retrieval internally.  &lt;/p&gt;

&lt;p&gt;The sync is on the block index object, thus if 2 threads are looking to read the same block they will queue up on each other, one thread will do the work of loading, and the other will get the benefit from reading it from cache.  &lt;/p&gt;

&lt;p&gt;So dont worry about syncing, we wont end up with double work.&lt;/p&gt;

&lt;p&gt;I&apos;m not sure HFile has the knowledge that it&apos;s opening an &apos;in-memory column family&apos; - yet.. Obviously we&apos;ll have to fix this.&lt;/p&gt;

&lt;p&gt;Thanks for improving our data structures.&lt;/p&gt;</comment>
                            <comment id="12714932" author="streamy" created="Sun, 31 May 2009 21:56:32 +0000"  >&lt;p&gt;That is excellent news re: external synchronization on the block index.&lt;/p&gt;

&lt;p&gt;Yeah, I&apos;m not sure how we weave in-memory into the system (really just telling the cache).  It seems preferable to keep the cache as dumb as possible (all information passed in to it rather than it knowing anything about the schema or stores).&lt;/p&gt;

&lt;p&gt;I&apos;m working on unit tests for this now.  After I&apos;ve got it tested we can decide on how to extend the interface, for now I&apos;m just adding one extra method:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;public void cacheBlock(String blockName, ByteBuffer buf, boolean inMemory)&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;The existing method will remain and default to inMemory=false.&lt;/p&gt;</comment>
                            <comment id="12714944" author="stack" created="Mon, 1 Jun 2009 00:17:46 +0000"  >&lt;p&gt;CachedBlock needs a class comment as does CachedBlockQueue (Looks like the constructor comment here could serve as the class comment)... and ConcurrentLRUBlockCache&lt;/p&gt;

&lt;p&gt;Why this in CachedBlock?&lt;/p&gt;

&lt;p&gt;+  public void setBuffer(ByteBuffer buf) {^M&lt;br/&gt;
+    this.buf = buf;^M&lt;br/&gt;
+  }^M&lt;/p&gt;

&lt;p&gt;Can it not be done in constructor?&lt;/p&gt;

&lt;p&gt;That align method looks good, like it should be in the bytes or heapsize classes?&lt;/p&gt;

&lt;p&gt;When would this be used?&lt;/p&gt;

&lt;p&gt;+  public CachedBlock [] get() {^M&lt;/p&gt;

&lt;p&gt;Should we remove LRUBlockCache and just rename this ConcurrentLRUBlockCache as LRUBlockCache?  I don&apos;t see any point in our keeping up two caches.&lt;/p&gt;

&lt;p&gt;Remove the below rather than comment out I&apos;d say:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+^M
+&lt;span class=&quot;code-comment&quot;&gt;///**^M
&lt;/span&gt;+&lt;span class=&quot;code-comment&quot;&gt;//* Constructor.^M
&lt;/span&gt;+&lt;span class=&quot;code-comment&quot;&gt;//* @param maxBytes maximum bytes &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt; cache can hold^M
&lt;/span&gt;+&lt;span class=&quot;code-comment&quot;&gt;//* @param conf hbase configuration^M
&lt;/span&gt;+&lt;span class=&quot;code-comment&quot;&gt;//*/^M&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You added a test!!!!  Two of them!!&lt;/p&gt;

&lt;p&gt;Patch looks great.&lt;/p&gt;

&lt;p&gt;Here are comments carried over from 1192 that were ignored (smile):&lt;/p&gt;

&lt;p&gt;+ Can we make block cache size be percentage of heap rather than hard number?  I suppose it means cache needs to be able to grow as heap grows.&lt;/p&gt;</comment>
                            <comment id="12714945" author="stack" created="Mon, 1 Jun 2009 00:23:57 +0000"  >&lt;p&gt;I think the bulk of the &apos;30/May/09 05:43 PM&apos; comment should go into class comment or into the hfile package-info javadoc.  Its good stuff on implementation.  Belongs in code rather than buried here in JIRA.&lt;/p&gt;

&lt;p&gt;I wonder if the eviction thread will be able to keep up?  We can test and see.&lt;/p&gt;</comment>
                            <comment id="12714989" author="streamy" created="Mon, 1 Jun 2009 06:16:38 +0000"  >&lt;p&gt;Thanks for review stack.&lt;/p&gt;

&lt;p&gt;Posting new patch in a second.  To answer your questions:&lt;/p&gt;

&lt;ul class=&quot;alternate&quot; type=&quot;square&quot;&gt;
	&lt;li&gt;Class comments added&lt;/li&gt;
	&lt;li&gt;setBuffer is currently used when an already cached block is cached again.  behavior is defined in javadocs.  its assumed this will never happen though.&lt;/li&gt;
	&lt;li&gt;align moved to Bytes class and unit test added!&lt;/li&gt;
	&lt;li&gt;the get() method in the queue is used in the eviction algorithm, could actually use an iterator instead would keep us from doing extra work in the queue&lt;/li&gt;
	&lt;li&gt;yes, should just name it LRU just separate because i&apos;ve not had a trunk with the recently committed one yet&lt;/li&gt;
	&lt;li&gt;comments removed (was keeping that around because i had to rework some of it into the new constructor)&lt;/li&gt;
	&lt;li&gt;new patch includes a growing unit test for the cache.  i&apos;m planning on adding one or two more methods but there are three tests which cover almost all functionality and it passes.  I was seeing some failures on the third test, but then it went away with seemingly no change.  I suspect there might be a race condition in the calling of the eviction thread.  The call to the thread is heavily influenced by the solr implementation, dig in there if you could.&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="12714996" author="streamy" created="Mon, 1 Jun 2009 06:40:51 +0000"  >&lt;p&gt;Unit tested and so far it works as advertised.  A couple more unit tests still needed to get full coverage.&lt;/p&gt;</comment>
                            <comment id="12715230" author="stack" created="Mon, 1 Jun 2009 20:07:21 +0000"  >&lt;p&gt;.bq setBuffer is currently used when an already cached block is cached again. behavior is defined in javadocs. its assumed this will never happen though.&lt;/p&gt;

&lt;p&gt;I don&apos;t get above.  If it should never happen, lets throw assert if it ever does?  Looking here:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; void cacheBlock(&lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; blockName, ByteBuffer buf, &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; inMemory) {
+    CachedBlock cb = map.get(blockName);
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(cb != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      cb.setBuffer(buf);
+      &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt;;
+    }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This seems odd.  Either lock is cached or not?  If cached, why we doing setBuffer?&lt;/p&gt;

&lt;p&gt;ConcurrentLRUBlockCacheTest is code you don&apos;t want run as part of unit tests?  Is that why the Test on the end?  This class needs a class comment saying what its for?  Same for CachedBlockQueueTest.&lt;/p&gt;

&lt;p&gt;Great tests by the way.&lt;/p&gt;

&lt;p&gt;This is not always going to work:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-comment&quot;&gt;// A single eviction run should have occurred
&lt;/span&gt;+    assertEquals(cache.getEvictionCount(), 1);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Worse, I bet it&apos;ll work on everyones desktop but not up on solaris hudson.  Can it be changed to not be time based?&lt;/p&gt;

&lt;p&gt;These could be final:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;String&lt;/span&gt; blockName;
+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;long&lt;/span&gt; size;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;CachedBlock could do with a bit of javadoc.&lt;/p&gt;

&lt;p&gt;This could be final:&lt;/p&gt;

&lt;p&gt;+  private EvictionThread evictionThread;&lt;/p&gt;

&lt;p&gt;Why this:&lt;/p&gt;

&lt;p&gt;+      evictionInProgress = true;&lt;/p&gt;

&lt;p&gt;...when you have this:&lt;/p&gt;

&lt;p&gt;+    if(!evictionLock.tryLock()) return;&lt;/p&gt;

&lt;p&gt;Can your stats be hooked up to metrics?  As Ryan did in first commit of cache?&lt;/p&gt;

&lt;p&gt;Otherwise patch looks good to me.  Committing, would I remove the current LRU?&lt;/p&gt;


</comment>
                            <comment id="12723755" author="streamy" created="Wed, 24 Jun 2009 21:40:48 +0000"  >&lt;p&gt;Addresses all issues from last comment, stack.&lt;/p&gt;

&lt;p&gt;Renamed things to be proper.  Replaces LruBlockCache instead of adding a new class.  Added more javadocs, integrated with metrics, etc.&lt;/p&gt;

&lt;p&gt;Regarding the timing issue in the tests, it will take a bit of a rework so that the eviction thread &quot;reports&quot; back when it&apos;s done or some such thing.  Rather complex.  I&apos;ve changed things around a bit so that I can disable the thread and run them from the context of the test rather than in the background thread.  So the tests that are testing the evictions themselves, heap size, etc.. will not be tied to any timing issues.  However, the issue there is we aren&apos;t testing the operation of the background thread anymore.  So I added a single test that just checks if the background thread works (it contains the same kind of timing issue).  However, in this case I really don&apos;t think we&apos;ll have a problem on hudson, the eviction is very fast and is executed directly.&lt;/p&gt;

&lt;p&gt;I also added a scheduled thread inside that outputs statistics on a fixed period.  It&apos;s really just in there for now while I do some heavy debugging, can be taken out before commit (or left in if people think it&apos;s useful, probably a better way to do it though).&lt;/p&gt;

&lt;p&gt;This breaks erik&apos;s new TestHeapSize.  Need to talk to him tomorrow about how we get that working.  The cache heap size that it reports includes ALL overhead not actually part of the blocks (the pre-allocated Map, it&apos;s entries, etc).  TestLruBlockCache does a bunch of validation of heapSize() reporting, but is more to ensure it&apos;s tracking block sizes rather than verifying our static overheads.&lt;/p&gt;

&lt;p&gt;Not ready for commit.  I want to add a few more tests and do some load testing.  Will report more tomorrow.&lt;/p&gt;</comment>
                            <comment id="12723778" author="streamy" created="Wed, 24 Jun 2009 22:33:18 +0000"  >&lt;p&gt;Came across this interesting project:  &lt;a href=&quot;http://code.google.com/p/concurrentlinkedhashmap/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://code.google.com/p/concurrentlinkedhashmap/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Their &quot;old algorithm&quot; is much like this one.  The new algoirthm looks very cool but is not production ready yet.&lt;/p&gt;</comment>
                            <comment id="12723780" author="streamy" created="Wed, 24 Jun 2009 22:34:25 +0000"  >&lt;p&gt;Okay the algorithms i&apos;m using in our version are not actually the same as their old algorithm.  In any case, should stay tuned to their new algorithm.&lt;/p&gt;</comment>
                            <comment id="12724706" author="streamy" created="Fri, 26 Jun 2009 20:51:32 +0000"  >&lt;p&gt;Cleans up some of the code.&lt;/p&gt;

&lt;p&gt;Adds two more tests, one which very fully tests eviction of all three priorities.  The other is to test &quot;scan resistance&quot; and also that balanced eviction happens across multiple buckets.&lt;/p&gt;

&lt;p&gt;I changed the detailed constructor from taking the actual sizes of the different things, to taking float factors.  Those factors are stored in the class so everything is fully dynamic.&lt;/p&gt;</comment>
                            <comment id="12724712" author="streamy" created="Fri, 26 Jun 2009 21:04:54 +0000"  >&lt;p&gt;Adds another unit test for resizing the cache.  Passes!  All tests are passing, fairly confident in the correctness of the eviction algorithm now.&lt;/p&gt;

&lt;p&gt;Also adds a bit more logging and timing for evictions.&lt;/p&gt;</comment>
                            <comment id="12724735" author="stack" created="Fri, 26 Jun 2009 22:04:06 +0000"  >&lt;p&gt;Changed sizing to be percentage of max heap size; i.e. I changed the meaning of this configuration: hfile.block.cache.size.&lt;/p&gt;

&lt;p&gt;Added print out when LRU initialized:&lt;/p&gt;

&lt;p&gt;2009-06-26 14:57:53,366 INFO org.apache.hadoop.hbase.regionserver.StoreFile: Allocating LruBlockCache with maximum size 199.0m&lt;/p&gt;

&lt;p&gt;Running tests now.  Patch looks good.  If tests pass, will commit since we need to burn this puppy in before release.&lt;/p&gt;</comment>
                            <comment id="12724740" author="stack" created="Fri, 26 Jun 2009 22:18:55 +0000"  >&lt;p&gt;Thanks for the patch Jon.&lt;/p&gt;</comment>
                            <comment id="12724772" author="stack" created="Sat, 27 Jun 2009 00:40:19 +0000"  >&lt;p&gt;Gave stats and eviction threads names and made them daemon threads.&lt;/p&gt;</comment>
                            <comment id="12724976" author="larsgeorge" created="Sun, 28 Jun 2009 17:46:28 +0000"  >&lt;p&gt;Hmmm, no offense guys... but&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
javadoc:
  [javadoc] Generating Javadoc
  [javadoc] Javadoc execution
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.client...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.client.transactional...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.filter...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.io...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.io.hfile...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.ipc...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.mapred...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.mapreduce...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.master...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.master.metrics...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.metrics...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.metrics.file...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.regionserver...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.regionserver.metrics...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.regionserver.transactional...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.&lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.&lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;.descriptors...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.&lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;.exception...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.&lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;.filter...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.&lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;.parser...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.&lt;span class=&quot;code-keyword&quot;&gt;rest&lt;/span&gt;.serializer...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.thrift...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.thrift.generated...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.util...
  [javadoc] Loading source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.zookeeper...
  [javadoc] Constructing Javadoc information...
  [javadoc] javadoc: warning - No source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.client.transactional
  [javadoc] javadoc: warning - No source files &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;package&lt;/span&gt; org.apache.hadoop.hbase.regionserver.transactional
  [javadoc] Standard Doclet version 1.6.0_11
  [javadoc] Building tree &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; all the packages and classes...
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\io\hfile\LruBlockCache.java:76: warning - Tag @link: reference not found: cacheBlock
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\io\hfile\LruBlockCache.java:76: warning - Tag @link: reference not found: getBlock
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\regionserver\HLog.java:562: warning - Tag @link: can&apos;t find COMPLETE_CACHEFLUSH in org.apache.hadoop.hbase.HConstants
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\regionserver\HLog.java:498: warning - @&lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; tag has no arguments.
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\regionserver\HLog.java:483: warning - @param argument &lt;span class=&quot;code-quote&quot;&gt;&quot;row&quot;&lt;/span&gt; is not a parameter name.
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\regionserver\HLog.java:512: warning - @param argument &lt;span class=&quot;code-quote&quot;&gt;&quot;row&quot;&lt;/span&gt; is not a parameter name.
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\regionserver\HLog.java:512: warning - @param argument &lt;span class=&quot;code-quote&quot;&gt;&quot;now&quot;&lt;/span&gt; is not a parameter name.
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\io\hfile\LruBlockCache.java:76: warning - Tag @link: reference not found: cacheBlock
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\io\hfile\LruBlockCache.java:76: warning - Tag @link: reference not found: getBlock
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\io\hfile\LruBlockCache.java:76: warning - Tag @link: reference not found: cacheBlock
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\io\hfile\LruBlockCache.java:76: warning - Tag @link: reference not found: getBlock
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\io\hfile\LruBlockCache.java:76: warning - Tag @link: reference not found: cacheBlock
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\io\hfile\LruBlockCache.java:76: warning - Tag @link: reference not found: getBlock
  [javadoc] Building index &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; all the packages and classes...
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\io\hfile\LruBlockCache.java:76: warning - Tag @link: reference not found: cacheBlock
  [javadoc] C:\workspace\hbase-trunk\src\java\org\apache\hadoop\hbase\io\hfile\LruBlockCache.java:76: warning - Tag @link: reference not found: getBlock
  [javadoc] Building index &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; all classes...
  [javadoc] Generating C:\workspace\hbase-trunk\build\docs\api\stylesheet.css...
  [javadoc] 17 warnings
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="12725011" author="stack" created="Sun, 28 Jun 2009 23:23:26 +0000"  >&lt;p&gt;Thanks for pointing out our sloppyness Lars.  Fixed.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12415531">HBASE-1218</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12409486" name="HBASE-1460-v1.patch" size="36220" author="streamy" created="Sun, 31 May 2009 00:43:11 +0000"/>
                            <attachment id="12409538" name="HBASE-1460-v2.patch" size="44637" author="streamy" created="Mon, 1 Jun 2009 06:40:51 +0000"/>
                            <attachment id="12411712" name="HBASE-1460-v3.patch" size="81291" author="streamy" created="Wed, 24 Jun 2009 21:40:48 +0000"/>
                            <attachment id="12411957" name="HBASE-1460-v4.patch" size="89189" author="streamy" created="Fri, 26 Jun 2009 20:51:32 +0000"/>
                            <attachment id="12411958" name="HBASE-1460-v5.patch" size="91793" author="streamy" created="Fri, 26 Jun 2009 21:04:54 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>5.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 31 May 2009 08:52:55 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>32153</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10342"><![CDATA[Incompatible change]]></customfieldvalue>
    <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            7 years, 25 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hddz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>99431</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310192" key="com.atlassian.jira.plugin.system.customfieldtypes:textarea">
                        <customfieldname>Release Note</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>hfile.block.cache.size is not a percentage of total heap rather than absolute number</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                    <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>