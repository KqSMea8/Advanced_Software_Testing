<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:19:00 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-4448/HBASE-4448.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-4448] HBaseTestingUtilityFactory - pattern for re-using HBaseTestingUtility instances across unit tests</title>
                <link>https://issues.apache.org/jira/browse/HBASE-4448</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Setting up and tearing down HBaseTestingUtility instances in unit tests is very expensive.  On my MacBook it takes about 10 seconds to set up a MiniCluster, and 7 seconds to tear it down.  When multiplied by the number of test classes that use this facility, that&apos;s a lot of time in the build.&lt;/p&gt;

&lt;p&gt;This factory assumes that the JVM is being re-used across test classes in the build, otherwise this pattern won&apos;t work. &lt;/p&gt;

&lt;p&gt;I don&apos;t think this is appropriate for every use, but I think it can be applicable in a great many cases - especially where developers just want a simple MiniCluster with 1 slave.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12523703">HBASE-4448</key>
            <summary>HBaseTestingUtilityFactory - pattern for re-using HBaseTestingUtility instances across unit tests</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="dmeil">Doug Meil</assignee>
                                    <reporter username="dmeil">Doug Meil</reporter>
                        <labels>
                    </labels>
                <created>Tue, 20 Sep 2011 12:32:41 +0000</created>
                <updated>Thu, 1 Mar 2012 23:24:04 +0000</updated>
                            <resolved>Thu, 1 Mar 2012 23:24:04 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                <comments>
                            <comment id="13108735" author="dmeil" created="Tue, 20 Sep 2011 14:18:22 +0000"  >&lt;p&gt;Attached a prototype of HBaseTestingUtilityFactory.  This is not ready for prime time yet, but I&apos;d like to solicit comments for the general idea.  &lt;/p&gt;

&lt;p&gt;Noted issues:  there needs to be a configurable &quot;wait&quot; period when the ref-counts get to zero.  That should be set from the build, but how?  System property?  The reason is that while this pattern can be useful for many cases, it won&apos;t be suitable for all.  Therefore, there could be periods of non-use when another test is running, and we don&apos;t want to be too aggressive in tearing down the instances otherwise we&apos;ll be back where we started.&lt;/p&gt;</comment>
                            <comment id="13108786" author="jesse_yates" created="Tue, 20 Sep 2011 15:43:06 +0000"  >&lt;p&gt;Initial thoughts: in general, I&apos;m digging the idea (but I&apos;d +1ed it before).&lt;/p&gt;

&lt;p&gt;Concerns: &lt;br/&gt;
Major:&lt;br/&gt;
The timeout removal could be a pretty dangerous thing to do. In the general case, it might not be too bad since it seems like a node should request a cluster and use it in a timeframe. But what about long running tests? It would be nice to modify the mini cluster (or maybe subclass it into a TestingUtilMiniCluster) that actually tracks recent usage (last access time?) and then use that as the &apos;timeout&apos; number for cleanup.&lt;/p&gt;

&lt;p&gt;Minor:&lt;br/&gt;
Going to need to make sure we tie back requests for a certain size cluster with the type (right now hard coding 1)&lt;/p&gt;

&lt;p&gt;Besides those, I&apos;m liking the patch Doug!&lt;/p&gt;
</comment>
                            <comment id="13108895" author="dmeil" created="Tue, 20 Sep 2011 18:20:04 +0000"  >&lt;p&gt;The timeout behavior was intended to be &quot;since the usage counts went to zero&quot;, so I think we&apos;re generally talking about the same idea.  How to pass this variable from the build?  System property?&lt;/p&gt;</comment>
                            <comment id="13108908" author="jesse_yates" created="Tue, 20 Sep 2011 18:28:05 +0000"  >&lt;p&gt;I was more worried about if people don&apos;t clean up their tests properly and leave the cluster hanging around. But I guess we can just assume that they do it right?&lt;/p&gt;

&lt;p&gt;We could make it a system property (maybe settable via maven on run) or do it with a special test-config.xml&lt;/p&gt;</comment>
                            <comment id="13108978" author="dmeil" created="Tue, 20 Sep 2011 20:27:49 +0000"  >&lt;p&gt;The exposure of not stopping the miniclusters exists now.  You need to explicitly stop it, so it&apos;s not really any different this way.  System property works for me.&lt;/p&gt;</comment>
                            <comment id="13109022" author="stack" created="Tue, 20 Sep 2011 22:03:41 +0000"  >&lt;p&gt;How would we pass this factory for test to test?&lt;/p&gt;

&lt;p&gt;How is this different from a fat class of tests that has a @Before that spins up the cluster and then an @After to shut it down as TestAdmin or TestFromClientSide do currently?&lt;/p&gt;</comment>
                            <comment id="13109075" author="jesse_yates" created="Tue, 20 Sep 2011 23:14:10 +0000"  >&lt;p&gt;I think that these tests would be run all in the same jvm (non-forked mode) - that way they can all reuse the same static testing util.&lt;/p&gt;

&lt;p&gt;Running it in forked mode really wouldn&apos;t help with this issue. How sure how running in parallel is actually managed - I&apos;m assuming its all out of the same jvm, just on different threads. Using the cluster the proposed way would again be a win.&lt;/p&gt;</comment>
                            <comment id="13109103" author="dmeil" created="Tue, 20 Sep 2011 23:52:48 +0000"  >&lt;p&gt;As Jesse said, we have to reuse JVMs for this to work.  Rather than doing this...&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @BeforeClass
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void setUpBeforeClass() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
    TEST_UTIL.startMiniCluster(1);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;... you would do something like this...&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  @BeforeClass
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void setUpBeforeClass() &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
     TEST_UTIL = HBaseTestingUtilityFactory.get().getMiniCluster(1);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;... and it would already be started.&lt;/p&gt;

&lt;p&gt;And rather than calling an explicit shutdown on the HBaseTestingUtility instance, you&apos;d call a &quot;return&quot; on the factory...&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
HBaseTestingUtilityFactory.get().returnMiniCluster(instance);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;... where it would also blow away and tables that have been created so it&apos;s clean for the next person that uses it.&lt;/p&gt;</comment>
                            <comment id="13109110" author="dmeil" created="Wed, 21 Sep 2011 00:01:57 +0000"  >&lt;p&gt;I&apos;m also working on some analysis to show the different uses of HBaseTestingUtility - not all the tests use it the same way.  Some do 1 or 3 slave MiniClusters, and some do ZkClusters.&lt;/p&gt;

</comment>
                            <comment id="13112289" author="dmeil" created="Thu, 22 Sep 2011 02:04:03 +0000"  >&lt;p&gt;Still working on this... it&apos;s taking me a bit longer than I thought.&lt;/p&gt;</comment>
                            <comment id="13112859" author="dmeil" created="Thu, 22 Sep 2011 19:48:49 +0000"  >&lt;p&gt;Attaching spreadsheet documenting HBaseTestingUtility configurations by package&lt;/p&gt;</comment>
                            <comment id="13112869" author="jesse_yates" created="Thu, 22 Sep 2011 20:13:45 +0000"  >&lt;p&gt;Doug, had the same thoughts you did on whether or not all the classes really need to have all the region servers, etc. &lt;/p&gt;

&lt;p&gt;With the reusability, in some cases I have some doubts about what is actually practical. In some cases (eg. coproc), they are doing a bunch of configuration on the table, which has implications on whether or not the table/cluster can be immediately/concurrently reused.&lt;/p&gt;

&lt;p&gt;There are a couple things we could do to make usage easier.&lt;/p&gt;

&lt;p&gt;(1) A lot of times people are setting the configuration statically, so we want to remove that if people are going to reuse it (though different jvms solves that for the moment).&lt;/p&gt;

&lt;p&gt;(2) Create unique clusters - these would not be cached and really good for situations where people are injecting faults, etc.&lt;/p&gt;

&lt;p&gt;(3) Add some modularization for table configuration etc - a lot seems to be setting up properties for the db, but really making properties that you are just testing on some table. This may be a little pie in the sky...&lt;/p&gt;

&lt;p&gt;(4) Reset properties method - so are allowed to make changes to a table when you use it, but then when done/released, we just reset the properties/config.&lt;/p&gt;</comment>
                            <comment id="13112884" author="dmeil" created="Thu, 22 Sep 2011 20:38:11 +0000"  >&lt;p&gt;I agree that some tests will need special configuration for special situations.&lt;/p&gt;

&lt;p&gt;But based on the sheet, I think there is still a benefit in going this route.  There are still 39 MiniCluster instances that could be shared between tests, and that&apos;s not even considering MiniZk instances which could also be shared.  That&apos;s roughly 10 or 11 minutes of extra startup &amp;amp; teardown time right there, and we&apos;re just getting started.  &lt;/p&gt;

&lt;p&gt;I think it might be worth reviewing the tests in terms of what the tests need vs. what they were coded for, especially with Client and REST packages.  Does the REST unit test really need a MiniCluster with 3 slaves?  I would hazard a guess that there was some copy-paste going on.&lt;/p&gt;

&lt;p&gt;There isn&apos;t any single thing that can fix the build, but I still think this approach seems like a reasonable start.&lt;/p&gt;</comment>
                            <comment id="13112889" author="jesse_yates" created="Thu, 22 Sep 2011 20:43:32 +0000"  >&lt;p&gt;Definitely agree that doing this still makes sense. &lt;/p&gt;

&lt;p&gt;I was just thinking about adding some functionality to help people testing down the road.&lt;/p&gt;</comment>
                            <comment id="13112891" author="dmeil" created="Thu, 22 Sep 2011 20:46:47 +0000"  >&lt;p&gt;Agreed.&lt;/p&gt;
</comment>
                            <comment id="13113580" author="dmeil" created="Fri, 23 Sep 2011 17:24:44 +0000"  >&lt;p&gt;Uploading updated spreadsheet to describe HBaseClusterTestCase usage&lt;/p&gt;</comment>
                            <comment id="13114364" author="dmeil" created="Sun, 25 Sep 2011 20:59:43 +0000"  >&lt;p&gt;Submitting patch for HBaseTestingUtilityFactory.  Also, I changed one existing unit test to use this to show example usage.&lt;/p&gt;</comment>
                            <comment id="13114446" author="jesse_yates" created="Mon, 26 Sep 2011 03:45:08 +0000"  >&lt;p&gt;I&apos;ve got a couple concerns about the patch - is it already applied to trunk or can we put it up in RB? &lt;/p&gt;

&lt;p&gt;Off the bat:&lt;br/&gt;
(1) A lot of times tests set the conf on the minicluster, before starting it - this could lead to some issues when requesting the cluster. Still thinking a requestUnique with a conf would be a good addition&lt;br/&gt;
(2) If we are going to just reuse the TestingUtility, it would make sense to also also some reuse of the dfs and zk clusters.&lt;br/&gt;
(3) We probably want to check for utils that haven&apos;t been used for the given time, rather than waiting for all the possible utils to not be used.&lt;/p&gt;

&lt;p&gt;If you want, we can open up sub tickets for these issues. I would be happy to help out with any/all of the above.&lt;/p&gt;</comment>
                            <comment id="13114526" author="jesse_yates" created="Mon, 26 Sep 2011 08:21:54 +0000"  >&lt;p&gt;Not that I don&apos;t think this is good stuff Doug, I&apos;m on board with a majority of the code. It&apos;s just that I think some review/discussion on the design and implementation would be good.&lt;/p&gt;</comment>
                            <comment id="13114619" author="dmeil" created="Mon, 26 Sep 2011 12:28:58 +0000"  >&lt;p&gt;This is not applied on trunk.  No apology required!  Feedback is expected/necessary for something like this.&lt;/p&gt;

&lt;p&gt;re: #1 Per the spreadsheet, I&apos;m not sure that customized MiniClusters can be re-used.  I left those out on purpose at least for this pass to focus on the generic &quot;Mini 1, 2, 3&quot; ones.  Also, a review of anything that isn&apos;t &quot;Mini 1&quot; is required - I don&apos;t think all those REST tests need &quot;Mini 3&quot; - I think they can be &quot;Mini 1&quot;.&lt;/p&gt;

&lt;p&gt;re: #2 Re-using DFS and ZK Clusters is something that I thought could come later.  I named the existing &quot;getMiniCluster&quot; (i.e., as opposed to &apos;get()&apos;) so that the DFS and ZK clusters could be obtained later.  Probably just a follow-on ticket rather than a sub-ticket.  I&apos;d rather get the kinks out of this round first.&lt;/p&gt;

&lt;p&gt;re: #3  In terms of the waiting logic, I was trying not to over-complicate this and track last-usage-by-specific MiniCluster config.&lt;/p&gt;</comment>
                            <comment id="13115061" author="jesse_yates" created="Tue, 27 Sep 2011 00:12:41 +0000"  >&lt;p&gt;Quick synopsis:&lt;br/&gt;
re:re: #1&lt;br/&gt;
So you are thinking that people would just the TestingUtility if they need to have their own unique cluster? I guess I was thinking that there would be a gain by reusing those objects, but thinking about it, I doubt it (also thinking everything would be brokered by the Factory, but it really needn&apos;t).&lt;/p&gt;

&lt;p&gt;Also was thinking we need to do a review of mini-cluster usage on things like REST - had the same hunch when I was grepping through the tests.&lt;/p&gt;

&lt;p&gt;re:re #2&lt;br/&gt;
+1&lt;/p&gt;

&lt;p&gt;re:re #3&lt;br/&gt;
I don&apos;t think this actually runs multiple times - run() just has a try method and won&apos;t loop.&lt;br/&gt;
I&apos;m ok with making it simple right now, lets just make a note to complicate it later &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/wink.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Overall, I&apos;m ok with it, except for the looping in #3&lt;/p&gt;</comment>
                            <comment id="13115063" author="yuzhihong@gmail.com" created="Tue, 27 Sep 2011 00:12:50 +0000"  >&lt;p&gt;I haven&apos;t gone through every line of the patch.&lt;br/&gt;
Minor comment:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      i = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;(ONE);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;ONE is already an Integer, right ?&lt;/p&gt;

&lt;p&gt;I wasn&apos;t involved in the early discussion of this ticket. So I hope Jesse and Doug can reach agreement and create other tickets if needed.&lt;/p&gt;

&lt;p&gt;If improvement in running time of tests by using the patch can be shown, that would be more convincing.&lt;/p&gt;</comment>
                            <comment id="13115105" author="dmeil" created="Tue, 27 Sep 2011 01:25:08 +0000"  >&lt;p&gt;Jesse-  sounds like we&apos;re cool on #1 and #2.  Let me look at #3.&lt;/p&gt;

&lt;p&gt;Ted- performance changes were in the attached spreadsheet (and earlier in the ticket), but that won&apos;t all come with this change... this is about getting the utility in place and then the changes identified in the spreadsheet will come in later tickets.  Probably 10 minutes just for the identified changes, with more possible. &lt;/p&gt;</comment>
                            <comment id="13115115" author="yuzhihong@gmail.com" created="Tue, 27 Sep 2011 01:34:13 +0000"  >&lt;p&gt;I think the following method should be enhanced to deal with the test which uses more than one cluster whose numbers of slaves are the same:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+ &lt;span class=&quot;code-keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;synchronized&lt;/span&gt; HBaseTestingUtility getMiniClusterImpl(&lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; slaves) &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; Exception {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This can be done in another JIRA.&lt;/p&gt;</comment>
                            <comment id="13115123" author="jesse_yates" created="Tue, 27 Sep 2011 01:44:01 +0000"  >&lt;p&gt;Hmm, interesting idea Ted. Definitely worth looking into in another patch. Would definitely have to look into the performance benefits of that. Interestingly, its probably going to highly correlated to the order of tests being run (which is really test naming).&lt;/p&gt;</comment>
                            <comment id="13115435" author="dmeil" created="Tue, 27 Sep 2011 12:25:19 +0000"  >&lt;p&gt;More than one cluster in the same test?  That would have to be a replication test.  I&apos;m not sure that&apos;s going to work, I think the best-case is to re-use one cluster, and then fire-up another cluster from scratch.&lt;/p&gt;</comment>
                            <comment id="13115566" author="dmeil" created="Tue, 27 Sep 2011 15:20:21 +0000"  >&lt;p&gt;Fixed point #3.&lt;/p&gt;</comment>
                            <comment id="13115567" author="dmeil" created="Tue, 27 Sep 2011 15:20:45 +0000"  >&lt;p&gt;... with the v2 patch&lt;/p&gt;</comment>
                            <comment id="13115815" author="jesse_yates" created="Tue, 27 Sep 2011 19:06:46 +0000"  >&lt;p&gt;Comments on the latest patch:&lt;/p&gt;

&lt;p&gt;In the usage, &lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
-  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; HBaseTestingUtility TEST_UTIL = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HBaseTestingUtility();
+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; HBaseTestingUtility TEST_UTIL = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HBaseTestingUtility();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Should probably not even assign anything, since it is done in setup.&lt;/p&gt;

&lt;p&gt;Going back to Ted&apos;s comment,&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
 &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt; i = mcUsageCount.get(tu);  
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (i == &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;) {
+      i = ONE;
+    } &lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; {
+      &lt;span class=&quot;code-object&quot;&gt;int&lt;/span&gt; j = i.intValue() + 1;
+      i = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;(j);
+    }
+    mcUsageCount.put(tu, i);
+  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This seems overly complex - just use autoboxing here. Maybe we should use specific names for what ONE and ZERO mean (e.g. ONE -&amp;gt; USE_INCREMENT, ZERO -&amp;gt; UNUSED).&lt;/p&gt;

&lt;p&gt;In the UtilityCleaner,&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+     &lt;span class=&quot;code-keyword&quot;&gt;try&lt;/span&gt; {
+        &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;) {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;could lead to some issues. We just need to make sure that the thread is a daemon thread when we start.&lt;/p&gt;</comment>
                            <comment id="13115962" author="stack" created="Tue, 27 Sep 2011 21:58:03 +0000"  >&lt;p&gt;Looking at startup I see we spend &amp;gt; 1 second deploying the UIs for hdfs, stuff we never look at.  No way to turn them off.  We could do some stuff around the bootstrapping where we&apos;d just copy into place already made root and meta regions which could save a second or so.&lt;/p&gt;

&lt;p&gt;Could do this to save a second or so:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
stack-7:hbase stack$ git diff src/test/
diff --git a/src/test/resources/hbase-site.xml b/src/test/resources/hbase-site.xml
index 2a9ab29..b6ad732 100644
--- a/src/test/resources/hbase-site.xml
+++ b/src/test/resources/hbase-site.xml
@@ -23,6 +23,10 @@
 --&amp;gt;
 &amp;lt;configuration&amp;gt;
   &amp;lt;property&amp;gt;
+    &amp;lt;name&amp;gt;hbase.master.wait.on.regionservers.interval&amp;lt;/name&amp;gt;
+    &amp;lt;value&amp;gt;1000&amp;lt;/value&amp;gt;
+  &amp;lt;/property&amp;gt;
+  &amp;lt;property&amp;gt;
     &amp;lt;name&amp;gt;hbase.regionserver.msginterval&amp;lt;/name&amp;gt;
     &amp;lt;value&amp;gt;1000&amp;lt;/value&amp;gt;
     &amp;lt;description&amp;gt;Interval between messages from the RegionServer to HMaster
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But looking at this no big savings to be found in startup/shutdown.&lt;/p&gt;

&lt;p&gt;So, yeah, study of the tests themselves is way to go.  We should be more parsimonious starting/stopping clusters and do more work once we spin one up (Sorry for stating the obvious).&lt;/p&gt;

&lt;p&gt;Thanks for doing the excel spread sheet Doug.  Doesn&apos;t sound like big wins getting rid of HBaseClusterTestCase (We should get rid of it though)... though perhaps in hbase package, the case where we run 4 unit tests where we spin up the cluster each time it could help.&lt;/p&gt;</comment>
                            <comment id="13116012" author="dmeil" created="Tue, 27 Sep 2011 23:49:52 +0000"  >&lt;p&gt;Thanks Stack.  In general, do you support the HBaseTestingUtilityFactory approach, where generic MiniClusters can be re-used (where-ever possible)?&lt;/p&gt;

&lt;p&gt;I think that HBaseClusterTestCase could be refactored to use HBaseTestingUtilityFactory to re-use the MiniCluster since they are all the same config.  It&apos;s a &quot;plus&quot; but not a &quot;huge win&quot;, but still should be done.  Every little bit helps.&lt;/p&gt;</comment>
                            <comment id="13116023" author="stack" created="Wed, 28 Sep 2011 00:08:19 +0000"  >&lt;p&gt;I agree with your &quot;Every little bit helps.&quot;  (I am working on hbase-4503 after going through your excel spread sheet).  I&apos;m still going through this issue.  On the factory, I&apos;m not sure yet.  I&apos;m unclear on how it&apos;ll be passed from test to test and also how we prevent one test polluting another tests&apos;s run.  I also need to see for myself how this approach is different from the approach where we spin up the cluster at start of a suite and then do a bunch of tests as we do in TestFromClientSide and TestAdmin. &lt;/p&gt;

&lt;p&gt;Will be back with more comments.&lt;/p&gt;

&lt;p&gt;A two hour test run is killing us.  It means we only get max of 12 runs a day (and never get that many anyways)... and we have four test branches run up on hudson so the long running test suite is a progress killer (as well as a productivity killer).  Reminds me of the microsoft build.&lt;/p&gt;</comment>
                            <comment id="13116061" author="dmeil" created="Wed, 28 Sep 2011 01:29:49 +0000"  >&lt;p&gt;re:  &quot;passed from test to test&quot;&lt;/p&gt;

&lt;p&gt;This is described in the issue description:  this approach depends on JVM re-use, otherwise, it won&apos;t work.  The factory has a cache of MiniClusters based on the number of slaves, and it can be added down the road for DFS cluster or ZkCluster as needed.&lt;/p&gt;

&lt;p&gt;re:  &quot;pollution&quot;&lt;/p&gt;

&lt;p&gt;I hate pollution!  &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;There are two cases:  intra-test and inter-test.&lt;br/&gt;
Inter-test is handled via all the tables getting disabled and whacked when the minicluster is returned to the factory.  &lt;br/&gt;
Intra-test (i.e., multiple test methods in the same class) is the same as is now.  There is no automatic cleanup between test-methods in the same class even without this utility, so it&apos;s no worse.  &lt;/p&gt;
</comment>
                            <comment id="13118567" author="stack" created="Fri, 30 Sep 2011 23:25:40 +0000"  >&lt;blockquote&gt;&lt;p&gt;I think that HBaseClusterTestCase could be refactored to use HBaseTestingUtilityFactory to re-use the MiniCluster since they are all the same config.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Did as you suggested over in &apos;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4503&quot; title=&quot;Purge deprecated HBaseClusterTestCase&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4503&quot;&gt;&lt;del&gt;HBASE-4503&lt;/del&gt;&lt;/a&gt;  Purge deprecated HBaseClusterTestCase&apos;&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Thanks Stack. In general, do you support the HBaseTestingUtilityFactory approach, where generic MiniClusters can be re-used (where-ever possible)?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I haven&apos;t reviewied it yet &amp;#8211; will do that later &amp;#8211; but I&apos;m thinking I&apos;m not in favor.&lt;/p&gt;

&lt;p&gt;While playing with trying to have our tests run in parallel, I was reminded why we fork for each test.&lt;/p&gt;

&lt;p&gt;We do this so there is isolation between test runs, so less chance of a test clobbering those that run later.  Having it so the dietrus from one test run could dirty the context of the next test makes debugging test failures harder.  Reusing the cluster also implies each test cleans up after itself.  That might be too much to expect.  Forking makes it hard to use this factory.&lt;/p&gt;

&lt;p&gt;Back with more later.&lt;/p&gt;

</comment>
                            <comment id="13118664" author="stack" created="Sat, 1 Oct 2011 04:49:47 +0000"  >&lt;p&gt;I took a look at patch.  Doesn&apos;t look bad.  Jesse and Ted seems to have hit all comments I&apos;d have on the code.  In my previous comment I raise my larger concerns about the direction this is going in (Firing up the excel sheet to figure what to attack next).&lt;/p&gt;</comment>
                            <comment id="13118850" author="dmeil" created="Sat, 1 Oct 2011 17:11:00 +0000"  >&lt;p&gt;Thanks Stack.&lt;/p&gt;

&lt;p&gt;re:  &quot;Reusing the cluster also implies each test cleans up after itself.&quot;&lt;/p&gt;

&lt;p&gt;This is the situation now, though.  Test-classes do this cluster teardown in the @AfterClass annotation by tearing down the cluster.  The factory does all the table-cleanup when the cluster is returned.  Calling &apos;cluster.shutdown&apos; and returning the cluster to the factory is the same amount of code (1 line).&lt;/p&gt;

&lt;p&gt;When tests run in parallel, are we talking Test-classes, or test-methods?  It&apos;s the former, right?  And would these be in separate JVMs?  If so, I think we&apos;re ok.&lt;/p&gt;

&lt;p&gt;If there are a pool of JVMs that get used throughout a build then this can work.  If they are getting setup and torn down then it won&apos;t.&lt;/p&gt;

&lt;p&gt;By the way, I think this is exactly the right level of conversation to have on this issue (i.e., not detail code-level, but the larger build issues).&lt;/p&gt;

&lt;p&gt;I&apos;d still like to lobby for something like this because unless cluster-startup and teardown can be amazingly fast, we&apos;re leaving 10-15 minutes on the floor easy every time we run the build - and that&apos;s just for the common cluster configs.&lt;/p&gt;</comment>
                            <comment id="13118894" author="stack" created="Sat, 1 Oct 2011 19:41:55 +0000"  >&lt;blockquote&gt;&lt;p&gt;This is the situation now, though. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sort of.  We kill the JVM out from under it so all context is wiped so for sure all is cleaned up &amp;#8211; we&apos;re not completely dependent on tests being thorough about cleanup.  Even still it looks like we manage to keep around running zk ensembles which has been responsible for some of the fails up on jenkins of late.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;When tests run in parallel, are we talking Test-classes, or test-methods?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Classes and NOT in separate jvms.  I couldn&apos;t make it work.  Seems like surefire-plugin is a little buggy doing tests in parallel; its a newish feature.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If there are a pool of JVMs that get used throughout a build then this can work.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This would imply surefire-plugin modifications.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I&apos;d still like to lobby for something like this because unless cluster-startup and teardown can be amazingly fast, we&apos;re leaving 10-15 minutes on the floor easy every time we run the build - and that&apos;s just for the common cluster configs.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yeah.  Making cluster up and down faster looks like it would take a bit of work (see some notes above where a second is spent putting up hdfs web uis that are never used and another second could probably be saved if we didn&apos;t make meta and root regions each startup (I didn&apos;t look at shutdown).&lt;/p&gt;

&lt;p&gt;Can we work on aggregating our tests more so that more tests get run everytime we spin up a cluster (too many tests spin up cluster and then run one test only).  I was looking through your spreadsheet to see what to coalesce.&lt;/p&gt;</comment>
                            <comment id="13118916" author="jesse_yates" created="Sat, 1 Oct 2011 21:55:20 +0000"  >&lt;blockquote&gt;&lt;p&gt;we&apos;re not completely dependent on tests being thorough about cleanu&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think it would be completely unreasonable to expect tests to cleanup after themselves. It can be a bit of a pain but reseting static variables, etc is good practice. Thats why the cleanup method is there. If we do go through all the tests and make sure they don&apos;t leave a dirty jvm, we could switch to running tests in &apos;parallel&apos; mode, rather than forked. This gets us faster running tests - you don&apos;t teardown and create a new jvm each time and things will more easily actually run in parallel (I think on the backend it just fires up a bunch of threads in the same jvm and starts ticking off tests). It also means we get a more meaningful output from maven - not just the number of fails, but also which classes failed and the stack traces (rather than having to grep through for &amp;lt;&amp;lt;&amp;lt;FAILURE); its a minor inconvenience but nice to have.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Classes and NOT in separate jvms. I couldn&apos;t make it work. Seems like surefire-plugin is a little buggy doing tests in parallel; its a newish feature.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I don&apos;t think that maven is really good about parallelizing wrt to forked tests, but I &lt;em&gt;think&lt;/em&gt; we can also parallelize the work among several build servers (though I&apos;m not familiar with the Apache build system, so we many not have multiple servers to distribute work to). &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;Can we work on aggregating our tests more so that more tests get run everytime we spin up a cluster&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I just want to make sure we don&apos;t start slamming things together just so we cut down on creating clusters, but that their functionality actually belongs together. I would rather a slower build and more confidence in the test coverage.&lt;/p&gt;
</comment>
                            <comment id="13119526" author="stack" created="Mon, 3 Oct 2011 19:33:51 +0000"  >&lt;blockquote&gt;&lt;p&gt;...This gets us faster running tests - you don&apos;t teardown and create a new jvm each time and things will more easily actually run in parallel (I think on the backend it just fires up a bunch of threads in the same jvm and starts ticking off tests)&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Sure.  I just think this will take a bunch of effort to do this and even then, going by my experience with running the surefire in parallel, I think it&apos;ll be a while before that works properly... so I don&apos;t see this happening soon.  I was hoping for some speedups before that.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;...but I think we can also parallelize the work among several build servers &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I was hoping to speed up tests for all users, not just apache build&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I just want to make sure we don&apos;t start slamming things together just so we cut down on creating clusters....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I should have added the qualification that we aggregate together tests that properly cohere (as you say later on the above).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I would rather a slower build and more confidence in the test coverage.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Agreed&lt;/p&gt;</comment>
                            <comment id="13175373" author="ieugen" created="Fri, 23 Dec 2011 10:23:37 +0000"  >&lt;p&gt;@Jesse &lt;br/&gt;
We also use the MiniCluster with added conf settings, but they usually stay the same in one set of tests. At the end of the tests we kill the MiniCluster and restart it for another batch with different confs. &lt;/p&gt;

&lt;p&gt;I think it is quite hard to create a perfect testing utility that will avoid restarting the MiniCluster all the time. I also think that reducing the number of restarts on a per module basis is more practical. After all users shut down the MiniCluster to clean the tables for the new tests.&lt;/p&gt;

&lt;p&gt;my 2cents. &lt;/p&gt;</comment>
                            <comment id="13220480" author="dmeil" created="Thu, 1 Mar 2012 23:24:04 +0000"  >&lt;p&gt;I think the analysis was of assistence to the general cause, but I&apos;m closing this as &quot;won&apos;t fix&quot; because this particular approach won&apos;t be taken. &lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                                                <inwardlinks description="is related to">
                                        <issuelink>
            <issuekey id="12527439">HBASE-4602</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10001">
                    <name>dependent</name>
                                                                <inwardlinks description="is depended upon by">
                                        <issuelink>
            <issuekey id="12540378">GORA-89</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12495225" name="HBaseTestingUtilityFactory.java" size="6237" author="dmeil" created="Tue, 20 Sep 2011 14:15:44 +0000"/>
                            <attachment id="12496289" name="hbase_hbaseTestingUtility_uses_2011_09_22.xlsx" size="40018" author="dmeil" created="Fri, 23 Sep 2011 17:24:44 +0000"/>
                            <attachment id="12496412" name="java_HBASE_4448.patch" size="12050" author="dmeil" created="Sun, 25 Sep 2011 20:58:42 +0000"/>
                            <attachment id="12496699" name="java_HBASE_4448_v2.patch" size="12688" author="dmeil" created="Tue, 27 Sep 2011 15:20:20 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>4.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 20 Sep 2011 15:43:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3309</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 42 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0hqx3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>101623</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>