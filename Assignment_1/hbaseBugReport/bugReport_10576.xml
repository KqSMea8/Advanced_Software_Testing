<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:15:11 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-10576/HBASE-10576.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-10576] Custom load balancer to co-locate the regions of two tables which are having same split keys</title>
                <link>https://issues.apache.org/jira/browse/HBASE-10576</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;To support local indexing both user table and index table should have same split keys. This issue to provide custom balancer to colocate the regions of two tables which are having same split keys. &lt;/p&gt;

&lt;p&gt;This helps in Phoenix as well.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12696241">HBASE-10576</key>
            <summary>Custom load balancer to co-locate the regions of two tables which are having same split keys</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12663357">HBASE-9203</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="3" iconUrl="https://issues.apache.org/jira/images/icons/statuses/inprogress.png" description="This issue is being actively worked on at the moment by the assignee.">In Progress</status>
                    <statusCategory id="4" key="indeterminate" colorName="yellow"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="rajesh23">rajeshbabu</assignee>
                                    <reporter username="rajesh23">rajeshbabu</reporter>
                        <labels>
                    </labels>
                <created>Thu, 20 Feb 2014 13:38:44 +0000</created>
                <updated>Mon, 8 Sep 2014 14:39:23 +0000</updated>
                                                                            <component>Balancer</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>18</watches>
                                                                <comments>
                            <comment id="13914057" author="rajesh23" created="Thu, 27 Feb 2014 04:43:45 +0000"  >
&lt;p&gt;Here is the custom load balancer ensures co-location of user table regions and correponding index table regions. &lt;/p&gt;

&lt;p&gt;It is wrapper over normal load balancer like StochasticLoadBalancer or any other&lt;br/&gt;
which can be configurable(the configuration is hbase.index.balancer.delegator.class).&lt;/p&gt;

&lt;p&gt;*Before creating index table we should add both user table and index table to balancer. &lt;br/&gt;
We may need to populate user table region locations from master to balancer.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
IndexLoadBalancer#addTablesToColocate();
IndexLoadBalancer#populateRegionLocations();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;*Similary while droping table we can remove the tables from colocation&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
IndexLoadBalancer#removeTablesFromColocation().
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above steps can be done through master coprocessor hooks because no direct client APIs for this.&lt;br/&gt;
Hooks implemented in TestIndexLoadBalancer.MockedMasterObserver gives some basic idea.&lt;/p&gt;

&lt;p&gt;*We need set parent table attribute to index table descriptor to repopulate tables to colocate on master startup.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
htd.setValue(IndexLoadBalancer.PARENT_TABLE_KEY, userTableName.toBytes());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13914217" author="hadoopqa" created="Thu, 27 Feb 2014 08:39:04 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12631451/HBASE-10576.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12631451/HBASE-10576.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12631451&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 javadoc&lt;/font&gt;.  The javadoc tool appears to have generated 1 warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 4 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +        if (table.equals(regionState.getRegion().getTable()) &amp;amp;&amp;amp; regionState.getServerName() != null) {&lt;br/&gt;
+        if (Bytes.compareTo(uStartKeyAndLocation.getFirst(), iStartKeyAndLocation.getFirst()) == 0) {&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.util.TestHBaseFsck&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8831//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13915076" author="yuzhihong@gmail.com" created="Thu, 27 Feb 2014 21:38:04 +0000"  >&lt;p&gt;Please fix the 2 new findbugs warnings - &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10624&quot; title=&quot;Fix 2 new findbugs warnings introduced by HBASE-10598&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10624&quot;&gt;&lt;del&gt;HBASE-10624&lt;/del&gt;&lt;/a&gt; covers the other two.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Random RANDOM = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Random(&lt;span class=&quot;code-object&quot;&gt;System&lt;/span&gt;.currentTimeMillis());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Use EnvironmentEdge above.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      Map&amp;lt;ImmutableBytesWritable, ServerName&amp;gt; tabkeKeys = &lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.colocationInfo.get(tableName);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We should move away from Writables, right ?&lt;/p&gt;

&lt;p&gt;In getServerNameFromMap():&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    TableName mappedTable = getMappedTableToColocate(regionInfo.getTable());
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What if mappedTable is the same as tableName ?&lt;/p&gt;</comment>
                            <comment id="13915084" author="yuzhihong@gmail.com" created="Thu, 27 Feb 2014 21:43:01 +0000"  >&lt;p&gt;In TestIndexLoadBalancer, can you add some test for region merge ?&lt;/p&gt;
</comment>
                            <comment id="13916993" author="rajesh23" created="Sat, 1 Mar 2014 08:55:47 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=yuzhihong%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;yuzhihong@gmail.com&quot;&gt;Ted Yu&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;We should move away from Writables, right ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Since ImmutableBytesWritable has equals and hashcode implementation for byte array using here as hashmap key, not used for any serialization. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What if mappedTable is the same as tableName ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;it will not return same table name. added some validation before adding to tables to colocate to avoid this.&lt;/p&gt;

&lt;p&gt;Fixed findbugs and javadoc warnings.&lt;br/&gt;
Added test case for merge as well.&lt;/p&gt;

&lt;p&gt;Thanks for review Ted.&lt;/p&gt;</comment>
                            <comment id="13917009" author="hadoopqa" created="Sat, 1 Mar 2014 10:47:47 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12631933/HBASE-10536_v2.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12631933/HBASE-10536_v2.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12631933&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 3 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 2 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +    admin.move(regionsToMerge.getFirst().getEncodedNameAsBytes(), Bytes.toBytes(server.toString()));&lt;br/&gt;
+        .move(regionsToMerge.getSecond().getEncodedNameAsBytes(), Bytes.toBytes(server.toString()));&lt;br/&gt;
+        if (Bytes.compareTo(uStartKeyAndLocation.getFirst(), iStartKeyAndLocation.getFirst()) == 0) {&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8860//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13917146" author="rajesh23" created="Sat, 1 Mar 2014 18:31:29 +0000"  >&lt;p&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=giacomotaylor%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;giacomotaylor@gmail.com&quot;&gt;James Taylor&lt;/a&gt;, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jesse_yates&quot; class=&quot;user-hover&quot; rel=&quot;jesse_yates&quot;&gt;Jesse Yates&lt;/a&gt; Can you review this patch whether this will help in Phoenix or any changes required?&lt;/p&gt;</comment>
                            <comment id="13917212" author="jesse_yates" created="Sat, 1 Mar 2014 23:03:18 +0000"  >&lt;p&gt;Gave it a browse and it seems useful. It would be a building block for later indexing improvements in phoenix, for sure. Unfortunately, I don&apos;t have the bandwidth right now to do an indepth review as I&apos;m not very familiar with the load balancer code. It looks alright, but I&apos;m not confident in my ability to give it a +1 :-/&lt;/p&gt;

&lt;p&gt;Maybe James has the time though?&lt;/p&gt;</comment>
                            <comment id="13919739" author="jamestaylor" created="Tue, 4 Mar 2014 18:33:11 +0000"  >&lt;p&gt;Thanks for isolating this piece &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajesh23&quot; class=&quot;user-hover&quot; rel=&quot;rajesh23&quot;&gt;rajeshbabu&lt;/a&gt;. It&apos;s definitely useful to support a local indexing feature in Phoenix. It&apos;s difficult for me to give you any meaningful feedback until we starting going down the path of using it in the context of Phoenix. One way we could approach this (and this is what Jesse did with his secondary index work), would be to get the code into Phoenix first and get it far enough along that it&apos;s clear it has everything required. Then, take the code and propose moving it back into HBase. That way, you can get some good usage and feedback along the way. As soon as we cut a 3.0 branch and a 4.0 branch (in a couple of days), we could get this into the master branch of Phoenix and proceed down this path. If we go this route, it would probably be best to do it first in a feature branch off of master.&lt;/p&gt;

&lt;p&gt;Is that possible, or does the code required to live in HBase?&lt;/p&gt;</comment>
                            <comment id="13977655" author="jeffreyz" created="Wed, 23 Apr 2014 00:23:22 +0000"  >&lt;p&gt;I have different proposal to ensure data &amp;amp; index table colocate on the same RS. The high level idea(shadow region) is listed below:&lt;/p&gt;

&lt;p&gt;1) Every time when we open a data region, we use coprocessor to open the index region. &lt;br/&gt;
2) When we close a data region, the same coprocessor closes the index region&lt;br/&gt;
3) The index region(shadow region) won&apos;t recorded in meta table so AM won&apos;t assign them so there is no need to implement custom load balancer. &lt;br/&gt;
4) Index region is still visible by hosting region server and corresponding statistics matrix&lt;/p&gt;

&lt;p&gt;Client can use region location of data table to talk to its corresponding index region because of colocation. The suggestion simplifies implementation and the good part guarantees index region always opened along with data region. No edge cases such as we can open one but not the other or become online in different order.&lt;/p&gt;

&lt;p&gt;Thanks.  &lt;/p&gt;
</comment>
                            <comment id="13977821" author="ram_krish" created="Wed, 23 Apr 2014 04:38:06 +0000"  >&lt;blockquote&gt;&lt;p&gt;Index region always opened along with data region. No edge cases such as we can open one but not the other or become online in different order.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This suggestion is excellent.  &lt;br/&gt;
Few doubts on the opening of index region&lt;br/&gt;
Which hook we will be using to open a a corresponding index region? So the opening of a main region would be considered done only if the index region (virually) gets opened in the hosting RS?  If not we would consider the region opening/closing as a failure right? &lt;br/&gt;
The datastructures that holds the active regions should be updated still and those things may need some changes in the core or add some new hooks to suppor them.&lt;br/&gt;
I think the suggestion has got lot of advantages, just that need to see how it turns out.  +1 on this suggestion.&lt;/p&gt;</comment>
                            <comment id="13977822" author="jamestaylor" created="Wed, 23 Apr 2014 04:43:25 +0000"  >&lt;p&gt;Would the client be able to initiate a scan on the shadow index regions?&lt;/p&gt;</comment>
                            <comment id="13977823" author="anoop.hbase" created="Wed, 23 Apr 2014 04:44:21 +0000"  >&lt;p&gt;Interesting ideas around.  One Q&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;3) The index region(shadow region) won&apos;t recorded in meta table so AM won&apos;t assign them so there is no need to implement custom load balancer&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;So what will happen when some one runs tools like HBCK?   We wont even create an index table?  &lt;/p&gt;</comment>
                            <comment id="13977825" author="anoop.hbase" created="Wed, 23 Apr 2014 04:45:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;Would the client be able to initiate a scan on the shadow index regions?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If the region entries are not there in META, client can not initiate a scan.&lt;/p&gt;</comment>
                            <comment id="13977827" author="ram_krish" created="Wed, 23 Apr 2014 04:49:19 +0000"  >&lt;p&gt;In the case of hindex we were trying to avoid direct scans on the index, but any way internal scans may be needed. I think doing the above would mean that scans would not need to read the META instead make the scan know which region to be scanned. That would mean it would be change on how the scans work now. &lt;/p&gt;</comment>
                            <comment id="13977915" author="rajesh23" created="Wed, 23 Apr 2014 07:05:43 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt;&lt;br/&gt;
I too thought the similar approach like opening and closing index regions through coprocesors but not exactly like shadow region concept.&lt;br/&gt;
I thought many problems with this approach and so didn&apos;t propose it. One good thing with this approach is we can guarantee  100% co-location.&lt;/p&gt;

&lt;p&gt;Can you explain more how do we handle these?&lt;br/&gt;
1) How index table will be created? To avoid listing the index regions in meta during table creation, do we need to divide the table creation into pieces and just create directories/files needed for index table regions?&lt;br/&gt;
2) How to open the shadow regions if user regions already serving by some RS. Do we need to send region open request from client(At present we cannot do this) or user table should be disabled and enable back?&lt;br/&gt;
3) How do we find corresponding index region to be opened in coprocessors if we dont have region info in META? some how from file system?&lt;/p&gt;</comment>
                            <comment id="13978294" author="jamestaylor" created="Wed, 23 Apr 2014 15:19:36 +0000"  >&lt;p&gt;Let me add a (4) too, related to my question above: How would the client know that a scan was serviced by the shadow region instead of the regular data region? This is important since the client might otherwise be forced to reorder all the rows it gets back versus doing a merge sort among a set of parallel scans. Also related (and perhaps (5)), could separate shadow regions be used per index (i.e. would that scale fine)? If not, then the row key of the shadow region would need to be prefixed in some way. In this case, how would the client and server-side code deal with this?&lt;/p&gt;

&lt;p&gt;I think this idea sound very promising, but I think the APIs would likely need to be tweaked so that the client has visibility into the usage of these shadow regions.&lt;/p&gt;</comment>
                            <comment id="13978321" author="jxiang" created="Wed, 23 Apr 2014 15:45:04 +0000"  >&lt;p&gt;I agree with the load balancer idea. For the coprocessor/shadow region proposal, it conflicts with that we only want the master to handle region assignments/recovery. If there are two entities to do such things, racing is hard to avoid.&lt;/p&gt;</comment>
                            <comment id="13978998" author="jeffreyz" created="Wed, 23 Apr 2014 22:13:12 +0000"  >&lt;p&gt;Thanks for all the very good comments &amp;amp; feedbacks. I think the most doubts come from &quot;no meta entries for shadow regions&quot;.&lt;/p&gt;

&lt;p&gt;We can create meta entries for shadow regions but with &quot;shadow&quot; state(like disable state) so that AM &amp;amp; Balancer can skip them. With entries in META table, I think most questions are answered. As &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=ram_krish&quot; class=&quot;user-hover&quot; rel=&quot;ram_krish&quot;&gt;ramkrishna.s.vasudevan&lt;/a&gt; suggested above, there will be some tweaks in coprocessor hook &amp;amp; region open code in order to open a region from coprocessor.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;it conflicts with that we only want the master to handle region assignments/recovery&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There is no conflict because the shadow region location is pre-determined by its data region. &lt;/p&gt;

&lt;p&gt;My original thought without meta entries for shadow regions is a coprocessors intensive approach as following.&lt;/p&gt;

&lt;p&gt;For creating local-index tables, we reopen data table(through enable/disable table). During data table region opening, we can create index regions under same data region directory if not present or open index regions if already exists. &lt;/p&gt;

&lt;p&gt;For index table access, we can use coprocessor preScannerOpen() to intercept scan if the passed in scan has attribute(or hint) using index OR tweak hbase client to be aware of shadowing regions in terms of location finding.&lt;/p&gt;</comment>
                            <comment id="13979104" author="jamestaylor" created="Wed, 23 Apr 2014 23:46:33 +0000"  >&lt;blockquote&gt;&lt;p&gt;tweak hbase client to be aware of shadowing regions in terms of location finding.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;+1. If the client can just issue a scan on the shadow regions, that would be ideal.&lt;/p&gt;</comment>
                            <comment id="13980481" author="stack" created="Thu, 24 Apr 2014 23:28:15 +0000"  >&lt;p&gt;Do we have to go the route of special-casing &apos;shadow-regions&apos;.  The LB is responsible for assignments.  Assignment policy belongs in the LB.  The LB is meant to allow new factors balancing.&lt;/p&gt;

&lt;p&gt;Special-casing assignments per new feature will fast become unmaintainable IMO.&lt;/p&gt;

&lt;p&gt;Related story: Jimmy Xiang just made it so Master and Backup Masters are also RegionServers.  In the code, spread all about &amp;#8211; in the LB but also on region open, etc. &amp;#8211; there was special-casing such that if a backup master, then only carry a few regions (configurable).  Jimmy just did the work to move this work all up into the LB.  Now it is in one place only.&lt;/p&gt;</comment>
                            <comment id="13980572" author="jeffreyz" created="Fri, 25 Apr 2014 00:59:08 +0000"  >&lt;p&gt;AM &amp;amp; Load Balancers do have a similar handling for regions of a &quot;disabled&quot; table. The proposal is suggesting a way to have a stronger guarantee of the region collocating as you know AM doesn&apos;t guarantee when an assignment will happen and the final location of a region assignment.  For example, when an index region move, there is no guarantee that data region is also moved and opened simultaneously on the same RS. It&apos;s possible that during an index update a region move could happen and the update survives the region move because of retires. So there are chances index region &amp;amp; data region on different RSs even within one update operation. This may cause client gets a fail response(like time out or interrupted) while the data is really committed and data region(vice verse) may don&apos;t commit the related updates and finally end up with index out of sync with data.&lt;/p&gt;

&lt;p&gt;If current implementation can handle those similar corner cases from indeterministic nature of AM, I think current load balancer approach is also good.&lt;/p&gt;
</comment>
                            <comment id="13980629" author="rajesh23" created="Fri, 25 Apr 2014 02:22:00 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;For example, when an index region move, there is no guarantee that data region is also moved and opened simultaneously on the same RS. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We are handling region movements properly.&lt;br/&gt;
1) If regions should be balanced to other region server then custom balancer selects both data and index regions together so both will be moved simultaneousily. &lt;br/&gt;
2) If user explicitly move data/index region corresponding region will be moved through the hooks.&lt;br/&gt;
3) When region server down also both data and index regions will be assigned to some other RS simultaneously.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;It&apos;s possible that during an index update a region move could happen and the update survives the region move because of retires. So there are chances index region &amp;amp; data region on different RSs even within one update operation.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We are handling updates in such a way that no region will be closed in the middle of updates. So there is no chance of inconsistencies. If the region assignments in the middle like user region successfully assigned and index region assignment in progress, we are not allowing puts to any region, where we can retry updates.&lt;/p&gt;

&lt;p&gt;Still you wanted go with shadow regions?&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="13980648" author="jamestaylor" created="Fri, 25 Apr 2014 02:53:44 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt; and &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajesh23&quot; class=&quot;user-hover&quot; rel=&quot;rajesh23&quot;&gt;rajeshbabu&lt;/a&gt; - using this approach, would the index table row key still need to be prefixed with the region start key?&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt; - could this be exposed to the client through the regular scan API with one additional attribute that indicates which index shadow region you want to scan by identifying the data region start key? Then the scan would be applied as normal, but to the index shadow region that corresponds to the indicated data region based on the start key (or some other identifier).&lt;br/&gt;
Also, &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt; - related to Rajeshbabu&apos;s comments, would you need to handle all these special cases too (potentially using the same techniques used by hindex)?&lt;br/&gt;
One final question: how much of this already exists and if it were to move forward, would it potentially target 0.98?&lt;br/&gt;
Great stuff!&lt;/p&gt;</comment>
                            <comment id="13980695" author="stack" created="Fri, 25 Apr 2014 04:49:42 +0000"  >&lt;blockquote&gt;&lt;p&gt;If current implementation can handle those similar corner cases from indeterministic nature of AM, I think current load balancer approach is also good.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt; I was going to say no but seems like @rajeshbabu can do it w/ his patch according to list above (Thanks for making the list).  I see merit in your proposal now where shadow region is opened by a coprocessor (but otherwise is in the &apos;shadows&apos; as far as the cluster is concerned &amp;#8211; no entry in hbase:meta).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajesh23&quot; class=&quot;user-hover&quot; rel=&quot;rajesh23&quot;&gt;rajeshbabu&lt;/a&gt; Please tell me more how this balancer works.  It is not clear skimming the code.  &apos;colocate&apos; is how you term data and index tables going together?&lt;/p&gt;

&lt;p&gt;We cannot hack up the core of hbase to get this feature in.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13980728" author="rajesh23" created="Fri, 25 Apr 2014 05:59:15 +0000"  >&lt;p&gt;If I understand the &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt; idea in the above comment(&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10576?focusedCommentId=13978998&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13978998&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-10576?focusedCommentId=13978998&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13978998&lt;/a&gt;) correctly, &lt;br/&gt;
I think we can do the same without any changes in the kernel.&lt;br/&gt;
The steps are like this&lt;br/&gt;
1) Before creating index table we need to disable user table.&lt;br/&gt;
2) create index table with the same split keys as user table and disable it. So next time onwards index regions wont be assigned anymore by AM.(Need not have any special state like shadow)&lt;br/&gt;
3) Enable user table. While opening user region we can get corresponing index region from meta,htd from namenode and just open it with below method&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; HRegion openHRegion(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; HRegionInfo info,
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; HTableDescriptor htd, &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; HLog wal,
      &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Configuration conf)
  &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
    &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; openHRegion(info, htd, wal, conf, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After that maintain user region and index region mapping.&lt;br/&gt;
4) While scanning if query conditions involves covering indexes we can just scan index region in the hooks and skip scanning user region by bypass.&lt;br/&gt;
Otherwise get rowkeys from index region and seek to rowkey in the user region and get required information.&lt;/p&gt;

&lt;p&gt;I will do prototype of this and see any problems down the like mainly during split or merge. Mostly there should not be any problem. &lt;br/&gt;
what do you say &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt;?&lt;/p&gt;</comment>
                            <comment id="13980824" author="rajesh23" created="Fri, 25 Apr 2014 09:15:11 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Please tell me more how this balancer works. It is not clear skimming the code. &apos;colocate&apos; is how you term data and index tables going together?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Main idea of the balancer is to select same plan for a user region and it&apos;s corresponding index region at any time. &lt;br/&gt;
The custom balancer is wrapper on top of normal balancer like StochasticLoadBalancer(which will be used as delegator). &lt;br/&gt;
The balancer maintains the region plans of user table and corresponding index table in a map.We call it as co-location info. &lt;br/&gt;
When AM requests for a user(index) regions plans first we will check any plans available for corresponding index(user) regions in the co-location info. &lt;br/&gt;
If available same will be selected as plans otherwise generate the plans in any fashion like round-robin/random/retain by the delegator and add them&lt;br/&gt;
to co-location info.&lt;/p&gt;

&lt;p&gt;When a region is offline the corresponding region plan will be removed from the co-location info.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="13981310" author="stack" created="Fri, 25 Apr 2014 17:50:49 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajesh23&quot; class=&quot;user-hover&quot; rel=&quot;rajesh23&quot;&gt;rajeshbabu&lt;/a&gt; So, you would only require changes in the balancer?  Have you tried it?  Is your scheme immune to the issues &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt; talks of above?  Thanks.&lt;/p&gt;</comment>
                            <comment id="13981427" author="jeffreyz" created="Fri, 25 Apr 2014 18:42:04 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajesh23&quot; class=&quot;user-hover&quot; rel=&quot;rajesh23&quot;&gt;rajeshbabu&lt;/a&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(Need not have any special state like shadow)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You can&apos;t reuse disabled state because a client can&apos;t talk to a region in a disabled table. Introducing a new state like &quot;shadow&quot;, I think it&apos;s cleaner.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I will do prototype of this&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Please do. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; Just changing balancer alone isn&apos;t enough. Because even we send out region assignment requests simultaneously with same destination RS, there is no guarantee which assignment will happen firstly, when they will happen &amp;amp; complete and if they can both succeed.&lt;br/&gt;
With this coprocessor approach, since both region open the same time, we can even atomically update both their location info in meta table with a single batch. So clients can see both of them in a location at the same time. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=giacomotaylor&quot; class=&quot;user-hover&quot; rel=&quot;giacomotaylor&quot;&gt;James Taylor&lt;/a&gt; The new proposal is to enforce strong co-locating. We still need same split key &amp;amp; prefix for the index regions. There are other ways without requiring same split key/prefix but they&apos;re not clean. Since there is an entry in meta table for the index region with &quot;shadow&quot; state, a client can scan the region directly. &lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="14096747" author="rajesh23" created="Thu, 14 Aug 2014 08:42:52 +0000"  >&lt;p&gt;Didn&apos;t find time to work on this issue because of some internal assignments and local indexing integration to phoenix. &lt;br/&gt;
Now I have time to do this. I have started working on this..&lt;/p&gt;</comment>
                            <comment id="14121903" author="rajesh23" created="Thu, 4 Sep 2014 20:06:40 +0000"  >&lt;p&gt;Here is the WIP patch introducing new state &apos;shadow&apos; to region so that AM/balancer can skip the assignment and at the same time the writes and reads can be served by the region.&lt;/p&gt;

&lt;p&gt;To make the region a shadow region using transaction approach.&lt;/p&gt;

&lt;p&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jeffreyz&quot; class=&quot;user-hover&quot; rel=&quot;jeffreyz&quot;&gt;Jeffrey Zhong&lt;/a&gt;  is this approach fine for you? &lt;br/&gt;
If it&apos;s ok, I will add more tests,APIs and utils tomorrow and upload new patch. &lt;/p&gt;

&lt;p&gt;Ping &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jxiang&quot; class=&quot;user-hover&quot; rel=&quot;jxiang&quot;&gt;Jimmy Xiang&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="14122141" author="yuzhihong@gmail.com" created="Thu, 4 Sep 2014 23:03:02 +0000"  >&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.offLine == o.offLine) {
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.shadow == o.shadow) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; 0;
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;code-keyword&quot;&gt;this&lt;/span&gt;.shadow == &lt;span class=&quot;code-keyword&quot;&gt;true&lt;/span&gt;) &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Why is check of shadow tied to offline status ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;static&lt;/span&gt; void shadowRegion(&lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; HConnection hConnection, HRegionInfo region, ServerName sn)
+      &lt;span class=&quot;code-keyword&quot;&gt;throws&lt;/span&gt; IOException {
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can you add javadoc for the above method ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[] tableRow = Bytes.toBytes(region.getRegionNameAsString() + HConstants.DELIMITER);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What&apos;s the purpose for adding trailing delimiter ?&lt;/p&gt;

&lt;p&gt;Reviewboard would be handy for reviewers.&lt;/p&gt;</comment>
                            <comment id="14122385" author="stack" created="Fri, 5 Sep 2014 04:20:05 +0000"  >&lt;p&gt;How is this balancer patch supposed to work?  I turn on this feature for a table?  Or is it for whole cluster?&lt;/p&gt;</comment>
                            <comment id="14122604" author="rajesh23" created="Fri, 5 Sep 2014 08:21:47 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=tedyu&quot; class=&quot;user-hover&quot; rel=&quot;tedyu&quot;&gt;Ted Yu&lt;/a&gt;&lt;br/&gt;
Thanks for review.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Why is check of shadow tied to offline status ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There is no relation to offline status..That need to be separated. It&apos;s mistake. I will correct it.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Can you add javadoc for the above method ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I will add&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What&apos;s the purpose for adding trailing delimiter ?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The delimeter is not required, will remove it.&lt;/p&gt;

&lt;p&gt;Once I complete the patch I will put it in RB.&lt;/p&gt;</comment>
                            <comment id="14122708" author="rajesh23" created="Fri, 5 Sep 2014 09:13:08 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;How is this balancer patch supposed to work?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Once this shadow region feature goes in the balancer patch is not required. &lt;br/&gt;
We can ensure the co-location using coprocessors.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;I turn on this feature for a table? Or is it for whole cluster?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It&apos;s region wise Stack. The shadow region is like offline region but not completely&lt;br/&gt;
(Offline at master side and can be opened/closed at region server through coprocessors).&lt;br/&gt;
If we make a region shadow then master considers it as offline and will not move/reassign&lt;br/&gt;
 in any case like master/RS failover. At the same time the region serves reads and writes&lt;br/&gt;
from external client if it&apos;s online at RS.&lt;/p&gt;

&lt;p&gt;In case of secondary index,to ensure co-location we can make the index region(s) shadow&lt;br/&gt;
 and open/close while opening/closing data region(s) through coprocessors.&lt;br/&gt;
Since the regions cannot be moved by master they will be served by the RS holding data region always.&lt;/p&gt;

&lt;p&gt;The shadow region operation can be performed similar like split or merge on a region.&lt;br/&gt;
If we want to make the table shadow we need to make all the regions shadow.&lt;/p&gt;

&lt;p&gt;Thanks.&lt;/p&gt;</comment>
                            <comment id="14123129" author="stack" created="Fri, 5 Sep 2014 16:40:17 +0000"  >&lt;p&gt;What is the &apos;shadow region feature&apos;?&lt;/p&gt;

&lt;p&gt;You do not answer how I turn on/off colocation.&lt;/p&gt;

&lt;p&gt;I have read the various designs on colocated index regions. What is the plan for landing this secondary index feature?  Is it to come in piecemeal via stuff like this intermediate change to the balancer? What changes to core are required?  Where do I read about it?  Thanks.&lt;/p&gt;</comment>
                            <comment id="14123280" author="jeffreyz" created="Fri, 5 Sep 2014 18:08:07 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=rajesh23&quot; class=&quot;user-hover&quot; rel=&quot;rajesh23&quot;&gt;rajeshbabu&lt;/a&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;is this approach fine for you?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I skimmed through the patch and basic idea looks good to me.  Thanks.&lt;/p&gt;

&lt;p&gt;For stack&apos;s question&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I turn on this feature for a table? Or is it for whole cluster?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In my opinion, it&apos;s better to turn on/off the feature in a table level because regions are always in changing state like split/merge. In addition, the feature requires &apos;shadow&apos; region has the same boundary of the prime region. It&apos;s may be hard to turn on the feature for each individual region.&lt;/p&gt;</comment>
                            <comment id="14125629" author="rajesh23" created="Mon, 8 Sep 2014 14:39:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stack&quot; class=&quot;user-hover&quot; rel=&quot;stack&quot;&gt;stack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Before answering to your questions first I just wanted to give some brackground about this issue. Sorry you are already aware most of the things.&lt;br/&gt;
Earlier at some point of time we have been asked for isolating the balancer from the index code and integrate the local indexing into phoenix.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9203?focusedCommentId=13897450&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13897450&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-9203?focusedCommentId=13897450&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13897450&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10576?focusedCommentId=13919739&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13919739&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-10576?focusedCommentId=13919739&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13919739&lt;/a&gt;&lt;br/&gt;
Recently local-indexing feature has been integrated to Phoenix and it&apos;s using the same custom load balancer for colocation.&lt;br/&gt;
But with the custom load balancer, we will have the problems as Jeffrey pointed earlier.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10576?focusedCommentId=13980572&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13980572&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-10576?focusedCommentId=13980572&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13980572&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As an improvement, for stronger colocation I wanted to implement shadow regions feature suggested by Jeffrey.&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10576?focusedCommentId=13977655&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13977655&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-10576?focusedCommentId=13977655&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13977655&lt;/a&gt;&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10576?focusedCommentId=13978998&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13978998&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-10576?focusedCommentId=13978998&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13978998&lt;/a&gt;&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;You do not answer how I turn on/off colocation.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-10536&quot; title=&quot;ImportTsv should fail fast if any of the column family passed to the job is not present in the table&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-10536&quot;&gt;&lt;del&gt;HBASE-10536&lt;/del&gt;&lt;/a&gt;_v2.patch has custom load balancer implementation. To enable it we need to configure below property in hbase-site.xml at master side and restart it.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&amp;lt;property&amp;gt;
	&amp;lt;name&amp;gt;hbase.master.loadbalancer.class&amp;lt;/name&amp;gt;
	&amp;lt;value&amp;gt;org.apache.hadoop.hbase.master.balancer.IndexLoadBalancer&amp;lt;/value&amp;gt;
&amp;lt;/property&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the shadow regions I yet to make it enable/disable table wise.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;What is the plan for landing this secondary index feature?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We need to do some design level changes so that it can be acceptable for others. &lt;br/&gt;
1) Proper APIs for specifying indexes 2) clear cut interfaces for preparing index updates 3) pluggable failure policies etc.&lt;br/&gt;
Most of the things are clear in phoenix and need to borrow from it or can reuse them.&lt;br/&gt;
 or else we need to have our secondary index code independently. Please suggest what do you feel Stack.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Is it to come in piecemeal via stuff like this intermediate change to the balancer?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No stack, we have just isolated the custom load balancer from our secondary index so that it will helpful in Phoenix. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;What changes to core are required? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Almost all the kernel changes are contributed but there are very minor kernel changes like changing access specifiers so that we can reuse HBase code for some functionality. &lt;br/&gt;
I will list down and upload here.&lt;/p&gt;

&lt;p&gt;Forgive me if I misunderstood. &lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12631933" name="HBASE-10536_v2.patch" size="51486" author="rajesh23" created="Sat, 1 Mar 2014 08:55:47 +0000"/>
                            <attachment id="12631451" name="HBASE-10576.patch" size="47108" author="rajesh23" created="Thu, 27 Feb 2014 04:43:45 +0000"/>
                            <attachment id="12666564" name="HBASE-10576_shadow_regions_wip.patch" size="78529" author="rajesh23" created="Thu, 4 Sep 2014 20:06:40 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Thu, 27 Feb 2014 08:39:04 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>374717</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            2 years, 14 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1sknr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>375017</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12310230" key="com.atlassian.jira.plugin.system.customfieldtypes:textfield">
                        <customfieldname>Tags</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Phoenix</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                </customfields>
    </item>
</channel>
</rss>