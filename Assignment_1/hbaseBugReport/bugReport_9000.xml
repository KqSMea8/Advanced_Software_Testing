<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:00:30 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-9000/HBASE-9000.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-9000] Linear reseek in Memstore</title>
                <link>https://issues.apache.org/jira/browse/HBASE-9000</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;This is to address the linear reseek in MemStoreScanner. Currently reseek iterates over the kvset and the snapshot linearly by just calling next repeatedly. The new solution is to do this linear seek up to a configurable maximum amount of times then if the seek is not yet complete fall back to logarithmic seek.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12658795">HBASE-9000</key>
            <summary>Linear reseek in Memstore</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.png">Minor</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="8">Not A Problem</resolution>
                                        <assignee username="eclark">Elliott Clark</assignee>
                                    <reporter username="shanehogan">Shane Hogan</reporter>
                        <labels>
                    </labels>
                <created>Fri, 19 Jul 2013 17:37:23 +0000</created>
                <updated>Mon, 6 Apr 2015 19:52:21 +0000</updated>
                            <resolved>Mon, 6 Apr 2015 19:52:21 +0000</resolved>
                                    <version>0.89-fb</version>
                                    <fixVersion>0.89-fb</fixVersion>
                                    <component>Performance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                <comments>
                            <comment id="13713995" author="lhofhansl" created="Fri, 19 Jul 2013 19:35:57 +0000"  >&lt;p&gt;Is that an FB issue only?&lt;br/&gt;
In current HBase (0.94+) I see:&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      kvsetIt = kvsetAtCreation.tailSet(getHighest(key, kvsetItRow)).iterator();
      snapshotIt = snapshotAtCreation.tailSet(getHighest(key, snapshotItRow)).iterator();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In reseek.&lt;/p&gt;</comment>
                            <comment id="13806669" author="stepinto" created="Mon, 28 Oct 2013 10:10:40 +0000"  >&lt;p&gt;I don&apos;t think tailSet is efficient, considering a scenario that a filter is present and keep returning SEEK_NEXT_COL. A call to tailSet does not make use of the current position and require relocate to there over the skip list. In most cases, where maxVersions of a table is set to a small value, it can alternatively skip at most maxVersions keys.&lt;/p&gt;</comment>
                            <comment id="13807468" author="lhofhansl" created="Mon, 28 Oct 2013 23:28:53 +0000"  >&lt;p&gt;We should quantify the difference in some microbenchmarks.&lt;/p&gt;</comment>
                            <comment id="13807651" author="xieliang007" created="Tue, 29 Oct 2013 03:49:48 +0000"  >&lt;p&gt;Just my understanding: our current impl in trunk or the old 0.89-fb impl seems not optimized against all cases,  one type of case probably is friendly with current  logarithmic seek imple(tailSet), e.g.  lots of kv needs to be skipped;  another type of case is friendly with linear reseek, e.g. the target kv is near with the previous position, like 0.89-fb&apos;s old impl like :&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
     &lt;span class=&quot;code-keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; reseek(KeyValue key) {
      &lt;span class=&quot;code-keyword&quot;&gt;while&lt;/span&gt; (kvsetNextRow != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp;
          comparator.compare(kvsetNextRow, key) &amp;lt; 0) {
        kvsetNextRow = getNext(kvsetIt);
     }
    ...
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to me, it&apos;s reasonable to have a setting value to : let the cheaper linear reseek go first, then fallback to more expensive seek() ops after reaching a config value.&lt;/p&gt;</comment>
                            <comment id="13807674" author="lhofhansl" created="Tue, 29 Oct 2013 04:50:23 +0000"  >&lt;p&gt;I&apos;ve been thinking about declaring a reseek as &quot;near&quot; or &quot;far&quot;. A &quot;near&quot; reseek would be to the next column or row, whereas a &quot;far&quot; reseek could be result of a seek hint from the Filter. In the &quot;near&quot; case we could try next() a few times without and then seek, in the &quot;far&quot; case we&apos;d seek immediately as we expect to be able to skip a lot of KVs.&lt;/p&gt;</comment>
                            <comment id="13807685" author="xieliang007" created="Tue, 29 Oct 2013 05:14:02 +0000"  >&lt;p&gt;sound great&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13807722" author="stepinto" created="Tue, 29 Oct 2013 06:29:55 +0000"  >&lt;p&gt;Attach a benchmark program.&lt;/p&gt;

&lt;p&gt;$ bin/hbase org.apache.hadoop.hbase.regionserver.MemStoreReseekBenchmark&lt;br/&gt;
Configuration:&lt;br/&gt;
rows: 100000&lt;br/&gt;
columns per row: 10&lt;br/&gt;
versions: 3&lt;br/&gt;
size of row-key: 8&lt;br/&gt;
size of qualifier: 8&lt;br/&gt;
size of value: 8&lt;br/&gt;
Populating data...&lt;br/&gt;
Testing...&lt;br/&gt;
Next: 0.071 us&lt;br/&gt;
ReseekToNextRow: 5.92 us&lt;br/&gt;
ReseekToNextColumn: 3.735 us&lt;/p&gt;

&lt;p&gt;You can see here that next is much cheaper than reseek. &lt;/p&gt;</comment>
                            <comment id="13807774" author="xieliang007" created="Tue, 29 Oct 2013 08:21:54 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stepinto&quot; class=&quot;user-hover&quot; rel=&quot;stepinto&quot;&gt;Chao Shi&lt;/a&gt;, nice work!&lt;/p&gt;

&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;, would you like to impl your idea about &quot;far/&quot;near&quot; reseek in this jira?  or let&apos;s just do a backport: change the current always &quot;far&quot; behivor into a similar manner like 0.89-fb&apos;s here? thanks!&lt;/p&gt;</comment>
                            <comment id="13808517" author="lhofhansl" created="Tue, 29 Oct 2013 22:03:37 +0000"  >&lt;blockquote&gt;&lt;p&gt;or let&apos;s just do a backport: change the current always &quot;far&quot; behivor into a similar manner like 0.89-fb&apos;s here&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;What does this entail? reseeking can be useful in many cases, I would not want to generally go back and disable that.&lt;br/&gt;
We should also investigate other data structures for the memstore.&lt;br/&gt;
And lastly, in a typical system only a small fraction of the data is in the memstore, the majority of the data will in HFiles and hence be scanned with StoreFileScanners - if that would not be the case I would not advocate the use of HBase and suggest something like memcached, etc, instead.&lt;/p&gt;

&lt;p&gt;That all said, opportunistically performing a few nexts and only then issueing a reseek would be a good addition. Could use MAX_VERSIONS as guidepost here, or make it configurable (there are usecases where many versions/columns might be kept in HBase).&lt;/p&gt;</comment>
                            <comment id="13808569" author="lhofhansl" created="Tue, 29 Oct 2013 22:57:15 +0000"  >&lt;p&gt;In all fairness, we should not divide the runtime by the number of ops. The whole point of seeking is to reduce the number of ops. In that case it looks like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Next: 136000.0 us&lt;br/&gt;
ReseekToNextRow: 443000.0 us&lt;br/&gt;
ReseekToNextColumn: 2243000.0 us&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="13808767" author="stepinto" created="Wed, 30 Oct 2013 05:29:31 +0000"  >&lt;p&gt;The attached patch is a port of linear seek code from 0.89-fb branch (with minor changes). I&apos;m not sure if 20 should be a good default value for the max number of linear seeks.&lt;/p&gt;

&lt;p&gt;Benchmark result:&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;operation&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;trunk&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;w/ patch&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;reseek to next row&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.92 us&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.71 us&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;reseek to next column&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.735 us&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.569 us&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Configuration:&lt;br/&gt;
rows: 100000&lt;br/&gt;
columns per row: 10&lt;br/&gt;
versions: 3&lt;br/&gt;
size of row-key: 8&lt;br/&gt;
size of qualifier: 8&lt;br/&gt;
size of value: 8&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;In all fairness, we should not divide the runtime by the number of ops. The whole point of seeking is to reduce the number of ops&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In fact, the cost of next is listed here only for reference (e.g. tune the limit of linear seeks) and should not be compared to costs of reseeks. In our use case that scan a single row with very large offset and small limit, the cost of a single reseek is more meaningful, as we can directly multiple it by offset. I can understand that in some other cases, the total time may be more important.&lt;/p&gt;

&lt;p&gt;In any cases, the goal of the benchmark program is to evaluate the performance gain with linear search, where we can compare these numbers w/ and w/o patch. The percentage of improvement does not change.&lt;/p&gt;

&lt;p&gt;I like the &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=lhofhansl&quot; class=&quot;user-hover&quot; rel=&quot;lhofhansl&quot;&gt;Lars Hofhansl&lt;/a&gt;&apos;s idea of passing a hint from ScanQueryMatcher, which should also benefit StoreFileScanner. I think we can also save some statistic information at the time a HFile is written, such as the average #versions or #columns, which can help us to determine if a &quot;reseek to next row&quot; is really far enough for a reseek.&lt;/p&gt;</comment>
                            <comment id="13808771" author="lhofhansl" created="Wed, 30 Oct 2013 05:37:24 +0000"  >&lt;p&gt;Hah. I just something very similar, but actually in StoreScanner. Not quite ready, but assumes a seek within a row or to the next row is a near seek, and the tries next() a few time (I picked 10 as a default).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9778&quot; title=&quot;Add hint to ExplicitColumnTracker to avoid seeking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9778&quot;&gt;&lt;del&gt;HBASE-9778&lt;/del&gt;&lt;/a&gt; is yet another approach. Rather than doing a serious of next()&apos;s when a reseek was requested that change would not request a reseek in the first place when it makes sense.&lt;/p&gt;</comment>
                            <comment id="13808781" author="stepinto" created="Wed, 30 Oct 2013 06:10:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;Hah. I just something very similar, but actually in StoreScanner.  Not quite ready, but assumes a seek within a row or to the next row is a near seek, and the tries next() a few time (I picked 10 as a default).&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Did you mean to call next at StoreScanner level? I&apos;m not sure if it is possible to do this there, as it may not have necessary knowledge about the cost of next vs. reseek. For example, a next attempt that causes reading another uncached block from FS is probably worse than do a reseek. I may be wrong as I didn&apos;t read your implementation.&lt;/p&gt;</comment>
                            <comment id="13809327" author="lhofhansl" created="Wed, 30 Oct 2013 16:52:21 +0000"  >&lt;p&gt;Yeah I agree. It&apos;s actually better to do that at the MestoreScanner and StoreFileScanner level.&lt;/p&gt;</comment>
                            <comment id="13809366" author="yuzhihong@gmail.com" created="Wed, 30 Oct 2013 17:27:24 +0000"  >&lt;p&gt;&apos;reseek to next row&apos; gets slower with patch.&lt;br/&gt;
If &quot;linear.search.limit&quot; is lowered, would the slow down be less ?&lt;/p&gt;</comment>
                            <comment id="13809383" author="yuzhihong@gmail.com" created="Wed, 30 Oct 2013 17:35:55 +0000"  >&lt;p&gt;Some comments on the benchmark:&lt;br/&gt;
Please add Apache license header.&lt;br/&gt;
Add class javadoc for MemStoreReseekBenchmark.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;final&lt;/span&gt; Random random = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; Random();
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Can you use seed for the above call and log the value of the seed ?&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+  &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[]&amp;gt; rows; &lt;span class=&quot;code-keyword&quot;&gt;private&lt;/span&gt; List&amp;lt;&lt;span class=&quot;code-object&quot;&gt;byte&lt;/span&gt;[]&amp;gt; qualifiers;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please put the above on two lines.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
+      &lt;span class=&quot;code-object&quot;&gt;boolean&lt;/span&gt; ok = scanner.reseek(key);
+      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (!ok) {
+        &lt;span class=&quot;code-keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; AssertionError(&lt;span class=&quot;code-quote&quot;&gt;&quot;!ok&quot;&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please print the key which caused assertion.&lt;/p&gt;</comment>
                            <comment id="13809402" author="lhofhansl" created="Wed, 30 Oct 2013 17:48:49 +0000"  >&lt;blockquote&gt;&lt;p&gt;&apos;reseek to next row&apos; gets slower with patch.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This is because the limit of 20 not optimal for this particular case. We&apos;ll never get it 100% right for all cases, what we need to do is to avoid the worst cases. In this case it&apos;ll be faster per op if the limit is increased to 30 (my guess) or lowered.&lt;/p&gt;</comment>
                            <comment id="13809870" author="stepinto" created="Thu, 31 Oct 2013 02:50:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;&apos;reseek to next row&apos; gets slower with patch. If &quot;linear.search.limit&quot; is lowered, would the slow down be less ?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, the optimal value should vary case by case. I think a default value of 5 should not add much observable overhead.&lt;/p&gt;

&lt;p&gt;I think a long-term solution would be implementing our own version of lock-free skip-list, where we can access its higher-level of next pointers (i.e. to skip) from the current position. This patch could be a temporary solution for now, as it is very simple.&lt;/p&gt;</comment>
                            <comment id="13809881" author="stepinto" created="Thu, 31 Oct 2013 03:04:36 +0000"  >&lt;p&gt;Merge the patch with the benchmark program, submitting for QA test&lt;/p&gt;

&lt;p&gt;1. set the default value of max linear search to 5&lt;br/&gt;
2. address Ted&apos;s comments on the benchmark program&lt;/p&gt;</comment>
                            <comment id="13809889" author="yuzhihong@gmail.com" created="Thu, 31 Oct 2013 03:29:15 +0000"  >&lt;p&gt;@Chao:&lt;br/&gt;
Thanks for the quick response.&lt;/p&gt;

&lt;p&gt;Can you update the table using new patch to see if &apos;reseek to next row&apos; gets faster ?&lt;/p&gt;</comment>
                            <comment id="13809906" author="hadoopqa" created="Thu, 31 Oct 2013 04:36:17 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12611241/hbase-9000.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12611241/hbase-9000.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 2 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop2.0&lt;/font&gt;.  The patch compiles against the hadoop 2.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 findbugs&lt;/font&gt;.  The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 site&lt;/font&gt;.  The patch appears to cause mvn site goal to fail.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop1-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/7684//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="13809958" author="stepinto" created="Thu, 31 Oct 2013 05:53:40 +0000"  >&lt;p&gt;I re-ran the benchmark program, and get the following numbers. (As there the overhead is not significant, the numbers below are the median of 5 runs.)&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;operation&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;trunk&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;w/ patch (n=5)&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;w/patch (n=20)&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;reseek to next row&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.82 us&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.76 us&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.14 us&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;reseek to next column&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.397 us&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.596 us&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.572 us&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;(where n is the limit of max linear seeks)&lt;/p&gt;

&lt;p&gt;numbers are varying within +-10% between each run.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;-1 findbugs. The patch appears to introduce 1 new Findbugs (version 1.3.9) warnings.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;p&gt;-1 site. The patch appears to cause mvn site goal to fail.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;These two QA -1s seem not to be related with my patch.&lt;/p&gt;</comment>
                            <comment id="13810444" author="yuzhihong@gmail.com" created="Thu, 31 Oct 2013 17:12:48 +0000"  >&lt;p&gt;Patch looks good.&lt;/p&gt;</comment>
                            <comment id="13810980" author="zjushch" created="Fri, 1 Nov 2013 02:36:35 +0000"  >&lt;p&gt;As the above performance tests, the patch doesn&apos;t fit all.&lt;/p&gt;

&lt;p&gt;How to decide the config value?&lt;/p&gt;

&lt;p&gt;IMPO,  the new code in MemStore seems not friendly&lt;/p&gt;</comment>
                            <comment id="13813676" author="stepinto" created="Tue, 5 Nov 2013 06:00:22 +0000"  >&lt;p&gt;Hi &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=zjushch&quot; class=&quot;user-hover&quot; rel=&quot;zjushch&quot;&gt;chunhui shen&lt;/a&gt;,&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;How to decide the config value?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I think most users should use the default value. This patch optimize performance on scenario that reseek on MemStore is the bottleneck, for example, scan with a filter that skips a lot of KVs. In this case, you need to tweak this value and make sure linear seeks happen rather than reseeks (i.e.. set this value to be greater than #versions in MemStore, if you are using SEEK_NEXT_COL). As most users don&apos;t have much versions per KV in their MemStore, I think the default value should play well.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;IMPO, the new code in MemStore seems not friendly&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Could you please explain more on what can be improved?&lt;/p&gt;</comment>
                            <comment id="13814608" author="zjushch" created="Wed, 6 Nov 2013 05:12:20 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=stepinto&quot; class=&quot;user-hover&quot; rel=&quot;stepinto&quot;&gt;Chao Shi&lt;/a&gt;&lt;br/&gt;
I understand the scenario which the patch is used for.&lt;br/&gt;
Should we do the same thing in StoreFileScanner?  &lt;br/&gt;
If so, why not do this in StoreScanner, for example, call next some times before call reseek...&lt;/p&gt;

&lt;p&gt;As personal view, such a action seems a little rude&lt;/p&gt;

&lt;p&gt;+0 from me&lt;/p&gt;</comment>
                            <comment id="13814609" author="zjushch" created="Wed, 6 Nov 2013 05:13:51 +0000"  >&lt;p&gt;I&apos;m sorry I have no better idea to optimize performance for this scenariofor&lt;/p&gt;</comment>
                            <comment id="13814700" author="stepinto" created="Wed, 6 Nov 2013 08:29:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;Should we do the same thing in StoreFileScanner? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Yes, I think so.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If so, why not do this in StoreScanner, for example, call next some times before call reseek...&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This is because StoreScanner does not have enough knownlege to judge whether do a reseek vs. several times of next. As  discussed before in this thread, an attempt to call next to do linear reseek may hit uncached block, whose cost is huge compared to a logarithmic reseek that touches only cached index blocks.&lt;/p&gt;</comment>
                            <comment id="13819616" author="lhofhansl" created="Tue, 12 Nov 2013 00:03:11 +0000"  >&lt;p&gt;Just to add some data here. I loaded some data into a table. Then scanned it with Phoenix: took 34s. Then I flushed the table, scanned again: 5s. There might have been some other factors at work so this is a bit anecdotal, but this definitely needs some work.&lt;/p&gt;</comment>
                            <comment id="13819630" author="lhofhansl" created="Tue, 12 Nov 2013 00:11:02 +0000"  >&lt;p&gt;Never mind that was because of caching. When I major compact (and thus wipe the cache) it takes 34s again. I would delete my previous comment, but that would confusing.&lt;/p&gt;</comment>
                            <comment id="13930909" author="lhofhansl" created="Tue, 11 Mar 2014 20:34:23 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-9778&quot; title=&quot;Add hint to ExplicitColumnTracker to avoid seeking&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-9778&quot;&gt;&lt;del&gt;HBASE-9778&lt;/del&gt;&lt;/a&gt; is committed now. It allows a configurable optional look ahead in ExplicitColumn tracker. Hence it&apos;ll do it in both Memstore and StoreScanner. I did look into doing that in StoreFileScanner, but most of the time of a reseek is spent before we even get to StoreFileScanner (checking whether we are forward seeking, checking whether we&apos;re still on the same block, seeking every HFile forward, etc).&lt;/p&gt;</comment>
                            <comment id="13930974" author="hadoopqa" created="Tue, 11 Mar 2014 21:25:54 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12611241/hbase-9000.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12611241/hbase-9000.patch&lt;/a&gt;&lt;br/&gt;
  against trunk revision .&lt;br/&gt;
  ATTACHMENT ID: 12611241&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 2 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.0&lt;/font&gt;.  The patch compiles against the hadoop 1.0 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop1.1&lt;/font&gt;.  The patch compiles against the hadoop 1.1 profile.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any new Findbugs (version 1.3.9) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 lineLengths&lt;/font&gt;.  The patch introduces the following lines longer than 100:&lt;br/&gt;
    +  public final static String MEMSTORE_RESEEK_LINEAR_SEARCH_LIMIT_KEY = &quot;hbase.hregion.memstore.linear.search.limit&quot;;&lt;br/&gt;
+  private static final Option NUM_COLUMNS_PER_ROW_OPTION = new Option(&quot;c&quot;, &quot;columns-per-row&quot;, true, &quot;columns per row&quot;);&lt;br/&gt;
+  private static final Option NUM_VERSIONS_OPTION = new Option(&quot;v&quot;, &quot;versions&quot;, true, &quot;number of versions&quot;);&lt;br/&gt;
+  private static final Option ROW_KEY_SIZE_OPTION = new Option(&quot;R&quot;, &quot;row-key-size&quot;, true, &quot;size of row-key&quot;);&lt;br/&gt;
+  private static final Option QUALIFIER_SIZE_OPTION = new Option(&quot;q&quot;, &quot;qualifier-size&quot;, true, &quot;size of qualifier&quot;);&lt;br/&gt;
+  private static final Option VALUE_SIZE_OPTION = new Option(&quot;V&quot;, &quot;value-size&quot;, true, &quot;size of value&quot;);&lt;br/&gt;
+  private static final Option RANDOM_SEED_OPTION = new Option(&quot;s&quot;, &quot;random-seed&quot;, true, &quot;random seed&quot;);&lt;br/&gt;
+  private void benchmarkReseeks(String name, KeyValueScanner scanner, List&amp;lt;KeyValue&amp;gt; keys) throws IOException {&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;     &lt;font color=&quot;red&quot;&gt;-1 core tests&lt;/font&gt;.  The patch failed these unit tests:&lt;br/&gt;
                       org.apache.hadoop.hbase.io.TestHeapSize&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//testReport/&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop2-compat.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-prefix-tree.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-client.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-common.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-protocol.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-server.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-examples.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-thrift.html&lt;/a&gt;&lt;br/&gt;
Findbugs warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//artifact/trunk/patchprocess/newPatchFindbugsWarningshbase-hadoop-compat.html&lt;/a&gt;&lt;br/&gt;
Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/8950//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14481806" author="eclark" created="Mon, 6 Apr 2015 19:52:21 +0000"  >&lt;p&gt;0.89-fb is no longer being actively maintained. If issues persist open an issue against the current master or stable versions.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12674058">HBASE-9778</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12610775" name="hbase-9000-benchmark-program.patch" size="7357" author="stepinto" created="Tue, 29 Oct 2013 06:29:55 +0000"/>
                            <attachment id="12610989" name="hbase-9000-port-fb.patch" size="2749" author="stepinto" created="Wed, 30 Oct 2013 05:29:31 +0000"/>
                            <attachment id="12611241" name="hbase-9000.patch" size="11032" author="stepinto" created="Thu, 31 Oct 2013 03:04:36 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>3.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Fri, 19 Jul 2013 19:35:57 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>338989</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 36 weeks, 4 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1mgvr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>339309</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>