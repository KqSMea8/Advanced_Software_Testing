<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:19:27 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-4497/HBASE-4497.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-4497] If region opening fails after updating META HBCK reports it as inconsistent and scanning the region throws NSRE</title>
                <link>https://issues.apache.org/jira/browse/HBASE-4497</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;As per the discussion in the mail chain &quot;HBCK reporting of possible mismatch in RS assignment&quot; this JIRA is created.&lt;br/&gt;
Consider two RS-&amp;gt; RS1 and RS2.&lt;br/&gt;
A region tries to open in RS1. But it takes a while.  The RS1 has still not updated meta and transitioned the node from OPENING to OPENED&lt;br/&gt;
So timeout assigns the region to RS2.  RS2 successfully updates the META and opens the region.&lt;br/&gt;
Now RS1 tries to act on the region by first updating the META and then transiting the node to OPENING to OPENED.&lt;/p&gt;

&lt;p&gt;RS1 transiting the node to OPENING to OPENED will fail.  But the META entry will have RS1 as the latest.&lt;br/&gt;
Now HBCK reports this as an inconsistency and if we try to scan the Region we get NotServingRegionException.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12524946">HBASE-4497</key>
            <summary>If region opening fails after updating META HBCK reports it as inconsistent and scanning the region throws NSRE</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="2" iconUrl="https://issues.apache.org/jira/images/icons/priorities/critical.png">Critical</priority>
                        <status id="1" iconUrl="https://issues.apache.org/jira/images/icons/statuses/open.png" description="The issue is open and ready for the assignee to start work on it.">Open</status>
                    <statusCategory id="2" key="new" colorName="blue-gray"/>
                                    <resolution id="-1">Unresolved</resolution>
                                        <assignee username="stack">stack</assignee>
                                    <reporter username="ram_krish">ramkrishna.s.vasudevan</reporter>
                        <labels>
                    </labels>
                <created>Tue, 27 Sep 2011 18:13:36 +0000</created>
                <updated>Wed, 7 Jan 2015 15:55:13 +0000</updated>
                                                                                <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                            <comments>
                            <comment id="13115788" author="stack" created="Tue, 27 Sep 2011 18:38:10 +0000"  >&lt;p&gt;Do we need to add an extra tickle of OPENING znode after open of region and before we go to do meta update?&lt;/p&gt;</comment>
                            <comment id="13115795" author="jdcryans" created="Tue, 27 Sep 2011 18:48:20 +0000"  >&lt;p&gt;Stack, it seems that it&apos;s already the case:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
&lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (tickleOpening(&lt;span class=&quot;code-quote&quot;&gt;&quot;post_region_open&quot;&lt;/span&gt;)) {
  &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (updateMeta(region)) failed = &lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In any case, there&apos;s still a hole as those two operations aren&apos;t done in an atomic fashion.&lt;/p&gt;</comment>
                            <comment id="13115828" author="stack" created="Tue, 27 Sep 2011 19:21:11 +0000"  >&lt;p&gt;Thanks J-D.  Thats what I was too lazy to looksee for myself.  Looks like we are doing enough tickling.  Weird that timeout monitor can cut in, region can be assigned elsewhere AND successfully update meta before this comes back.  Here is from Rams email up on list earlier with log snippets:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
RS1
===
2011-09-23 22:34:34,000 INFO
org.apache.hadoop.hbase.regionserver.HRegionServer: addToOnlineRegions is
doneREGION =&amp;gt; {NAME =&amp;gt;
&apos;t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9.&apos;, TableName =&amp;gt; &apos;t5&apos;,
STARTKEY =&amp;gt; &apos;&apos;, ENDKEY =&amp;gt; &apos;&apos;, ENCODED =&amp;gt; 2d06b3ca4d398ec96920ae86441a68c9,}
2011-09-23 22:34:34,009 INFO org.apache.hadoop.hbase.catalog.MetaEditor:
Updated row t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9. in region
.META.,,1 with serverName=linux76,60020,1316796517682
2011-09-23 22:34:34,009 INFO
org.apache.hadoop.hbase.regionserver.HRegionServer: Done with post open
deploy taks &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region=t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9.,
daughter=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
2011-09-23 22:34:34,009 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign:
regionserver:60020-0x1328ceaa1ff0037 Attempting to transition node
2d06b3ca4d398ec96920ae86441a68c9 from RS_ZK_REGION_OPENING to
RS_ZK_REGION_OPENED
2011-09-23 22:34:34,038 WARN
org.apache.hadoop.hbase.regionserver.handler.OpenRegionHandler: Completed
the OPEN of region t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9. but
when transitioning from  OPENING to OPENED got a version mismatch, someone
&lt;span class=&quot;code-keyword&quot;&gt;else&lt;/span&gt; clashed so now unassigning -- closing region
2011-09-23 22:34:34,038 DEBUG org.apache.hadoop.hbase.regionserver.HRegion:
Closing t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9.: disabling
compactions &amp;amp; flushes
2011-09-23 22:34:34,038 DEBUG org.apache.hadoop.hbase.regionserver.HRegion:
Updates disabled &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region
t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9.
2011-09-23 22:34:34,038 DEBUG org.apache.hadoop.hbase.regionserver.Store:
closed f5
2011-09-23 22:34:34,038 INFO org.apache.hadoop.hbase.regionserver.HRegion:
Closed t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9.

RS2
===
2011-09-23 22:33:56,546 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign:
regionserver:60020-0x1328ceaa1ff0039 Successfully transitioned node
2d06b3ca4d398ec96920ae86441a68c9 from RS_ZK_REGION_OPENING to
RS_ZK_REGION_OPENING
2011-09-23 22:33:56,845 INFO
org.apache.hadoop.hbase.regionserver.HRegionServer: Post open deploy tasks
&lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region=t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9.,
daughter=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
2011-09-23 22:33:56,845 INFO
org.apache.hadoop.hbase.regionserver.HRegionServer: addToOnlineRegions is
doneREGION =&amp;gt; {NAME =&amp;gt;
&apos;t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9.&apos;, TableName =&amp;gt; &apos;t5&apos;,
STARTKEY =&amp;gt; &apos;&apos;, ENDKEY =&amp;gt; &apos;&apos;, ENCODED =&amp;gt; 2d06b3ca4d398ec96920ae86441a68c9,}
2011-09-23 22:33:56,856 INFO org.apache.hadoop.hbase.catalog.MetaEditor:
Updated row t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9. in region
.META.,,1 with serverName=linux146,60020,1316796499216
2011-09-23 22:33:56,856 INFO
org.apache.hadoop.hbase.regionserver.HRegionServer: Done with post open
deploy taks &lt;span class=&quot;code-keyword&quot;&gt;for&lt;/span&gt; region=t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9.,
daughter=&lt;span class=&quot;code-keyword&quot;&gt;false&lt;/span&gt;
2011-09-23 22:33:58,887 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign:
regionserver:60020-0x1328ceaa1ff0039 Attempting to transition node
2d06b3ca4d398ec96920ae86441a68c9 from RS_ZK_REGION_OPENING to
RS_ZK_REGION_OPENED
2011-09-23 22:33:58,893 DEBUG org.apache.hadoop.hbase.zookeeper.ZKAssign:
regionserver:60020-0x1328ceaa1ff0039 Successfully transitioned node
2d06b3ca4d398ec96920ae86441a68c9 from RS_ZK_REGION_OPENING to
RS_ZK_REGION_OPENED
2011-09-23 22:33:58,893 DEBUG
org.apache.hadoop.hbase.regionserver.handler.OpenRegionHandler: Opened
t5,,1316797380065.2d06b3ca4d398ec96920ae86441a68c9.
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</comment>
                            <comment id="13116032" author="streamy" created="Wed, 28 Sep 2011 00:35:25 +0000"  >&lt;p&gt;I was just discussing this scenario with Dhruba a few days back.  There&apos;s definitely a race condition here and I don&apos;t see a trivial fix.&lt;/p&gt;

&lt;p&gt;We use HLog IO-fencing to ensure that edits don&apos;t slip into an HLog after a server is considered dead by the Master.  But the Master has no way to prevent this META update from slipping in.&lt;/p&gt;

&lt;p&gt;We need to make some modification to how the master can safely timeout an OPENING.  One possibility is for the master to require either an acknowledgment from the RS before moving the region elsewhere or for the RS to die.  It seems unlikely that we will actually see the RS to Master acknowledgment since OPENING taking too long is usually a sign of brokenness or the RS being backed up, I think.  But in any case I&apos;d imagine some kind of OPEN_CANCEL_REQUESTED state that the Master transitions the node to and only when the RS transitions to OPEN_CANCELED or OFFLINE or something, then it&apos;s safe to reassign elsewhere.&lt;/p&gt;

&lt;p&gt;I think this design still has a hole in it though because there are scenarios where the RS doesn&apos;t actually die but for some reason doesn&apos;t OPEN or ack the cancel. &lt;/p&gt;

&lt;p&gt;Another option would be to do the RS performed META edits using a CheckAndPut rather than straight Put.  Or we could move META editing back to the Master where it&apos;s easy to do things atomically &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The CheckAndPut idea is kind of neat but we&apos;d probably have to send more data on the OPEN_RPC.  For example, the existing server start code or server name + start code or something guaranteed unique (guaranteed that a conflicting RS opening stuff wouldn&apos;t be able to use the same thing).  Then the atomicity is on the META region.&lt;/p&gt;</comment>
                            <comment id="13116134" author="ram_krish" created="Wed, 28 Sep 2011 04:24:26 +0000"  >&lt;p&gt;I got this problem for 3 regions before &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4452&quot; title=&quot;Possibility of RS opening a region though tickleOpening fails due to znode version mismatch&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4452&quot;&gt;&lt;del&gt;HBASE-4452&lt;/del&gt;&lt;/a&gt; went in. Now &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4452&quot; title=&quot;Possibility of RS opening a region though tickleOpening fails due to znode version mismatch&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4452&quot;&gt;&lt;del&gt;HBASE-4452&lt;/del&gt;&lt;/a&gt; will definitely reduce the probability of this happening.&lt;/p&gt;
</comment>
                            <comment id="13116139" author="dhruba" created="Wed, 28 Sep 2011 04:32:41 +0000"  >&lt;p&gt;Can somebody pl elaborate any disadvantages if we make the master be the only entity that can update META about where the region is being served from?&lt;/p&gt;</comment>
                            <comment id="13116151" author="mingma" created="Wed, 28 Sep 2011 04:56:54 +0000"  >&lt;p&gt;checkAndPut might work. We will use checkAndPut on both ZK as well as HBase. There are other bugs due to the lack of strong synchronization on the ZK nodes among AssignmentManager and RSs. Here is another scenario for race between AM timeoutMonitor and the first RS&apos;s openRegion operation.&lt;/p&gt;

&lt;p&gt;RS1 successfully transition to OPENED state around the same time as timeoutMonitor kicks in, timeoutMonitor gets data from ZK right before RS1 set it to OPENED, thus timeoutMonitor has RS_ZK_REGION_OPENING and tries to reassign the region. In that case, we will end up with the same region on two RSs.&lt;/p&gt;


&lt;p&gt;Will the followings work?&lt;/p&gt;

&lt;p&gt;1. ZKAssign.transitionNode has some sort of checkAndPut semantics when it tries to enforce the original state is the correct one. However, it isn&apos;t atomic. It first tries to getData from ZK and then compare. Instead, we can use ZK&apos;s checkAndPut API to enforce the atomicity.&lt;br/&gt;
2. Introduce a ZK-base global AtomicInteger for region operation; e.g., each openRegion operation will use a new incremental region_operation_ID. Each openRegion operation will validate its own ID with ZK state via checkAndPut. Thus one of the two openRegion operations on RSs won&apos;t work.&lt;br/&gt;
3. With regard to HBase .META. update, we can put region_operation_ID into the table and enforce new update&apos;s region operation ID has to be greater than the previous version for a given region. In that way the older RS won&apos;t be able to update the table properly. We will need to introduce a new API for HBase, similar to checkAndPut, more like checkGreaterandPut.&lt;/p&gt;</comment>
                            <comment id="13116160" author="ram_krish" created="Wed, 28 Sep 2011 05:12:50 +0000"  >&lt;p&gt;I am not aware of ZK much.&lt;br/&gt;
Your 3rd point looks good to me Ming.&lt;br/&gt;
I think &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4015&quot; title=&quot;Refactor the TimeoutMonitor to make it less racy&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4015&quot;&gt;&lt;del&gt;HBASE-4015&lt;/del&gt;&lt;/a&gt; may handle the race you have told above.&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (hijack &amp;amp;&amp;amp; &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt; != curDataInZNode) {
        EventType eventType = curDataInZNode.getEventType();
        &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (eventType.equals(EventType.RS_ZK_REGION_CLOSING)
            || eventType.equals(EventType.RS_ZK_REGION_CLOSED)
            || eventType.equals(EventType.RS_ZK_REGION_OPENED)) {
          &lt;span class=&quot;code-keyword&quot;&gt;return&lt;/span&gt; -1;
        }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Also if the timeout succeeds the transiting from OPENING to OPENED will fail in RS.&lt;br/&gt;
May be there may be an entry in META with the old RS.&lt;/p&gt;</comment>
                            <comment id="13116232" author="mingma" created="Wed, 28 Sep 2011 06:35:45 +0000"  >&lt;p&gt;ok, Ram.&lt;/p&gt;

&lt;p&gt;Add some more clarification.&lt;/p&gt;

&lt;p&gt;1. It looks ZKAssign.transitionNode has provided atomicity via &quot;expected version&quot; feature in ZK. So we are good here.&lt;br/&gt;
2. Global AtomicInteger isn&apos;t necessary in this context, we can just use the &quot;expected version&quot; from ZK for a given ZNode, given &quot;expected version&quot; just need to be unique on a given ZNode, not global.&lt;br/&gt;
3. With regard to HBase .META. update, we can put &quot;expected version&quot; as ID into the .META. table and enforce new update&apos;s ID has to be greater than the previous version for a given region via some new HBase API checkGreaterAndPut. This ID value is local to the region node, that should be ok; for a given region node, this value will increment all the time. Currently this &quot;expected version&quot; is passed via RPC RegionOpeningState openRegion(HRegionInfo region, int versionOfOfflineNode). Will that address the issue, Jonathan?&lt;/p&gt;



&lt;p&gt;Jonathan Dhruba&apos;s suggestion is interesting. Could scale be an issue when HBase scales to the next level in terms of number of machines, number of regions and number of region movements? .META. table will be distributed to different RSs, putting it on the Master could be a bottleneck. However, we might first run into other more important issues in such large scale.&lt;/p&gt;</comment>
                            <comment id="13116255" author="mingma" created="Wed, 28 Sep 2011 07:13:33 +0000"  >&lt;p&gt;Did some testing on ZK, my assumption that the ZK&apos;s data version is incremental post node deletion is incorrect. So perhaps we still some global AtomicLong based on ZK.&lt;/p&gt;</comment>
                            <comment id="13116267" author="ram_krish" created="Wed, 28 Sep 2011 07:34:35 +0000"  >&lt;p&gt;@Ming&lt;/p&gt;

&lt;p&gt;The &quot;expected version&quot; of an znode will not increase once the node gets deleted.&lt;br/&gt;
Like if the region gets balanced then a new znode wil be created then we will have the expected version as 0 again.&lt;/p&gt;</comment>
                            <comment id="13116272" author="ram_krish" created="Wed, 28 Sep 2011 07:41:07 +0000"  >&lt;p&gt;@Ming I did not see your latest comment. As i had not refreshed.&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;
</comment>
                            <comment id="13116498" author="yuzhihong@gmail.com" created="Wed, 28 Sep 2011 14:03:04 +0000"  >&lt;p&gt;Ming&apos;s idea @ 28/Sep/11 04:56, especially point 3 is interesting.&lt;br/&gt;
I like that for long term solution.&lt;br/&gt;
We need to be careful writing migration code to accommodate the new operation Id.&lt;/p&gt;</comment>
                            <comment id="13116524" author="ram_krish" created="Wed, 28 Sep 2011 14:49:21 +0000"  >&lt;p&gt;As Ming suggested &lt;br/&gt;
we can generate an incremental integer at the master side which will be generated per region and pass that value over RPC which we can be checked before updating the META.&lt;/p&gt;

&lt;p&gt;This value can be maintained in the master side in a map with region as the key.&lt;/p&gt;
</comment>
                            <comment id="13116525" author="streamy" created="Wed, 28 Sep 2011 14:51:16 +0000"  >&lt;p&gt;I don&apos;t think we can use the same ID as the ZK node.  But we could just some incrementing number.&lt;/p&gt;

&lt;p&gt;An alternative would be to instead allow the roll-back of the META edit using a checkAndDelete which might be simpler but less optimal.&lt;/p&gt;</comment>
                            <comment id="13116603" author="stack" created="Wed, 28 Sep 2011 17:05:23 +0000"  >&lt;p&gt;@Dhruba We could have master do the edit.  The edit would not then outside of the open transaction (unless we added new state(s)).  We&apos;d need to make sure no holes between the receipt of the OPENED zk event in master and successful update of meta.&lt;/p&gt;

&lt;p&gt;Problem is that the meta edits can&apos;t be aborted.  I like the idea of checkAndSet.  For checkAndSet to work, we have to first read meta to have a value to checkAndSet against?  Rather than keep a running incrementing id in master (which we&apos;d have to have master shove out into meta), for the open transaction over on the RS, the first thing we could do is read current meta values to use checkAndSetting; we&apos;d only need to read the server startcode and its timestamp?&lt;/p&gt;
</comment>
                            <comment id="13116695" author="streamy" created="Wed, 28 Sep 2011 18:57:31 +0000"  >&lt;p&gt;startcode and timestamp is what i initially thought of.  seems like there could be some weird situations.  for example, what is to say that the server already in META didn&apos;t somehow become the new assignment destination?&lt;/p&gt;

&lt;p&gt;or what if... M tells RS1 to OPEN R1 and to expect RS3:StartCode3 in META.  RS1 locks up right before doing the META edit, M tells RS2 to OPEN R1 and to also expect RS3:StartCode3 in META.  I guess this is the atomicity we need, so that should be okay.&lt;/p&gt;

&lt;p&gt;one neat idea would be to introduce this region assignment incrementing ID into META.  it would provide a nice way to debug the movement of a region across the cluster over time and could also provide the necessary info to use CheckAndPut.&lt;/p&gt;</comment>
                            <comment id="13116721" author="stack" created="Wed, 28 Sep 2011 19:31:03 +0000"  >&lt;blockquote&gt;&lt;p&gt;startcode and timestamp is what i initially thought of. seems like there could be some weird situations. for example, what is to say that the server already in META didn&apos;t somehow become the new assignment destination?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The timestamp will be different in this case? (It&apos;ll have been updated by the new open).&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;or what if... M tells RS1 to OPEN R1 and to expect RS3:StartCode3....&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I&apos;m not suggesting the master tell the RS anything new.  I&apos;m suggesting that on receiving the open, the RS itself read .META. at start of the open transaction before it does anything else and use this read as input for the later checkAndSet write.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;one neat idea would be to introduce this region assignment incrementing ID into META. it would provide a nice way to debug the movement of a region across the cluster over time and could also provide the necessary info to use CheckAndPut.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;This could work.  Downsides are M has to write meta first before doing assign which will be a bit of new burden on meta (double&apos;d write load?) and this new write is now inline with an assign; we&apos;d have to do some hackery in here around bulk assign.&lt;/p&gt;</comment>
                            <comment id="13116727" author="stack" created="Wed, 28 Sep 2011 19:40:35 +0000"  >&lt;p&gt;I just checked the checkAndPut.  It doesn&apos;t expose timestamp.  So.  Fix checkAndPut so it exposes timestamp or write timestamp or uuid to meta into a new column info:editid whenever we do the metadata open update (I&apos;d prefer adding a checkAndPut override &amp;#8211; seems like a hole in checkAndPut that we don&apos;t allow version checking).&lt;/p&gt;</comment>
                            <comment id="13116729" author="streamy" created="Wed, 28 Sep 2011 19:42:20 +0000"  >&lt;p&gt;Sounds like it could work.  I&apos;m +1 on exposing version to checkAndPut and using it for META edits.  Good point, we can just do the read on the RS first.&lt;/p&gt;</comment>
                            <comment id="13116740" author="yuzhihong@gmail.com" created="Wed, 28 Sep 2011 19:54:17 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4507&quot; title=&quot;Create checkAndPut variant that exposes timestamp / UUID&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4507&quot;&gt;&lt;del&gt;HBASE-4507&lt;/del&gt;&lt;/a&gt; has been opened.&lt;/p&gt;</comment>
                            <comment id="13116981" author="mingma" created="Thu, 29 Sep 2011 03:33:32 +0000"  >&lt;p&gt;Using startcode and timestamp is a good idea. However, I want to confirm if there is a case where it won&apos;t work. Given there is no such thing as global clock, the timestamp value generated by the RS that hosts .META. region at that moment might not be unique if .META. region is moved to another RS. So there is a possibility of &quot;startcode and timestamp is what i initially thought of. seems like there could be some weird situations. for example, what is to say that the server already in META didn&apos;t somehow become the new assignment destination?&quot;. Here is how:&lt;/p&gt;

&lt;p&gt;1. For a given region, .META. table has RS1 as RS serverName, T1 as timestamp value. &lt;/p&gt;
{ RS1, T1 }
&lt;p&gt;2. .META. is moved to another RS whose clock is behind after the original RS that wrote &lt;/p&gt;
{RS1, T1}.&lt;br/&gt;
3. RS2 starts openRegion first, it has an older ZK node version to check. RS1 start openRegion later. It has an up-to-date ZK node version.&lt;br/&gt;
4. Both RS2 and RS1 are about the do checkAndPut on .META. table.  Both will use {RS1, T1}
&lt;p&gt; as condition for checkAndPut.&lt;br/&gt;
5. RS1 updates it first, it succeeds. There is a chance that after the update, the value is still &lt;/p&gt;
{RS1, T1}, given T1 is generated by a RS whose clock is behind.&lt;br/&gt;
6. RS2 updates it next, it also succeeds, given {RS1, T1}
&lt;p&gt; hasn&apos;t change even RS1 makes an update earlier.&lt;br/&gt;
7. RS1 has the up-to-date ZK node version, thus it will continue and succeeds with the rest of open operatioin. The region is considered OPENED from AM&apos;s point of view.&lt;br/&gt;
8. RS2 has older ZK node version, thus will fail later when it tries to update ZK node. Region won&apos;t be opened on RS2.&lt;br/&gt;
9. In .META. table, the region is on RS2.&lt;/p&gt;


&lt;p&gt;Adding support for version check in checkAndPut should address such scenario.&lt;/p&gt;


&lt;p&gt;Regarding the &quot;region assignment ID&quot; approach:&lt;/p&gt;

&lt;p&gt;1. I didn&apos;t imply it will only be incremented by the Master. I suggested a ZK-based AtomicLong that Master and all RSs can get hold off. So this could be considered a global clock.&lt;br/&gt;
2. Such ID could also help to track all the region transition events, &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4354&quot; title=&quot;track region history&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4354&quot;&gt;&lt;del&gt;HBASE-4354&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;
</comment>
                            <comment id="13117007" author="stack" created="Thu, 29 Sep 2011 05:17:31 +0000"  >&lt;p&gt;Good stuff Ming.&lt;/p&gt;

&lt;p&gt;Looking at your pathological case, I think it is possible.  I could add to the checkAndPut that takes a version a check that we never write back the same version; if the version we are checking will go in with a timestamp that is exactly what we are checking, add a millisecond (especially if the value we write back is the same again).&lt;/p&gt;

&lt;p&gt;I think we should do this though the probability of the scenario your postulate is extremely low.&lt;/p&gt;

&lt;p&gt;Why would RSs need access to a global counter?  Master assigns.  It&apos;d need to keep its running counter in zk in case it crashed but I&apos;d think only the assigner would need to use it (Here are some notes on counter in zk from zk mailing list: &lt;a href=&quot;http://www.mail-archive.com/zookeeper-user@hadoop.apache.org/msg01968.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://www.mail-archive.com/zookeeper-user@hadoop.apache.org/msg01968.html&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Would this counter be other than ephemeral data?  Design dictum up to this has been that zk is for ephemeral data only.  Would keeping a counter change that?&lt;/p&gt;

&lt;p&gt;Does the &apos;region assignment id&apos; need to monotonically increase?  Can it just be unique (uuid?)?&lt;/p&gt;

&lt;p&gt;Good stuff Ming.&lt;/p&gt;


</comment>
                            <comment id="13117617" author="jiraposter@reviews.apache.org" created="Thu, 29 Sep 2011 21:09:45 +0000"  >
&lt;p&gt;-----------------------------------------------------------&lt;br/&gt;
This is an automatically generated e-mail. To reply, visit:&lt;br/&gt;
&lt;a href=&quot;https://reviews.apache.org/r/2118/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2118/&lt;/a&gt;&lt;br/&gt;
-----------------------------------------------------------&lt;/p&gt;

&lt;p&gt;Review request for hbase.&lt;/p&gt;


&lt;p&gt;Summary&lt;br/&gt;
-------&lt;/p&gt;

&lt;p&gt;Adds a checkAndPut that takes a timestamp&lt;/p&gt;


&lt;p&gt;This addresses bug hbase-4497.&lt;br/&gt;
    &lt;a href=&quot;https://issues.apache.org/jira/browse/hbase-4497&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/hbase-4497&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Diffs&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;  src/main/java/org/apache/hadoop/hbase/ipc/HRegionInterface.java 3679c02 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java 7cbdb98 &lt;br/&gt;
  src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java 0c06f4f &lt;br/&gt;
  src/test/java/org/apache/hadoop/hbase/regionserver/TestHRegion.java 99b34cc &lt;/p&gt;

&lt;p&gt;Diff: &lt;a href=&quot;https://reviews.apache.org/r/2118/diff&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://reviews.apache.org/r/2118/diff&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Testing&lt;br/&gt;
-------&lt;/p&gt;


&lt;p&gt;Thanks,&lt;/p&gt;

&lt;p&gt;Michael&lt;/p&gt;
</comment>
                            <comment id="13117881" author="mingma" created="Fri, 30 Sep 2011 04:51:52 +0000"  >&lt;p&gt;1. Agree checkAndPut solution is good enough. I am just trying to find holes here.&lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;br/&gt;
2. Does RS need to have access to global counter? If it is only for region assignment scenario, agree there is no such need. I initially thought of it as a &quot;region operation id&quot; where RS will also get a new ID when state changes, for example from OPENING to OPENED. We will use such counter to track every region state change in the system.&lt;br/&gt;
3. Persistent .vs. ephemeral. I thought there will be a way to provide reliable ZK based AtomicLong that can survive HBase, ZK reliable restart. That will give us a good pictures of the event sequence in the system. Performance isn&apos;t that important given region state happens less frequently.&lt;br/&gt;
4. unique .vs. monotonically increase. For this issue, unique number seems to be fine. I thought it might be used in other context to track event sequence. So monotonically increase is better given the comparison of two values can indicate the order in time dimension. It doesn&apos;t have to be sequential.&lt;/p&gt;</comment>
                            <comment id="13118539" author="stack" created="Fri, 30 Sep 2011 22:46:05 +0000"  >&lt;p&gt;So if doesn&apos;t need to be monotonically increasing &amp;#8211; it&apos;d be nice but not necessary and monotonically increasing id for a cluster is a bit of a pain to do &amp;#8211; how about we do this (the below this comes of Todd input over in 4507 and from the back and forth above):&lt;/p&gt;

&lt;p&gt;From here on out, every edit of meta will also update a new column, info:editid.  This info:editid will hold a UUID generated by the client making the edit.&lt;/p&gt;

&lt;p&gt;On open of a region, the open runs as it currently does with following additions:&lt;/p&gt;

&lt;p&gt;+ Just after the regionserver has moved the znode to OPENING the first time confirming it &apos;owns&apos; the region, the RS reads the current info:editid value.&lt;br/&gt;
+ After opening the region, when we go to update the regions location in meta, the RS will do a checkAndPut where the check checks the info:editid value.&lt;/p&gt;

&lt;p&gt;Hows that?&lt;/p&gt;</comment>
                            <comment id="13118546" author="yuzhihong@gmail.com" created="Fri, 30 Sep 2011 22:56:52 +0000"  >&lt;p&gt;+1 on the plan above.&lt;br/&gt;
This info:editid would be helpful in debugging as well.&lt;/p&gt;</comment>
                            <comment id="13118617" author="dhruba" created="Sat, 1 Oct 2011 01:20:28 +0000"  >&lt;p&gt;Stack: the proposal looks solid.&lt;/p&gt;</comment>
                            <comment id="14267790" author="clehene" created="Wed, 7 Jan 2015 15:55:13 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=saint.ack%40gmail.com&quot; class=&quot;user-hover&quot; rel=&quot;saint.ack@gmail.com&quot;&gt;Stack&lt;/a&gt; is this still valid? &lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                            <subtask id="12525094">HBASE-4507</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 27 Sep 2011 18:38:10 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>33587</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year, 49 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i02ctj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>11678</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>