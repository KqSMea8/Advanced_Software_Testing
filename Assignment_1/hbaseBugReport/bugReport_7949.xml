<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:50:37 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7949/HBASE-7949.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7949] Enable big content store in HBase</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7949</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;Big content stored in hbase consumes a lot of system resource when region split or compaction operation happens.&lt;/p&gt;

&lt;p&gt;How HBase can be used to store big content along with some self descriptive meta-data. &lt;/p&gt;

&lt;p&gt;The general idea is to add a new type of column family, and the content of this kind of column family doesn&apos;t participate the region split and compaction. An index(rowkey-location) is introduced in this new column family and the split and compaction are only applied to this index.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12634347">HBASE-7949</key>
            <summary>Enable big content store in HBase</summary>
                <type id="13" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/genericissue.png">Brainstorming</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="chenning007">chenning</reporter>
                        <labels>
                    </labels>
                <created>Wed, 27 Feb 2013 03:15:28 +0000</created>
                <updated>Wed, 10 Jul 2013 18:43:39 +0000</updated>
                            <resolved>Wed, 10 Jul 2013 18:43:39 +0000</resolved>
                                                                        <due></due>
                            <votes>1</votes>
                                    <watches>17</watches>
                                                                                                            <comments>
                            <comment id="13587993" author="apurtell" created="Wed, 27 Feb 2013 04:40:41 +0000"  >&lt;p&gt;Lowering priority to major, the default. It might be appropriate to raise it at some future time but normally &apos;critical&apos; (or above) is reserved for bug fixes for a serious problem or if the issue is deemed very important for a particular release.&lt;/p&gt;</comment>
                            <comment id="13588006" author="chenning007" created="Wed, 27 Feb 2013 05:15:56 +0000"  >&lt;p&gt;Andrew,&lt;/p&gt;

&lt;p&gt;It&apos;s my first time to raise issue in Jira, so I don&apos;t know the convention, thank you for the adjustment.&lt;/p&gt;
</comment>
                            <comment id="13588012" author="lhofhansl" created="Wed, 27 Feb 2013 05:22:42 +0000"  >&lt;p&gt;Is this similar in principle to storing the content directly in the filesystem and just a location in HBase?&lt;/p&gt;</comment>
                            <comment id="13588020" author="chenning007" created="Wed, 27 Feb 2013 05:34:42 +0000"  >&lt;p&gt;I think the content itself should be stored in filesystem as file or the aggregated file, Hbase stores a location or location/offset information. The application built on top of HBase or HDFS can implement it too, however,the implementation in HBase level can simplify the application and leverage some good mechanisms of HBase. &lt;/p&gt;</comment>
                            <comment id="13595510" author="maryannxue" created="Thu, 7 Mar 2013 03:35:19 +0000"  >&lt;p&gt;At the recent hbase meetup, we just gave an introduction of an implementation for storing large objects.&lt;br/&gt;
The idea is to store the real content onto HDFS and let customized major compaction for this family handle the management work for these large contents.&lt;br/&gt;
And we need a customizable flush() process for this approach.&lt;/p&gt;</comment>
                            <comment id="13596439" author="enis" created="Thu, 7 Mar 2013 21:57:26 +0000"  >&lt;p&gt;Thanks for working on this. I think this is an important problem, and will enable HBase for new use cases. However, I feel like we should fix the core issues that prevents this use case from stock HBase, rather than writing a fairly complex flush + compaction policy just for LOBs. I guess, you mentioned that with custom compaction policy, the problem is with region splits. Can you elaborate on that? There is also a problem because of lack of streaming RPC, but the issue is also there in your proposal. &lt;/p&gt;</comment>
                            <comment id="13596880" author="maryannxue" created="Fri, 8 Mar 2013 06:31:56 +0000"  >&lt;p&gt;@Enis well, the constant reading and writing of the same set of large content data happens in two ways: compaction and split.&lt;br/&gt;
1. during compaction, the data is read from small files and writing to a combined new large file.&lt;br/&gt;
2. during split, the data is read from the parent region storefiles and written into two daughter regions&apos; storefiles.&lt;/p&gt;

&lt;p&gt;to avoid I/O overhead caused by 1 (compaction), we can disable minor compaction for this family, but this would lead to another big problem: bad get/scan performance. like for a get operation, we need to compare against too many bloomfilters for each storefile to locate our record; and for a scan operation, we need to perform seek in all these storefiles. the performance decline of &quot;Get&quot; throughput with the storefile number increase is shown in the slides.&lt;/p&gt;

&lt;p&gt;to avoid I/O overhead caused by 2 (split), we can have pre-split regions for a table, but this cannot always be done for customer use-cases.&lt;/p&gt;

&lt;p&gt;The idea is large content data are very probably loaded once and not frequently modified, there is literally no need to move or merge the data all the time, as would happen in normal region compactions and splittings&#65292; and in order to maintain region independence and read efficiency.&lt;br/&gt;
so having a storage independent of hbase regions would make sense for such use-cases, and meanwhile we leverage the major compaction process to do cleanup and merge at a reasonable frequency level &amp;#8211; only perform merge when a certain file has exceeded the configured threshold.&lt;/p&gt;</comment>
                            <comment id="13596923" author="chenning007" created="Fri, 8 Mar 2013 07:43:51 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=maryannxue&quot; class=&quot;user-hover&quot; rel=&quot;maryannxue&quot;&gt;Maryann Xue&lt;/a&gt;thanks for the sides on this issue. &lt;/p&gt;

&lt;p&gt;I have one question &amp;#8211; why the content for lob family still goes into memstore and flushed into HDFS? Since I think the content will occupy more memory and result in more frequent flushes and minor compactions? &lt;/p&gt;

&lt;p&gt;My idea is to persisted the content directly into HDFS, but maybe this will involve more complexities in regionserver to handle the consistency, the orphans, and row atomic etc.&lt;/p&gt;</comment>
                            <comment id="13596929" author="maryannxue" created="Fri, 8 Mar 2013 07:53:22 +0000"  >&lt;p&gt;yes, you&apos;ve made a good point here. flush would happen more frequently and compactions for the meta data family will involve more small storefiles. however,&lt;br/&gt;
1. this approach best guarantees consistency.&lt;br/&gt;
2. several large content records get flushed into one file in one process, which means more efficient I/O usage.&lt;br/&gt;
3. meta data is very small compared to large content data. moreover, one minor compaction can handle a bunch of small meta data storefiles.&lt;/p&gt;</comment>
                            <comment id="13597018" author="chenning007" created="Fri, 8 Mar 2013 11:01:56 +0000"  >&lt;p&gt;The solution makes sensen to me if the content is not big enough. I am curious on the  performance of the split, how long the region can be splitted, my understanding the lob family should participate the region split, and  the region is unavailable during this period.&lt;/p&gt;</comment>
                            <comment id="13597431" author="enis" created="Fri, 8 Mar 2013 19:29:42 +0000"  >&lt;p&gt;1. during compaction, the data is read from small files and writing to a combined new large file.&lt;br/&gt;
But you still want compactions, but maybe not as frequent. Can&apos;t this be achieved with having the same compaction policy, but with different tuning? Since you still want to get rid of deleted LOB&apos;s and merge small files, you should not disable compactions, but maybe we need a LOB optimized compaction policy.&lt;br/&gt;
2. during split, the data is read from the parent region storefiles and written into two daughter regions&apos; storefiles.&lt;br/&gt;
No, during split, we do not rewrite the data, but only create reference files. Split triggers a compaction, which happens later. See &lt;a href=&quot;http://hortonworks.com/blog/apache-hbase-region-splitting-and-merging/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://hortonworks.com/blog/apache-hbase-region-splitting-and-merging/&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;like for a get operation, we need to compare against too many bloomfilters for each storefile to locate our record; and for a scan operation, we need to perform seek in all these storefiles.... The idea is large content data are very probably loaded once and not frequently modified, there is literally no need to move or merge the data all the time, as would happen in normal region compactions and splittings&#65292; and in order to maintain region independence and read efficiency&lt;br/&gt;
It seems what we need here is to have possible large number of files and do less compactions, but have those files in range partitioned within the region. I highly recommend to take a look at stripe compactions / level compactions issue (&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-7667&quot; title=&quot;Support stripe compaction&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-7667&quot;&gt;&lt;del&gt;HBASE-7667&lt;/del&gt;&lt;/a&gt;). &lt;/p&gt;</comment>
                            <comment id="13598642" author="maryannxue" created="Mon, 11 Mar 2013 08:36:22 +0000"  >&lt;p&gt;@chenning, as enis has clarified, the actual data move does not happen on the split point. instead, it happens in later compactions. and in the approach we proposed, the LOB family does not participate in split or minor compactions at all.&lt;/p&gt;

&lt;p&gt;@enis, the problem is not when the read and write happens, it is more of the unnecessary I/O overhead in splitting. and if the data is seldom updated, why compact them (for split) anyway?&lt;/p&gt;

&lt;p&gt;yes, utilizing level compactions could be a good approach. still, our approach can have three advantages over level compaction: &lt;br/&gt;
1. i/o overhead by split and minor compactions are completely eliminated; &lt;br/&gt;
2. clean-up is only done for those file that has reached a certain level of invalidation rate, during major compactions;&lt;br/&gt;
3. not every file reader is instantiated and kept in regionserver memory. instead, we&apos;ll have an LRU cache for frequently read LOB files.&lt;/p&gt;

&lt;p&gt;however, i suggest this issue not be committed into HBase trunk. instead we&apos;d like to make the implementation a use case over HBase. and the only facility we need in HBase trunk is a pluggable flush process &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8024&quot; title=&quot;Make Store flush algorithm pluggable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8024&quot;&gt;&lt;del&gt;HBASE-8024&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                            <comment id="13598652" author="apurtell" created="Mon, 11 Mar 2013 08:51:48 +0000"  >&lt;blockquote&gt;&lt;p&gt;i suggest this issue not be committed into HBase trunk. instead we&apos;d like to make the implementation a use case over HBase. and the only facility we need in HBase trunk is a pluggable flush process &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8024&quot; title=&quot;Make Store flush algorithm pluggable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8024&quot;&gt;&lt;del&gt;HBASE-8024&lt;/del&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;+1, agree with Maryann, let&apos;s consider making &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8024&quot; title=&quot;Make Store flush algorithm pluggable&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8024&quot;&gt;&lt;del&gt;HBASE-8024&lt;/del&gt;&lt;/a&gt; an Improvement issue and close this one, it lacks focus.&lt;/p&gt;</comment>
                            <comment id="13704901" author="sershe" created="Wed, 10 Jul 2013 18:43:39 +0000"  >&lt;p&gt;resolving as suggested earlier&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12572482" name="HBase_LOB.pdf" size="1103397" author="maryannxue" created="Thu, 7 Mar 2013 03:35:19 +0000"/>
                    </attachments>
                <subtasks>
                            <subtask id="12635792">HBASE-8024</subtask>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Wed, 27 Feb 2013 04:40:41 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>314840</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 23 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1ibvr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>315184</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>