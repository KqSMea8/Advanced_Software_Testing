<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 20:43:08 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-13420/HBASE-13420.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-13420] RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load</title>
                <link>https://issues.apache.org/jira/browse/HBASE-13420</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;The ArrayBlockingQueue blocks threads for 20s during a performance run focusing on creating numerous small scans.  &lt;/p&gt;

&lt;p&gt;I see a buffer size of (100)&lt;/p&gt;

&lt;p&gt;    private final BlockingQueue&amp;lt;Long&amp;gt; coprocessorTimeNanos = new ArrayBlockingQueue&amp;lt;Long&amp;gt;(&lt;br/&gt;
        LATENCY_BUFFER_SIZE);&lt;/p&gt;

&lt;p&gt;and then I see a drain coming from&lt;br/&gt;
         MetricsRegionWrapperImpl with 45 second executor&lt;br/&gt;
         HRegionMetricsWrapperRunable&lt;br/&gt;
         RegionCoprocessorHost#getCoprocessorExecutionStatistics()   &lt;br/&gt;
         RegionCoprocessorHost#getExecutionLatenciesNanos()&lt;/p&gt;

&lt;p&gt;Am I missing something?&lt;/p&gt;
</description>
                <environment></environment>
        <key id="12819065">HBASE-13420</key>
            <summary>RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load</summary>
                <type id="4" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/improvement.png">Improvement</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="apurtell">Andrew Purtell</assignee>
                                    <reporter username="jleach">John Leach</reporter>
                        <labels>
                    </labels>
                <created>Tue, 7 Apr 2015 20:43:53 +0000</created>
                <updated>Fri, 18 Dec 2015 04:45:19 +0000</updated>
                            <resolved>Thu, 30 Apr 2015 21:22:24 +0000</resolved>
                                                    <fixVersion>2.0.0</fixVersion>
                    <fixVersion>0.98.13</fixVersion>
                    <fixVersion>1.0.2</fixVersion>
                    <fixVersion>1.2.0</fixVersion>
                    <fixVersion>1.1.1</fixVersion>
                                    <component>Coprocessors</component>
                    <component>metrics</component>
                    <component>Performance</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>13</watches>
                                    <timeoriginalestimate seconds="10800">3h</timeoriginalestimate>
                            <timeestimate seconds="10800">3h</timeestimate>
                                        <comments>
                            <comment id="14484011" author="jleach" created="Tue, 7 Apr 2015 20:44:44 +0000"  >&lt;p&gt;Document showing blocked threads during RegionEnvironment#offerExecutionLatency&lt;/p&gt;</comment>
                            <comment id="14484178" author="jleach" created="Tue, 7 Apr 2015 22:02:23 +0000"  >&lt;p&gt;Simple remove of metric capture for coprocessors.  &lt;/p&gt;</comment>
                            <comment id="14484180" author="jleach" created="Tue, 7 Apr 2015 22:02:44 +0000"  >&lt;p&gt;Patch Submitted to simply remove the calculation.&lt;/p&gt;</comment>
                            <comment id="14484235" author="apurtell" created="Tue, 7 Apr 2015 22:35:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;Simple remove of metric capture for coprocessors.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;We could do that but only where we can make breaking changes. To fix it everywhere, the right fix is to stop collecting coprocessor execution latency samples after the queue is full. &lt;/p&gt;</comment>
                            <comment id="14484256" author="apurtell" created="Tue, 7 Apr 2015 22:49:13 +0000"  >&lt;p&gt;Pardon, we are in fact using &lt;tt&gt;offer&lt;/tt&gt; not &lt;tt&gt;put&lt;/tt&gt; so this isn&apos;t quite as dumb as I feared. We only need an approximate metric here so let me look into alternatives to ArrayBlockingQueue, which has one lock guarding all access.&lt;/p&gt;</comment>
                            <comment id="14484354" author="apurtell" created="Tue, 7 Apr 2015 23:41:38 +0000"  >&lt;p&gt;Maybe something like this? Rather than gang up on a lock we use a volatile to approximately enforce a maximum queue depth, with remaining overhead the CAS stuff that ConcurrentLinkedQueue does.&lt;/p&gt;</comment>
                            <comment id="14484367" author="apurtell" created="Tue, 7 Apr 2015 23:46:20 +0000"  >&lt;p&gt;We could also just use a ConcurrentLinkedQueue but I&apos;d worry about its unbounded nature.&lt;/p&gt;</comment>
                            <comment id="14484419" author="hadoopqa" created="Wed, 8 Apr 2015 00:25:27 +0000"  >&lt;p&gt;&lt;font color=&quot;red&quot;&gt;-1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12723752/HBASE-13420.txt&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12723752/HBASE-13420.txt&lt;/a&gt;&lt;br/&gt;
  against master branch at commit af44f79cdfe6e8748990220a8c2e52d3faea80d9.&lt;br/&gt;
  ATTACHMENT ID: 12723752&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;red&quot;&gt;-1 tests included&lt;/font&gt;.  The patch doesn&apos;t appear to include any new or modified tests.&lt;br/&gt;
                        Please justify why no new tests are needed for this patch.&lt;br/&gt;
                        Also please list what manual steps were performed to verify this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13603//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13603//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13603//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13603//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13603//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13603//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13603//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13603//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14484430" author="apurtell" created="Wed, 8 Apr 2015 00:28:57 +0000"  >&lt;blockquote&gt;&lt;p&gt;-1 tests included. The patch doesn&apos;t appear to include any new or modified tests.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Go home, Jenkins you&apos;re drunk (smile)&lt;/p&gt;</comment>
                            <comment id="14484519" author="jleach" created="Wed, 8 Apr 2015 01:33:30 +0000"  >&lt;p&gt;I think this metric is way to broad to be coherent.  Is it the latency on a postRegionOperation call or a prePut on the observer?  &lt;/p&gt;

&lt;p&gt;The definition of the metric would be:  The first N (100) latencies from any possible coprocessor call for a specific Region Observer refreshed every 45 seconds.  Still working on a clever Acronym...  &lt;/p&gt;

&lt;p&gt;Would it make sense to build an actual bean for each of the observers that actually reports real metrics and is registered in jmx following the signature of the observer?  &lt;/p&gt;

&lt;p&gt;We clearly need a short term fix, but I am concerned we are continuing a metric that really serves no purpose.&lt;/p&gt;

&lt;p&gt;What purpose does this metric serve?        &lt;/p&gt;</comment>
                            <comment id="14484530" author="apurtell" created="Wed, 8 Apr 2015 01:43:09 +0000"  >&lt;p&gt;This was added by &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=srikanth235&quot; class=&quot;user-hover&quot; rel=&quot;srikanth235&quot;&gt;Srikanth Srungarapu&lt;/a&gt; &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-11516&quot; title=&quot;Track time spent in executing coprocessors in each region.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-11516&quot;&gt;&lt;del&gt;HBASE-11516&lt;/del&gt;&lt;/a&gt;. What do you think of John&apos;s point above Srikanth? &lt;/p&gt;

&lt;p&gt;We could remove this in trunk certainly. It would be a functional regression to pull from 0.98 or 1.0 I fear. &lt;/p&gt;</comment>
                            <comment id="14484545" author="hadoopqa" created="Wed, 8 Apr 2015 02:00:20 +0000"  >&lt;p&gt;&lt;font color=&quot;green&quot;&gt;+1 overall&lt;/font&gt;.  Here are the results of testing the latest attachment &lt;br/&gt;
  &lt;a href=&quot;http://issues.apache.org/jira/secure/attachment/12723780/HBASE-13420.patch&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;http://issues.apache.org/jira/secure/attachment/12723780/HBASE-13420.patch&lt;/a&gt;&lt;br/&gt;
  against master branch at commit af44f79cdfe6e8748990220a8c2e52d3faea80d9.&lt;br/&gt;
  ATTACHMENT ID: 12723780&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 @author&lt;/font&gt;.  The patch does not contain any @author tags.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 tests included&lt;/font&gt;.  The patch appears to include 4 new or modified tests.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 hadoop versions&lt;/font&gt;. The patch compiles with all supported hadoop versions (2.4.1 2.5.2 2.6.0)&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javac&lt;/font&gt;.  The applied patch does not increase the total number of javac compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 protoc&lt;/font&gt;.  The applied patch does not increase the total number of protoc compiler warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 javadoc&lt;/font&gt;.  The javadoc tool did not generate any warning messages.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 checkstyle&lt;/font&gt;.  The applied patch does not increase the total number of checkstyle errors&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 findbugs&lt;/font&gt;.  The patch does not introduce any  new Findbugs (version 2.0.3) warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 release audit&lt;/font&gt;.  The applied patch does not increase the total number of release audit warnings.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 lineLengths&lt;/font&gt;.  The patch does not introduce lines longer than 100&lt;/p&gt;

&lt;p&gt;  &lt;font color=&quot;green&quot;&gt;+1 site&lt;/font&gt;.  The mvn site goal succeeds with this patch.&lt;/p&gt;

&lt;p&gt;    &lt;font color=&quot;green&quot;&gt;+1 core tests&lt;/font&gt;.  The patch passed unit tests in .&lt;/p&gt;

&lt;p&gt;Test results: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13605//testReport/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13605//testReport/&lt;/a&gt;&lt;br/&gt;
Release Findbugs (version 2.0.3) 	warnings: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13605//artifact/patchprocess/newFindbugsWarnings.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13605//artifact/patchprocess/newFindbugsWarnings.html&lt;/a&gt;&lt;br/&gt;
Checkstyle Errors: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13605//artifact/patchprocess/checkstyle-aggregate.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13605//artifact/patchprocess/checkstyle-aggregate.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;  Console output: &lt;a href=&quot;https://builds.apache.org/job/PreCommit-HBASE-Build/13605//console&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/PreCommit-HBASE-Build/13605//console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This message is automatically generated.&lt;/p&gt;</comment>
                            <comment id="14484664" author="srikanth235" created="Wed, 8 Apr 2015 03:49:29 +0000"  >&lt;blockquote&gt;
&lt;p&gt;I think this metric is way to broad to be coherent. Is it the latency on a postRegionOperation call or a prePut on the observer?&lt;/p&gt;

&lt;p&gt;The definition of the metric would be: The first N (100) latencies from any possible coprocessor call for a specific Region Observer refreshed every 45 seconds. Still working on a clever Acronym... &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The main intent behind this change is to provide useful information(time taken by all the pre and post hooks) on per-coprocessor basis. Please take a look &lt;a href=&quot;http://hbase.apache.org/book.html#_monitor_time_spent_in_coprocessors&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;here&lt;/a&gt; for more details.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Would it make sense to build an actual bean for each of the observers that actually reports real metrics and is registered in jmx following the signature of the observer? &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This change is geared more towards operations folks to do a quick dirty check whether there are any anomalies introduced by coprocessor modules. Did you notice this perf impact as part of typical average workload or while doing some sort of stress testing? I liked Andrew&apos;s patch as it is takes the middle path. What do you think of it?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We clearly need a short term fix, but I am concerned we are continuing a metric that really serves no purpose.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As Andrew already stated, we clearly can&apos;t pull this from 0.98 or 1.0. So, I&apos;m thinking we can add conf parameter which defaults to true. In your case, you might want to turn it off. &lt;/p&gt;



</comment>
                            <comment id="14485533" author="apurtell" created="Wed, 8 Apr 2015 16:58:29 +0000"  >&lt;blockquote&gt;&lt;p&gt;So, I&apos;m thinking we can add conf parameter which defaults to true. In your case, you might want to turn it off.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We could do that too, but we have a forest of conf parameters already. If the lockless &quot;BoundedConcurrentLinkedQueue&quot; fixes the thread blocking that might resolve this issue, unless it turns up too much in CPU profiles still, then we might consider a switch to just turn it off. Any chance you can patch and retest &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jleach&quot; class=&quot;user-hover&quot; rel=&quot;jleach&quot;&gt;John Leach&lt;/a&gt; ?&lt;/p&gt;</comment>
                            <comment id="14485539" author="jleach" created="Wed, 8 Apr 2015 17:02:38 +0000"  >&lt;p&gt;Andrew,&lt;/p&gt;

&lt;p&gt;Will do for the short term.  Clearly, if we want to display metrics for coprocessors they should display all coprocs and have a scalable meter impl for them we clear understanding of what &quot;execution time&quot; means.&lt;/p&gt;

&lt;p&gt;John&lt;/p&gt;</comment>
                            <comment id="14485547" author="apurtell" created="Wed, 8 Apr 2015 17:05:50 +0000"  >&lt;blockquote&gt;&lt;p&gt;Will do for the short term&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Thanks &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jleach&quot; class=&quot;user-hover&quot; rel=&quot;jleach&quot;&gt;John Leach&lt;/a&gt;. Let me microbench this and the current code and make sure reality lines up with my expectations, then we can commit it. I don&apos;t see why it can&apos;t make it in to the next 0.98.12 release candidate (and up). &lt;/p&gt;

&lt;p&gt;We can definitely revisit this for 1.1 and up. &lt;/p&gt;</comment>
                            <comment id="14486865" author="apurtell" created="Thu, 9 Apr 2015 07:05:10 +0000"  >&lt;p&gt;Here&apos;s what I get with a JMH benchmark on a server with 16 cores, with queue size bounded to 100 entries where supported (ConcurrentLinkedQueue does not), measuring time to offer(), 3 forks, 20 warmup iterations per fork, 10 measured iterations each fork, clearing the queue and running GC after each iteration. (Note this microbenchmark calls offer() many more times than we&#8217;d see in practice, up to 1M invocations per iteration.)&lt;/p&gt;

&lt;p&gt;Measurements in microseconds.&lt;/p&gt;

&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;type&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;threads&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;avg us/op&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;p99 us/op&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;max us/op&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;ArrayBlockingQueue&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.156&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.211&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.648&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.355&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;39.872&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;87.648&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.125&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;94.464&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;152.832&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.053&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;201.984&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;274.944&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;32&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;9.285&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;406.528&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;488.96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;64&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;18.448&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;811.008&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;914.432&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;BoundedConcurrentLinkedQueue&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.148&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.202&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.816&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.508&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.835&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;39.872&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.762&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.558&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;40.256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.957&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.992&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;397.696&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;32&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.047&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.808&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;23986.176&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;64&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.007&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4.616&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;55967.744&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;ConcurrentLinkedQueue&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.177&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.324&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.344&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;4&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0.951&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3.204&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;252.416&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;8&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;1.65&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;6.44&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;347.104&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;16&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.742&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.424&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2953.216&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;32&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.467&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;11.2&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;39976.96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;&amp;nbsp;&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;64&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.797&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;10.896&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;71827.456&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Sampled timings for offer() at percentiles &amp;lt; 1.0 for BoundedConcurrentLinkedQueue are much better than that for ArrayBlockingQueue. &lt;/p&gt;

&lt;p&gt;(Bounded)ConcurrentLinkedQueue measurements have a long tail which lengthens as concurrency is increased. The worst case concurrency we can expect for coprocessors is the configured size of the RPC handler pool.&lt;/p&gt;</comment>
                            <comment id="14487745" author="apurtell" created="Thu, 9 Apr 2015 17:47:57 +0000"  >&lt;p&gt;So what do we think about this? Leave as is or try the BoundedConcurrentLinkedQueue alternative? According to my experiments it will have better behavior under actual conditions, but ConcurrentLinkedQueue does have what looks like an interesting worst case under high concurrency. I&apos;ve attached the JMH harness used for the test if you&apos;d like to reproduce. Maybe your findings are different? If so that would be interesting. (I used an EC2 c3.4xlarge for running the test, FWIW)&lt;/p&gt;

&lt;p&gt;I could also look for a better concurrent structure or roll my own for this use case (bounded sample reservoir at high concurrency). That might be overengineering the problem here though.&lt;/p&gt;</comment>
                            <comment id="14487997" author="lhofhansl" created="Thu, 9 Apr 2015 19:00:38 +0000"  >&lt;p&gt;My gut feeling is to not rush this into 0.98.12 (this jira is not assigned, but going from the notes on the mailing lists), to give us a bit more time for benchmarking. Interestingly this never showed up on the type of perf tests I&apos;m doing (mostly larger scans), maybe that&apos;s expected as it is per RPC overhead.&lt;/p&gt;</comment>
                            <comment id="14488231" author="apurtell" created="Thu, 9 Apr 2015 20:41:03 +0000"  >&lt;p&gt;Ok, for .13 then&lt;/p&gt;</comment>
                            <comment id="14488261" author="enis" created="Thu, 9 Apr 2015 20:56:46 +0000"  >&lt;blockquote&gt;&lt;p&gt;Ok, for .13 then&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let me piggy back on that and defer this to 1.0.2 as well. &lt;/p&gt;</comment>
                            <comment id="14504156" author="apurtell" created="Tue, 21 Apr 2015 01:59:14 +0000"  >&lt;p&gt;I did a quick comparison using LoadTestTool on an all-localhost HDFS+HBase cluster between 0.98.12 and an &quot;0.98.13-SNAPSHOT&quot; which was .12 plus this patch.  The server has 32 GB of RAM and 12 cores, Xeon E5-1660s running at 3.70GHz. All JVMs except the regionserver were given 1 GB heap. The regionserver ran with 8 GB. (No particular reason for that heap size, just reusing a setting from another test.) I installed the AccessController with &quot;hbase.security.authorization&quot; set to false so every region would run with a coprocessor (largely inert) so we&apos;d exercise this change. CMS GC. LoadTestTool arguments: -read 100:10 -write 1:1024:10 -update 20:10 -num_keys 1000000&lt;/p&gt;

&lt;p&gt;&lt;b&gt;0.98.12&lt;/b&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;read&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;update&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;write&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;19831.5102&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;786.3265306&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.285714286&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3929.142857&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.102040816&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;&lt;b&gt;0.98.13-SNAPSHOT&lt;/b&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;read&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;update&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;write&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;19377.10204&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;783.755102&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;5.265306122&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3924.530612&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.102040816&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;Profiles attached. They look almost identical with a quick glance.&lt;/p&gt;

&lt;p&gt;I will run a longer comparison tomorrow with 25M keys.&lt;/p&gt;</comment>
                            <comment id="14506064" author="apurtell" created="Wed, 22 Apr 2015 00:02:05 +0000"  >&lt;blockquote&gt;&lt;p&gt;I will run a longer comparison tomorrow with 25M keys.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I realized today that 25M keys will take far too long, so here&apos;s 5M, which is 5x the amount of data tested yesterday. Test required ~30 minutes to complete each run.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;0.98.12&lt;/b&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;read&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;update&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;write&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;17621.24013&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;655.9144737&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.111842105&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3282.815789&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.657894737&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;&lt;b&gt;0.98.13-SNAPSHOT&lt;/b&gt;&lt;/p&gt;
&lt;table class=&apos;confluenceTable&apos;&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;read&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;update&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;write&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;&amp;nbsp;&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;keys_sec&lt;/th&gt;
&lt;th class=&apos;confluenceTh&apos;&gt;latency_ms&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;17808.00329&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;0&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;655.7697368&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;7.117763158&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;3277.661184&lt;/td&gt;
&lt;td class=&apos;confluenceTd&apos;&gt;2.664473684&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;


&lt;p&gt;There&apos;s some variance, like yesterday where the test showed slightly lower read throughput, today reads are a bit higher and writes are a bit lower. I&apos;d say this change doesn&apos;t degrade performance in an obvious way, and shows better performance for the typical case under microbenchmark.&lt;/p&gt;</comment>
                            <comment id="14507537" author="lhofhansl" created="Wed, 22 Apr 2015 17:48:00 +0000"  >&lt;p&gt;Seems not worth it to me, unless &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jleach4&quot; class=&quot;user-hover&quot; rel=&quot;jleach4&quot;&gt;John Leach&lt;/a&gt; has a more specific use case where we&apos;d see a larger difference.&lt;/p&gt;</comment>
                            <comment id="14507560" author="apurtell" created="Wed, 22 Apr 2015 18:01:30 +0000"  >&lt;blockquote&gt;&lt;p&gt;Seems not worth it to me, unless John Leach has a more specific use case where we&apos;d see a larger difference.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I think you misunderstand Lars. Here are the benchmarks that matter: &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13420?focusedCommentId=14486865&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14486865&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-13420?focusedCommentId=14486865&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14486865&lt;/a&gt; . Sampled timings for offer() at percentiles &amp;lt; 1.0 for BoundedConcurrentLinkedQueue are much better than that for ArrayBlockingQueue. This is on top of John&apos;s original report indicating a problem with the BlockingQueues holding up threads in his test case.&lt;/p&gt;

&lt;p&gt;You then asked for more information. I ran two macro-benchmarks to see if there&apos;s any perf hit. Here &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13420?focusedCommentId=14504156&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14504156&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-13420?focusedCommentId=14504156&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14504156&lt;/a&gt; and here &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13420?focusedCommentId=14506064&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14506064&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://issues.apache.org/jira/browse/HBASE-13420?focusedCommentId=14506064&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14506064&lt;/a&gt; . I&apos;m not seeing any significant degradation. The purpose of these last two tests were not to show some kind of improvement. &lt;/p&gt;</comment>
                            <comment id="14507567" author="apurtell" created="Wed, 22 Apr 2015 18:04:50 +0000"  >&lt;p&gt;Anyway, any +1s? If not I&apos;m going to close as Wont Fix&lt;/p&gt;</comment>
                            <comment id="14507585" author="apurtell" created="Wed, 22 Apr 2015 18:16:37 +0000"  >&lt;p&gt;Looks like &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=mbertozzi&quot; class=&quot;user-hover&quot; rel=&quot;mbertozzi&quot;&gt;Matteo Bertozzi&lt;/a&gt; remarked on &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13529&quot; title=&quot;Procedure v2 - WAL Improvements&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13529&quot;&gt;&lt;del&gt;HBASE-13529&lt;/del&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;ArrayBlockingQueue is dog slow, replace it with ConcurrentLinkedQueue&lt;/p&gt;&lt;/blockquote&gt;</comment>
                            <comment id="14508499" author="lhofhansl" created="Thu, 23 Apr 2015 05:45:17 +0000"  >&lt;p&gt;OH, I see, misunderstood, sorry.&lt;/p&gt;

&lt;p&gt;Reading back in the thread... I don&apos;t see the queue could lock up a thread for 20s at a time, unless we have some pathologically unfair scheduling case. I think in the description we mean the total time spent in this, right?&lt;/p&gt;

&lt;p&gt;Patch is fine. Introducing a new class just for this seems a bit heavy weight, on the other hand I do not see an alternative.&lt;/p&gt;</comment>
                            <comment id="14508504" author="apurtell" created="Thu, 23 Apr 2015 05:51:17 +0000"  >&lt;p&gt;Any thoughts &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=jleach&quot; class=&quot;user-hover&quot; rel=&quot;jleach&quot;&gt;John Leach&lt;/a&gt; ?&lt;/p&gt;</comment>
                            <comment id="14521922" author="apurtell" created="Thu, 30 Apr 2015 17:41:22 +0000"  >&lt;p&gt;Ok, going to commit this today. I will do a careful op latency evaluation on a cluster next week with the AccessController installed, for the next 0.98 RC. If I find an unexpected issue I will revert.&lt;/p&gt;</comment>
                            <comment id="14522286" author="lhofhansl" created="Thu, 30 Apr 2015 21:16:07 +0000"  >&lt;p&gt;+1 on this plan.&lt;/p&gt;</comment>
                            <comment id="14522292" author="apurtell" created="Thu, 30 Apr 2015 21:22:24 +0000"  >&lt;p&gt;Pushed to 0.98+&lt;/p&gt;</comment>
                            <comment id="14522442" author="hudson" created="Thu, 30 Apr 2015 23:07:13 +0000"  >&lt;p&gt;SUCCESS: Integrated in HBase-1.0 #891 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.0/891/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.0/891/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13420&quot; title=&quot;RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13420&quot;&gt;&lt;del&gt;HBASE-13420&lt;/del&gt;&lt;/a&gt; RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load (apurtell: rev a17a3607ed76b4d99ee24b6aece1354cfa071c4b)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestBoundedConcurrentLinkedQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BoundedConcurrentLinkedQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14522462" author="hudson" created="Thu, 30 Apr 2015 23:22:54 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.1 #454 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.1/454/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.1/454/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13420&quot; title=&quot;RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13420&quot;&gt;&lt;del&gt;HBASE-13420&lt;/del&gt;&lt;/a&gt; RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load (apurtell: rev 786a413ec9c7b29311a49d0afb972fad7b4d3340)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestBoundedConcurrentLinkedQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BoundedConcurrentLinkedQueue.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14522475" author="hudson" created="Thu, 30 Apr 2015 23:31:32 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-1.2 #47 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-1.2/47/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-1.2/47/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13420&quot; title=&quot;RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13420&quot;&gt;&lt;del&gt;HBASE-13420&lt;/del&gt;&lt;/a&gt; RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load (apurtell: rev 6d40b547aea3046d5d05760c1ced6f62f59e1448)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BoundedConcurrentLinkedQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestBoundedConcurrentLinkedQueue.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14522545" author="hudson" created="Fri, 1 May 2015 00:25:53 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-TRUNK #6442 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-TRUNK/6442/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-TRUNK/6442/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13420&quot; title=&quot;RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13420&quot;&gt;&lt;del&gt;HBASE-13420&lt;/del&gt;&lt;/a&gt; RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load (apurtell: rev 81e793e582f93af6edf53620d49de6fa4bb21a6f)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BoundedConcurrentLinkedQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestBoundedConcurrentLinkedQueue.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14522608" author="hudson" created="Fri, 1 May 2015 01:19:14 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.98 #970 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98/970/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98/970/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13420&quot; title=&quot;RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13420&quot;&gt;&lt;del&gt;HBASE-13420&lt;/del&gt;&lt;/a&gt; RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load (apurtell: rev 0f3de8a17662b3305fc862c1c5b46f71206e3272)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BoundedConcurrentLinkedQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestBoundedConcurrentLinkedQueue.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14522761" author="hudson" created="Fri, 1 May 2015 04:46:53 +0000"  >&lt;p&gt;FAILURE: Integrated in HBase-0.98-on-Hadoop-1.1 #923 (See &lt;a href=&quot;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/923/&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://builds.apache.org/job/HBase-0.98-on-Hadoop-1.1/923/&lt;/a&gt;)&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-13420&quot; title=&quot;RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-13420&quot;&gt;&lt;del&gt;HBASE-13420&lt;/del&gt;&lt;/a&gt; RegionEnvironment.offerExecutionLatency Blocks Threads under Heavy Load (apurtell: rev 0f3de8a17662b3305fc862c1c5b46f71206e3272)&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/RegionCoprocessorHost.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/test/java/org/apache/hadoop/hbase/util/TestBoundedConcurrentLinkedQueue.java&lt;/li&gt;
	&lt;li&gt;hbase-server/src/main/java/org/apache/hadoop/hbase/util/BoundedConcurrentLinkedQueue.java&lt;/li&gt;
&lt;/ul&gt;
</comment>
                            <comment id="14529640" author="apache9" created="Wed, 6 May 2015 00:32:00 +0000"  >&lt;p&gt;This patch introduces 3 high priority findbugs warnings(VO_VOLATILE_INCREMENT).&lt;br/&gt;
Mind I open a issue to change &apos;size&apos; from volatile to AtomicLong? &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=apurtell&quot; class=&quot;user-hover&quot; rel=&quot;apurtell&quot;&gt;Andrew Purtell&lt;/a&gt;.&lt;br/&gt;
Thanks.&lt;/p&gt;</comment>
                            <comment id="14529647" author="apurtell" created="Wed, 6 May 2015 00:37:58 +0000"  >&lt;p&gt;Sure, that&apos;s fine. Didn&apos;t notice the warnings. &lt;/p&gt;</comment>
                            <comment id="14529743" author="jleach" created="Wed, 6 May 2015 01:51:13 +0000"  >&lt;p&gt;Andrew,&lt;/p&gt;

&lt;p&gt;Sorry for the delay, day job is killing me.  Our workload hammers the metrics collection since it is called on really low level items (startRegionOperation and stopRegionOperation)...  My vote is to remove this metric because it is really hard to understand what it is measuring...  Oops, I do not have a vote.  &lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
John Leach&lt;/p&gt;</comment>
                            <comment id="14529767" author="apurtell" created="Wed, 6 May 2015 02:14:52 +0000"  >&lt;blockquote&gt;&lt;p&gt;Oops, I do not have a vote.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;That&apos;s not really accurate, or a fair statement. It&apos;s a good suggestion, but we have already explained above why this metric can&apos;t just come out of shipping releases, but we&apos;ve then put a fair amount of effort into reducing the impact that you&apos;ve reported. Absolutely this metric can be removed according to our compatibility guarantees, we could possibly do this in 1.2 or certainly 2.0. Please feel free to file an issue for that and we will definitely look at it.&lt;/p&gt;</comment>
                            <comment id="14571253" author="jleach" created="Wed, 3 Jun 2015 16:07:03 +0000"  >&lt;p&gt;Andrew,&lt;/p&gt;

&lt;p&gt;Sorry for the delay, I have been jumping around a bit.  We just tested your patch during a data load of the LINE_ITEM table for the TPCC benchmark.  Your change removed 140 seconds of blocked CPU for a 30M row load.&lt;/p&gt;

&lt;p&gt;Regards,&lt;br/&gt;
John  &lt;/p&gt;</comment>
                            <comment id="14724257" author="enis" created="Mon, 31 Aug 2015 22:39:45 +0000"  >&lt;p&gt;Closing this issue after 1.0.2 release.&lt;/p&gt;</comment>
                            <comment id="15063438" author="busbey" created="Fri, 18 Dec 2015 04:45:19 +0000"  >&lt;p&gt;should this still carry a fixversion of 1.2.0 and 2.0.0? the changes here were effectively removed by &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-14205&quot; title=&quot;RegionCoprocessorHost System.nanoTime() performance bottleneck&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-14205&quot;&gt;&lt;del&gt;HBASE-14205&lt;/del&gt;&lt;/a&gt;.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="12310051">
                    <name>Supercedes</name>
                                                                <inwardlinks description="is superceded by">
                                        <issuelink>
            <issuekey id="12854098">HBASE-14205</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12726753" name="1M-0.98.12.svg" size="705668" author="apurtell" created="Tue, 21 Apr 2015 01:59:14 +0000"/>
                            <attachment id="12726754" name="1M-0.98.13-SNAPSHOT.svg" size="689500" author="apurtell" created="Tue, 21 Apr 2015 01:59:14 +0000"/>
                            <attachment id="12723780" name="HBASE-13420.patch" size="9479" author="apurtell" created="Tue, 7 Apr 2015 23:41:38 +0000"/>
                            <attachment id="12723752" name="HBASE-13420.txt" size="714" author="jleach" created="Tue, 7 Apr 2015 22:02:23 +0000"/>
                            <attachment id="12724276" name="hbase-13420.tar.gz" size="10677" author="apurtell" created="Thu, 9 Apr 2015 17:47:57 +0000"/>
                            <attachment id="12723725" name="offerExecutionLatency.tiff" size="212128" author="jleach" created="Tue, 7 Apr 2015 20:44:44 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>6.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 7 Apr 2015 22:35:29 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310191" key="com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes">
                        <customfieldname>Hadoop Flags</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="10343"><![CDATA[Reviewed]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            1 year ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2cxkf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>