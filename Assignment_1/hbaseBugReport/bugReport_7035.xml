<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:42:04 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-7035/HBASE-7035.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-7035] Thrift 2 server closes HTable of open Scanners</title>
                <link>https://issues.apache.org/jira/browse/HBASE-7035</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;ThriftHBaseServiceHandler.openScanner() does this:&lt;br/&gt;
1. table = pool.getTable()&lt;br/&gt;
2. scanner = table.getScanner()&lt;br/&gt;
3. table.close()&lt;br/&gt;
4. return scanner&lt;/p&gt;

&lt;p&gt;While back porting the thrift server to 0.92.6, I found that table.close() calls connection.close(). Further calls to scanner.next() raise a ConnectionClosed exception. The unit tests do not catch this since they reuse an open HConnection instance.&lt;/p&gt;

&lt;p&gt;This might work on trunk, but depends on the implementations of HTablePool, HTable and HConnectionManager. Even with the pool wrapper, if the pool is full, table.close() may be called, which may invalidate the table. Also,  HTable is not thread-safe, but they are being reused since they go back in the pool.&lt;/p&gt;

&lt;p&gt;I suggest storing the table handle along with the scanner.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12613117">HBASE-7035</key>
            <summary>Thrift 2 server closes HTable of open Scanners</summary>
                <type id="7" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/subtask_alternate.png">Sub-task</type>
                            <parent id="12655350">HBASE-8818</parent>
                                    <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="larsgeorge">Lars George</assignee>
                                    <reporter username="akvadrako">Devin Bayer</reporter>
                        <labels>
                            <label>thrift2</label>
                    </labels>
                <created>Tue, 23 Oct 2012 09:26:49 +0000</created>
                <updated>Wed, 17 Jul 2013 10:26:42 +0000</updated>
                            <resolved>Wed, 17 Jul 2013 08:01:24 +0000</resolved>
                                    <version>0.94.4</version>
                                                    <component>Thrift</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                <comments>
                            <comment id="13482220" author="akvadrako" created="Tue, 23 Oct 2012 09:28:07 +0000"  >&lt;p&gt;The open tables should also not be leaked.&lt;/p&gt;</comment>
                            <comment id="13485554" author="stack" created="Sun, 28 Oct 2012 03:02:06 +0000"  >&lt;p&gt;You have a patch for us Devin?  You using thrift2?  Its working for you?&lt;/p&gt;</comment>
                            <comment id="13500435" author="akvadrako" created="Mon, 19 Nov 2012 17:48:18 +0000"  >&lt;p&gt;stack: patch is attached. It does work for us.&lt;/p&gt;</comment>
                            <comment id="13707687" author="larsgeorge" created="Sat, 13 Jul 2013 07:44:34 +0000"  >&lt;p&gt;Hey &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=akvadrako&quot; class=&quot;user-hover&quot; rel=&quot;akvadrako&quot;&gt;Devin Bayer&lt;/a&gt;, so this is more like Thrift 1, which stores the tables in a ThreadLocal instance to keep it open, not using the HTablePool at all? In other words, you remove the pool here as well, keeping the tables for each scanner separately? Sounds reasonable to me.&lt;/p&gt;</comment>
                            <comment id="13707696" author="madani" created="Sat, 13 Jul 2013 08:39:38 +0000"  >&lt;p&gt;looking at &lt;b&gt;htablePool.java&lt;/b&gt;, I don&apos;t think it&apos;s necessary to change closeTable() function. Both table.close() and htablePool.putTable(table) are calling returnTable(). from what I see putTable() is deprecated. &lt;/p&gt;</comment>
                            <comment id="13707783" author="akvadrako" created="Sat, 13 Jul 2013 17:00:21 +0000"  >&lt;p&gt;Lars: That&apos;s a mistake - we should use HTablePool to avoid recreating the HTable instances.&lt;/p&gt;

&lt;p&gt;Hamed: It depends on the HBase version. As this was about backporting to 0.94.4, putTable() was needed.&lt;/p&gt;</comment>
                            <comment id="13707811" author="larsgeorge" created="Sat, 13 Jul 2013 18:41:15 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=madani&quot; class=&quot;user-hover&quot; rel=&quot;madani&quot;&gt;Hamed Madani&lt;/a&gt;, I am not sure what you are looking at. HTable has no reference to any HTablePool instance, so calling HTable.close does not return it to the pool. There is an internal pool of worker threads handled in HTable.close() but that is unrelated.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=akvadrako&quot; class=&quot;user-hover&quot; rel=&quot;akvadrako&quot;&gt;Devin Bayer&lt;/a&gt;, I see what you are saying - and of course we need to hold on to the table instances - either using HTablePool or as Thrift 1 does with our own list (which you do of sorts). &lt;/p&gt;

&lt;p&gt;Your patch does change the behaviour so that when a scanner is opened, the HTable instance is &lt;b&gt;not&lt;/b&gt; returned to the pool, but only when you close the scanner. &lt;/p&gt;

&lt;p&gt;The first issue you are describing is that when you return the table, you might run into the issue that the table is reused although they are not thread safe. That should not be an issue since you are not using the table anymore, but a scanner instance. I think the second issue you describe is the problem, i.e. when a table is closed, the underlying connection is closed possibly, and therefore leaves the scanner dangling.&lt;/p&gt;

&lt;p&gt;I need to look into 0.94, 0.95 and trunk/0.98 to see what the status (as you and Hamed touch upon above). If we decide to hang on, we could wrap this into &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-3852&quot; title=&quot;ThriftServer leaks scanners&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-3852&quot;&gt;&lt;del&gt;HBASE-3852&lt;/del&gt;&lt;/a&gt; which creates a Scanner wrapper, holding a last-used time and the actual result scanner. We could easily add the table instance there and hold on to it in one map. Same thing as yours, just a merge.&lt;/p&gt;
</comment>
                            <comment id="13707816" author="larsgeorge" created="Sat, 13 Jul 2013 19:08:20 +0000"  >&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=madani&quot; class=&quot;user-hover&quot; rel=&quot;madani&quot;&gt;Hamed Madani&lt;/a&gt;, ah sorry, you meant the PooledHTable wrapper handed out by the pool. Makes sense now. &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=akvadrako&quot; class=&quot;user-hover&quot; rel=&quot;akvadrako&quot;&gt;Devin Bayer&lt;/a&gt; is right though, this has changed over time, but what we are concerned about today is all sharing the same wrapper, i.e. &lt;a href=&quot;https://github.com/apache/hbase/blob/0.94/src/main/java/org/apache/hadoop/hbase/client/HTablePool.java#L177&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HTablePool&lt;/a&gt; in 0.94&apos;s branch head.&lt;/p&gt;

&lt;p&gt;So we are facing the above question then really, should we hold on to the table instance or not. I am looking it that now, but please let me know your thoughts.&lt;/p&gt;</comment>
                            <comment id="13707828" author="larsgeorge" created="Sat, 13 Jul 2013 20:14:15 +0000"  >&lt;p&gt;Connections are reference counted, see &lt;a href=&quot;https://github.com/apache/hbase/blob/0.94/src/main/java/org/apache/hadoop/hbase/client/HConnectionManager.java#L296&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HConnectionManager&lt;/a&gt; for reference. So given the issues we had with connection identities in there are fixed, we should be OK to close a table as the connection will be counted down? But then the scanner is a non-counted reference, but only when all tables are closed and the reference count ends up being zero it gets really closed. By that time scanners should be all done?&lt;/p&gt;

&lt;p&gt;The other option we discussed is to hold on to the table for the scanner, but then we have one for every instance, which is way too much under load. We only need to hold on to one per table, therefore keeping the umbilical cord alive (so to speak).&lt;/p&gt;</comment>
                            <comment id="13708010" author="akvadrako" created="Sun, 14 Jul 2013 12:22:38 +0000"  >&lt;p&gt;Hi Lars:&lt;/p&gt;

&lt;p&gt;If we just put HTable back into the pool, I think the connection count will never be reduced, so it will never reach zero and we&apos;ll be OK. If that isn&apos;t guaranteed by HTablePool, we must wait until the thrift connection is closed.&lt;/p&gt;

&lt;p&gt;However, the &lt;a href=&quot;https://github.com/apache/hbase/blob/0.94/src/main/java/org/apache/hadoop/hbase/client/HTable.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HTable&lt;/a&gt; interface doesn&apos;t guarantee thread safety between scanners, so we can&apos;t share them between threads anyway.&lt;/p&gt;

&lt;p&gt;We might as well just hold onto the HTable until the thrift connection is closed or we&apos;re really getting too deep into HBase internals.&lt;/p&gt;</comment>
                            <comment id="13708061" author="larsgeorge" created="Sun, 14 Jul 2013 16:09:33 +0000"  >&lt;p&gt;Hey &lt;a href=&quot;https://issues.apache.org/jira/secure/ViewProfile.jspa?name=akvadrako&quot; class=&quot;user-hover&quot; rel=&quot;akvadrako&quot;&gt;Devin Bayer&lt;/a&gt;, &lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;If we just put HTable back into the pool, I think the connection count will never be reduced, so it will never reach zero and we&apos;ll be OK. &lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Yes, that was my point, since the connection is always used by some tables, we should be fine.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;However, the HTable interface doesn&apos;t guarantee thread safety between scanners, so we can&apos;t share them between threads anyway.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That was my earlier point, this does not matter with scanners. You can return the table to the pool and another thread can use it fine - given only one thread at a time is using it, and that is guaranteed by the default PoolMap in HTablePool. The scanner (i.e. ClientScanner instance) is independent and only shares the connection, which is shared by all tables anyways. Could you elaborate on where you think this is flawed?&lt;/p&gt;</comment>
                            <comment id="13708288" author="akvadrako" created="Mon, 15 Jul 2013 07:29:36 +0000"  >&lt;p&gt;If you read &lt;a href=&quot;http://hbase.apache.org/apidocs/org/apache/hadoop/hbase/client/HTable.html&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HTable&lt;/a&gt; is says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This class is not thread safe for reads nor write.&lt;br/&gt;
...&lt;br/&gt;
In case of reads, some fields used by a Scan are shared among all threads. The HTable implementation can either not contract to be safe in case of a Get&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;That does not inspire confidence that scanners are or will remain threadsafe - in fact it suggests the opposite.&lt;/p&gt;</comment>
                            <comment id="13708293" author="larsgeorge" created="Mon, 15 Jul 2013 07:41:13 +0000"  >&lt;p&gt;Hi Devin, I would not be surprised if this is outdated. I know that for writing the local client side write buffer is an issue since it is not thread safe. But for reading, this is news to me. Looking at the code, the ClientScanner has no reference to the HTable, and it does RPC requests to the RegionServers directly through the shared connection. I think we should raise a new JIRA to fix the JavaDoc for the HTable class and make sure it is current.&lt;/p&gt;</comment>
                            <comment id="13708295" author="larsgeorge" created="Mon, 15 Jul 2013 07:56:32 +0000"  >&lt;p&gt;Looking at &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-4205&quot; title=&quot;Enhance HTable javadoc&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-4205&quot;&gt;&lt;del&gt;HBASE-4205&lt;/del&gt;&lt;/a&gt;, where this wording was added, it does not explain the reasons. For writing, this is clear, but not for reading. The &lt;a href=&quot;https://github.com/apache/hbase/blob/7f730d7742a523315db98d5adc879e67ed90350b/src/main/java/org/apache/hadoop/hbase/client/HTable.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;HTable&lt;/a&gt; from back then (0.90.4) has changed a bit, and is now been given the connection reference directly, as opposed to be calling the method of the wrapping HTable instance. I&apos;ll raise this question up on dev@ to confirm the status quo.&lt;/p&gt;

&lt;p&gt;But, assuming the reading path is thread safe, we should be fine overall, no? Then using the pool is doing the job needed, keeping the connection open. In other words, for 0.94+ we do not need your patch? Not wanting to ruin the show here, please forgive me. &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.gif&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;</comment>
                            <comment id="13708328" author="akvadrako" created="Mon, 15 Jul 2013 09:03:17 +0000"  >&lt;p&gt;Hi Lars - what about this:&lt;/p&gt;

&lt;p&gt;If the pool is full, table.close() may be called by HTablePool. This calls connection.close(), but ResultScanner calls table.getConnection().&lt;/p&gt;

&lt;p&gt;OK, maybe it will happen to work due to various coincidences, but it&apos;s not obvious it will work 100% of the time. For sure we must not change implementations of HTable, HConnection or HTablePool. We must also set the pool size greater than the thrift thread size.&lt;/p&gt;

&lt;p&gt;ClientScanner is an inner class and does retain a reference to the HTable instance.&lt;/p&gt;

&lt;p&gt;I think it&apos;s just asking for trouble.&lt;/p&gt;</comment>
                            <comment id="13708333" author="larsgeorge" created="Mon, 15 Jul 2013 09:09:16 +0000"  >&lt;blockquote&gt;&lt;p&gt;If the pool is full, table.close() may be called by HTablePool. This calls connection.close(), but ResultScanner calls table.getConnection().&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;No Devin, that was my point earlier, the connection.close() call use a reference counter. It does not close the connection while there are other &quot;users&quot;. And in case of Thrift, it has a pool still open and therefore the connection will &lt;b&gt;not&lt;/b&gt; be closed under the hood.&lt;/p&gt;

&lt;p&gt;You do &lt;b&gt;not&lt;/b&gt; have to set the pool size any different, or even larger at all.&lt;/p&gt;

&lt;p&gt;As long as the HTablePool is not closed, all is fine.&lt;/p&gt;</comment>
                            <comment id="13708337" author="larsgeorge" created="Mon, 15 Jul 2013 09:17:20 +0000"  >&lt;p&gt;But this does point me to the actual pool size settings:&lt;/p&gt;

&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  ThriftHBaseServiceHandler(Configuration conf) {
    htablePool = &lt;span class=&quot;code-keyword&quot;&gt;new&lt;/span&gt; HTablePool(conf, &lt;span class=&quot;code-object&quot;&gt;Integer&lt;/span&gt;.MAX_VALUE);
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;which means it is pretty much unbound. That seems wrong too. I create &lt;a href=&quot;https://issues.apache.org/jira/browse/HBASE-8948&quot; title=&quot;Bound table pool size in Thrift 2 server&quot; class=&quot;issue-link&quot; data-issue-key=&quot;HBASE-8948&quot;&gt;&lt;del&gt;HBASE-8948&lt;/del&gt;&lt;/a&gt; to track that separately.&lt;/p&gt;</comment>
                            <comment id="13710835" author="larsgeorge" created="Wed, 17 Jul 2013 07:59:44 +0000"  >&lt;p&gt;I tried to figure what the status quo is here and did create a test app (&lt;a href=&quot;https://github.com/larsgeorge/hbase-scanner-test&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/larsgeorge/hbase-scanner-test&lt;/a&gt;), which simulates the discussed issue. I am testing this on 0.94 to see what happens from there on out. So I found that it is pretty much impossible to close the connection, since there are many classes holding a reference to it. It is also unlikely that you have a separate config instance and therefore cause a second connection to be tracked. &lt;/p&gt;

&lt;p&gt;Also, as suspected, scans do &lt;b&gt;not&lt;/b&gt; share anything with the table instance they were created from, besides the connection. So while it is possible to close the table and reduce the reference counter, it is unlikely for the above reasons (and testing) that this causes issues. Since they only share the connection, ResultScanners are thread-safe (go figure).&lt;/p&gt;

&lt;p&gt;I am closing this issue for now as not relevant, please reopen if someone feels I missed something.&lt;/p&gt;</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10030">
                    <name>Reference</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="12506128">HBASE-3852</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="12655368">HBASE-8825</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="12554199" name="old-hbase-thrift-v1.patch" size="1884" author="akvadrako" created="Mon, 19 Nov 2012 17:47:59 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sun, 28 Oct 2012 03:02:06 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>250523</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            3 years, 22 weeks, 2 days ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0az3b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>61958</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>