<!-- 
RSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16) at Fri Dec 16 19:35:56 UTC 2016

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.
For example:
https://issues.apache.org/jira/si/jira.issueviews:issue-xml/HBASE-6345/HBASE-6345.xml?field=key&amp;field=summary
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>6.3.4</version>
        <build-number>6332</build-number>
        <build-date>15-08-2014</build-date>
    </build-info>

<item>
            <title>[HBASE-6345] Utilize fault injection in testing using AspectJ</title>
                <link>https://issues.apache.org/jira/browse/HBASE-6345</link>
                <project id="12310753" key="HBASE">HBase</project>
                    <description>&lt;p&gt;HDFS uses fault injection to test pipeline failure in addition to mock, spy. HBase uses mock, spy. But there are cases where mock, spy aren&apos;t convenient.&lt;/p&gt;

&lt;p&gt;Some example from DFSClientAspects.aj :&lt;/p&gt;
&lt;div class=&quot;code panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;codeContent panelContent&quot;&gt;
&lt;pre class=&quot;code-java&quot;&gt;
  pointcut pipelineInitNonAppend(DataStreamer datastreamer):
    callCreateBlockOutputStream(datastreamer)
    &amp;amp;&amp;amp; cflow(execution(* nextBlockOutputStream(..)))
    &amp;amp;&amp;amp; within(DataStreamer);

  after(DataStreamer datastreamer) returning : pipelineInitNonAppend(datastreamer) {
    LOG.info(&lt;span class=&quot;code-quote&quot;&gt;&quot;FI: after pipelineInitNonAppend: hasError=&quot;&lt;/span&gt;
        + datastreamer.hasError + &lt;span class=&quot;code-quote&quot;&gt;&quot; errorIndex=&quot;&lt;/span&gt; + datastreamer.errorIndex);
    &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (datastreamer.hasError) {
      DataTransferTest dtTest = DataTransferTestUtil.getDataTransferTest();
      &lt;span class=&quot;code-keyword&quot;&gt;if&lt;/span&gt; (dtTest != &lt;span class=&quot;code-keyword&quot;&gt;null&lt;/span&gt;)
        dtTest.fiPipelineInitErrorNonAppend.run(datastreamer.errorIndex);
    }
  }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;</description>
                <environment></environment>
        <key id="12597850">HBASE-6345</key>
            <summary>Utilize fault injection in testing using AspectJ</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/images/icons/issuetypes/bug.png">Bug</type>
                                            <priority id="3" iconUrl="https://issues.apache.org/jira/images/icons/priorities/major.png">Major</priority>
                        <status id="5" iconUrl="https://issues.apache.org/jira/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="2">Won&apos;t Fix</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="zhihyu@ebaysf.com">Ted Yu</reporter>
                        <labels>
                    </labels>
                <created>Fri, 6 Jul 2012 23:15:29 +0000</created>
                <updated>Fri, 20 Jul 2012 03:35:29 +0000</updated>
                            <resolved>Fri, 20 Jul 2012 03:35:29 +0000</resolved>
                                                                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                <comments>
                            <comment id="13408483" author="apurtell" created="Sat, 7 Jul 2012 00:32:18 +0000"  >&lt;p&gt;I have a vague memory of hearing that HDFS was moving away from the FI stuff.&lt;/p&gt;</comment>
                            <comment id="13409823" author="tlipcon" created="Mon, 9 Jul 2012 20:37:58 +0000"  >&lt;p&gt;Yea, we haven&apos;t been using the AspectJ FI stuff since we mavenized quite some time ago. It was a pain to maintain, and only one person ever really knew how to write FI tests with this framework.&lt;/p&gt;

&lt;p&gt;All of our new fault injection tests are just using Mockito. Where necessary we&apos;re adding FaultInjector classes which are easy to hook, for example: &lt;a href=&quot;https://github.com/toddlipcon/hadoop-common/blob/auto-failover-and-qjournal/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CheckpointFaultInjector.java&quot; class=&quot;external-link&quot; rel=&quot;nofollow&quot;&gt;https://github.com/toddlipcon/hadoop-common/blob/auto-failover-and-qjournal/hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/CheckpointFaultInjector.java&lt;/a&gt;&lt;/p&gt;</comment>
                            <comment id="13409865" author="stack" created="Mon, 9 Jul 2012 21:24:19 +0000"  >&lt;p&gt;So we should close this issue or redo as &apos;Fault Injection in testing&apos;?  (Is that too vague?)&lt;/p&gt;</comment>
                            <comment id="13409902" author="mingma" created="Mon, 9 Jul 2012 22:00:30 +0000"  >&lt;p&gt;Couple comments for Todd and others. I did some my investigation on this topic last week and found testing data streaming pipeline in hdfs requires fi. Is there any other reasons not to use fi besides &quot;hard to maintain&quot;?&lt;/p&gt;

&lt;p&gt;1. I have just got maven + aspectJ working for hbase. It does require some learning to write fi test; but it doesn&apos;t seem to be that hard.&lt;br/&gt;
2. It looks like CheckpointFaultInjector example above requires code change in hadoop core. fi doesn&apos;t require that. I find it useful to not require core code change to inject failure at any place. On frequently called function, adding call to fault injector in the core code might have perf impact.&lt;/p&gt;</comment>
                            <comment id="13409915" author="tlipcon" created="Mon, 9 Jul 2012 22:25:09 +0000"  >&lt;blockquote&gt;&lt;p&gt;Couple comments for Todd and others. I did some my investigation on this topic last week and found testing data streaming pipeline in hdfs requires fi. Is there any other reasons not to use fi besides &quot;hard to maintain&quot;?&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, it used to, but when we mavenized, we lost the ability to actually run those tests. So if they&apos;re still in the code base, they&apos;re not getting compiled or run, and I doubt they work anymore.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;I have just got maven + aspectJ working for hbase. It does require some learning to write fi test; but it doesn&apos;t seem to be that hard.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;It&apos;s not that it&apos;s super hard, but it does take many hours of learning to be able to write even the simplest test. I found this to be a big pain when refactoring or otherwise changing the Hadoop code. I wanted to restructure a bit of that code at one point, and it basically took me a day to learn enough AspectJ to figure out how to do it - they are lots of new concepts like &quot;advices&quot; and &quot;pointcuts&quot; which need to be understood before you can get very far. In contrast, the simple Java approach is immediately obvious to anyone who looks at the code, and also &quot;plays nice&quot; with IDE features - for example, you can right click on the fault point you&apos;re interested in, search for references, and see all of the unit tests which touch this fault injection point.&lt;/p&gt;


&lt;blockquote&gt;&lt;p&gt;It looks like CheckpointFaultInjector example above requires code change in hadoop core. fi doesn&apos;t require that. I find it useful to not require core code change to inject failure at any place. On frequently called function, adding call to fault injector in the core code might have perf impact.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;In a JITted language, the perf impact of this should be zero. The reason being is that the JVM can figure out that there&apos;s only one implementation of the method being called (since the actual fault injection implementation hasn&apos;t been classloaded). So, it directly inlines the empty method, and thus disappears entirely.&lt;/p&gt;

&lt;p&gt;I&apos;ve heard the argument before that the fault points clutter the production code, and people find that ugly. I personally take the opposite opinion here: the fact that there are fault hooks in the non-test code means that anyone else coming alone will better understand what kind of faults are important to consider for the code in question. And, when they change the code, they&apos;ll be much more aware of the potential faults they need to take into account.&lt;/p&gt;</comment>
                            <comment id="13410868" author="zhihyu@ebaysf.com" created="Tue, 10 Jul 2012 20:42:35 +0000"  >&lt;p&gt;Will wait for 24 hours before closing out this JIRA.&lt;/p&gt;</comment>
                            <comment id="13418905" author="zhihyu@ebaysf.com" created="Fri, 20 Jul 2012 03:35:29 +0000"  >&lt;p&gt;There was not enough incentive to pursue fault injection using AspectJ.&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310220" key="com.atlassian.jira.ext.charting:firstresponsedate">
                        <customfieldname>Date of First Response</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Sat, 7 Jul 2012 00:32:18 +0000</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                                                                            <customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>245336</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            4 years, 22 weeks ago
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i067w7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>34210</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12310222" key="com.atlassian.jira.ext.charting:timeinstatus">
                        <customfieldname>Time in Status</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        </customfields>
    </item>
</channel>
</rss>